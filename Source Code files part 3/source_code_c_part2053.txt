         PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilter";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFilterCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFilterCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFilterCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilter";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFilterCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFilterCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilter", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFilterCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilter CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilter(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFilterCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFilterCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilter(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFilterEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFilterEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFilterEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilter(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsCompressionSchemesSetting.cs ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2
{
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsCompressionSchemesSetting
    public class IIsCompressionSchemesSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsCompressionSchemesSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsCompressionSchemesSetting() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsCompressionSchemesSetting(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsCompressionSchemesSetting.ConstructPath(keyName)), null);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsCompressionSchemesSetting.ConstructPath(keyName)), null);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsCompressionSchemesSetting(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public byte[] AdminACLBin {
            get {
                return ((byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("A short textual description (one-line string) of the CIM_Setting object.")]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("A textual description of the CIM_Setting object.")]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HcCacheControlHeader {
            get {
                return ((string)(curObj["HcCacheControlHeader"]));
            }
            set {
                curObj["HcCacheControlHeader"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcCompressionBufferSizeNull {
            get {
                if ((curObj["HcCompressionBufferSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcCompressionBufferSize {
            get {
                if ((curObj["HcCompressionBufferSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcCompressionBufferSize"]));
            }
            set {
                curObj["HcCompressionBufferSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HcCompressionDirectory {
            get {
                return ((string)(curObj["HcCompressionDirectory"]));
            }
            set {
                curObj["HcCompressionDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcDoDiskSpaceLimitingNull {
            get {
                if ((curObj["HcDoDiskSpaceLimiting"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcDoDiskSpaceLimiting {
            get {
                if ((curObj["HcDoDiskSpaceLimiting"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcDoDiskSpaceLimiting"]));
            }
            set {
                curObj["HcDoDiskSpaceLimiting"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcDoDynamicCompressionNull {
            get {
                if ((curObj["HcDoDynamicCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcDoDynamicCompression {
            get {
                if ((curObj["HcDoDynamicCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcDoDynamicCompression"]));
            }
            set {
                curObj["HcDoDynamicCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcDoOnDemandCompressionNull {
            get {
                if ((curObj["HcDoOnDemandCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcDoOnDemandCompression {
            get {
                if ((curObj["HcDoOnDemandCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcDoOnDemandCompression"]));
            }
            set {
                curObj["HcDoOnDemandCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcDoStaticCompressionNull {
            get {
                if ((curObj["HcDoStaticCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcDoStaticCompression {
            get {
                if ((curObj["HcDoStaticCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcDoStaticCompression"]));
            }
            set {
                curObj["HcDoStaticCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HcExpiresHeader {
            get {
                return ((string)(curObj["HcExpiresHeader"]));
            }
            set {
                curObj["HcExpiresHeader"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcFilesDeletedPerDiskFreeNull {
            get {
                if ((curObj["HcFilesDeletedPerDiskFree"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcFilesDeletedPerDiskFree {
            get {
                if ((curObj["HcFilesDeletedPerDiskFree"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcFilesDeletedPerDiskFree"]));
            }
            set {
                curObj["HcFilesDeletedPerDiskFree"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcIoBufferSizeNull {
            get {
                if ((curObj["HcIoBufferSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcIoBufferSize {
            get {
                if ((curObj["HcIoBufferSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcIoBufferSize"]));
            }
            set {
                curObj["HcIoBufferSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcMaxDiskSpaceUsageNull {
            get {
                if ((curObj["HcMaxDiskSpaceUsage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcMaxDiskSpaceUsage {
            get {
                if ((curObj["HcMaxDiskSpaceUsage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcMaxDiskSpaceUsage"]));
            }
            set {
                curObj["HcMaxDiskSpaceUsage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcMaxQueueLengthNull {
            get {
                if ((curObj["HcMaxQueueLength"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcMaxQueueLength {
            get {
                if ((curObj["HcMaxQueueLength"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcMaxQueueLength"]));
            }
            set {
                curObj["HcMaxQueueLength"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcMinFileSizeForCompNull {
            get {
                if ((curObj["HcMinFileSizeForComp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HcMinFileSizeForComp {
            get {
                if ((curObj["HcMinFileSizeForComp"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HcMinFileSizeForComp"]));
            }
            set {
                curObj["HcMinFileSizeForComp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcNoCompressionForHttp10Null {
            get {
                if ((curObj["HcNoCompressionForHttp10"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcNoCompressionForHttp10 {
            get {
                if ((curObj["HcNoCompressionForHttp10"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcNoCompressionForHttp10"]));
            }
            set {
                curObj["HcNoCompressionForHttp10"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcNoCompressionForProxiesNull {
            get {
                if ((curObj["HcNoCompressionForProxies"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcNoCompressionForProxies {
            get {
                if ((curObj["HcNoCompressionForProxies"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcNoCompressionForProxies"]));
            }
            set {
                curObj["HcNoCompressionForProxies"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcNoCompressionForRangeNull {
            get {
                if ((curObj["HcNoCompressionForRange"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcNoCompressionForRange {
            get {
                if ((curObj["HcNoCompressionForRange"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcNoCompressionForRange"]));
            }
            set {
                curObj["HcNoCompressionForRange"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHcSendCacheHeadersNull {
            get {
                if ((curObj["HcSendCacheHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool HcSendCacheHeaders {
            get {
                if ((curObj["HcSendCacheHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["HcSendCacheHeaders"]));
            }
            set {
                curObj["HcSendCacheHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [Description("The identifier by which the CIM_Setting object is known.")]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHcCacheControlHeader() {
            curObj["HcCacheControlHeader"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcCompressionBufferSize() {
            if ((this.IsHcCompressionBufferSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcCompressionBufferSize() {
            curObj["HcCompressionBufferSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHcCompressionDirectory() {
            curObj["HcCompressionDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcDoDiskSpaceLimiting() {
            if ((this.IsHcDoDiskSpaceLimitingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcDoDiskSpaceLimiting() {
            curObj["HcDoDiskSpaceLimiting"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcDoDynamicCompression() {
            if ((this.IsHcDoDynamicCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcDoDynamicCompression() {
            curObj["HcDoDynamicCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcDoOnDemandCompression() {
            if ((this.IsHcDoOnDemandCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcDoOnDemandCompression() {
            curObj["HcDoOnDemandCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcDoStaticCompression() {
            if ((this.IsHcDoStaticCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcDoStaticCompression() {
            curObj["HcDoStaticCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHcExpiresHeader() {
            curObj["HcExpiresHeader"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcFilesDeletedPerDiskFree() {
            if ((this.IsHcFilesDeletedPerDiskFreeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcFilesDeletedPerDiskFree() {
            curObj["HcFilesDeletedPerDiskFree"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcIoBufferSize() {
            if ((this.IsHcIoBufferSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcIoBufferSize() {
            curObj["HcIoBufferSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcMaxDiskSpaceUsage() {
            if ((this.IsHcMaxDiskSpaceUsageNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcMaxDiskSpaceUsage() {
            curObj["HcMaxDiskSpaceUsage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcMaxQueueLength() {
            if ((this.IsHcMaxQueueLengthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcMaxQueueLength() {
            curObj["HcMaxQueueLength"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcMinFileSizeForComp() {
            if ((this.IsHcMinFileSizeForCompNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcMinFileSizeForComp() {
            curObj["HcMinFileSizeForComp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcNoCompressionForHttp10() {
            if ((this.IsHcNoCompressionForHttp10Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcNoCompressionForHttp10() {
            curObj["HcNoCompressionForHttp10"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcNoCompressionForProxies() {
            if ((this.IsHcNoCompressionForProxiesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcNoCompressionForProxies() {
            curObj["HcNoCompressionForProxies"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcNoCompressionForRange() {
            if ((this.IsHcNoCompressionForRangeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcNoCompressionForRange() {
            curObj["HcNoCompressionForRange"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHcSendCacheHeaders() {
            if ((this.IsHcSendCacheHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHcSendCacheHeaders() {
            curObj["HcSendCacheHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsCompressionSchemesSetting";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsCompressionSchemesSettingCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsCompressionSchemesSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsCompressionSchemesSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsCompressionSchemesSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsCompressionSchemesSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsCompressionSchemesSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsCompressionSchemesSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsCompressionSchemesSetting(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsCompressionSchemesSettingCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsCompressionSchemesSettingCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsCompressionSchemesSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsCompressionSchemesSettingEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsCompressionSchemesSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsCompressionSchemesSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsCompressionSchemesSetting(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsFiltersSetting.cs ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsFiltersSetting
    public class IIsFiltersSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFiltersSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFiltersSetting() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFiltersSetting(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFiltersSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFiltersSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFiltersSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFiltersSetting(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFiltersSetting(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public byte[] AdminACLBin {
            get {
                return ((byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterLoadOrder {
            get {
                return ((string)(curObj["FilterLoadOrder"]));
            }
            set {
                curObj["FilterLoadOrder"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterLoadOrder() {
            curObj["FilterLoadOrder"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFiltersSetting";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFiltersSettingCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFiltersSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFiltersSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFiltersSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFiltersSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFiltersSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFiltersSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFiltersSetting(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFiltersSettingCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFiltersSettingCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFiltersSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFiltersSettingEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFiltersSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFiltersSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFiltersSetting(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsIPSecuritySetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsIPSecuritySetting
    public class IIsIPSecuritySetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsIPSecuritySetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsIPSecuritySetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsIPSecuritySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsIPSecuritySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsIPSecuritySetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainDeny {
            get {
                return ((string[])(curObj["DomainDeny"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainGrant {
            get {
                return ((string[])(curObj["DomainGrant"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsGrantByDefaultNull {
            get {
                if ((curObj["GrantByDefault"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool GrantByDefault {
            get {
                if ((curObj["GrantByDefault"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["GrantByDefault"]));
            }
            set {
                curObj["GrantByDefault"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] IPDeny {
            get {
                return ((string[])(curObj["IPDeny"]));
            }
            set {
                curObj["IPDeny"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] IPGrant {
            get {
                return ((string[])(curObj["IPGrant"]));
            }
            set {
                curObj["IPGrant"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeGrantByDefault() {
            if ((IsGrantByDefaultNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsIPSecuritySetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsIPSecuritySettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsIPSecuritySetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsIPSecuritySettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsIPSecuritySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsIPSecuritySetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsIPSecuritySettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsIPSecuritySetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsIPSecuritySetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsIPSecuritySettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsIPSecuritySettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsIPSecuritySetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsIPSecuritySettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsIPSecuritySettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsIPSecuritySettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsIPSecuritySetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsFilters.cs ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsFilters
    public class IIsFilters : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFilters";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFilters() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFilters(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFilters.ConstructPath(keyName)), null);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFilters.ConstructPath(keyName)), null);
        }
        
        public IIsFilters(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFilters(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFilters(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFilters(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFilters(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            System.DateTime initializer = System.DateTime.MinValue;
            int year = initializer.Year;
            int month = initializer.Month;
            int day = initializer.Day;
            int hour = initializer.Hour;
            int minute = initializer.Minute;
            int second = initializer.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = string.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = int.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = int.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = int.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = int.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = int.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = int.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (long.Parse(tempString) * ((long)((System.TimeSpan.TicksPerMillisecond / 1000))));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception e) {
                throw new System.ArgumentOutOfRangeException(null, e.Message);
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            int OffsetToBeAdjusted = 0;
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "******")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = int.Parse(tempString);
                }
                catch (System.Exception e) {
                    throw new System.ArgumentOutOfRangeException(null, e.Message);
                }
                OffsetToBeAdjusted = ((int)((OffsetMins - UTCOffset)));
                datetime = datetime.AddMinutes(((double)(OffsetToBeAdjusted)));
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = string.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = ((long)((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)));
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = string.Concat("+", ((System.Int64 )((tickOffset.Ticks / System.TimeSpan.TicksPerMinute))).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = ((System.Int64 )(OffsetMins)).ToString();
                    utcString = string.Concat("-", strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = ((System.Int32 )(date.Year)).ToString().PadLeft(4, '0');
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Month)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Day)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Hour)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Minute)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ((System.Int32 )(date.Second)).ToString().PadLeft(2, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = ((long)((((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond)));
            string strMicrosec = ((System.Int64 )(microsec)).ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = string.Concat(dmtfDateTime, strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = string.Concat(dmtfDateTime, utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((this.IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilters";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFiltersCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFiltersCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFiltersCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilters";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFiltersCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFiltersCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilters", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFiltersCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilters CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilters(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFiltersCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFiltersCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilters(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFiltersEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFiltersEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFiltersEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilters(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsMimeMap.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsMimeMap
    public class IIsMimeMap : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsMimeMap";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsMimeMap() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMap.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMap.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsMimeMap(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsMimeMap(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsMimeMap";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsMimeMapCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsMimeMapCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsMimeMapCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsMimeMap";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsMimeMapCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsMimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsMimeMap", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsMimeMapCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsMimeMap CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsMimeMap(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsMimeMapCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsMimeMapCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsMimeMap(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsMimeMapEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsMimeMapEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsMimeMapEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsMimeMap(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsMimeMapSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsMimeMapSetting
    public class IIsMimeMapSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsMimeMapSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsMimeMapSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMapSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsMimeMapSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsMimeMapSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsMimeMapSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsMimeMapSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsMimeMapSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsMimeMapSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsMimeMapSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsMimeMapSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsMimeMapSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsMimeMapSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsMimeMapSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsMimeMapSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsMimeMapSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsMimeMapSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsMimeMapSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsMimeMapSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsMimeMapSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsMimeMapSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsMimeMapSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsMimeMapSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsMimeMapSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsFilterSetting.cs ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsFilterSetting
    public class IIsFilterSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsFilterSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsFilterSetting() {
            this.InitializeObject(null, null, null);
        }
        
        public IIsFilterSetting(string keyName) {
            this.InitializeObject(null, new System.Management.ManagementPath(IIsFilterSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, string keyName) {
            this.InitializeObject(((System.Management.ManagementScope)(mgmtScope)), new System.Management.ManagementPath(IIsFilterSetting.ConstructPath(keyName)), null);
        }
        
        public IIsFilterSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(null, path, getOptions);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) {
            this.InitializeObject(mgmtScope, path, null);
        }
        
        public IIsFilterSetting(System.Management.ManagementPath path) {
            this.InitializeObject(null, path, null);
        }
        
        public IIsFilterSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            this.InitializeObject(mgmtScope, path, getOptions);
        }
        
        public IIsFilterSetting(System.Management.ManagementObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsFilterSetting(System.Management.ManagementBaseObject theObject) {
            Initialize();
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == string.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public byte[] AdminACLBin {
            get {
                return ((byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterDescription {
            get {
                return ((string)(curObj["FilterDescription"]));
            }
            set {
                curObj["FilterDescription"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterEnableCacheNull {
            get {
                if ((curObj["FilterEnableCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FilterEnableCache {
            get {
                if ((curObj["FilterEnableCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FilterEnableCache"]));
            }
            set {
                curObj["FilterEnableCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterEnabledNull {
            get {
                if ((curObj["FilterEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FilterEnabled {
            get {
                if ((curObj["FilterEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FilterEnabled"]));
            }
            set {
                curObj["FilterEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterFlagsNull {
            get {
                if ((curObj["FilterFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int FilterFlags {
            get {
                if ((curObj["FilterFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["FilterFlags"]));
            }
            set {
                curObj["FilterFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FilterPath {
            get {
                return ((string)(curObj["FilterPath"]));
            }
            set {
                curObj["FilterPath"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFilterStateNull {
            get {
                if ((curObj["FilterState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int FilterState {
            get {
                if ((curObj["FilterState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["FilterState"]));
            }
            set {
                curObj["FilterState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAccessDeniedNull {
            get {
                if ((curObj["NotifyAccessDenied"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAccessDenied {
            get {
                if ((curObj["NotifyAccessDenied"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAccessDenied"]));
            }
            set {
                curObj["NotifyAccessDenied"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAuthCompleteNull {
            get {
                if ((curObj["NotifyAuthComplete"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAuthComplete {
            get {
                if ((curObj["NotifyAuthComplete"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAuthComplete"]));
            }
            set {
                curObj["NotifyAuthComplete"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyAuthenticationNull {
            get {
                if ((curObj["NotifyAuthentication"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyAuthentication {
            get {
                if ((curObj["NotifyAuthentication"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyAuthentication"]));
            }
            set {
                curObj["NotifyAuthentication"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyEndOfNetSessionNull {
            get {
                if ((curObj["NotifyEndOfNetSession"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyEndOfNetSession {
            get {
                if ((curObj["NotifyEndOfNetSession"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyEndOfNetSession"]));
            }
            set {
                curObj["NotifyEndOfNetSession"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyEndOfRequestNull {
            get {
                if ((curObj["NotifyEndOfRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyEndOfRequest {
            get {
                if ((curObj["NotifyEndOfRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyEndOfRequest"]));
            }
            set {
                curObj["NotifyEndOfRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyLogNull {
            get {
                if ((curObj["NotifyLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyLog {
            get {
                if ((curObj["NotifyLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyLog"]));
            }
            set {
                curObj["NotifyLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyNonSecurePortNull {
            get {
                if ((curObj["NotifyNonSecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyNonSecurePort {
            get {
                if ((curObj["NotifyNonSecurePort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyNonSecurePort"]));
            }
            set {
                curObj["NotifyNonSecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderHighNull {
            get {
                if ((curObj["NotifyOrderHigh"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderHigh {
            get {
                if ((curObj["NotifyOrderHigh"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderHigh"]));
            }
            set {
                curObj["NotifyOrderHigh"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderLowNull {
            get {
                if ((curObj["NotifyOrderLow"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderLow {
            get {
                if ((curObj["NotifyOrderLow"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderLow"]));
            }
            set {
                curObj["NotifyOrderLow"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyOrderMediumNull {
            get {
                if ((curObj["NotifyOrderMedium"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyOrderMedium {
            get {
                if ((curObj["NotifyOrderMedium"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyOrderMedium"]));
            }
            set {
                curObj["NotifyOrderMedium"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyPreProcHeadersNull {
            get {
                if ((curObj["NotifyPreProcHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyPreProcHeaders {
            get {
                if ((curObj["NotifyPreProcHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyPreProcHeaders"]));
            }
            set {
                curObj["NotifyPreProcHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyReadRawDataNull {
            get {
                if ((curObj["NotifyReadRawData"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyReadRawData {
            get {
                if ((curObj["NotifyReadRawData"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyReadRawData"]));
            }
            set {
                curObj["NotifyReadRawData"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySecurePortNull {
            get {
                if ((curObj["NotifySecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySecurePort {
            get {
                if ((curObj["NotifySecurePort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySecurePort"]));
            }
            set {
                curObj["NotifySecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySendRawDataNull {
            get {
                if ((curObj["NotifySendRawData"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySendRawData {
            get {
                if ((curObj["NotifySendRawData"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySendRawData"]));
            }
            set {
                curObj["NotifySendRawData"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifySendResponseNull {
            get {
                if ((curObj["NotifySendResponse"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifySendResponse {
            get {
                if ((curObj["NotifySendResponse"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifySendResponse"]));
            }
            set {
                curObj["NotifySendResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNotifyUrlMapNull {
            get {
                if ((curObj["NotifyUrlMap"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool NotifyUrlMap {
            get {
                if ((curObj["NotifyUrlMap"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["NotifyUrlMap"]));
            }
            set {
                curObj["NotifyUrlMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (string.Compare(path.ClassName, this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (string.Compare(((string)(theObj["__CLASS"])), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    int count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((string.Compare(((string)(parentClasses.GetValue(count))), this.ManagementClassName, true, System.Globalization.CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterDescription() {
            curObj["FilterDescription"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterEnableCache() {
            if ((this.IsFilterEnableCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterEnableCache() {
            curObj["FilterEnableCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterEnabled() {
            if ((this.IsFilterEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterEnabled() {
            curObj["FilterEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterFlags() {
            if ((this.IsFilterFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterFlags() {
            curObj["FilterFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFilterPath() {
            curObj["FilterPath"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFilterState() {
            if ((this.IsFilterStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFilterState() {
            curObj["FilterState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAccessDenied() {
            if ((this.IsNotifyAccessDeniedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAccessDenied() {
            curObj["NotifyAccessDenied"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAuthComplete() {
            if ((this.IsNotifyAuthCompleteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAuthComplete() {
            curObj["NotifyAuthComplete"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyAuthentication() {
            if ((this.IsNotifyAuthenticationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyAuthentication() {
            curObj["NotifyAuthentication"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyEndOfNetSession() {
            if ((this.IsNotifyEndOfNetSessionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyEndOfNetSession() {
            curObj["NotifyEndOfNetSession"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyEndOfRequest() {
            if ((this.IsNotifyEndOfRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyEndOfRequest() {
            curObj["NotifyEndOfRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyLog() {
            if ((this.IsNotifyLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyLog() {
            curObj["NotifyLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyNonSecurePort() {
            if ((this.IsNotifyNonSecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyNonSecurePort() {
            curObj["NotifyNonSecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderHigh() {
            if ((this.IsNotifyOrderHighNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderHigh() {
            curObj["NotifyOrderHigh"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderLow() {
            if ((this.IsNotifyOrderLowNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderLow() {
            curObj["NotifyOrderLow"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyOrderMedium() {
            if ((this.IsNotifyOrderMediumNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyOrderMedium() {
            curObj["NotifyOrderMedium"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyPreProcHeaders() {
            if ((this.IsNotifyPreProcHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyPreProcHeaders() {
            curObj["NotifyPreProcHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyReadRawData() {
            if ((this.IsNotifyReadRawDataNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyReadRawData() {
            curObj["NotifyReadRawData"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySecurePort() {
            if ((this.IsNotifySecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySecurePort() {
            curObj["NotifySecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySendRawData() {
            if ((this.IsNotifySendRawDataNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySendRawData() {
            curObj["NotifySendRawData"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifySendResponse() {
            if ((this.IsNotifySendResponseNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifySendResponse() {
            curObj["NotifySendResponse"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNotifyUrlMap() {
            if ((this.IsNotifyUrlMapNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNotifyUrlMap() {
            curObj["NotifyUrlMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((this.IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject(System.Management.PutOptions putOptions) {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put(putOptions);
            }
        }
        
        private void Initialize() {
            AutoCommitProp = true;
            isEmbedded = false;
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsFilterSetting";
            strPath = string.Concat(strPath, string.Concat(".Name=", string.Concat("\"", string.Concat(keyName, "\""))));
            return strPath;
        }
        
        private void InitializeObject(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            Initialize();
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsFilterSettingCollection GetInstances() {
            return GetInstances(null, null, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsFilterSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsFilterSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsFilterSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsFilterSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsFilterSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsFilterSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            System.Management.ManagementClass tmpMgmtClass = new System.Management.ManagementClass(mgmtScope, mgmtPath, null);
            return new IIsFilterSetting(tmpMgmtClass.CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsFilterSettingCollection : object, ICollection {
            
            private ManagementObjectCollection privColObj;
            
            public IIsFilterSettingCollection(ManagementObjectCollection objCollection) {
                privColObj = objCollection;
            }
            
            public virtual int Count {
                get {
                    return privColObj.Count;
                }
            }
            
            public virtual bool IsSynchronized {
                get {
                    return privColObj.IsSynchronized;
                }
            }
            
            public virtual object SyncRoot {
                get {
                    return this;
                }
            }
            
            public virtual void CopyTo(System.Array array, int index) {
                privColObj.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsFilterSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return new IIsFilterSettingEnumerator(privColObj.GetEnumerator());
            }
            
            public class IIsFilterSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator privObjEnum;
                
                public IIsFilterSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    privObjEnum = objEnum;
                }
                
                public virtual object Current {
                    get {
                        return new IIsFilterSetting(((System.Management.ManagementObject)(privObjEnum.Current)));
                    }
                }
                
                public virtual bool MoveNext() {
                    return privObjEnum.MoveNext();
                }
                
                public virtual void Reset() {
                    privObjEnum.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            private System.Type baseType;
            
            public WMIValueTypeConverter(System.Type inBaseType) {
                baseConverter = TypeDescriptor.GetConverter(inBaseType);
                baseType = inBaseType;
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((baseType.BaseType == typeof(System.Enum))) {
                    if ((value.GetType() == destinationType)) {
                        return value;
                    }
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return  "NULL_ENUM_VALUE" ;
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((baseType == typeof(bool)) 
                            && (baseType.BaseType == typeof(System.ValueType)))) {
                    if ((((value == null) 
                                && (context != null)) 
                                && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                        return "";
                    }
                    return baseConverter.ConvertTo(context, culture, value, destinationType);
                }
                if (((context != null) 
                            && (context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false))) {
                    return "";
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsSmtpServer.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsSmtpServer
    public class IIsSmtpServer : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServer";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServer() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServer(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServer(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainRouting {
            get {
                return ((string[])(curObj["DomainRouting"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] LocalDomains {
            get {
                return ((string[])(curObj["LocalDomains"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PostmasterEmail {
            get {
                return ((string)(curObj["PostmasterEmail"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PostmasterName {
            get {
                return ((string)(curObj["PostmasterName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RoutingSources {
            get {
                return ((string[])(curObj["RoutingSources"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerStateNull {
            get {
                if ((curObj["ServerState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerState {
            get {
                if ((curObj["ServerState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerState"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpServiceVersionNull {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpServiceVersion {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpServiceVersion"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServerState() {
            if ((IsServerStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeSmtpServiceVersion() {
            if ((IsSmtpServiceVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpServer";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServerCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServerCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpServer";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServerCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpServer", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServerCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpServer CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpServer(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServerCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServerCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpServer(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServerEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServerEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServerEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpServer(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebServer.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebServer
    public class IIsWebServer : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebServer";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebServer() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServer.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServer(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebServer(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebServer(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerStateNull {
            get {
                if ((curObj["ServerState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerState {
            get {
                if ((curObj["ServerState"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerState"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementObjectCollection GetRelated()
        {
            return PrivateLateBoundObject.GetRelated();
        }

        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServerState() {
            if ((IsServerStateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebServer";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebServerCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebServerCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebServerCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebServer";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebServerCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebServerCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebServer", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebServerCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebServer CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebServer(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void Continue() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Continue", inParams, null);
            }
        }
        
        public void Pause() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Pause", inParams, null);
            }
        }
        
        public void Start() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Start", inParams, null);
            }
        }
        
        public void Stop() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("Stop", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebServerCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebServerCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebServer(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebServerEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebServerEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebServerEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebServer(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsSmtpService.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsSmtpService
    public class IIsSmtpService : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpService";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpService() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpService(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpService(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptPauseNull {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptPause {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptPause"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptStopNull {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptStop {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptStop"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCheckPointNull {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 CheckPoint {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["CheckPoint"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CreationClassName {
            get {
                return ((string)(curObj["CreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDesktopInteractNull {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DesktopInteract {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DesktopInteract"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DisplayName {
            get {
                return ((string)(curObj["DisplayName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] DomainRouting {
            get {
                return ((string[])(curObj["DomainRouting"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ErrorControl {
            get {
                return ((string)(curObj["ErrorControl"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsExitCodeNull {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ExitCode {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ExitCode"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] LocalDomains {
            get {
                return ((string[])(curObj["LocalDomains"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PathName {
            get {
                return ((string)(curObj["PathName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsProcessIdNull {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ProcessId {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ProcessId"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RoutingSources {
            get {
                return ((string[])(curObj["RoutingSources"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServiceSpecificExitCodeNull {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ServiceSpecificExitCode {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ServiceSpecificExitCode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServiceType {
            get {
                return ((string)(curObj["ServiceType"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpServiceVersionNull {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpServiceVersion {
            get {
                if ((curObj["SmtpServiceVersion"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpServiceVersion"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartedNull {
            get {
                if ((curObj["Started"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool Started {
            get {
                if ((curObj["Started"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["Started"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartMode {
            get {
                return ((string)(curObj["StartMode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartName {
            get {
                return ((string)(curObj["StartName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string State {
            get {
                return ((string)(curObj["State"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemCreationClassName {
            get {
                return ((string)(curObj["SystemCreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemName {
            get {
                return ((string)(curObj["SystemName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTagIdNull {
            get {
                if ((curObj["TagId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 TagId {
            get {
                if ((curObj["TagId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["TagId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWaitHintNull {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 WaitHint {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["WaitHint"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptPause() {
            if ((IsAcceptPauseNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptStop() {
            if ((IsAcceptStopNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeCheckPoint() {
            if ((IsCheckPointNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeDesktopInteract() {
            if ((IsDesktopInteractNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeExitCode() {
            if ((IsExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeProcessId() {
            if ((IsProcessIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServiceSpecificExitCode() {
            if ((IsServiceSpecificExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeSmtpServiceVersion() {
            if ((IsSmtpServiceVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeStarted() {
            if ((IsStartedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTagId() {
            if ((IsTagIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeWaitHint() {
            if ((IsWaitHintNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpService";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServiceCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServiceCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpService";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServiceCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpService", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServiceCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpService CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpService(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public System.UInt32 Change(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Change");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Change", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ChangeStartMode(string StartMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("ChangeStartMode");
                inParams["StartMode"] = StartMode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ChangeStartMode", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Create(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string Name, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Create");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["Name"] = Name;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Create", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Delete0() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Delete", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 InterrogateService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("InterrogateService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 PauseService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("PauseService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ResumeService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ResumeService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StartService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StartService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StopService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StopService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 UserControlService(System.Byte ControlCode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("UserControlService");
                inParams["ControlCode"] = ControlCode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("UserControlService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServiceCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServiceCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpService(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServiceEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServiceEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServiceEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpService(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebDirectory.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebDirectory
    public class IIsWebDirectory : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebDirectory";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebDirectory() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectory.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectory.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectory(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebDirectory(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebDirectory(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebDirectory";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebDirectoryCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebDirectoryCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebDirectory";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebDirectoryCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebDirectoryCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebDirectory", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebDirectoryCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebDirectory CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebDirectory(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AppCreate(bool InProcFlag) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate");
                inParams["InProcFlag"] = InProcFlag;
                PrivateLateBoundObject.InvokeMethod("AppCreate", inParams, null);
            }
        }
        
        public void AppCreate2(int AppMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate2");
                inParams["AppMode"] = AppMode;
                PrivateLateBoundObject.InvokeMethod("AppCreate2", inParams, null);
            }
        }
        
        public void AppCreate3(int AppMode, string AppPoolName, bool bCreate) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate3");
                inParams["AppMode"] = AppMode;
                inParams["AppPoolName"] = AppPoolName;
                inParams["bCreate"] = bCreate;
                PrivateLateBoundObject.InvokeMethod("AppCreate3", inParams, null);
            }
        }
        
        public void AppDelete(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDelete");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDelete", inParams, null);
            }
        }
        
        public void AppDisable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDisable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDisable", inParams, null);
            }
        }
        
        public void AppEnable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppEnable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppEnable", inParams, null);
            }
        }
        
        public System.UInt32 AppGetStatus() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("AppGetStatus", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void AppUnLoad(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppUnLoad");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppUnLoad", inParams, null);
            }
        }
        
        public void AspAppRestart() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("AspAppRestart", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebDirectoryCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebDirectoryCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebDirectory(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebDirectoryEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebDirectoryEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebDirectoryEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebDirectory(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebVirtualDir.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebVirtualDir
    public class IIsWebVirtualDir : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebVirtualDir";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebVirtualDir() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDir.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDir.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDir(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebVirtualDir(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebVirtualDir(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebVirtualDir";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebVirtualDirCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebVirtualDirCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebVirtualDir";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebVirtualDirCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebVirtualDir", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebVirtualDirCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebVirtualDir CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebVirtualDir(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AppCreate(bool InProcFlag) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate");
                inParams["InProcFlag"] = InProcFlag;
                PrivateLateBoundObject.InvokeMethod("AppCreate", inParams, null);
            }
        }
        
        public void AppCreate2(int AppMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate2");
                inParams["AppMode"] = AppMode;
                PrivateLateBoundObject.InvokeMethod("AppCreate2", inParams, null);
            }
        }
        
        public void AppCreate3(int AppMode, string AppPoolName, bool bCreate) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppCreate3");
                inParams["AppMode"] = AppMode;
                inParams["AppPoolName"] = AppPoolName;
                inParams["bCreate"] = bCreate;
                PrivateLateBoundObject.InvokeMethod("AppCreate3", inParams, null);
            }
        }
        
        public void AppDelete(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDelete");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDelete", inParams, null);
            }
        }
        
        public void AppDisable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppDisable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppDisable", inParams, null);
            }
        }
        
        public void AppEnable(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppEnable");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppEnable", inParams, null);
            }
        }
        
        public System.UInt32 AppGetStatus() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("AppGetStatus", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void AppUnLoad(bool Recursive) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AppUnLoad");
                inParams["Recursive"] = Recursive;
                PrivateLateBoundObject.InvokeMethod("AppUnLoad", inParams, null);
            }
        }
        
        public void AspAppRestart() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                PrivateLateBoundObject.InvokeMethod("AspAppRestart", inParams, null);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebVirtualDirCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebVirtualDirCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebVirtualDir(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebVirtualDirEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebVirtualDirEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebVirtualDirEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebVirtualDir(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebService.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // Datetime conversion functions ToDateTime and ToDmtfDateTime are added to the class to convert DMTF datetime to System.DateTime and vice-versa.
    // An Early Bound class generated for the WMI class.IIsWebService
    public class IIsWebService : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebService";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebService() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebService.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebService(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebService(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebService(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptPauseNull {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptPause {
            get {
                if ((curObj["AcceptPause"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptPause"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAcceptStopNull {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AcceptStop {
            get {
                if ((curObj["AcceptStop"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AcceptStop"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppIsolatedNull {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppIsolated {
            get {
                if ((curObj["AppIsolated"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppIsolated"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageID {
            get {
                return ((string)(curObj["AppPackageID"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPackageName {
            get {
                return ((string)(curObj["AppPackageName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppRoot {
            get {
                return ((string)(curObj["AppRoot"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCheckPointNull {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 CheckPoint {
            get {
                if ((curObj["CheckPoint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["CheckPoint"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CreationClassName {
            get {
                return ((string)(curObj["CreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDesktopInteractNull {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DesktopInteract {
            get {
                if ((curObj["DesktopInteract"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DesktopInteract"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DisplayName {
            get {
                return ((string)(curObj["DisplayName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ErrorControl {
            get {
                return ((string)(curObj["ErrorControl"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsExitCodeNull {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ExitCode {
            get {
                if ((curObj["ExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ExitCode"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsInstallDateNull {
            get {
                if ((curObj["InstallDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.DateTime InstallDate {
            get {
                if ((curObj["InstallDate"] != null)) {
                    return ToDateTime(((string)(curObj["InstallDate"])));
                }
                else {
                    return System.DateTime.MinValue;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PathName {
            get {
                return ((string)(curObj["PathName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsProcessIdNull {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ProcessId {
            get {
                if ((curObj["ProcessId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ProcessId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServiceSpecificExitCodeNull {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 ServiceSpecificExitCode {
            get {
                if ((curObj["ServiceSpecificExitCode"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["ServiceSpecificExitCode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServiceType {
            get {
                return ((string)(curObj["ServiceType"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] SSLCertHash {
            get {
                return ((System.Byte[])(curObj["SSLCertHash"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsStartedNull {
            get {
                if ((curObj["Started"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool Started {
            get {
                if ((curObj["Started"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["Started"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartMode {
            get {
                return ((string)(curObj["StartMode"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string StartName {
            get {
                return ((string)(curObj["StartName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string State {
            get {
                return ((string)(curObj["State"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Status {
            get {
                return ((string)(curObj["Status"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemCreationClassName {
            get {
                return ((string)(curObj["SystemCreationClassName"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SystemName {
            get {
                return ((string)(curObj["SystemName"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsTagIdNull {
            get {
                if ((curObj["TagId"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 TagId {
            get {
                if ((curObj["TagId"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["TagId"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWaitHintNull {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public System.UInt32 WaitHint {
            get {
                if ((curObj["WaitHint"] == null)) {
                    return System.Convert.ToUInt32(0);
                }
                return ((System.UInt32)(curObj["WaitHint"]));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptPause() {
            if ((IsAcceptPauseNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAcceptStop() {
            if ((IsAcceptStopNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeAppIsolated() {
            if ((IsAppIsolatedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeCheckPoint() {
            if ((IsCheckPointNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeDesktopInteract() {
            if ((IsDesktopInteractNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeExitCode() {
            if ((IsExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        // Converts a given datetime in DMTF format to System.DateTime object.
        static System.DateTime ToDateTime(string dmtfDate) {
            int year = System.DateTime.MinValue.Year;
            int month = System.DateTime.MinValue.Month;
            int day = System.DateTime.MinValue.Day;
            int hour = System.DateTime.MinValue.Hour;
            int minute = System.DateTime.MinValue.Minute;
            int second = System.DateTime.MinValue.Second;
            long ticks = 0;
            string dmtf = dmtfDate;
            System.DateTime datetime = System.DateTime.MinValue;
            string tempString = System.String.Empty;
            if ((dmtf == null)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length == 0)) {
                throw new System.ArgumentOutOfRangeException();
            }
            if ((dmtf.Length != 25)) {
                throw new System.ArgumentOutOfRangeException();
            }
            try {
                tempString = dmtf.Substring(0, 4);
                if (("****" != tempString)) {
                    year = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(4, 2);
                if (("**" != tempString)) {
                    month = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(6, 2);
                if (("**" != tempString)) {
                    day = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(8, 2);
                if (("**" != tempString)) {
                    hour = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(10, 2);
                if (("**" != tempString)) {
                    minute = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(12, 2);
                if (("**" != tempString)) {
                    second = System.Int32.Parse(tempString);
                }
                tempString = dmtf.Substring(15, 6);
                if (("******" != tempString)) {
                    ticks = (System.Int64.Parse(tempString) 
                                * (System.TimeSpan.TicksPerMillisecond / 1000));
                }
                if (((((((((year < 0) 
                            || (month < 0)) 
                            || (day < 0)) 
                            || (hour < 0)) 
                            || (minute < 0)) 
                            || (minute < 0)) 
                            || (second < 0)) 
                            || (ticks < 0))) {
                    throw new System.ArgumentOutOfRangeException();
                }
            }
            catch (System.Exception) {
                throw new System.ArgumentOutOfRangeException();
            }
            datetime = new System.DateTime(year, month, day, hour, minute, second, 0);
            datetime = datetime.AddTicks(ticks);
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(datetime);
            int UTCOffset = 0;
            long OffsetToBeAdjusted = 0;
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            tempString = dmtf.Substring(22, 3);
            if ((tempString != "***")) {
                tempString = dmtf.Substring(21, 4);
                try {
                    UTCOffset = System.Int32.Parse(tempString);
                }
                catch (System.Exception) {
                    throw new System.ArgumentOutOfRangeException();
                }
                OffsetToBeAdjusted = (OffsetMins - UTCOffset);
                datetime = datetime.AddMinutes(OffsetToBeAdjusted);
            }
            return datetime;
        }
        
        // Converts a given System.DateTime object to DMTF datetime format.
        static string ToDmtfDateTime(System.DateTime date) {
            string utcString = System.String.Empty;
            System.TimeSpan tickOffset = System.TimeZone.CurrentTimeZone.GetUtcOffset(date);
            long OffsetMins = (tickOffset.Ticks / System.TimeSpan.TicksPerMinute);
            if ((System.Math.Abs(OffsetMins) > 999)) {
                date = date.ToUniversalTime();
                utcString = "+000";
            }
            else {
                if ((tickOffset.Ticks >= 0)) {
                    utcString = ("+" + ((tickOffset.Ticks / System.TimeSpan.TicksPerMinute)).ToString().PadLeft(3, '0'));
                }
                else {
                    string strTemp = OffsetMins.ToString();
                    utcString = ("-" + strTemp.Substring(1, (strTemp.Length - 1)).PadLeft(3, '0'));
                }
            }
            string dmtfDateTime = date.Year.ToString().PadLeft(4, '0');
            dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2, '0'));
            dmtfDateTime = (dmtfDateTime + ".");
            System.DateTime dtTemp = new System.DateTime(date.Year, date.Month, date.Day, date.Hour, date.Minute, date.Second, 0);
            long microsec = (((date.Ticks - dtTemp.Ticks) 
                        * 1000) 
                        / System.TimeSpan.TicksPerMillisecond);
            string strMicrosec = microsec.ToString();
            if ((strMicrosec.Length > 6)) {
                strMicrosec = strMicrosec.Substring(0, 6);
            }
            dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6, '0'));
            dmtfDateTime = (dmtfDateTime + utcString);
            return dmtfDateTime;
        }
        
        private bool ShouldSerializeInstallDate() {
            if ((IsInstallDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeProcessId() {
            if ((IsProcessIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeServiceSpecificExitCode() {
            if ((IsServiceSpecificExitCodeNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeStarted() {
            if ((IsStartedNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeTagId() {
            if ((IsTagIdNull == false)) {
                return true;
            }
            return false;
        }
        
        private bool ShouldSerializeWaitHint() {
            if ((IsWaitHintNull == false)) {
                return true;
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebService";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebServiceCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebServiceCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebServiceCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebService";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebServiceCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebServiceCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebService", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebServiceCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebService CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebService(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        public void AddDependency(string Application, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AddDependency");
                inParams["Application"] = Application;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("AddDependency", inParams, null);
            }
        }
        
        public void AddExtensionFile(bool bCanDelete, bool bEnable, string Description, string ExtensionFile, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("AddExtensionFile");
                inParams["bCanDelete"] = bCanDelete;
                inParams["bEnable"] = bEnable;
                inParams["Description"] = Description;
                inParams["ExtensionFile"] = ExtensionFile;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("AddExtensionFile", inParams, null);
            }
        }
        
        public System.UInt32 Change(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Change");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Change", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 ChangeStartMode(string StartMode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("ChangeStartMode");
                inParams["StartMode"] = StartMode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ChangeStartMode", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 Create(bool DesktopInteract, string DisplayName, System.Byte ErrorControl, string LoadOrderGroup, string[] LoadOrderGroupDependencies, string Name, string PathName, string[] ServiceDependencies, System.Byte ServiceType, string StartMode, string StartName, string StartPassword) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("Create");
                inParams["DesktopInteract"] = DesktopInteract;
                inParams["DisplayName"] = DisplayName;
                inParams["ErrorControl"] = ErrorControl;
                inParams["LoadOrderGroup"] = LoadOrderGroup;
                inParams["LoadOrderGroupDependencies"] = LoadOrderGroupDependencies;
                inParams["Name"] = Name;
                inParams["PathName"] = PathName;
                inParams["ServiceDependencies"] = ServiceDependencies;
                inParams["ServiceType"] = ServiceType;
                inParams["StartMode"] = StartMode;
                inParams["StartName"] = StartName;
                inParams["StartPassword"] = StartPassword;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Create", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public string CreateNewSite(string PathOfRootVirtualDir, System.Management.ManagementBaseObject[] ServerBindings, string ServerComment, int ServerId) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("CreateNewSite");
                inParams["PathOfRootVirtualDir"] = PathOfRootVirtualDir;
                inParams["ServerBindings"] = ServerBindings;
                inParams["ServerComment"] = ServerComment;
                inParams["ServerId"] = ServerId;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("CreateNewSite", inParams, null);
                return System.Convert.ToString(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToString(0);
            }
        }
        
        public System.UInt32 Delete0() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("Delete", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void DeleteExtensionFileRecord(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DeleteExtensionFileRecord");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("DeleteExtensionFileRecord", inParams, null);
            }
        }
        
        public void DisableExtensionFile(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DisableExtensionFile");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("DisableExtensionFile", inParams, null);
            }
        }
        
        public void DisableWebServiceExtension(string Extension) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("DisableWebServiceExtension");
                inParams["Extension"] = Extension;
                PrivateLateBoundObject.InvokeMethod("DisableWebServiceExtension", inParams, null);
            }
        }
        
        public void EnableApplication(string Application) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableApplication");
                inParams["Application"] = Application;
                PrivateLateBoundObject.InvokeMethod("EnableApplication", inParams, null);
            }
        }
        
        public void EnableExtensionFile(string ExtensionFile) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableExtensionFile");
                inParams["ExtensionFile"] = ExtensionFile;
                PrivateLateBoundObject.InvokeMethod("EnableExtensionFile", inParams, null);
            }
        }
        
        public void EnableWebServiceExtension(string Extension) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("EnableWebServiceExtension");
                inParams["Extension"] = Extension;
                PrivateLateBoundObject.InvokeMethod("EnableWebServiceExtension", inParams, null);
            }
        }
        
        public int GetCurrentMode() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("GetCurrentMode", inParams, null);
                return System.Convert.ToInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToInt32(0);
            }
        }
        
        public System.UInt32 InterrogateService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("InterrogateService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void ListApplications(out string[] Applications) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListApplications", inParams, null);
                Applications = ((string[])(outParams.Properties["Applications"].Value));
            }
            else {
                Applications = null;
            }
        }
        
        public void ListExtensionFiles(out string[] ExtensionFiles) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListExtensionFiles", inParams, null);
                ExtensionFiles = ((string[])(outParams.Properties["ExtensionFiles"].Value));
            }
            else {
                ExtensionFiles = null;
            }
        }
        
        public void ListWebServiceExtensions(out string[] Extensions) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ListWebServiceExtensions", inParams, null);
                Extensions = ((string[])(outParams.Properties["Extensions"].Value));
            }
            else {
                Extensions = null;
            }
        }
        
        public System.UInt32 PauseService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("PauseService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public void QueryGroupIDStatus(string GroupID, out string[] Applications) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("QueryGroupIDStatus");
                inParams["GroupID"] = GroupID;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("QueryGroupIDStatus", inParams, null);
                Applications = ((string[])(outParams.Properties["Applications"].Value));
            }
            else {
                Applications = null;
            }
        }
        
        public void RemoveApplication(string Application) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("RemoveApplication");
                inParams["Application"] = Application;
                PrivateLateBoundObject.InvokeMethod("RemoveApplication", inParams, null);
            }
        }
        
        public void RemoveDependency(string Application, string GroupID) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("RemoveDependency");
                inParams["Application"] = Application;
                inParams["GroupID"] = GroupID;
                PrivateLateBoundObject.InvokeMethod("RemoveDependency", inParams, null);
            }
        }
        
        public System.UInt32 ResumeService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("ResumeService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StartService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StartService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 StopService() {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("StopService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        public System.UInt32 UserControlService(System.Byte ControlCode) {
            if ((isEmbedded == false)) {
                System.Management.ManagementBaseObject inParams = null;
                inParams = PrivateLateBoundObject.GetMethodParameters("UserControlService");
                inParams["ControlCode"] = ControlCode;
                System.Management.ManagementBaseObject outParams = PrivateLateBoundObject.InvokeMethod("UserControlService", inParams, null);
                return System.Convert.ToUInt32(outParams.Properties["ReturnValue"].Value);
            }
            else {
                return System.Convert.ToUInt32(0);
            }
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebServiceCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebServiceCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebService(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebServiceEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebServiceEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebServiceEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebService(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\MimeMap.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.MimeMap
    public class MimeMap : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "MimeMap";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public MimeMap() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(string keyExtension, string keyMimeType) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(MimeMap.ConstructPath(keyExtension, keyMimeType)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, string keyExtension, string keyMimeType) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(MimeMap.ConstructPath(keyExtension, keyMimeType)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public MimeMap(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public MimeMap(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public MimeMap(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Extension {
            get {
                return ((string)(curObj["Extension"]));
            }
            set {
                curObj["Extension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MimeType {
            get {
                return ((string)(curObj["MimeType"]));
            }
            set {
                curObj["MimeType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyExtension, string keyMimeType) {
            string strPath = "ROOT\\MicrosoftIISv2:MimeMap";
            strPath = (strPath 
                        + (".Extension=" 
                        + ("\"" 
                        + (keyExtension + "\""))));
            strPath = (strPath 
                        + (",MimeType=" 
                        + ("\"" 
                        + (keyMimeType + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static MimeMapCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static MimeMapCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static MimeMapCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "MimeMap";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new MimeMapCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static MimeMapCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("MimeMap", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new MimeMapCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static MimeMap CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new MimeMap(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class MimeMapCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public MimeMapCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new MimeMap(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new MimeMapEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class MimeMapEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public MimeMapEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new MimeMap(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\ServerBinding.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.ServerBinding
    public class ServerBinding : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "ServerBinding";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public ServerBinding() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(string keyHostname, string keyIP, string keyPort) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(ServerBinding.ConstructPath(keyHostname, keyIP, keyPort)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, string keyHostname, string keyIP, string keyPort) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(ServerBinding.ConstructPath(keyHostname, keyIP, keyPort)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public ServerBinding(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public ServerBinding(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public ServerBinding(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Hostname {
            get {
                return ((string)(curObj["Hostname"]));
            }
            set {
                curObj["Hostname"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string IP {
            get {
                return ((string)(curObj["IP"]));
            }
            set {
                curObj["IP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Port {
            get {
                return ((string)(curObj["Port"]));
            }
            set {
                curObj["Port"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyHostname, string keyIP, string keyPort) {
            string strPath = "ROOT\\MicrosoftIISv2:ServerBinding";
            strPath = (strPath 
                        + (".Hostname=" 
                        + ("\"" 
                        + (keyHostname + "\""))));
            strPath = (strPath 
                        + (",IP=" 
                        + ("\"" 
                        + (keyIP + "\""))));
            strPath = (strPath 
                        + (",Port=" 
                        + ("\"" 
                        + (keyPort + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static ServerBindingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static ServerBindingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static ServerBindingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "ServerBinding";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new ServerBindingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static ServerBindingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("ServerBinding", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new ServerBindingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static ServerBinding CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new ServerBinding(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class ServerBindingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public ServerBindingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new ServerBinding(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new ServerBindingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class ServerBindingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public ServerBindingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new ServerBinding(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebDirectorySetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsWebDirectorySetting
    public class IIsWebDirectorySetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebDirectorySetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebDirectorySetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectorySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebDirectorySetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebDirectorySetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowClientDebugNull {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowClientDebug {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowClientDebug"]));
            }
            set {
                curObj["AppAllowClientDebug"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowDebuggingNull {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowDebugging {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowDebugging"]));
            }
            set {
                curObj["AppAllowDebugging"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppFriendlyName {
            get {
                return ((string)(curObj["AppFriendlyName"]));
            }
            set {
                curObj["AppFriendlyName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppOopRecoverLimitNull {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppOopRecoverLimit {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppOopRecoverLimit"]));
            }
            set {
                curObj["AppOopRecoverLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPoolId {
            get {
                return ((string)(curObj["AppPoolId"]));
            }
            set {
                curObj["AppPoolId"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppWamClsid {
            get {
                return ((string)(curObj["AppWamClsid"]));
            }
            set {
                curObj["AppWamClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowOutOfProcComponentsNull {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowOutOfProcComponents {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowOutOfProcComponents"]));
            }
            set {
                curObj["AspAllowOutOfProcComponents"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowSessionStateNull {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowSessionState {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowSessionState"]));
            }
            set {
                curObj["AspAllowSessionState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAppServiceFlagsNull {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspAppServiceFlags {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspAppServiceFlags"]));
            }
            set {
                curObj["AspAppServiceFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingLimitNull {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspBufferingLimit {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspBufferingLimit"]));
            }
            set {
                curObj["AspBufferingLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingOnNull {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspBufferingOn {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspBufferingOn"]));
            }
            set {
                curObj["AspBufferingOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCalcLineNumberNull {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspCalcLineNumber {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspCalcLineNumber"]));
            }
            set {
                curObj["AspCalcLineNumber"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCodepageNull {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspCodepage {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspCodepage"]));
            }
            set {
                curObj["AspCodepage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspDiskTemplateCacheDirectory {
            get {
                return ((string)(curObj["AspDiskTemplateCacheDirectory"]));
            }
            set {
                curObj["AspDiskTemplateCacheDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableApplicationRestartNull {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableApplicationRestart {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableApplicationRestart"]));
            }
            set {
                curObj["AspEnableApplicationRestart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableAspHtmlFallbackNull {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableAspHtmlFallback {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableAspHtmlFallback"]));
            }
            set {
                curObj["AspEnableAspHtmlFallback"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableChunkedEncodingNull {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableChunkedEncoding {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableChunkedEncoding"]));
            }
            set {
                curObj["AspEnableChunkedEncoding"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableParentPathsNull {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableParentPaths {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableParentPaths"]));
            }
            set {
                curObj["AspEnableParentPaths"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableSxsNull {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableSxs {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableSxs"]));
            }
            set {
                curObj["AspEnableSxs"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTrackerNull {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTracker {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTracker"]));
            }
            set {
                curObj["AspEnableTracker"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTypelibCacheNull {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTypelibCache {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTypelibCache"]));
            }
            set {
                curObj["AspEnableTypelibCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspErrorsToNTLogNull {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspErrorsToNTLog {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspErrorsToNTLog"]));
            }
            set {
                curObj["AspErrorsToNTLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExceptionCatchEnableNull {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspExceptionCatchEnable {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspExceptionCatchEnable"]));
            }
            set {
                curObj["AspExceptionCatchEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExecuteInMTANull {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspExecuteInMTA {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspExecuteInMTA"]));
            }
            set {
                curObj["AspExecuteInMTA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspKeepSessionIDSecureNull {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspKeepSessionIDSecure {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspKeepSessionIDSecure"]));
            }
            set {
                curObj["AspKeepSessionIDSecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLCIDNull {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspLCID {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspLCID"]));
            }
            set {
                curObj["AspLCID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLogErrorRequestsNull {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspLogErrorRequests {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspLogErrorRequests"]));
            }
            set {
                curObj["AspLogErrorRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxDiskTemplateCacheFilesNull {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxDiskTemplateCacheFiles {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxDiskTemplateCacheFiles"]));
            }
            set {
                curObj["AspMaxDiskTemplateCacheFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxRequestEntityAllowedNull {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxRequestEntityAllowed {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxRequestEntityAllowed"]));
            }
            set {
                curObj["AspMaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspPartitionID {
            get {
                return ((string)(curObj["AspPartitionID"]));
            }
            set {
                curObj["AspPartitionID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspProcessorThreadMaxNull {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspProcessorThreadMax {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspProcessorThreadMax"]));
            }
            set {
                curObj["AspProcessorThreadMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueConnectionTestTimeNull {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueConnectionTestTime {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueConnectionTestTime"]));
            }
            set {
                curObj["AspQueueConnectionTestTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueTimeoutNull {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueTimeout {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueTimeout"]));
            }
            set {
                curObj["AspQueueTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRequestQueueMaxNull {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspRequestQueueMax {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspRequestQueueMax"]));
            }
            set {
                curObj["AspRequestQueueMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRunOnEndAnonymouslyNull {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspRunOnEndAnonymously {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspRunOnEndAnonymously"]));
            }
            set {
                curObj["AspRunOnEndAnonymously"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptEngineCacheMaxNull {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptEngineCacheMax {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptEngineCacheMax"]));
            }
            set {
                curObj["AspScriptEngineCacheMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptErrorMessage {
            get {
                return ((string)(curObj["AspScriptErrorMessage"]));
            }
            set {
                curObj["AspScriptErrorMessage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptErrorSentToBrowserNull {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspScriptErrorSentToBrowser {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspScriptErrorSentToBrowser"]));
            }
            set {
                curObj["AspScriptErrorSentToBrowser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptFileCacheSizeNull {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptFileCacheSize {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptFileCacheSize"]));
            }
            set {
                curObj["AspScriptFileCacheSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptLanguage {
            get {
                return ((string)(curObj["AspScriptLanguage"]));
            }
            set {
                curObj["AspScriptLanguage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptTimeoutNull {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptTimeout {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptTimeout"]));
            }
            set {
                curObj["AspScriptTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionMaxNull {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionMax {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionMax"]));
            }
            set {
                curObj["AspSessionMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionTimeoutNull {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionTimeout {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionTimeout"]));
            }
            set {
                curObj["AspSessionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspSxsName {
            get {
                return ((string)(curObj["AspSxsName"]));
            }
            set {
                curObj["AspSxsName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspTrackThreadingModelNull {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspTrackThreadingModel {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspTrackThreadingModel"]));
            }
            set {
                curObj["AspTrackThreadingModel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspUsePartitionNull {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspUsePartition {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspUsePartition"]));
            }
            set {
                curObj["AspUsePartition"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistenceNull {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthPersistence {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthPersistence"]));
            }
            set {
                curObj["AuthPersistence"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistSingleRequestNull {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPersistSingleRequest {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPersistSingleRequest"]));
            }
            set {
                curObj["AuthPersistSingleRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzImpersonationLevelNull {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AzImpersonationLevel {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AzImpersonationLevel"]));
            }
            set {
                curObj["AzImpersonationLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CacheControlCustom {
            get {
                return ((string)(curObj["CacheControlCustom"]));
            }
            set {
                curObj["CacheControlCustom"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlMaxAgeNull {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CacheControlMaxAge {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CacheControlMaxAge"]));
            }
            set {
                curObj["CacheControlMaxAge"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlNoCacheNull {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheControlNoCache {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheControlNoCache"]));
            }
            set {
                curObj["CacheControlNoCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheISAPINull {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheISAPI {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheISAPI"]));
            }
            set {
                curObj["CacheISAPI"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCGITimeoutNull {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CGITimeout {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CGITimeout"]));
            }
            set {
                curObj["CGITimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsContentIndexedNull {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ContentIndexed {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ContentIndexed"]));
            }
            set {
                curObj["ContentIndexed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateCGIWithNewConsoleNull {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateCGIWithNewConsole {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateCGIWithNewConsole"]));
            }
            set {
                curObj["CreateCGIWithNewConsole"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateProcessAsUserNull {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateProcessAsUser {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateProcessAsUser"]));
            }
            set {
                curObj["CreateProcessAsUser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDoc {
            get {
                return ((string)(curObj["DefaultDoc"]));
            }
            set {
                curObj["DefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDocFooter {
            get {
                return ((string)(curObj["DefaultDocFooter"]));
            }
            set {
                curObj["DefaultDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseFlagsNull {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DirBrowseFlags {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DirBrowseFlags"]));
            }
            set {
                curObj["DirBrowseFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowDateNull {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowDate {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowDate"]));
            }
            set {
                curObj["DirBrowseShowDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowExtensionNull {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowExtension {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowExtension"]));
            }
            set {
                curObj["DirBrowseShowExtension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowLongDateNull {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowLongDate {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowLongDate"]));
            }
            set {
                curObj["DirBrowseShowLongDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowSizeNull {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowSize {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowSize"]));
            }
            set {
                curObj["DirBrowseShowSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowTimeNull {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowTime {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowTime"]));
            }
            set {
                curObj["DirBrowseShowTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableStaticFileCacheNull {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableStaticFileCache {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableStaticFileCache"]));
            }
            set {
                curObj["DisableStaticFileCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoDynamicCompressionNull {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoDynamicCompression {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoDynamicCompression"]));
            }
            set {
                curObj["DoDynamicCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoStaticCompressionNull {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoStaticCompression {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoStaticCompression"]));
            }
            set {
                curObj["DoStaticCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDefaultDocNull {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDefaultDoc {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDefaultDoc"]));
            }
            set {
                curObj["EnableDefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDirBrowsingNull {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDirBrowsing {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDirBrowsing"]));
            }
            set {
                curObj["EnableDirBrowsing"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDocFooterNull {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDocFooter {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDocFooter"]));
            }
            set {
                curObj["EnableDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsNull {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDns {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDns"]));
            }
            set {
                curObj["EnableReverseDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFrontPageWebNull {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FrontPageWeb {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FrontPageWeb"]));
            }
            set {
                curObj["FrontPageWeb"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpCustomHeaders {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpCustomHeaders"]));
            }
            set {
                curObj["HttpCustomHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpErrors {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpErrors"]));
            }
            set {
                curObj["HttpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpExpires {
            get {
                return ((string)(curObj["HttpExpires"]));
            }
            set {
                curObj["HttpExpires"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] HttpPics {
            get {
                return ((string[])(curObj["HttpPics"]));
            }
            set {
                curObj["HttpPics"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpRedirect {
            get {
                return ((string)(curObj["HttpRedirect"]));
            }
            set {
                curObj["HttpRedirect"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRequestEntityAllowedNull {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRequestEntityAllowed {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRequestEntityAllowed"]));
            }
            set {
                curObj["MaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPassportRequireADMappingNull {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PassportRequireADMapping {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PassportRequireADMapping"]));
            }
            set {
                curObj["PassportRequireADMapping"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPoolIdcTimeoutNull {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PoolIdcTimeout {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PoolIdcTimeout"]));
            }
            set {
                curObj["PoolIdcTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RedirectHeaders {
            get {
                return ((string[])(curObj["RedirectHeaders"]));
            }
            set {
                curObj["RedirectHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ScriptMaps {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ScriptMaps"]));
            }
            set {
                curObj["ScriptMaps"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSSIExecDisableNull {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SSIExecDisable {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SSIExecDisable"]));
            }
            set {
                curObj["SSIExecDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUploadReadAheadSizeNull {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int UploadReadAheadSize {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["UploadReadAheadSize"]));
            }
            set {
                curObj["UploadReadAheadSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUseDigestSSPNull {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UseDigestSSP {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UseDigestSSP"]));
            }
            set {
                curObj["UseDigestSSP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWebDAVMaxAttributesPerElementNull {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int WebDAVMaxAttributesPerElement {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["WebDAVMaxAttributesPerElement"]));
            }
            set {
                curObj["WebDAVMaxAttributesPerElement"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowClientDebug() {
            if ((IsAppAllowClientDebugNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowClientDebug() {
            curObj["AppAllowClientDebug"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowDebugging() {
            if ((IsAppAllowDebuggingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowDebugging() {
            curObj["AppAllowDebugging"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppFriendlyName() {
            curObj["AppFriendlyName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppOopRecoverLimit() {
            if ((IsAppOopRecoverLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppOopRecoverLimit() {
            curObj["AppOopRecoverLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppPoolId() {
            curObj["AppPoolId"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppWamClsid() {
            curObj["AppWamClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowOutOfProcComponents() {
            if ((IsAspAllowOutOfProcComponentsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowOutOfProcComponents() {
            curObj["AspAllowOutOfProcComponents"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowSessionState() {
            if ((IsAspAllowSessionStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowSessionState() {
            curObj["AspAllowSessionState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAppServiceFlags() {
            if ((IsAspAppServiceFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAppServiceFlags() {
            curObj["AspAppServiceFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingLimit() {
            if ((IsAspBufferingLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingLimit() {
            curObj["AspBufferingLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingOn() {
            if ((IsAspBufferingOnNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingOn() {
            curObj["AspBufferingOn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCalcLineNumber() {
            if ((IsAspCalcLineNumberNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCalcLineNumber() {
            curObj["AspCalcLineNumber"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCodepage() {
            if ((IsAspCodepageNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCodepage() {
            curObj["AspCodepage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspDiskTemplateCacheDirectory() {
            curObj["AspDiskTemplateCacheDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableApplicationRestart() {
            if ((IsAspEnableApplicationRestartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableApplicationRestart() {
            curObj["AspEnableApplicationRestart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableAspHtmlFallback() {
            if ((IsAspEnableAspHtmlFallbackNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableAspHtmlFallback() {
            curObj["AspEnableAspHtmlFallback"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableChunkedEncoding() {
            if ((IsAspEnableChunkedEncodingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableChunkedEncoding() {
            curObj["AspEnableChunkedEncoding"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableParentPaths() {
            if ((IsAspEnableParentPathsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableParentPaths() {
            curObj["AspEnableParentPaths"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableSxs() {
            if ((IsAspEnableSxsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableSxs() {
            curObj["AspEnableSxs"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTracker() {
            if ((IsAspEnableTrackerNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTracker() {
            curObj["AspEnableTracker"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTypelibCache() {
            if ((IsAspEnableTypelibCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTypelibCache() {
            curObj["AspEnableTypelibCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspErrorsToNTLog() {
            if ((IsAspErrorsToNTLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspErrorsToNTLog() {
            curObj["AspErrorsToNTLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExceptionCatchEnable() {
            if ((IsAspExceptionCatchEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExceptionCatchEnable() {
            curObj["AspExceptionCatchEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExecuteInMTA() {
            if ((IsAspExecuteInMTANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExecuteInMTA() {
            curObj["AspExecuteInMTA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspKeepSessionIDSecure() {
            if ((IsAspKeepSessionIDSecureNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspKeepSessionIDSecure() {
            curObj["AspKeepSessionIDSecure"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLCID() {
            if ((IsAspLCIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLCID() {
            curObj["AspLCID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLogErrorRequests() {
            if ((IsAspLogErrorRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLogErrorRequests() {
            curObj["AspLogErrorRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxDiskTemplateCacheFiles() {
            if ((IsAspMaxDiskTemplateCacheFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxDiskTemplateCacheFiles() {
            curObj["AspMaxDiskTemplateCacheFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxRequestEntityAllowed() {
            if ((IsAspMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxRequestEntityAllowed() {
            curObj["AspMaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspPartitionID() {
            curObj["AspPartitionID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspProcessorThreadMax() {
            if ((IsAspProcessorThreadMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspProcessorThreadMax() {
            curObj["AspProcessorThreadMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueConnectionTestTime() {
            if ((IsAspQueueConnectionTestTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueConnectionTestTime() {
            curObj["AspQueueConnectionTestTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueTimeout() {
            if ((IsAspQueueTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueTimeout() {
            curObj["AspQueueTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRequestQueueMax() {
            if ((IsAspRequestQueueMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRequestQueueMax() {
            curObj["AspRequestQueueMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRunOnEndAnonymously() {
            if ((IsAspRunOnEndAnonymouslyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRunOnEndAnonymously() {
            curObj["AspRunOnEndAnonymously"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptEngineCacheMax() {
            if ((IsAspScriptEngineCacheMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptEngineCacheMax() {
            curObj["AspScriptEngineCacheMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptErrorMessage() {
            curObj["AspScriptErrorMessage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptErrorSentToBrowser() {
            if ((IsAspScriptErrorSentToBrowserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptErrorSentToBrowser() {
            curObj["AspScriptErrorSentToBrowser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptFileCacheSize() {
            if ((IsAspScriptFileCacheSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptFileCacheSize() {
            curObj["AspScriptFileCacheSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptLanguage() {
            curObj["AspScriptLanguage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptTimeout() {
            if ((IsAspScriptTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptTimeout() {
            curObj["AspScriptTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionMax() {
            if ((IsAspSessionMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionMax() {
            curObj["AspSessionMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionTimeout() {
            if ((IsAspSessionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionTimeout() {
            curObj["AspSessionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspSxsName() {
            curObj["AspSxsName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspTrackThreadingModel() {
            if ((IsAspTrackThreadingModelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspTrackThreadingModel() {
            curObj["AspTrackThreadingModel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspUsePartition() {
            if ((IsAspUsePartitionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspUsePartition() {
            curObj["AspUsePartition"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistence() {
            if ((IsAuthPersistenceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistence() {
            curObj["AuthPersistence"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistSingleRequest() {
            if ((IsAuthPersistSingleRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistSingleRequest() {
            curObj["AuthPersistSingleRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzImpersonationLevel() {
            if ((IsAzImpersonationLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzImpersonationLevel() {
            curObj["AzImpersonationLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetCacheControlCustom() {
            curObj["CacheControlCustom"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlMaxAge() {
            if ((IsCacheControlMaxAgeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlMaxAge() {
            curObj["CacheControlMaxAge"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlNoCache() {
            if ((IsCacheControlNoCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlNoCache() {
            curObj["CacheControlNoCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheISAPI() {
            if ((IsCacheISAPINull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheISAPI() {
            curObj["CacheISAPI"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCGITimeout() {
            if ((IsCGITimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCGITimeout() {
            curObj["CGITimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeContentIndexed() {
            if ((IsContentIndexedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetContentIndexed() {
            curObj["ContentIndexed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateCGIWithNewConsole() {
            if ((IsCreateCGIWithNewConsoleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateCGIWithNewConsole() {
            curObj["CreateCGIWithNewConsole"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateProcessAsUser() {
            if ((IsCreateProcessAsUserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateProcessAsUser() {
            curObj["CreateProcessAsUser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDoc() {
            curObj["DefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDocFooter() {
            curObj["DefaultDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseFlags() {
            if ((IsDirBrowseFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseFlags() {
            curObj["DirBrowseFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowDate() {
            if ((IsDirBrowseShowDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowDate() {
            curObj["DirBrowseShowDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowExtension() {
            if ((IsDirBrowseShowExtensionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowExtension() {
            curObj["DirBrowseShowExtension"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowLongDate() {
            if ((IsDirBrowseShowLongDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowLongDate() {
            curObj["DirBrowseShowLongDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowSize() {
            if ((IsDirBrowseShowSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowSize() {
            curObj["DirBrowseShowSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowTime() {
            if ((IsDirBrowseShowTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowTime() {
            curObj["DirBrowseShowTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableStaticFileCache() {
            if ((IsDisableStaticFileCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableStaticFileCache() {
            curObj["DisableStaticFileCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoDynamicCompression() {
            if ((IsDoDynamicCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoDynamicCompression() {
            curObj["DoDynamicCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoStaticCompression() {
            if ((IsDoStaticCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoStaticCompression() {
            curObj["DoStaticCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDefaultDoc() {
            if ((IsEnableDefaultDocNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDefaultDoc() {
            curObj["EnableDefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDirBrowsing() {
            if ((IsEnableDirBrowsingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDirBrowsing() {
            curObj["EnableDirBrowsing"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDocFooter() {
            if ((IsEnableDocFooterNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDocFooter() {
            curObj["EnableDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDns() {
            if ((IsEnableReverseDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDns() {
            curObj["EnableReverseDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFrontPageWeb() {
            if ((IsFrontPageWebNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFrontPageWeb() {
            curObj["FrontPageWeb"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpCustomHeaders() {
            curObj["HttpCustomHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpErrors() {
            curObj["HttpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpExpires() {
            curObj["HttpExpires"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpPics() {
            curObj["HttpPics"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpRedirect() {
            curObj["HttpRedirect"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRequestEntityAllowed() {
            if ((IsMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRequestEntityAllowed() {
            curObj["MaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePassportRequireADMapping() {
            if ((IsPassportRequireADMappingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPassportRequireADMapping() {
            curObj["PassportRequireADMapping"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePoolIdcTimeout() {
            if ((IsPoolIdcTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPoolIdcTimeout() {
            curObj["PoolIdcTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRedirectHeaders() {
            curObj["RedirectHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetScriptMaps() {
            curObj["ScriptMaps"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSSIExecDisable() {
            if ((IsSSIExecDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSSIExecDisable() {
            curObj["SSIExecDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUploadReadAheadSize() {
            if ((IsUploadReadAheadSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUploadReadAheadSize() {
            curObj["UploadReadAheadSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUseDigestSSP() {
            if ((IsUseDigestSSPNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUseDigestSSP() {
            curObj["UseDigestSSP"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWebDAVMaxAttributesPerElement() {
            if ((IsWebDAVMaxAttributesPerElementNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWebDAVMaxAttributesPerElement() {
            curObj["WebDAVMaxAttributesPerElement"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebDirectorySetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebDirectorySettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebDirectorySetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebDirectorySettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebDirectorySettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebDirectorySetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebDirectorySettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebDirectorySetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebDirectorySetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebDirectorySettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebDirectorySettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebDirectorySetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebDirectorySettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebDirectorySettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebDirectorySettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebDirectorySetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsSmtpServerSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsSmtpServerSetting
    public class IIsSmtpServerSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServerSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServerSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServerSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAddNoHeadersNull {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AddNoHeaders {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AddNoHeaders"]));
            }
            set {
                curObj["AddNoHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowAnonymousNull {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowAnonymous {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowAnonymous"]));
            }
            set {
                curObj["AllowAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAlwaysUseSslNull {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AlwaysUseSsl {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AlwaysUseSsl"]));
            }
            set {
                curObj["AlwaysUseSsl"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousOnlyNull {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousOnly {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousOnly"]));
            }
            set {
                curObj["AnonymousOnly"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string BadMailDirectory {
            get {
                return ((string)(curObj["BadMailDirectory"]));
            }
            set {
                curObj["BadMailDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsClusterEnabledNull {
            get {
                if ((curObj["ClusterEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ClusterEnabled {
            get {
                if ((curObj["ClusterEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ClusterEnabled"]));
            }
            set {
                curObj["ClusterEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsConnectionTimeoutNull {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ConnectionTimeout {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ConnectionTimeout"]));
            }
            set {
                curObj["ConnectionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ConnectResponse {
            get {
                return ((string)(curObj["ConnectResponse"]));
            }
            set {
                curObj["ConnectResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDomain {
            get {
                return ((string)(curObj["DefaultDomain"]));
            }
            set {
                curObj["DefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableSocketPoolingNull {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableSocketPooling {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableSocketPooling"]));
            }
            set {
                curObj["DisableSocketPooling"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoMasqueradeNull {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoMasquerade {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoMasquerade"]));
            }
            set {
                curObj["DoMasquerade"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DropDirectory {
            get {
                return ((string)(curObj["DropDirectory"]));
            }
            set {
                curObj["DropDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsLookupNull {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDnsLookup {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDnsLookup"]));
            }
            set {
                curObj["EnableReverseDnsLookup"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnDaysNull {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int EtrnDays {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["EtrnDays"]));
            }
            set {
                curObj["EtrnDays"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnSubdomainsNull {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EtrnSubdomains {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EtrnSubdomains"]));
            }
            set {
                curObj["EtrnSubdomains"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FullyQualifiedDomainName {
            get {
                return ((string)(curObj["FullyQualifiedDomainName"]));
            }
            set {
                curObj["FullyQualifiedDomainName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHopCountNull {
            get {
                if ((curObj["HopCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HopCount {
            get {
                if ((curObj["HopCount"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HopCount"]));
            }
            set {
                curObj["HopCount"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLimitRemoteConnectionsNull {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LimitRemoteConnections {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LimitRemoteConnections"]));
            }
            set {
                curObj["LimitRemoteConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryAttemptsNull {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryAttempts {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryAttempts"]));
            }
            set {
                curObj["LocalRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryIntervalNull {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryInterval {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryInterval"]));
            }
            set {
                curObj["LocalRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesRecvNull {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesRecv {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesRecv"]));
            }
            set {
                curObj["LogExtFileBytesRecv"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesSentNull {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesSent {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesSent"]));
            }
            set {
                curObj["LogExtFileBytesSent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileClientIpNull {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileClientIp {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileClientIp"]));
            }
            set {
                curObj["LogExtFileClientIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileComputerNameNull {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileComputerName {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileComputerName"]));
            }
            set {
                curObj["LogExtFileComputerName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileCookieNull {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileCookie {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileCookie"]));
            }
            set {
                curObj["LogExtFileCookie"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileDateNull {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileDate {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileDate"]));
            }
            set {
                curObj["LogExtFileDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileFlagsNull {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogExtFileFlags {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogExtFileFlags"]));
            }
            set {
                curObj["LogExtFileFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHostNull {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHost {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHost"]));
            }
            set {
                curObj["LogExtFileHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpStatusNull {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpStatus {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpStatus"]));
            }
            set {
                curObj["LogExtFileHttpStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpSubStatusNull {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpSubStatus {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpSubStatus"]));
            }
            set {
                curObj["LogExtFileHttpSubStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileMethodNull {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileMethod {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileMethod"]));
            }
            set {
                curObj["LogExtFileMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileProtocolVersionNull {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileProtocolVersion {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileProtocolVersion"]));
            }
            set {
                curObj["LogExtFileProtocolVersion"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileRefererNull {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileReferer {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileReferer"]));
            }
            set {
                curObj["LogExtFileReferer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerIpNull {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerIp {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerIp"]));
            }
            set {
                curObj["LogExtFileServerIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerPortNull {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerPort {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerPort"]));
            }
            set {
                curObj["LogExtFileServerPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileSiteNameNull {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileSiteName {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileSiteName"]));
            }
            set {
                curObj["LogExtFileSiteName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeNull {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTime {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTime"]));
            }
            set {
                curObj["LogExtFileTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeTakenNull {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTimeTaken {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTimeTaken"]));
            }
            set {
                curObj["LogExtFileTimeTaken"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriQueryNull {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriQuery {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriQuery"]));
            }
            set {
                curObj["LogExtFileUriQuery"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriStemNull {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriStem {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriStem"]));
            }
            set {
                curObj["LogExtFileUriStem"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserAgentNull {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserAgent {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserAgent"]));
            }
            set {
                curObj["LogExtFileUserAgent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserNameNull {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserName {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserName"]));
            }
            set {
                curObj["LogExtFileUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileWin32StatusNull {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileWin32Status {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileWin32Status"]));
            }
            set {
                curObj["LogExtFileWin32Status"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogFileDirectory {
            get {
                return ((string)(curObj["LogFileDirectory"]));
            }
            set {
                curObj["LogFileDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFilePeriodNull {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFilePeriod {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFilePeriod"]));
            }
            set {
                curObj["LogFilePeriod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileTruncateSizeNull {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFileTruncateSize {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFileTruncateSize"]));
            }
            set {
                curObj["LogFileTruncateSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcDataSource {
            get {
                return ((string)(curObj["LogOdbcDataSource"]));
            }
            set {
                curObj["LogOdbcDataSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcPassword {
            get {
                return ((string)(curObj["LogOdbcPassword"]));
            }
            set {
                curObj["LogOdbcPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcTableName {
            get {
                return ((string)(curObj["LogOdbcTableName"]));
            }
            set {
                curObj["LogOdbcTableName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcUserName {
            get {
                return ((string)(curObj["LogOdbcUserName"]));
            }
            set {
                curObj["LogOdbcUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogPluginClsid {
            get {
                return ((string)(curObj["LogPluginClsid"]));
            }
            set {
                curObj["LogPluginClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogTypeNull {
            get {
                if ((curObj["LogType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogType {
            get {
                if ((curObj["LogType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogType"]));
            }
            set {
                curObj["LogType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MasqueradeDomain {
            get {
                return ((string)(curObj["MasqueradeDomain"]));
            }
            set {
                curObj["MasqueradeDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBandwidthNull {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBandwidth {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBandwidth"]));
            }
            set {
                curObj["MaxBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBatchedMessagesNull {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBatchedMessages {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBatchedMessages"]));
            }
            set {
                curObj["MaxBatchedMessages"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxConnectionsNull {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxConnections {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxConnections"]));
            }
            set {
                curObj["MaxConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxDirChangeIOSizeNull {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxDirChangeIOSize {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxDirChangeIOSize"]));
            }
            set {
                curObj["MaxDirChangeIOSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxEndpointConnectionsNull {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxEndpointConnections {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxEndpointConnections"]));
            }
            set {
                curObj["MaxEndpointConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMailObjectsNull {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMailObjects {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMailObjects"]));
            }
            set {
                curObj["MaxMailObjects"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMessageSizeNull {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMessageSize {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMessageSize"]));
            }
            set {
                curObj["MaxMessageSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsNull {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnections {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnections"]));
            }
            set {
                curObj["MaxOutConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsPerDomainNull {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnectionsPerDomain {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnectionsPerDomain"]));
            }
            set {
                curObj["MaxOutConnectionsPerDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRecipientsNull {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRecipients {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRecipients"]));
            }
            set {
                curObj["MaxRecipients"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSessionSizeNull {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSessionSize {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSessionSize"]));
            }
            set {
                curObj["MaxSessionSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSmtpErrorsNull {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSmtpErrors {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSmtpErrors"]));
            }
            set {
                curObj["MaxSmtpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNameResolutionTypeNull {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int NameResolutionType {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["NameResolutionType"]));
            }
            set {
                curObj["NameResolutionType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PickupDirectory {
            get {
                return ((string)(curObj["PickupDirectory"]));
            }
            set {
                curObj["PickupDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string QueueDirectory {
            get {
                return ((string)(curObj["QueueDirectory"]));
            }
            set {
                curObj["QueueDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRelayForAuthNull {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RelayForAuth {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RelayForAuth"]));
            }
            set {
                curObj["RelayForAuth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] RelayIpList {
            get {
                return ((System.Byte[])(curObj["RelayIpList"]));
            }
            set {
                curObj["RelayIpList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryAttemptsNull {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryAttempts {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryAttempts"]));
            }
            set {
                curObj["RemoteRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryIntervalNull {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryInterval {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryInterval"]));
            }
            set {
                curObj["RemoteRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpPortNull {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpPort {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpPort"]));
            }
            set {
                curObj["RemoteSmtpPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpSecurePortNull {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpSecurePort {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpSecurePort"]));
            }
            set {
                curObj["RemoteSmtpSecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteTimeoutNull {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteTimeout {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteTimeout"]));
            }
            set {
                curObj["RemoteTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRouteActionNull {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RouteAction {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RouteAction"]));
            }
            set {
                curObj["RouteAction"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutePassword {
            get {
                return ((string)(curObj["RoutePassword"]));
            }
            set {
                curObj["RoutePassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RouteUserName {
            get {
                return ((string)(curObj["RouteUserName"]));
            }
            set {
                curObj["RouteUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutingDll {
            get {
                return ((string)(curObj["RoutingDll"]));
            }
            set {
                curObj["RoutingDll"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SaslLogonDomain {
            get {
                return ((string)(curObj["SaslLogonDomain"]));
            }
            set {
                curObj["SaslLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] SecureBindings {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["SecureBindings"]));
            }
            set {
                curObj["SecureBindings"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendBadTo {
            get {
                return ((string)(curObj["SendBadTo"]));
            }
            set {
                curObj["SendBadTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendNdrTo {
            get {
                return ((string)(curObj["SendNdrTo"]));
            }
            set {
                curObj["SendNdrTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerAutoStartNull {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ServerAutoStart {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ServerAutoStart"]));
            }
            set {
                curObj["ServerAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ServerBindings {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ServerBindings"]));
            }
            set {
                curObj["ServerBindings"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServerComment {
            get {
                return ((string)(curObj["ServerComment"]));
            }
            set {
                curObj["ServerComment"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenBacklogNull {
            get {
                if ((curObj["ServerListenBacklog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenBacklog {
            get {
                if ((curObj["ServerListenBacklog"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenBacklog"]));
            }
            set {
                curObj["ServerListenBacklog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenTimeoutNull {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenTimeout {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenTimeout"]));
            }
            set {
                curObj["ServerListenTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldDeliverNull {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldDeliver {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldDeliver"]));
            }
            set {
                curObj["ShouldDeliver"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPickupMailNull {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPickupMail {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPickupMail"]));
            }
            set {
                curObj["ShouldPickupMail"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineInNull {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineIn {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineIn"]));
            }
            set {
                curObj["ShouldPipelineIn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineOutNull {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineOut {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineOut"]));
            }
            set {
                curObj["ShouldPipelineOut"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmartHost {
            get {
                return ((string)(curObj["SmartHost"]));
            }
            set {
                curObj["SmartHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmartHostTypeNull {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmartHostType {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmartHostType"]));
            }
            set {
                curObj["SmartHostType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAqueueWaitNull {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAqueueWait {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAqueueWait"]));
            }
            set {
                curObj["SmtpAqueueWait"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAuthTimeoutNull {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAuthTimeout {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAuthTimeout"]));
            }
            set {
                curObj["SmtpAuthTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpBdatTimeoutNull {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpBdatTimeout {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpBdatTimeout"]));
            }
            set {
                curObj["SmtpBdatTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpClearTextProvider {
            get {
                return ((string)(curObj["SmtpClearTextProvider"]));
            }
            set {
                curObj["SmtpClearTextProvider"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpConnectTimeoutNull {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpConnectTimeout {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpConnectTimeout"]));
            }
            set {
                curObj["SmtpConnectTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDataTimeoutNull {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDataTimeout {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDataTimeout"]));
            }
            set {
                curObj["SmtpDataTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDisableRelayNull {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDisableRelay {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDisableRelay"]));
            }
            set {
                curObj["SmtpDisableRelay"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDomainValidationFlagsNull {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDomainValidationFlags {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDomainValidationFlags"]));
            }
            set {
                curObj["SmtpDomainValidationFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDotStuffPickupDirFilesNull {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDotStuffPickupDirFiles {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDotStuffPickupDirFiles"]));
            }
            set {
                curObj["SmtpDotStuffPickupDirFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNLanguageIDNull {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNLanguageID {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNLanguageID"]));
            }
            set {
                curObj["SmtpDSNLanguageID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNOptionsNull {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNOptions {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNOptions"]));
            }
            set {
                curObj["SmtpDSNOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpEventlogLevelNull {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpEventlogLevel {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpEventlogLevel"]));
            }
            set {
                curObj["SmtpEventlogLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloNoDomainNull {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpHeloNoDomain {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpHeloNoDomain"]));
            }
            set {
                curObj["SmtpHeloNoDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloTimeoutNull {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpHeloTimeout {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpHeloTimeout"]));
            }
            set {
                curObj["SmtpHeloTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpInboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpInboundCommandSupportOptions {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpInboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpInboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpIpRestrictionFlagNull {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpIpRestrictionFlag {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpIpRestrictionFlag"]));
            }
            set {
                curObj["SmtpIpRestrictionFlag"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalDelayExpireMinutes {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalNDRExpireMinutes {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailFromTimeoutNull {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMailFromTimeout {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMailFromTimeout"]));
            }
            set {
                curObj["SmtpMailFromTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailNoHeloNull {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpMailNoHelo {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpMailNoHelo"]));
            }
            set {
                curObj["SmtpMailNoHelo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMaxRemoteQThreadsNull {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMaxRemoteQThreads {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMaxRemoteQThreads"]));
            }
            set {
                curObj["SmtpMaxRemoteQThreads"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpOutboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpOutboundCommandSupportOptions {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpOutboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpOutboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRcptToTimeoutNull {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRcptToTimeout {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRcptToTimeout"]));
            }
            set {
                curObj["SmtpRcptToTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteDelayExpireMinutes {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteNDRExpireMinutes {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpRemoteProgressiveRetry {
            get {
                return ((string)(curObj["SmtpRemoteProgressiveRetry"]));
            }
            set {
                curObj["SmtpRemoteProgressiveRetry"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteRetryThresholdNull {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteRetryThreshold {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteRetryThreshold"]));
            }
            set {
                curObj["SmtpRemoteRetryThreshold"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRsetTimeoutNull {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRsetTimeout {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRsetTimeout"]));
            }
            set {
                curObj["SmtpRsetTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSaslTimeoutNull {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpSaslTimeout {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpSaslTimeout"]));
            }
            set {
                curObj["SmtpSaslTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLCertHostnameValidationNull {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLCertHostnameValidation {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLCertHostnameValidation"]));
            }
            set {
                curObj["SmtpSSLCertHostnameValidation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLRequireTrustedCANull {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLRequireTrustedCA {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLRequireTrustedCA"]));
            }
            set {
                curObj["SmtpSSLRequireTrustedCA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpTurnTimeoutNull {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpTurnTimeout {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpTurnTimeout"]));
            }
            set {
                curObj["SmtpTurnTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpUseTcpDnsNull {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpUseTcpDns {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpUseTcpDns"]));
            }
            set {
                curObj["SmtpUseTcpDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedDefaultDomainNull {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedDefaultDomain {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedDefaultDomain"]));
            }
            set {
                curObj["UpdatedDefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedFQDNNull {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedFQDN {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedFQDN"]));
            }
            set {
                curObj["UpdatedFQDN"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAddNoHeaders() {
            if ((IsAddNoHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAddNoHeaders() {
            curObj["AddNoHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAllowAnonymous() {
            if ((IsAllowAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAllowAnonymous() {
            curObj["AllowAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAlwaysUseSsl() {
            if ((IsAlwaysUseSslNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAlwaysUseSsl() {
            curObj["AlwaysUseSsl"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousOnly() {
            if ((IsAnonymousOnlyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousOnly() {
            curObj["AnonymousOnly"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetBadMailDirectory() {
            curObj["BadMailDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeClusterEnabled() {
            if ((IsClusterEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetClusterEnabled() {
            curObj["ClusterEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeConnectionTimeout() {
            if ((IsConnectionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetConnectionTimeout() {
            curObj["ConnectionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetConnectResponse() {
            curObj["ConnectResponse"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDomain() {
            curObj["DefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableSocketPooling() {
            if ((IsDisableSocketPoolingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableSocketPooling() {
            curObj["DisableSocketPooling"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoMasquerade() {
            if ((IsDoMasqueradeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoMasquerade() {
            curObj["DoMasquerade"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDropDirectory() {
            curObj["DropDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDnsLookup() {
            if ((IsEnableReverseDnsLookupNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDnsLookup() {
            curObj["EnableReverseDnsLookup"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnDays() {
            if ((IsEtrnDaysNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnDays() {
            curObj["EtrnDays"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnSubdomains() {
            if ((IsEtrnSubdomainsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnSubdomains() {
            curObj["EtrnSubdomains"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFullyQualifiedDomainName() {
            curObj["FullyQualifiedDomainName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHopCount() {
            if ((IsHopCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHopCount() {
            curObj["HopCount"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLimitRemoteConnections() {
            if ((IsLimitRemoteConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLimitRemoteConnections() {
            curObj["LimitRemoteConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryAttempts() {
            if ((IsLocalRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryAttempts() {
            curObj["LocalRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryInterval() {
            if ((IsLocalRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryInterval() {
            curObj["LocalRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesRecv() {
            if ((IsLogExtFileBytesRecvNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesRecv() {
            curObj["LogExtFileBytesRecv"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesSent() {
            if ((IsLogExtFileBytesSentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesSent() {
            curObj["LogExtFileBytesSent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileClientIp() {
            if ((IsLogExtFileClientIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileClientIp() {
            curObj["LogExtFileClientIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileComputerName() {
            if ((IsLogExtFileComputerNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileComputerName() {
            curObj["LogExtFileComputerName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileCookie() {
            if ((IsLogExtFileCookieNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileCookie() {
            curObj["LogExtFileCookie"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileDate() {
            if ((IsLogExtFileDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileDate() {
            curObj["LogExtFileDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileFlags() {
            if ((IsLogExtFileFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileFlags() {
            curObj["LogExtFileFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHost() {
            if ((IsLogExtFileHostNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHost() {
            curObj["LogExtFileHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpStatus() {
            if ((IsLogExtFileHttpStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpStatus() {
            curObj["LogExtFileHttpStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpSubStatus() {
            if ((IsLogExtFileHttpSubStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpSubStatus() {
            curObj["LogExtFileHttpSubStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileMethod() {
            if ((IsLogExtFileMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileMethod() {
            curObj["LogExtFileMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileProtocolVersion() {
            if ((IsLogExtFileProtocolVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileProtocolVersion() {
            curObj["LogExtFileProtocolVersion"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileReferer() {
            if ((IsLogExtFileRefererNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileReferer() {
            curObj["LogExtFileReferer"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerIp() {
            if ((IsLogExtFileServerIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerIp() {
            curObj["LogExtFileServerIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerPort() {
            if ((IsLogExtFileServerPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerPort() {
            curObj["LogExtFileServerPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileSiteName() {
            if ((IsLogExtFileSiteNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileSiteName() {
            curObj["LogExtFileSiteName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTime() {
            if ((IsLogExtFileTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTime() {
            curObj["LogExtFileTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTimeTaken() {
            if ((IsLogExtFileTimeTakenNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTimeTaken() {
            curObj["LogExtFileTimeTaken"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriQuery() {
            if ((IsLogExtFileUriQueryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriQuery() {
            curObj["LogExtFileUriQuery"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriStem() {
            if ((IsLogExtFileUriStemNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriStem() {
            curObj["LogExtFileUriStem"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserAgent() {
            if ((IsLogExtFileUserAgentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserAgent() {
            curObj["LogExtFileUserAgent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserName() {
            if ((IsLogExtFileUserNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserName() {
            curObj["LogExtFileUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileWin32Status() {
            if ((IsLogExtFileWin32StatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileWin32Status() {
            curObj["LogExtFileWin32Status"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogFileDirectory() {
            curObj["LogFileDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFilePeriod() {
            if ((IsLogFilePeriodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFilePeriod() {
            curObj["LogFilePeriod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFileTruncateSize() {
            if ((IsLogFileTruncateSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFileTruncateSize() {
            curObj["LogFileTruncateSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcDataSource() {
            curObj["LogOdbcDataSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcPassword() {
            curObj["LogOdbcPassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcTableName() {
            curObj["LogOdbcTableName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcUserName() {
            curObj["LogOdbcUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogPluginClsid() {
            curObj["LogPluginClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogType() {
            if ((IsLogTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogType() {
            curObj["LogType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMasqueradeDomain() {
            curObj["MasqueradeDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBandwidth() {
            if ((IsMaxBandwidthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBandwidth() {
            curObj["MaxBandwidth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBatchedMessages() {
            if ((IsMaxBatchedMessagesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBatchedMessages() {
            curObj["MaxBatchedMessages"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxConnections() {
            if ((IsMaxConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxConnections() {
            curObj["MaxConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxDirChangeIOSize() {
            if ((IsMaxDirChangeIOSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxDirChangeIOSize() {
            curObj["MaxDirChangeIOSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxEndpointConnections() {
            if ((IsMaxEndpointConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxEndpointConnections() {
            curObj["MaxEndpointConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMailObjects() {
            if ((IsMaxMailObjectsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMailObjects() {
            curObj["MaxMailObjects"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMessageSize() {
            if ((IsMaxMessageSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMessageSize() {
            curObj["MaxMessageSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnections() {
            if ((IsMaxOutConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnections() {
            curObj["MaxOutConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnectionsPerDomain() {
            if ((IsMaxOutConnectionsPerDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnectionsPerDomain() {
            curObj["MaxOutConnectionsPerDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRecipients() {
            if ((IsMaxRecipientsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRecipients() {
            curObj["MaxRecipients"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSessionSize() {
            if ((IsMaxSessionSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSessionSize() {
            curObj["MaxSessionSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSmtpErrors() {
            if ((IsMaxSmtpErrorsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSmtpErrors() {
            curObj["MaxSmtpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNameResolutionType() {
            if ((IsNameResolutionTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNameResolutionType() {
            curObj["NameResolutionType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPickupDirectory() {
            curObj["PickupDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetQueueDirectory() {
            curObj["QueueDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRelayForAuth() {
            if ((IsRelayForAuthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRelayForAuth() {
            curObj["RelayForAuth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRelayIpList() {
            curObj["RelayIpList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryAttempts() {
            if ((IsRemoteRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryAttempts() {
            curObj["RemoteRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryInterval() {
            if ((IsRemoteRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryInterval() {
            curObj["RemoteRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpPort() {
            if ((IsRemoteSmtpPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpPort() {
            curObj["RemoteSmtpPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpSecurePort() {
            if ((IsRemoteSmtpSecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpSecurePort() {
            curObj["RemoteSmtpSecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteTimeout() {
            if ((IsRemoteTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteTimeout() {
            curObj["RemoteTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRouteAction() {
            if ((IsRouteActionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRouteAction() {
            curObj["RouteAction"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutePassword() {
            curObj["RoutePassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRouteUserName() {
            curObj["RouteUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutingDll() {
            curObj["RoutingDll"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSaslLogonDomain() {
            curObj["SaslLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSecureBindings() {
            curObj["SecureBindings"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendBadTo() {
            curObj["SendBadTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendNdrTo() {
            curObj["SendNdrTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerAutoStart() {
            if ((IsServerAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerAutoStart() {
            curObj["ServerAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerBindings() {
            curObj["ServerBindings"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerComment() {
            curObj["ServerComment"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenBacklog() {
            if ((IsServerListenBacklogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenBacklog() {
            curObj["ServerListenBacklog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenTimeout() {
            if ((IsServerListenTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenTimeout() {
            curObj["ServerListenTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldDeliver() {
            if ((IsShouldDeliverNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldDeliver() {
            curObj["ShouldDeliver"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPickupMail() {
            if ((IsShouldPickupMailNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPickupMail() {
            curObj["ShouldPickupMail"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineIn() {
            if ((IsShouldPipelineInNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineIn() {
            curObj["ShouldPipelineIn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineOut() {
            if ((IsShouldPipelineOutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineOut() {
            curObj["ShouldPipelineOut"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmartHost() {
            curObj["SmartHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmartHostType() {
            if ((IsSmartHostTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmartHostType() {
            curObj["SmartHostType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAqueueWait() {
            if ((IsSmtpAqueueWaitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAqueueWait() {
            curObj["SmtpAqueueWait"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAuthTimeout() {
            if ((IsSmtpAuthTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAuthTimeout() {
            curObj["SmtpAuthTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpBdatTimeout() {
            if ((IsSmtpBdatTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpBdatTimeout() {
            curObj["SmtpBdatTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpClearTextProvider() {
            curObj["SmtpClearTextProvider"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpConnectTimeout() {
            if ((IsSmtpConnectTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpConnectTimeout() {
            curObj["SmtpConnectTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDataTimeout() {
            if ((IsSmtpDataTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDataTimeout() {
            curObj["SmtpDataTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDisableRelay() {
            if ((IsSmtpDisableRelayNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDisableRelay() {
            curObj["SmtpDisableRelay"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDomainValidationFlags() {
            if ((IsSmtpDomainValidationFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDomainValidationFlags() {
            curObj["SmtpDomainValidationFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDotStuffPickupDirFiles() {
            if ((IsSmtpDotStuffPickupDirFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDotStuffPickupDirFiles() {
            curObj["SmtpDotStuffPickupDirFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNLanguageID() {
            if ((IsSmtpDSNLanguageIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNLanguageID() {
            curObj["SmtpDSNLanguageID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNOptions() {
            if ((IsSmtpDSNOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNOptions() {
            curObj["SmtpDSNOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpEventlogLevel() {
            if ((IsSmtpEventlogLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpEventlogLevel() {
            curObj["SmtpEventlogLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloNoDomain() {
            if ((IsSmtpHeloNoDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloNoDomain() {
            curObj["SmtpHeloNoDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloTimeout() {
            if ((IsSmtpHeloTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloTimeout() {
            curObj["SmtpHeloTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpInboundCommandSupportOptions() {
            if ((IsSmtpInboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpInboundCommandSupportOptions() {
            curObj["SmtpInboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpIpRestrictionFlag() {
            if ((IsSmtpIpRestrictionFlagNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpIpRestrictionFlag() {
            curObj["SmtpIpRestrictionFlag"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalDelayExpireMinutes() {
            if ((IsSmtpLocalDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalDelayExpireMinutes() {
            curObj["SmtpLocalDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalNDRExpireMinutes() {
            if ((IsSmtpLocalNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalNDRExpireMinutes() {
            curObj["SmtpLocalNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailFromTimeout() {
            if ((IsSmtpMailFromTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailFromTimeout() {
            curObj["SmtpMailFromTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailNoHelo() {
            if ((IsSmtpMailNoHeloNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailNoHelo() {
            curObj["SmtpMailNoHelo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMaxRemoteQThreads() {
            if ((IsSmtpMaxRemoteQThreadsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMaxRemoteQThreads() {
            curObj["SmtpMaxRemoteQThreads"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpOutboundCommandSupportOptions() {
            if ((IsSmtpOutboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpOutboundCommandSupportOptions() {
            curObj["SmtpOutboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRcptToTimeout() {
            if ((IsSmtpRcptToTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRcptToTimeout() {
            curObj["SmtpRcptToTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteDelayExpireMinutes() {
            if ((IsSmtpRemoteDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteDelayExpireMinutes() {
            curObj["SmtpRemoteDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteNDRExpireMinutes() {
            if ((IsSmtpRemoteNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteNDRExpireMinutes() {
            curObj["SmtpRemoteNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpRemoteProgressiveRetry() {
            curObj["SmtpRemoteProgressiveRetry"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteRetryThreshold() {
            if ((IsSmtpRemoteRetryThresholdNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteRetryThreshold() {
            curObj["SmtpRemoteRetryThreshold"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRsetTimeout() {
            if ((IsSmtpRsetTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRsetTimeout() {
            curObj["SmtpRsetTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSaslTimeout() {
            if ((IsSmtpSaslTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSaslTimeout() {
            curObj["SmtpSaslTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLCertHostnameValidation() {
            if ((IsSmtpSSLCertHostnameValidationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLCertHostnameValidation() {
            curObj["SmtpSSLCertHostnameValidation"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLRequireTrustedCA() {
            if ((IsSmtpSSLRequireTrustedCANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLRequireTrustedCA() {
            curObj["SmtpSSLRequireTrustedCA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpTurnTimeout() {
            if ((IsSmtpTurnTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpTurnTimeout() {
            curObj["SmtpTurnTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpUseTcpDns() {
            if ((IsSmtpUseTcpDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpUseTcpDns() {
            curObj["SmtpUseTcpDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedDefaultDomain() {
            if ((IsUpdatedDefaultDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedDefaultDomain() {
            curObj["UpdatedDefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedFQDN() {
            if ((IsUpdatedFQDNNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedFQDN() {
            curObj["UpdatedFQDN"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpServerSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServerSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpServerSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServerSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServerSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpServerSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServerSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpServerSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpServerSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServerSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServerSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpServerSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServerSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServerSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServerSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpServerSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Containers.cs ===
/*******************************************************************
 *    FILE:         Containers.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      04/08/2004      gamagev    Created
 *
 *    Copyright <cp> 2004 Microsoft Corporation.  All Rights Reserved.
 ********************************************************************
 */

namespace xonline.tools.wstrunner.core
{        
    public enum ServiceRoles 
    {
        wstadmin,
        wstclientlib,
        wstoperator
    }

    public enum RolePermissions 
    {
        Select,
        Insert,
        Delete,
        Update,
        Execute
    }

    public enum SetupStep
    {
        BeforeTables,
        Tables,
        AfterTables,
        Views,
        AfterViews,
        StoredProcedures,
        AfterStoredProcedures,
        SecurityRoles,
        Final
    }

    public enum ArticleCommands
    {
        Insert,
        Update,
        Delete
    }

    public enum WstSecondaryType
    {
        NoSecondaries,
        SingleMaster,
        MultiMaster,
        LogShipping,
        WriteAllCopies
    }

    public enum WstPartitionType
    {
        None,
        Variable,
        Fixed
    }

    public class Database
    {
        private readonly string _server;
        private readonly string _name;
        private readonly bool _primary;
        private readonly string _status;
        private readonly bool _hasSecondary;
        private readonly bool _isDefaultPrimary;

        public Database(string name, string server, bool primary, string status, bool hasSecondary,bool isDefaultPriamry)
        {
            _name = name;
            _server = server;
            _primary = primary;
            _status = status;
            _hasSecondary = hasSecondary;
            _isDefaultPrimary = isDefaultPriamry;
        }

        public string Name{ get { return _name; } } 
        public string Server{ get { return _server; } }
        public bool Primary{ get { return _primary; } } 
        public string Status{ get {return _status; } }
        public bool HasSecondary{ get { return _hasSecondary; } } 
        public bool IsDefaultPrimary{get {return _isDefaultPrimary;}}
    }        
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebVirtualDirSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsWebVirtualDirSetting
    public class IIsWebVirtualDirSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebVirtualDirSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebVirtualDirSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDirSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDirSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebVirtualDirSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebVirtualDirSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowClientDebugNull {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowClientDebug {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowClientDebug"]));
            }
            set {
                curObj["AppAllowClientDebug"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowDebuggingNull {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowDebugging {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowDebugging"]));
            }
            set {
                curObj["AppAllowDebugging"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppFriendlyName {
            get {
                return ((string)(curObj["AppFriendlyName"]));
            }
            set {
                curObj["AppFriendlyName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppOopRecoverLimitNull {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppOopRecoverLimit {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppOopRecoverLimit"]));
            }
            set {
                curObj["AppOopRecoverLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPoolId {
            get {
                return ((string)(curObj["AppPoolId"]));
            }
            set {
                curObj["AppPoolId"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppWamClsid {
            get {
                return ((string)(curObj["AppWamClsid"]));
            }
            set {
                curObj["AppWamClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowOutOfProcComponentsNull {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowOutOfProcComponents {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowOutOfProcComponents"]));
            }
            set {
                curObj["AspAllowOutOfProcComponents"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowSessionStateNull {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowSessionState {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowSessionState"]));
            }
            set {
                curObj["AspAllowSessionState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAppServiceFlagsNull {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspAppServiceFlags {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspAppServiceFlags"]));
            }
            set {
                curObj["AspAppServiceFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingLimitNull {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspBufferingLimit {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspBufferingLimit"]));
            }
            set {
                curObj["AspBufferingLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingOnNull {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspBufferingOn {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspBufferingOn"]));
            }
            set {
                curObj["AspBufferingOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCalcLineNumberNull {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspCalcLineNumber {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspCalcLineNumber"]));
            }
            set {
                curObj["AspCalcLineNumber"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCodepageNull {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspCodepage {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspCodepage"]));
            }
            set {
                curObj["AspCodepage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspDiskTemplateCacheDirectory {
            get {
                return ((string)(curObj["AspDiskTemplateCacheDirectory"]));
            }
            set {
                curObj["AspDiskTemplateCacheDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableApplicationRestartNull {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableApplicationRestart {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableApplicationRestart"]));
            }
            set {
                curObj["AspEnableApplicationRestart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableAspHtmlFallbackNull {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableAspHtmlFallback {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableAspHtmlFallback"]));
            }
            set {
                curObj["AspEnableAspHtmlFallback"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableChunkedEncodingNull {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableChunkedEncoding {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableChunkedEncoding"]));
            }
            set {
                curObj["AspEnableChunkedEncoding"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableParentPathsNull {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableParentPaths {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableParentPaths"]));
            }
            set {
                curObj["AspEnableParentPaths"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableSxsNull {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableSxs {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableSxs"]));
            }
            set {
                curObj["AspEnableSxs"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTrackerNull {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTracker {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTracker"]));
            }
            set {
                curObj["AspEnableTracker"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTypelibCacheNull {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTypelibCache {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTypelibCache"]));
            }
            set {
                curObj["AspEnableTypelibCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspErrorsToNTLogNull {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspErrorsToNTLog {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspErrorsToNTLog"]));
            }
            set {
                curObj["AspErrorsToNTLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExceptionCatchEnableNull {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspExceptionCatchEnable {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspExceptionCatchEnable"]));
            }
            set {
                curObj["AspExceptionCatchEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExecuteInMTANull {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspExecuteInMTA {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspExecuteInMTA"]));
            }
            set {
                curObj["AspExecuteInMTA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspKeepSessionIDSecureNull {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspKeepSessionIDSecure {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspKeepSessionIDSecure"]));
            }
            set {
                curObj["AspKeepSessionIDSecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLCIDNull {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspLCID {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspLCID"]));
            }
            set {
                curObj["AspLCID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLogErrorRequestsNull {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspLogErrorRequests {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspLogErrorRequests"]));
            }
            set {
                curObj["AspLogErrorRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxDiskTemplateCacheFilesNull {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxDiskTemplateCacheFiles {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxDiskTemplateCacheFiles"]));
            }
            set {
                curObj["AspMaxDiskTemplateCacheFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxRequestEntityAllowedNull {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxRequestEntityAllowed {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxRequestEntityAllowed"]));
            }
            set {
                curObj["AspMaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspPartitionID {
            get {
                return ((string)(curObj["AspPartitionID"]));
            }
            set {
                curObj["AspPartitionID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspProcessorThreadMaxNull {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspProcessorThreadMax {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspProcessorThreadMax"]));
            }
            set {
                curObj["AspProcessorThreadMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueConnectionTestTimeNull {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueConnectionTestTime {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueConnectionTestTime"]));
            }
            set {
                curObj["AspQueueConnectionTestTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueTimeoutNull {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueTimeout {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueTimeout"]));
            }
            set {
                curObj["AspQueueTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRequestQueueMaxNull {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspRequestQueueMax {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspRequestQueueMax"]));
            }
            set {
                curObj["AspRequestQueueMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRunOnEndAnonymouslyNull {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspRunOnEndAnonymously {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspRunOnEndAnonymously"]));
            }
            set {
                curObj["AspRunOnEndAnonymously"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptEngineCacheMaxNull {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptEngineCacheMax {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptEngineCacheMax"]));
            }
            set {
                curObj["AspScriptEngineCacheMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptErrorMessage {
            get {
                return ((string)(curObj["AspScriptErrorMessage"]));
            }
            set {
                curObj["AspScriptErrorMessage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptErrorSentToBrowserNull {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspScriptErrorSentToBrowser {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspScriptErrorSentToBrowser"]));
            }
            set {
                curObj["AspScriptErrorSentToBrowser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptFileCacheSizeNull {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptFileCacheSize {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptFileCacheSize"]));
            }
            set {
                curObj["AspScriptFileCacheSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptLanguage {
            get {
                return ((string)(curObj["AspScriptLanguage"]));
            }
            set {
                curObj["AspScriptLanguage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptTimeoutNull {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptTimeout {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptTimeout"]));
            }
            set {
                curObj["AspScriptTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionMaxNull {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionMax {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionMax"]));
            }
            set {
                curObj["AspSessionMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionTimeoutNull {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionTimeout {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionTimeout"]));
            }
            set {
                curObj["AspSessionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspSxsName {
            get {
                return ((string)(curObj["AspSxsName"]));
            }
            set {
                curObj["AspSxsName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspTrackThreadingModelNull {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspTrackThreadingModel {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspTrackThreadingModel"]));
            }
            set {
                curObj["AspTrackThreadingModel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspUsePartitionNull {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspUsePartition {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspUsePartition"]));
            }
            set {
                curObj["AspUsePartition"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistenceNull {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthPersistence {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthPersistence"]));
            }
            set {
                curObj["AuthPersistence"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistSingleRequestNull {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPersistSingleRequest {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPersistSingleRequest"]));
            }
            set {
                curObj["AuthPersistSingleRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzImpersonationLevelNull {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AzImpersonationLevel {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AzImpersonationLevel"]));
            }
            set {
                curObj["AzImpersonationLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CacheControlCustom {
            get {
                return ((string)(curObj["CacheControlCustom"]));
            }
            set {
                curObj["CacheControlCustom"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlMaxAgeNull {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CacheControlMaxAge {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CacheControlMaxAge"]));
            }
            set {
                curObj["CacheControlMaxAge"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlNoCacheNull {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheControlNoCache {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheControlNoCache"]));
            }
            set {
                curObj["CacheControlNoCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheISAPINull {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheISAPI {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheISAPI"]));
            }
            set {
                curObj["CacheISAPI"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCGITimeoutNull {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CGITimeout {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CGITimeout"]));
            }
            set {
                curObj["CGITimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsContentIndexedNull {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ContentIndexed {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ContentIndexed"]));
            }
            set {
                curObj["ContentIndexed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateCGIWithNewConsoleNull {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateCGIWithNewConsole {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateCGIWithNewConsole"]));
            }
            set {
                curObj["CreateCGIWithNewConsole"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateProcessAsUserNull {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateProcessAsUser {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateProcessAsUser"]));
            }
            set {
                curObj["CreateProcessAsUser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDoc {
            get {
                return ((string)(curObj["DefaultDoc"]));
            }
            set {
                curObj["DefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDocFooter {
            get {
                return ((string)(curObj["DefaultDocFooter"]));
            }
            set {
                curObj["DefaultDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseFlagsNull {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DirBrowseFlags {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DirBrowseFlags"]));
            }
            set {
                curObj["DirBrowseFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowDateNull {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowDate {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowDate"]));
            }
            set {
                curObj["DirBrowseShowDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowExtensionNull {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowExtension {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowExtension"]));
            }
            set {
                curObj["DirBrowseShowExtension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowLongDateNull {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowLongDate {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowLongDate"]));
            }
            set {
                curObj["DirBrowseShowLongDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowSizeNull {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowSize {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowSize"]));
            }
            set {
                curObj["DirBrowseShowSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowTimeNull {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowTime {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowTime"]));
            }
            set {
                curObj["DirBrowseShowTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableStaticFileCacheNull {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableStaticFileCache {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableStaticFileCache"]));
            }
            set {
                curObj["DisableStaticFileCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoDynamicCompressionNull {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoDynamicCompression {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoDynamicCompression"]));
            }
            set {
                curObj["DoDynamicCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoStaticCompressionNull {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoStaticCompression {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoStaticCompression"]));
            }
            set {
                curObj["DoStaticCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDefaultDocNull {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDefaultDoc {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDefaultDoc"]));
            }
            set {
                curObj["EnableDefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDirBrowsingNull {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDirBrowsing {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDirBrowsing"]));
            }
            set {
                curObj["EnableDirBrowsing"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDocFooterNull {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDocFooter {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDocFooter"]));
            }
            set {
                curObj["EnableDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsNull {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDns {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDns"]));
            }
            set {
                curObj["EnableReverseDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsFrontPageWebNull {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool FrontPageWeb {
            get {
                if ((curObj["FrontPageWeb"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["FrontPageWeb"]));
            }
            set {
                curObj["FrontPageWeb"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpCustomHeaders {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpCustomHeaders"]));
            }
            set {
                curObj["HttpCustomHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpErrors {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpErrors"]));
            }
            set {
                curObj["HttpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpExpires {
            get {
                return ((string)(curObj["HttpExpires"]));
            }
            set {
                curObj["HttpExpires"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] HttpPics {
            get {
                return ((string[])(curObj["HttpPics"]));
            }
            set {
                curObj["HttpPics"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpRedirect {
            get {
                return ((string)(curObj["HttpRedirect"]));
            }
            set {
                curObj["HttpRedirect"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRequestEntityAllowedNull {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRequestEntityAllowed {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRequestEntityAllowed"]));
            }
            set {
                curObj["MaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPassportRequireADMappingNull {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PassportRequireADMapping {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PassportRequireADMapping"]));
            }
            set {
                curObj["PassportRequireADMapping"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Path0 {
            get {
                return ((string)(curObj["Path"]));
            }
            set {
                curObj["Path"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPoolIdcTimeoutNull {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PoolIdcTimeout {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PoolIdcTimeout"]));
            }
            set {
                curObj["PoolIdcTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RedirectHeaders {
            get {
                return ((string[])(curObj["RedirectHeaders"]));
            }
            set {
                curObj["RedirectHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ScriptMaps {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ScriptMaps"]));
            }
            set {
                curObj["ScriptMaps"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSSIExecDisableNull {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SSIExecDisable {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SSIExecDisable"]));
            }
            set {
                curObj["SSIExecDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string UNCPassword {
            get {
                return ((string)(curObj["UNCPassword"]));
            }
            set {
                curObj["UNCPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string UNCUserName {
            get {
                return ((string)(curObj["UNCUserName"]));
            }
            set {
                curObj["UNCUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUploadReadAheadSizeNull {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int UploadReadAheadSize {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["UploadReadAheadSize"]));
            }
            set {
                curObj["UploadReadAheadSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUseDigestSSPNull {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UseDigestSSP {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UseDigestSSP"]));
            }
            set {
                curObj["UseDigestSSP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWebDAVMaxAttributesPerElementNull {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int WebDAVMaxAttributesPerElement {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["WebDAVMaxAttributesPerElement"]));
            }
            set {
                curObj["WebDAVMaxAttributesPerElement"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWin32ErrorNull {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int Win32Error {
            get {
                if ((curObj["Win32Error"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["Win32Error"]));
            }
            set {
                curObj["Win32Error"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowClientDebug() {
            if ((IsAppAllowClientDebugNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowClientDebug() {
            curObj["AppAllowClientDebug"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowDebugging() {
            if ((IsAppAllowDebuggingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowDebugging() {
            curObj["AppAllowDebugging"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppFriendlyName() {
            curObj["AppFriendlyName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppOopRecoverLimit() {
            if ((IsAppOopRecoverLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppOopRecoverLimit() {
            curObj["AppOopRecoverLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppPoolId() {
            curObj["AppPoolId"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppWamClsid() {
            curObj["AppWamClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowOutOfProcComponents() {
            if ((IsAspAllowOutOfProcComponentsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowOutOfProcComponents() {
            curObj["AspAllowOutOfProcComponents"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowSessionState() {
            if ((IsAspAllowSessionStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowSessionState() {
            curObj["AspAllowSessionState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAppServiceFlags() {
            if ((IsAspAppServiceFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAppServiceFlags() {
            curObj["AspAppServiceFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingLimit() {
            if ((IsAspBufferingLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingLimit() {
            curObj["AspBufferingLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingOn() {
            if ((IsAspBufferingOnNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingOn() {
            curObj["AspBufferingOn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCalcLineNumber() {
            if ((IsAspCalcLineNumberNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCalcLineNumber() {
            curObj["AspCalcLineNumber"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCodepage() {
            if ((IsAspCodepageNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCodepage() {
            curObj["AspCodepage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspDiskTemplateCacheDirectory() {
            curObj["AspDiskTemplateCacheDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableApplicationRestart() {
            if ((IsAspEnableApplicationRestartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableApplicationRestart() {
            curObj["AspEnableApplicationRestart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableAspHtmlFallback() {
            if ((IsAspEnableAspHtmlFallbackNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableAspHtmlFallback() {
            curObj["AspEnableAspHtmlFallback"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableChunkedEncoding() {
            if ((IsAspEnableChunkedEncodingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableChunkedEncoding() {
            curObj["AspEnableChunkedEncoding"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableParentPaths() {
            if ((IsAspEnableParentPathsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableParentPaths() {
            curObj["AspEnableParentPaths"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableSxs() {
            if ((IsAspEnableSxsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableSxs() {
            curObj["AspEnableSxs"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTracker() {
            if ((IsAspEnableTrackerNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTracker() {
            curObj["AspEnableTracker"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTypelibCache() {
            if ((IsAspEnableTypelibCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTypelibCache() {
            curObj["AspEnableTypelibCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspErrorsToNTLog() {
            if ((IsAspErrorsToNTLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspErrorsToNTLog() {
            curObj["AspErrorsToNTLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExceptionCatchEnable() {
            if ((IsAspExceptionCatchEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExceptionCatchEnable() {
            curObj["AspExceptionCatchEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExecuteInMTA() {
            if ((IsAspExecuteInMTANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExecuteInMTA() {
            curObj["AspExecuteInMTA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspKeepSessionIDSecure() {
            if ((IsAspKeepSessionIDSecureNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspKeepSessionIDSecure() {
            curObj["AspKeepSessionIDSecure"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLCID() {
            if ((IsAspLCIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLCID() {
            curObj["AspLCID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLogErrorRequests() {
            if ((IsAspLogErrorRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLogErrorRequests() {
            curObj["AspLogErrorRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxDiskTemplateCacheFiles() {
            if ((IsAspMaxDiskTemplateCacheFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxDiskTemplateCacheFiles() {
            curObj["AspMaxDiskTemplateCacheFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxRequestEntityAllowed() {
            if ((IsAspMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxRequestEntityAllowed() {
            curObj["AspMaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspPartitionID() {
            curObj["AspPartitionID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspProcessorThreadMax() {
            if ((IsAspProcessorThreadMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspProcessorThreadMax() {
            curObj["AspProcessorThreadMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueConnectionTestTime() {
            if ((IsAspQueueConnectionTestTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueConnectionTestTime() {
            curObj["AspQueueConnectionTestTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueTimeout() {
            if ((IsAspQueueTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueTimeout() {
            curObj["AspQueueTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRequestQueueMax() {
            if ((IsAspRequestQueueMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRequestQueueMax() {
            curObj["AspRequestQueueMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRunOnEndAnonymously() {
            if ((IsAspRunOnEndAnonymouslyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRunOnEndAnonymously() {
            curObj["AspRunOnEndAnonymously"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptEngineCacheMax() {
            if ((IsAspScriptEngineCacheMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptEngineCacheMax() {
            curObj["AspScriptEngineCacheMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptErrorMessage() {
            curObj["AspScriptErrorMessage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptErrorSentToBrowser() {
            if ((IsAspScriptErrorSentToBrowserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptErrorSentToBrowser() {
            curObj["AspScriptErrorSentToBrowser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptFileCacheSize() {
            if ((IsAspScriptFileCacheSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptFileCacheSize() {
            curObj["AspScriptFileCacheSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptLanguage() {
            curObj["AspScriptLanguage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptTimeout() {
            if ((IsAspScriptTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptTimeout() {
            curObj["AspScriptTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionMax() {
            if ((IsAspSessionMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionMax() {
            curObj["AspSessionMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionTimeout() {
            if ((IsAspSessionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionTimeout() {
            curObj["AspSessionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspSxsName() {
            curObj["AspSxsName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspTrackThreadingModel() {
            if ((IsAspTrackThreadingModelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspTrackThreadingModel() {
            curObj["AspTrackThreadingModel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspUsePartition() {
            if ((IsAspUsePartitionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspUsePartition() {
            curObj["AspUsePartition"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistence() {
            if ((IsAuthPersistenceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistence() {
            curObj["AuthPersistence"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistSingleRequest() {
            if ((IsAuthPersistSingleRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistSingleRequest() {
            curObj["AuthPersistSingleRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzImpersonationLevel() {
            if ((IsAzImpersonationLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzImpersonationLevel() {
            curObj["AzImpersonationLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetCacheControlCustom() {
            curObj["CacheControlCustom"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlMaxAge() {
            if ((IsCacheControlMaxAgeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlMaxAge() {
            curObj["CacheControlMaxAge"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlNoCache() {
            if ((IsCacheControlNoCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlNoCache() {
            curObj["CacheControlNoCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheISAPI() {
            if ((IsCacheISAPINull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheISAPI() {
            curObj["CacheISAPI"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCGITimeout() {
            if ((IsCGITimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCGITimeout() {
            curObj["CGITimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeContentIndexed() {
            if ((IsContentIndexedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetContentIndexed() {
            curObj["ContentIndexed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateCGIWithNewConsole() {
            if ((IsCreateCGIWithNewConsoleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateCGIWithNewConsole() {
            curObj["CreateCGIWithNewConsole"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateProcessAsUser() {
            if ((IsCreateProcessAsUserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateProcessAsUser() {
            curObj["CreateProcessAsUser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDoc() {
            curObj["DefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDocFooter() {
            curObj["DefaultDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseFlags() {
            if ((IsDirBrowseFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseFlags() {
            curObj["DirBrowseFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowDate() {
            if ((IsDirBrowseShowDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowDate() {
            curObj["DirBrowseShowDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowExtension() {
            if ((IsDirBrowseShowExtensionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowExtension() {
            curObj["DirBrowseShowExtension"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowLongDate() {
            if ((IsDirBrowseShowLongDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowLongDate() {
            curObj["DirBrowseShowLongDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowSize() {
            if ((IsDirBrowseShowSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowSize() {
            curObj["DirBrowseShowSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowTime() {
            if ((IsDirBrowseShowTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowTime() {
            curObj["DirBrowseShowTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableStaticFileCache() {
            if ((IsDisableStaticFileCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableStaticFileCache() {
            curObj["DisableStaticFileCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoDynamicCompression() {
            if ((IsDoDynamicCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoDynamicCompression() {
            curObj["DoDynamicCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoStaticCompression() {
            if ((IsDoStaticCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoStaticCompression() {
            curObj["DoStaticCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDefaultDoc() {
            if ((IsEnableDefaultDocNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDefaultDoc() {
            curObj["EnableDefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDirBrowsing() {
            if ((IsEnableDirBrowsingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDirBrowsing() {
            curObj["EnableDirBrowsing"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDocFooter() {
            if ((IsEnableDocFooterNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDocFooter() {
            curObj["EnableDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDns() {
            if ((IsEnableReverseDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDns() {
            curObj["EnableReverseDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeFrontPageWeb() {
            if ((IsFrontPageWebNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetFrontPageWeb() {
            curObj["FrontPageWeb"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpCustomHeaders() {
            curObj["HttpCustomHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpErrors() {
            curObj["HttpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpExpires() {
            curObj["HttpExpires"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpPics() {
            curObj["HttpPics"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpRedirect() {
            curObj["HttpRedirect"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRequestEntityAllowed() {
            if ((IsMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRequestEntityAllowed() {
            curObj["MaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePassportRequireADMapping() {
            if ((IsPassportRequireADMappingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPassportRequireADMapping() {
            curObj["PassportRequireADMapping"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPath0() {
            curObj["Path"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePoolIdcTimeout() {
            if ((IsPoolIdcTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPoolIdcTimeout() {
            curObj["PoolIdcTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRedirectHeaders() {
            curObj["RedirectHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetScriptMaps() {
            curObj["ScriptMaps"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSSIExecDisable() {
            if ((IsSSIExecDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSSIExecDisable() {
            curObj["SSIExecDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetUNCPassword() {
            curObj["UNCPassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetUNCUserName() {
            curObj["UNCUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUploadReadAheadSize() {
            if ((IsUploadReadAheadSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUploadReadAheadSize() {
            curObj["UploadReadAheadSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUseDigestSSP() {
            if ((IsUseDigestSSPNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUseDigestSSP() {
            curObj["UseDigestSSP"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWebDAVMaxAttributesPerElement() {
            if ((IsWebDAVMaxAttributesPerElementNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWebDAVMaxAttributesPerElement() {
            curObj["WebDAVMaxAttributesPerElement"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWin32Error() {
            if ((IsWin32ErrorNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWin32Error() {
            curObj["Win32Error"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebVirtualDirSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebVirtualDirSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebVirtualDirSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebVirtualDirSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebVirtualDirSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebVirtualDirSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebVirtualDirSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebVirtualDirSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebVirtualDirSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebVirtualDirSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebVirtualDirSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebVirtualDirSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebVirtualDirSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebVirtualDirSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebVirtualDirSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebVirtualDirSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Account.cs ===
/*******************************************************************
 *    FILE:         Account.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      01/29/2005      gamagev    Created
 *
 *    Copyright <cp> 2004 Microsoft Corporation.  All Rights Reserved.
 ********************************************************************
 */
using System;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    /// <summary>
    /// Summary description for Accounts.
    /// </summary>
    public abstract class Account : IComparable
    {
        protected string  _account;
        
        public string Name { get { return _account; } }

        public abstract void Persist();        

        public abstract int CompareTo(object obj);

        protected Log log = Log.GetInstance();
    }

    public class ConfigAccount : Account
    {
        protected ServiceRoles _role;

        public ConfigAccount(string account, ServiceRoles role)
        {
            _account = account;
            _role = role;
        }


        /// <summary>
        /// Adds this account to the WstConfig Server with the given role
        /// </summary>
        public override void Persist()
        {
            log.WriteLine("Adding account:'{0}', role:'{1}' to config server...",
                _account, Enum.GetName(typeof(ServiceRoles), _role));

            WmoCommandEnvironment wstEnvironment = new WmoCommandEnvironment();

            wstEnvironment.UserName = _account;
            wstEnvironment.SecurityRole = Enum.GetName(typeof(ServiceRoles), _role);
            
            wstEnvironment.AddAccount();
            
            log.WriteLine("Done!");
        }

        public override int CompareTo(object obj)
        {
            if(obj is ConfigAccount)
            {
                ConfigAccount account = (ConfigAccount)obj;

                int strCompare = string.Compare(_account, account._account, true);

                if ( strCompare != 0 )
                    return strCompare;

                if ( _role != account._role)
                    return -1;

                return 0;
            }

            throw new ArgumentException("object is not a ConfigAccount object");
        }
    }

    public class ApplicationAccount : Account
    {
        protected string _deploymentName;
        protected string _role;

        public ApplicationAccount(string account, string role, string deploymentName)
        {
            _account = account;
            _role = role;
            _deploymentName = deploymentName;
        }

        /// <summary>
        /// Adds this account to the deployment with the given role
        /// </summary>
        public override void Persist()
        {
            log.WriteLine("Adding account:{0} role:'{1}' to deployment:{2}...",
                _account, _role, _deploymentName);

            WmoCommandDeployment wstDeployment = new WmoCommandDeployment();
            
            wstDeployment.UserName = _account;
            wstDeployment.SecurityRole = _role;
            wstDeployment.DeploymentName = _deploymentName;

            wstDeployment.AddAccount();
            
            log.WriteLine("Done!");
        }

        public override int CompareTo(object obj)
        {
            if(obj is ApplicationAccount)
            {
                ApplicationAccount account = (ApplicationAccount)obj;

                int strCompare = string.Compare(_account, account._account, true);

                if ( strCompare != 0 )
                    return strCompare;

                strCompare = string.Compare(_role, account._role, true);

                if ( strCompare != 0)
                    return strCompare;

                strCompare = string.Compare(_deploymentName, account._deploymentName, true);

                if ( strCompare != 0)
                    return strCompare;

                return 0;
            }

            throw new ArgumentException("object is not a ConfigAccount object");
        }

        public string Role
        {
            get { return _role; }
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsSmtpServiceSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // An Early Bound class generated for the WMI class.IIsSmtpServiceSetting
    public class IIsSmtpServiceSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsSmtpServiceSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsSmtpServiceSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsSmtpServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsSmtpServiceSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAddNoHeadersNull {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AddNoHeaders {
            get {
                if ((curObj["AddNoHeaders"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AddNoHeaders"]));
            }
            set {
                curObj["AddNoHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowAnonymousNull {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowAnonymous {
            get {
                if ((curObj["AllowAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowAnonymous"]));
            }
            set {
                curObj["AllowAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAlwaysUseSslNull {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AlwaysUseSsl {
            get {
                if ((curObj["AlwaysUseSsl"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AlwaysUseSsl"]));
            }
            set {
                curObj["AlwaysUseSsl"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousOnlyNull {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousOnly {
            get {
                if ((curObj["AnonymousOnly"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousOnly"]));
            }
            set {
                curObj["AnonymousOnly"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string BadMailDirectory {
            get {
                return ((string)(curObj["BadMailDirectory"]));
            }
            set {
                curObj["BadMailDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsConnectionTimeoutNull {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ConnectionTimeout {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ConnectionTimeout"]));
            }
            set {
                curObj["ConnectionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ConnectResponse {
            get {
                return ((string)(curObj["ConnectResponse"]));
            }
            set {
                curObj["ConnectResponse"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDomain {
            get {
                return ((string)(curObj["DefaultDomain"]));
            }
            set {
                curObj["DefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableSocketPoolingNull {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableSocketPooling {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableSocketPooling"]));
            }
            set {
                curObj["DisableSocketPooling"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoMasqueradeNull {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoMasquerade {
            get {
                if ((curObj["DoMasquerade"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoMasquerade"]));
            }
            set {
                curObj["DoMasquerade"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DropDirectory {
            get {
                return ((string)(curObj["DropDirectory"]));
            }
            set {
                curObj["DropDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsLookupNull {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDnsLookup {
            get {
                if ((curObj["EnableReverseDnsLookup"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDnsLookup"]));
            }
            set {
                curObj["EnableReverseDnsLookup"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnDaysNull {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int EtrnDays {
            get {
                if ((curObj["EtrnDays"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["EtrnDays"]));
            }
            set {
                curObj["EtrnDays"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEtrnSubdomainsNull {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EtrnSubdomains {
            get {
                if ((curObj["EtrnSubdomains"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EtrnSubdomains"]));
            }
            set {
                curObj["EtrnSubdomains"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string FullyQualifiedDomainName {
            get {
                return ((string)(curObj["FullyQualifiedDomainName"]));
            }
            set {
                curObj["FullyQualifiedDomainName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHopCountNull {
            get {
                if ((curObj["HopCount"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HopCount {
            get {
                if ((curObj["HopCount"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HopCount"]));
            }
            set {
                curObj["HopCount"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLimitRemoteConnectionsNull {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LimitRemoteConnections {
            get {
                if ((curObj["LimitRemoteConnections"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LimitRemoteConnections"]));
            }
            set {
                curObj["LimitRemoteConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryAttemptsNull {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryAttempts {
            get {
                if ((curObj["LocalRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryAttempts"]));
            }
            set {
                curObj["LocalRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLocalRetryIntervalNull {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LocalRetryInterval {
            get {
                if ((curObj["LocalRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LocalRetryInterval"]));
            }
            set {
                curObj["LocalRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesRecvNull {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesRecv {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesRecv"]));
            }
            set {
                curObj["LogExtFileBytesRecv"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesSentNull {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesSent {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesSent"]));
            }
            set {
                curObj["LogExtFileBytesSent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileClientIpNull {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileClientIp {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileClientIp"]));
            }
            set {
                curObj["LogExtFileClientIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileComputerNameNull {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileComputerName {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileComputerName"]));
            }
            set {
                curObj["LogExtFileComputerName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileCookieNull {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileCookie {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileCookie"]));
            }
            set {
                curObj["LogExtFileCookie"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileDateNull {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileDate {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileDate"]));
            }
            set {
                curObj["LogExtFileDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileFlagsNull {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogExtFileFlags {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogExtFileFlags"]));
            }
            set {
                curObj["LogExtFileFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHostNull {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHost {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHost"]));
            }
            set {
                curObj["LogExtFileHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpStatusNull {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpStatus {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpStatus"]));
            }
            set {
                curObj["LogExtFileHttpStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpSubStatusNull {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpSubStatus {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpSubStatus"]));
            }
            set {
                curObj["LogExtFileHttpSubStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileMethodNull {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileMethod {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileMethod"]));
            }
            set {
                curObj["LogExtFileMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileProtocolVersionNull {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileProtocolVersion {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileProtocolVersion"]));
            }
            set {
                curObj["LogExtFileProtocolVersion"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileRefererNull {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileReferer {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileReferer"]));
            }
            set {
                curObj["LogExtFileReferer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerIpNull {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerIp {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerIp"]));
            }
            set {
                curObj["LogExtFileServerIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerPortNull {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerPort {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerPort"]));
            }
            set {
                curObj["LogExtFileServerPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileSiteNameNull {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileSiteName {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileSiteName"]));
            }
            set {
                curObj["LogExtFileSiteName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeNull {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTime {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTime"]));
            }
            set {
                curObj["LogExtFileTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeTakenNull {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTimeTaken {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTimeTaken"]));
            }
            set {
                curObj["LogExtFileTimeTaken"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriQueryNull {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriQuery {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriQuery"]));
            }
            set {
                curObj["LogExtFileUriQuery"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriStemNull {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriStem {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriStem"]));
            }
            set {
                curObj["LogExtFileUriStem"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserAgentNull {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserAgent {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserAgent"]));
            }
            set {
                curObj["LogExtFileUserAgent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserNameNull {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserName {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserName"]));
            }
            set {
                curObj["LogExtFileUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileWin32StatusNull {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileWin32Status {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileWin32Status"]));
            }
            set {
                curObj["LogExtFileWin32Status"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogFileDirectory {
            get {
                return ((string)(curObj["LogFileDirectory"]));
            }
            set {
                curObj["LogFileDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFilePeriodNull {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFilePeriod {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFilePeriod"]));
            }
            set {
                curObj["LogFilePeriod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileTruncateSizeNull {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFileTruncateSize {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFileTruncateSize"]));
            }
            set {
                curObj["LogFileTruncateSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogModuleList {
            get {
                return ((string)(curObj["LogModuleList"]));
            }
            set {
                curObj["LogModuleList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcDataSource {
            get {
                return ((string)(curObj["LogOdbcDataSource"]));
            }
            set {
                curObj["LogOdbcDataSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcPassword {
            get {
                return ((string)(curObj["LogOdbcPassword"]));
            }
            set {
                curObj["LogOdbcPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcTableName {
            get {
                return ((string)(curObj["LogOdbcTableName"]));
            }
            set {
                curObj["LogOdbcTableName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcUserName {
            get {
                return ((string)(curObj["LogOdbcUserName"]));
            }
            set {
                curObj["LogOdbcUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogPluginClsid {
            get {
                return ((string)(curObj["LogPluginClsid"]));
            }
            set {
                curObj["LogPluginClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogTypeNull {
            get {
                if ((curObj["LogType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogType {
            get {
                if ((curObj["LogType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogType"]));
            }
            set {
                curObj["LogType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string MasqueradeDomain {
            get {
                return ((string)(curObj["MasqueradeDomain"]));
            }
            set {
                curObj["MasqueradeDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBandwidthNull {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBandwidth {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBandwidth"]));
            }
            set {
                curObj["MaxBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBatchedMessagesNull {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBatchedMessages {
            get {
                if ((curObj["MaxBatchedMessages"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBatchedMessages"]));
            }
            set {
                curObj["MaxBatchedMessages"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxConnectionsNull {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxConnections {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxConnections"]));
            }
            set {
                curObj["MaxConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxDirChangeIOSizeNull {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxDirChangeIOSize {
            get {
                if ((curObj["MaxDirChangeIOSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxDirChangeIOSize"]));
            }
            set {
                curObj["MaxDirChangeIOSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxEndpointConnectionsNull {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxEndpointConnections {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxEndpointConnections"]));
            }
            set {
                curObj["MaxEndpointConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMailObjectsNull {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMailObjects {
            get {
                if ((curObj["MaxMailObjects"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMailObjects"]));
            }
            set {
                curObj["MaxMailObjects"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxMessageSizeNull {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxMessageSize {
            get {
                if ((curObj["MaxMessageSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxMessageSize"]));
            }
            set {
                curObj["MaxMessageSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsNull {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnections {
            get {
                if ((curObj["MaxOutConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnections"]));
            }
            set {
                curObj["MaxOutConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxOutConnectionsPerDomainNull {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxOutConnectionsPerDomain {
            get {
                if ((curObj["MaxOutConnectionsPerDomain"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxOutConnectionsPerDomain"]));
            }
            set {
                curObj["MaxOutConnectionsPerDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRecipientsNull {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRecipients {
            get {
                if ((curObj["MaxRecipients"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRecipients"]));
            }
            set {
                curObj["MaxRecipients"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSessionSizeNull {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSessionSize {
            get {
                if ((curObj["MaxSessionSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSessionSize"]));
            }
            set {
                curObj["MaxSessionSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxSmtpErrorsNull {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxSmtpErrors {
            get {
                if ((curObj["MaxSmtpErrors"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxSmtpErrors"]));
            }
            set {
                curObj["MaxSmtpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsNameResolutionTypeNull {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int NameResolutionType {
            get {
                if ((curObj["NameResolutionType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["NameResolutionType"]));
            }
            set {
                curObj["NameResolutionType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string PickupDirectory {
            get {
                return ((string)(curObj["PickupDirectory"]));
            }
            set {
                curObj["PickupDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string QueueDirectory {
            get {
                return ((string)(curObj["QueueDirectory"]));
            }
            set {
                curObj["QueueDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRelayForAuthNull {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RelayForAuth {
            get {
                if ((curObj["RelayForAuth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RelayForAuth"]));
            }
            set {
                curObj["RelayForAuth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] RelayIpList {
            get {
                return ((System.Byte[])(curObj["RelayIpList"]));
            }
            set {
                curObj["RelayIpList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryAttemptsNull {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryAttempts {
            get {
                if ((curObj["RemoteRetryAttempts"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryAttempts"]));
            }
            set {
                curObj["RemoteRetryAttempts"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteRetryIntervalNull {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteRetryInterval {
            get {
                if ((curObj["RemoteRetryInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteRetryInterval"]));
            }
            set {
                curObj["RemoteRetryInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpPortNull {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpPort {
            get {
                if ((curObj["RemoteSmtpPort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpPort"]));
            }
            set {
                curObj["RemoteSmtpPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteSmtpSecurePortNull {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteSmtpSecurePort {
            get {
                if ((curObj["RemoteSmtpSecurePort"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteSmtpSecurePort"]));
            }
            set {
                curObj["RemoteSmtpSecurePort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRemoteTimeoutNull {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RemoteTimeout {
            get {
                if ((curObj["RemoteTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RemoteTimeout"]));
            }
            set {
                curObj["RemoteTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRouteActionNull {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RouteAction {
            get {
                if ((curObj["RouteAction"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RouteAction"]));
            }
            set {
                curObj["RouteAction"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutePassword {
            get {
                return ((string)(curObj["RoutePassword"]));
            }
            set {
                curObj["RoutePassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RouteUserName {
            get {
                return ((string)(curObj["RouteUserName"]));
            }
            set {
                curObj["RouteUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string RoutingDll {
            get {
                return ((string)(curObj["RoutingDll"]));
            }
            set {
                curObj["RoutingDll"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SaslLogonDomain {
            get {
                return ((string)(curObj["SaslLogonDomain"]));
            }
            set {
                curObj["SaslLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendBadTo {
            get {
                return ((string)(curObj["SendBadTo"]));
            }
            set {
                curObj["SendBadTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SendNdrTo {
            get {
                return ((string)(curObj["SendNdrTo"]));
            }
            set {
                curObj["SendNdrTo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerAutoStartNull {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ServerAutoStart {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ServerAutoStart"]));
            }
            set {
                curObj["ServerAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServerComment {
            get {
                return ((string)(curObj["ServerComment"]));
            }
            set {
                curObj["ServerComment"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenTimeoutNull {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenTimeout {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenTimeout"]));
            }
            set {
                curObj["ServerListenTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldDeliverNull {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldDeliver {
            get {
                if ((curObj["ShouldDeliver"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldDeliver"]));
            }
            set {
                curObj["ShouldDeliver"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPickupMailNull {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPickupMail {
            get {
                if ((curObj["ShouldPickupMail"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPickupMail"]));
            }
            set {
                curObj["ShouldPickupMail"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineInNull {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineIn {
            get {
                if ((curObj["ShouldPipelineIn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineIn"]));
            }
            set {
                curObj["ShouldPipelineIn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShouldPipelineOutNull {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ShouldPipelineOut {
            get {
                if ((curObj["ShouldPipelineOut"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ShouldPipelineOut"]));
            }
            set {
                curObj["ShouldPipelineOut"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmartHost {
            get {
                return ((string)(curObj["SmartHost"]));
            }
            set {
                curObj["SmartHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmartHostTypeNull {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmartHostType {
            get {
                if ((curObj["SmartHostType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmartHostType"]));
            }
            set {
                curObj["SmartHostType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpAdvQueueDll {
            get {
                return ((string)(curObj["SmtpAdvQueueDll"]));
            }
            set {
                curObj["SmtpAdvQueueDll"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAqueueWaitNull {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAqueueWait {
            get {
                if ((curObj["SmtpAqueueWait"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAqueueWait"]));
            }
            set {
                curObj["SmtpAqueueWait"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpAuthTimeoutNull {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpAuthTimeout {
            get {
                if ((curObj["SmtpAuthTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpAuthTimeout"]));
            }
            set {
                curObj["SmtpAuthTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpBdatTimeoutNull {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpBdatTimeout {
            get {
                if ((curObj["SmtpBdatTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpBdatTimeout"]));
            }
            set {
                curObj["SmtpBdatTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpClearTextProvider {
            get {
                return ((string)(curObj["SmtpClearTextProvider"]));
            }
            set {
                curObj["SmtpClearTextProvider"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpCommandLogMaskNull {
            get {
                if ((curObj["SmtpCommandLogMask"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpCommandLogMask {
            get {
                if ((curObj["SmtpCommandLogMask"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpCommandLogMask"]));
            }
            set {
                curObj["SmtpCommandLogMask"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpConnectTimeoutNull {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpConnectTimeout {
            get {
                if ((curObj["SmtpConnectTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpConnectTimeout"]));
            }
            set {
                curObj["SmtpConnectTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDataTimeoutNull {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDataTimeout {
            get {
                if ((curObj["SmtpDataTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDataTimeout"]));
            }
            set {
                curObj["SmtpDataTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDisableRelayNull {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDisableRelay {
            get {
                if ((curObj["SmtpDisableRelay"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDisableRelay"]));
            }
            set {
                curObj["SmtpDisableRelay"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDomainValidationFlagsNull {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDomainValidationFlags {
            get {
                if ((curObj["SmtpDomainValidationFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDomainValidationFlags"]));
            }
            set {
                curObj["SmtpDomainValidationFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDotStuffPickupDirFilesNull {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpDotStuffPickupDirFiles {
            get {
                if ((curObj["SmtpDotStuffPickupDirFiles"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpDotStuffPickupDirFiles"]));
            }
            set {
                curObj["SmtpDotStuffPickupDirFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNLanguageIDNull {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNLanguageID {
            get {
                if ((curObj["SmtpDSNLanguageID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNLanguageID"]));
            }
            set {
                curObj["SmtpDSNLanguageID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpDSNOptionsNull {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpDSNOptions {
            get {
                if ((curObj["SmtpDSNOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpDSNOptions"]));
            }
            set {
                curObj["SmtpDSNOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpEventlogLevelNull {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpEventlogLevel {
            get {
                if ((curObj["SmtpEventlogLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpEventlogLevel"]));
            }
            set {
                curObj["SmtpEventlogLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpFlushMailFileNull {
            get {
                if ((curObj["SmtpFlushMailFile"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpFlushMailFile {
            get {
                if ((curObj["SmtpFlushMailFile"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpFlushMailFile"]));
            }
            set {
                curObj["SmtpFlushMailFile"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloNoDomainNull {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpHeloNoDomain {
            get {
                if ((curObj["SmtpHeloNoDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpHeloNoDomain"]));
            }
            set {
                curObj["SmtpHeloNoDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpHeloTimeoutNull {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpHeloTimeout {
            get {
                if ((curObj["SmtpHeloTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpHeloTimeout"]));
            }
            set {
                curObj["SmtpHeloTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpInboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpInboundCommandSupportOptions {
            get {
                if ((curObj["SmtpInboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpInboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpInboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpIpRestrictionFlagNull {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpIpRestrictionFlag {
            get {
                if ((curObj["SmtpIpRestrictionFlag"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpIpRestrictionFlag"]));
            }
            set {
                curObj["SmtpIpRestrictionFlag"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalDelayExpireMinutes {
            get {
                if ((curObj["SmtpLocalDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpLocalNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpLocalNDRExpireMinutes {
            get {
                if ((curObj["SmtpLocalNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpLocalNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpLocalNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailFromTimeoutNull {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMailFromTimeout {
            get {
                if ((curObj["SmtpMailFromTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMailFromTimeout"]));
            }
            set {
                curObj["SmtpMailFromTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMailNoHeloNull {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpMailNoHelo {
            get {
                if ((curObj["SmtpMailNoHelo"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpMailNoHelo"]));
            }
            set {
                curObj["SmtpMailNoHelo"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpMaxRemoteQThreadsNull {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpMaxRemoteQThreads {
            get {
                if ((curObj["SmtpMaxRemoteQThreads"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpMaxRemoteQThreads"]));
            }
            set {
                curObj["SmtpMaxRemoteQThreads"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpOutboundCommandSupportOptionsNull {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpOutboundCommandSupportOptions {
            get {
                if ((curObj["SmtpOutboundCommandSupportOptions"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpOutboundCommandSupportOptions"]));
            }
            set {
                curObj["SmtpOutboundCommandSupportOptions"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRcptToTimeoutNull {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRcptToTimeout {
            get {
                if ((curObj["SmtpRcptToTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRcptToTimeout"]));
            }
            set {
                curObj["SmtpRcptToTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteDelayExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteDelayExpireMinutes {
            get {
                if ((curObj["SmtpRemoteDelayExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteDelayExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteDelayExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteNDRExpireMinutesNull {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteNDRExpireMinutes {
            get {
                if ((curObj["SmtpRemoteNDRExpireMinutes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteNDRExpireMinutes"]));
            }
            set {
                curObj["SmtpRemoteNDRExpireMinutes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SmtpRemoteProgressiveRetry {
            get {
                return ((string)(curObj["SmtpRemoteProgressiveRetry"]));
            }
            set {
                curObj["SmtpRemoteProgressiveRetry"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRemoteRetryThresholdNull {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRemoteRetryThreshold {
            get {
                if ((curObj["SmtpRemoteRetryThreshold"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRemoteRetryThreshold"]));
            }
            set {
                curObj["SmtpRemoteRetryThreshold"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpRsetTimeoutNull {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpRsetTimeout {
            get {
                if ((curObj["SmtpRsetTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpRsetTimeout"]));
            }
            set {
                curObj["SmtpRsetTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSaslTimeoutNull {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpSaslTimeout {
            get {
                if ((curObj["SmtpSaslTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpSaslTimeout"]));
            }
            set {
                curObj["SmtpSaslTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLCertHostnameValidationNull {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLCertHostnameValidation {
            get {
                if ((curObj["SmtpSSLCertHostnameValidation"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLCertHostnameValidation"]));
            }
            set {
                curObj["SmtpSSLCertHostnameValidation"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpSSLRequireTrustedCANull {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SmtpSSLRequireTrustedCA {
            get {
                if ((curObj["SmtpSSLRequireTrustedCA"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SmtpSSLRequireTrustedCA"]));
            }
            set {
                curObj["SmtpSSLRequireTrustedCA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpTurnTimeoutNull {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpTurnTimeout {
            get {
                if ((curObj["SmtpTurnTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpTurnTimeout"]));
            }
            set {
                curObj["SmtpTurnTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSmtpUseTcpDnsNull {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int SmtpUseTcpDns {
            get {
                if ((curObj["SmtpUseTcpDns"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["SmtpUseTcpDns"]));
            }
            set {
                curObj["SmtpUseTcpDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedDefaultDomainNull {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedDefaultDomain {
            get {
                if ((curObj["UpdatedDefaultDomain"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedDefaultDomain"]));
            }
            set {
                curObj["UpdatedDefaultDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUpdatedFQDNNull {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UpdatedFQDN {
            get {
                if ((curObj["UpdatedFQDN"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UpdatedFQDN"]));
            }
            set {
                curObj["UpdatedFQDN"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAddNoHeaders() {
            if ((IsAddNoHeadersNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAddNoHeaders() {
            curObj["AddNoHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAllowAnonymous() {
            if ((IsAllowAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAllowAnonymous() {
            curObj["AllowAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAlwaysUseSsl() {
            if ((IsAlwaysUseSslNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAlwaysUseSsl() {
            curObj["AlwaysUseSsl"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousOnly() {
            if ((IsAnonymousOnlyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousOnly() {
            curObj["AnonymousOnly"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetBadMailDirectory() {
            curObj["BadMailDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeConnectionTimeout() {
            if ((IsConnectionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetConnectionTimeout() {
            curObj["ConnectionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetConnectResponse() {
            curObj["ConnectResponse"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDomain() {
            curObj["DefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableSocketPooling() {
            if ((IsDisableSocketPoolingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableSocketPooling() {
            curObj["DisableSocketPooling"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoMasquerade() {
            if ((IsDoMasqueradeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoMasquerade() {
            curObj["DoMasquerade"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDropDirectory() {
            curObj["DropDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDnsLookup() {
            if ((IsEnableReverseDnsLookupNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDnsLookup() {
            curObj["EnableReverseDnsLookup"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnDays() {
            if ((IsEtrnDaysNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnDays() {
            curObj["EtrnDays"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEtrnSubdomains() {
            if ((IsEtrnSubdomainsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEtrnSubdomains() {
            curObj["EtrnSubdomains"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetFullyQualifiedDomainName() {
            curObj["FullyQualifiedDomainName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHopCount() {
            if ((IsHopCountNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHopCount() {
            curObj["HopCount"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLimitRemoteConnections() {
            if ((IsLimitRemoteConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLimitRemoteConnections() {
            curObj["LimitRemoteConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryAttempts() {
            if ((IsLocalRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryAttempts() {
            curObj["LocalRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLocalRetryInterval() {
            if ((IsLocalRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLocalRetryInterval() {
            curObj["LocalRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesRecv() {
            if ((IsLogExtFileBytesRecvNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesRecv() {
            curObj["LogExtFileBytesRecv"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesSent() {
            if ((IsLogExtFileBytesSentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesSent() {
            curObj["LogExtFileBytesSent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileClientIp() {
            if ((IsLogExtFileClientIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileClientIp() {
            curObj["LogExtFileClientIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileComputerName() {
            if ((IsLogExtFileComputerNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileComputerName() {
            curObj["LogExtFileComputerName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileCookie() {
            if ((IsLogExtFileCookieNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileCookie() {
            curObj["LogExtFileCookie"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileDate() {
            if ((IsLogExtFileDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileDate() {
            curObj["LogExtFileDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileFlags() {
            if ((IsLogExtFileFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileFlags() {
            curObj["LogExtFileFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHost() {
            if ((IsLogExtFileHostNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHost() {
            curObj["LogExtFileHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpStatus() {
            if ((IsLogExtFileHttpStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpStatus() {
            curObj["LogExtFileHttpStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpSubStatus() {
            if ((IsLogExtFileHttpSubStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpSubStatus() {
            curObj["LogExtFileHttpSubStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileMethod() {
            if ((IsLogExtFileMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileMethod() {
            curObj["LogExtFileMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileProtocolVersion() {
            if ((IsLogExtFileProtocolVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileProtocolVersion() {
            curObj["LogExtFileProtocolVersion"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileReferer() {
            if ((IsLogExtFileRefererNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileReferer() {
            curObj["LogExtFileReferer"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerIp() {
            if ((IsLogExtFileServerIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerIp() {
            curObj["LogExtFileServerIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerPort() {
            if ((IsLogExtFileServerPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerPort() {
            curObj["LogExtFileServerPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileSiteName() {
            if ((IsLogExtFileSiteNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileSiteName() {
            curObj["LogExtFileSiteName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTime() {
            if ((IsLogExtFileTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTime() {
            curObj["LogExtFileTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTimeTaken() {
            if ((IsLogExtFileTimeTakenNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTimeTaken() {
            curObj["LogExtFileTimeTaken"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriQuery() {
            if ((IsLogExtFileUriQueryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriQuery() {
            curObj["LogExtFileUriQuery"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriStem() {
            if ((IsLogExtFileUriStemNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriStem() {
            curObj["LogExtFileUriStem"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserAgent() {
            if ((IsLogExtFileUserAgentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserAgent() {
            curObj["LogExtFileUserAgent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserName() {
            if ((IsLogExtFileUserNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserName() {
            curObj["LogExtFileUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileWin32Status() {
            if ((IsLogExtFileWin32StatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileWin32Status() {
            curObj["LogExtFileWin32Status"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogFileDirectory() {
            curObj["LogFileDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFilePeriod() {
            if ((IsLogFilePeriodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFilePeriod() {
            curObj["LogFilePeriod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFileTruncateSize() {
            if ((IsLogFileTruncateSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFileTruncateSize() {
            curObj["LogFileTruncateSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogModuleList() {
            curObj["LogModuleList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcDataSource() {
            curObj["LogOdbcDataSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcPassword() {
            curObj["LogOdbcPassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcTableName() {
            curObj["LogOdbcTableName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcUserName() {
            curObj["LogOdbcUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogPluginClsid() {
            curObj["LogPluginClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogType() {
            if ((IsLogTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogType() {
            curObj["LogType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMasqueradeDomain() {
            curObj["MasqueradeDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBandwidth() {
            if ((IsMaxBandwidthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBandwidth() {
            curObj["MaxBandwidth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBatchedMessages() {
            if ((IsMaxBatchedMessagesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBatchedMessages() {
            curObj["MaxBatchedMessages"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxConnections() {
            if ((IsMaxConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxConnections() {
            curObj["MaxConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxDirChangeIOSize() {
            if ((IsMaxDirChangeIOSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxDirChangeIOSize() {
            curObj["MaxDirChangeIOSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxEndpointConnections() {
            if ((IsMaxEndpointConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxEndpointConnections() {
            curObj["MaxEndpointConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMailObjects() {
            if ((IsMaxMailObjectsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMailObjects() {
            curObj["MaxMailObjects"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxMessageSize() {
            if ((IsMaxMessageSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxMessageSize() {
            curObj["MaxMessageSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnections() {
            if ((IsMaxOutConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnections() {
            curObj["MaxOutConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxOutConnectionsPerDomain() {
            if ((IsMaxOutConnectionsPerDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxOutConnectionsPerDomain() {
            curObj["MaxOutConnectionsPerDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRecipients() {
            if ((IsMaxRecipientsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRecipients() {
            curObj["MaxRecipients"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSessionSize() {
            if ((IsMaxSessionSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSessionSize() {
            curObj["MaxSessionSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxSmtpErrors() {
            if ((IsMaxSmtpErrorsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxSmtpErrors() {
            curObj["MaxSmtpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeNameResolutionType() {
            if ((IsNameResolutionTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetNameResolutionType() {
            curObj["NameResolutionType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetPickupDirectory() {
            curObj["PickupDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetQueueDirectory() {
            curObj["QueueDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRelayForAuth() {
            if ((IsRelayForAuthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRelayForAuth() {
            curObj["RelayForAuth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRelayIpList() {
            curObj["RelayIpList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryAttempts() {
            if ((IsRemoteRetryAttemptsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryAttempts() {
            curObj["RemoteRetryAttempts"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteRetryInterval() {
            if ((IsRemoteRetryIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteRetryInterval() {
            curObj["RemoteRetryInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpPort() {
            if ((IsRemoteSmtpPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpPort() {
            curObj["RemoteSmtpPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteSmtpSecurePort() {
            if ((IsRemoteSmtpSecurePortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteSmtpSecurePort() {
            curObj["RemoteSmtpSecurePort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRemoteTimeout() {
            if ((IsRemoteTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRemoteTimeout() {
            curObj["RemoteTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRouteAction() {
            if ((IsRouteActionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRouteAction() {
            curObj["RouteAction"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutePassword() {
            curObj["RoutePassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRouteUserName() {
            curObj["RouteUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRoutingDll() {
            curObj["RoutingDll"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSaslLogonDomain() {
            curObj["SaslLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendBadTo() {
            curObj["SendBadTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSendNdrTo() {
            curObj["SendNdrTo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerAutoStart() {
            if ((IsServerAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerAutoStart() {
            curObj["ServerAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerComment() {
            curObj["ServerComment"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenTimeout() {
            if ((IsServerListenTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenTimeout() {
            curObj["ServerListenTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldDeliver() {
            if ((IsShouldDeliverNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldDeliver() {
            curObj["ShouldDeliver"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPickupMail() {
            if ((IsShouldPickupMailNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPickupMail() {
            curObj["ShouldPickupMail"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineIn() {
            if ((IsShouldPipelineInNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineIn() {
            curObj["ShouldPipelineIn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShouldPipelineOut() {
            if ((IsShouldPipelineOutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShouldPipelineOut() {
            curObj["ShouldPipelineOut"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmartHost() {
            curObj["SmartHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmartHostType() {
            if ((IsSmartHostTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmartHostType() {
            curObj["SmartHostType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpAdvQueueDll() {
            curObj["SmtpAdvQueueDll"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAqueueWait() {
            if ((IsSmtpAqueueWaitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAqueueWait() {
            curObj["SmtpAqueueWait"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpAuthTimeout() {
            if ((IsSmtpAuthTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpAuthTimeout() {
            curObj["SmtpAuthTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpBdatTimeout() {
            if ((IsSmtpBdatTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpBdatTimeout() {
            curObj["SmtpBdatTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpClearTextProvider() {
            curObj["SmtpClearTextProvider"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpCommandLogMask() {
            if ((IsSmtpCommandLogMaskNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpCommandLogMask() {
            curObj["SmtpCommandLogMask"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpConnectTimeout() {
            if ((IsSmtpConnectTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpConnectTimeout() {
            curObj["SmtpConnectTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDataTimeout() {
            if ((IsSmtpDataTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDataTimeout() {
            curObj["SmtpDataTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDisableRelay() {
            if ((IsSmtpDisableRelayNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDisableRelay() {
            curObj["SmtpDisableRelay"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDomainValidationFlags() {
            if ((IsSmtpDomainValidationFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDomainValidationFlags() {
            curObj["SmtpDomainValidationFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDotStuffPickupDirFiles() {
            if ((IsSmtpDotStuffPickupDirFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDotStuffPickupDirFiles() {
            curObj["SmtpDotStuffPickupDirFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNLanguageID() {
            if ((IsSmtpDSNLanguageIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNLanguageID() {
            curObj["SmtpDSNLanguageID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpDSNOptions() {
            if ((IsSmtpDSNOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpDSNOptions() {
            curObj["SmtpDSNOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpEventlogLevel() {
            if ((IsSmtpEventlogLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpEventlogLevel() {
            curObj["SmtpEventlogLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpFlushMailFile() {
            if ((IsSmtpFlushMailFileNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpFlushMailFile() {
            curObj["SmtpFlushMailFile"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloNoDomain() {
            if ((IsSmtpHeloNoDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloNoDomain() {
            curObj["SmtpHeloNoDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpHeloTimeout() {
            if ((IsSmtpHeloTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpHeloTimeout() {
            curObj["SmtpHeloTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpInboundCommandSupportOptions() {
            if ((IsSmtpInboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpInboundCommandSupportOptions() {
            curObj["SmtpInboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpIpRestrictionFlag() {
            if ((IsSmtpIpRestrictionFlagNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpIpRestrictionFlag() {
            curObj["SmtpIpRestrictionFlag"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalDelayExpireMinutes() {
            if ((IsSmtpLocalDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalDelayExpireMinutes() {
            curObj["SmtpLocalDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpLocalNDRExpireMinutes() {
            if ((IsSmtpLocalNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpLocalNDRExpireMinutes() {
            curObj["SmtpLocalNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailFromTimeout() {
            if ((IsSmtpMailFromTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailFromTimeout() {
            curObj["SmtpMailFromTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMailNoHelo() {
            if ((IsSmtpMailNoHeloNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMailNoHelo() {
            curObj["SmtpMailNoHelo"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpMaxRemoteQThreads() {
            if ((IsSmtpMaxRemoteQThreadsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpMaxRemoteQThreads() {
            curObj["SmtpMaxRemoteQThreads"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpOutboundCommandSupportOptions() {
            if ((IsSmtpOutboundCommandSupportOptionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpOutboundCommandSupportOptions() {
            curObj["SmtpOutboundCommandSupportOptions"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRcptToTimeout() {
            if ((IsSmtpRcptToTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRcptToTimeout() {
            curObj["SmtpRcptToTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteDelayExpireMinutes() {
            if ((IsSmtpRemoteDelayExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteDelayExpireMinutes() {
            curObj["SmtpRemoteDelayExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteNDRExpireMinutes() {
            if ((IsSmtpRemoteNDRExpireMinutesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteNDRExpireMinutes() {
            curObj["SmtpRemoteNDRExpireMinutes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSmtpRemoteProgressiveRetry() {
            curObj["SmtpRemoteProgressiveRetry"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRemoteRetryThreshold() {
            if ((IsSmtpRemoteRetryThresholdNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRemoteRetryThreshold() {
            curObj["SmtpRemoteRetryThreshold"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpRsetTimeout() {
            if ((IsSmtpRsetTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpRsetTimeout() {
            curObj["SmtpRsetTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSaslTimeout() {
            if ((IsSmtpSaslTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSaslTimeout() {
            curObj["SmtpSaslTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLCertHostnameValidation() {
            if ((IsSmtpSSLCertHostnameValidationNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLCertHostnameValidation() {
            curObj["SmtpSSLCertHostnameValidation"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpSSLRequireTrustedCA() {
            if ((IsSmtpSSLRequireTrustedCANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpSSLRequireTrustedCA() {
            curObj["SmtpSSLRequireTrustedCA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpTurnTimeout() {
            if ((IsSmtpTurnTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpTurnTimeout() {
            curObj["SmtpTurnTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSmtpUseTcpDns() {
            if ((IsSmtpUseTcpDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSmtpUseTcpDns() {
            curObj["SmtpUseTcpDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedDefaultDomain() {
            if ((IsUpdatedDefaultDomainNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedDefaultDomain() {
            curObj["UpdatedDefaultDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUpdatedFQDN() {
            if ((IsUpdatedFQDNNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUpdatedFQDN() {
            curObj["UpdatedFQDN"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsSmtpServiceSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsSmtpServiceSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsSmtpServiceSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsSmtpServiceSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsSmtpServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsSmtpServiceSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsSmtpServiceSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsSmtpServiceSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsSmtpServiceSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsSmtpServiceSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsSmtpServiceSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsSmtpServiceSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsSmtpServiceSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsSmtpServiceSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsSmtpServiceSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsSmtpServiceSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Deployment.cs ===
/*******************************************************************
 *    FILE:         Deployment.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      1/15/2003   - Created 
 *
 *    Copyright <cp> 2003 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using System.IO;
using System.Xml;
using System.Text;
using System.Collections.Generic;

using Microsoft.Webstore.MetaData;
using Microsoft.Webstore.WstClient;

namespace xonline.tools.wstrunner.core
{
    public class DeploymentFileFactory : IDeploymentFileFactory
    {
        private static readonly Log log = Log.GetInstance();
        private static IManifestFactory manifestFactory = new WmoManifestFactory();
        private static IOracleFactory oracleFactory = new WebstoreOracleFactory();

        public static IManifestFactory ManifestFactory
        {
            set { manifestFactory = value; }
        }

        public static IOracleFactory OracleFactory
        {
            set { oracleFactory = value; }
        }

        public FileInfo CreateDeployment(
            FileInfo manifestXml,
            string deploymentXmlFileName,
            string dataFilePath,
            string logFilePath,
            string configServers,
            string dataServers,
            uint failSafeSetsPerServer,
            string accountRoleMap,
            uint partitionCount,
            string databaseName
            )
        {
            Manifest manifest = new Manifest(
                manifestFactory.CreateInstance(),
                oracleFactory.CreateInstance(),
                manifestXml.FullName);

            List<string> configServerList = new List<string>(configServers.Split(';'));
            log.WriteLine("Configuration Servers:");
            foreach (string s in configServerList)
            {
                log.WriteLine("\t" + s);
            }

            List<string> dataServerList = new List<string>(dataServers.Split(';'));
            log.WriteLine("Data Servers:");
            foreach (string s in dataServerList)
            {
                log.WriteLine("\t" + s);
            }

            log.WriteLine("Account-Role Mappings:");
            string[] accountsSplit = accountRoleMap.Split(';');
            List<ApplicationAccount> accountList = new List<ApplicationAccount>();
            for (int currentAccount = 0; currentAccount < accountsSplit.Length; ++currentAccount)
            {
                string[] accountParts = accountsSplit[currentAccount].Split('=');
                log.WriteLine("\t{0}={1}", accountParts[0], accountParts[1]);
                accountList.Add(new ApplicationAccount(accountParts[0], accountParts[1], manifest.Name));
            }

            log.WriteLine("Generating new deployment file...");

            XmlDocument deploymentDoc = GetDeployment(
                manifest.Name,
                manifest.Version,
                dataFilePath,
                logFilePath,
                configServerList,
                dataServerList,
                failSafeSetsPerServer,
                accountList,
                partitionCount,
                databaseName
                );

            deploymentDoc.Save(deploymentXmlFileName);

            log.WriteLine("Done.");

            return new FileInfo(deploymentXmlFileName);
        }

        public static XmlDocument GetDeployment(
            string manifestName,
            string manifestVersion,
            string dataFilePath,
            string logFilePath,
            List<string> configServers,
            List<string> appServers,
            uint failSafeSetsPerServer,
            List<ApplicationAccount> accounts,
            uint partitionCount,
            string databaseName)
        {
            XmlDocument deploymentDoc = new XmlDocument();

            //  If this is an upgrade, and no deployment file is provided, we want to
            //  make sure to use the previously imported deployment file.
            try
            {
                FileInfo existingDeploymentFile = WebstoreOracle.GetInstance().ExportDeployment(manifestName);
                if (existingDeploymentFile != null && existingDeploymentFile.Exists)
                {
                    deploymentDoc.Load(existingDeploymentFile.FullName);
                    return deploymentDoc;
                }
            }
            catch (Exception e)
            {
                //  We'll log this exception, but it's likely just 'deployment not found'.
                log.WriteLine(e.ToString());
            }

            XmlNode workingNode;
            XmlNode scopeNode;
            XmlNamespaceManager manager;

            try
            {
                deploymentDoc.LoadXml(Properties.Resources.deployment_template);
                manager = new XmlNamespaceManager(deploymentDoc.NameTable);
                manager.AddNamespace("ws", "urn:WebstoreDeploymentSchema.xsd");

                // Distribution Database Template

                scopeNode =
                    deploymentDoc.SelectSingleNode(
                        "//ws:DatabaseTemplates/ws:DatabaseTemplate[@Name=\"#DISTRIBUTION_TEMPLATE_NAME#\"]", manager);
                ((XmlElement)scopeNode).SetAttribute("Name", databaseName + "DistributionDatabaseTemplate");

                workingNode =
                    scopeNode.SelectSingleNode(
                        "ws:DataFileGroups/ws:FileGroup[@Name=\"Primary\"]/ws:LogicalFiles/ws:LogicalFile[@Name=\"modeldist\"]/ws:Path/text()",
                        manager);
                workingNode.Value = Path.Combine(dataFilePath, databaseName + "Data");

                workingNode =
                    scopeNode.SelectSingleNode("ws:LogFile/ws:LogicalFile[@Name=\"modeldist_log\"]/ws:Path/text()", manager);
                workingNode.Value = Path.Combine(logFilePath, databaseName + "Data");

                // Database Template

                scopeNode = deploymentDoc.SelectSingleNode("//ws:DatabaseTemplates/ws:DatabaseTemplate[@Name=\"#DATABASE_TEMPLATE_NAME#\"]", manager);
                ((XmlElement)scopeNode).SetAttribute("Name", databaseName + "DatabaseTemplate");

                workingNode = scopeNode.SelectSingleNode("ws:DataFileGroups/ws:FileGroup[@Name=\"Primary\"]/ws:LogicalFiles/ws:LogicalFile[@Name=\"DataFile\"]/ws:Path/text()", manager);
                workingNode.Value = Path.Combine(dataFilePath, databaseName + "Data");

                workingNode = scopeNode.SelectSingleNode("ws:LogFile/ws:LogicalFile[@Name=\"LogFile\"]/ws:Path/text()", manager);
                workingNode.Value = Path.Combine(logFilePath, databaseName + "Data");

                workingNode = scopeNode.SelectSingleNode("ws:Stripes/ws:Stripe/ws:Directory/text()", manager);
                workingNode.Value = Path.Combine(dataFilePath, "BAK");

                // ensure the share path is put as the same location.
                workingNode = scopeNode.SelectSingleNode("ws:Stripes/ws:Stripe/ws:Share/text()", manager);
                workingNode.Value = Path.Combine(dataFilePath.Replace(":", "$") , "BAK");

                // Config Servers

                scopeNode = deploymentDoc.SelectSingleNode("//ws:Servers", manager);

                foreach (string appServer in appServers)
                {
                    XmlDocument serverDoc = new XmlDocument();
                    serverDoc.LoadXml(Properties.Resources.server);

                    XmlNode serverNode = scopeNode.AppendChild(deploymentDoc.ImportNode(serverDoc.DocumentElement, true));
                    ((XmlElement)serverNode).SetAttribute("Name", appServer);

                    workingNode = serverNode.SelectSingleNode("ws:DistributionDatabaseTemplate", manager);
                    ((XmlElement)workingNode).SetAttribute("Name", databaseName + "DistributionDatabaseTemplate");

                    workingNode = serverNode.SelectSingleNode("ws:ServerRoles/ws:ServerRole/text()", manager);
                    foreach (string configServer in configServers)
                    {
                        if (configServer == appServer)
                        {
                            workingNode.Value = "WstConfigServerRole";
                        }
                    }

                    if (workingNode.Value == "#SERVER_ROLE#")
                    {
                        workingNode.Value = "WstAppServerRole";
                    }
                }

                // Deployment Details

                scopeNode = deploymentDoc.SelectSingleNode("//ws:Deployment", manager);
                ((XmlElement)scopeNode).SetAttribute("Name", databaseName);

                workingNode = scopeNode.SelectSingleNode("ws:UseManifest/ws:ManifestName/text()", manager);
                workingNode.Value = manifestName;

                workingNode = scopeNode.SelectSingleNode("ws:UseManifest/ws:ManifestVersion/text()", manager);
                workingNode.Value = manifestVersion;

                // Accounts

                scopeNode = deploymentDoc.SelectSingleNode("//ws:Deployment/ws:DeploymentDefaults/ws:Accounts", manager);

                foreach (ApplicationAccount account in accounts)
                {
                    XmlDocument accountDoc = new XmlDocument();
                    accountDoc.LoadXml(Properties.Resources.account_template);

                    workingNode = scopeNode.AppendChild(deploymentDoc.ImportNode(accountDoc.DocumentElement, true));
                    ((XmlElement)workingNode).SetAttribute("Name", account.Name);

                    workingNode = workingNode.SelectSingleNode("ws:Role/text()", manager);
                    workingNode.Value = account.Role;
                }

                // SqlFailSafeSets

                scopeNode = deploymentDoc.SelectSingleNode("//ws:Deployment/ws:SqlFailSafeSets", manager);

                int currentFailSafeSet = 0;

                for (int currentAppServer = 0; currentAppServer < appServers.Count; ++currentAppServer)
                {
                    for (int currentServerFss = 0; currentServerFss < failSafeSetsPerServer; ++currentServerFss)
                    {
                        string currentDatabaseName = (failSafeSetsPerServer == 1) ? databaseName : string.Format("{0}{1}", databaseName, currentFailSafeSet.ToString("000"));

                        XmlDocument sqlFailSafeSetDoc = new XmlDocument();
                        sqlFailSafeSetDoc.LoadXml(Properties.Resources.sqlfailsafeset_template);

                        workingNode = scopeNode.AppendChild(deploymentDoc.ImportNode(sqlFailSafeSetDoc.DocumentElement, true));
                        ((XmlElement)workingNode).SetAttribute("Number", currentFailSafeSet.ToString());

                        workingNode = scopeNode.SelectSingleNode("ws:SqlFailSafeSet[@Number=\"" + currentFailSafeSet + "\"]/ws:DatabaseTemplate", manager);
                        ((XmlElement)workingNode).SetAttribute("Name", databaseName + "DatabaseTemplate");

                        XmlDocument databaseDoc = new XmlDocument();
                        XmlElement databaseElement;

                        workingNode = scopeNode.SelectSingleNode("ws:SqlFailSafeSet[@Number=\"" + currentFailSafeSet + "\"]/ws:Databases", manager);

                        // Primary Database
                        databaseDoc.LoadXml(Properties.Resources.database_template);
                        databaseElement = (XmlElement)workingNode.AppendChild(deploymentDoc.ImportNode(databaseDoc.DocumentElement, true));
                        databaseElement.SetAttribute("Name", currentDatabaseName);
                        databaseElement.SetAttribute("DataServer", appServers[currentAppServer]);

                        // Replica Database, no replica if there's only one database, webstore doesn't allow it.
                        if (appServers.Count > 1)
                        {
                            databaseDoc.LoadXml(Properties.Resources.database_template);
                            databaseElement =
                                (XmlElement)
                                workingNode.AppendChild(deploymentDoc.ImportNode(databaseDoc.DocumentElement, true));
                            databaseElement.SetAttribute("Name", currentDatabaseName + "Replica");
                            databaseElement.SetAttribute("DataServer", appServers[(currentAppServer + 1) % appServers.Count]);
                        }

                        // Default Primary Database
                        workingNode = scopeNode.SelectSingleNode("ws:SqlFailSafeSet[@Number=\"" + currentFailSafeSet + "\"]/ws:DefaultPrimaryDatabase", manager);
                        ((XmlElement)workingNode).SetAttribute("Database", currentDatabaseName);
                        ((XmlElement)workingNode).SetAttribute("DataServer", appServers[currentAppServer]);

                        // Primary Database
                        workingNode = scopeNode.SelectSingleNode("ws:SqlFailSafeSet[@Number=\"" + currentFailSafeSet + "\"]/ws:PrimaryDatabase", manager);
                        ((XmlElement)workingNode).SetAttribute("Database", currentDatabaseName);
                        ((XmlElement)workingNode).SetAttribute("DataServer", appServers[currentAppServer]);

                        ++currentFailSafeSet;
                    }
                }

                // Data Partitions

                scopeNode = deploymentDoc.SelectSingleNode("//ws:Deployment/ws:DataPartitions", manager);

                int partitionsPerSet = ((int)partitionCount / (appServers.Count * (int)failSafeSetsPerServer));
                for (int currentPartition = 0; currentPartition < partitionCount; ++currentPartition)
                {
                    XmlDocument dataPartitionDoc = new XmlDocument();
                    dataPartitionDoc.LoadXml(Properties.Resources.datapartition_template);

                    workingNode = scopeNode.AppendChild(deploymentDoc.ImportNode(dataPartitionDoc.DocumentElement, true));
                    ((XmlElement)workingNode).SetAttribute("Number", currentPartition.ToString());

                    workingNode = workingNode.SelectSingleNode("ws:SqlFailSafeSetNumber/text()", manager);
                    workingNode.Value = (currentPartition / partitionsPerSet).ToString();
                }
            }
            catch (Exception e)
            {
                log.Error("Exception occurred while generating deployment file.\r\n{0}", e.ToString());
                deploymentDoc = null;
            }

            return deploymentDoc;
        }

        //public static Deployment GetDeployment(string name)
        //{
        //}
    }

    public class Deployment
    {
        private readonly IDeployment _deployment;
        private readonly IDatabaseTemplate _databaseTemplate;
        private readonly IOracle _oracle;
        private readonly XmlDocument _deploymentDoc;
        private readonly XmlNamespaceManager _nsManager;
        private static readonly Log log = Log.GetInstance();
        private List<Database> _databases;
        private readonly List<Account> _accounts;
        

        private readonly string _name;
        private readonly string _manifestName;
        private readonly string _path;


        public Deployment(IDeployment deployment, IDatabaseTemplate databaseTemplate, IOracle oracle, string path) : this(deployment, databaseTemplate, oracle, null, path) { }

        public Deployment(IDeployment deployment, IDatabaseTemplate databaseTemplate, IOracle oracle, XmlDocument deploymentDoc, string path)
        {
            _path = path;
            _deployment = deployment;
            _databaseTemplate = databaseTemplate;
            _oracle = oracle;

            if (deploymentDoc == null)
            {
                _deploymentDoc = new XmlDocument();
                _deploymentDoc.Load(path);
            }
            else
                _deploymentDoc = deploymentDoc;

            _nsManager = new XmlNamespaceManager(new NameTable());
            _nsManager.AddNamespace("wst", Globals.kWebstoreDeploymentXmlNamespace);

            XmlNode deploymentNode = _deploymentDoc.SelectSingleNode("//wst:Webstore/wst:Deployment", _nsManager);
            _name = deploymentNode.Attributes["Name"].Value;

            XmlNode manifestNode = deploymentNode.SelectSingleNode("wst:UseManifest/wst:ManifestName", _nsManager);
            _manifestName = manifestNode.InnerText;

            _accounts = SecurityAccounts();
        }

        public string Name { get { return _name; } }
        public string ManifestName { get { return _manifestName; } }
        public string Path { get { return _path; } }

        public string PublisherName
        {
            get
            {
                XmlNode pubNode = _deploymentDoc.SelectSingleNode(
                    "//wst:Webstore/wst:Deployment/wst:DeploymentDefaults/wst:SecondaryPublication/wst:Name",
                    _nsManager);

                return (pubNode == null ? "" : pubNode.InnerText);
            }

        }

        public int DataPartionCount
        {
            get
            {
                XmlNodeList nodes = _deploymentDoc.SelectNodes(
                    "//wst:Webstore/wst:Deployment/wst:DataPartitions/wst:DataPartition",
                    _nsManager);

                return nodes.Count;
            }
        }

        public List<Database> Databases
        {
            get
            {
                if (_databases == null)
                    LoadTopology();

                return _databases;
            }
        }
        /// <summary>
        /// Default Primary Database
        /// </summary>
        public Database DefaultPrimary
        {
            get
            {
                if (this.Databases != null)
                {
                    return this.Databases.Find(delegate(Database db)
                        {
                            return db.IsDefaultPrimary == true;
                        });
                }
                else
                {
                    return null;
                }

            }

        }
        public List<Database> PrimaryDatabases
        {
            get
            {
                if (this.Databases != null)
                {
                    return Databases.FindAll(delegate(Database db)
                    {
                        return db.Primary == true;
                    });
                }
                else
                {
                    return null;
                }
            }
        }
        public List<Database> SecondaryDatabases
        {
            get
            {
                if (this.Databases != null)
                {
                    return Databases.FindAll(delegate(Database db)
                    {
                        return db.Primary == false;
                    });
                }
                else
                {
                    return null;
                }
            }
        }

        private void LoadTopology()
        {
            if (_oracle.IsDeploymentImported(_name))
            {
                LoadTopologyFromWebstore();
            }
            else
            {
                LoadTopologyFromXml();
            }
        }

        private void LoadTopologyFromWebstore()
        {
            List<Database> newDatabaseList = new List<Database>();

            using (WstConnection connection = new WstConnection(_name))
            {
                connection.Open();

                WebstoreSQLFssCollection collection = connection.SqlPartitions;
                foreach (WebstoreSQLFss partition in collection)
                {
                    foreach (WebstoreDatabase db in partition.Databases)
                    {
                        // if there is more then on database in the partition
                        // then we assume that replication must exist
                        bool hasSecondaries = (partition.Databases.Count > 1);
                        bool isDefaultPrimary = (partition.DefaultPrimaryDB.Name.Equals(db.Name)) ? true : false;
                        string status = "online";
                        if (!db.IsOnline)
                            status = "offline";
                        //if (db.Blacklisted)
                        //    status = "blacklisted";
                        newDatabaseList.Add(new Database(db.Name, db.ServerName, db.IsPrimary, status, hasSecondaries, isDefaultPrimary));
                    }
                }

                _databases = newDatabaseList;
            }
        }

        public void LoadTopologyFromXml()
        {
            List<Database> list = new List<Database>();
            string dbserver;
            string dbname;

            XmlNodeList failSafeSetNodes = _deploymentDoc.SelectNodes("//wst:Webstore/wst:Deployment/wst:SqlFailSafeSets/wst:SqlFailSafeSet", _nsManager);
            if (failSafeSetNodes == null) return;

            foreach (XmlNode failsafeSetNode in failSafeSetNodes)
            {
                //Get Server, db & status for the deployment
                XmlNodeList dbnodeList = failsafeSetNode.SelectNodes("wst:Databases/wst:Database", _nsManager);
                if (dbnodeList == null) continue;

                // if there is more then on database in the partition
                // then we assume that replication must exist
                bool hasSecondaries = (dbnodeList.Count > 1);

                foreach (XmlNode dbnode in dbnodeList)
                {

                    dbname = dbnode.Attributes["Name"].Value;
                    dbserver = dbnode.Attributes["DataServer"].Value;

                    string status;
                    status = dbnode["Status"] != null ? dbnode["Status"].InnerText : null;

                    //primary database is defined at //wst:Webstore/wst:Deployment/wst:SqlFailSafeSets/wst:SqlFailSafeSet/wst:PrimaryDatabase
                    XmlNode primaryNode = dbnode.ParentNode.ParentNode["PrimaryDatabase"];
                    XmlNode defaultPrimaryNode = dbnode.ParentNode.ParentNode["DefaultPrimaryDatabase"];
                    //check if the server & db is primary
                    bool primary;
                    if (primaryNode != null &&
                        primaryNode.Attributes["DataServer"].Value.ToLower() == dbserver.ToLower() &&
                        primaryNode.Attributes["Database"].Value.ToLower() == dbname.ToLower())
                        primary = true;
                    else
                        primary = false;

                    bool defaultPrimary;
                    if (defaultPrimaryNode != null &&
                        defaultPrimaryNode.Attributes["DataServer"].Value.ToLower() == dbserver.ToLower() &&
                        defaultPrimaryNode.Attributes["Database"].Value.ToLower() == dbname.ToLower())
                        defaultPrimary = true;
                    else
                        defaultPrimary = false;


                    list.Add(new Database(dbname, dbserver, primary, status, hasSecondaries, defaultPrimary));
                }
            }

            _databases = list;
        }

        List<Account> SecurityAccounts()
        {
            List<Account> accounts = new List<Account>();

            string query =
                "//wst:DeploymentDefaults/wst:Accounts/wst:Account";
            try
            {
                XmlNodeList accountNodes = _deploymentDoc.SelectNodes(query, _nsManager);

                foreach (XmlNode accountNode in accountNodes)
                {

                    string name = accountNode.Attributes["Name"].Value;

                    XmlNodeList roleNodes = accountNode.SelectNodes("./wst:Role", _nsManager);

                    foreach (XmlNode roleNode in roleNodes)
                    {
                        string role = roleNode.InnerText;
                        accounts.Add(new ApplicationAccount(name, role, _name));
                    }
                }
            }
            catch (Exception e)
            {
                StringBuilder error = new StringBuilder();
                error.AppendFormat("Exported deployment '{0}' at location '{1}' has a malformed Accounts node. ", _name, _path);
                error.Append("Make sure all accounts currently added to this deployment are valid.");
                log.Error(error.ToString());

                throw (new ApplicationException("Bad account listing in deployment Xml", e));
            }

            return accounts;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="beforeInstall">
        /// This flag allow the application to continue deployment from last leftover deployment.
        /// </param>
        /// <returns></returns>
        public bool VerifyDeployment(bool beforeInstall)
        {
            log.WriteLine("Verifying deployment " + _name + "...");

            //export the current deployment list from Webstore
            LoadTopologyFromWebstore();

            //Loop thru current status of a deployment
            foreach (Database deployeddb in _databases)
            {
                if (beforeInstall)
                {
                    if (deployeddb.Status.ToLower() == "notdeployed")
                    {
                        log.WriteLine("There exists a left over deployment last run for database " + deployeddb.Name + "...");
                        return false;
                    }
                }
                else if ((deployeddb.Status.ToLower() != "online"))
                {
                    //states other than offline is out of scope
                    log.Error("'{0}' - '{1}' status is not online. Current status: '{2}'",
                        deployeddb.Server, deployeddb.Name, deployeddb.Status);
                    return false;
                }

            }

            log.WriteLine(" Done!");

            return true;
        }

        public void Import()
        {
            log.WriteLine("Importing deployment {0}", _name);

            _deployment.InXmlPath = _path;
            _deployment.Import();

            log.WriteLine(" Done!");
        }

        public void Setup()
        {
            log.WriteLine("Webstore Setting up deployment {0}", _name);

            _deployment.DeploymentName = _name;
            _deployment.Setup();

            log.WriteLine(" Done!");
        }

        public void Upgrade(bool isRollingUpgrade, bool isReplTearDown, bool isForce)
        {
            log.WriteLine("Webstore upgrade a deployment {0}, rollingupgrade = {1}, isReplTearDown = {2}",
                _name,
                isRollingUpgrade,
                isReplTearDown);

            _deployment.DeploymentName = _name;
            if (isForce)
            {
                _deployment.IsForce = true;
            }
            else
            {
                _deployment.IsRollingUpgrade = isRollingUpgrade;
                _deployment.IsReplTearDown = isReplTearDown;
            }

            _deployment.Upgrade();
            log.WriteLine(" Done!");
        }

        public void UpdateVersion(string version)
        {
            log.WriteLine("Deployment version updating to {0}", version);

            _deployment.DeploymentName = _name;
            _deployment.NewManifestVersion = version;
            _deployment.UpdateVersion();

            log.WriteLine(" Done!");
        }

        public void Drop()
        {
            log.WriteLine("Dropping deployment {0}", _name);

            _deployment.IsForce = true;
            _deployment.DeploymentName = _name;
            _deployment.Drop();
            _databaseTemplate.Purge();

            log.WriteLine(" Done!");
        }

        public void UpdateSecurityAccounts()
        {
            log.WriteLine("Checking security accounts...", _name);

            Deployment currentDeployment;
            List<Account> currentAccounts = null;

            if (_oracle.IsDeploymentImported(_name))
            {
                FileInfo depFile = _oracle.ExportDeployment(_name);
                currentDeployment = new Deployment(_deployment, _databaseTemplate, _oracle, depFile.FullName);

                currentAccounts = currentDeployment._accounts;
            }

            foreach (Account account in _accounts)
            {
                if (currentAccounts != null)
                {
                    bool found = false;

                    foreach (Account currentAccount in currentAccounts)
                    {
                        if (account.CompareTo(currentAccount) == 0)
                        {
                            found = true;
                            break;
                        }
                    }

                    if (found)
                        continue;
                }

                account.Persist();
            }

            log.WriteLine("Done!");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDatabaseFactory.cs ===
/*******************************************************************
 *    FILE:         IDatabaseFactory.cs
 *
 *    DESCRIPTION:  IDatabaseFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDatabaseFactory
    {
        // Methods
        BaseDatabase CreateInstance();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDatabaseTemplate.cs ===
/*******************************************************************
 *    FILE:         IDatabaseTemplate.cs
 *
 *    DESCRIPTION:  IDatabaseTemplate interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDatabaseTemplate
    {
        // Methods
        void Purge();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Environments.cs ===
﻿namespace xonline.tools.wstrunner.core
{
    public enum Environments
    {
        livenoob = 1, // livenoob - or LIVEn On One Box (the xblob equivalent)
        storax = 2,
        testnet = 3,
        stressnet = 4,
        certnet = 5,
        partnernet =6 ,
        prodnet = 7 ,
        int2 = 8
    }

    public static class EnvironmentNames
    {
        public const string livenoob = "livenoob"; // livenoob - or LIVEn On One Box (the xblob equivalent)
        public const string storax = "storax";
        public const string testnet = "testnet";
        public const string stressnet = "stressnet";
        public const string certnet = "certnet";
        public const string partnernet = "partnernet";
        public const string prodnet = "prodnet";
        public const string int2 = "int2";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDeployment.cs ===
/*******************************************************************
 *    FILE:         IDeployment.cs
 *
 *    DESCRIPTION:  IDeployment interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDeployment
    {
        // Properties
        string InXmlPath { get; set; }
        string DeploymentName { get; set; }
        bool IsForce { get; set; }
        bool IsRollingUpgrade { get; set; }
        bool IsReplTearDown { get; set; }
        string NewManifestVersion { get; set; }
        string OutXmlPath { get; set; }
        bool IsVerbose { get; set; }

        // Methods
        void Import();
        void Setup();
        void Upgrade();
        void UpdateVersion();
        void Drop();
        void Status();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDatabase.cs ===
/*******************************************************************
 *    FILE:         IDatabase.cs
 *
 *    DESCRIPTION:  IDatabase interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      5-1-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDatabase
    {
        // Properties
        string Server { get; set; }
        string Database { get; set; }

        // Methods
        void NeedsRepair();
        void Repair();
        void MarkOnline();
        void Promote();
        void Repair(bool isForce);

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDeploymentFactory.cs ===
/*******************************************************************
 *    FILE:         IManifestFactory.cs
 *
 *    DESCRIPTION:  IManifestFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDeploymentFactory
    {
        // Methods
        BaseDeployment CreateInstance();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDeploymentFileFactory.cs ===
/*******************************************************************
 *    FILE:         IDeploymentFactory.cs
 *
 *    DESCRIPTION:  IDeploymentFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-17-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System.IO;

namespace xonline.tools.wstrunner.core
{
    public interface IDeploymentFileFactory
    {
        // Methods
        FileInfo CreateDeployment(
            FileInfo manifestXml,
            string deploymentXmlFileName,
            string dataFilePath,
            string logFilePath,
            string configServerList,
            string dataServerList,
            uint failSafeSetsPerServer,
            string accountRoleMap,
            uint partitionCount,
            string databaseName);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IFailSafeSet.cs ===
/*******************************************************************
 *    FILE:         IFailSafeSet.cs
 *
 *    DESCRIPTION:  IFailSafeSet interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      7-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IFailSafeSet
    {
        // Properties
        string DeploymentName { get; set; }
        int SQLFSSNum { get; set; }

        // Methods
        void Offline();
        void Demote();
        void DropRepl();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebServiceSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsWebServiceSetting
    public class IIsWebServiceSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebServiceSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebServiceSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServiceSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServiceSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServiceSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServiceSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServiceSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServiceSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebServiceSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebServiceSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AdminServer {
            get {
                return ((string)(curObj["AdminServer"]));
            }
            set {
                curObj["AdminServer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowKeepAliveNull {
            get {
                if ((curObj["AllowKeepAlive"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowKeepAlive {
            get {
                if ((curObj["AllowKeepAlive"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowKeepAlive"]));
            }
            set {
                curObj["AllowKeepAlive"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowPathInfoForScriptMappingsNull {
            get {
                if ((curObj["AllowPathInfoForScriptMappings"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowPathInfoForScriptMappings {
            get {
                if ((curObj["AllowPathInfoForScriptMappings"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowPathInfoForScriptMappings"]));
            }
            set {
                curObj["AllowPathInfoForScriptMappings"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowClientDebugNull {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowClientDebug {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowClientDebug"]));
            }
            set {
                curObj["AppAllowClientDebug"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowDebuggingNull {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowDebugging {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowDebugging"]));
            }
            set {
                curObj["AppAllowDebugging"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppFriendlyName {
            get {
                return ((string)(curObj["AppFriendlyName"]));
            }
            set {
                curObj["AppFriendlyName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ApplicationDependencies {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ApplicationDependencies"]));
            }
            set {
                curObj["ApplicationDependencies"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPoolId {
            get {
                return ((string)(curObj["AppPoolId"]));
            }
            set {
                curObj["AppPoolId"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppWamClsid {
            get {
                return ((string)(curObj["AppWamClsid"]));
            }
            set {
                curObj["AppWamClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowOutOfProcComponentsNull {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowOutOfProcComponents {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowOutOfProcComponents"]));
            }
            set {
                curObj["AspAllowOutOfProcComponents"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowSessionStateNull {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowSessionState {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowSessionState"]));
            }
            set {
                curObj["AspAllowSessionState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAppServiceFlagsNull {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspAppServiceFlags {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspAppServiceFlags"]));
            }
            set {
                curObj["AspAppServiceFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingLimitNull {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspBufferingLimit {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspBufferingLimit"]));
            }
            set {
                curObj["AspBufferingLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingOnNull {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspBufferingOn {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspBufferingOn"]));
            }
            set {
                curObj["AspBufferingOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCalcLineNumberNull {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspCalcLineNumber {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspCalcLineNumber"]));
            }
            set {
                curObj["AspCalcLineNumber"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCodepageNull {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspCodepage {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspCodepage"]));
            }
            set {
                curObj["AspCodepage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspDiskTemplateCacheDirectory {
            get {
                return ((string)(curObj["AspDiskTemplateCacheDirectory"]));
            }
            set {
                curObj["AspDiskTemplateCacheDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableApplicationRestartNull {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableApplicationRestart {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableApplicationRestart"]));
            }
            set {
                curObj["AspEnableApplicationRestart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableAspHtmlFallbackNull {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableAspHtmlFallback {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableAspHtmlFallback"]));
            }
            set {
                curObj["AspEnableAspHtmlFallback"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableChunkedEncodingNull {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableChunkedEncoding {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableChunkedEncoding"]));
            }
            set {
                curObj["AspEnableChunkedEncoding"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableParentPathsNull {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableParentPaths {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableParentPaths"]));
            }
            set {
                curObj["AspEnableParentPaths"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableSxsNull {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableSxs {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableSxs"]));
            }
            set {
                curObj["AspEnableSxs"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTrackerNull {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTracker {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTracker"]));
            }
            set {
                curObj["AspEnableTracker"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTypelibCacheNull {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTypelibCache {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTypelibCache"]));
            }
            set {
                curObj["AspEnableTypelibCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspErrorsToNTLogNull {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspErrorsToNTLog {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspErrorsToNTLog"]));
            }
            set {
                curObj["AspErrorsToNTLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExceptionCatchEnableNull {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspExceptionCatchEnable {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspExceptionCatchEnable"]));
            }
            set {
                curObj["AspExceptionCatchEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExecuteInMTANull {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspExecuteInMTA {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspExecuteInMTA"]));
            }
            set {
                curObj["AspExecuteInMTA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspKeepSessionIDSecureNull {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspKeepSessionIDSecure {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspKeepSessionIDSecure"]));
            }
            set {
                curObj["AspKeepSessionIDSecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLCIDNull {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspLCID {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspLCID"]));
            }
            set {
                curObj["AspLCID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLogErrorRequestsNull {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspLogErrorRequests {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspLogErrorRequests"]));
            }
            set {
                curObj["AspLogErrorRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxDiskTemplateCacheFilesNull {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxDiskTemplateCacheFiles {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxDiskTemplateCacheFiles"]));
            }
            set {
                curObj["AspMaxDiskTemplateCacheFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxRequestEntityAllowedNull {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxRequestEntityAllowed {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxRequestEntityAllowed"]));
            }
            set {
                curObj["AspMaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspPartitionID {
            get {
                return ((string)(curObj["AspPartitionID"]));
            }
            set {
                curObj["AspPartitionID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspProcessorThreadMaxNull {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspProcessorThreadMax {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspProcessorThreadMax"]));
            }
            set {
                curObj["AspProcessorThreadMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueConnectionTestTimeNull {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueConnectionTestTime {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueConnectionTestTime"]));
            }
            set {
                curObj["AspQueueConnectionTestTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueTimeoutNull {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueTimeout {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueTimeout"]));
            }
            set {
                curObj["AspQueueTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRequestQueueMaxNull {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspRequestQueueMax {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspRequestQueueMax"]));
            }
            set {
                curObj["AspRequestQueueMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRunOnEndAnonymouslyNull {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspRunOnEndAnonymously {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspRunOnEndAnonymously"]));
            }
            set {
                curObj["AspRunOnEndAnonymously"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptEngineCacheMaxNull {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptEngineCacheMax {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptEngineCacheMax"]));
            }
            set {
                curObj["AspScriptEngineCacheMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptErrorMessage {
            get {
                return ((string)(curObj["AspScriptErrorMessage"]));
            }
            set {
                curObj["AspScriptErrorMessage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptErrorSentToBrowserNull {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspScriptErrorSentToBrowser {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspScriptErrorSentToBrowser"]));
            }
            set {
                curObj["AspScriptErrorSentToBrowser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptFileCacheSizeNull {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptFileCacheSize {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptFileCacheSize"]));
            }
            set {
                curObj["AspScriptFileCacheSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptLanguage {
            get {
                return ((string)(curObj["AspScriptLanguage"]));
            }
            set {
                curObj["AspScriptLanguage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptTimeoutNull {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptTimeout {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptTimeout"]));
            }
            set {
                curObj["AspScriptTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionMaxNull {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionMax {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionMax"]));
            }
            set {
                curObj["AspSessionMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionTimeoutNull {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionTimeout {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionTimeout"]));
            }
            set {
                curObj["AspSessionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspSxsName {
            get {
                return ((string)(curObj["AspSxsName"]));
            }
            set {
                curObj["AspSxsName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspTrackThreadingModelNull {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspTrackThreadingModel {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspTrackThreadingModel"]));
            }
            set {
                curObj["AspTrackThreadingModel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspUsePartitionNull {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspUsePartition {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspUsePartition"]));
            }
            set {
                curObj["AspUsePartition"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAdvNotifyDisableNull {
            get {
                if ((curObj["AuthAdvNotifyDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAdvNotifyDisable {
            get {
                if ((curObj["AuthAdvNotifyDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAdvNotifyDisable"]));
            }
            set {
                curObj["AuthAdvNotifyDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthBasic {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthBasic"]));
            }
            set {
                curObj["AuthBasic"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthChangeDisableNull {
            get {
                if ((curObj["AuthChangeDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthChangeDisable {
            get {
                if ((curObj["AuthChangeDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthChangeDisable"]));
            }
            set {
                curObj["AuthChangeDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthChangeUnsecureNull {
            get {
                if ((curObj["AuthChangeUnsecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthChangeUnsecure {
            get {
                if ((curObj["AuthChangeUnsecure"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthChangeUnsecure"]));
            }
            set {
                curObj["AuthChangeUnsecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AuthChangeURL {
            get {
                return ((string)(curObj["AuthChangeURL"]));
            }
            set {
                curObj["AuthChangeURL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AuthExpiredUnsecureURL {
            get {
                return ((string)(curObj["AuthExpiredUnsecureURL"]));
            }
            set {
                curObj["AuthExpiredUnsecureURL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AuthExpiredURL {
            get {
                return ((string)(curObj["AuthExpiredURL"]));
            }
            set {
                curObj["AuthExpiredURL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthFlagsNull {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthFlags {
            get {
                if ((curObj["AuthFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthFlags"]));
            }
            set {
                curObj["AuthFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthMD5Null {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthMD5 {
            get {
                if ((curObj["AuthMD5"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthMD5"]));
            }
            set {
                curObj["AuthMD5"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AuthNotifyPwdExpUnsecureURL {
            get {
                return ((string)(curObj["AuthNotifyPwdExpUnsecureURL"]));
            }
            set {
                curObj["AuthNotifyPwdExpUnsecureURL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AuthNotifyPwdExpURL {
            get {
                return ((string)(curObj["AuthNotifyPwdExpURL"]));
            }
            set {
                curObj["AuthNotifyPwdExpURL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthNTLMNull {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthNTLM {
            get {
                if ((curObj["AuthNTLM"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthNTLM"]));
            }
            set {
                curObj["AuthNTLM"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPassportNull {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPassport {
            get {
                if ((curObj["AuthPassport"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPassport"]));
            }
            set {
                curObj["AuthPassport"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistenceNull {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AuthPersistence {
            get {
                if ((curObj["AuthPersistence"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AuthPersistence"]));
            }
            set {
                curObj["AuthPersistence"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthPersistSingleRequestNull {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthPersistSingleRequest {
            get {
                if ((curObj["AuthPersistSingleRequest"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthPersistSingleRequest"]));
            }
            set {
                curObj["AuthPersistSingleRequest"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzEnableNull {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AzEnable {
            get {
                if ((curObj["AzEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AzEnable"]));
            }
            set {
                curObj["AzEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAzImpersonationLevelNull {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AzImpersonationLevel {
            get {
                if ((curObj["AzImpersonationLevel"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AzImpersonationLevel"]));
            }
            set {
                curObj["AzImpersonationLevel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzScopeName {
            get {
                return ((string)(curObj["AzScopeName"]));
            }
            set {
                curObj["AzScopeName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AzStoreName {
            get {
                return ((string)(curObj["AzStoreName"]));
            }
            set {
                curObj["AzStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string CacheControlCustom {
            get {
                return ((string)(curObj["CacheControlCustom"]));
            }
            set {
                curObj["CacheControlCustom"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlMaxAgeNull {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CacheControlMaxAge {
            get {
                if ((curObj["CacheControlMaxAge"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CacheControlMaxAge"]));
            }
            set {
                curObj["CacheControlMaxAge"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheControlNoCacheNull {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheControlNoCache {
            get {
                if ((curObj["CacheControlNoCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheControlNoCache"]));
            }
            set {
                curObj["CacheControlNoCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCacheISAPINull {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CacheISAPI {
            get {
                if ((curObj["CacheISAPI"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CacheISAPI"]));
            }
            set {
                curObj["CacheISAPI"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Caption {
            get {
                return ((string)(curObj["Caption"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCentralBinaryLoggingEnabledNull {
            get {
                if ((curObj["CentralBinaryLoggingEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CentralBinaryLoggingEnabled {
            get {
                if ((curObj["CentralBinaryLoggingEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CentralBinaryLoggingEnabled"]));
            }
            set {
                curObj["CentralBinaryLoggingEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCertCheckModeNull {
            get {
                if ((curObj["CertCheckMode"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CertCheckMode {
            get {
                if ((curObj["CertCheckMode"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CertCheckMode"]));
            }
            set {
                curObj["CertCheckMode"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCGITimeoutNull {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int CGITimeout {
            get {
                if ((curObj["CGITimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["CGITimeout"]));
            }
            set {
                curObj["CGITimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsConnectionTimeoutNull {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ConnectionTimeout {
            get {
                if ((curObj["ConnectionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ConnectionTimeout"]));
            }
            set {
                curObj["ConnectionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsContentIndexedNull {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ContentIndexed {
            get {
                if ((curObj["ContentIndexed"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ContentIndexed"]));
            }
            set {
                curObj["ContentIndexed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateCGIWithNewConsoleNull {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateCGIWithNewConsole {
            get {
                if ((curObj["CreateCGIWithNewConsole"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateCGIWithNewConsole"]));
            }
            set {
                curObj["CreateCGIWithNewConsole"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsCreateProcessAsUserNull {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool CreateProcessAsUser {
            get {
                if ((curObj["CreateProcessAsUser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["CreateProcessAsUser"]));
            }
            set {
                curObj["CreateProcessAsUser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDoc {
            get {
                return ((string)(curObj["DefaultDoc"]));
            }
            set {
                curObj["DefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultDocFooter {
            get {
                return ((string)(curObj["DefaultDocFooter"]));
            }
            set {
                curObj["DefaultDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string DefaultLogonDomain {
            get {
                return ((string)(curObj["DefaultLogonDomain"]));
            }
            set {
                curObj["DefaultLogonDomain"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDemandStartThresholdNull {
            get {
                if ((curObj["DemandStartThreshold"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DemandStartThreshold {
            get {
                if ((curObj["DemandStartThreshold"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DemandStartThreshold"]));
            }
            set {
                curObj["DemandStartThreshold"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Description {
            get {
                return ((string)(curObj["Description"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseFlagsNull {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DirBrowseFlags {
            get {
                if ((curObj["DirBrowseFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DirBrowseFlags"]));
            }
            set {
                curObj["DirBrowseFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowDateNull {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowDate {
            get {
                if ((curObj["DirBrowseShowDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowDate"]));
            }
            set {
                curObj["DirBrowseShowDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowExtensionNull {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowExtension {
            get {
                if ((curObj["DirBrowseShowExtension"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowExtension"]));
            }
            set {
                curObj["DirBrowseShowExtension"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowLongDateNull {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowLongDate {
            get {
                if ((curObj["DirBrowseShowLongDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowLongDate"]));
            }
            set {
                curObj["DirBrowseShowLongDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowSizeNull {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowSize {
            get {
                if ((curObj["DirBrowseShowSize"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowSize"]));
            }
            set {
                curObj["DirBrowseShowSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirBrowseShowTimeNull {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DirBrowseShowTime {
            get {
                if ((curObj["DirBrowseShowTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DirBrowseShowTime"]));
            }
            set {
                curObj["DirBrowseShowTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDirectoryLevelsToScanNull {
            get {
                if ((curObj["DirectoryLevelsToScan"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DirectoryLevelsToScan {
            get {
                if ((curObj["DirectoryLevelsToScan"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DirectoryLevelsToScan"]));
            }
            set {
                curObj["DirectoryLevelsToScan"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableSocketPoolingNull {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableSocketPooling {
            get {
                if ((curObj["DisableSocketPooling"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableSocketPooling"]));
            }
            set {
                curObj["DisableSocketPooling"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDisableStaticFileCacheNull {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DisableStaticFileCache {
            get {
                if ((curObj["DisableStaticFileCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DisableStaticFileCache"]));
            }
            set {
                curObj["DisableStaticFileCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoDynamicCompressionNull {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoDynamicCompression {
            get {
                if ((curObj["DoDynamicCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoDynamicCompression"]));
            }
            set {
                curObj["DoDynamicCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDontLogNull {
            get {
                if ((curObj["DontLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DontLog {
            get {
                if ((curObj["DontLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DontLog"]));
            }
            set {
                curObj["DontLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDoStaticCompressionNull {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool DoStaticCompression {
            get {
                if ((curObj["DoStaticCompression"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["DoStaticCompression"]));
            }
            set {
                curObj["DoStaticCompression"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsDownlevelAdminInstanceNull {
            get {
                if ((curObj["DownlevelAdminInstance"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int DownlevelAdminInstance {
            get {
                if ((curObj["DownlevelAdminInstance"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["DownlevelAdminInstance"]));
            }
            set {
                curObj["DownlevelAdminInstance"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDefaultDocNull {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDefaultDoc {
            get {
                if ((curObj["EnableDefaultDoc"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDefaultDoc"]));
            }
            set {
                curObj["EnableDefaultDoc"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDirBrowsingNull {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDirBrowsing {
            get {
                if ((curObj["EnableDirBrowsing"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDirBrowsing"]));
            }
            set {
                curObj["EnableDirBrowsing"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableDocFooterNull {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableDocFooter {
            get {
                if ((curObj["EnableDocFooter"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableDocFooter"]));
            }
            set {
                curObj["EnableDocFooter"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsEnableReverseDnsNull {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool EnableReverseDns {
            get {
                if ((curObj["EnableReverseDns"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["EnableReverseDns"]));
            }
            set {
                curObj["EnableReverseDns"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsHeaderWaitTimeoutNull {
            get {
                if ((curObj["HeaderWaitTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int HeaderWaitTimeout {
            get {
                if ((curObj["HeaderWaitTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["HeaderWaitTimeout"]));
            }
            set {
                curObj["HeaderWaitTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpCustomHeaders {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpCustomHeaders"]));
            }
            set {
                curObj["HttpCustomHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] HttpErrors {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["HttpErrors"]));
            }
            set {
                curObj["HttpErrors"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string HttpExpires {
            get {
                return ((string)(curObj["HttpExpires"]));
            }
            set {
                curObj["HttpExpires"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] HttpPics {
            get {
                return ((string[])(curObj["HttpPics"]));
            }
            set {
                curObj["HttpPics"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsIIs5IsolationModeEnabledNull {
            get {
                if ((curObj["IIs5IsolationModeEnabled"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool IIs5IsolationModeEnabled {
            get {
                if ((curObj["IIs5IsolationModeEnabled"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["IIs5IsolationModeEnabled"]));
            }
            set {
                curObj["IIs5IsolationModeEnabled"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] InProcessIsapiApps {
            get {
                return ((string[])(curObj["InProcessIsapiApps"]));
            }
            set {
                curObj["InProcessIsapiApps"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesRecvNull {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesRecv {
            get {
                if ((curObj["LogExtFileBytesRecv"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesRecv"]));
            }
            set {
                curObj["LogExtFileBytesRecv"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileBytesSentNull {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileBytesSent {
            get {
                if ((curObj["LogExtFileBytesSent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileBytesSent"]));
            }
            set {
                curObj["LogExtFileBytesSent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileClientIpNull {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileClientIp {
            get {
                if ((curObj["LogExtFileClientIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileClientIp"]));
            }
            set {
                curObj["LogExtFileClientIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileComputerNameNull {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileComputerName {
            get {
                if ((curObj["LogExtFileComputerName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileComputerName"]));
            }
            set {
                curObj["LogExtFileComputerName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileCookieNull {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileCookie {
            get {
                if ((curObj["LogExtFileCookie"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileCookie"]));
            }
            set {
                curObj["LogExtFileCookie"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileDateNull {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileDate {
            get {
                if ((curObj["LogExtFileDate"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileDate"]));
            }
            set {
                curObj["LogExtFileDate"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileFlagsNull {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogExtFileFlags {
            get {
                if ((curObj["LogExtFileFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogExtFileFlags"]));
            }
            set {
                curObj["LogExtFileFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHostNull {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHost {
            get {
                if ((curObj["LogExtFileHost"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHost"]));
            }
            set {
                curObj["LogExtFileHost"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpStatusNull {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpStatus {
            get {
                if ((curObj["LogExtFileHttpStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpStatus"]));
            }
            set {
                curObj["LogExtFileHttpStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileHttpSubStatusNull {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileHttpSubStatus {
            get {
                if ((curObj["LogExtFileHttpSubStatus"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileHttpSubStatus"]));
            }
            set {
                curObj["LogExtFileHttpSubStatus"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileMethodNull {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileMethod {
            get {
                if ((curObj["LogExtFileMethod"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileMethod"]));
            }
            set {
                curObj["LogExtFileMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileProtocolVersionNull {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileProtocolVersion {
            get {
                if ((curObj["LogExtFileProtocolVersion"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileProtocolVersion"]));
            }
            set {
                curObj["LogExtFileProtocolVersion"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileRefererNull {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileReferer {
            get {
                if ((curObj["LogExtFileReferer"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileReferer"]));
            }
            set {
                curObj["LogExtFileReferer"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerIpNull {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerIp {
            get {
                if ((curObj["LogExtFileServerIp"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerIp"]));
            }
            set {
                curObj["LogExtFileServerIp"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileServerPortNull {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileServerPort {
            get {
                if ((curObj["LogExtFileServerPort"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileServerPort"]));
            }
            set {
                curObj["LogExtFileServerPort"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileSiteNameNull {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileSiteName {
            get {
                if ((curObj["LogExtFileSiteName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileSiteName"]));
            }
            set {
                curObj["LogExtFileSiteName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeNull {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTime {
            get {
                if ((curObj["LogExtFileTime"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTime"]));
            }
            set {
                curObj["LogExtFileTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileTimeTakenNull {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileTimeTaken {
            get {
                if ((curObj["LogExtFileTimeTaken"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileTimeTaken"]));
            }
            set {
                curObj["LogExtFileTimeTaken"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriQueryNull {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriQuery {
            get {
                if ((curObj["LogExtFileUriQuery"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriQuery"]));
            }
            set {
                curObj["LogExtFileUriQuery"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUriStemNull {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUriStem {
            get {
                if ((curObj["LogExtFileUriStem"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUriStem"]));
            }
            set {
                curObj["LogExtFileUriStem"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserAgentNull {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserAgent {
            get {
                if ((curObj["LogExtFileUserAgent"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserAgent"]));
            }
            set {
                curObj["LogExtFileUserAgent"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileUserNameNull {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileUserName {
            get {
                if ((curObj["LogExtFileUserName"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileUserName"]));
            }
            set {
                curObj["LogExtFileUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogExtFileWin32StatusNull {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogExtFileWin32Status {
            get {
                if ((curObj["LogExtFileWin32Status"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogExtFileWin32Status"]));
            }
            set {
                curObj["LogExtFileWin32Status"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogFileDirectory {
            get {
                return ((string)(curObj["LogFileDirectory"]));
            }
            set {
                curObj["LogFileDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileLocaltimeRolloverNull {
            get {
                if ((curObj["LogFileLocaltimeRollover"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogFileLocaltimeRollover {
            get {
                if ((curObj["LogFileLocaltimeRollover"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogFileLocaltimeRollover"]));
            }
            set {
                curObj["LogFileLocaltimeRollover"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFilePeriodNull {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFilePeriod {
            get {
                if ((curObj["LogFilePeriod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFilePeriod"]));
            }
            set {
                curObj["LogFilePeriod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogFileTruncateSizeNull {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogFileTruncateSize {
            get {
                if ((curObj["LogFileTruncateSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogFileTruncateSize"]));
            }
            set {
                curObj["LogFileTruncateSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogInUTF8Null {
            get {
                if ((curObj["LogInUTF8"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool LogInUTF8 {
            get {
                if ((curObj["LogInUTF8"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["LogInUTF8"]));
            }
            set {
                curObj["LogInUTF8"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogModuleList {
            get {
                return ((string)(curObj["LogModuleList"]));
            }
            set {
                curObj["LogModuleList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcDataSource {
            get {
                return ((string)(curObj["LogOdbcDataSource"]));
            }
            set {
                curObj["LogOdbcDataSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcPassword {
            get {
                return ((string)(curObj["LogOdbcPassword"]));
            }
            set {
                curObj["LogOdbcPassword"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcTableName {
            get {
                return ((string)(curObj["LogOdbcTableName"]));
            }
            set {
                curObj["LogOdbcTableName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogOdbcUserName {
            get {
                return ((string)(curObj["LogOdbcUserName"]));
            }
            set {
                curObj["LogOdbcUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogonMethodNull {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogonMethod {
            get {
                if ((curObj["LogonMethod"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogonMethod"]));
            }
            set {
                curObj["LogonMethod"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string LogPluginClsid {
            get {
                return ((string)(curObj["LogPluginClsid"]));
            }
            set {
                curObj["LogPluginClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsLogTypeNull {
            get {
                if ((curObj["LogType"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int LogType {
            get {
                if ((curObj["LogType"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["LogType"]));
            }
            set {
                curObj["LogType"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxBandwidthNull {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxBandwidth {
            get {
                if ((curObj["MaxBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxBandwidth"]));
            }
            set {
                curObj["MaxBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxConnectionsNull {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxConnections {
            get {
                if ((curObj["MaxConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxConnections"]));
            }
            set {
                curObj["MaxConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxEndpointConnectionsNull {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxEndpointConnections {
            get {
                if ((curObj["MaxEndpointConnections"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxEndpointConnections"]));
            }
            set {
                curObj["MaxEndpointConnections"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxGlobalBandwidthNull {
            get {
                if ((curObj["MaxGlobalBandwidth"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxGlobalBandwidth {
            get {
                if ((curObj["MaxGlobalBandwidth"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxGlobalBandwidth"]));
            }
            set {
                curObj["MaxGlobalBandwidth"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMaxRequestEntityAllowedNull {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MaxRequestEntityAllowed {
            get {
                if ((curObj["MaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MaxRequestEntityAllowed"]));
            }
            set {
                curObj["MaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] MimeMap {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["MimeMap"]));
            }
            set {
                curObj["MimeMap"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsMinFileBytesPerSecNull {
            get {
                if ((curObj["MinFileBytesPerSec"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int MinFileBytesPerSec {
            get {
                if ((curObj["MinFileBytesPerSec"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["MinFileBytesPerSec"]));
            }
            set {
                curObj["MinFileBytesPerSec"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Name {
            get {
                return ((string)(curObj["Name"]));
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string NTAuthenticationProviders {
            get {
                return ((string)(curObj["NTAuthenticationProviders"]));
            }
            set {
                curObj["NTAuthenticationProviders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPassportRequireADMappingNull {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PassportRequireADMapping {
            get {
                if ((curObj["PassportRequireADMapping"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PassportRequireADMapping"]));
            }
            set {
                curObj["PassportRequireADMapping"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPasswordCacheTTLNull {
            get {
                if ((curObj["PasswordCacheTTL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PasswordCacheTTL {
            get {
                if ((curObj["PasswordCacheTTL"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PasswordCacheTTL"]));
            }
            set {
                curObj["PasswordCacheTTL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPasswordChangeFlagsNull {
            get {
                if ((curObj["PasswordChangeFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PasswordChangeFlags {
            get {
                if ((curObj["PasswordChangeFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PasswordChangeFlags"]));
            }
            set {
                curObj["PasswordChangeFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPasswordExpirePrenotifyDaysNull {
            get {
                if ((curObj["PasswordExpirePrenotifyDays"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PasswordExpirePrenotifyDays {
            get {
                if ((curObj["PasswordExpirePrenotifyDays"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PasswordExpirePrenotifyDays"]));
            }
            set {
                curObj["PasswordExpirePrenotifyDays"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsPoolIdcTimeoutNull {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int PoolIdcTimeout {
            get {
                if ((curObj["PoolIdcTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["PoolIdcTimeout"]));
            }
            set {
                curObj["PoolIdcTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsProcessNTCRIfLoggedOnNull {
            get {
                if ((curObj["ProcessNTCRIfLoggedOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ProcessNTCRIfLoggedOn {
            get {
                if ((curObj["ProcessNTCRIfLoggedOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ProcessNTCRIfLoggedOn"]));
            }
            set {
                curObj["ProcessNTCRIfLoggedOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionIntervalNull {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionInterval {
            get {
                if ((curObj["RapidFailProtectionInterval"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionInterval"]));
            }
            set {
                curObj["RapidFailProtectionInterval"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRapidFailProtectionMaxCrashesNull {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RapidFailProtectionMaxCrashes {
            get {
                if ((curObj["RapidFailProtectionMaxCrashes"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RapidFailProtectionMaxCrashes"]));
            }
            set {
                curObj["RapidFailProtectionMaxCrashes"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string Realm {
            get {
                return ((string)(curObj["Realm"]));
            }
            set {
                curObj["Realm"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string[] RedirectHeaders {
            get {
                return ((string[])(curObj["RedirectHeaders"]));
            }
            set {
                curObj["RedirectHeaders"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRevocationFreshnessTimeNull {
            get {
                if ((curObj["RevocationFreshnessTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RevocationFreshnessTime {
            get {
                if ((curObj["RevocationFreshnessTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RevocationFreshnessTime"]));
            }
            set {
                curObj["RevocationFreshnessTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsRevocationURLRetrievalTimeoutNull {
            get {
                if ((curObj["RevocationURLRetrievalTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int RevocationURLRetrievalTimeout {
            get {
                if ((curObj["RevocationURLRetrievalTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["RevocationURLRetrievalTimeout"]));
            }
            set {
                curObj["RevocationURLRetrievalTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ScriptMaps {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ScriptMaps"]));
            }
            set {
                curObj["ScriptMaps"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerAutoStartNull {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool ServerAutoStart {
            get {
                if ((curObj["ServerAutoStart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["ServerAutoStart"]));
            }
            set {
                curObj["ServerAutoStart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] ServerBindings {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["ServerBindings"]));
            }
            set {
                curObj["ServerBindings"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ServerComment {
            get {
                return ((string)(curObj["ServerComment"]));
            }
            set {
                curObj["ServerComment"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenBacklogNull {
            get {
                if ((curObj["ServerListenBacklog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenBacklog {
            get {
                if ((curObj["ServerListenBacklog"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenBacklog"]));
            }
            set {
                curObj["ServerListenBacklog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerListenTimeoutNull {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerListenTimeout {
            get {
                if ((curObj["ServerListenTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerListenTimeout"]));
            }
            set {
                curObj["ServerListenTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsServerSizeNull {
            get {
                if ((curObj["ServerSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ServerSize {
            get {
                if ((curObj["ServerSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ServerSize"]));
            }
            set {
                curObj["ServerSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SettingID {
            get {
                return ((string)(curObj["SettingID"]));
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsShutdownTimeLimitNull {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int ShutdownTimeLimit {
            get {
                if ((curObj["ShutdownTimeLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["ShutdownTimeLimit"]));
            }
            set {
                curObj["ShutdownTimeLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSSIExecDisableNull {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SSIExecDisable {
            get {
                if ((curObj["SSIExecDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SSIExecDisable"]));
            }
            set {
                curObj["SSIExecDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSSLAlwaysNegoClientCertNull {
            get {
                if ((curObj["SSLAlwaysNegoClientCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SSLAlwaysNegoClientCert {
            get {
                if ((curObj["SSLAlwaysNegoClientCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SSLAlwaysNegoClientCert"]));
            }
            set {
                curObj["SSLAlwaysNegoClientCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string SSLStoreName {
            get {
                return ((string)(curObj["SSLStoreName"]));
            }
            set {
                curObj["SSLStoreName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsSslUseDsMapperNull {
            get {
                if ((curObj["SslUseDsMapper"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool SslUseDsMapper {
            get {
                if ((curObj["SslUseDsMapper"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["SslUseDsMapper"]));
            }
            set {
                curObj["SslUseDsMapper"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUploadReadAheadSizeNull {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int UploadReadAheadSize {
            get {
                if ((curObj["UploadReadAheadSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["UploadReadAheadSize"]));
            }
            set {
                curObj["UploadReadAheadSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsUseDigestSSPNull {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool UseDigestSSP {
            get {
                if ((curObj["UseDigestSSP"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["UseDigestSSP"]));
            }
            set {
                curObj["UseDigestSSP"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserName {
            get {
                return ((string)(curObj["WAMUserName"]));
            }
            set {
                curObj["WAMUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string WAMUserPass {
            get {
                return ((string)(curObj["WAMUserPass"]));
            }
            set {
                curObj["WAMUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsWebDAVMaxAttributesPerElementNull {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int WebDAVMaxAttributesPerElement {
            get {
                if ((curObj["WebDAVMaxAttributesPerElement"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["WebDAVMaxAttributesPerElement"]));
            }
            set {
                curObj["WebDAVMaxAttributesPerElement"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject[] WebSvcExtRestrictionList {
            get {
                return ((System.Management.ManagementBaseObject[])(curObj["WebSvcExtRestrictionList"]));
            }
            set {
                curObj["WebSvcExtRestrictionList"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions OptionsParam) {
            if (((path != null) 
                        && (System.String.Compare(path.ClassName, ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                return CheckIfProperClass(new System.Management.ManagementObject(mgmtScope, path, OptionsParam));
            }
        }
        
        private bool CheckIfProperClass(System.Management.ManagementBaseObject theObj) {
            if (((theObj != null) 
                        && (System.String.Compare(((string)(theObj["__CLASS"])), ManagementClassName, true, CultureInfo.InvariantCulture) == 0))) {
                return true;
            }
            else {
                System.Array parentClasses = ((System.Array)(theObj["__DERIVATION"]));
                if ((parentClasses != null)) {
                    Int32 count = 0;
                    for (count = 0; (count < parentClasses.Length); count = (count + 1)) {
                        if ((System.String.Compare(((string)(parentClasses.GetValue(count))), ManagementClassName, true, CultureInfo.InvariantCulture) == 0)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        
        private bool ShouldSerializeAccessExecute() {
            if ((IsAccessExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessExecute() {
            curObj["AccessExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessFlags() {
            if ((IsAccessFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessFlags() {
            curObj["AccessFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoPhysicalDir() {
            if ((IsAccessNoPhysicalDirNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoPhysicalDir() {
            curObj["AccessNoPhysicalDir"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteExecute() {
            if ((IsAccessNoRemoteExecuteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteExecute() {
            curObj["AccessNoRemoteExecute"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteRead() {
            if ((IsAccessNoRemoteReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteRead() {
            curObj["AccessNoRemoteRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteScript() {
            if ((IsAccessNoRemoteScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteScript() {
            curObj["AccessNoRemoteScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessNoRemoteWrite() {
            if ((IsAccessNoRemoteWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessNoRemoteWrite() {
            curObj["AccessNoRemoteWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessRead() {
            if ((IsAccessReadNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessRead() {
            curObj["AccessRead"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessScript() {
            if ((IsAccessScriptNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessScript() {
            curObj["AccessScript"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSource() {
            if ((IsAccessSourceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSource() {
            curObj["AccessSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL() {
            if ((IsAccessSSLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL() {
            curObj["AccessSSL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSL128() {
            if ((IsAccessSSL128Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSL128() {
            curObj["AccessSSL128"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLFlags() {
            if ((IsAccessSSLFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLFlags() {
            curObj["AccessSSLFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLMapCert() {
            if ((IsAccessSSLMapCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLMapCert() {
            curObj["AccessSSLMapCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLNegotiateCert() {
            if ((IsAccessSSLNegotiateCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLNegotiateCert() {
            curObj["AccessSSLNegotiateCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessSSLRequireCert() {
            if ((IsAccessSSLRequireCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessSSLRequireCert() {
            curObj["AccessSSLRequireCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAccessWrite() {
            if ((IsAccessWriteNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAccessWrite() {
            curObj["AccessWrite"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminACLBin() {
            curObj["AdminACLBin"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAdminServer() {
            curObj["AdminServer"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAllowKeepAlive() {
            if ((IsAllowKeepAliveNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAllowKeepAlive() {
            curObj["AllowKeepAlive"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAllowPathInfoForScriptMappings() {
            if ((IsAllowPathInfoForScriptMappingsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAllowPathInfoForScriptMappings() {
            curObj["AllowPathInfoForScriptMappings"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAnonymousPasswordSync() {
            if ((IsAnonymousPasswordSyncNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAnonymousPasswordSync() {
            curObj["AnonymousPasswordSync"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserName() {
            curObj["AnonymousUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAnonymousUserPass() {
            curObj["AnonymousUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowClientDebug() {
            if ((IsAppAllowClientDebugNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowClientDebug() {
            curObj["AppAllowClientDebug"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAppAllowDebugging() {
            if ((IsAppAllowDebuggingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAppAllowDebugging() {
            curObj["AppAllowDebugging"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppFriendlyName() {
            curObj["AppFriendlyName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetApplicationDependencies() {
            curObj["ApplicationDependencies"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppPoolId() {
            curObj["AppPoolId"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAppWamClsid() {
            curObj["AppWamClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowOutOfProcComponents() {
            if ((IsAspAllowOutOfProcComponentsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowOutOfProcComponents() {
            curObj["AspAllowOutOfProcComponents"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAllowSessionState() {
            if ((IsAspAllowSessionStateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAllowSessionState() {
            curObj["AspAllowSessionState"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspAppServiceFlags() {
            if ((IsAspAppServiceFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspAppServiceFlags() {
            curObj["AspAppServiceFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingLimit() {
            if ((IsAspBufferingLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingLimit() {
            curObj["AspBufferingLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspBufferingOn() {
            if ((IsAspBufferingOnNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspBufferingOn() {
            curObj["AspBufferingOn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCalcLineNumber() {
            if ((IsAspCalcLineNumberNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCalcLineNumber() {
            curObj["AspCalcLineNumber"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspCodepage() {
            if ((IsAspCodepageNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspCodepage() {
            curObj["AspCodepage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspDiskTemplateCacheDirectory() {
            curObj["AspDiskTemplateCacheDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableApplicationRestart() {
            if ((IsAspEnableApplicationRestartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableApplicationRestart() {
            curObj["AspEnableApplicationRestart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableAspHtmlFallback() {
            if ((IsAspEnableAspHtmlFallbackNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableAspHtmlFallback() {
            curObj["AspEnableAspHtmlFallback"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableChunkedEncoding() {
            if ((IsAspEnableChunkedEncodingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableChunkedEncoding() {
            curObj["AspEnableChunkedEncoding"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableParentPaths() {
            if ((IsAspEnableParentPathsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableParentPaths() {
            curObj["AspEnableParentPaths"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableSxs() {
            if ((IsAspEnableSxsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableSxs() {
            curObj["AspEnableSxs"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTracker() {
            if ((IsAspEnableTrackerNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTracker() {
            curObj["AspEnableTracker"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspEnableTypelibCache() {
            if ((IsAspEnableTypelibCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspEnableTypelibCache() {
            curObj["AspEnableTypelibCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspErrorsToNTLog() {
            if ((IsAspErrorsToNTLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspErrorsToNTLog() {
            curObj["AspErrorsToNTLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExceptionCatchEnable() {
            if ((IsAspExceptionCatchEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExceptionCatchEnable() {
            curObj["AspExceptionCatchEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspExecuteInMTA() {
            if ((IsAspExecuteInMTANull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspExecuteInMTA() {
            curObj["AspExecuteInMTA"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspKeepSessionIDSecure() {
            if ((IsAspKeepSessionIDSecureNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspKeepSessionIDSecure() {
            curObj["AspKeepSessionIDSecure"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLCID() {
            if ((IsAspLCIDNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLCID() {
            curObj["AspLCID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspLogErrorRequests() {
            if ((IsAspLogErrorRequestsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspLogErrorRequests() {
            curObj["AspLogErrorRequests"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxDiskTemplateCacheFiles() {
            if ((IsAspMaxDiskTemplateCacheFilesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxDiskTemplateCacheFiles() {
            curObj["AspMaxDiskTemplateCacheFiles"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspMaxRequestEntityAllowed() {
            if ((IsAspMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspMaxRequestEntityAllowed() {
            curObj["AspMaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspPartitionID() {
            curObj["AspPartitionID"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspProcessorThreadMax() {
            if ((IsAspProcessorThreadMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspProcessorThreadMax() {
            curObj["AspProcessorThreadMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueConnectionTestTime() {
            if ((IsAspQueueConnectionTestTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueConnectionTestTime() {
            curObj["AspQueueConnectionTestTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspQueueTimeout() {
            if ((IsAspQueueTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspQueueTimeout() {
            curObj["AspQueueTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRequestQueueMax() {
            if ((IsAspRequestQueueMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRequestQueueMax() {
            curObj["AspRequestQueueMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspRunOnEndAnonymously() {
            if ((IsAspRunOnEndAnonymouslyNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspRunOnEndAnonymously() {
            curObj["AspRunOnEndAnonymously"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptEngineCacheMax() {
            if ((IsAspScriptEngineCacheMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptEngineCacheMax() {
            curObj["AspScriptEngineCacheMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptErrorMessage() {
            curObj["AspScriptErrorMessage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptErrorSentToBrowser() {
            if ((IsAspScriptErrorSentToBrowserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptErrorSentToBrowser() {
            curObj["AspScriptErrorSentToBrowser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptFileCacheSize() {
            if ((IsAspScriptFileCacheSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptFileCacheSize() {
            curObj["AspScriptFileCacheSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspScriptLanguage() {
            curObj["AspScriptLanguage"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspScriptTimeout() {
            if ((IsAspScriptTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspScriptTimeout() {
            curObj["AspScriptTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionMax() {
            if ((IsAspSessionMaxNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionMax() {
            curObj["AspSessionMax"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspSessionTimeout() {
            if ((IsAspSessionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspSessionTimeout() {
            curObj["AspSessionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAspSxsName() {
            curObj["AspSxsName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspTrackThreadingModel() {
            if ((IsAspTrackThreadingModelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspTrackThreadingModel() {
            curObj["AspTrackThreadingModel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAspUsePartition() {
            if ((IsAspUsePartitionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAspUsePartition() {
            curObj["AspUsePartition"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAdvNotifyDisable() {
            if ((IsAuthAdvNotifyDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAdvNotifyDisable() {
            curObj["AuthAdvNotifyDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthAnonymous() {
            if ((IsAuthAnonymousNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthAnonymous() {
            curObj["AuthAnonymous"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthBasic() {
            if ((IsAuthBasicNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthBasic() {
            curObj["AuthBasic"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthChangeDisable() {
            if ((IsAuthChangeDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthChangeDisable() {
            curObj["AuthChangeDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthChangeUnsecure() {
            if ((IsAuthChangeUnsecureNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthChangeUnsecure() {
            curObj["AuthChangeUnsecure"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAuthChangeURL() {
            curObj["AuthChangeURL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAuthExpiredUnsecureURL() {
            curObj["AuthExpiredUnsecureURL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAuthExpiredURL() {
            curObj["AuthExpiredURL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthFlags() {
            if ((IsAuthFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthFlags() {
            curObj["AuthFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthMD5() {
            if ((IsAuthMD5Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthMD5() {
            curObj["AuthMD5"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAuthNotifyPwdExpUnsecureURL() {
            curObj["AuthNotifyPwdExpUnsecureURL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAuthNotifyPwdExpURL() {
            curObj["AuthNotifyPwdExpURL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthNTLM() {
            if ((IsAuthNTLMNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthNTLM() {
            curObj["AuthNTLM"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPassport() {
            if ((IsAuthPassportNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPassport() {
            curObj["AuthPassport"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistence() {
            if ((IsAuthPersistenceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistence() {
            curObj["AuthPersistence"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAuthPersistSingleRequest() {
            if ((IsAuthPersistSingleRequestNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAuthPersistSingleRequest() {
            curObj["AuthPersistSingleRequest"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzEnable() {
            if ((IsAzEnableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzEnable() {
            curObj["AzEnable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeAzImpersonationLevel() {
            if ((IsAzImpersonationLevelNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetAzImpersonationLevel() {
            curObj["AzImpersonationLevel"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzScopeName() {
            curObj["AzScopeName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetAzStoreName() {
            curObj["AzStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetCacheControlCustom() {
            curObj["CacheControlCustom"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlMaxAge() {
            if ((IsCacheControlMaxAgeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlMaxAge() {
            curObj["CacheControlMaxAge"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheControlNoCache() {
            if ((IsCacheControlNoCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheControlNoCache() {
            curObj["CacheControlNoCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCacheISAPI() {
            if ((IsCacheISAPINull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCacheISAPI() {
            curObj["CacheISAPI"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCentralBinaryLoggingEnabled() {
            if ((IsCentralBinaryLoggingEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCentralBinaryLoggingEnabled() {
            curObj["CentralBinaryLoggingEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCertCheckMode() {
            if ((IsCertCheckModeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCertCheckMode() {
            curObj["CertCheckMode"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCGITimeout() {
            if ((IsCGITimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCGITimeout() {
            curObj["CGITimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeConnectionTimeout() {
            if ((IsConnectionTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetConnectionTimeout() {
            curObj["ConnectionTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeContentIndexed() {
            if ((IsContentIndexedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetContentIndexed() {
            curObj["ContentIndexed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateCGIWithNewConsole() {
            if ((IsCreateCGIWithNewConsoleNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateCGIWithNewConsole() {
            curObj["CreateCGIWithNewConsole"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeCreateProcessAsUser() {
            if ((IsCreateProcessAsUserNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetCreateProcessAsUser() {
            curObj["CreateProcessAsUser"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDoc() {
            curObj["DefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultDocFooter() {
            curObj["DefaultDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetDefaultLogonDomain() {
            curObj["DefaultLogonDomain"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDemandStartThreshold() {
            if ((IsDemandStartThresholdNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDemandStartThreshold() {
            curObj["DemandStartThreshold"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseFlags() {
            if ((IsDirBrowseFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseFlags() {
            curObj["DirBrowseFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowDate() {
            if ((IsDirBrowseShowDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowDate() {
            curObj["DirBrowseShowDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowExtension() {
            if ((IsDirBrowseShowExtensionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowExtension() {
            curObj["DirBrowseShowExtension"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowLongDate() {
            if ((IsDirBrowseShowLongDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowLongDate() {
            curObj["DirBrowseShowLongDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowSize() {
            if ((IsDirBrowseShowSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowSize() {
            curObj["DirBrowseShowSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirBrowseShowTime() {
            if ((IsDirBrowseShowTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirBrowseShowTime() {
            curObj["DirBrowseShowTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDirectoryLevelsToScan() {
            if ((IsDirectoryLevelsToScanNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDirectoryLevelsToScan() {
            curObj["DirectoryLevelsToScan"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableSocketPooling() {
            if ((IsDisableSocketPoolingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableSocketPooling() {
            curObj["DisableSocketPooling"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDisableStaticFileCache() {
            if ((IsDisableStaticFileCacheNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDisableStaticFileCache() {
            curObj["DisableStaticFileCache"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoDynamicCompression() {
            if ((IsDoDynamicCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoDynamicCompression() {
            curObj["DoDynamicCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDontLog() {
            if ((IsDontLogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDontLog() {
            curObj["DontLog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDoStaticCompression() {
            if ((IsDoStaticCompressionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDoStaticCompression() {
            curObj["DoStaticCompression"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeDownlevelAdminInstance() {
            if ((IsDownlevelAdminInstanceNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetDownlevelAdminInstance() {
            curObj["DownlevelAdminInstance"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDefaultDoc() {
            if ((IsEnableDefaultDocNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDefaultDoc() {
            curObj["EnableDefaultDoc"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDirBrowsing() {
            if ((IsEnableDirBrowsingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDirBrowsing() {
            curObj["EnableDirBrowsing"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableDocFooter() {
            if ((IsEnableDocFooterNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableDocFooter() {
            curObj["EnableDocFooter"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeEnableReverseDns() {
            if ((IsEnableReverseDnsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetEnableReverseDns() {
            curObj["EnableReverseDns"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeHeaderWaitTimeout() {
            if ((IsHeaderWaitTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetHeaderWaitTimeout() {
            curObj["HeaderWaitTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpCustomHeaders() {
            curObj["HttpCustomHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpErrors() {
            curObj["HttpErrors"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpExpires() {
            curObj["HttpExpires"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetHttpPics() {
            curObj["HttpPics"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeIIs5IsolationModeEnabled() {
            if ((IsIIs5IsolationModeEnabledNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetIIs5IsolationModeEnabled() {
            curObj["IIs5IsolationModeEnabled"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetInProcessIsapiApps() {
            curObj["InProcessIsapiApps"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesRecv() {
            if ((IsLogExtFileBytesRecvNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesRecv() {
            curObj["LogExtFileBytesRecv"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileBytesSent() {
            if ((IsLogExtFileBytesSentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileBytesSent() {
            curObj["LogExtFileBytesSent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileClientIp() {
            if ((IsLogExtFileClientIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileClientIp() {
            curObj["LogExtFileClientIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileComputerName() {
            if ((IsLogExtFileComputerNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileComputerName() {
            curObj["LogExtFileComputerName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileCookie() {
            if ((IsLogExtFileCookieNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileCookie() {
            curObj["LogExtFileCookie"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileDate() {
            if ((IsLogExtFileDateNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileDate() {
            curObj["LogExtFileDate"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileFlags() {
            if ((IsLogExtFileFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileFlags() {
            curObj["LogExtFileFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHost() {
            if ((IsLogExtFileHostNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHost() {
            curObj["LogExtFileHost"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpStatus() {
            if ((IsLogExtFileHttpStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpStatus() {
            curObj["LogExtFileHttpStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileHttpSubStatus() {
            if ((IsLogExtFileHttpSubStatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileHttpSubStatus() {
            curObj["LogExtFileHttpSubStatus"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileMethod() {
            if ((IsLogExtFileMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileMethod() {
            curObj["LogExtFileMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileProtocolVersion() {
            if ((IsLogExtFileProtocolVersionNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileProtocolVersion() {
            curObj["LogExtFileProtocolVersion"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileReferer() {
            if ((IsLogExtFileRefererNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileReferer() {
            curObj["LogExtFileReferer"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerIp() {
            if ((IsLogExtFileServerIpNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerIp() {
            curObj["LogExtFileServerIp"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileServerPort() {
            if ((IsLogExtFileServerPortNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileServerPort() {
            curObj["LogExtFileServerPort"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileSiteName() {
            if ((IsLogExtFileSiteNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileSiteName() {
            curObj["LogExtFileSiteName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTime() {
            if ((IsLogExtFileTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTime() {
            curObj["LogExtFileTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileTimeTaken() {
            if ((IsLogExtFileTimeTakenNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileTimeTaken() {
            curObj["LogExtFileTimeTaken"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriQuery() {
            if ((IsLogExtFileUriQueryNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriQuery() {
            curObj["LogExtFileUriQuery"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUriStem() {
            if ((IsLogExtFileUriStemNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUriStem() {
            curObj["LogExtFileUriStem"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserAgent() {
            if ((IsLogExtFileUserAgentNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserAgent() {
            curObj["LogExtFileUserAgent"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileUserName() {
            if ((IsLogExtFileUserNameNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileUserName() {
            curObj["LogExtFileUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogExtFileWin32Status() {
            if ((IsLogExtFileWin32StatusNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogExtFileWin32Status() {
            curObj["LogExtFileWin32Status"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogFileDirectory() {
            curObj["LogFileDirectory"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFileLocaltimeRollover() {
            if ((IsLogFileLocaltimeRolloverNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFileLocaltimeRollover() {
            curObj["LogFileLocaltimeRollover"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFilePeriod() {
            if ((IsLogFilePeriodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFilePeriod() {
            curObj["LogFilePeriod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogFileTruncateSize() {
            if ((IsLogFileTruncateSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogFileTruncateSize() {
            curObj["LogFileTruncateSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogInUTF8() {
            if ((IsLogInUTF8Null == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogInUTF8() {
            curObj["LogInUTF8"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogModuleList() {
            curObj["LogModuleList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcDataSource() {
            curObj["LogOdbcDataSource"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcPassword() {
            curObj["LogOdbcPassword"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcTableName() {
            curObj["LogOdbcTableName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogOdbcUserName() {
            curObj["LogOdbcUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogonMethod() {
            if ((IsLogonMethodNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogonMethod() {
            curObj["LogonMethod"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetLogPluginClsid() {
            curObj["LogPluginClsid"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeLogType() {
            if ((IsLogTypeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetLogType() {
            curObj["LogType"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxBandwidth() {
            if ((IsMaxBandwidthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxBandwidth() {
            curObj["MaxBandwidth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxConnections() {
            if ((IsMaxConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxConnections() {
            curObj["MaxConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxEndpointConnections() {
            if ((IsMaxEndpointConnectionsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxEndpointConnections() {
            curObj["MaxEndpointConnections"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxGlobalBandwidth() {
            if ((IsMaxGlobalBandwidthNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxGlobalBandwidth() {
            curObj["MaxGlobalBandwidth"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMaxRequestEntityAllowed() {
            if ((IsMaxRequestEntityAllowedNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMaxRequestEntityAllowed() {
            curObj["MaxRequestEntityAllowed"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetMimeMap() {
            curObj["MimeMap"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeMinFileBytesPerSec() {
            if ((IsMinFileBytesPerSecNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetMinFileBytesPerSec() {
            curObj["MinFileBytesPerSec"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetNTAuthenticationProviders() {
            curObj["NTAuthenticationProviders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePassportRequireADMapping() {
            if ((IsPassportRequireADMappingNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPassportRequireADMapping() {
            curObj["PassportRequireADMapping"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePasswordCacheTTL() {
            if ((IsPasswordCacheTTLNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPasswordCacheTTL() {
            curObj["PasswordCacheTTL"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePasswordChangeFlags() {
            if ((IsPasswordChangeFlagsNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPasswordChangeFlags() {
            curObj["PasswordChangeFlags"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePasswordExpirePrenotifyDays() {
            if ((IsPasswordExpirePrenotifyDaysNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPasswordExpirePrenotifyDays() {
            curObj["PasswordExpirePrenotifyDays"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializePoolIdcTimeout() {
            if ((IsPoolIdcTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetPoolIdcTimeout() {
            curObj["PoolIdcTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeProcessNTCRIfLoggedOn() {
            if ((IsProcessNTCRIfLoggedOnNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetProcessNTCRIfLoggedOn() {
            curObj["ProcessNTCRIfLoggedOn"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionInterval() {
            if ((IsRapidFailProtectionIntervalNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionInterval() {
            curObj["RapidFailProtectionInterval"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRapidFailProtectionMaxCrashes() {
            if ((IsRapidFailProtectionMaxCrashesNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRapidFailProtectionMaxCrashes() {
            curObj["RapidFailProtectionMaxCrashes"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRealm() {
            curObj["Realm"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetRedirectHeaders() {
            curObj["RedirectHeaders"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRevocationFreshnessTime() {
            if ((IsRevocationFreshnessTimeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRevocationFreshnessTime() {
            curObj["RevocationFreshnessTime"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeRevocationURLRetrievalTimeout() {
            if ((IsRevocationURLRetrievalTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetRevocationURLRetrievalTimeout() {
            curObj["RevocationURLRetrievalTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetScriptMaps() {
            curObj["ScriptMaps"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerAutoStart() {
            if ((IsServerAutoStartNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerAutoStart() {
            curObj["ServerAutoStart"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerBindings() {
            curObj["ServerBindings"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetServerComment() {
            curObj["ServerComment"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenBacklog() {
            if ((IsServerListenBacklogNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenBacklog() {
            curObj["ServerListenBacklog"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerListenTimeout() {
            if ((IsServerListenTimeoutNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerListenTimeout() {
            curObj["ServerListenTimeout"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeServerSize() {
            if ((IsServerSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetServerSize() {
            curObj["ServerSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeShutdownTimeLimit() {
            if ((IsShutdownTimeLimitNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetShutdownTimeLimit() {
            curObj["ShutdownTimeLimit"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSSIExecDisable() {
            if ((IsSSIExecDisableNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSSIExecDisable() {
            curObj["SSIExecDisable"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSSLAlwaysNegoClientCert() {
            if ((IsSSLAlwaysNegoClientCertNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSSLAlwaysNegoClientCert() {
            curObj["SSLAlwaysNegoClientCert"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetSSLStoreName() {
            curObj["SSLStoreName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeSslUseDsMapper() {
            if ((IsSslUseDsMapperNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetSslUseDsMapper() {
            curObj["SslUseDsMapper"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUploadReadAheadSize() {
            if ((IsUploadReadAheadSizeNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUploadReadAheadSize() {
            curObj["UploadReadAheadSize"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeUseDigestSSP() {
            if ((IsUseDigestSSPNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetUseDigestSSP() {
            curObj["UseDigestSSP"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserName() {
            curObj["WAMUserName"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWAMUserPass() {
            curObj["WAMUserPass"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private bool ShouldSerializeWebDAVMaxAttributesPerElement() {
            if ((IsWebDAVMaxAttributesPerElementNull == false)) {
                return true;
            }
            return false;
        }
        
        private void ResetWebDAVMaxAttributesPerElement() {
            curObj["WebDAVMaxAttributesPerElement"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private void ResetWebSvcExtRestrictionList() {
            curObj["WebSvcExtRestrictionList"] = null;
            if (((isEmbedded == false) 
                        && (AutoCommitProp == true))) {
                PrivateLateBoundObject.Put();
            }
        }
        
        [Browsable(true)]
        public void CommitObject() {
            if ((isEmbedded == false)) {
                PrivateLateBoundObject.Put();
            }
        }
        
        private static string ConstructPath(string keyName) {
            string strPath = "ROOT\\MicrosoftIISv2:IIsWebServiceSetting";
            strPath = (strPath 
                        + (".Name=" 
                        + ("\"" 
                        + (keyName + "\""))));
            return strPath;
        }
        
        // Different overloads of GetInstances() help in enumerating instances of the WMI class.
        public static IIsWebServiceSettingCollection GetInstances() {
            return GetInstances(((System.Management.ManagementScope)(null)), ((System.Management.EnumerationOptions)(null)));
        }
        
        public static IIsWebServiceSettingCollection GetInstances(string condition) {
            return GetInstances(null, condition, null);
        }
        
        public static IIsWebServiceSettingCollection GetInstances(System.String [] selectedProperties) {
            return GetInstances(null, null, selectedProperties);
        }
        
        public static IIsWebServiceSettingCollection GetInstances(string condition, System.String [] selectedProperties) {
            return GetInstances(null, condition, selectedProperties);
        }
        
        public static IIsWebServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.Management.EnumerationOptions enumOptions) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementPath pathObj = new System.Management.ManagementPath();
            pathObj.ClassName = "IIsWebServiceSetting";
            pathObj.NamespacePath = "root\\MicrosoftIISv2";
            System.Management.ManagementClass clsObject = new System.Management.ManagementClass(mgmtScope, pathObj, null);
            if ((enumOptions == null)) {
                enumOptions = new System.Management.EnumerationOptions();
                enumOptions.EnsureLocatable = true;
            }
            return new IIsWebServiceSettingCollection(clsObject.GetInstances(enumOptions));
        }
        
        public static IIsWebServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition) {
            return GetInstances(mgmtScope, condition, null);
        }
        
        public static IIsWebServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, System.String [] selectedProperties) {
            return GetInstances(mgmtScope, null, selectedProperties);
        }
        
        public static IIsWebServiceSettingCollection GetInstances(System.Management.ManagementScope mgmtScope, string condition, System.String [] selectedProperties) {
            if ((mgmtScope == null)) {
                if ((statMgmtScope == null)) {
                    mgmtScope = new System.Management.ManagementScope();
                    mgmtScope.Path.NamespacePath = "root\\MicrosoftIISv2";
                }
                else {
                    mgmtScope = statMgmtScope;
                }
            }
            System.Management.ManagementObjectSearcher ObjectSearcher = new System.Management.ManagementObjectSearcher(mgmtScope, new SelectQuery("IIsWebServiceSetting", condition, selectedProperties));
            System.Management.EnumerationOptions enumOptions = new System.Management.EnumerationOptions();
            enumOptions.EnsureLocatable = true;
            ObjectSearcher.Options = enumOptions;
            return new IIsWebServiceSettingCollection(ObjectSearcher.Get());
        }
        
        [Browsable(true)]
        public static IIsWebServiceSetting CreateInstance() {
            System.Management.ManagementScope mgmtScope = null;
            if ((statMgmtScope == null)) {
                mgmtScope = new System.Management.ManagementScope();
                mgmtScope.Path.NamespacePath = CreatedWmiNamespace;
            }
            else {
                mgmtScope = statMgmtScope;
            }
            System.Management.ManagementPath mgmtPath = new System.Management.ManagementPath(CreatedClassName);
            return new IIsWebServiceSetting(new System.Management.ManagementClass(mgmtScope, mgmtPath, null).CreateInstance());
        }
        
        [Browsable(true)]
        public void Delete() {
            PrivateLateBoundObject.Delete();
        }
        
        // Enumerator implementation for enumerating instances of the class.
        public class IIsWebServiceSettingCollection : object, ICollection {
            
            private ManagementObjectCollection ObjectCollection;
            
            public IIsWebServiceSettingCollection(ManagementObjectCollection objCollection) {
                ObjectCollection = objCollection;
            }
            
            public int Count {
                get {
                    return ObjectCollection.Count;
                }
            }
            
            public bool IsSynchronized {
                get {
                    return ObjectCollection.IsSynchronized;
                }
            }
            
            public object SyncRoot {
                get {
                    return this;
                }
            }
            
            public void CopyTo(System.Array array, int index) {
                ObjectCollection.CopyTo(array, index);
                int nCtr;
                for (nCtr = 0; (nCtr < array.Length); nCtr = (nCtr + 1)) {
                    array.SetValue(new IIsWebServiceSetting(((System.Management.ManagementObject)(array.GetValue(nCtr)))), nCtr);
                }
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return new IIsWebServiceSettingEnumerator(ObjectCollection.GetEnumerator());
            }
            
            public class IIsWebServiceSettingEnumerator : object, System.Collections.IEnumerator {
                
                private ManagementObjectCollection.ManagementObjectEnumerator ObjectEnumerator;
                
                public IIsWebServiceSettingEnumerator(ManagementObjectCollection.ManagementObjectEnumerator objEnum) {
                    ObjectEnumerator = objEnum;
                }
                
                public object Current {
                    get {
                        return new IIsWebServiceSetting(((System.Management.ManagementObject)(ObjectEnumerator.Current)));
                    }
                }
                
                public bool MoveNext() {
                    return ObjectEnumerator.MoveNext();
                }
                
                public void Reset() {
                    ObjectEnumerator.Reset();
                }
            }
        }
        
        // TypeConverter to handle null values for ValueType properties
        public class WMIValueTypeConverter : TypeConverter {
            
            private TypeConverter baseConverter;
            
            public WMIValueTypeConverter(System.Type baseType) {
                baseConverter = TypeDescriptor.GetConverter(baseType);
            }
            
            public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type srcType) {
                return baseConverter.CanConvertFrom(context, srcType);
            }
            
            public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType) {
                return baseConverter.CanConvertTo(context, destinationType);
            }
            
            public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value) {
                return baseConverter.ConvertFrom(context, culture, value);
            }
            
            public override object CreateInstance(System.ComponentModel.ITypeDescriptorContext context, System.Collections.IDictionary dictionary) {
                return baseConverter.CreateInstance(context, dictionary);
            }
            
            public override bool GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetCreateInstanceSupported(context);
            }
            
            public override PropertyDescriptorCollection GetProperties(System.ComponentModel.ITypeDescriptorContext context, object value, System.Attribute[] attributeVar) {
                return baseConverter.GetProperties(context, value, attributeVar);
            }
            
            public override bool GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetPropertiesSupported(context);
            }
            
            public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValues(context);
            }
            
            public override bool GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesExclusive(context);
            }
            
            public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context) {
                return baseConverter.GetStandardValuesSupported(context);
            }
            
            public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType) {
                if ((context != null)) {
                    if ((context.PropertyDescriptor.ShouldSerializeValue(context.Instance) == false)) {
                        return "";
                    }
                }
                return baseConverter.ConvertTo(context, culture, value, destinationType);
            }
        }
        
        // Embedded class to represent WMI system Properties.
        [TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]
        public class ManagementSystemProperties {
            
            private System.Management.ManagementBaseObject PrivateLateBoundObject;
            
            public ManagementSystemProperties(System.Management.ManagementBaseObject ManagedObject) {
                PrivateLateBoundObject = ManagedObject;
            }
            
            [Browsable(true)]
            public int GENUS {
                get {
                    return ((int)(PrivateLateBoundObject["__GENUS"]));
                }
            }
            
            [Browsable(true)]
            public string CLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__CLASS"]));
                }
            }
            
            [Browsable(true)]
            public string SUPERCLASS {
                get {
                    return ((string)(PrivateLateBoundObject["__SUPERCLASS"]));
                }
            }
            
            [Browsable(true)]
            public string DYNASTY {
                get {
                    return ((string)(PrivateLateBoundObject["__DYNASTY"]));
                }
            }
            
            [Browsable(true)]
            public string RELPATH {
                get {
                    return ((string)(PrivateLateBoundObject["__RELPATH"]));
                }
            }
            
            [Browsable(true)]
            public int PROPERTY_COUNT {
                get {
                    return ((int)(PrivateLateBoundObject["__PROPERTY_COUNT"]));
                }
            }
            
            [Browsable(true)]
            public string[] DERIVATION {
                get {
                    return ((string[])(PrivateLateBoundObject["__DERIVATION"]));
                }
            }
            
            [Browsable(true)]
            public string SERVER {
                get {
                    return ((string)(PrivateLateBoundObject["__SERVER"]));
                }
            }
            
            [Browsable(true)]
            public string NAMESPACE {
                get {
                    return ((string)(PrivateLateBoundObject["__NAMESPACE"]));
                }
            }
            
            [Browsable(true)]
            public string PATH {
                get {
                    return ((string)(PrivateLateBoundObject["__PATH"]));
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IManifestFactory.cs ===
/*******************************************************************
 *    FILE:         IManifestFactory.cs
 *
 *    DESCRIPTION:  IManifestFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IManifestFactory
    {
        // Methods
        BaseManifest CreateInstance();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IOracle.cs ===
/*******************************************************************
 *    FILE:         IOracle.cs
 *
 *    DESCRIPTION:  IOracle interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System.Collections.Generic;
using System.IO;

namespace xonline.tools.wstrunner.core
{
    public interface IOracle
    {
        void Refresh();
        bool IsManifestImported(string manifestName, string version);
        bool IsManifestImported(string manifestName);
        bool IsDeploymentImported(string deploymentName);
        FileInfo ExportDeployment(string deploymentName);
        IList<string> ManifestVersions(string manifestName);
        string GetVersionForDeployment(string DeploymentName);
        void AddManifestToHashTable(string manifestName, string manifestVersion);
        FileInfo ExportManifest(string manifestName, string version, bool ExportObjects, bool ExportGeneratedObjects);
        FileInfo ExportDeploymentStatus(string deploymentName, string outXmlPath, bool isVerbose);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IOracleFactory.cs ===
/*******************************************************************
 *    FILE:         IOracleFactory.cs
 *
 *    DESCRIPTION:  IOracleFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IOracleFactory
    {
        // Methods
        IOracle CreateInstance();
        IOracle CreateInstanceWithoutRefresh();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Globals.cs ===
/*******************************************************************
 *    FILE:         Account.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      01/29/2005      gamagev    Created
 *
 *    Copyright <cp> 2004 Microsoft Corporation.  All Rights Reserved.
 ********************************************************************
 */

using System;
using System.Diagnostics;
using System.Reflection;
using System.IO;

namespace xonline.tools.wstrunner.core
{
    public enum Action
    {
        InvalidAction,
        Install,
        SmartInstall,
        ReplaceTags,
        Help
    }

    /// <summary>
    /// Summary description for Globals.
    /// </summary>
    internal class Globals
    {
        internal static readonly string kWebstoreManifestXmlNamespace = "urn:WebstoreManifestSchema.xsd";
        internal static readonly string kWebstoreDeploymentXmlNamespace = "urn:WebstoreDeploymentSchema.xsd";

        internal static readonly string kAppXSDFileName = "Applications.xsd";
        internal static readonly string kPassportXMLNamespace = "urn:DMP.BackendSetup";

        FileInfo _applicationFile;
        readonly FileInfo _executableLocation;
        Action _action;
        string _labName;
        string _appName; // Hold the application name such as DMP, UserTransactions
        bool _skipOfflineDBs;
        bool _syncManifestHashbuckets;
        Version _version;
		
        public Globals()
        {
            // initilize globals to default values
            _action = Action.InvalidAction;
            _skipOfflineDBs = false;
            _syncManifestHashbuckets = false;
            _appName = "DMP"; // defaults to DMP

            Process process = Process.GetCurrentProcess();
            _executableLocation = new FileInfo(process.MainModule.FileName);
        }

        class InternalGlobal
        {
            InternalGlobal()
            {
            }

            internal static readonly Globals instance = new Globals();
        }

        internal static Action Action
        {
            get
            {
                return InternalGlobal.instance._action;
            }

            set
            {
                if (InternalGlobal.instance._action != Action.InvalidAction)
                {
                    throw new ArgumentException("Applications is already set");
                }
                else
                    InternalGlobal.instance._action = value;
            }
        }

        internal static FileInfo ApplicationFile
        {
            get
            {
                return InternalGlobal.instance._applicationFile;
            }

            set 
            {
                InternalGlobal.instance._applicationFile = value;

                if (!InternalGlobal.instance._applicationFile.Exists)
                {
                    throw new FileNotFoundException("Can not find application xml at path " + InternalGlobal.instance._applicationFile.FullName);
                }
            }
        }

        internal static FileInfo ExecutableLocation
        {
            get { return InternalGlobal.instance._executableLocation;}            
        }

        internal static string LabName
        {
            get { return InternalGlobal.instance._labName; }
            set { InternalGlobal.instance._labName = value; }
        }

        internal static string AppName
        {
            get { return InternalGlobal.instance._appName; }
            set { InternalGlobal.instance._appName = value; }
        }

        internal static bool SkipOfflineDBs
        {
            get { return InternalGlobal.instance._skipOfflineDBs; }
            set { InternalGlobal.instance._skipOfflineDBs = value; }
        }

        internal static bool SyncManifestHashbuckets
        {
            get { return InternalGlobal.instance._syncManifestHashbuckets; }
            set { InternalGlobal.instance._syncManifestHashbuckets = value; }
        }
        
        internal static Version Version
        {
            get 
            { 
                if (InternalGlobal.instance._version == null)
                {
                    Assembly assembly = Assembly.GetCallingAssembly();
                    AssemblyName assemblyName = assembly.GetName();

                    InternalGlobal.instance._version = assemblyName.Version;             
                }
                
                return InternalGlobal.instance._version;
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IDatabaseTemplateFactory.cs ===
/*******************************************************************
 *    FILE:         IDatabaseTemplateFactory.cs
 *
 *    DESCRIPTION:  IDatabaseTemplateFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IDatabaseTemplateFactory
    {
        // Methods
        BaseDatabaseTemplate CreateInstance();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IManifest.cs ===
/*******************************************************************
 *    FILE:         IManifest.cs
 *
 *    DESCRIPTION:  IManifest interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IManifest
    {
        // Properties
        string InXmlPath { get; set; }
        string ManifestName { get; set; }
        string ManifestVersion { get; set; }

        // Methods
        void Import();
        void Purge();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\Manifest.cs ===
/*******************************************************************
 *    FILE:         Manifest.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      04/08/2004      gamagev    Created
 *
 *    Copyright <cp> 2004 Microsoft Corporation.  All Rights Reserved.
 ********************************************************************
 */
using System;
using System.Xml;
using Microsoft.Webstore.Common;

namespace xonline.tools.wstrunner.core
{
    /// <summary>
    /// Summary description for Manifest.
    /// </summary>
    public class Manifest: ICloneable
    {
        private readonly IManifest _manifest;
        private readonly IOracle _oracle;
        private XmlDocument _manifestXml;
        private XmlNamespaceManager _nsManager;
        private readonly Log log = Log.GetInstance();
        private string _name;
        private string _version;
        private string _path;
        private readonly bool _isChanged = false;

        private Manifest(IManifest manifest, IOracle oracle)
        {
            _manifest = manifest;
            _oracle = oracle;
        }

        public Manifest(IManifest manifest, IOracle oracle, string path)
        {
            XmlNode node;
            _manifestXml = new XmlDocument();

            _manifest = manifest;
            _oracle = oracle;
            _path = path;

            _manifestXml.Load(_path);
            _nsManager = new XmlNamespaceManager(_manifestXml.NameTable);
            _nsManager.AddNamespace("wst", Globals.kWebstoreManifestXmlNamespace);

            node = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest", _nsManager);
            _name = node.Attributes["Name"].Value.Trim();

            node = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:Version", _nsManager);
            _version = node.InnerText.Trim();
        }

        public object Clone()
        {
            //clone everything but the tag list. We already did the tag
            // replacement so we dont need them any more.

            Manifest manifest = new Manifest(_manifest, _oracle);

            manifest._manifestXml = _manifestXml;
            manifest._nsManager = _nsManager;

            manifest._name = _name;
            manifest._version = _version;
            manifest._path = _path;
            
            return manifest;
        }
        
        public string Name{ get { return _name; } }

        public string Version{ get { return _version; } }
        
        public string Path{ get { return _path; } }

        public bool IsChanged{ get { return _isChanged; }}

        /// <summary>
        /// Imports current manifest into webstore
        /// </summary>
        public void Import()
        {
            if (_oracle.IsManifestImported(_name, _version))
            {
                log.WriteLine("Manifest {0} already imported with version {1}", _name, _version);
            }
            else
            {                
                log.WriteLine("Importing manifest {0} version {1} ", _name, _version);
                
                _manifest.InXmlPath = _path;

                try
                {
                    _manifest.Import();

                    // update the global list with the newer version
                    _oracle.AddManifestToHashTable(_name, _version);
                }
                catch (Exception e)
                {
                    log.WriteLine("Manifest import failed.  " + e.Message);
                    throw;
                }
                
                log.WriteLine("Done!");
            }
        }

        /// <summary>
        /// Purges the manifest with the current name from webstore
        /// </summary>
        public void Purge()
        {
            log.WriteLine("Purging manifest '{0}'",_name);

            _manifest.ManifestName = _name;
            _manifest.ManifestVersion = _version;
            _manifest.Purge();
        }

        public WstSecondaryType SecondaryType
        {
            get 
            {                
                XmlNode secondaryNode = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:Availability/wst:SqlSecondary/wst:SqlSecondaryType", _nsManager);
                
                return (WstSecondaryType)Enum.Parse(typeof(WstSecondaryType), secondaryNode.InnerText, true);
            }

        }

        public string NeedsReplicationColumn
        {
            get 
            {
                if (SecondaryType == WstSecondaryType.MultiMaster)
                {
                    XmlNode replColumnNode = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:Availability/wst:SqlSecondary/wst:Multimaster/wst:NeedsReplicationColumn", _nsManager);
                
                    if (replColumnNode != null)
                        return replColumnNode.InnerText;
                }
                
                return null;
            }
        }

        public WstPartitionType PartitionType
        {
            get 
            {
                XmlNode partitonTypeNode = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:ScaleOut/wst:PartitionType", _nsManager);
            
                return (WstPartitionType)Enum.Parse(typeof(WstPartitionType), partitonTypeNode.InnerText, true);
            }
        }
        
        public int DataPartitionCount
        {
            get 
            {
                //logical partitons only apply to "Fixed" partitioning type
                if (PartitionType != WstPartitionType.Fixed)
                    throw new ArgumentException("PartitionType is not \"Fixed\" and does not have a DataPartitionCount");

                XmlNode logicalPartitionCountNode = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:ScaleOut/wst:FixedPartitioning/wst:LogicalPartitionCount", _nsManager);
                
                return Convert.ToInt32(logicalPartitionCountNode.InnerText);
            }

            set
            {
                if (PartitionType != WstPartitionType.Fixed)
                    throw new ArgumentException("Can not set DataPartitionCount for non-fixed parition type");

                XmlNode logicalPartitionCountNode = _manifestXml.SelectSingleNode("//wst:Webstore/wst:Manifest/wst:ScaleOut/wst:FixedPartitioning/wst:LogicalPartitionCount", _nsManager);
                
                logicalPartitionCountNode.InnerText = value.ToString();
            
                Uri uri = new Uri(_manifestXml.BaseURI);

                _manifestXml.Save(uri.AbsolutePath);
            }
        }

        public string[] Jobs
        {
            get
            {
                XmlNodeList jobNodes = _manifestXml.SelectNodes("//wst:Webstore/wst:Manifest/wst:SqlObjects/wst:Jobs/wst:Job", _nsManager);

                string[] jobNames = new string[jobNodes.Count];

                for(int currentJob = 0; currentJob < jobNodes.Count; ++currentJob)
                {
                    XmlElement jobElement = (XmlElement) jobNodes[currentJob];

                    jobNames[currentJob] = jobElement.GetAttribute("Name"); 
                }

                return jobNames;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IFailSafeSetFactory.cs ===
/*******************************************************************
 *    FILE:         IFailSafeSetFactory.cs
 *
 *    DESCRIPTION:  IFailSafeSetFactory interface.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      4-18-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

namespace xonline.tools.wstrunner.core
{
    public interface IFailSafeSetFactory
    {
        // Methods
        BaseFailSafeSet CreateInstance();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IWstRunnerFactory.cs ===
namespace xonline.tools.wstrunner.core
{
    public interface IWstRunnerFactory
    {
        IWstRunner CreateInstance(
            string workingPath,
            string manifestFile,
            string deploymentFile);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\IWstRunner.cs ===
namespace xonline.tools.wstrunner.core
{
    public interface IWstRunner
    {
        #region Properties

        string WorkingPath { get; }
        string ManifestFile { get; }
        string DeploymentFile { get; }

        #endregion

        #region Methods

        void Setup(WstRunner.SetupAction sAction, bool isRollingUpgrade, bool replTearDown);
        void Remove(bool removeDatabase);
        void MarkNeedsRepair();
        void RepairwithOnlinePromote();

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\WmoDatabase.cs ===
/*******************************************************************
 *    FILE:         WmoDatabase.cs
 *
 *    DESCRIPTION:  IDatabase wrapper for WmoCommandDatabase class.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      5-1-2008   - Created 
 *
 *    Copyright <cp> 2008 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using Microsoft.Webstore.Common;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    public class WmoDatabaseFactory : IDatabaseFactory
    {
        public BaseDatabase CreateInstance()
        {
            return WmoDatabase.CreateInstance();
        }
    }
    
    public abstract class BaseDatabase : IDatabase
    {
        #region IDatabase Members

        public abstract string Server { get; set; }
        public abstract string Database { get; set; }

        public abstract void NeedsRepair();
        public abstract void Repair();
        public abstract void MarkOnline();
        public abstract void Promote();
        public abstract void Repair(bool isForce);

        #endregion
    }

    /// <summary>
    /// Wrap the WmoCommandDatabase class in a pass-through interface layer 
    /// for the purpose of mocking this in unit tests.
    /// </summary>
    public class WmoDatabase : BaseDatabase
    {
        private readonly WmoCommandDatabase wmoDatabase = new WmoCommandDatabase();
        private string server;
        private string database;
        private readonly Log log = Log.GetInstance();

        public static WmoDatabase CreateInstance()
        {
            return new WmoDatabase();
        }

        private WmoDatabase()
        {
            wmoDatabase.WmoStatusEvent += StatusEventHandler;
        }

        //  Properties

        //  Methods

        public void StatusEventHandler(Object sender, WmoStatusEventArgs eventArgs)
        {
            log.WriteLine(string.Format("{0}", eventArgs));
        }

        // IDatabase

        public override string Server
        {
            get
            {
                return server;
            }
            set
            {
                server = value;
            }
        }

        public override string Database
        {
            get
            {
                return database;
            }
            set
            {
                database = value;
            }
        }

        public override void NeedsRepair()
        {
           
                wmoDatabase.ServerName = server;
                wmoDatabase.DatabaseName = database;
                wmoDatabase.NeedsRepair();
           
        }
        public override void Repair(bool isForce)
        {
            wmoDatabase.ServerName = server;
            wmoDatabase.DatabaseName = database;
            wmoDatabase.IsForceRepair = isForce;
            wmoDatabase.Repair();
        }

        public override void Repair()
        {
            Repair(false);
        }



        public override void MarkOnline()
        {
            wmoDatabase.ServerName = server;
            wmoDatabase.DatabaseName = database;
            wmoDatabase.Online();
        }

        public override void Promote()
        {
            wmoDatabase.ServerName = server;
            wmoDatabase.DatabaseName = database;
            wmoDatabase.Promote();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\WmoDatabaseTemplate.cs ===
/*******************************************************************
 *    FILE:         WmoDatabaseTemplate.cs
 *
 *    DESCRIPTION:  IDatabaseTemplate wrapper for WmoCommandDatabaseTemplate class.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using Microsoft.Webstore.Common;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    public class WmoDatabaseTemplateFactory : IDatabaseTemplateFactory
    {
        public BaseDatabaseTemplate CreateInstance()
        {
            return WmoDatabaseTemplate.CreateInstance();
        }
    }
    
    public abstract class BaseDatabaseTemplate : IDatabaseTemplate
    {
        #region IDatabaseTemplate Members

        public abstract void Purge();

        #endregion
    }

    /// <summary>
    /// Wrap the WmoCommandDatabaseTemplate class in a pass-through interface layer 
    /// for the purpose of mocking this in unit tests.
    /// </summary>
    public class WmoDatabaseTemplate : BaseDatabaseTemplate
    {
        private readonly WmoCommandDatabaseTemplate wmoDatabaseTemplate = new WmoCommandDatabaseTemplate();
        private readonly Log log = Log.GetInstance();

        public static WmoDatabaseTemplate CreateInstance()
        {
            return new WmoDatabaseTemplate();
        }

        private WmoDatabaseTemplate()
        {
            wmoDatabaseTemplate.WmoStatusEvent += StatusEventHandler;
        }

        //  Properties

        //  Methods

        public void StatusEventHandler(Object sender, WmoStatusEventArgs eventArgs)
        {
            log.WriteLine(string.Format("{0}", eventArgs));
        }


        // IDatabaseTemplate

        public override void Purge()
        {
            wmoDatabaseTemplate.Purge();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\WmoDeployment.cs ===
/*******************************************************************
 *    FILE:         WmoDeployment.cs
 *
 *    DESCRIPTION:  IDeployment wrapper for WmoCommandDeployment class.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using Microsoft.Webstore.Common;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    public class WmoDeploymentFactory : IDeploymentFactory
    {
        public BaseDeployment CreateInstance()
        {
            return WmoDeployment.CreateInstance();
        }
    }
    
    public abstract class BaseDeployment : IDeployment
    {
        public abstract string InXmlPath { get; set; }
        public abstract string DeploymentName { get; set; }
        public abstract bool IsForce { get; set; }
        public abstract bool IsRollingUpgrade { get; set; }
        public abstract bool IsReplTearDown { get; set; }
        public abstract string NewManifestVersion { get; set; }
        public abstract string OutXmlPath { get; set; }
        public abstract bool IsVerbose { get; set; }
        public abstract void Import();
        public abstract void Setup();
        public abstract void Upgrade();
        public abstract void UpdateVersion();
        public abstract void Drop();
        public abstract void Status();
    }

    /// <summary>
    /// Wrap the WmoCommandDeployment class in a pass-through interface layer 
    /// for the purpose of mocking this in unit tests.
    /// </summary>
    public class WmoDeployment : BaseDeployment
    {
        private readonly WmoCommandDeployment wmoDeployment = new WmoCommandDeployment();
        private readonly Log log = Log.GetInstance();

        public static BaseDeployment CreateInstance()
        {
            return new WmoDeployment();
        }

        private WmoDeployment()
        {
            wmoDeployment.WmoStatusEvent += StatusEventHandler;
        }

        //  Properties
        public override string InXmlPath
        {
            get { return wmoDeployment.InXmlPath; }
            set { wmoDeployment.InXmlPath = value; }
        }

        public override string DeploymentName
        {
            get { return wmoDeployment.DeploymentName; }
            set { wmoDeployment.DeploymentName = value; }
        }

        public override bool IsForce
        {
            get { return wmoDeployment.IsForce; }
            set { wmoDeployment.IsForce = value; }
        }

        public override bool IsRollingUpgrade
        {
            get { return wmoDeployment.IsRollingUpgrade; }
            set { wmoDeployment.IsRollingUpgrade = value; }
        }

        public override bool IsReplTearDown
        {
            get { return wmoDeployment.IsReplTearDown; }
            set { wmoDeployment.IsReplTearDown = value; }
        }

        public override string NewManifestVersion
        {
            get { return wmoDeployment.NewManifestVersion; }
            set { wmoDeployment.NewManifestVersion = value; }
        }

        public override string OutXmlPath
        {
            get { return wmoDeployment.OutXmlPath; }
            set { wmoDeployment.OutXmlPath = value; }
        }

        public override bool IsVerbose
        {
            get { return wmoDeployment.IsVerbose; }
            set { wmoDeployment.IsVerbose = value; }
        }

        //  Methods

        public void StatusEventHandler(Object sender, WmoStatusEventArgs eventArgs)
        {
            log.WriteLine(string.Format("{0}", eventArgs));
        }

        // IDeployment

        public override void Import()
        {
            wmoDeployment.Import();
        }

        public override void Setup()
        {
            wmoDeployment.Setup();
        }

        public override void Upgrade()
        {
            wmoDeployment.Upgrade();
        }

        public override void UpdateVersion()
        {
            wmoDeployment.UpdateVersion();
        }

        public override void Drop()
        {
            wmoDeployment.Drop();
        }

        public override void Status()
        {
            wmoDeployment.Status();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\WmoManifest.cs ===
/*******************************************************************
 *    FILE:         WmoManifest.cs
 *
 *    DESCRIPTION:  IManifest wrapper for WmoCommandManifest class.
 *
 *    OWNER:        darrenan
 *
 *    HISTORY:      10-22-2007   - Created 
 *
 *    Copyright <cp> 2007 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using Microsoft.Webstore.Common;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    public class WmoManifestFactory : IManifestFactory
    {
        public BaseManifest CreateInstance()
        {
            return WmoManifest.CreateInstance();
        }
    }

    public abstract class BaseManifest : IManifest
    {
        public abstract string InXmlPath { get; set;}
        public abstract string ManifestName { get; set;}
        public abstract string ManifestVersion { get; set;}
        public abstract void Import();
        public abstract void Purge();
    }

    /// <summary>
    /// Wrap the WmoCommandManifest class in a pass-through interface layer for the purpose
    /// of mocking this in unit tests.
    /// </summary>
    public class WmoManifest : BaseManifest
    {
        private readonly WmoCommandManifest wmoManifest = new WmoCommandManifest();
        private readonly Log log = Log.GetInstance();

        public static BaseManifest CreateInstance()
        {
            return new WmoManifest();
        }

        private WmoManifest()
        {
            wmoManifest.WmoStatusEvent += StatusEventHandler;
        }

        // Properties
        public override string InXmlPath
        {
            get { return wmoManifest.InXmlPath; }
            set { wmoManifest.InXmlPath = value; }
        }

        public override string ManifestName
        {
            get { return wmoManifest.ManifestName; }
            set { wmoManifest.ManifestName = value; }
        }

        public override string ManifestVersion
        {
            get { return wmoManifest.ManifestVersion; }
            set { wmoManifest.ManifestVersion = value; }
        }

        // Methods
        public override void Import()
        {
            wmoManifest.Import();
        }

        public override void Purge()
        {
            wmoManifest.Purge();
        }

        public void StatusEventHandler(Object sender, WmoStatusEventArgs eventArgs)
        {
            log.WriteLine(string.Format("{0}", eventArgs));
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\WstRunner\WebstoreOracle.cs ===
/*******************************************************************
 *    FILE:         WebstoreOracle.cs
 *
 *    DESCRIPTION:  
 *
 *    OWNER:        gamagev
 *
 *    HISTORY:      1/15/2003   - Created 
 *
 *    Copyright <cp> 2003 Microsoft Corporation.  All Rights Reserved.
 *******************************************************************/

using System;
using System.IO;
using System.Xml;
using System.Collections.Generic;
using Microsoft.Webstore.Management.Wmo;

namespace xonline.tools.wstrunner.core
{
    public class WebstoreOracleFactory : IOracleFactory
    {
        public IOracle CreateInstance()
        {
            return WebstoreOracle.GetInstance();
        }

        public IOracle CreateInstanceWithoutRefresh()
        {
            return WebstoreOracle.GetInstanceWithoutRefresh();
        }
    }

    /// <summary>
    /// This class contains all the logic for connecting to Webstore and querying about the current configuration.
    /// </summary>
	public sealed class WebstoreOracle : IOracle
	{
        private SortedDictionary<string, SortedList<string, object> > _manifests;
        private SortedDictionary<string, string[]> _deployments;
     
        private WebstoreOracle()
        {
            Refresh();
        }  

        /// <summary>
        /// Thread safe singelton
        /// </summary>
        class Oracle
        {
            Oracle()
            {
            }
            internal static readonly WebstoreOracle instance = new WebstoreOracle();            
        }

        /// <summary>
        /// </summary>
        /// <returns>Pointer to the singleton WebstoreOracle object</returns>
        public static WebstoreOracle GetInstance()
        {
            Oracle.instance.Refresh();
            return Oracle.instance;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static WebstoreOracle GetInstanceWithoutRefresh()
        {
            return Oracle.instance;
        }

        /// <summary>
        /// Reloads all manifest and deployment information from the Webstore config server.
        /// </summary>
        public void Refresh()
        {
            WmoCommandManifest wmoManifest = new WmoCommandManifest();
            XmlDocument maniFestList = GetManifestListFromWebstore(wmoManifest);
            LoadHashTablesFromManifest(maniFestList);
        }

        private static XmlDocument GetManifestListFromWebstore(WmoCommandManifest wmoManifest)
        {
            Log log = Log.GetInstance();

            string tempFileName = Path.GetTempFileName();            

            wmoManifest.OutXmlPath = tempFileName;

            try
            {
                wmoManifest.List();
            }
            catch(Exception e)
            {                
                log.Error("\r\nError while getting manifest list from webstore\n\tDetail: {0}", e.Message);
                throw;
            }
            
            XmlDocument manifestList = new XmlDocument();

            try
            {
                manifestList.Load(tempFileName);
            }
            catch(XmlException e)
            {
                log.Error("\nError opening manifest list generated from webstore\nOutput XML at: {0}\n\tDetail: {1}", tempFileName, e.Message);
                throw;
            }

            return manifestList;
        }

        private void LoadHashTablesFromManifest(XmlDocument manifestList)
        {
            _manifests = new SortedDictionary<string, SortedList<string, object> >(StringComparer.InvariantCultureIgnoreCase);
            _deployments = new SortedDictionary<string, string[]>(StringComparer.InvariantCultureIgnoreCase);

            XmlNodeList manifestNodeList = manifestList.GetElementsByTagName("Manifest");
            
            foreach (XmlNode manifestNode in manifestNodeList)
            {                
                string manifestName = manifestNode.Attributes["Name"].Value;
                XmlElement versionElement = manifestNode["Version"];
                if(versionElement == null)
                {
                    throw new Exception("No <Version> found in manifest file.  This manifest is invalid.");
                }

                string manifestVersion = versionElement.InnerText;

                // add this manifest to the global list
                AddManifestToHashTable(manifestName, manifestVersion);
                                               
                XmlNodeList deploymentNodeList = manifestNode.SelectNodes("Deployments/Deployment");
                if(deploymentNodeList == null) continue;

                foreach (XmlNode deploymentNode in deploymentNodeList)
                {
                    string deploymentName = deploymentNode.InnerText;
              
                    // add it to the deplyment hastable
                    AddDeploymentToHashTable(deploymentName, manifestName, manifestVersion);
                }

            }
        }

        /// <summary>
        /// Adds a deployment to the internal container of deployemnts
        /// </summary>
        /// <param name="DeploymentName">Name of the deployment</param>
        /// <param name="manifestName">Name of the manifest refrenced in the deployemnt</param>
        /// <param name="manifestVersion">version of the manigest</param>
        public void AddDeploymentToHashTable(string DeploymentName, string manifestName, string manifestVersion)
        {
            if (!_deployments.ContainsKey(DeploymentName))
            {
                string[] ManifestNameVersion = new string[2];
                ManifestNameVersion[0] = manifestName;
                ManifestNameVersion[1] = manifestVersion;

                _deployments.Add(DeploymentName, ManifestNameVersion);
            }            
        }

        /// <summary>
        /// Adds a manifest to the internal container of manifests
        /// </summary>
        /// <param name="manifestName">Name of the manifest to be added</param>
        /// <param name="manifestVersion">version of the manifest</param>
        public void AddManifestToHashTable(string manifestName, string manifestVersion)
        {
            SortedList<string, object> versions;

            if (_manifests.ContainsKey(manifestName))
            {
                versions = _manifests[manifestName];
            }
            else
            {               
                versions = new SortedList<string, object>();

                _manifests.Add(manifestName, versions);
            }

            if (!versions.ContainsKey(manifestVersion))
            {
               versions.Add(manifestVersion, null);
            }
        }
        

        /// <summary>
        /// Checks the internal container of manifests to see if the given manifest and version 
        /// is already imported into Webstore
        /// </summary>
        /// <param name="manifestName">Name of the manieft to look up</param>
        /// <param name="version">version of the manifest to look up</param>
        /// <returns>Ture the manifest is already inported; False it is not imported</returns>
        public bool IsManifestImported(string manifestName, string version)
        {
            if(!_manifests.ContainsKey(manifestName))
            {
                return false;
            }

            SortedList<string, object> versions = _manifests[manifestName];

            return versions != null && versions.ContainsKey(version);
        }

        public bool IsManifestImported(string manifestName)
        {
            return _manifests.ContainsKey(manifestName);
        }

        public IList<string> ManifestVersions(string manifestName)
        {
            if(_manifests.ContainsKey(manifestName))
            {
                return _manifests[manifestName].Keys;
            }

            return null;
        }

        /// <summary>
        /// Check the internal container of deployments to see if the given deployment
        /// is already imported into Webstore
        /// </summary>
        /// <param name="DeploymentName">Name of the deployemt to check</param>
        /// <returns>True the deployment is already imported; False it is not</returns>
        public bool IsDeploymentImported(string DeploymentName)
        {
            return (_deployments.ContainsKey(DeploymentName));
        }

        /// <summary>
        /// Get the current manifest version for the given deployment
        /// </summary>
        /// <param name="DeploymentName">Name of the deployment to get the manifest version for</param>
        /// <returns>Manifest version number or Empty string if not found</returns>
        public string GetVersionForDeployment(string DeploymentName)
        {
            string[] ManifestNameVersion = _deployments[DeploymentName];

            return ManifestNameVersion != null ? ManifestNameVersion[1] : string.Empty;
        }

        /// <summary>
        /// Exports the named manifest and version number from the Webstore config DB
        /// </summary>
        /// <param name="manifestName">Name of the Manifest to export</param>
        /// <param name="version">Version of the Manifest to export</param>
        /// <param name="ExportObjects">If true all the Objects will be exported from Webstore and 
        /// placed in the same directory as the exported manifest</param>
        /// <param name="ExportGeneratedObjects">If true all the Webstore generated objects will be exported
        /// from Webstore and place in a sub directory of where the exported manifest is</param>
        /// <returns>FileInfo object pointing to the exported Manifest</returns>
        public FileInfo ExportManifest(string manifestName, string version, bool ExportObjects, bool ExportGeneratedObjects )
        {
            WmoCommandManifest wmomanifest = new WmoCommandManifest();
            Temp temp = new Temp(manifestName + "-" + version);
            string manifestFileName = temp.GetTempFileName("xml");

            wmomanifest.OutXmlPath = manifestFileName;
            wmomanifest.DoExportSource = ExportObjects;
            wmomanifest.DoExportGeneratedObjects = ExportGeneratedObjects;
            wmomanifest.ManifestName = manifestName;
            if (version != null)
                wmomanifest.ExportManifestVersion = version;

            wmomanifest.Export();

            return (new FileInfo(manifestFileName));
        }

        public FileInfo ExportManifest(string manifestName, bool ExportObjects, bool ExportGeneratedObjects )
        {           
            return ExportManifest(manifestName, null, ExportObjects, ExportGeneratedObjects);
        }
    
        public FileInfo ExportDeployment(string deploymentName)
        {
            if(!IsDeploymentImported(deploymentName))
            {
                return null;
            }

            Temp temp = new Temp("ExportedDeployments");
            string deploymentFileName = temp.GetTempFileName(deploymentName, "xml");

            WmoCommandDeployment wmoDeployment = new WmoCommandDeployment();
            wmoDeployment.DeploymentName = deploymentName;
            wmoDeployment.OutXmlPath = deploymentFileName;

            wmoDeployment.Export();

            return (new FileInfo(deploymentFileName));
        }

        /// <summary>
        /// Exports the named deployment status xml from Webstore config DB
        /// </summary>
        /// <param name="deployment">Name of the deployment to export</param>
        /// <param name="outXmlPath">path for export</param>
        /// <param name="isVerbose">true or false for verbose</param>
        /// <returns>FileInfo object pointing to the exported xml file</returns>
        public FileInfo ExportDeploymentStatus(string deploymentName, string outXmlPath, bool isVerbose)
        {
            WmoCommandDeployment wmodeployment = new WmoCommandDeployment();

            wmodeployment.OutXmlPath        = outXmlPath;
            wmodeployment.DeploymentName    = deploymentName;
            wmodeployment.IsVerbose         = isVerbose;

            wmodeployment.Status();

            return (new FileInfo(outXmlPath));
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\product\Source\tools\setup\Wmi\iisv2\IIsWebServerSetting.CS ===
﻿namespace Leet.Tools.Setup.Wmi.Iisv2 {
    using System;
    using System.ComponentModel;
    using System.Management;
    using System.Collections;
    using System.Globalization;
    using System.ComponentModel.Design.Serialization;
    using System.Reflection;
    
    
    // Functions ShouldSerialize<PropertyName> are functions used by VS property browser to check if a particular property has to be serialized. These functions are added for all ValueType properties ( properties of type Int32, BOOL etc.. which cannot be set to null). These functions use Is<PropertyName>Null function. These functions are also used in the TypeConverter implementation for the properties to check for NULL value of property so that an empty value can be shown in Property browser in case of Drag and Drop in Visual studio.
    // Functions Is<PropertyName>Null() are used to check if a property is NULL.
    // Functions Reset<PropertyName> are added for Nullable Read/Write properties. These functions are used by VS designer in property browser to set a property to NULL.
    // Every property added to the class for WMI property has attributes set to define its behavior in Visual Studio designer and also to define a TypeConverter to be used.
    // 
    // 
    // 
    // 
    // If the embedded property is strongly typed then, to strongly type the property to the type of
    // the embedded object, you have to do the following things.
    // 	1. Generate Managed class for the WMI class of the embedded property. This can be done with MgmtClassGen.exe tool or from Server Explorer.
    // 	2. Include the namespace of the generated class.
    // 	3. Change the property get/set functions so as return the instance of the Managed class.
    // Below is a sample code.
    // 
    // VB Code
    // Public Property <PropertyName>() As <ManagedClassName of Embedded property>
    // 	Get
    // 		Return New <ManagedClassName of Embedded Property>(CType(curObj("<PropertyName>"),System.Management.ManagementBaseObject))
    // 	End Get
    // 	Set(ByVal Value As <ManagedClassName of Embedded property>)
    // 		curObj("EObject") = Value.LateBoundObject
    // 		If (AutoCommitProp = True And isEmbedded = False) Then
    // 			PrivateLateBoundObject.Put()
    // 		End If
    // 	End Set
    // 
    // C# Code
    // public <ManagedClassName of Embedded property> <PropertyName>
    // {
    // 	get
    // 	{
    // 		return new <ManagedClassName of Embedded property>((System.Management.ManagementBaseObject)(curObj["<PropertyName>"]));
    // 	}
    // 	set
    // 	{
    // 		curObj["<PropertyName>"] = value.LateBoundObject;
    // 		If (AutoCommitProp == true && isEmbedded == false)
    // 		{
    // 			PrivateLateBoundObject.Put();
    // 		}
    // 	}
    // }
    // An Early Bound class generated for the WMI class.IIsWebServerSetting
    public class IIsWebServerSetting : System.ComponentModel.Component {
        
        // Private property to hold the WMI namespace in which the class resides.
        private static string CreatedWmiNamespace = "ROOT\\MicrosoftIISv2";
        
        // Private property to hold the name of WMI class which created this class.
        private static string CreatedClassName = "IIsWebServerSetting";
        
        // Private member variable to hold the ManagementScope which is used by the various methods.
        private static System.Management.ManagementScope statMgmtScope = null;
        
        private ManagementSystemProperties PrivateSystemProperties;
        
        // Underlying lateBound WMI object.
        private System.Management.ManagementObject PrivateLateBoundObject;
        
        // Member variable to store the 'automatic commit' behavior for the class.
        private bool AutoCommitProp = true;
        
        // Private variable to hold the embedded property representing the instance.
        private System.Management.ManagementBaseObject embeddedObj;
        
        // The current WMI object used
        private System.Management.ManagementBaseObject curObj;
        
        // Flag to indicate if the instance is an embedded object.
        private bool isEmbedded = false;
        
        // Below are different overloads of constructors to initialize an instance of the class with a WMI object.
        public IIsWebServerSetting() : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(null)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServerSetting(string keyName) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServerSetting(System.Management.ManagementScope mgmtScope, string keyName) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(new System.Management.ManagementPath(IIsWebServerSetting.ConstructPath(keyName)))), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServerSetting(System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(getOptions))) {
        }
        
        public IIsWebServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(mgmtScope)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServerSetting(System.Management.ManagementPath path) : 
                this(((System.Management.ManagementScope)(null)), ((System.Management.ManagementPath)(path)), ((System.Management.ObjectGetOptions)(null))) {
        }
        
        public IIsWebServerSetting(System.Management.ManagementScope mgmtScope, System.Management.ManagementPath path, System.Management.ObjectGetOptions getOptions) {
            if ((path != null)) {
                if ((CheckIfProperClass(mgmtScope, path, getOptions) != true)) {
                    throw new System.ArgumentException("Class name does not match.");
                }
            }
            PrivateLateBoundObject = new System.Management.ManagementObject(mgmtScope, path, getOptions);
            PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
            curObj = PrivateLateBoundObject;
        }
        
        public IIsWebServerSetting(System.Management.ManagementObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                PrivateLateBoundObject = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(PrivateLateBoundObject);
                curObj = PrivateLateBoundObject;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        public IIsWebServerSetting(System.Management.ManagementBaseObject theObject) {
            if ((CheckIfProperClass(theObject) == true)) {
                embeddedObj = theObject;
                PrivateSystemProperties = new ManagementSystemProperties(theObject);
                curObj = embeddedObj;
                isEmbedded = true;
            }
            else {
                throw new System.ArgumentException("Class name does not match.");
            }
        }
        
        // Property returns the namespace of the WMI class.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string OriginatingNamespace {
            get {
                return "ROOT\\MicrosoftIISv2";
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string ManagementClassName {
            get {
                string strRet = CreatedClassName;
                if ((curObj != null)) {
                    if ((curObj.ClassPath != null)) {
                        strRet = ((string)(curObj["__CLASS"]));
                        if (((strRet == null) 
                                    || (strRet == System.String.Empty))) {
                            strRet = CreatedClassName;
                        }
                    }
                }
                return strRet;
            }
        }
        
        // Property pointing to an embedded object to get System properties of the WMI object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ManagementSystemProperties SystemProperties {
            get {
                return PrivateSystemProperties;
            }
        }
        
        // Property returning the underlying lateBound object.
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementBaseObject LateBoundObject {
            get {
                return curObj;
            }
        }
        
        // ManagementScope of the object.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Management.ManagementScope Scope {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Scope;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    PrivateLateBoundObject.Scope = value;
                }
            }
        }
        
        // Property to show the commit behavior for the WMI object. If true, WMI object will be automatically saved after each property modification.(ie. Put() is called after modification of a property).
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AutoCommit {
            get {
                return AutoCommitProp;
            }
            set {
                AutoCommitProp = value;
            }
        }
        
        // The ManagementPath of the underlying WMI object.
        [Browsable(true)]
        public System.Management.ManagementPath Path {
            get {
                if ((isEmbedded == false)) {
                    return PrivateLateBoundObject.Path;
                }
                else {
                    return null;
                }
            }
            set {
                if ((isEmbedded == false)) {
                    if ((CheckIfProperClass(null, value, null) != true)) {
                        throw new System.ArgumentException("Class name does not match.");
                    }
                    PrivateLateBoundObject.Path = value;
                }
            }
        }
        
        // Public static scope property which is used by the various methods.
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public static System.Management.ManagementScope StaticScope {
            get {
                return statMgmtScope;
            }
            set {
                statMgmtScope = value;
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessExecuteNull {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessExecute {
            get {
                if ((curObj["AccessExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessExecute"]));
            }
            set {
                curObj["AccessExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessFlagsNull {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessFlags {
            get {
                if ((curObj["AccessFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessFlags"]));
            }
            set {
                curObj["AccessFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoPhysicalDirNull {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoPhysicalDir {
            get {
                if ((curObj["AccessNoPhysicalDir"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoPhysicalDir"]));
            }
            set {
                curObj["AccessNoPhysicalDir"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteExecuteNull {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteExecute {
            get {
                if ((curObj["AccessNoRemoteExecute"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteExecute"]));
            }
            set {
                curObj["AccessNoRemoteExecute"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteReadNull {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteRead {
            get {
                if ((curObj["AccessNoRemoteRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteRead"]));
            }
            set {
                curObj["AccessNoRemoteRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteScriptNull {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteScript {
            get {
                if ((curObj["AccessNoRemoteScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteScript"]));
            }
            set {
                curObj["AccessNoRemoteScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessNoRemoteWriteNull {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessNoRemoteWrite {
            get {
                if ((curObj["AccessNoRemoteWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessNoRemoteWrite"]));
            }
            set {
                curObj["AccessNoRemoteWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessReadNull {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessRead {
            get {
                if ((curObj["AccessRead"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessRead"]));
            }
            set {
                curObj["AccessRead"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessScriptNull {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessScript {
            get {
                if ((curObj["AccessScript"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessScript"]));
            }
            set {
                curObj["AccessScript"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSourceNull {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSource {
            get {
                if ((curObj["AccessSource"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSource"]));
            }
            set {
                curObj["AccessSource"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNull {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL {
            get {
                if ((curObj["AccessSSL"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL"]));
            }
            set {
                curObj["AccessSSL"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSL128Null {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSL128 {
            get {
                if ((curObj["AccessSSL128"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSL128"]));
            }
            set {
                curObj["AccessSSL128"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLFlagsNull {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AccessSSLFlags {
            get {
                if ((curObj["AccessSSLFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AccessSSLFlags"]));
            }
            set {
                curObj["AccessSSLFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLMapCertNull {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLMapCert {
            get {
                if ((curObj["AccessSSLMapCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLMapCert"]));
            }
            set {
                curObj["AccessSSLMapCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLNegotiateCertNull {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLNegotiateCert {
            get {
                if ((curObj["AccessSSLNegotiateCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLNegotiateCert"]));
            }
            set {
                curObj["AccessSSLNegotiateCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessSSLRequireCertNull {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessSSLRequireCert {
            get {
                if ((curObj["AccessSSLRequireCert"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessSSLRequireCert"]));
            }
            set {
                curObj["AccessSSLRequireCert"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAccessWriteNull {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AccessWrite {
            get {
                if ((curObj["AccessWrite"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AccessWrite"]));
            }
            set {
                curObj["AccessWrite"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public System.Byte[] AdminACLBin {
            get {
                return ((System.Byte[])(curObj["AdminACLBin"]));
            }
            set {
                curObj["AdminACLBin"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowKeepAliveNull {
            get {
                if ((curObj["AllowKeepAlive"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowKeepAlive {
            get {
                if ((curObj["AllowKeepAlive"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowKeepAlive"]));
            }
            set {
                curObj["AllowKeepAlive"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAllowPathInfoForScriptMappingsNull {
            get {
                if ((curObj["AllowPathInfoForScriptMappings"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AllowPathInfoForScriptMappings {
            get {
                if ((curObj["AllowPathInfoForScriptMappings"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AllowPathInfoForScriptMappings"]));
            }
            set {
                curObj["AllowPathInfoForScriptMappings"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAnonymousPasswordSyncNull {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AnonymousPasswordSync {
            get {
                if ((curObj["AnonymousPasswordSync"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AnonymousPasswordSync"]));
            }
            set {
                curObj["AnonymousPasswordSync"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserName {
            get {
                return ((string)(curObj["AnonymousUserName"]));
            }
            set {
                curObj["AnonymousUserName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AnonymousUserPass {
            get {
                return ((string)(curObj["AnonymousUserPass"]));
            }
            set {
                curObj["AnonymousUserPass"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowClientDebugNull {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowClientDebug {
            get {
                if ((curObj["AppAllowClientDebug"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowClientDebug"]));
            }
            set {
                curObj["AppAllowClientDebug"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppAllowDebuggingNull {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AppAllowDebugging {
            get {
                if ((curObj["AppAllowDebugging"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AppAllowDebugging"]));
            }
            set {
                curObj["AppAllowDebugging"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppFriendlyName {
            get {
                return ((string)(curObj["AppFriendlyName"]));
            }
            set {
                curObj["AppFriendlyName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAppOopRecoverLimitNull {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AppOopRecoverLimit {
            get {
                if ((curObj["AppOopRecoverLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AppOopRecoverLimit"]));
            }
            set {
                curObj["AppOopRecoverLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppPoolId {
            get {
                return ((string)(curObj["AppPoolId"]));
            }
            set {
                curObj["AppPoolId"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AppWamClsid {
            get {
                return ((string)(curObj["AppWamClsid"]));
            }
            set {
                curObj["AppWamClsid"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowOutOfProcComponentsNull {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowOutOfProcComponents {
            get {
                if ((curObj["AspAllowOutOfProcComponents"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowOutOfProcComponents"]));
            }
            set {
                curObj["AspAllowOutOfProcComponents"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAllowSessionStateNull {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspAllowSessionState {
            get {
                if ((curObj["AspAllowSessionState"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspAllowSessionState"]));
            }
            set {
                curObj["AspAllowSessionState"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspAppServiceFlagsNull {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspAppServiceFlags {
            get {
                if ((curObj["AspAppServiceFlags"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspAppServiceFlags"]));
            }
            set {
                curObj["AspAppServiceFlags"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingLimitNull {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspBufferingLimit {
            get {
                if ((curObj["AspBufferingLimit"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspBufferingLimit"]));
            }
            set {
                curObj["AspBufferingLimit"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspBufferingOnNull {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspBufferingOn {
            get {
                if ((curObj["AspBufferingOn"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspBufferingOn"]));
            }
            set {
                curObj["AspBufferingOn"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCalcLineNumberNull {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspCalcLineNumber {
            get {
                if ((curObj["AspCalcLineNumber"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspCalcLineNumber"]));
            }
            set {
                curObj["AspCalcLineNumber"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspCodepageNull {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspCodepage {
            get {
                if ((curObj["AspCodepage"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspCodepage"]));
            }
            set {
                curObj["AspCodepage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspDiskTemplateCacheDirectory {
            get {
                return ((string)(curObj["AspDiskTemplateCacheDirectory"]));
            }
            set {
                curObj["AspDiskTemplateCacheDirectory"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableApplicationRestartNull {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableApplicationRestart {
            get {
                if ((curObj["AspEnableApplicationRestart"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableApplicationRestart"]));
            }
            set {
                curObj["AspEnableApplicationRestart"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableAspHtmlFallbackNull {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableAspHtmlFallback {
            get {
                if ((curObj["AspEnableAspHtmlFallback"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableAspHtmlFallback"]));
            }
            set {
                curObj["AspEnableAspHtmlFallback"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableChunkedEncodingNull {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableChunkedEncoding {
            get {
                if ((curObj["AspEnableChunkedEncoding"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableChunkedEncoding"]));
            }
            set {
                curObj["AspEnableChunkedEncoding"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableParentPathsNull {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableParentPaths {
            get {
                if ((curObj["AspEnableParentPaths"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableParentPaths"]));
            }
            set {
                curObj["AspEnableParentPaths"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableSxsNull {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableSxs {
            get {
                if ((curObj["AspEnableSxs"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableSxs"]));
            }
            set {
                curObj["AspEnableSxs"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTrackerNull {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTracker {
            get {
                if ((curObj["AspEnableTracker"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTracker"]));
            }
            set {
                curObj["AspEnableTracker"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspEnableTypelibCacheNull {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspEnableTypelibCache {
            get {
                if ((curObj["AspEnableTypelibCache"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspEnableTypelibCache"]));
            }
            set {
                curObj["AspEnableTypelibCache"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspErrorsToNTLogNull {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspErrorsToNTLog {
            get {
                if ((curObj["AspErrorsToNTLog"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspErrorsToNTLog"]));
            }
            set {
                curObj["AspErrorsToNTLog"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExceptionCatchEnableNull {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspExceptionCatchEnable {
            get {
                if ((curObj["AspExceptionCatchEnable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspExceptionCatchEnable"]));
            }
            set {
                curObj["AspExceptionCatchEnable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspExecuteInMTANull {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspExecuteInMTA {
            get {
                if ((curObj["AspExecuteInMTA"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspExecuteInMTA"]));
            }
            set {
                curObj["AspExecuteInMTA"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspKeepSessionIDSecureNull {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspKeepSessionIDSecure {
            get {
                if ((curObj["AspKeepSessionIDSecure"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspKeepSessionIDSecure"]));
            }
            set {
                curObj["AspKeepSessionIDSecure"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLCIDNull {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspLCID {
            get {
                if ((curObj["AspLCID"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspLCID"]));
            }
            set {
                curObj["AspLCID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspLogErrorRequestsNull {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspLogErrorRequests {
            get {
                if ((curObj["AspLogErrorRequests"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspLogErrorRequests"]));
            }
            set {
                curObj["AspLogErrorRequests"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxDiskTemplateCacheFilesNull {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxDiskTemplateCacheFiles {
            get {
                if ((curObj["AspMaxDiskTemplateCacheFiles"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxDiskTemplateCacheFiles"]));
            }
            set {
                curObj["AspMaxDiskTemplateCacheFiles"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspMaxRequestEntityAllowedNull {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspMaxRequestEntityAllowed {
            get {
                if ((curObj["AspMaxRequestEntityAllowed"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspMaxRequestEntityAllowed"]));
            }
            set {
                curObj["AspMaxRequestEntityAllowed"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspPartitionID {
            get {
                return ((string)(curObj["AspPartitionID"]));
            }
            set {
                curObj["AspPartitionID"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspProcessorThreadMaxNull {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspProcessorThreadMax {
            get {
                if ((curObj["AspProcessorThreadMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspProcessorThreadMax"]));
            }
            set {
                curObj["AspProcessorThreadMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueConnectionTestTimeNull {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueConnectionTestTime {
            get {
                if ((curObj["AspQueueConnectionTestTime"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueConnectionTestTime"]));
            }
            set {
                curObj["AspQueueConnectionTestTime"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspQueueTimeoutNull {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspQueueTimeout {
            get {
                if ((curObj["AspQueueTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspQueueTimeout"]));
            }
            set {
                curObj["AspQueueTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRequestQueueMaxNull {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspRequestQueueMax {
            get {
                if ((curObj["AspRequestQueueMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspRequestQueueMax"]));
            }
            set {
                curObj["AspRequestQueueMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspRunOnEndAnonymouslyNull {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspRunOnEndAnonymously {
            get {
                if ((curObj["AspRunOnEndAnonymously"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspRunOnEndAnonymously"]));
            }
            set {
                curObj["AspRunOnEndAnonymously"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptEngineCacheMaxNull {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptEngineCacheMax {
            get {
                if ((curObj["AspScriptEngineCacheMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptEngineCacheMax"]));
            }
            set {
                curObj["AspScriptEngineCacheMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptErrorMessage {
            get {
                return ((string)(curObj["AspScriptErrorMessage"]));
            }
            set {
                curObj["AspScriptErrorMessage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptErrorSentToBrowserNull {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspScriptErrorSentToBrowser {
            get {
                if ((curObj["AspScriptErrorSentToBrowser"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspScriptErrorSentToBrowser"]));
            }
            set {
                curObj["AspScriptErrorSentToBrowser"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptFileCacheSizeNull {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptFileCacheSize {
            get {
                if ((curObj["AspScriptFileCacheSize"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptFileCacheSize"]));
            }
            set {
                curObj["AspScriptFileCacheSize"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspScriptLanguage {
            get {
                return ((string)(curObj["AspScriptLanguage"]));
            }
            set {
                curObj["AspScriptLanguage"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspScriptTimeoutNull {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspScriptTimeout {
            get {
                if ((curObj["AspScriptTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspScriptTimeout"]));
            }
            set {
                curObj["AspScriptTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionMaxNull {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionMax {
            get {
                if ((curObj["AspSessionMax"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionMax"]));
            }
            set {
                curObj["AspSessionMax"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspSessionTimeoutNull {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public int AspSessionTimeout {
            get {
                if ((curObj["AspSessionTimeout"] == null)) {
                    return System.Convert.ToInt32(0);
                }
                return ((int)(curObj["AspSessionTimeout"]));
            }
            set {
                curObj["AspSessionTimeout"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public string AspSxsName {
            get {
                return ((string)(curObj["AspSxsName"]));
            }
            set {
                curObj["AspSxsName"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspTrackThreadingModelNull {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspTrackThreadingModel {
            get {
                if ((curObj["AspTrackThreadingModel"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspTrackThreadingModel"]));
            }
            set {
                curObj["AspTrackThreadingModel"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAspUsePartitionNull {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AspUsePartition {
            get {
                if ((curObj["AspUsePartition"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AspUsePartition"]));
            }
            set {
                curObj["AspUsePartition"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAdvNotifyDisableNull {
            get {
                if ((curObj["AuthAdvNotifyDisable"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAdvNotifyDisable {
            get {
                if ((curObj["AuthAdvNotifyDisable"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAdvNotifyDisable"]));
            }
            set {
                curObj["AuthAdvNotifyDisable"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthAnonymousNull {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [TypeConverter(typeof(WMIValueTypeConverter))]
        public bool AuthAnonymous {
            get {
                if ((curObj["AuthAnonymous"] == null)) {
                    return System.Convert.ToBoolean(0);
                }
                return ((bool)(curObj["AuthAnonymous"]));
            }
            set {
                curObj["AuthAnonymous"] = value;
                if (((isEmbedded == false) 
                            && (AutoCommitProp == true))) {
                    PrivateLateBoundObject.Put();
                }
            }
        }
        
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool IsAuthBasicNull {
            get {
                if ((curObj["AuthBasic"] == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        [Browsable(true)]
        [DesignerSerializationVisibility(DesignerSerializationVisibilit