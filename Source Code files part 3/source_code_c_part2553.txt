                 0x004B0334 /* -W-4R */
#define NV_UTRI_TRIANGLE32_5_Y                                 31:0 /* -W-SF */
#define NV_UTRI_TRIMESH(i)                       (0x004B0400+(i)*4) /* -W-4A */
#define NV_UTRI_TRIMESH__SIZE_1                                  32 /*       */
#define NV_UTRI_TRIMESH_X                                      15:0 /* -W-SF */
#define NV_UTRI_TRIMESH_Y                                     31:16 /* -W-SF */
#define NV_UTRI_TRIMESH32_0(i)                   (0x004B0480+(i)*8) /* -W-4A */
#define NV_UTRI_TRIMESH32_0__SIZE_1                              16 /*       */
#define NV_UTRI_TRIMESH32_0_X                                  31:0 /* -W-SF */
#define NV_UTRI_TRIMESH32_1(i)                   (0x004B0484+(i)*8) /* -W-4A */
#define NV_UTRI_TRIMESH32_1__SIZE_1                              16 /*       */
#define NV_UTRI_TRIMESH32_1_Y                                  31:0 /* -W-SF */
#define NV_UTRI_CTRIANGLE_0(i)                  (0x004B0500+(i)*16) /* -W-4A */
#define NV_UTRI_CTRIANGLE_0__SIZE_1                               8 /*       */
#define NV_UTRI_CTRIANGLE_0_COLOR                              31:0 /* -W-VF */
#define NV_UTRI_CTRIANGLE_1(i)                  (0x004B0504+(i)*16) /* -W-4A */
#define NV_UTRI_CTRIANGLE_1__SIZE_1                               8 /*       */
#define NV_UTRI_CTRIANGLE_1_X                                  15:0 /* -W-SF */
#define NV_UTRI_CTRIANGLE_1_Y                                 31:16 /* -W-SF */
#define NV_UTRI_CTRIANGLE_2(i)                  (0x004B0508+(i)*16) /* -W-4A */
#define NV_UTRI_CTRIANGLE_2__SIZE_1                               8 /*       */
#define NV_UTRI_CTRIANGLE_2_X                                  15:0 /* -W-SF */
#define NV_UTRI_CTRIANGLE_2_Y                                 31:16 /* -W-SF */
#define NV_UTRI_CTRIANGLE_3(i)                  (0x004B050C+(i)*16) /* -W-4A */
#define NV_UTRI_CTRIANGLE_3__SIZE_1                               8 /*       */
#define NV_UTRI_CTRIANGLE_3_X                                  15:0 /* -W-SF */
#define NV_UTRI_CTRIANGLE_3_Y                                 31:16 /* -W-SF */
#define NV_UTRI_CTRIMESH_0(i)                    (0x004B0580+(i)*8) /* -W-4A */
#define NV_UTRI_CTRIMESH_0__SIZE_1                               16 /*       */
#define NV_UTRI_CTRIMESH_0_COLOR                               31:0 /* -W-VF */
#define NV_UTRI_CTRIMESH_1(i)                    (0x004B0584+(i)*8) /* -W-4A */
#define NV_UTRI_CTRIMESH_1__SIZE_1                               16 /*       */
#define NV_UTRI_CTRIMESH_1_X                                   15:0 /* -W-SF */
#define NV_UTRI_CTRIMESH_1_Y                                  31:16 /* -W-SF */
/* usr_nv4_image_blit.ref */
#define NV_IMAGE_BLIT                                    0x0000005F /* ----C */
#define NV_UBLIT                              0x00501FFF:0x00500000 /* -W--D */
#define NV_UBLIT_CTX_SWITCH                              0x00500000 /* -W-4R */
#define NV_UBLIT_CTX_SWITCH_INSTANCE                           15:0 /* -W-UF */
#define NV_UBLIT_CTX_SWITCH_CHID                              22:16 /* -W-UF */
#define NV_UBLIT_CTX_SWITCH_VOLATILE                          31:31 /* -W-VF */
#define NV_UBLIT_CTX_SWITCH_VOLATILE_IGNORE              0x00000000 /* -W--V */
#define NV_UBLIT_CTX_SWITCH_VOLATILE_RESET               0x00000001 /* -W--V */
#define NV_UBLIT_NOP                                     0x00500100 /* -W-4R */
#define NV_UBLIT_NOP_PARAMETER                                 31:0 /* -W-VF */
#define NV_UBLIT_NOTIFY                                  0x00500104 /* -W-4R */
#define NV_UBLIT_NOTIFY_STYLE                                  31:0 /* -W-VF */
#define NV_UBLIT_NOTIFY_STYLE_WRITE_ONLY                 0x00000000 /* -W--V */
#define NV_UBLIT_NOTIFY_STYLE_WRITE_THEN_AWAKEN          0x00000001 /* -W--V */
#define NV_UBLIT_SET_NOTIFY                              0x00500104 /* -W-4R */
#define NV_UBLIT_SET_NOTIFY__ALIAS_1                NV_UBLIT_NOTIFY /*       */
#define NV_UBLIT_SET_NOTIFY_PARAMETER                          31:0 /* -W-VF */
#define NV_UBLIT_SET_NOTIFY_PARAMETER_WRITE              0x00000000 /* -W--V */
#define NV_UBLIT_SET_PATCH                               0x0050010C /* -W-4R */
#define NV_UBLIT_SET_PATCH_PARAMETER                           31:0 /* -W-VF */
#define NV_UBLIT_SET_PATCH_PARAMETER_INVALIDATE          0x00000000 /* -W--V */
#define NV_UBLIT_SET_PATCH_PARAMETER_VALIDATE            0x00000001 /* -W--V */
#define NV_UBLIT_SET_CONTEXT_DMA_NOTIFY                  0x00500180 /* -W-4R */
#define NV_UBLIT_SET_CONTEXT_DMA_NOTIFY_PARAMETER              31:0 /* -W-VF */
#define NV_UBLIT_SET_IMAGE_OUTPUT                        0x00500200 /* -W-4R */
#define NV_UBLIT_SET_IMAGE_OUTPUT_PARAMETER                    31:0 /* -W-VF */
#define NV_UBLIT_SET_IMAGE_INPUT                         0x00500204 /* -W-4R */
#define NV_UBLIT_SET_IMAGE_INPUT_PARAMETER                     31:0 /* -W-VF */
#define NV_UBLIT_POINT_IN                                0x00500300 /* -W-4R */
#define NV_UBLIT_POINT_IN_X                                    15:0 /* -W-UF */
#define NV_UBLIT_POINT_IN_Y                                   31:16 /* -W-UF */
#define NV_UBLIT_POINT_OUT                               0x00500304 /* -W-4R */
#define NV_UBLIT_POINT_OUT_X                                   15:0 /* -W-UF */
#define NV_UBLIT_POINT_OUT_Y                                  31:16 /* -W-UF */
#define NV_UBLIT_SIZE                                    0x00500308 /* -W-4R */
#define NV_UBLIT_SIZE_WIDTH                                    15:0 /* -W-UF */
#define NV_UBLIT_SIZE_HEIGHT                                  31:16 /* -W-UF */
/* usr_nv4_indexed_image_from_cpu.ref */
#define NV4_INDEXED_IMAGE_FROM_CPU                       0x00000060 /* ----C */
#define NV_060                                0x00691FFF:0x00690000 /* -W--D */
#define NV_060_CTX_SWITCH                                0x00690000 /* -W-4R */
#define NV_060_CTX_SWITCH_INSTANCE                             15:0 /* -W-UF */
#define NV_060_CTX_SWITCH_CHID                                22:16 /* -W-UF */
#define NV_060_CTX_SWITCH_VOLATILE                            31:31 /* -W-VF */
#define NV_060_CTX_SWITCH_VOLATILE_IGNORE                0x00000000 /* -W--V */
#define NV_060_CTX_SWITCH_VOLATILE_RESET                 0x00000001 /* -W--V */
#define NV_060_NOP                                       0x00690100 /* -W-4R */
#define NV_060_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_060_NOTIFY                                    0x00690104 /* -W-4R */
#define NV_060_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_060_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_060_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_060_SET_NOTIFY                                0x00690104 /* -W-4R */
#define NV_060_SET_NOTIFY__ALIAS_1                    NV_060_NOTIFY /*       */
#define NV_060_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_060_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_060_SET_PATCH                                 0x0069010C /* -W-4R */
#define NV_060_SET_PATCH_PARAMETER                             31:0 /* -W-VF */
#define NV_060_SET_PATCH_PARAMETER_INVALIDATE            0x00000000 /* -W--V */
#define NV_060_SET_PATCH_PARAMETER_VALIDATE              0x00000001 /* -W--V */
#define NV_060_SET_CONTEXT_DMA_NOTIFY                    0x00690180 /* -W-4R */
#define NV_060_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_060_SET_CONTEXT_DMA_LUT                       0x00690184 /* -W-4R */
#define NV_060_SET_CONTEXT_DMA_LUT_PARAMETER                   31:0 /* -W-VF */
#define NV_060_SET_IMAGE_OUTPUT                          0x00690200 /* -W-4R */
#define NV_060_SET_IMAGE_OUTPUT_PARAMETER                      31:0 /* -W-VF */
#define NV_060_SET_COLOR_FORMAT                          0x006903E8 /* -W-4R */
#define NV_060_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_060_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_060_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_060_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_060_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_060_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_060_INDEX_FORMAT                              0x006903EC /* -W-4R */
#define NV_060_INDEX_FORMAT_LE                                 31:0 /* -W-VF */
#define NV_060_INDEX_FORMAT_LE_I8                        0x00000000 /* -W--V */
#define NV_060_INDEX_FORMAT_LE_I4                        0x00000001 /* -W--V */
#define NV_060_LUT_OFFSET                                0x006903F0 /* -W-4R */
#define NV_060_LUT_OFFSET_ARGUMENT                             31:0 /* -W-UF */
#define NV_060_POINT                                     0x006903F4 /* -W-4R */
#define NV_060_POINT_X                                         15:0 /* -W-SF */
#define NV_060_POINT_Y                                        31:16 /* -W-SF */
#define NV_060_SIZE_OUT                                  0x006903F8 /* -W-4R */
#define NV_060_SIZE_OUT_WIDTH                                  15:0 /* -W-UF */
#define NV_060_SIZE_OUT_HEIGHT                                31:16 /* -W-UF */
#define NV_060_SIZE_IN                                   0x006903FC /* -W-4R */
#define NV_060_SIZE_IN_WIDTH                                   15:0 /* -W-UF */
#define NV_060_SIZE_IN_HEIGHT                                 31:16 /* -W-UF */
#define NV_060_COLOR(i)                          (0x00690400+(i)*4) /* -W-4A */
#define NV_060_COLOR__SIZE_1                                   1792 /*       */
#define NV_060_COLOR_VALUE                                     31:0 /* -W-VF */
/* usr_nv5_indexed_image_from_cpu.ref */
#define NV5_INDEXED_IMAGE_FROM_CPU                       0x00000064 /* ----C */
#define NV_064                                0x00651FFF:0x00650000 /* -W--D */
#define NV_064_NV5_INDEXED_IMAGE_FROM_CPU                0x00650000 /* -W-4R */
#define NV_064_NV5_INDEXED_IMAGE_FROM_CPU_HANDLE               31:0 /* -WXVF */
#define NV_064_NOP                                       0x00650100 /* -W-4R */
#define NV_064_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_064_NOTIFY                                    0x00650104 /* -W-4R */
#define NV_064_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_064_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_064_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_064_SET_NOTIFY                                0x00650104 /* -W-4R */
#define NV_064_SET_NOTIFY__ALIAS_1                    NV_064_NOTIFY /*       */
#define NV_064_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_064_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_064_SET_CONTEXT_DMA_NOTIFY                    0x00650180 /* -W-4R */
#define NV_064_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_DMA_LUT                       0x00650184 /* -W-4R */
#define NV_064_SET_CONTEXT_DMA_LUT_PARAMETER                   31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_COLOR_KEY                     0x00650188 /* -W-4R */
#define NV_064_SET_CONTEXT_COLOR_KEY_PARAMETER                 31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_CLIP_RECTANGLE                0x0065018C /* -W-4R */
#define NV_064_SET_CONTEXT_CLIP_RECTANGLE_PARAMETER            31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_PATTERN                       0x00650190 /* -W-4R */
#define NV_064_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_ROP                           0x00650194 /* -W-4R */
#define NV_064_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_BETA1                         0x00650198 /* -W-4R */
#define NV_064_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_BETA4                         0x0065019C /* -W-4R */
#define NV_064_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_064_SET_CONTEXT_SURFACE                       0x006501A0 /* -W-4R */
#define NV_064_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_064_SET_COLOR_CONVERSION                      0x006503E0 /* -W-4R */
#define NV_064_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_064_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_064_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_064_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_064_SET_OPERATION                             0x006503E4 /* -W-4R */
#define NV_064_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_064_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_064_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_064_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_064_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_064_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_064_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_064_SET_COLOR_FORMAT                          0x006503E8 /* -W-4R */
#define NV_064_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_064_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_064_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_064_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_064_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_064_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_064_INDEX_FORMAT                              0x006503EC /* -W-4R */
#define NV_064_INDEX_FORMAT_LE                                 31:0 /* -W-VF */
#define NV_064_INDEX_FORMAT_LE_I8                        0x00000000 /* -W--V */
#define NV_064_INDEX_FORMAT_LE_I4                        0x00000001 /* -W--V */
#define NV_064_LUT_OFFSET                                0x006503F0 /* -W-4R */
#define NV_064_LUT_OFFSET_ARGUMENT                             31:0 /* -W-UF */
#define NV_064_POINT                                     0x006503F4 /* -W-4R */
#define NV_064_POINT_X                                         15:0 /* -W-SF */
#define NV_064_POINT_Y                                        31:16 /* -W-SF */
#define NV_064_SIZE_OUT                                  0x006503F8 /* -W-4R */
#define NV_064_SIZE_OUT_WIDTH                                  15:0 /* -W-UF */
#define NV_064_SIZE_OUT_HEIGHT                                31:16 /* -W-UF */
#define NV_064_SIZE_IN                                   0x006503FC /* -W-4R */
#define NV_064_SIZE_IN_WIDTH                                   15:0 /* -W-UF */
#define NV_064_SIZE_IN_HEIGHT                                 31:16 /* -W-UF */
#define NV_064_INDICES(i)                        (0x00650400+(i)*4) /* -W-4A */
#define NV_064_INDICES__SIZE_1                                 1792 /*       */
#define NV_064_INDICES_VALUE                                   31:0 /* -W-VF */
/* usr_nv4_image_from_cpu.ref */
#define NV_IMAGE_FROM_CPU                                0x00000061 /* ----C */
#define NV_UIMAGE                             0x00511FFF:0x00510000 /* -W--D */
#define NV_UIMAGE_CTX_SWITCH                             0x00510000 /* -W-4R */
#define NV_UIMAGE_CTX_SWITCH_INSTANCE                          15:0 /* -W-UF */
#define NV_UIMAGE_CTX_SWITCH_CHID                             22:16 /* -W-UF */
#define NV_UIMAGE_CTX_SWITCH_VOLATILE                         31:31 /* -W-VF */
#define NV_UIMAGE_CTX_SWITCH_VOLATILE_IGNORE             0x00000000 /* -W--V */
#define NV_UIMAGE_CTX_SWITCH_VOLATILE_RESET              0x00000001 /* -W--V */
#define NV_UIMAGE_NOP                                    0x00510100 /* -W-4R */
#define NV_UIMAGE_NOP_PARAMETER                                31:0 /* -W-VF */
#define NV_UIMAGE_NOTIFY                                 0x00510104 /* -W-4R */
#define NV_UIMAGE_NOTIFY_STYLE                                 31:0 /* -W-VF */
#define NV_UIMAGE_NOTIFY_STYLE_WRITE_ONLY                0x00000000 /* -W--V */
#define NV_UIMAGE_NOTIFY_STYLE_WRITE_THEN_AWAKEN         0x00000001 /* -W--V */
#define NV_UIMAGE_SET_NOTIFY                             0x00510104 /* -W-4R */
#define NV_UIMAGE_SET_NOTIFY__ALIAS_1              NV_UIMAGE_NOTIFY /*       */
#define NV_UIMAGE_SET_NOTIFY_PARAMETER                         31:0 /* -W-VF */
#define NV_UIMAGE_SET_NOTIFY_PARAMETER_WRITE             0x00000000 /* -W--V */
#define NV_UIMAGE_SET_PATCH                              0x0051010C /* -W-4R */
#define NV_UIMAGE_SET_PATCH_PARAMETER                          31:0 /* -W-VF */
#define NV_UIMAGE_SET_PATCH_PARAMETER_INVALIDATE         0x00000000 /* -W--V */
#define NV_UIMAGE_SET_PATCH_PARAMETER_VALIDATE           0x00000001 /* -W--V */
#define NV_UIMAGE_SET_CONTEXT_DMA_NOTIFY                 0x00510180 /* -W-4R */
#define NV_UIMAGE_SET_CONTEXT_DMA_NOTIFY_PARAMETER             31:0 /* -W-VF */
#define NV_UIMAGE_SET_IMAGE_OUTPUT                       0x00510200 /* -W-4R */
#define NV_UIMAGE_SET_IMAGE_OUTPUT_PARAMETER                   31:0 /* -W-VF */
#define NV_UIMAGE_SET_COLOR_FORMAT                       0x00510300 /* -W-4R */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE                          31:0 /* -W-VF */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE_R5G6B5             0x00000001 /* -W--V */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE_A1R5G5B5           0x00000002 /* -W--V */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE_X1R5G5B5           0x00000003 /* -W--V */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE_A8R8G8B8           0x00000004 /* -W--V */
#define NV_UIMAGE_SET_COLOR_FORMAT_LE_X8R8G8B8           0x00000005 /* -W--V */
#define NV_UIMAGE_POINT                                  0x00510304 /* -W-4R */
#define NV_UIMAGE_POINT_X                                      15:0 /* -W-SF */
#define NV_UIMAGE_POINT_Y                                     31:16 /* -W-SF */
#define NV_UIMAGE_SIZE                                   0x00510308 /* -W-4R */
#define NV_UIMAGE_SIZE_WIDTH                                   15:0 /* -W-UF */
#define NV_UIMAGE_SIZE_HEIGHT                                 31:16 /* -W-UF */
#define NV_UIMAGE_SIZE_IN                                0x0051030C /* -W-4R */
#define NV_UIMAGE_SIZE_IN_WIDTH                                15:0 /* -W-UF */
#define NV_UIMAGE_SIZE_IN_HEIGHT                              31:16 /* -W-UF */
#define NV_UIMAGE_COLOR(i)                       (0x00510400+(i)*4) /* -W-4A */
#define NV_UIMAGE_COLOR__SIZE_1                                  32 /*       */
#define NV_UIMAGE_COLOR_VALUE                                  31:0 /* -W-VF */
/* usr_nv5_image_from_cpu.ref */
#define NV5_IMAGE_FROM_CPU                               0x00000065 /* ----C */
#define NV_065                                0x00661FFF:0x00660000 /* -W--D */
#define NV_065_NV5_IMAGE_FROM_CPU                        0x00660000 /* -W-4R */
#define NV_065_NV5_IMAGE_FROM_CPU_HANDLE                       31:0 /* -WXVF */
#define NV_065_NOP                                       0x00660100 /* -W-4R */
#define NV_065_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_065_NOTIFY                                    0x00660104 /* -W-4R */
#define NV_065_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_065_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_065_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_065_SET_NOTIFY                                0x00660104 /* -W-4R */
#define NV_065_SET_NOTIFY__ALIAS_1                    NV_065_NOTIFY /*       */
#define NV_065_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_065_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_065_SET_CONTEXT_DMA_NOTIFY                    0x00660180 /* -W-4R */
#define NV_065_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_COLOR_KEY                     0x00660184 /* -W-4R */
#define NV_065_SET_CONTEXT_COLOR_KEY_PARAMETER                 31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_CLIP_RECTANGLE                0x00660188 /* -W-4R */
#define NV_065_SET_CONTEXT_CLIP_RECTANGLE_PARAMETER            31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_PATTERN                       0x0066018C /* -W-4R */
#define NV_065_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_ROP                           0x00660190 /* -W-4R */
#define NV_065_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_BETA1                         0x00660194 /* -W-4R */
#define NV_065_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_BETA4                         0x00660198 /* -W-4R */
#define NV_065_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_065_SET_CONTEXT_SURFACE                       0x0066019C /* -W-4R */
#define NV_065_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_065_SET_COLOR_CONVERSION                      0x006602F8 /* -W-4R */
#define NV_065_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_065_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_065_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_065_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_065_SET_OPERATION                             0x006602FC /* -W-4R */
#define NV_065_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_065_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_065_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_065_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_065_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_065_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_065_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_065_SET_COLOR_FORMAT                          0x00660300 /* -W-4R */
#define NV_065_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_065_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_065_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_065_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_065_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_065_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_065_POINT                                     0x00660304 /* -W-4R */
#define NV_065_POINT_X                                         15:0 /* -W-SF */
#define NV_065_POINT_Y                                        31:16 /* -W-SF */
#define NV_065_SIZE_OUT                                  0x00660308 /* -W-4R */
#define NV_065_SIZE_OUT_WIDTH                                  15:0 /* -W-UF */
#define NV_065_SIZE_OUT_HEIGHT                                31:16 /* -W-UF */
#define NV_065_SIZE_IN                                   0x0066030C /* -W-4R */
#define NV_065_SIZE_IN_WIDTH                                   15:0 /* -W-UF */
#define NV_065_SIZE_IN_HEIGHT                                 31:16 /* -W-UF */
#define NV_065_COLOR(i)                          (0x00660400+(i)*4) /* -W-4A */
#define NV_065_COLOR__SIZE_1                                   1792 /*       */
#define NV_065_COLOR_VALUE                                     31:0 /* -W-VF */
/* usr_nv10_image_from_cpu.ref */
#define NV10_IMAGE_FROM_CPU                              0x0000008A /* ----C */
#define NV_08A                                0x00541FFF:0x00540000 /* -W--D */
#define NV_08A_NV10_IMAGE_FROM_CPU                       0x00540000 /* -W-4R */
#define NV_08A_NV10_IMAGE_FROM_CPU_HANDLE                      31:0 /* -WXVF */
#define NV_08A_NOP                                       0x00540100 /* -W-4R */
#define NV_08A_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_08A_NOTIFY                                    0x00540104 /* -W-4R */
#define NV_08A_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_08A_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_08A_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_08A_SET_NOTIFY                                0x00540104 /* -W-4R */
#define NV_08A_SET_NOTIFY__ALIAS_1                    NV_08A_NOTIFY /*       */
#define NV_08A_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_08A_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_08A_WAIT_FOR_IDLE                             0x00540108 /* -W-4R */
#define NV_08A_WAIT_FOR_IDLE_PARAMETER                         31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_DMA_NOTIFY                    0x00540180 /* -W-4R */
#define NV_08A_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_COLOR_KEY                     0x00540184 /* -W-4R */
#define NV_08A_SET_CONTEXT_COLOR_KEY_PARAMETER                 31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_CLIP_RECTANGLE                0x00540188 /* -W-4R */
#define NV_08A_SET_CONTEXT_CLIP_RECTANGLE_PARAMETER            31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_PATTERN                       0x0054018C /* -W-4R */
#define NV_08A_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_ROP                           0x00540190 /* -W-4R */
#define NV_08A_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_BETA1                         0x00540194 /* -W-4R */
#define NV_08A_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_BETA4                         0x00540198 /* -W-4R */
#define NV_08A_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_08A_SET_CONTEXT_SURFACE                       0x0054019C /* -W-4R */
#define NV_08A_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_08A_SET_COLOR_CONVERSION                      0x005402F8 /* -W-4R */
#define NV_08A_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_08A_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_08A_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_08A_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_08A_SET_OPERATION                             0x005402FC /* -W-4R */
#define NV_08A_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_08A_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_08A_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_08A_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_08A_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_08A_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_08A_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_08A_SET_COLOR_FORMAT                          0x00540300 /* -W-4R */
#define NV_08A_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_08A_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_08A_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_08A_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_08A_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_08A_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_08A_POINT                                     0x00540304 /* -W-4R */
#define NV_08A_POINT_X                                         15:0 /* -W-SF */
#define NV_08A_POINT_Y                                        31:16 /* -W-SF */
#define NV_08A_SIZE_OUT                                  0x00540308 /* -W-4R */
#define NV_08A_SIZE_OUT_WIDTH                                  15:0 /* -W-UF */
#define NV_08A_SIZE_OUT_HEIGHT                                31:16 /* -W-UF */
#define NV_08A_SIZE_IN                                   0x0054030C /* -W-4R */
#define NV_08A_SIZE_IN_WIDTH                                   15:0 /* -W-UF */
#define NV_08A_SIZE_IN_HEIGHT                                 31:16 /* -W-UF */
#define NV_08A_COLORA(i)                         (0x00540400+(i)*8) /* -W-4A */
#define NV_08A_COLORA__SIZE_1                                   896 /*       */
#define NV_08A_COLOR_VALUE                                     31:0 /* -W-VF */
#define NV_08A_COLORB(i)                         (0x00540404+(i)*8) /* -W-4A */
#define NV_08A_COLORB__SIZE_1                                   896 /*       */
#define NV_08A_COLORB_VALUE                                    31:0 /* -W-VF */
/* usr_nv10_texture_from_cpu.ref */
#define NV10_TEXTURE_FROM_CPU                            0x0000007B /* ----C */
#define NV_07B                                0x00531FFF:0x00530000 /* -W--D */
#define NV_07B_NV10_TEXTURE_FROM_CPU                     0x00530000 /* -W-4R */
#define NV_07B_NV10_TEXTURE_FROM_CPU_HANDLE                    31:0 /* -WXVF */
#define NV_07B_NOP                                       0x00530100 /* -W-4R */
#define NV_07B_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_07B_PM_TRIGGER                                0x00530140 /* -W-4R */
#define NV_07B_PM_TRIGGER_PARAMETER                            31:0 /* -W-VF */
#define NV_07B_NOTIFY                                    0x00530104 /* -W-4R */
#define NV_07B_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_07B_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_07B_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_07B_SET_NOTIFY                                0x00530104 /* -W-4R */
#define NV_07B_SET_NOTIFY__ALIAS_1                    NV_07B_NOTIFY /*       */
#define NV_07B_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_07B_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_07B_WAIT_FOR_IDLE                             0x00530108 /* -W-4R */
#define NV_07B_WAIT_FOR_IDLE_PARAMETER                         31:0 /* -W-VF */
#define NV_07B_SET_CONTEXT_DMA_NOTIFY                    0x00530180 /* -W-4R */
#define NV_07B_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_07B_SET_CONTEXT_SURFACE                       0x00530184 /* -W-4R */
#define NV_07B_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_07B_SET_COLOR_FORMAT                          0x00530300 /* -W-4R */
#define NV_07B_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_07B_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_07B_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_07B_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_07B_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_07B_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_07B_POINT                                     0x00530304 /* -W-4R */
#define NV_07B_POINT_X                                         15:0 /* -W-SF */
#define NV_07B_POINT_Y                                        31:16 /* -W-SF */
#define NV_07B_SIZE                                      0x00530308 /* -W-4R */
#define NV_07B_SIZE_WIDTH                                      15:0 /* -W-UF */
#define NV_07B_SIZE_HEIGHT                                    31:16 /* -W-UF */
#define NV_07B_CLIP_HORIZONTAL                           0x0053030C /* -W-4R */
#define NV_07B_CLIP_HORIZONTAL_X                               15:0 /* -W-UF */
#define NV_07B_CLIP_HORIZONTAL_WIDTH                          31:16 /* -W-UF */
#define NV_07B_CLIP_VERTICAL                             0x00530310 /* -W-4R */
#define NV_07B_CLIP_VERTICAL_Y                                 15:0 /* -W-UF */
#define NV_07B_CLIP_VERTICAL_HEIGHT                           31:16 /* -W-UF */
#define NV_07B_COLORA(i)                         (0x00530400+(i)*8) /* -W-4A */
#define NV_07B_COLORA__SIZE_1                                   896 /*       */
#define NV_07B_COLOR_VALUE                                     31:0 /* -W-VF */
#define NV_07B_COLORB(i)                         (0x00530404+(i)*8) /* -W-4A */
#define NV_07B_COLORB__SIZE_1                                   896 /*       */
#define NV_07B_COLORB_VALUE                                    31:0 /* -W-VF */
/* usr_nv4_scaled_image_from_mem.ref */
#define NV_SCALED_IMAGE_FROM_MEMORY                      0x00000077 /* ----C */
#define NV_USCALED                            0x004E1FFF:0x004E0000 /* -W--D */
#define NV_USCALED_CTX_SWITCH                            0x004E0000 /* -W-4R */
#define NV_USCALED_CTX_SWITCH_INSTANCE                         15:0 /* -W-UF */
#define NV_USCALED_CTX_SWITCH_CHID                            22:16 /* -W-UF */
#define NV_USCALED_CTX_SWITCH_VOLATILE                        31:31 /* -W-VF */
#define NV_USCALED_CTX_SWITCH_VOLATILE_IGNORE            0x00000000 /* -W--V */
#define NV_USCALED_CTX_SWITCH_VOLATILE_RESET             0x00000001 /* -W--V */
#define NV_USCALED_NOP                                   0x004E0100 /* -W-4R */
#define NV_USCALED_NOP_PARAMETER                               31:0 /* -W-VF */
#define NV_USCALED_NOTIFY                                0x004e0104 /* -W-4R */
#define NV_USCALED_NOTIFY_STYLE                                31:0 /* -W-VF */
#define NV_USCALED_NOTIFY_STYLE_WRITE_ONLY               0x00000000 /* -W--V */
#define NV_USCALED_NOTIFY_STYLE_WRITE_THEN_AWAKEN        0x00000001 /* -W--V */
#define NV_USCALED_SET_NOTIFY                            0x004e0104 /* -W-4R */
#define NV_USCALED_SET_NOTIFY__ALIAS_1            NV_USCALED_NOTIFY /*       */
#define NV_USCALED_SET_NOTIFY_PARAMETER                        31:0 /* -W-VF */
#define NV_USCALED_SET_NOTIFY_PARAMETER_WRITE            0x00000000 /* -W--V */
#define NV_USCALED_SET_PATCH                             0x004e010C /* -W-4R */
#define NV_USCALED_SET_PATCH_PARAMETER                         31:0 /* -W-VF */
#define NV_USCALED_SET_PATCH_PARAMETER_INVALIDATE        0x00000000 /* -W--V */
#define NV_USCALED_SET_PATCH_PARAMETER_VALIDATE          0x00000001 /* -W--V */
#define NV_USCALED_SET_CONTEXT_DMA_NOTIFY                0x004e0180 /* -W-4R */
#define NV_USCALED_SET_CONTEXT_DMA_NOTIFY_PARAMETER            31:0 /* -W-VF */
#define NV_USCALED_SET_CONTEXT_DMA_IMAGE                 0x004e0184 /* -W-4R */
#define NV_USCALED_SET_CONTEXT_DMA_IMAGE_PARAMETER             31:0 /* -W-VF */
#define NV_USCALED_SET_IMAGE_OUTPUT                      0x004e0200 /* -W-4R */
#define NV_USCALED_SET_IMAGE_OUTPUT_PARAMETER                  31:0 /* -W-VF */
#define NV_USCALED_SET_COLOR_FORMAT                      0x004E0300 /* -W-4R */
#define NV_USCALED_SET_COLOR_FORMAT_LE                         31:0 /* -W-VF */
#define NV_USCALED_SET_COLOR_FORMAT_LE_A1R5G5B5          0x00000001 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_X1R5G5B5          0x00000002 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_A8R8G8B8          0x00000003 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_X8R8G8B8          0x00000004 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_V8YB8U8YA8        0x00000005 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_YB8V8YA8U8        0x00000006 /* -W--V */
#define NV_USCALED_SET_COLOR_FORMAT_LE_R5G6B5            0x00000007 /* -W--V */
#define NV_USCALED_CLIP_0                                0x004E0308 /* -W-4R */
#define NV_USCALED_CLIP_0_X                                    15:0 /* -W-SF */
#define NV_USCALED_CLIP_0_Y                                   31:16 /* -W-SF */
#define NV_USCALED_CLIP_1                                0x004E030C /* -W-4R */
#define NV_USCALED_CLIP_1_WIDTH                                15:0 /* -W-UF */
#define NV_USCALED_CLIP_1_HEIGHT                              31:16 /* -W-UF */
#define NV_USCALED_RECTANGLE_OUT_0                       0x004E0310 /* -W-4R */
#define NV_USCALED_RECTANGLE_OUT_0_X                           15:0 /* -W-SF */
#define NV_USCALED_RECTANGLE_OUT_0_Y                          31:16 /* -W-SF */
#define NV_USCALED_RECTANGLE_OUT_1                       0x004E0314 /* -W-4R */
#define NV_USCALED_RECTANGLE_OUT_1_WIDTH                       15:0 /* -W-UF */
#define NV_USCALED_RECTANGLE_OUT_1_HEIGHT                     31:16 /* -W-UF */
#define NV_USCALED_DELTA_DU_DX                           0x004E0318 /* -W-4R */
#define NV_USCALED_DELTA_DU_DX_R_FRACTION                      19:0 /* -W-SF */
#define NV_USCALED_DELTA_DU_DX_R_INT                          31:20 /* -W-UF */
#define NV_USCALED_DELTA_DU_DX_R                               31:0 /* -W-UF */
#define NV_USCALED_DELTA_DV_DY                           0x004E031C /* -W-4R */
#define NV_USCALED_DELTA_DV_DY_R_FRACTION                      19:0 /* -W-SF */
#define NV_USCALED_DELTA_DV_DY_R_INT                          31:20 /* -W-UF */
#define NV_USCALED_DELTA_DV_DY_R                               31:0 /* -W-UF */
#define NV_USCALED_SIZE                                  0x004E0400 /* -W-4R */
#define NV_USCALED_SIZE_WIDTH                                  15:0 /* -W-UF */
#define NV_USCALED_SIZE_HEIGHT                                31:16 /* -W-UF */
#define NV_USCALED_FORMAT                                0x004E0404 /* -W-4R */
#define NV_USCALED_FORMAT_PITCH                                15:0 /* -W-SF */
#define NV_USCALED_FORMAT_ORIGIN                              23:16 /* -W-VF */
#define NV_USCALED_FORMAT_ORIGIN_CENTER                  0x00000001 /* -W--V */
#define NV_USCALED_FORMAT_ORIGIN_CORNER                  0x00000002 /* -W--V */
#define NV_USCALED_FORMAT_INTERPOLATOR                        31:24 /* -W-VF */
#define NV_USCALED_FORMAT_INTERPOLATOR_ZOH               0x00000000 /* -W--V */
#define NV_USCALED_FORMAT_INTERPOLATOR_FOH               0x00000001 /* -W--V */
#define NV_USCALED_OFFSET                                0x004E0408 /* -W-4R */
#define NV_USCALED_OFFSET_VALUE                               31:0  /* -W-UF */
#define NV_USCALED_POINT                                 0x004E040C /* -W-4R */
#define NV_USCALED_POINT_V_FRACTION                            11:0 /* -W-UF */
#define NV_USCALED_POINT_V_INT                                15:12 /* -W-UF */
#define NV_USCALED_POINT_V_VALUE                               15:0 /* -W-UF */
#define NV_USCALED_POINT_U_FRACTION                           19:16 /* -W-UF */
#define NV_USCALED_POINT_U_INT                                31:20 /* -W-UF */
#define NV_USCALED_POINT_U_VALUE                               31:0 /* -W-UF */
/* usr_nv5_scaled_image_from_mem.ref */
#define NV5_SCALED_IMAGE_FROM_MEMORY                     0x00000063 /* ----C */
#define NV_063                                0x00641FFF:0x00640000 /* -W--D */
#define NV_063_NV5_SCALED_IMAGE_FROM_MEMORY              0x00640000 /* -W-4R */
#define NV_063_NV5_SCALED_IMAGE_FROM_MEMORY_HANDLE             31:0 /* -WXVF */
#define NV_063_NOP                                       0x00640100 /* -W-4R */
#define NV_063_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_063_NOTIFY                                    0x00640104 /* -W-4R */
#define NV_063_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_063_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_063_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_063_SET_NOTIFY                                0x00640104 /* -W-4R */
#define NV_063_SET_NOTIFY__ALIAS_1                    NV_063_NOTIFY /*       */
#define NV_063_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_063_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_063_SET_CONTEXT_DMA_NOTIFY                    0x00640180 /* -W-4R */
#define NV_063_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_DMA_IMAGE                     0x00640184 /* -W-4R */
#define NV_063_SET_CONTEXT_DMA_IMAGE_PARAMETER                 31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_PATTERN                       0x00640188 /* -W-4R */
#define NV_063_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_ROP                           0x0064018C /* -W-4R */
#define NV_063_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_BETA1                         0x00640190 /* -W-4R */
#define NV_063_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_BETA4                         0x00640194 /* -W-4R */
#define NV_063_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_063_SET_CONTEXT_SURFACE                       0x00640198 /* -W-4R */
#define NV_063_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_063_SET_COLOR_CONVERSION                      0x006402FC /* -W-4R */
#define NV_063_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_063_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_063_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_063_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_063_SET_COLOR_FORMAT                          0x00640300 /* -W-4R */
#define NV_063_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_063_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000001 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000002 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000003 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000004 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_V8YB8U8YA8            0x00000005 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_YB8V8YA8U8            0x00000006 /* -W--V */
#define NV_063_SET_COLOR_FORMAT_LE_R5G6B5                0x00000007 /* -W--V */
#define NV_063_SET_OPERATION                             0x00640304 /* -W-4R */
#define NV_063_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_063_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_063_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_063_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_063_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_063_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_063_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_063_CLIP_0                                    0x00640308 /* -W-4R */
#define NV_063_CLIP_0_X                                        15:0 /* -W-SF */
#define NV_063_CLIP_0_Y                                       31:16 /* -W-SF */
#define NV_063_CLIP_1                                    0x0064030C /* -W-4R */
#define NV_063_CLIP_1_WIDTH                                    15:0 /* -W-UF */
#define NV_063_CLIP_1_HEIGHT                                  31:16 /* -W-UF */
#define NV_063_RECTANGLE_OUT_0                           0x00640310 /* -W-4R */
#define NV_063_RECTANGLE_OUT_0_X                               15:0 /* -W-SF */
#define NV_063_RECTANGLE_OUT_0_Y                              31:16 /* -W-SF */
#define NV_063_RECTANGLE_OUT_1                           0x00640314 /* -W-4R */
#define NV_063_RECTANGLE_OUT_1_WIDTH                           15:0 /* -W-UF */
#define NV_063_RECTANGLE_OUT_1_HEIGHT                         31:16 /* -W-UF */
#define NV_063_DELTA_DU_DX                               0x00640318 /* -W-4R */
#define NV_063_DELTA_DU_DX_R_FRACTION                          19:0 /* -W-UF */
#define NV_063_DELTA_DU_DX_R_INT                              31:20 /* -W-SF */
#define NV_063_DELTA_DU_DX_R                                   31:0 /* -W-SF */
#define NV_063_DELTA_DV_DY                               0x0064031C /* -W-4R */
#define NV_063_DELTA_DV_DY_R_FRACTION                          19:0 /* -W-UF */
#define NV_063_DELTA_DV_DY_R_INT                              31:20 /* -W-SF */
#define NV_063_DELTA_DV_DY_R                                   31:0 /* -W-SF */
#define NV_063_SIZE                                      0x00640400 /* -W-4R */
#define NV_063_SIZE_WIDTH                                      15:0 /* -W-UF */
#define NV_063_SIZE_HEIGHT                                    31:16 /* -W-UF */
#define NV_063_FORMAT                                    0x00640404 /* -W-4R */
#define NV_063_FORMAT_PITCH                                    15:0 /* -W-SF */
#define NV_063_FORMAT_ORIGIN                                  23:16 /* -W-VF */
#define NV_063_FORMAT_ORIGIN_CENTER                      0x00000001 /* -W--V */
#define NV_063_FORMAT_ORIGIN_CORNER                      0x00000002 /* -W--V */
#define NV_063_FORMAT_INTERPOLATOR                            31:24 /* -W-VF */
#define NV_063_FORMAT_INTERPOLATOR_ZOH                   0x00000000 /* -W--V */
#define NV_063_FORMAT_INTERPOLATOR_FOH                   0x00000001 /* -W--V */
#define NV_063_OFFSET                                    0x00640408 /* -W-4R */
#define NV_063_OFFSET_VALUE                                   31:0  /* -W-UF */
#define NV_063_POINT                                     0x0064040C /* -W-4R */
#define NV_063_POINT_V_FRACTION                                11:0 /* -W-UF */
#define NV_063_POINT_V_INT                                    15:12 /* -W-UF */
#define NV_063_POINT_V_VALUE                                   15:0 /* -W-UF */
#define NV_063_POINT_U_FRACTION                               19:16 /* -W-UF */
#define NV_063_POINT_U_INT                                    31:20 /* -W-UF */
#define NV_063_POINT_U_VALUE                                   31:0 /* -W-UF */
/* usr_nv10_scaled_image_from_mem.ref */
#define NV10_SCALED_IMAGE_FROM_MEMORY                    0x00000089 /* ----C */
#define NV_089                                0x006E1FFF:0x006E0000 /* -W--D */
#define NV_089_NV10_SCALED_IMAGE_FROM_MEMORY             0x006E0000 /* -W-4R */
#define NV_089_NV10_SCALED_IMAGE_FROM_MEMORY_HANDLE            31:0 /* -WXVF */
#define NV_089_NOP                                       0x006E0100 /* -W-4R */
#define NV_089_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_089_PM_TRIGGER                                0x006E0140 /* -W-4R */
#define NV_089_PM_TRIGGER_PARAMETER                            31:0 /* -W-VF */
#define NV_089_NOTIFY                                    0x006E0104 /* -W-4R */
#define NV_089_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_089_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_089_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_089_SET_NOTIFY                                0x006E0104 /* -W-4R */
#define NV_089_SET_NOTIFY__ALIAS_1                    NV_089_NOTIFY /*       */
#define NV_089_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_089_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_089_WAIT_FOR_IDLE                             0x006E0108 /* -W-4R */
#define NV_089_WAIT_FOR_IDLE_PARAMETER                         31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_DMA_NOTIFY                    0x006E0180 /* -W-4R */
#define NV_089_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_DMA_IMAGE                     0x006E0184 /* -W-4R */
#define NV_089_SET_CONTEXT_DMA_IMAGE_PARAMETER                 31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_PATTERN                       0x006E0188 /* -W-4R */
#define NV_089_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_ROP                           0x006E018C /* -W-4R */
#define NV_089_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_BETA1                         0x006E0190 /* -W-4R */
#define NV_089_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_BETA4                         0x006E0194 /* -W-4R */
#define NV_089_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_089_SET_CONTEXT_SURFACE                       0x006E0198 /* -W-4R */
#define NV_089_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_089_SET_COLOR_CONVERSION                      0x006E02FC /* -W-4R */
#define NV_089_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_089_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_089_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_089_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_089_SET_COLOR_FORMAT                          0x006E0300 /* -W-4R */
#define NV_089_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_089_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000001 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000002 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000003 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000004 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_V8YB8U8YA8            0x00000005 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_YB8V8YA8U8            0x00000006 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_R5G6B5                0x00000007 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_Y8                    0x00000008 /* -W--V */
#define NV_089_SET_COLOR_FORMAT_LE_AY8                   0x00000009 /* -W--V */
#define NV_089_SET_OPERATION                             0x006E0304 /* -W-4R */
#define NV_089_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_089_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_089_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_089_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_089_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_089_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_089_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_089_CLIP_0                                    0x006E0308 /* -W-4R */
#define NV_089_CLIP_0_X                                        15:0 /* -W-SF */
#define NV_089_CLIP_0_Y                                       31:16 /* -W-SF */
#define NV_089_CLIP_1                                    0x006E030C /* -W-4R */
#define NV_089_CLIP_1_WIDTH                                    15:0 /* -W-UF */
#define NV_089_CLIP_1_HEIGHT                                  31:16 /* -W-UF */
#define NV_089_RECTANGLE_OUT_0                           0x006E0310 /* -W-4R */
#define NV_089_RECTANGLE_OUT_0_X                               15:0 /* -W-SF */
#define NV_089_RECTANGLE_OUT_0_Y                              31:16 /* -W-SF */
#define NV_089_RECTANGLE_OUT_1                           0x006E0314 /* -W-4R */
#define NV_089_RECTANGLE_OUT_1_WIDTH                           15:0 /* -W-UF */
#define NV_089_RECTANGLE_OUT_1_HEIGHT                         31:16 /* -W-UF */
#define NV_089_DELTA_DU_DX                               0x006E0318 /* -W-4R */
#define NV_089_DELTA_DU_DX_R_FRACTION                          19:0 /* -W-UF */
#define NV_089_DELTA_DU_DX_R_INT                              31:20 /* -W-SF */
#define NV_089_DELTA_DU_DX_R                                   31:0 /* -W-SF */
#define NV_089_DELTA_DV_DY                               0x006E031C /* -W-4R */
#define NV_089_DELTA_DV_DY_R_FRACTION                          19:0 /* -W-UF */
#define NV_089_DELTA_DV_DY_R_INT                              31:20 /* -W-SF */
#define NV_089_DELTA_DV_DY_R                                   31:0 /* -W-SF */
#define NV_089_SIZE                                      0x006E0400 /* -W-4R */
#define NV_089_SIZE_WIDTH                                      15:0 /* -W-UF */
#define NV_089_SIZE_HEIGHT                                    31:16 /* -W-UF */
#define NV_089_FORMAT                                    0x006E0404 /* -W-4R */
#define NV_089_FORMAT_PITCH                                    15:0 /* -W-SF */
#define NV_089_FORMAT_ORIGIN                                  23:16 /* -W-VF */
#define NV_089_FORMAT_ORIGIN_CENTER                      0x00000001 /* -W--V */
#define NV_089_FORMAT_ORIGIN_CORNER                      0x00000002 /* -W--V */
#define NV_089_FORMAT_INTERPOLATOR                            31:24 /* -W-VF */
#define NV_089_FORMAT_INTERPOLATOR_ZOH                   0x00000000 /* -W--V */
#define NV_089_FORMAT_INTERPOLATOR_FOH                   0x00000001 /* -W--V */
#define NV_089_OFFSET                                    0x006E0408 /* -W-4R */
#define NV_089_OFFSET_VALUE                                   31:0  /* -W-UF */
#define NV_089_POINT                                     0x006E040C /* -W-4R */
#define NV_089_POINT_V_FRACTION                                11:0 /* -W-UF */
#define NV_089_POINT_V_INT                                    15:12 /* -W-UF */
#define NV_089_POINT_V_VALUE                                   15:0 /* -W-UF */
#define NV_089_POINT_U_FRACTION                               19:16 /* -W-UF */
#define NV_089_POINT_U_INT                                    31:20 /* -W-UF */
#define NV_089_POINT_U_VALUE                                   31:0 /* -W-UF */
/* usr_nv11_scaled_image_from_mem.ref */
#define NV11_SCALED_IMAGE_FROM_MEMORY                    0x00000089 /* ----C */
#define NV_1189                               0x006E1FFF:0x006E0000 /* -W--D */
#define NV_1189_NV11_SCALED_IMAGE_FROM_MEMORY            0x006E0000 /* -W-4R */
#define NV_1189_NV11_SCALED_IMAGE_FROM_MEMORY_HANDLE           31:0 /* -WXVF */
#define NV_1189_NOP                                      0x006E0100 /* -W-4R */
#define NV_1189_NOP_PARAMETER                                  31:0 /* -W-VF */
#define NV_1189_PM_TRIGGER                               0x006E0140 /* -W-4R */
#define NV_1189_PM_TRIGGER_PARAMETER                           31:0 /* -W-VF */
#define NV_1189_NOTIFY                                   0x006E0104 /* -W-4R */
#define NV_1189_NOTIFY_STYLE                                   31:0 /* -W-VF */
#define NV_1189_NOTIFY_STYLE_WRITE_ONLY                  0x00000000 /* -W--V */
#define NV_1189_NOTIFY_STYLE_WRITE_THEN_AWAKEN           0x00000001 /* -W--V */
#define NV_1189_SET_NOTIFY                               0x006E0104 /* -W-4R */
#define NV_1189_SET_NOTIFY__ALIAS_1                  NV_1189_NOTIFY /*       */
#define NV_1189_SET_NOTIFY_PARAMETER                           31:0 /* -W-VF */
#define NV_1189_SET_NOTIFY_PARAMETER_WRITE               0x00000000 /* -W--V */
#define NV_1189_WAIT_FOR_IDLE                            0x006E0108 /* -W-4R */
#define NV_1189_WAIT_FOR_IDLE_PARAMETER                        31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_DMA_NOTIFY                   0x006E0180 /* -W-4R */
#define NV_1189_SET_CONTEXT_DMA_NOTIFY_PARAMETER               31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_DMA_IMAGE                    0x006E0184 /* -W-4R */
#define NV_1189_SET_CONTEXT_DMA_IMAGE_PARAMETER                31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_PATTERN                      0x006E0188 /* -W-4R */
#define NV_1189_SET_CONTEXT_PATTERN_PARAMETER                  31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_ROP                          0x006E018C /* -W-4R */
#define NV_1189_SET_CONTEXT_ROP_PARAMETER                      31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_BETA1                        0x006E0190 /* -W-4R */
#define NV_1189_SET_CONTEXT_BETA1_PARAMETER                    31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_BETA4                        0x006E0194 /* -W-4R */
#define NV_1189_SET_CONTEXT_BETA4_PARAMETER                    31:0 /* -W-VF */
#define NV_1189_SET_CONTEXT_SURFACE                      0x006E0198 /* -W-4R */
#define NV_1189_SET_CONTEXT_SURFACE_PARAMETER                  31:0 /* -W-VF */
#define NV_1189_SET_COLOR_CONVERSION                     0x006E02FC /* -W-4R */
#define NV_1189_SET_COLOR_CONVERSION_TYPE                      31:0 /* -W-VF */
#define NV_1189_SET_COLOR_CONVERSION_TYPE_DITHER         0x00000000 /* -W--V */
#define NV_1189_SET_COLOR_CONVERSION_TYPE_TRUNCATE       0x00000001 /* -W--V */
#define NV_1189_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE 0x00000002 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT                         0x006E0300 /* -W-4R */
#define NV_1189_SET_COLOR_FORMAT_LE                            31:0 /* -W-VF */
#define NV_1189_SET_COLOR_FORMAT_LE_A1R5G5B5             0x00000001 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_X1R5G5B5             0x00000002 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_A8R8G8B8             0x00000003 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_X8R8G8B8             0x00000004 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_V8YB8U8YA8           0x00000005 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_YB8V8YA8U8           0x00000006 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_R5G6B5               0x00000007 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_Y8                   0x00000008 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_AY8                  0x00000009 /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_EYB8ECR8EYA8ECB8     0x0000000A /* -W--V */
#define NV_1189_SET_COLOR_FORMAT_LE_ECR8EYB8ECB8EYA8     0x0000000B /* -W--V */
#define NV_1189_SET_OPERATION                            0x006E0304 /* -W-4R */
#define NV_1189_SET_OPERATION_MODE                             31:0 /* -W-VF */
#define NV_1189_SET_OPERATION_MODE_SRCCOPY_AND           0x00000000 /* -W--V */
#define NV_1189_SET_OPERATION_MODE_ROP_AND               0x00000001 /* -W--V */
#define NV_1189_SET_OPERATION_MODE_BLEND_AND             0x00000002 /* -W--V */
#define NV_1189_SET_OPERATION_MODE_SRCCOPY               0x00000003 /* -W--V */
#define NV_1189_SET_OPERATION_MODE_SRCCOPY_PREMULT       0x00000004 /* -W--V */
#define NV_1189_SET_OPERATION_MODE_BLEND_PREMULT         0x00000005 /* -W--V */
#define NV_1189_CLIP_0                                   0x006E0308 /* -W-4R */
#define NV_1189_CLIP_0_X                                       15:0 /* -W-SF */
#define NV_1189_CLIP_0_Y                                      31:16 /* -W-SF */
#define NV_1189_CLIP_1                                   0x006E030C /* -W-4R */
#define NV_1189_CLIP_1_WIDTH                                   15:0 /* -W-UF */
#define NV_1189_CLIP_1_HEIGHT                                 31:16 /* -W-UF */
#define NV_1189_RECTANGLE_OUT_0                          0x006E0310 /* -W-4R */
#define NV_1189_RECTANGLE_OUT_0_X                              15:0 /* -W-SF */
#define NV_1189_RECTANGLE_OUT_0_Y                             31:16 /* -W-SF */
#define NV_1189_RECTANGLE_OUT_1                          0x006E0314 /* -W-4R */
#define NV_1189_RECTANGLE_OUT_1_WIDTH                          15:0 /* -W-UF */
#define NV_1189_RECTANGLE_OUT_1_HEIGHT                        31:16 /* -W-UF */
#define NV_1189_DELTA_DU_DX                              0x006E0318 /* -W-4R */
#define NV_1189_DELTA_DU_DX_R_FRACTION                         19:0 /* -W-UF */
#define NV_1189_DELTA_DU_DX_R_INT                             31:20 /* -W-SF */
#define NV_1189_DELTA_DU_DX_R                                  31:0 /* -W-SF */
#define NV_1189_DELTA_DV_DY                              0x006E031C /* -W-4R */
#define NV_1189_DELTA_DV_DY_R_FRACTION                         19:0 /* -W-UF */
#define NV_1189_DELTA_DV_DY_R_INT                             31:20 /* -W-SF */
#define NV_1189_DELTA_DV_DY_R                                  31:0 /* -W-SF */
#define NV_1189_SIZE                                     0x006E0400 /* -W-4R */
#define NV_1189_SIZE_WIDTH                                     15:0 /* -W-UF */
#define NV_1189_SIZE_HEIGHT                                   31:16 /* -W-UF */
#define NV_1189_FORMAT                                   0x006E0404 /* -W-4R */
#define NV_1189_FORMAT_PITCH                                   15:0 /* -W-SF */
#define NV_1189_FORMAT_ORIGIN                                 23:16 /* -W-VF */
#define NV_1189_FORMAT_ORIGIN_CENTER                     0x00000001 /* -W--V */
#define NV_1189_FORMAT_ORIGIN_CORNER                     0x00000002 /* -W--V */
#define NV_1189_FORMAT_INTERPOLATOR                           31:24 /* -W-VF */
#define NV_1189_FORMAT_INTERPOLATOR_ZOH                  0x00000000 /* -W--V */
#define NV_1189_FORMAT_INTERPOLATOR_FOH                  0x00000001 /* -W--V */
#define NV_1189_OFFSET                                   0x006E0408 /* -W-4R */
#define NV_1189_OFFSET_VALUE                                  31:0  /* -W-UF */
#define NV_1189_POINT                                    0x006E040C /* -W-4R */
#define NV_1189_POINT_V_FRACTION                               11:0 /* -W-UF */
#define NV_1189_POINT_V_INT                                   15:12 /* -W-UF */
#define NV_1189_POINT_V_VALUE                                  15:0 /* -W-UF */
#define NV_1189_POINT_U_FRACTION                              19:16 /* -W-UF */
#define NV_1189_POINT_U_INT                                   31:20 /* -W-UF */
#define NV_1189_POINT_U_VALUE                                  31:0 /* -W-UF */
/* usr_dvd_subpicture.ref */
#define NV4_DVD_SUBPICTURE                               0x00000038 /* ----C */
#define NV_038                                0x004F1FFF:0x004F0000 /* -W--D */
#define NV_038_NV4_DVD_SUBPICTURE                        0x004F0000 /* -W-4R */
#define NV_038_NOP                                       0x004F0100 /* -W-4R */
#define NV_038_NOP_PARAMETER                                   31:0 /* -WXVF */
#define NV_038_NOTIFY                                    0x004f0104 /* -W-4R */
#define NV_038_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_038_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_038_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_038_NOTIFY__ALIAS_1                    NV_038_SET_NOTIFY /*       */
#define NV_038_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_038_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_038_SET_CONTEXT_DMA_NOTIFY                    0x004f0180 /* -W-4R */
#define NV_038_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_038_SET_CONTEXT_DMA_OVERLAY                   0x004f0184 /* -W-4R */
#define NV_038_SET_CONTEXT_DMA_OVERLAY_PARAMETER               31:0 /* -W-VF */
#define NV_038_SET_CONTEXT_DMA_IMAGEIN                   0x004f0188 /* -W-4R */
#define NV_038_SET_CONTEXT_DMA_IMAGEIN_PARAMETER               31:0 /* -W-VF */
#define NV_038_SET_CONTEXT_DMA_IMAGEOUT                  0x004f018C /* -W-4R */
#define NV_038_SET_CONTEXT_DMA_IMAGEOUT_PARAMETER              31:0 /* -W-VF */
#define NV_038_IMAGEOUT_POINT                            0x004F0300 /* -W-4R */
#define NV_038_IMAGEOUT_POINT_X                                15:0 /* -W-SF */
#define NV_038_IMAGEOUT_POINT_Y                               31:16 /* -W-SF */
#define NV_038_IMAGEOUT_SIZE                             0x004F0304 /* -W-4R */
#define NV_038_IMAGEOUT_SIZE_WIDTH                             15:0 /* -W-UF */
#define NV_038_IMAGEOUT_SIZE_HEIGHT                           31:16 /* -W-UF */
#define NV_038_IMAGEOUT_FMT                              0x004F0308 /* -W-4R */
#define NV_038_IMAGEOUT_FMT_PITCH                              15:0 /* -W-UF */
#define NV_038_IMAGEOUT_FMT_COLOR                             31:16 /* -W-UF */
#define NV_038_IMAGEOUT_FMT_COLOR_INVALID                0x00000000 /* -W--V */
#define NV_038_IMAGEOUT_FMT_COLOR_LE_V8YB8U8YA8          0x00000001 /* -W--V */
#define NV_038_IMAGEOUT_FMT_COLOR_LE_YB8V8YA8U8          0x00000002 /* -W--V */
#define NV_038_IMAGEOUT_OFFSET                           0x004F030C /* -W-4R */
#define NV_038_IMAGEOUT_OFFSET_VALUE                           31:0 /* -W-UF */
#define NV_038_IMAGEIN_DELTA_DU_DX                       0x004F0310 /* -W-4R */
#define NV_038_IMAGEIN_DELTA_DU_DX_R_FRACTION                  19:0 /* -W-SF */
#define NV_038_IMAGEIN_DELTA_DU_DX_R_INT                      31:20 /* -W-UF */
#define NV_038_IMAGEIN_DELTA_DU_DX_R                           31:0 /* -W-UF */
#define NV_038_IMAGEIN_DELTA_DV_DY                       0x004F0314 /* -W-4R */
#define NV_038_IMAGEIN_DELTA_DV_DY_R_FRACTION                  19:0 /* -W-SF */
#define NV_038_IMAGEIN_DELTA_DV_DY_R_INT                      31:20 /* -W-UF */
#define NV_038_IMAGEIN_DELTA_DV_DY_R                           31:0 /* -W-UF */
#define NV_038_IMAGEIN_SIZE                              0x004F0318 /* -W-4R */
#define NV_038_IMAGEIN_SIZE_WIDTH                              15:0 /* -W-UF */
#define NV_038_IMAGEIN_SIZE_HEIGHT                            31:16 /* -W-UF */
#define NV_038_IMAGEIN_FMT                               0x004F031C /* -W-4R */
#define NV_038_IMAGEIN_FMT_PITCH                               15:0 /* -W-UF */
#define NV_038_IMAGEIN_FMT_COLOR                              31:16 /* -W-VF */
#define NV_038_IMAGEIN_FMT_COLOR_INVALID                 0x00000000 /* -W--V */
#define NV_038_IMAGEIN_FMT_COLOR_LE_V8YB8U8YA8           0x00000001 /* -W--V */
#define NV_038_IMAGEIN_FMT_COLOR_LE_YB8V8YA8U8           0x00000002 /* -W--V */
#define NV_038_IMAGEIN_OFFSET                            0x004F0320 /* -W-4R */
#define NV_038_IMAGEIN_OFFSET_VALUE                            31:0 /* -W-UF */
#define NV_038_IMAGEIN_POINT                             0x004F0324 /* -W-4R */
#define NV_038_IMAGEIN_POINT_U_FRACTION                         3:0 /* -W-UF */
#define NV_038_IMAGEIN_POINT_U_INT                             15:4 /* -W-UF */
#define NV_038_IMAGEIN_POINT_U_VALUE                           15:0 /* -W-UF */
#define NV_038_IMAGEIN_POINT_V_FRACTION                       19:16 /* -W-UF */
#define NV_038_IMAGEIN_POINT_V_INT                            31:20 /* -W-UF */
#define NV_038_IMAGEIN_POINT_V_VALUE                           31:0 /* -W-UF */
#define NV_038_OVERLAY_DELTA_DU_DX                       0x004F0328 /* -W-4R */
#define NV_038_OVERLAY_DELTA_DU_DX_R_FRACTION                  19:0 /* -W-SF */
#define NV_038_OVERLAY_DELTA_DU_DX_R_INT                      31:20 /* -W-UF */
#define NV_038_OVERLAY_DELTA_DU_DX_R                           31:0 /* -W-UF */
#define NV_038_OVERLAY_DELTA_DV_DY                       0x004F032C /* -W-4R */
#define NV_038_OVERLAY_DELTA_DV_DY_R_FRACTION                  19:0 /* -W-SF */
#define NV_038_OVERLAY_DELTA_DV_DY_R_INT                      31:20 /* -W-UF */
#define NV_038_OVERLAY_DELTA_DV_DY_R                           31:0 /* -W-UF */
#define NV_038_OVERLAY_SIZE                              0x004F0330 /* -W-4R */
#define NV_038_OVERLAY_SIZE_WIDTH                              15:0 /* -W-UF */
#define NV_038_OVERLAY_SIZE_HEIGHT                            31:16 /* -W-UF */
#define NV_038_OVERLAY_FMT                               0x004F0334 /* -W-4R */
#define NV_038_OVERLAY_FMT_PITCH                               15:0 /* -W-UF */
#define NV_038_OVERLAY_FMT_COLOR                              31:16 /* -W-VF */
#define NV_038_OVERLAY_FMT_COLOR_INVALID                 0x00000000 /* -W--V */
#define NV_038_OVERLAY_FMT_COLOR_LE_A8V8U8Y8             0x00000001 /* -W--V */
#define NV_038_OVERLAY_FMT_COLOR_LE_A4V6YB6A4U6YA6       0x00000002 /* -W--V */
#define NV_038_OVERLAY_FMT_COLOR_LE_TRANSPARENT          0x00000003 /* -W--V */
#define NV_038_OVERLAY_OFFSET                            0x004F0338 /* -W-4R */
#define NV_038_OVERLAY_OFFSET_VALUE                           31:0  /* -W-UF */
#define NV_038_OVERLAY_POINT                             0x004F033C /* -W-4R */
#define NV_038_OVERLAY_POINT_U_FRACTION                         3:0 /* -W-UF */
#define NV_038_OVERLAY_POINT_U_INT                             15:4 /* -W-UF */
#define NV_038_OVERLAY_POINT_U_VALUE                           15:0 /* -W-UF */
#define NV_038_OVERLAY_POINT_V_FRACTION                       19:16 /* -W-UF */
#define NV_038_OVERLAY_POINT_V_INT                            31:20 /* -W-UF */
#define NV_038_OVERLAY_POINT_V_VALUE                           31:0 /* -W-UF */
/* usr_nv10_dvd_subpicture.ref */
#define NV10_DVD_SUBPICTURE                              0x00000088 /* ----C */
#define NV_088                                0x006F1FFF:0x006F0000 /* -W--D */
#define NV_088_NV4_DVD_SUBPICTURE                        0x006F0000 /* -W-4R */
#define NV_088_NOP                                       0x006F0100 /* -W-4R */
#define NV_088_NOP_PARAMETER                                   31:0 /* -WXVF */
#define NV_088_NOTIFY                                    0x006F0104 /* -W-4R */
#define NV_088_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_088_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_088_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_088_NOTIFY__ALIAS_1                    NV_088_SET_NOTIFY /*       */
#define NV_088_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_088_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_088_WAIT_FOR_IDLE                             0x006F0108 /* -W-4R */
#define NV_088_WAIT_FOR_IDLE_PARAMETER                         31:0 /* -W-VF */
#define NV_088_SET_CONTEXT_DMA_NOTIFY                    0x006F0180 /* -W-4R */
#define NV_088_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_088_SET_CONTEXT_DMA_OVERLAY                   0x006F0184 /* -W-4R */
#define NV_088_SET_CONTEXT_DMA_OVERLAY_PARAMETER               31:0 /* -W-VF */
#define NV_088_SET_CONTEXT_DMA_IMAGEIN                   0x006F0188 /* -W-4R */
#define NV_088_SET_CONTEXT_DMA_IMAGEIN_PARAMETER               31:0 /* -W-VF */
#define NV_088_SET_CONTEXT_DMA_IMAGEOUT                  0x006F018C /* -W-4R */
#define NV_088_SET_CONTEXT_DMA_IMAGEOUT_PARAMETER              31:0 /* -W-VF */
#define NV_088_IMAGEOUT_POINT                            0x006F0300 /* -W-4R */
#define NV_088_IMAGEOUT_POINT_X                                15:0 /* -W-SF */
#define NV_088_IMAGEOUT_POINT_Y                               31:16 /* -W-SF */
#define NV_088_IMAGEOUT_SIZE                             0x006F0304 /* -W-4R */
#define NV_088_IMAGEOUT_SIZE_WIDTH                             15:0 /* -W-UF */
#define NV_088_IMAGEOUT_SIZE_HEIGHT                           31:16 /* -W-UF */
#define NV_088_IMAGEOUT_FMT                              0x006F0308 /* -W-4R */
#define NV_088_IMAGEOUT_FMT_PITCH                              15:0 /* -W-UF */
#define NV_088_IMAGEOUT_FMT_COLOR                             31:16 /* -W-UF */
#define NV_088_IMAGEOUT_FMT_COLOR_INVALID                0x00000000 /* -W--V */
#define NV_088_IMAGEOUT_FMT_COLOR_LE_V8YB8U8YA8          0x00000001 /* -W--V */
#define NV_088_IMAGEOUT_FMT_COLOR_LE_YB8V8YA8U8          0x00000002 /* -W--V */
#define NV_088_IMAGEOUT_OFFSET                           0x006F030C /* -W-4R */
#define NV_088_IMAGEOUT_OFFSET_VALUE                           31:0 /* -W-UF */
#define NV_088_IMAGEIN_DELTA_DU_DX                       0x006F0310 /* -W-4R */
#define NV_088_IMAGEIN_DELTA_DU_DX_R_FRACTION                  19:0 /* -W-SF */
#define NV_088_IMAGEIN_DELTA_DU_DX_R_INT                      31:20 /* -W-UF */
#define NV_088_IMAGEIN_DELTA_DU_DX_R                           31:0 /* -W-UF */
#define NV_088_IMAGEIN_DELTA_DV_DY                       0x006F0314 /* -W-4R */
#define NV_088_IMAGEIN_DELTA_DV_DY_R_FRACTION                  19:0 /* -W-SF */
#define NV_088_IMAGEIN_DELTA_DV_DY_R_INT                      31:20 /* -W-UF */
#define NV_088_IMAGEIN_DELTA_DV_DY_R                           31:0 /* -W-UF */
#define NV_088_IMAGEIN_SIZE                              0x006F0318 /* -W-4R */
#define NV_088_IMAGEIN_SIZE_WIDTH                              15:0 /* -W-UF */
#define NV_088_IMAGEIN_SIZE_HEIGHT                            31:16 /* -W-UF */
#define NV_088_IMAGEIN_FMT                               0x006F031C /* -W-4R */
#define NV_088_IMAGEIN_FMT_PITCH                               15:0 /* -W-UF */
#define NV_088_IMAGEIN_FMT_COLOR                              31:16 /* -W-VF */
#define NV_088_IMAGEIN_FMT_COLOR_INVALID                 0x00000000 /* -W--V */
#define NV_088_IMAGEIN_FMT_COLOR_LE_V8YB8U8YA8           0x00000001 /* -W--V */
#define NV_088_IMAGEIN_FMT_COLOR_LE_YB8V8YA8U8           0x00000002 /* -W--V */
#define NV_088_IMAGEIN_OFFSET                            0x006F0320 /* -W-4R */
#define NV_088_IMAGEIN_OFFSET_VALUE                            31:0 /* -W-UF */
#define NV_088_IMAGEIN_POINT                             0x006F0324 /* -W-4R */
#define NV_088_IMAGEIN_POINT_U_FRACTION                         3:0 /* -W-UF */
#define NV_088_IMAGEIN_POINT_U_INT                             15:4 /* -W-UF */
#define NV_088_IMAGEIN_POINT_U_VALUE                           15:0 /* -W-UF */
#define NV_088_IMAGEIN_POINT_V_FRACTION                       19:16 /* -W-UF */
#define NV_088_IMAGEIN_POINT_V_INT                            31:20 /* -W-UF */
#define NV_088_IMAGEIN_POINT_V_VALUE                           31:0 /* -W-UF */
#define NV_088_OVERLAY_DELTA_DU_DX                       0x006F0328 /* -W-4R */
#define NV_088_OVERLAY_DELTA_DU_DX_R_FRACTION                  19:0 /* -W-SF */
#define NV_088_OVERLAY_DELTA_DU_DX_R_INT                      31:20 /* -W-UF */
#define NV_088_OVERLAY_DELTA_DU_DX_R                           31:0 /* -W-UF */
#define NV_088_OVERLAY_DELTA_DV_DY                       0x006F032C /* -W-4R */
#define NV_088_OVERLAY_DELTA_DV_DY_R_FRACTION                  19:0 /* -W-SF */
#define NV_088_OVERLAY_DELTA_DV_DY_R_INT                      31:20 /* -W-UF */
#define NV_088_OVERLAY_DELTA_DV_DY_R                           31:0 /* -W-UF */
#define NV_088_OVERLAY_SIZE                              0x006F0330 /* -W-4R */
#define NV_088_OVERLAY_SIZE_WIDTH                              15:0 /* -W-UF */
#define NV_088_OVERLAY_SIZE_HEIGHT                            31:16 /* -W-UF */
#define NV_088_OVERLAY_FMT                               0x006F0334 /* -W-4R */
#define NV_088_OVERLAY_FMT_PITCH                               15:0 /* -W-UF */
#define NV_088_OVERLAY_FMT_COLOR                              31:16 /* -W-VF */
#define NV_088_OVERLAY_FMT_COLOR_INVALID                 0x00000000 /* -W--V */
#define NV_088_OVERLAY_FMT_COLOR_LE_A8V8U8Y8             0x00000001 /* -W--V */
#define NV_088_OVERLAY_FMT_COLOR_LE_A4V6YB6A4U6YA6       0x00000002 /* -W--V */
#define NV_088_OVERLAY_FMT_COLOR_LE_TRANSPARENT          0x00000003 /* -W--V */
#define NV_088_OVERLAY_OFFSET                            0x006F0338 /* -W-4R */
#define NV_088_OVERLAY_OFFSET_VALUE                           31:0  /* -W-UF */
#define NV_088_OVERLAY_POINT                             0x006F033C /* -W-4R */
#define NV_088_OVERLAY_POINT_U_FRACTION                         3:0 /* -W-UF */
#define NV_088_OVERLAY_POINT_U_INT                             15:4 /* -W-UF */
#define NV_088_OVERLAY_POINT_U_VALUE                           15:0 /* -W-UF */
#define NV_088_OVERLAY_POINT_V_FRACTION                       19:16 /* -W-UF */
#define NV_088_OVERLAY_POINT_V_INT                            31:20 /* -W-UF */
#define NV_088_OVERLAY_POINT_V_VALUE                           31:0 /* -W-UF */
/* usr_nv4_surface.ref */
#define NV4_SURFACE                                      0x00000042 /* ----C */
#define NV_042                                0x00611FFF:0x00610000 /* -W--D */
#define NV_042_NV4_SURFACE                               0x00610000 /* -W-4R */
#define NV_042_NOP                                       0x00610100 /* -W-4R */
#define NV_042_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_042_PM_TRIGGER                                0x00610140 /* -W-4R */
#define NV_042_PM_TRIGGER_PARAMETER                            31:0 /* -W-VF */
#define NV_042_NOTIFY                                    0x00610104 /* -W-4R */
#define NV_042_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_042_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_042_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_042_SET_NOTIFY                                0x00610104 /* -W-4R */
#define NV_042_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_042_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_042_SET_CONTEXT_DMA_NOTIFY                    0x00610180 /* -W-4R */
#define NV_042_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_042_SET_CONTEXT_DMA_IMAGE_SOURCE              0x00610184 /* -W-4R */
#define NV_042_SET_CONTEXT_DMA_IMAGE_SOURCE_PARAMETER          31:0 /* -W-VF */
#define NV_042_SET_CONTEXT_DMA_IMAGE_DESTIN              0x00610188 /* -W-4R */
#define NV_042_SET_CONTEXT_DMA_IMAGE_DESTIN_PARAMETER          31:0 /* -W-VF */
#define NV_042_SET_IMAGE_OUTPUT_SOURCE                   0x00610200 /* -W-4R */
#define NV_042_SET_IMAGE_OUTPUT_SOURCE_PARAMETER               31:0 /* -W-VF */
#define NV_042_SET_IMAGE_OUTPUT_DESTIN                   0x00610204 /* -W-4R */
#define NV_042_SET_IMAGE_OUTPUT_DESTIN_PARAMETER               31:0 /* -W-VF */
#define NV_042_SET_IMAGE_INPUT_DESTIN(i)         (0x00610208+(i)*4) /* -W-4A */
#define NV_042_SET_IMAGE_INPUT_DESTIN__SIZE_1                    62 /*       */
#define NV_042_SET_IMAGE_INPUT_DESTIN_PARAMETER                31:0 /* -W-VF */
#define NV_042_FMT                                       0x00610300 /* -W-4R */
#define NV_042_FMT_VALUE                                       31:0 /* -WXUF */
#define NV_042_FMT_VALUE_LE_Y8                           0x00000001 /* -W--V */
#define NV_042_FMT_VALUE_LE_X1R5G5B5_Z1R5G5B5            0x00000002 /* -W--V */
#define NV_042_FMT_VALUE_LE_X1R5G5B5_O1R5G5B5            0x00000003 /* -W--V */
#define NV_042_FMT_VALUE_LE_R5G6B5                       0x00000004 /* -W--V */
#define NV_042_FMT_VALUE_LE_Y16                          0x00000005 /* -W--V */
#define NV_042_FMT_VALUE_LE_X8R8G8B8_Z8R8G8B8            0x00000006 /* -W--V */
#define NV_042_FMT_VALUE_LE_X8R8G8B8_O8R8G8B8            0x00000007 /* -W--V */
#define NV_042_FMT_VALUE_LE_X1A7R8G8B8_Z1A7R8G8B8        0x00000008 /* -W--V */
#define NV_042_FMT_VALUE_LE_X1A7R8G8B8_O1A7R8G8B8        0x00000009 /* -W--V */
#define NV_042_FMT_VALUE_LE_A8R8G8B8                     0x0000000a /* -W--V */
#define NV_042_FMT_VALUE_LE_Y32                          0x0000000b /* -W--V */
#define NV_042_PITCH                                     0x00610304 /* -W-4R */
#define NV_042_PITCH_SOURCE                                    15:0 /* -WXUF */
#define NV_042_PITCH_DESTIN                                   31:16 /* -WXUF */
#define NV_042_OFFSET_SOURCE                             0x00610308 /* -W-4R */
#define NV_042_OFFSET_SOURCE_LINADRS                           31:0 /* -WIUF */
#define NV_042_OFFSET_SOURCE_LINADRS_0                   0x00000000 /* -WI-V */
#define NV_042_OFFSET_DESTIN                             0x0061030C /* -W-4R */
#define NV_042_OFFSET_DESTIN_LINADRS                           31:0 /* -WIUF */
#define NV_042_OFFSET_DESTIN_LINADRS_0                   0x00000000 /* -WI-V */
/* usr_nv10_surface.ref */
#define NV10_CONTEXT_SURFACES_2D                         0x00000062 /* ----C */
#define NV_062                                0x006D1FFF:0x006D0000 /* -W--D */
#define NV_062_NV10_CONTEXT_SURFACES_2D                  0x006D0000 /* -W-4R */
#define NV_062_NV10_CONTEXT_SURFACES_2D_HANDLE                 31:0 /* -WXVF */
#define NV_062_NOP                                       0x006D0100 /* -W-4R */
#define NV_062_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_062_PM_TRIGGER                                0x006D0140 /* -W-4R */
#define NV_062_PM_TRIGGER_PARAMETER                            31:0 /* -W-VF */
#define NV_062_NOTIFY                                    0x006D0104 /* -W-4R */
#define NV_062_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_062_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_062_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_062_SET_NOTIFY                                0x006D0104 /* -W-4R */
#define NV_062_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_062_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_062_WAIT_FOR_IDLE                             0x006D0108 /* -W-4R */
#define NV_062_WAIT_FOR_IDLE_PARAMETER                         31:0 /* -W-VF */
#define NV_062_SET_CONTEXT_DMA_NOTIFY                    0x006D0180 /* -W-4R */
#define NV_062_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_062_SET_CONTEXT_DMA_IMAGE_SOURCE              0x006D0184 /* -W-4R */
#define NV_062_SET_CONTEXT_DMA_IMAGE_SOURCE_PARAMETER          31:0 /* -W-VF */
#define NV_062_SET_CONTEXT_DMA_IMAGE_DESTIN              0x006D0188 /* -W-4R */
#define NV_062_SET_CONTEXT_DMA_IMAGE_DESTIN_PARAMETER          31:0 /* -W-VF */
#define NV_062_FMT                                       0x006D0300 /* -W-4R */
#define NV_062_FMT_VALUE                                       31:0 /* -WXUF */
#define NV_062_FMT_VALUE_LE_Y8                           0x00000001 /* -W--V */
#define NV_062_FMT_VALUE_LE_X1R5G5B5_Z1R5G5B5            0x00000002 /* -W--V */
#define NV_062_FMT_VALUE_LE_X1R5G5B5_O1R5G5B5            0x00000003 /* -W--V */
#define NV_062_FMT_VALUE_LE_R5G6B5                       0x00000004 /* -W--V */
#define NV_062_FMT_VALUE_LE_Y16                          0x00000005 /* -W--V */
#define NV_062_FMT_VALUE_LE_X8R8G8B8_Z8R8G8B8            0x00000006 /* -W--V */
#define NV_062_FMT_VALUE_LE_X8R8G8B8_O8R8G8B8            0x00000007 /* -W--V */
#define NV_062_FMT_VALUE_LE_X1A7R8G8B8_Z1A7R8G8B8        0x00000008 /* -W--V */
#define NV_062_FMT_VALUE_LE_X1A7R8G8B8_O1A7R8G8B8        0x00000009 /* -W--V */
#define NV_062_FMT_VALUE_LE_A8R8G8B8                     0x0000000a /* -W--V */
#define NV_062_FMT_VALUE_LE_Y32                          0x0000000b /* -W--V */
#define NV_062_PITCH                                     0x006D0304 /* -W-4R */
#define NV_062_PITCH_SOURCE                                    15:0 /* -WXUF */
#define NV_062_PITCH_DESTIN                                   31:16 /* -WXUF */
#define NV_062_OFFSET_SOURCE                             0x006D0308 /* -W-4R */
#define NV_062_OFFSET_SOURCE_LINADRS                           31:0 /* -WIUF */
#define NV_062_OFFSET_SOURCE_LINADRS_0                   0x00000000 /* -WI-V */
#define NV_062_OFFSET_DESTIN                             0x006D030C /* -W-4R */
#define NV_062_OFFSET_DESTIN_LINADRS                           31:0 /* -WIUF */
#define NV_062_OFFSET_DESTIN_LINADRS_0                   0x00000000 /* -WI-V */
/* usr_nv4_swizzled_surface.ref */
#define NV4_SWIZZLED_SURFACE                             0x00000052 /* ----C */
#define NV_052                                0x00631FFF:0x00630000 /* -W--D */
#define NV_052_NV4_SWIZZLED_SURFACE                      0x00630000 /* -W-4R */
#define NV_052_NOP                                       0x00630100 /* -W-4R */
#define NV_052_NOP_PARAMETER                                   31:0 /* -WXVF */
#define NV_052_NOTIFY                                    0x00630104 /* -W-4R */
#define NV_052_NOTIFY_STYLE                                    31:0 /* -WXVF */
#define NV_052_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_052_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_052_NOTIFY__ALIAS_1                    NV_052_SET_NOTIFY /*       */
#define NV_052_SET_NOTIFY_PARAMETER                            31:0 /* -WXVF */
#define NV_052_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_052_SET_CONTEXT_DMA_NOTIFY                    0x00630180 /* -W-4R */
#define NV_052_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -WXVF */
#define NV_052_SET_CONTEXT_DMA_IMAGE                     0x00630184 /* -W-4R */
#define NV_052_SET_CONTEXT_DMA_IMAGE_PARAMETER                 31:0 /* -W-VF */
#define NV_052_SET_IMAGE_OUTPUT                          0x00630200 /* -W-4R */
#define NV_052_SET_IMAGE_OUTPUT_PARAMETER                      31:0 /* -W-VF */
#define NV_052_SET_IMAGE_INPUT(i)                (0x00630204+(i)*4) /* -W-4A */
#define NV_052_SET_IMAGE_INPUT__SIZE_1                           63 /*       */
#define NV_052_SET_IMAGE_INPUT_PARAMETER                       31:0 /* -W-VF */
#define NV_052_SET_FORMAT                                0x00630300 /* -W-4R */
#define NV_052_SET_FORMAT_COLOR                                15:0 /* -WXVF */
#define NV_052_SET_FORMAT_COLOR_LE_Y8                    0x00000001 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5     0x00000002 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5     0x00000003 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_R5G6B5                0x00000004 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_Y16                   0x00000005 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8     0x00000006 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8     0x00000007 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8 0x00000008 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8 0x00000009 /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_A8R8G8B8              0x0000000a /* -W--V */
#define NV_052_SET_FORMAT_COLOR_LE_Y32                   0x0000000b /* -W--V */
#define NV_052_SET_FORMAT_WIDTH                               23:16 /* -WXVF */
#define NV_052_SET_FORMAT_WIDTH_1                        0x00000000 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_2                        0x00000001 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_4                        0x00000002 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_8                        0x00000003 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_16                       0x00000004 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_32                       0x00000005 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_64                       0x00000006 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_128                      0x00000007 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_256                      0x00000008 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_512                      0x00000009 /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_1024                     0x0000000a /* -W--V */
#define NV_052_SET_FORMAT_WIDTH_2048                     0x0000000b /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT                              31:24 /* -WXVF */
#define NV_052_SET_FORMAT_HEIGHT_1                       0x00000000 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_2                       0x00000001 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_4                       0x00000002 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_8                       0x00000003 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_16                      0x00000004 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_32                      0x00000005 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_64                      0x00000006 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_128                     0x00000007 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_256                     0x00000008 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_512                     0x00000009 /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_1024                    0x0000000a /* -W--V */
#define NV_052_SET_FORMAT_HEIGHT_2048                    0x0000000b /* -W--V */
#define NV_052_SET_OFFSET                                0x00630304 /* -W-4R */
#define NV_052_SET_OFFSET_LINADRS                              31:0 /* -WIUF */
#define NV_052_SET_OFFSET_LINADRS_0                      0x00000000 /* -WI-V */
/* usr_nv3_surface.ref */
#define NV3_SURFACE_0                                    0x00000058 /* ----C */
#define NV3_SURFACE_1                                    0x00000059 /* ----C */
#define NV3_SURFACE_2                                    0x0000005A /* ----C */
#define NV3_SURFACE_3                                    0x0000005B /* ----C */
#define NV_UINMEM                             0x005C1FFF:0x005C0000 /* -W--D */
#define NV_UINMEM_CTX_SWITCH                             0x005C0000 /* -W-4R */
#define NV_UINMEM_CTX_SWITCH_INSTANCE                          15:0 /* -W-UF */
#define NV_UINMEM_CTX_SWITCH_CHID                             22:16 /* -W-UF */
#define NV_UINMEM_CTX_SWITCH_VOLATILE                         31:31 /* -W-VF */
#define NV_UINMEM_CTX_SWITCH_VOLATILE_IGNORE             0x00000000 /* -W--V */
#define NV_UINMEM_CTX_SWITCH_VOLATILE_RESET              0x00000001 /* -W--V */
#define NV_UINMEM_NOP                                    0x005C0100 /* -W-4R */
#define NV_UINMEM_NOP_PARAMETER                                31:0 /* -W-VF */
#define NV_UINMEM_NOTIFY                                 0x005C0104 /* -W-4R */
#define NV_UINMEM_NOTIFY_STYLE                                 31:0 /* -W-VF */
#define NV_UINMEM_NOTIFY_STYLE_WRITE_ONLY                0x00000000 /* -W--V */
#define NV_UINMEM_NOTIFY_STYLE_WRITE_THEN_AWAKEN         0x00000001 /* -W--V */
#define NV_UINMEM_SET_NOTIFY                             0x005C0104 /* -W-4R */
#define NV_UINMEM_SET_NOTIFY__ALIAS_1              NV_UINMEM_NOTIFY /*       */
#define NV_UINMEM_SET_NOTIFY_PARAMETER                         31:0 /* -W-VF */
#define NV_UINMEM_SET_NOTIFY_PARAMETER_WRITE             0x00000000 /* -W--V */
#define NV_UINMEM_SET_CONTEXT_DMA_NOTIFY                 0x005C0180 /* -W-4R */
#define NV_UINMEM_SET_CONTEXT_DMA_NOTIFY_PARAMETER             31:0 /* -W-VF */
#define NV_UINMEM_SET_CONTEXT_DMA_IMAGE                  0x005C0184 /* -W-4R */
#define NV_UINMEM_SET_CONTEXT_DMA_IMAGE_PARAMETER              31:0 /* -W-VF */
#define NV_UINMEM_SET_IMAGE_OUTPUT                       0x005C0200 /* -W-4R */
#define NV_UINMEM_SET_IMAGE_OUTPUT_PARAMETER                   31:0 /* -W-VF */
#define NV_UINMEM_SET_IMAGE_INPUT(i)             (0x005C0204+(i)*4) /* -W-4A */
#define NV_UINMEM_SET_IMAGE_INPUT__SIZE_1                        63 /*       */
#define NV_UINMEM_SET_IMAGE_INPUT_PARAMETER                    31:0 /* -W-VF */
#define NV_UINMEM_FORMAT                                 0x005C0300 /* -W-4R */
#define NV_UINMEM_FORMAT_VALUE                                 31:0 /* -WXUF */
#define NV_UINMEM_FORMAT_VALUE_LE_Y8                     0x01010000 /* -W--V */
#define NV_UINMEM_FORMAT_VALUE_LE_Y16                    0x01010001 /* -W--V */
#define NV_UINMEM_FORMAT_VALUE_LE_X1R5G5B5_Z1R5G5B5      0x01000000 /* -W--V */
#define NV_UINMEM_FORMAT_VALUE_LE_X8R8G8B8_Z8R8G8B8      0x00000001 /* -W--V */
#define NV_UINMEM_PITCH                                  0x005C0308 /* -W-4R */
#define NV_UINMEM_PITCH_VALUE                                  15:0 /* -WXUF */
#define NV_UINMEM_OFFSET                                 0x005C030C /* -W-4R */
#define NV_UINMEM_OFFSET_LINADRS                               22:0 /* -WIUF */
#define NV_UINMEM_OFFSET_LINADRS_0                       0x00000000 /* -WI-V */
/* usr_nv4_gdi_rectangle_text.ref */
#define NV4_GDI_RECTANGLE_TEXT                           0x0000004A /* ----C */
#define NV_04A                                0x004C1FFF:0x004C0000 /* -W--D */
#define NV_04A_NV4_GDI_RECTANGLE_TEXT                    0x004C0000 /* -W-4R */
#define NV_04A_NOP                                       0x004C0100 /* -W-4R */
#define NV_04A_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_04A_PM_TRIGGER                                0x004C0140 /* -W-4R */
#define NV_04A_PM_TRIGGER_PARAMETER                            31:0 /* -W-VF */
#define NV_04A_NOTIFY                                    0x004C0104 /* -W-4R */
#define NV_04A_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_04A_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_04A_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_04A_SET_PATCH                                 0x004C010C /* -W-4R */
#define NV_04A_SET_PATCH_PARAMETER                             31:0 /* -W-VF */
#define NV_04A_SET_PATCH_PARAMETER_INVALIDATE            0x00000000 /* -W--V */
#define NV_04A_SET_PATCH_PARAMETER_VALIDATE              0x00000001 /* -W--V */
#define NV_04A_SET_CONTEXT_DMA_NOTIFY                    0x004C0180 /* -W-4R */
#define NV_04A_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_04A_SET_CONTEXT_DMA_FONTS                     0x004C0184 /* -W-4R */
#define NV_04A_SET_CONTEXT_DMA_FONTS_PARAMETER                 31:0 /* -W-VF */
#define NV_04A_SET_IMAGE_OUTPUT                          0x004C0200 /* -W-4R */
#define NV_04A_SET_IMAGE_OUTPUT_PARAMETER                      31:0 /* -W-VF */
#define NV_04A_SET_COLOR_FORMAT                          0x004C0300 /* -W-4R */
#define NV_04A_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_04A_SET_COLOR_FORMAT_LE_X16R5G6B5             0x00000001 /* -W--V */
#define NV_04A_SET_COLOR_FORMAT_LE_X17R5G5B5             0x00000002 /* -W--V */
#define NV_04A_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000003 /* -W--V */
#define NV_04A_SET_MONOCHROME_FORMAT                     0x004C0304 /* -W-4R */
#define NV_04A_SET_MONOCHROME_FORMAT_VALUE                     31:0 /* -W-VF */
#define NV_04A_SET_MONOCHROME_FORMAT_VALUE_CGA6_M1       0x00000001 /* -W--V */
#define NV_04A_SET_MONOCHROME_FORMAT_VALUE_LE_M1         0x00000002 /* -W--V */
#define NV_04A_COLOR1_A                                  0x004C03FC /* -W-4R */
#define NV_04A_COLOR1_A_VALUE                                  31:0 /* -W-VF */
#define NV_04A_UNCLIPPED_RECTANGLE_POINT(i)      (0x004C0400+(i)*8) /* -W-4A */
#define NV_04A_UNCLIPPED_RECTANGLE_POINT__SIZE_1                 32 /*       */
#define NV_04A_UNCLIPPED_RECTANGLE_POINT_Y                     15:0 /* -W-SF */
#define NV_04A_UNCLIPPED_RECTANGLE_POINT_X                    31:16 /* -W-SF */
#define NV_04A_UNCLIPPED_RECTANGLE_SIZE(i)       (0x004C0404+(i)*8) /* -W-4A */
#define NV_04A_UNCLIPPED_RECTANGLE_SIZE__SIZE_1                  32 /*       */
#define NV_04A_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                 15:0 /* -W-UF */
#define NV_04A_UNCLIPPED_RECTANGLE_SIZE_WIDTH                 31:16 /* -W-UF */
#define NV_04A_CLIP_B_POINT0                             0x004C05F4 /* -W-4R */
#define NV_04A_CLIP_B_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04A_CLIP_B_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04A_CLIP_B_POINT1                             0x004C05F8 /* -W-4R */
#define NV_04A_CLIP_B_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04A_CLIP_B_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04A_COLOR1_B                                  0x004C05FC /* -W-4R */
#define NV_04A_COLOR1_B_VALUE                                  31:0 /* -W-VF */
#define NV_04A_CLIPPED_RECTANGLE_POINT_0(i)      (0x004C0600+(i)*8) /* -W-4A */
#define NV_04A_CLIPPED_RECTANGLE_POINT_0__SIZE_1                 32 /*       */
#define NV_04A_CLIPPED_RECTANGLE_POINT_0_LEFT                  15:0 /* -W-SF */
#define NV_04A_CLIPPED_RECTANGLE_POINT_0_TOP                  31:16 /* -W-SF */
#define NV_04A_CLIPPED_RECTANGLE_POINT_1(i)      (0x004C0604+(i)*8) /* -W-4A */
#define NV_04A_CLIPPED_RECTANGLE_POINT_1__SIZE_1                 32 /*       */
#define NV_04A_CLIPPED_RECTANGLE_POINT_1_RIGHT                 15:0 /* -W-SF */
#define NV_04A_CLIPPED_RECTANGLE_POINT_1_BOTTOM               31:16 /* -W-SF */
#define NV_04A_CLIP_C_POINT0                             0x004C07EC /* -W-4R */
#define NV_04A_CLIP_C_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04A_CLIP_C_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04A_CLIP_C_POINT1                             0x004C07F0 /* -W-4R */
#define NV_04A_CLIP_C_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04A_CLIP_C_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04A_COLOR1_C                                  0x004C07F4 /* -W-4R */
#define NV_04A_COLOR1_C_VALUE                                  31:0 /* -W-VF */
#define NV_04A_SIZE_C                                    0x004C07F8 /* -W-4R */
#define NV_04A_SIZE_C_WIDTH                                    15:0 /* -W-UF */
#define NV_04A_SIZE_C_HEIGHT                                  31:16 /* -W-UF */
#define NV_04A_POINT_C                                   0x004C07FC /* -W-4R */
#define NV_04A_POINT_C_X                                       15:0 /* -W-SF */
#define NV_04A_POINT_C_Y                                      31:16 /* -W-SF */
#define NV_04A_MONOCHROME_COLOR1_C(i)            (0x004C0800+(i)*4) /* -W-4A */
#define NV_04A_MONOCHROME_COLOR1_C__SIZE_1                      128 /*       */
#define NV_04A_MONOCHROME_COLOR1_C_BITMAP                      31:0 /* -W-VF */
#define NV_04A_CLIP_E_POINT0                             0x004C0BE4 /* -W-4R */
#define NV_04A_CLIP_E_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04A_CLIP_E_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04A_CLIP_E_POINT1                             0x004C0BE8 /* -W-4R */
#define NV_04A_CLIP_E_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04A_CLIP_E_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04A_COLOR0_E                                  0x004C0BEC /* -W-4R */
#define NV_04A_COLOR0_E_VALUE                                  31:0 /* -W-VF */
#define NV_04A_COLOR1_E                                  0x004C0BF0 /* -W-4R */
#define NV_04A_COLOR1_E_VALUE                                  31:0 /* -W-VF */
#define NV_04A_SIZE_IN_E                                 0x004C0BF4 /* -W-4R */
#define NV_04A_SIZE_IN_E_WIDTH                                 15:0 /* -W-UF */
#define NV_04A_SIZE_IN_E_HEIGHT                               31:16 /* -W-UF */
#define NV_04A_SIZE_OUT_E                                0x004C0BF8 /* -W-4R */
#define NV_04A_SIZE_OUT_E_WIDTH                                15:0 /* -W-UF */
#define NV_04A_SIZE_OUT_E_HEIGHT                              31:16 /* -W-UF */
#define NV_04A_POINT_E                                   0x004C0BFC /* -W-4R */
#define NV_04A_POINT_E_X                                       15:0 /* -W-SF */
#define NV_04A_POINT_E_Y                                      31:16 /* -W-SF */
#define NV_04A_MONOCHROME_COLOR01_E(i)           (0x004C0C00+(i)*4) /* -W-4A */
#define NV_04A_MONOCHROME_COLOR01_E__SIZE_1                     128 /*       */
#define NV_04A_MONOCHROME_COLOR01_E_BITMAP                     31:0 /* -W-VF */
#define NV_04A_FONT_F                                    0x004C0FF0 /* -W-4R */
#define NV_04A_FONT_F_OFFSET                                   27:0 /* -W-UF */
#define NV_04A_FONT_F_PITCH                                   31:28 /* -W-VF */
#define NV_04A_FONT_F_PITCH_8                            0x00000003 /* -W--V */
#define NV_04A_FONT_F_PITCH_16                           0x00000004 /* -W--V */
#define NV_04A_FONT_F_PITCH_32                           0x00000005 /* -W--V */
#define NV_04A_FONT_F_PITCH_64                           0x00000006 /* -W--V */
#define NV_04A_FONT_F_PITCH_128                          0x00000007 /* -W--V */
#define NV_04A_FONT_F_PITCH_256                          0x00000008 /* -W--V */
#define NV_04A_FONT_F_PITCH_512                          0x00000009 /* -W--V */
#define NV_04A_CLIP_F_POINT0                             0x004C0FF4 /* -W-4R */
#define NV_04A_CLIP_F_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04A_CLIP_F_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04A_CLIP_F_POINT1                             0x004C0FF8 /* -W-4R */
#define NV_04A_CLIP_F_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04A_CLIP_F_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04A_COLOR1_F                                  0x004C0FFC /* -W-4A */
#define NV_04A_COLOR1_F_VALUE                                  31:0 /* -W-VF */
#define NV_04A_CHARACTER_COLOR1_F(i)             (0x004C1000+(i)*4) /* -W-4A */
#define NV_04A_CHARACTER_COLOR1_F__SIZE_1                       256 /*       */
#define NV_04A_CHARACTER_COLOR1_F_INDEX                         7:0 /* -W-UF */
#define NV_04A_CHARACTER_COLOR1_F_X                            19:8 /* -W-SF */
#define NV_04A_CHARACTER_COLOR1_F_Y                           31:20 /* -W-SF */
#define NV_04A_FONT_G                                    0x004C17F0 /* -W-4R */
#define NV_04A_FONT_G_OFFSET                                   27:0 /* -W-UF */
#define NV_04A_FONT_G_PITCH                                   31:28 /* -W-VF */
#define NV_04A_FONT_G_PITCH_8                            0x00000003 /* -W--V */
#define NV_04A_FONT_G_PITCH_16                           0x00000004 /* -W--V */
#define NV_04A_FONT_G_PITCH_32                           0x00000005 /* -W--V */
#define NV_04A_FONT_G_PITCH_64                           0x00000006 /* -W--V */
#define NV_04A_FONT_G_PITCH_128                          0x00000007 /* -W--V */
#define NV_04A_FONT_G_PITCH_256                          0x00000008 /* -W--V */
#define NV_04A_FONT_G_PITCH_512                          0x00000009 /* -W--V */
#define NV_04A_CLIP_G_POINT0                             0x004C17F4 /* -W-4R */
#define NV_04A_CLIP_G_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04A_CLIP_G_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04A_CLIP_G_POINT1                             0x004C17F8 /* -W-4R */
#define NV_04A_CLIP_G_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04A_CLIP_G_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04A_COLOR1_G                                  0x004C17FC /* -W-4A */
#define NV_04A_COLOR1_G_VALUE                                  31:0 /* -W-VF */
#define NV_04A_CHARACTER_COLOR1_G_POINT(i)       (0x004C1800+(i)*8) /* -W-4A */
#define NV_04A_CHARACTER_COLOR1_G_POINT__SIZE_1                 256 /*       */
#define NV_04A_CHARACTER_COLOR1_G_POINT_X                      15:0 /* -W-SF */
#define NV_04A_CHARACTER_COLOR1_G_POINT_Y                     31:16 /* -W-SF */
#define NV_04A_CHARACTER_COLOR1_G_INDEX(i)       (0x004C1804+(i)*8) /* -W-4A */
#define NV_04A_CHARACTER_COLOR1_G_INDEX__SIZE_1                 256 /*       */
#define NV_04A_CHARACTER_COLOR1_G_INDEX_VALUE                  31:0 /* -W-UF */
/* usr_mem_to_mem.ref */
#define NV_MEMORY_TO_MEMORY_FORMAT                       0x00000039 /* ----C */
#define NV_UMEMFMT                            0x004D1FFF:0x004D0000 /* -W--D */
#define NV_UMEMFMT_CTX_SWITCH                            0x004D0000 /* -W-4R */
#define NV_UMEMFMT_NOP                                   0x004D0100 /* -W-4R */
#define NV_UMEMFMT_NOP_PARAMETER                               31:0 /* -W-VF */
#define NV_UMEMFMT_NOTIFY                                0x004D0104 /* -W-4R */
#define NV_UMEMFMT_NOTIFY_STYLE                                31:0 /* -W-VF */
#define NV_UMEMFMT_NOTIFY_STYLE_WRITE_ONLY               0x00000000 /* -W--V */
#define NV_UMEMFMT_NOTIFY_STYLE_WRITE_THEN_AWAKEN        0x00000001 /* -W--V */
#define NV_UMEMFMT_SET_NOTIFY                            0x004D0104 /* -W-4R */
#define NV_UMEMFMT_SET_NOTIFY__ALIAS_1            NV_UMEMFMT_NOTIFY /*       */
#define NV_UMEMFMT_SET_NOTIFY_PARAMETER                        31:0 /* -W-VF */
#define NV_UMEMFMT_SET_NOTIFY_PARAMETER_WRITE            0x00000000 /* -W--V */
#define NV_UMEMFMT_SET_CONTEXT_DMA_NOTIFY                0x004D0180 /* -W-4R */
#define NV_UMEMFMT_SET_CONTEXT_DMA_NOTIFY_INSTANCE             15:0 /* -W-VF */
#define NV_UMEMFMT_SET_CONTEXT_DMA_BUFFER_IN             0x004D0184 /* -W-4R */
#define NV_UMEMFMT_SET_CONTEXT_DMA_BUFFER_IN_INSTANCE          15:0 /* -W-VF */
#define NV_UMEMFMT_SET_CONTEXT_DMA_BUFFER_OUT            0x004D0188 /* -W-4R */
#define NV_UMEMFMT_SET_CONTEXT_DMA_BUFFER_OUT_INSTANCE         15:0 /* -W-VF */
#define NV_UMEMFMT_OFFSET_IN                             0x004D030C /* -W-4R */
#define NV_UMEMFMT_OFFSET_IN_VALUE                             31:0 /* -W-UF */
#define NV_UMEMFMT_OFFSET_OUT                            0x004D0310 /* -W-4R */
#define NV_UMEMFMT_OFFSET_OUT_VALUE                            31:0 /* -W-UF */
#define NV_UMEMFMT_PITCH_IN                              0x004D0314 /* -W-4R */
#define NV_UMEMFMT_PITCH_IN_VALUE                              31:0 /* -W-SF */
#define NV_UMEMFMT_PITCH_OUT                             0x004D0318 /* -W-4R */
#define NV_UMEMFMT_PITCH_OUT_VALUE                             31:0 /* -W-SF */
#define NV_UMEMFMT_LINE_LENGTH_IN                        0x004D031C /* -W-4R */
#define NV_UMEMFMT_LINE_LENGTH_IN_VALUE                        31:0 /* -W-UF */
#define NV_UMEMFMT_LINE_COUNT                            0x004D0320 /* -W-4R */
#define NV_UMEMFMT_LINE_COUNT_VALUE                            31:0 /* -W-UF */
#define NV_UMEMFMT_FORMAT                                0x004D0324 /* -W-4R */
#define NV_UMEMFMT_FORMAT_INPUT_INC                             2:0 /* -W-UF */
#define NV_UMEMFMT_FORMAT_INPUT_INC_1                    0x00000001 /* -WIUV */
#define NV_UMEMFMT_FORMAT_INPUT_INC_2                    0x00000002 /* -W-UV */
#define NV_UMEMFMT_FORMAT_INPUT_INC_4                    0x00000004 /* -W-UV */
#define NV_UMEMFMT_FORMAT_OUTPUT_INC                           10:8 /* -W-UF */
#define NV_UMEMFMT_FORMAT_OUTPUT_INC_1                   0x00000001 /* -WIUV */
#define NV_UMEMFMT_FORMAT_OUTPUT_INC_2                   0x00000002 /* -W-UV */
#define NV_UMEMFMT_FORMAT_OUTPUT_INC_4                   0x00000004 /* -W-UV */
#define NV_UMEMFMT_BUF_NOTIFY                            0x004D0328 /* -W-4R */
#define NV_UMEMFMT_BUF_NOTIFY_VALUE                            31:0 /* -W-UF */
/* usr_nv4_stretched_image_from_cpu.ref */
#define NV_STRETCHED_IMAGE_FROM_CPU                      0x00000076 /* ----C */
#define NV_USTRTCH                            0x00551FFF:0x00550000 /* -W--D */
#define NV_USTRTCH_CTX_SWITCH                            0x00550000 /* -W-4R */
#define NV_USTRTCH_CTX_SWITCH_INSTANCE                         15:0 /* -W-UF */
#define NV_USTRTCH_CTX_SWITCH_CHID                            22:16 /* -W-UF */
#define NV_USTRTCH_CTX_SWITCH_VOLATILE                        31:31 /* -W-VF */
#define NV_USTRTCH_CTX_SWITCH_VOLATILE_IGNORE            0x00000000 /* -W--V */
#define NV_USTRTCH_CTX_SWITCH_VOLATILE_RESET             0x00000001 /* -W--V */
#define NV_USTRTCH_NOP                                   0x00550100 /* -W-4R */
#define NV_USTRTCH_NOP_PARAMETER                               31:0 /* -W-VF */
#define NV_USTRTCH_NOTIFY                                0x00550104 /* -W-4R */
#define NV_USTRTCH_NOTIFY_STYLE                                31:0 /* -W-VF */
#define NV_USTRTCH_NOTIFY_STYLE_WRITE_ONLY               0x00000000 /* -W--V */
#define NV_USTRTCH_NOTIFY_STYLE_WRITE_THEN_AWAKEN        0x00000001 /* -W--V */
#define NV_USTRTCH_SET_NOTIFY                            0x00550104 /* -W-4R */
#define NV_USTRTCH_SET_NOTIFY__ALIAS_1            NV_USTRTCH_NOTIFY /*       */
#define NV_USTRTCH_SET_NOTIFY_PARAMETER                        31:0 /* -W-VF */
#define NV_USTRTCH_SET_NOTIFY_PARAMETER_WRITE            0x00000000 /* -W--V */
#define NV_USTRTCH_SET_PATCH                             0x0055010C /* -W-4R */
#define NV_USTRTCH_SET_PATCH_PARAMETER                         31:0 /* -W-VF */
#define NV_USTRTCH_SET_PATCH_PARAMETER_INVALIDATE        0x00000000 /* -W--V */
#define NV_USTRTCH_SET_PATCH_PARAMETER_VALIDATE          0x00000001 /* -W--V */
#define NV_USTRTCH_SET_CONTEXT_DMA_NOTIFY                0x00550180 /* -W-4R */
#define NV_USTRTCH_SET_CONTEXT_DMA_NOTIFY_PARAMETER            31:0 /* -W-VF */
#define NV_USTRTCH_SET_IMAGE_OUTPUT                      0x00550200 /* -W-4R */
#define NV_USTRTCH_SET_IMAGE_OUTPUT_PARAMETER                  31:0 /* -W-VF */
#define NV_USTRTCH_SET_COLOR_FORMAT                      0x00550300 /* -W-4R */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE                         31:0 /* -W-VF */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE_R5G6B5            0x00000001 /* -W--V */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE_A1R5G5B5          0x00000002 /* -W--V */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE_X1R5G5B5          0x00000003 /* -W--V */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE_A8R8G8B8          0x00000004 /* -W--V */
#define NV_USTRTCH_SET_COLOR_FORMAT_LE_X8R8G8B8          0x00000005 /* -W--V */
#define NV_USTRTCH_SIZE_IN                               0x00550304 /* -W-4R */
#define NV_USTRTCH_SIZE_IN_WIDTH                               15:0 /* -W-UF */
#define NV_USTRTCH_SIZE_IN_HEIGHT                             31:16 /* -W-UF */
#define NV_USTRTCH_DELTA_DX_DU                           0x00550308 /* -W-4R */
#define NV_USTRTCH_DELTA_DX_DU_R_FRACTION                      19:0 /* -W-UF */
#define NV_USTRTCH_DELTA_DX_DU_R_INT                          31:20 /* -W-UF */
#define NV_USTRTCH_DELTA_DX_DU_R                               31:0 /* -W-UF */
#define NV_USTRTCH_DELTA_DY_DV                           0x0055030C /* -W-4R */
#define NV_USTRTCH_DELTA_DY_DV_R_FRACTION                      19:0 /* -W-UF */
#define NV_USTRTCH_DELTA_DY_DV_R_INT                          31:20 /* -W-UF */
#define NV_USTRTCH_DELTA_DY_DV_R                               31:0 /* -W-UF */
#define NV_USTRTCH_CLIP_0                                0x00550310 /* -W-4R */
#define NV_USTRTCH_CLIP_0_X                                    15:0 /* -W-SF */
#define NV_USTRTCH_CLIP_0_Y                                   31:16 /* -W-SF */
#define NV_USTRTCH_CLIP_1                                0x00550314 /* -W-4R */
#define NV_USTRTCH_CLIP_1_WIDTH                                15:0 /* -W-UF */
#define NV_USTRTCH_CLIP_1_HEIGHT                              31:16 /* -W-UF */
#define NV_USTRTCH_POINT12D4                             0x00550318 /* -W-4R */
#define NV_USTRTCH_POINT12D4_X_FRACTION                         3:0 /* -W-SF */
#define NV_USTRTCH_POINT12D4_X_INT                             15:4 /* -W-SF */
#define NV_USTRTCH_POINT12D4_X                                 15:0 /* -W-SF */
#define NV_USTRTCH_POINT12D4_Y_FRACTION                       19:16 /* -W-SF */
#define NV_USTRTCH_POINT12D4_Y_INT                            31:20 /* -W-SF */
#define NV_USTRTCH_POINT12D4_Y                                31:16 /* -W-SF */
#define NV_USTRTCH_COLOR(i)                      (0x00550400+(i)*4) /* -W-4A */
#define NV_USTRTCH_COLOR__SIZE_1                               1792 /*       */
#define NV_USTRTCH_COLOR_VALUE                                 31:0 /* -W-VF */
/* usr_nv5_stretched_image_from_cpu.ref */
#define NV5_STRETCHED_IMAGE_FROM_CPU                     0x00000066 /* ----C */
#define NV_066                                0x00671FFF:0x00670000 /* -W--D */
#define NV_066_NV5_STRETCHED_IMAGE_FROM_CPU              0x00670000 /* -W-4R */
#define NV_066_NV5_STRETCHED_IMAGE_FROM_CPU_HANDLE             31:0 /* -WXVF */
#define NV_066_NOP                                       0x00670100 /* -W-4R */
#define NV_066_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_066_NOTIFY                                    0x00670104 /* -W-4R */
#define NV_066_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_066_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_066_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_066_SET_NOTIFY                                0x00670104 /* -W-4R */
#define NV_066_SET_NOTIFY__ALIAS_1                    NV_066_NOTIFY /*       */
#define NV_066_SET_NOTIFY_PARAMETER                            31:0 /* -W-VF */
#define NV_066_SET_NOTIFY_PARAMETER_WRITE                0x00000000 /* -W--V */
#define NV_066_SET_CONTEXT_DMA_NOTIFY                    0x00670180 /* -W-4R */
#define NV_066_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_COLOR_KEY                     0x00670184 /* -W-4R */
#define NV_066_SET_CONTEXT_COLOR_KEY_PARAMETER                 31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_PATTERN                       0x00670188 /* -W-4R */
#define NV_066_SET_CONTEXT_PATTERN_PARAMETER                   31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_ROP                           0x0067018C /* -W-4R */
#define NV_066_SET_CONTEXT_ROP_PARAMETER                       31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_BETA1                         0x00670190 /* -W-4R */
#define NV_066_SET_CONTEXT_BETA1_PARAMETER                     31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_BETA4                         0x00670194 /* -W-4R */
#define NV_066_SET_CONTEXT_BETA4_PARAMETER                     31:0 /* -W-VF */
#define NV_066_SET_CONTEXT_SURFACE                       0x00670198 /* -W-4R */
#define NV_066_SET_CONTEXT_SURFACE_PARAMETER                   31:0 /* -W-VF */
#define NV_066_SET_COLOR_CONVERSION                      0x006702F8 /* -W-4R */
#define NV_066_SET_COLOR_CONVERSION_TYPE                       31:0 /* -W-VF */
#define NV_066_SET_COLOR_CONVERSION_TYPE_DITHER          0x00000000 /* -W--V */
#define NV_066_SET_COLOR_CONVERSION_TYPE_TRUNCATE        0x00000001 /* -W--V */
#define NV_066_SET_COLOR_CONVERSION_TYPE_SUBTR_TRUNCATE  0x00000002 /* -W--V */
#define NV_066_SET_OPERATION                             0x006702FC /* -W-4R */
#define NV_066_SET_OPERATION_MODE                              31:0 /* -W-VF */
#define NV_066_SET_OPERATION_MODE_SRCCOPY_AND            0x00000000 /* -W--V */
#define NV_066_SET_OPERATION_MODE_ROP_AND                0x00000001 /* -W--V */
#define NV_066_SET_OPERATION_MODE_BLEND_AND              0x00000002 /* -W--V */
#define NV_066_SET_OPERATION_MODE_SRCCOPY                0x00000003 /* -W--V */
#define NV_066_SET_OPERATION_MODE_SRCCOPY_PREMULT        0x00000004 /* -W--V */
#define NV_066_SET_OPERATION_MODE_BLEND_PREMULT          0x00000005 /* -W--V */
#define NV_066_SET_COLOR_FORMAT                          0x00670300 /* -W-4R */
#define NV_066_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_066_SET_COLOR_FORMAT_LE_R5G6B5                0x00000001 /* -W--V */
#define NV_066_SET_COLOR_FORMAT_LE_A1R5G5B5              0x00000002 /* -W--V */
#define NV_066_SET_COLOR_FORMAT_LE_X1R5G5B5              0x00000003 /* -W--V */
#define NV_066_SET_COLOR_FORMAT_LE_A8R8G8B8              0x00000004 /* -W--V */
#define NV_066_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000005 /* -W--V */
#define NV_066_SIZE_IN                                   0x00670304 /* -W-4R */
#define NV_066_SIZE_IN_WIDTH                                   15:0 /* -W-UF */
#define NV_066_SIZE_IN_HEIGHT                                 31:16 /* -W-UF */
#define NV_066_DELTA_DX_DU                               0x00670308 /* -W-4R */
#define NV_066_DELTA_DX_DU_R_FRACTION                          19:0 /* -W-UF */
#define NV_066_DELTA_DX_DU_R_INT                              31:20 /* -W-UF */
#define NV_066_DELTA_DX_DU_R                                   31:0 /* -W-UF */
#define NV_066_DELTA_DY_DV                               0x0067030C /* -W-4R */
#define NV_066_DELTA_DY_DV_R_FRACTION                          19:0 /* -W-UF */
#define NV_066_DELTA_DY_DV_R_INT                              31:20 /* -W-UF */
#define NV_066_DELTA_DY_DV_R                                   31:0 /* -W-UF */
#define NV_066_CLIP_0                                    0x00670310 /* -W-4R */
#define NV_066_CLIP_0_X                                        15:0 /* -W-SF */
#define NV_066_CLIP_0_Y                                       31:16 /* -W-SF */
#define NV_066_CLIP_1                                    0x00670314 /* -W-4R */
#define NV_066_CLIP_1_WIDTH                                    15:0 /* -W-UF */
#define NV_066_CLIP_1_HEIGHT                                  31:16 /* -W-UF */
#define NV_066_POINT12D4                                 0x00670318 /* -W-4R */
#define NV_066_POINT12D4_X_FRACTION                             3:0 /* -W-SF */
#define NV_066_POINT12D4_X_INT                                 15:4 /* -W-SF */
#define NV_066_POINT12D4_X                                     15:0 /* -W-SF */
#define NV_066_POINT12D4_Y_FRACTION                           19:16 /* -W-SF */
#define NV_066_POINT12D4_Y_INT                                31:20 /* -W-SF */
#define NV_066_POINT12D4_Y                                    31:16 /* -W-SF */
#define NV_066_COLOR(i)                          (0x00670400+(i)*4) /* -W-4A */
#define NV_066_COLOR__SIZE_1                                   1792 /*       */
#define NV_066_COLOR_VALUE                                     31:0 /* -W-VF */
/* usr_nv3_gdi_rectangle_text.ref */
#define NV3_GDI_RECTANGLE_TEXT                           0x0000004B /* ----C */
#define NV_04B                                0x006B1FFF:0x006B0000 /* -W--D */
#define NV_04B_NV3_GDI_RECTANGLE_TEXT                    0x006B0000 /* -W-4R */
#define NV_04B_NOP                                       0x006B0100 /* -W-4R */
#define NV_04B_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_04B_NOTIFY                                    0x006B0104 /* -W-4R */
#define NV_04B_NOTIFY_STYLE                                    31:0 /* -W-VF */
#define NV_04B_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_04B_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_04B_SET_PATCH                                 0x006B010C /* -W-4R */
#define NV_04B_SET_PATCH_PARAMETER                             31:0 /* -W-VF */
#define NV_04B_SET_PATCH_PARAMETER_INVALIDATE            0x00000000 /* -W--V */
#define NV_04B_SET_PATCH_PARAMETER_VALIDATE              0x00000001 /* -W--V */
#define NV_04B_SET_CONTEXT_DMA_NOTIFY                    0x006B0180 /* -W-4R */
#define NV_04B_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -W-VF */
#define NV_04B_SET_IMAGE_OUTPUT                          0x006B0200 /* -W-4R */
#define NV_04B_SET_IMAGE_OUTPUT_PARAMETER                      31:0 /* -W-VF */
#define NV_04B_SET_COLOR_FORMAT                          0x006B0300 /* -W-4R */
#define NV_04B_SET_COLOR_FORMAT_LE                             31:0 /* -W-VF */
#define NV_04B_SET_COLOR_FORMAT_LE_X24Y8                 0x00000001 /* -W--V */
#define NV_04B_SET_COLOR_FORMAT_LE_X17R5G5B5             0x00000002 /* -W--V */
#define NV_04B_SET_COLOR_FORMAT_LE_X8R8G8B8              0x00000003 /* -W--V */
#define NV_04B_SET_MONOCHROME_FORMAT                     0x006B0304 /* -W-4R */
#define NV_04B_SET_MONOCHROME_FORMAT_VALUE                     31:0 /* -W-VF */
#define NV_04B_SET_MONOCHROME_FORMAT_VALUE_CGA6_M1       0x00000001 /* -W--V */
#define NV_04B_SET_MONOCHROME_FORMAT_VALUE_LE_M1         0x00000002 /* -W--V */
#define NV_04B_COLOR1_A                                  0x006B03FC /* -W-4R */
#define NV_04B_COLOR1_A_VALUE                                  31:0 /* -W-VF */
#define NV_04B_UNCLIPPED_RECTANGLE_POINT(i)      (0x006B0400+(i)*8) /* -W-4A */
#define NV_04B_UNCLIPPED_RECTANGLE_POINT__SIZE_1                 64 /*       */
#define NV_04B_UNCLIPPED_RECTANGLE_POINT_Y                     15:0 /* -W-SF */
#define NV_04B_UNCLIPPED_RECTANGLE_POINT_X                    31:16 /* -W-SF */
#define NV_04B_UNCLIPPED_RECTANGLE_SIZE(i)       (0x006B0404+(i)*8) /* -W-4A */
#define NV_04B_UNCLIPPED_RECTANGLE_SIZE__SIZE_1                  64 /*       */
#define NV_04B_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                 15:0 /* -W-UF */
#define NV_04B_UNCLIPPED_RECTANGLE_SIZE_WIDTH                 31:16 /* -W-UF */
#define NV_04B_CLIP_B_POINT0                             0x006B07F4 /* -W-4R */
#define NV_04B_CLIP_B_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04B_CLIP_B_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04B_CLIP_B_POINT1                             0x006B07F8 /* -W-4R */
#define NV_04B_CLIP_B_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04B_CLIP_B_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04B_COLOR1_B                                  0x006B07FC /* -W-4R */
#define NV_04B_COLOR1_B_VALUE                                  31:0 /* -W-VF */
#define NV_04B_CLIPPED_RECTANGLE_POINT_0(i)      (0x006B0800+(i)*8) /* -W-4A */
#define NV_04B_CLIPPED_RECTANGLE_POINT_0__SIZE_1                 64 /*       */
#define NV_04B_CLIPPED_RECTANGLE_POINT_0_LEFT                  15:0 /* -W-SF */
#define NV_04B_CLIPPED_RECTANGLE_POINT_0_TOP                  31:16 /* -W-SF */
#define NV_04B_CLIPPED_RECTANGLE_POINT_1(i)      (0x006B0804+(i)*8) /* -W-4A */
#define NV_04B_CLIPPED_RECTANGLE_POINT_1__SIZE_1                 64 /*       */
#define NV_04B_CLIPPED_RECTANGLE_POINT_1_RIGHT                 15:0 /* -W-SF */
#define NV_04B_CLIPPED_RECTANGLE_POINT_1_BOTTOM               31:16 /* -W-SF */
#define NV_04B_CLIP_C_POINT0                             0x006B0BEC /* -W-4R */
#define NV_04B_CLIP_C_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04B_CLIP_C_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04B_CLIP_C_POINT1                             0x006B0BF0 /* -W-4R */
#define NV_04B_CLIP_C_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04B_CLIP_C_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04B_COLOR1_C                                  0x006B0BF4 /* -W-4R */
#define NV_04B_COLOR1_C_VALUE                                  31:0 /* -W-VF */
#define NV_04B_SIZE_C                                    0x006B0BF8 /* -W-4R */
#define NV_04B_SIZE_C_WIDTH                                    15:0 /* -W-UF */
#define NV_04B_SIZE_C_HEIGHT                                  31:16 /* -W-UF */
#define NV_04B_POINT_C                                   0x006B0BFC /* -W-4R */
#define NV_04B_POINT_C_X                                       15:0 /* -W-SF */
#define NV_04B_POINT_C_Y                                      31:16 /* -W-SF */
#define NV_04B_MONOCHROME_COLOR1_C(i)            (0x006B0C00+(i)*4) /* -W-4A */
#define NV_04B_MONOCHROME_COLOR1_C__SIZE_1                      128 /*       */
#define NV_04B_MONOCHROME_COLOR1_C_BITMAP                      31:0 /* -W-VF */
#define NV_04B_CLIP_D_POINT0                             0x006B0FE8 /* -W-4R */
#define NV_04B_CLIP_D_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04B_CLIP_D_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04B_CLIP_D_POINT1                             0x006B0FEC /* -W-4R */
#define NV_04B_CLIP_D_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04B_CLIP_D_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04B_COLOR1_D                                  0x006B0FF0 /* -W-4R */
#define NV_04B_COLOR1_D_VALUE                                  31:0 /* -W-VF */
#define NV_04B_SIZE_IN_D                                 0x006B0FF4 /* -W-4R */
#define NV_04B_SIZE_IN_D_WIDTH                                 15:0 /* -W-UF */
#define NV_04B_SIZE_IN_D_HEIGHT                               31:16 /* -W-UF */
#define NV_04B_SIZE_OUT_D                                0x006B0FF8 /* -W-4R */
#define NV_04B_SIZE_OUT_D_WIDTH                                15:0 /* -W-UF */
#define NV_04B_SIZE_OUT_D_HEIGHT                              31:16 /* -W-UF */
#define NV_04B_POINT_D                                   0x006B0FFC /* -W-4R */
#define NV_04B_POINT_D_X                                       15:0 /* -W-SF */
#define NV_04B_POINT_D_Y                                      31:16 /* -W-SF */
#define NV_04B_MONOCHROME_COLOR1_D(i)            (0x006B1000+(i)*4) /* -W-4A */
#define NV_04B_MONOCHROME_COLOR1_D__SIZE_1                      128 /*       */
#define NV_04B_MONOCHROME_COLOR1_D_BITMAP                      31:0 /* -W-VF */
#define NV_04B_CLIP_E_POINT0                             0x006B13E4 /* -W-4R */
#define NV_04B_CLIP_E_POINT0_LEFT                              15:0 /* -W-SF */
#define NV_04B_CLIP_E_POINT0_TOP                              31:16 /* -W-SF */
#define NV_04B_CLIP_E_POINT1                             0x006B13E8 /* -W-4R */
#define NV_04B_CLIP_E_POINT1_RIGHT                             15:0 /* -W-SF */
#define NV_04B_CLIP_E_POINT1_BOTTOM                           31:16 /* -W-SF */
#define NV_04B_COLOR0_E                                  0x006B13EC /* -W-4R */
#define NV_04B_COLOR0_E_VALUE                                  31:0 /* -W-VF */
#define NV_04B_COLOR1_E                                  0x006B13F0 /* -W-4R */
#define NV_04B_COLOR1_E_VALUE                                  31:0 /* -W-VF */
#define NV_04B_SIZE_IN_E                                 0x006B13F4 /* -W-4R */
#define NV_04B_SIZE_IN_E_WIDTH                                 15:0 /* -W-UF */
#define NV_04B_SIZE_IN_E_HEIGHT                               31:16 /* -W-UF */
#define NV_04B_SIZE_OUT_E                                0x006B13F8 /* -W-4R */
#define NV_04B_SIZE_OUT_E_WIDTH                                15:0 /* -W-UF */
#define NV_04B_SIZE_OUT_E_HEIGHT                              31:16 /* -W-UF */
#define NV_04B_POINT_E                                   0x006B13FC /* -W-4R */
#define NV_04B_POINT_E_X                                       15:0 /* -W-SF */
#define NV_04B_POINT_E_Y                                      31:16 /* -W-SF */
#define NV_04B_MONOCHROME_COLOR01_E(i)           (0x006B1400+(i)*4) /* -W-4A */
#define NV_04B_MONOCHROME_COLOR01_E__SIZE_1                     128 /*       */
#define NV_04B_MONOCHROME_COLOR01_E_BITMAP                     31:0 /* -W-VF */
/* usr_context_surfaces_argb_zs.ref */
#define NV4_CONTEXT_SURFACES_ARGB_ZS                     0x00000053 /* ----C */
#define NV_053                                0x00601FFF:0x00600000 /* -W--D */
#define NV_053_NV4_CONTEXT_SURFACES_ARGB_ZS              0x00600000 /* -W-4R */
#define NV_053_NOP                                       0x00600100 /* -W-4R */
#define NV_053_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_053_NOTIFY                                    0x00600104 /* -W-4R */
#define NV_053_NOTIFY_STYLE                                    31:0 /* -WXVF */
#define NV_053_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_053_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_053_SET_CONTEXT_DMA_NOTIFY                    0x00600180 /* -W-4R */
#define NV_053_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -WXVF */
#define NV_053_SET_CONTEXT_DMA_COLOR                     0x00600184 /* -W-4R */
#define NV_053_SET_CONTEXT_DMA_COLOR_PARAMETER                 31:0 /* -WXVF */
#define NV_053_SET_CONTEXT_DMA_ZETA                      0x00600188 /* -W-4R */
#define NV_053_SET_CONTEXT_DMA_ZETA_PARAMETER                  31:0 /* -WXVF */
#define NV_053_SET_CLIP_HORIZONTAL                       0x006002f8 /* -W-4R */
#define NV_053_SET_CLIP_HORIZONTAL_X                           15:0 /* -W-UF */
#define NV_053_SET_CLIP_HORIZONTAL_WIDTH                      31:16 /* -W-UF */
#define NV_053_SET_CLIP_VERTICAL                         0x006002fc /* -W-4R */
#define NV_053_SET_CLIP_VERTICAL_Y                             15:0 /* -W-UF */
#define NV_053_SET_CLIP_VERTICAL_HEIGHT                       31:16 /* -W-UF */
#define NV_053_SET_FORMAT                                0x00600300 /* -W-4R */
#define NV_053_SET_FORMAT_COLOR                                 7:0 /* -W-VF */
#define NV_053_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5     0x00000001 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5     0x00000002 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_R5G6B5                0x00000003 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8     0x00000004 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8     0x00000005 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8 0x00000006 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8 0x00000007 /* -W--V */
#define NV_053_SET_FORMAT_COLOR_LE_A8R8G8B8              0x00000008 /* -W--V */
#define NV_053_SET_FORMAT_TYPE                                 15:8 /* -W-VF */
#define NV_053_SET_FORMAT_TYPE_PITCH                     0x00000001 /* -W--V */
#define NV_053_SET_FORMAT_TYPE_SWIZZLE                   0x00000002 /* -W--V */
#define NV_053_SET_FORMAT_WIDTH                               23:16 /* -W-VF */
#define NV_053_SET_FORMAT_HEIGHT                              31:24 /* -W-VF */
#define NV_053_SET_CLIP_SIZE                             0x00600304 /* -W-4R */
#define NV_053_SET_CLIP_SIZE_WIDTH                             15:0 /* -W-UF */
#define NV_053_SET_CLIP_SIZE_HEIGHT                           31:16 /* -W-UF */
#define NV_053_SET_PITCH                                 0x00600308 /* -W-4R */
#define NV_053_SET_PITCH_COLOR                                 15:0 /* -W-UF */
#define NV_053_SET_PITCH_ZETA                                 31:16 /* -W-UF */
#define NV_053_SET_OFFSET_COLOR                          0x0060030C /* -W-4R */
#define NV_053_SET_OFFSET_COLOR_VALUE                         31:0  /* -W-UF */
#define NV_053_SET_OFFSET_ZETA                           0x00600310 /* -W-4R */
#define NV_053_SET_OFFSET_ZETA_VALUE                          31:0  /* -W-UF */
/* usr_nv10_context_surfaces_argb_zs.ref */
#define NV10_CONTEXT_SURFACES_ARGB_ZS                    0x00000093 /* ----C */
#define NV_093                                0x00581FFF:0x00580000 /* -W--D */
#define NV_093_NV10_CONTEXT_SURFACES_ARGB_ZS             0x00580000 /* -W-4R */
#define NV_093_NOP                                       0x00580100 /* -W-4R */
#define NV_093_NOP_PARAMETER                                   31:0 /* -W-VF */
#define NV_093_NOTIFY                                    0x00580104 /* -W-4R */
#define NV_093_NOTIFY_STYLE                                    31:0 /* -WXVF */
#define NV_093_NOTIFY_STYLE_WRITE_ONLY                   0x00000000 /* -W--V */
#define NV_093_NOTIFY_STYLE_WRITE_THEN_AWAKEN            0x00000001 /* -W--V */
#define NV_093_SET_CONTEXT_DMA_NOTIFY                    0x00580180 /* -W-4R */
#define NV_093_SET_CONTEXT_DMA_NOTIFY_PARAMETER                31:0 /* -WXVF */
#define NV_093_SET_CONTEXT_DMA_COLOR                     0x00580184 /* -W-4R */
#define NV_093_SET_CONTEXT_DMA_COLOR_PARAMETER                 31:0 /* -WXVF */
#define NV_093_SET_CONTEXT_DMA_ZETA                      0x00580188 /* -W-4R */
#define NV_093_SET_CONTEXT_DMA_ZETA_PARAMETER                  31:0 /* -WXVF */
#define NV_093_SET_CLIP_HORIZONTAL                       0x005802f8 /* -W-4R */
#define NV_093_SET_CLIP_HORIZONTAL_X                           15:0 /* -W-UF */
#define NV_093_SET_CLIP_HORIZONTAL_WIDTH                      31:16 /* -W-UF */
#define NV_093_SET_CLIP_VERTICAL                         0x005802fc /* -W-4R */
#define NV_093_SET_CLIP_VERTICAL_Y                             15:0 /* -W-UF */
#define NV_093_SET_CLIP_VERTICAL_HEIGHT                       31:16 /* -W-UF */
#define NV_093_SET_FORMAT                                0x00580300 /* -W-4R */
#define NV_093_SET_FORMAT_COLOR                                 7:0 /* -W-VF */
#define NV_093_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5     0x00000001 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5     0x00000002 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_R5G6B5                0x00000003 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8     0x00000004 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8     0x00000005 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8 0x00000006 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8 0x00000007 /* -W--V */
#define NV_093_SET_FORMAT_COLOR_LE_A8R8G8B8              0x00000008 /* -W--V */
#define NV_093_SET_FORMAT_TYPE                                 15:8 /* -W-VF */
#define NV_093_SET_FORMAT_TYPE_PITCH                     0x00000001 /* -W--V */
#define NV_093_SET_FORMAT_TYPE_SWIZZLE                   0x00000002 /* -W--V */
#define NV_093_SET_FORMAT_WIDTH                               23:16 /* -W-VF */
#define NV_093_SET_FORMAT_HEIGHT                              31:24 /* -W-VF */
#define NV_093_SET_CLIP_SIZE                             0x00580304 /* -W-4R */
#define NV_093_SET_CLIP_SIZE_WIDTH                             15:0 /* -W-UF */
#define NV_093_SET_CLIP_SIZE_HEIGHT                           31:16 /* -W-UF */
#define NV_093_SET_PITCH                                 0x00580308 /* -W-4R */
#define NV_093_SET_PITCH_COLOR                                 15:0 /* -W-UF */
#define NV_093_SET_PITCH_ZETA                                 31:16 /* -W-UF */
#define NV_093_SET_OFFSET_COLOR                          0x0058030C /* -W-4R */
#define NV_093_SET_OFFSET_COLOR_VALUE                         31:0  /* -W-UF */
#define NV_093_SET_OFFSET_ZETA                           0x00580310 /* -W-4R */
#define NV_093_SET_OFFSET_ZETA_VALUE                          31:0  /* -W-UF */
/* usr_context_dma.ref */
#define NV_CONTEXT_DMA_IN_MEMORY                         0x0000003D /* ----C */
#define NV_CONTEXT_DMA_FROM_MEMORY                       0x00000002 /* ----C */
#define NV_CONTEXT_DMA_TO_MEMORY                         0x00000003 /* ----C */
#define NV4_CONTEXT_SURFACES_ARGB_ZS                     0x00000053 /* ----C */
/* usr_null_class.ref */
#define NV_NULL_CLASS                                    0x00000030 /* ----C */
/* usr_notifications.ref */
#define NV_STATUS_IN_PROGRESS                   (0x8000)  /* not done    */
#define NV_STATUS_ERROR_PROTECTION_FAULT        (0x4000)  /* fatal error */
#define NV_STATUS_ERROR_BAD_ARGUMENT            (0x2000)  /* fatal error */
#define NV_STATUS_ERROR_INVALID_STATE           (0x1000)  /* fatal error */
#define NV_STATUS_ERROR_STATE_IN_USE            (0x0800)  /* fatal error */
#define NV_STATUS_ERROR_BAD_PATCH               (0x0400)  /* fatal error */
#define NV_STATUS_ERROR_FLOW_CONTROL            (0x0200)  /* fatal error */
#define NV_STATUS_WARNING_INVALID_DATA          (0x0001)  /* warning     */
#define NV_STATUS_NO_ERRORS_OR_WARNINGS         (0x0000)  /* done all ok */
/* dev_pm.ref */
#define NV_PPM                                0x0000AFFF:0x0000A000 /* RW--D */
#define NV_PPM_NV_TRIG0_SEL                              0x0000A400 /* RW-4R */
#define NV_PPM_NV_TRIG0_SEL_SEL0                                7:0 /* RWXUF */
#define NV_PPM_NV_TRIG0_SEL_SEL1                               15:8 /* RWXUF */
#define NV_PPM_NV_TRIG0_SEL_SEL2                              23:16 /* RWXUF */
#define NV_PPM_NV_TRIG0_SEL_SEL3                              31:24 /* RWXUF */
#define NV_PPM_NV_TRIG0_OP                               0x0000A404 /* RW-4R */
#define NV_PPM_NV_TRIG0_OP_FUNC                                15:0 /* RWXUF */
#define NV_PPM_NV_TRIG0_OP_DSEL0                              16:16 /* RWXUF */
#define NV_PPM_NV_TRIG0_OP_DSEL1                              17:17 /* RWXUF */
#define NV_PPM_NV_TRIG1_SEL                              0x0000A408 /* RW-4R */
#define NV_PPM_NV_TRIG1_SEL_SEL0                                7:0 /* RWXUF */
#define NV_PPM_NV_TRIG1_SEL_SEL1                               15:8 /* RWXUF */
#define NV_PPM_NV_TRIG1_SEL_SEL2                              23:16 /* RWXUF */
#define NV_PPM_NV_TRIG1_SEL_SEL3                              31:24 /* RWXUF */
#define NV_PPM_NV_TRIG1_OP                               0x0000A40C /* RW-4R */
#define NV_PPM_NV_TRIG1_OP_FUNC                                15:0 /* RWXUF */
#define NV_PPM_NV_TRIG1_OP_DSEL0                              16:16 /* RWXUF */
#define NV_PPM_NV_TRIG1_OP_DSEL1                              17:17 /* RWXUF */
#define NV_PPM_NV_EVENT_SEL                              0x0000A410 /* RW-4R */
#define NV_PPM_NV_EVENT_SEL_SEL0                                7:0 /* RWXUF */
#define NV_PPM_NV_EVENT_SEL_SEL1                               15:8 /* RWXUF */
#define NV_PPM_NV_EVENT_SEL_SEL2                              23:16 /* RWXUF */
#define NV_PPM_NV_EVENT_SEL_SEL3                              31:24 /* RWXUF */
#define NV_PPM_NV_EVENT_OP                               0x0000A414 /* RW-4R */
#define NV_PPM_NV_EVENT_OP_FUNC                                15:0 /* RWXUF */
#define NV_PPM_NV_EVENT_OP_DSEL0                              16:16 /* RWXUF */
#define NV_PPM_NV_EVENT_OP_DSEL1                              17:17 /* RWXUF */
#define NV_PPM_NV_SAMPLE_SEL                             0x0000A418 /* RW-4R */
#define NV_PPM_NV_SAMPLE_SEL_SEL0                               7:0 /* RWXUF */
#define NV_PPM_NV_SAMPLE_SEL_SEL1                              15:8 /* RWXUF */
#define NV_PPM_NV_SAMPLE_SEL_SEL2                             23:16 /* RWXUF */
#define NV_PPM_NV_SAMPLE_SEL_SEL3                             31:24 /* RWXUF */
#define NV_PPM_NV_SAMPLE_OP                              0x0000A41C /* RW-4R */
#define NV_PPM_NV_SAMPLE_OP_FUNC                               15:0 /* RWXUF */
#define NV_PPM_NV_SAMPLE_OP_DSEL0                             16:16 /* RWXUF */
#define NV_PPM_NV_SAMPLE_OP_DSEL1                             17:17 /* RWXUF */
#define NV_PPM_NV_SETFLAG_SEL                            0x0000A420 /* RW-4R */
#define NV_PPM_NV_SETFLAG_SEL_SEL0                              7:0 /* RWXUF */
#define NV_PPM_NV_SETFLAG_SEL_SEL1                             15:8 /* RWXUF */
#define NV_PPM_NV_SETFLAG_SEL_SEL2                            23:16 /* RWXUF */
#define NV_PPM_NV_SETFLAG_SEL_SEL3                            31:24 /* RWXUF */
#define NV_PPM_NV_SETFLAG_OP                             0x0000A424 /* RW-4R */
#define NV_PPM_NV_SETFLAG_OP_FUNC                              15:0 /* RWXUF */
#define NV_PPM_NV_SETFLAG_OP_DSEL0                            16:16 /* RWXUF */
#define NV_PPM_NV_SETFLAG_OP_DSEL1                            17:17 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_SEL                            0x0000A428 /* RW-4R */
#define NV_PPM_NV_CLRFLAG_SEL_SEL0                              7:0 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_SEL_SEL1                             15:8 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_SEL_SEL2                            23:16 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_SEL_SEL3                            31:24 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_OP                             0x0000A42C /* RW-4R */
#define NV_PPM_NV_CLRFLAG_OP_FUNC                              15:0 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_OP_DSEL0                            16:16 /* RWXUF */
#define NV_PPM_NV_CLRFLAG_OP_DSEL1                            17:17 /* RWXUF */
#define NV_PPM_NV_ELAPSED_0                              0x0000A600 /* RR-4R */
#define NV_PPM_NV_ELAPSED_0_VAL                                31:0 /* RR-UF */
#define NV_PPM_NV_ELAPSED_1                              0x0000A604 /* RR-4R */
#define NV_PPM_NV_ELAPSED_1_VAL                                 7:0 /* RR-UF */
#define NV_PPM_NV_CYCLECNT_0                             0x0000A608 /* RR-4R */
#define NV_PPM_NV_CYCLECNT_0_VAL                               31:0 /* RR-UF */
#define NV_PPM_NV_CYCLECNT_1                             0x0000A60C /* RR-4R */
#define NV_PPM_NV_CYCLECNT_1_VAL                                7:0 /* RR-UF */
#define NV_PPM_NV_EVENTCNT_0                             0x0000A610 /* RR-4R */
#define NV_PPM_NV_EVENTCNT_0_VAL                               31:0 /* RR-UF */
#define NV_PPM_NV_EVENTCNT_1                             0x0000A614 /* RR-4R */
#define NV_PPM_NV_EVENTCNT_1_VAL                                7:0 /* RR-UF */
#define NV_PPM_NV_THRESHCNT_0                            0x0000A618 /* RR-4R */
#define NV_PPM_NV_THRESHCNT_0_VAL                              31:0 /* RR-UF */
#define NV_PPM_NV_THRESHCNT_1                            0x0000A61C /* RR-4R */
#define NV_PPM_NV_THRESHCNT_1_VAL                               7:0 /* RR-UF */
#define NV_PPM_NV_TRIGGERCNT                             0x0000A620 /* RW-4R */
#define NV_PPM_NV_TRIGGERCNT_VAL                               31:0 /* RWXUF */
#define NV_PPM_NV_SAMPLECNT                              0x0000A624 /* RW-4R */
#define NV_PPM_NV_SAMPLECNT_VAL                                31:0 /* RWXUF */
#define NV_PPM_NV_THRESHOLD_0                            0x0000A628 /* RW-4R */
#define NV_PPM_NV_THRESHOLD_0_VAL                              31:0 /* RWXUF */
#define NV_PPM_NV_THRESHOLD_1                            0x0000A62C /* RW-4R */
#define NV_PPM_NV_THRESHOLD_1_VAL                               7:0 /* RWXUF */
#define NV_PPM_M_TRIG0_SEL                               0x0000A500 /* RW-4R */
#define NV_PPM_M_TRIG0_SEL_SEL0                                 5:0 /* RWXUF */
#define NV_PPM_M_TRIG0_SEL_SEL1                                13:8 /* RWXUF */
#define NV_PPM_M_TRIG0_SEL_SEL2                               21:16 /* RWXUF */
#define NV_PPM_M_TRIG0_SEL_SEL3                               29:24 /* RWXUF */
#define NV_PPM_M_TRIG0_OP                                0x0000A504 /* RW-4R */
#define NV_PPM_M_TRIG0_OP_FUNC                                 15:0 /* RWXUF */
#define NV_PPM_M_TRIG0_OP_DSEL0                               16:16 /* RWXUF */
#define NV_PPM_M_TRIG0_OP_DSEL1                               17:17 /* RWXUF */
#define NV_PPM_M_TRIG1_SEL                               0x0000A508 /* RW-4R */
#define NV_PPM_M_TRIG1_SEL_SEL0                                 5:0 /* RWXUF */
#define NV_PPM_M_TRIG1_SEL_SEL1                                13:8 /* RWXUF */
#define NV_PPM_M_TRIG1_SEL_SEL2                               21:16 /* RWXUF */
#define NV_PPM_M_TRIG1_SEL_SEL3                               29:24 /* RWXUF */
#define NV_PPM_M_TRIG1_OP                                0x0000A50C /* RW-4R */
#define NV_PPM_M_TRIG1_OP_FUNC                                 15:0 /* RWXUF */
#define NV_PPM_M_TRIG1_OP_DSEL0                               16:16 /* RWXUF */
#define NV_PPM_M_TRIG1_OP_DSEL1                               17:17 /* RWXUF */
#define NV_PPM_M_EVENT_SEL                               0x0000A510 /* RW-4R */
#define NV_PPM_M_EVENT_SEL_SEL0                                 5:0 /* RWXUF */
#define NV_PPM_M_EVENT_SEL_SEL1                                13:8 /* RWXUF */
#define NV_PPM_M_EVENT_SEL_SEL2                               21:16 /* RWXUF */
#define NV_PPM_M_EVENT_SEL_SEL3                               29:24 /* RWXUF */
#define NV_PPM_M_EVENT_OP                                0x0000A514 /* RW-4R */
#define NV_PPM_M_EVENT_OP_FUNC                                 15:0 /* RWXUF */
#define NV_PPM_M_EVENT_OP_DSEL0                               16:16 /* RWXUF */
#define NV_PPM_M_EVENT_OP_DSEL1                               17:17 /* RWXUF */
#define NV_PPM_M_SAMPLE_SEL                              0x0000A518 /* RW-4R */
#define NV_PPM_M_SAMPLE_SEL_SEL0                                5:0 /* RWXUF */
#define NV_PPM_M_SAMPLE_SEL_SEL1                               13:8 /* RWXUF */
#define NV_PPM_M_SAMPLE_SEL_SEL2                              21:16 /* RWXUF */
#define NV_PPM_M_SAMPLE_SEL_SEL3                              29:24 /* RWXUF */
#define NV_PPM_M_SAMPLE_OP                               0x0000A51C /* RW-4R */
#define NV_PPM_M_SAMPLE_OP_FUNC                                15:0 /* RWXUF */
#define NV_PPM_M_SAMPLE_OP_DSEL0                              16:16 /* RWXUF */
#define NV_PPM_M_SAMPLE_OP_DSEL1                              17:17 /* RWXUF */
#define NV_PPM_M_SETFLAG_SEL                             0x0000A520 /* RW-4R */
#define NV_PPM_M_SETFLAG_SEL_SEL0                               5:0 /* RWXUF */
#define NV_PPM_M_SETFLAG_SEL_SEL1                              13:8 /* RWXUF */
#define NV_PPM_M_SETFLAG_SEL_SEL2                             21:16 /* RWXUF */
#define NV_PPM_M_SETFLAG_SEL_SEL3                             29:24 /* RWXUF */
#define NV_PPM_M_SETFLAG_OP                              0x0000A524 /* RW-4R */
#define NV_PPM_M_SETFLAG_OP_FUNC                               15:0 /* RWXUF */
#define NV_PPM_M_SETFLAG_OP_DSEL0                             16:16 /* RWXUF */
#define NV_PPM_M_SETFLAG_OP_DSEL1                             17:17 /* RWXUF */
#define NV_PPM_M_CLRFLAG_SEL                             0x0000A528 /* RW-4R */
#define NV_PPM_M_CLRFLAG_SEL_SEL0                               5:0 /* RWXUF */
#define NV_PPM_M_CLRFLAG_SEL_SEL1                              13:8 /* RWXUF */
#define NV_PPM_M_CLRFLAG_SEL_SEL2                             21:16 /* RWXUF */
#define NV_PPM_M_CLRFLAG_SEL_SEL3                             29:24 /* RWXUF */
#define NV_PPM_M_CLRFLAG_OP                              0x0000A52C /* RW-4R */
#define NV_PPM_M_CLRFLAG_OP_FUNC                               15:0 /* RWXUF */
#define NV_PPM_M_CLRFLAG_OP_DSEL0                             16:16 /* RWXUF */
#define NV_PPM_M_CLRFLAG_OP_DSEL1                             17:17 /* RWXUF */
#define NV_PPM_M_ELAPSED_0                               0x0000A700 /* RR-4R */
#define NV_PPM_M_ELAPSED_0_VAL                                 31:0 /* RR-UF */
#define NV_PPM_M_ELAPSED_1                               0x0000A704 /* RR-4R */
#define NV_PPM_M_ELAPSED_1_VAL                                  7:0 /* RR-UF */
#define NV_PPM_M_CYCLECNT_0                              0x0000A708 /* RR-4R */
#define NV_PPM_M_CYCLECNT_0_VAL                                31:0 /* RR-UF */
#define NV_PPM_M_CYCLECNT_1                              0x0000A70C /* RR-4R */
#define NV_PPM_M_CYCLECNT_1_VAL                                 7:0 /* RR-UF */
#define NV_PPM_M_EVENTCNT_0                              0x0000A710 /* RR-4R */
#define NV_PPM_M_EVENTCNT_0_VAL                                31:0 /* RR-UF */
#define NV_PPM_M_EVENTCNT_1                              0x0000A714 /* RR-4R */
#define NV_PPM_M_EVENTCNT_1_VAL                                 7:0 /* RR-UF */
#define NV_PPM_M_THRESHCNT_0                             0x0000A718 /* RR-4R */
#define NV_PPM_M_THRESHCNT_0_VAL                               31:0 /* RR-UF */
#define NV_PPM_M_THRESHCNT_1                             0x0000A71C /* RR-4R */
#define NV_PPM_M_THRESHCNT_1_VAL                                7:0 /* RR-UF */
#define NV_PPM_M_TRIGGERCNT                              0x0000A720 /* RW-4R */
#define NV_PPM_M_TRIGGERCNT_VAL                                31:0 /* RWXUF */
#define NV_PPM_M_SAMPLECNT                               0x0000A724 /* RW-4R */
#define NV_PPM_M_SAMPLECNT_VAL                                 31:0 /* RWXUF */
#define NV_PPM_M_THRESHOLD_0                             0x0000A728 /* RW-4R */
#define NV_PPM_M_THRESHOLD_0_VAL                               31:0 /* RWXUF */
#define NV_PPM_M_THRESHOLD_1                             0x0000A72C /* RW-4R */
#define NV_PPM_M_THRESHOLD_1_VAL                                7:0 /* RWXUF */
#define NV_PPM_NV_WATCH0                                 0x0000A430 /* RR-4R */
#define NV_PPM_NV_WATCH0_GR_XBAR2FE_PIXCOUNT_REPORT_REQ_NV     0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CBUF_READY3                   1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CBUF_READY2                   2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CBUF_READY1                   3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CBUF_READY0                   4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CBUF_STALL                    5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_FEFLUSHACTIVE                      6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_BACKEND_IDLE                       7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2FE_SEMAPHORE_RELEASE_REQ      8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2R2D_BUSY                      9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_PROP2CMB_READY                    10:10 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_CMB2PROP_VALID                    11:11 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_CMB2RSTR_VALID                    12:12 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_RECIRC_CYCLE                      13:13 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_CMB2SHDBE_BUSY                    14:14 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_SHDBE2SHD_VALID                   15:15 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_SHDBE2TEX_BUSY                    16:16 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_SHDBE2CMB_VALID                   17:17 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TFAB_TPB_BUSY                     18:18 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TFAB_TPA_BUSY                     19:19 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TC2FB_P3_STALL                    20:20 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TC2FB_P2_STALL                    21:21 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TC2FB_P1_STALL                    22:22 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TC2FB_P0_STALL                    23:23 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TCDMA2FB_STALL                    24:24 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_UNALIGN_XFER                  25:25 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_DXT_XFER                      26:26 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_PAL_XFER                      27:27 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_PAL_LOAD                      28:28 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_XFER1                         29:29 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_DXP_XFER0                         30:30 /* RR-UF */
#define NV_PPM_NV_WATCH0_GR_TPB_STATUS                        31:31 /* RR-UF */
#define NV_PPM_NV_WATCH1                                 0x0000A434 /* RR-4R */
#define NV_PPM_NV_WATCH1_GR_TPB_RBFR_FULL                      0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPB_INUSE_STALL                    1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPB_XBFR_STALL                     2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_STATUS                         3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_RBFR_FULL                      4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_INUSE_STALL                    5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_XBFR_STALL                     6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_M_TPB_SYNC_BUSY                    7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPB_M_SYNC_VALID                   8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_M_TPA_SYNC_BUSY                    9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_M_SYNC_VALID                  10:10 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_M_TPB_BUSY                        11:11 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPB_M_VALID                       12:12 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_M_TPA_BUSY                        13:13 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_M_VALID                       14:14 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPB_TMAB_BUSY                     15:15 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TMAB_TPB_VALID                    16:16 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TPA_TMAB_BUSY                     17:17 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TMAB_TPA_VALID                    18:18 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TEX2SHD_BUSY                      19:19 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_TEX2SHDBE_VALID                   20:20 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_CACHE_IDLE                        21:21 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_FBI_RDFA_FULL                     22:22 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_FBI_RDFB_FULL                     23:23 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SPF_FULL                          24:24 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_PMI_RDF_FULL                      25:25 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SHD2SHDBE_BUSY                    26:26 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SHD2SHDBE_VALID                   27:27 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SHD_IDLE                          28:28 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SP3_BUSY                          29:29 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SP2_BUSY                          30:30 /* RR-UF */
#define NV_PPM_NV_WATCH1_GR_SP1_BUSY                          31:31 /* RR-UF */
#define NV_PPM_NV_WATCH2                                 0x0000A438 /* RR-4R */
#define NV_PPM_NV_WATCH2_GR_SP0_BUSY                           0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_SHD2TEX_VALID                      1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_SHD2RSTR_BUSY                      2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_SHD2CAS_BUSY                       3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CAS2SHD_LAST                       4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CAS2SHD_VALID                      5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CASIDLE                            6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CAS2STP_BUSY                       7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CAS2VTX_BUSY                       8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2PROP_OUTPUT_REQ                9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2PROP_OUTPUT_NOP               10:10 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_RSTR2D_IDLE                       11:11 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2TEX_IM_RIGHT_DV               12:12 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2TEX_IM_LEFT_DV                13:13 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2TEX_IM_NEWLINE                14:14 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2FE_RSTR2D_BUSY                15:15 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_R2D2PM_FE_REQ                     16:16 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_RSTR2PROP_ZCULL_COMPRESSED        17:17 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_RSTR2PROP_ZCULL_VALID             18:18 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_RSTR2SHD_EOPRIM                   19:19 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_RSTR2SHD_VALID                    20:20 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_FRSTR2CULL_READY                  21:21 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_PIXCNT_0                          22:22 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_PIXCNT_1                          23:23 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_PIXCNT_2                          24:24 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_FINE_EDGE_EVAL                    25:25 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_FINE_ALIASED                      26:26 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_ZOCL2FB_REQ                       27:27 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CULL2PM_ZCULL3                    28:28 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CULL2PM_ZCULL2                    29:29 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CULL2PM_ZCULL1                    30:30 /* RR-UF */
#define NV_PPM_NV_WATCH2_GR_CULL2FRSTR_ZST_COMPRESS           31:31 /* RR-UF */
#define NV_PPM_NV_WATCH3                                 0x0000A43C /* RR-4R */
#define NV_PPM_NV_WATCH3_GR_CULL2FRSTR_DV                      0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_CULL2FRSTR_NULLZ                   1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_CULL2CRSTR_READY                   2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_CRSTR2CULL_VALID                   3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_RSTR2PM_SEARCH_MODE                4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_RSTR2STP_READY                     5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_STP_IDLE                    6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2VTX_NOT_BUSY                   7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2RSTR_VALID                     8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2RSTR_DO_SWATHS                 9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2CAS_VALID                     10:10 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_START_PRIM                 11:11 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_POLYMODE                   12:12 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_DO_POINT                   13:13 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_DO_LINE                    14:14 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_CULL_REASON_0              15:15 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_CULL_REASON_1              16:16 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_STP2PM_CULL_REASON_2              17:17 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTX2STP_STATEVALID                18:18 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTX2STP_PRIMVALID                 19:19 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTX2CAS_VALID                     20:20 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTXIDLE                           21:21 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTX2XF_LAUNCHBUSY                 22:22 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_VTX2FD_BYPBUSY                    23:23 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF_FETCH_BUSY                     24:24 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF_ISSUE_VALID                    25:25 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF_IDLE                           26:26 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF2VTX_LAUNCH_VALID               27:27 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF2VTX_LAST                       28:28 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF2VTX_VALID                      29:29 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_XF2FD_BUSY                        30:30 /* RR-UF */
#define NV_PPM_NV_WATCH3_GR_FD_PROCESS1                       31:31 /* RR-UF */
#define NV_PPM_NV_WATCH4                                 0x0000A630 /* RR-4R */
#define NV_PPM_NV_WATCH4_GR_FD_PROCESS0                        0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2XF_LAUNCH                       1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2XF_INIT                         2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2XF_ACTIVE                       3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2XF_VALID                        4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2VTX_BYPVALID                    5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2IDX_BYPBUSY                     6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FD2IDX_BUSY                        7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2FD_LAUNCH                      8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2FD_BYPVALID                    9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2FD_VALID                      10:10 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_INTALIGN                          11:11 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_COMPOVFL                          12:12 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_PTEBUSY                           13:13 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_BYPASSFULL                        14:14 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDXIDLE                           15:15 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_SLOTHIT                           16:16 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_SLOTMISS                          17:17 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_CACHEHIT                          18:18 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_CACHEMISS                         19:19 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_CACHEUSAGEWAIT                    20:20 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_CACHEUSAGEFULL                    21:21 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_PTEUSAGEWAIT                      22:22 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2PMI_VALID                     23:23 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2DEC_BUSY                      24:24 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2FBI_INST                      25:25 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_IDX2FBI_VALID                     26:26 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FBI2IDX_BUSY                      27:27 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FE2PM_FBI_REQ_BURST               28:28 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FE2PM_FBI_REQ                     29:29 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FE2PM_FBI_RD                      30:30 /* RR-UF */
#define NV_PPM_NV_WATCH4_GR_FE2PM_FBI_INST                    31:31 /* RR-UF */
#define NV_PPM_NV_WATCH5                                 0x0000A634 /* RR-4R */
#define NV_PPM_NV_WATCH5_GR_FE2XBAR_PIXELCOUNT_REPORT_BUSY     0: 0 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_FE2PROP_SEMAPHORE_RELEASE_BUSY     1: 1 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_FE2PM_CACHE_INVALIDATE             2: 2 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_NVINTR_GR                          3: 3 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_WAIT_GR_IDLE                       4: 4 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_GR_IDLE                            5: 5 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_DEC2IDX_VALID_0                    6: 6 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_DEC2IDX_VALID_1                    7: 7 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_FF_GR_RDY                          8: 8 /* RR-UF */
#define NV_PPM_NV_WATCH5_GR_FF_GR_B2B                          9: 9 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_VSYNC1                           10:10 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_FB2ZOCL_BUSY                     11:11 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_COALESCE_0                  12:12 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_COALESCE_1                  13:13 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_COALESCE_2                  14:14 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_BUSY3                       15:15 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_BUSY2                       16:16 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_BUSY1                       17:17 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_CBUF_BUSY0                       18:18 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_PMI2IDX_BUSY                     19:19 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_FF_GR_MDV                        20:20 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_FF_DHV                           21:21 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_FF_CHSW                          22:22 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_BR2PM_DEVSEL_                    23:23 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_BR2PM_STOP_                      24:24 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_BR2PM_TRDY_                      25:25 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_BR2PM_IRDY_                      26:26 /* RR-UF */
#define NV_PPM_NV_WATCH5_TOP_BR2PM_FRAME_                     27:27 /* RR-UF */
#define NV_PPM_M_WATCH0                                  0x0000A530 /* RR-4R */
#define NV_PPM_M_WATCH0_GR_XBARSTATE0_0                        0: 0 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE0_1                        1: 1 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE0_2                        2: 2 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE1_0                        3: 3 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE1_1                        4: 4 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE1_2                        5: 5 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE2_0                        6: 6 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE2_1                        7: 7 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE2_2                        8: 8 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE3_0                        9: 9 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE3_1                       10:10 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBARSTATE3_2                       11:11 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBAR2ZROP_BUSY0                    12:12 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBAR2ZROP_BUSY1                    13:13 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBAR2ZROP_BUSY2                    14:14 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBAR2ZROP_BUSY3                    15:15 /* RR-UF */
#define NV_PPM_M_WATCH0_GR_XBAR2ZROP_IDLE                     16:16 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2ZRD_P0_BUSY                    17:17 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2ZWR_P0_BUSY                    18:18 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2CRD_P0_BUSY                    19:19 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2CWR_P0_BUSY                    20:20 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2ZRD_P0_QEMPTY                  21:21 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2ZWR_P0_QEMPTY                  22:22 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2CRD_P0_QEMPTY                  23:23 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_FB2CWR_P0_QEMPTY                  24:24 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_MC_BUSY_D                 25:25 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_ANY_GNT_VALID          26:26 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_NX_CONT_GNT            27:27 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_GNT_BANK_0             28:28 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_GNT_BANK_1             29:29 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_ZW_GNT_COMPRESS        30:30 /* RR-UF */
#define NV_PPM_M_WATCH0_TOP_P0_FARB_A1_GNT_CLOSE_PAGE         31:31 /* RR-UF */
#define NV_PPM_M_WATCH1                                  0x0000A534 /* RR-4R */
#define NV_PPM_M_WATCH1_TOP_P0_FARB_A1_GNT_RD                  0: 0 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CWR2FB_REQ                         1: 1 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CROP2PM_BURST_STALL_RD             2: 2 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CROP2PM_SB_STALL                   3: 3 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CROP2PM_HASH_STALL                 4: 4 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CROP2XBAR_BUSY                     5: 5 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZWR2FB_REQ                         6: 6 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZROP2XBAR_REQ                      7: 7 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZWR_WAIT4CSUBPKT                   8: 8 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZWR2ZRD_ZSUBPKT_BUSY               9: 9 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZWR2ZRD_PKT_BUSY                  10:10 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZROP2CBUF_CSUBPKT_BUSY            11:11 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZRD2FB_REQ                        12:12 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ILOCK_STALL                       13:13 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_TAG_STALL                         14:14 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_TOSS_CULL                         15:15 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZRD2ZWR_ZSUBPKT_RDY               16:16 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZRD2ZWR_PKT_RDY                   17:17 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZROP2CBUF_ZSUBPKT_BUSY            18:18 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_ZROP2CBUF_PKT_BUSY                19:19 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CBUF2ZROP_ZSUBPKT_RDY             20:20 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CBUF2ZROP_CSUBPKT_RDY             21:21 /* RR-UF */
#define NV_PPM_M_WATCH1_TOP_CBUF2ZROP_PKT_RDY                 22:22 /* RR-UF */
#define NV_PPM_NV_WATCH5_ZEROBIT                              28:28 /* RR-UF */
#define NV_PPM_NV_WATCH5_FE2PM_TRIGGER                        29:29 /* RR-UF */
#define NV_PPM_NV_WATCH5_MFLAG_SYNC                           30:30 /* RR-UF */
#define NV_PPM_NV_WATCH5_NVFLAG                               31:31 /* RR-UF */
#define NV_PPM_M_WATCH1_ZEROBIT                               28:28 /* RR-UF */
#define NV_PPM_M_WATCH1_FE2PM_TRIGGER                         29:29 /* RR-UF */
#define NV_PPM_M_WATCH1_MFLAG                                 30:30 /* RR-UF */
#define NV_PPM_M_WATCH1_NVFLAG_SYNC                           31:31 /* RR-UF */
#define NV_PPM_CONTROL                                   0x0000A73C /* RW-4R */
#define NV_PPM_CONTROL_M_ADDTOEVENT                             0:0 /* RWXUF */
#define NV_PPM_CONTROL_M_ADDTOEVENT_INCR                 0x00000000 /* RWI-V */
#define NV_PPM_CONTROL_M_ADDTOEVENT_ADDTRIG1             0x00000001 /* RWI-V */
#define NV_PPM_CONTROL_DRIVE_OUT                                1:1 /* RWXUF */
#define NV_PPM_CONTROL_DRIVE_OUT_NORMAL                  0x00000000 /* RWI-V */
#define NV_PPM_CONTROL_DRIVE_OUT_OBSERVE                 0x00000001 /* RWI-V */
#define NV_PPM_CONTROL_NV_ADDTOEVENT                            2:2 /* RWXUF */
#define NV_PPM_CONTROL_NV_ADDTOEVENT_INCR                0x00000000 /* RWI-V */
#define NV_PPM_CONTROL_NV_ADDTOEVENT_ADDTRIG1            0x00000001 /* RWI-V */
#define NV_PPM_CONTROL_NV_STATE                                 4:3 /* RRIUF */
#define NV_PPM_CONTROL_M_STATE                                  6:5 /* RRIUF */
#define NV_PPM_CONTROL_STATE_IDLE                        0x00000000 /* RRI-V */
#define NV_PPM_CONTROL_STATE_WAIT_TRIG0                  0x00000001 /* RRI-V */
#define NV_PPM_CONTROL_STATE_WAIT_TRIG1                  0x00000002 /* RRI-V */
#define NV_PPM_CONTROL_STATE_CAPTURE                     0x00000003 /* RRI-V */
#define NV_PPM_CONTROL_NV_CLEAR_EVENT_ONCE                      8:8 /* RWXUF */
#define NV_PPM_CONTROL_NV_CLEAR_EVENT_ONCE_DISABLE       0x00000000 /* RWI-V */
#define NV_PPM_CONTROL_NV_CLEAR_EVENT_ONCE_ENABLE        0x00000001 /* RWI-V */
#define NV_PPM_CONTROL_M_CLEAR_EVENT_ONCE                       9:9 /* RWXUF */
#define NV_PPM_CONTROL_M_CLEAR_EVENT_ONCE_DISABLE        0x00000000 /* RWI-V */
#define NV_PPM_CONTROL_M_CLEAR_EVENT_ONCE_ENABLE         0x00000001 /* RWI-V */
/* dev_ram.ref */
#define NV_PNVM                               0x3FFFFFFF:0x20000000 /* RW--M */
#define NV_PNVM_DATA032(i)                       (0x20000000+(i)*4) /* RW-4A */
#define NV_PNVM_DATA032__SIZE_1                            33554432 /*       */
#define NV_PNVM_DATA032_VALUE                                  31:0 /* RWXUF */
#define NV_PNVM_DATA016(i)           (0x20000000+((i)/3)*4+((i)%3)) /* RW-2A */
#define NV_PNVM_DATA016__SIZE_1                           67108864  /*       */
#define NV_PNVM_DATA016_VALUE                                  15:0 /* RWXUF */
#define NV_PNVM_DATA008(i)                         (0x20000000+(i)) /* RW-1A */
#define NV_PNVM_DATA008__SIZE_1                           134217728 /*       */
#define NV_PNVM_DATA008_VALUE                                   7:0 /* RWXUF */
/* dev_ram.ref */
#define NV_PDFB                               0x3FFFFFFF:0x20000000 /* RW--D */
/* dev_ram.ref */
#define NV_PRAMIN                             0x007FFFFF:0x00700000 /* RW--M */
#define NV_PRAMIN_CONTEXT_0                   ( 0*32+31):( 0*32+ 0) /*       */
#define NV_PRAMIN_CONTEXT_1                   ( 1*32+31):( 1*32+ 0) /*       */
#define NV_PRAMIN_CONTEXT_2                   ( 2*32+31):( 2*32+ 0) /*       */
#define NV_PRAMIN_CONTEXT_3                   ( 3*32+31):( 3*32+ 0) /*       */
#define NV_PRAMIN_RAMHT_0                     0x00710FFF:0x00710000 /* RW--M */
#define NV_PRAMIN_RAMFC_0                     0x007113FF:0x00711000 /* RW--M */
#define NV_PRAMIN_RAMRO_0                     0x007115FF:0x00711400 /* RW--M */
#define NV_PRAMIN_CTX_0(i)                    (0x00700000 + (i)*16) /* RW--M */
#define NV_PRAMIN_CTX_0__SIZE_1                             0x10000 /*       */
#define NV_PRAMIN_CTX_0_NVCLASS                                11:0 /* RWXUF */
#define NV_PRAMIN_CTX_0_NVCLASS_NV_ROOT                  0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_NVCLASS_012                      0x00000012 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_017                      0x00000017 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_018                      0x00000018 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_019                      0x00000019 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_01C                      0x0000001C /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_01D                      0x0000001D /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_01E                      0x0000001E /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_01F                      0x0000001F /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_021                      0x00000021 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_030                      0x00000030 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_036                      0x00000036 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_037                      0x00000037 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_038                      0x00000038 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_039                      0x00000039 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_042                      0x00000042 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_043                      0x00000043 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_044                      0x00000044 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_048                      0x00000048 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_04A                      0x0000004A /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_04B                      0x0000004B /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_052                      0x00000052 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_053                      0x00000053 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_054                      0x00000054 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_055                      0x00000055 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_057                      0x00000057 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_058                      0x00000058 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_059                      0x00000059 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_05A                      0x0000005A /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_05B                      0x0000005B /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_05C                      0x0000005C /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_05E                      0x0000005E /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_05F                      0x0000005F /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_060                      0x00000060 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_061                      0x00000061 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_064                      0x00000064 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_065                      0x00000065 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_066                      0x00000066 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_067                      0x00000067 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_072                      0x00000072 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_076                      0x00000076 /* RWC-V */
#define NV_PRAMIN_CTX_0_NVCLASS_077                      0x00000077 /* RWC-V */
#define NV_PRAMIN_CTX_0_CHROMA_KEY                            12:12 /* RWXUF */
#define NV_PRAMIN_CTX_0_CHROMA_KEY_DISABLE               0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CHROMA_KEY_ENABLE                0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_USER_CLIP                             13:13 /* RWXUF */
#define NV_PRAMIN_CTX_0_USER_CLIP_DISABLE                0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_USER_CLIP_ENABLE                 0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_SWIZZLE                               14:14 /* RWXUF */
#define NV_PRAMIN_CTX_0_SWIZZLE_DISABLE                  0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_SWIZZLE_ENABLE                   0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG                          17:15 /* RWXUF */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_SRCCOPY_AND         0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_ROP_AND             0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_BLEND_AND           0x00000002 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_SRCCOPY             0x00000003 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_SRCCOPY_PRE         0x00000004 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_CONFIG_BLEND_PRE           0x00000005 /* RW--V */
#define NV_PRAMIN_CTX_0_SYNCHRONIZE                           18:18 /* RWXUF */
#define NV_PRAMIN_CTX_0_SYNCHRONIZE_DISABLE              0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_SYNCHRONIZE_ENABLE               0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_ENDIAN_MODE                           19:19 /* RWXUF */
#define NV_PRAMIN_CTX_0_ENDIAN_MODE_LITTLE               0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_ENDIAN_MODE_BIG                  0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_DITHER_MODE                           21:20 /* RWXUF */
#define NV_PRAMIN_CTX_0_DITHER_MODE_COMPATIBILITY        0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_DITHER_MODE_DITHER               0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_DITHER_MODE_TRUNCATE             0x00000002 /* RW--V */
#define NV_PRAMIN_CTX_0_DITHER_MODE_SUBTRACT_TRUNCATE    0x00000003 /* RW--V */
#define NV_PRAMIN_CTX_0_SINGLE_STEP                           23:23 /* RWXUF */
#define NV_PRAMIN_CTX_0_SINGLE_STEP_DISABLE              0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_SINGLE_STEP_ENABLE               0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_PATCH_STATUS                          24:24 /* RWXUF */
#define NV_PRAMIN_CTX_0_PATCH_STATUS_INVALID             0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_PATCH_STATUS_VALID               0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE0                      25:25 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE0_INVALID         0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE0_VALID           0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE1                      26:26 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE1_INVALID         0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_SURFACE1_VALID           0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_PATTERN                       27:27 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_PATTERN_INVALID          0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_PATTERN_VALID            0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_ROP                           28:28 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_ROP_INVALID              0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_ROP_VALID                0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA1                         29:29 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA1_INVALID            0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA1_VALID              0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA4                         30:30 /* RWXUF */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA4_INVALID            0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_0_CONTEXT_BETA4_VALID              0x00000001 /* RW--V */
#define NV_PRAMIN_CTX_1(i)                    (0x00700004 + (i)*16) /* RW--M */
#define NV_PRAMIN_CTX_1__SIZE_1                             0x10000 /*       */
#define NV_PRAMIN_CTX_1_MONO_FORMAT                             7:0 /* RWXUF */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_INVALID                    0x00 /* RWD-V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_CGA6_M1                    0x01 /* RW--V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_LE_M1                      0x02 /* RW--V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_018                        0x01 /* RWC-V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_044                        0x01 /* RWC-V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_04A                        0x01 /* RWC-V */
#define NV_PRAMIN_CTX_1_MONO_FORMAT_04B                        0x01 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT                           15:8 /* RWXUF */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_INVALID                   0x00 /* RWD-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_Y8                     0x01 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X16A8Y8                0x02 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X24Y8                  0x03 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_A1R5G5B5               0x06 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X1R5G5B5               0x07 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X16A1R5G5B5            0x08 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X17R5G5B5              0x09 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_R5G6B5                 0x0A /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_A16R5G6B5              0x0B /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X16R5G6B5              0x0C /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_A8R8G8B8               0x0D /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X8R8G8B8               0x0E /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_Y16                    0x0F /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_A16Y16                 0x10 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_X16Y16                 0x11 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_V8YB8U8YA8             0x12 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_YB8V8YA8U8             0x13 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_LE_Y32                    0x14 /* RW--V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_017                 0x00000002 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_018                 0x00000002 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_01C                 0x00000003 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_01D                 0x00000003 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_01E                 0x00000003 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_021                 0x00000001 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_036                 0x00000001 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_037                 0x00000006 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_044                 0x0000000B /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_04A                 0x0000000C /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_04B                 0x00000003 /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_057                 0x0000000B /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_05C                 0x0000000C /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_05D                 0x0000000C /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_05E                 0x0000000C /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_060                 0x0000000A /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_061                 0x0000000A /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_076                 0x0000000A /* RWC-V */
#define NV_PRAMIN_CTX_1_COLOR_FORMAT_077                 0x00000006 /* RWC-V */
#define NV_PRAMIN_CTX_1_NOTIFY_INSTANCE                       31:16 /* RWXUF */
#define NV_PRAMIN_CTX_1_NOTIFY_INSTANCE_INVALID              0x0000 /* RWD-V */
#define NV_PRAMIN_CTX_2(i)                    (0x00700008 + (i)*16) /* RW--M */
#define NV_PRAMIN_CTX_2__SIZE_1                             0x10000 /*       */
#define NV_PRAMIN_CTX_2_DMA_0_INSTANCE                         15:0 /* RWXUF */
#define NV_PRAMIN_CTX_2_DMA_0_INSTANCE_INVALID               0x0000 /* RWD-V */
#define NV_PRAMIN_CTX_2_DMA_1_INSTANCE                        31:16 /* RWXUF */
#define NV_PRAMIN_CTX_2_DMA_1_INSTANCE_INVALID               0x0000 /* RWD-V */
#define NV_PRAMIN_CTX_3(i)                    (0x0070000C + (i)*16) /* RW--M */
#define NV_PRAMIN_CTX_3__SIZE_1                             0x10000 /*       */
#define NV_PRAMIN_CTX_3_METHOD_TRAPS                           31:0 /* RWXUF */
#define NV_PRAMIN_CTX_3_METHOD_TRAPS_DISABLED            0x00000000 /* RWD-V */
#define NV_PRAMIN_CTX_4(i)                    (0x00700010 + (i)*16) /* RW--M */
#define NV_PRAMIN_DATA032(i)                     (0x00700000+(i)*4) /* RW-4A */
#define NV_PRAMIN_DATA032__SIZE_1                            524288 /*       */
#define NV_PRAMIN_DATA032_VALUE                                31:0 /* RWXUF */
#define NV_PRAMIN_DATA016(i)         (0x00700000+((i)/3)*4+((i)%3)) /* RW-2A */
#define NV_PRAMIN_DATA016__SIZE_1                           1572864 /*       */
#define NV_PRAMIN_DATA016_VALUE                                15:0 /* RWXUF */
#define NV_PRAMIN_DATA008(i)                       (0x00700000+(i)) /* RW-1A */
#define NV_PRAMIN_DATA008__SIZE_1                           2097152 /*       */
#define NV_PRAMIN_DATA008_VALUE                                 7:0 /* RWXUF */
/* dev_ram.ref */
#define NV_FIFO_DMA_OPCODE                    ( 0*32+31):( 0*32+29) /* RWXUF */
#define NV_FIFO_DMA_OPCODE_METHOD                        0x00000000 /* ----V */
#define NV_FIFO_DMA_OPCODE_JUMP                          0x00000001 /* ----V */
#define NV_FIFO_DMA_OPCODE_NONINC_METHOD                 0x00000002 /* ----V */
#define NV_FIFO_DMA_OPCODE2                   ( 0*32+ 1):( 0*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2_NONE                         0x00000000 /* ----V */
#define NV_FIFO_DMA_OPCODE2_JUMP_LONG                    0x00000001 /* ----V */
#define NV_FIFO_DMA_OPCODE2_CALL                         0x00000002 /* ----V */
#define NV_FIFO_DMA_OPCODE                    ( 0*32+31):( 0*32+29) /* RWXUF */
#define NV_FIFO_DMA_OPCODE_METHOD                        0x00000000 /* ----V */
#define NV_FIFO_DMA_OPCODE_NONINC_METHOD                 0x00000002 /* ----V */
#define NV_FIFO_DMA_METHOD_COUNT              ( 0*32+28):( 0*32+18) /* RWXUF */
#define NV_FIFO_DMA_OPCODE3                   ( 0*32+17):( 0*32+16) /* RWXUF */
#define NV_FIFO_DMA_OPCODE3_NONE                         0x00000000 /* ----V */
#define NV_FIFO_DMA_METHOD_SUBCHANNEL         ( 0*32+15):( 0*32+13) /* RWXUF */
#define NV_FIFO_DMA_METHOD_ADDRESS            ( 0*32+12):( 0*32+ 2) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2                   ( 0*32+ 1):( 0*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2_NONE                         0x00000000 /* ----V */
#define NV_FIFO_DMA_DATA                      ( 1*32+31):( 1*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_NOP                                  0x00000000 /* RWXUF */
#define NV_FIFO_DMA_OPCODE                    ( 0*32+31):( 0*32+29) /* RWXUF */
#define NV_FIFO_DMA_OPCODE_JUMP                          0x00000001 /* ----V */
#define NV_FIFO_DMA_OPCODE2                   ( 0*32+ 1):( 0*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2_NONE                         0x00000000 /* ----V */
#define NV_FIFO_DMA_JUMP_OFFSET               ( 0*32+28):( 0*32+ 2) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2                   ( 0*32+ 1):( 0*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2_JUMP_LONG                    0x00000001 /* ----V */
#define NV_FIFO_DMA_JUMP_LONG_OFFSET          ( 0*32+31):( 0*32+ 2) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2                   ( 0*32+ 1):( 0*32+ 0) /* RWXUF */
#define NV_FIFO_DMA_OPCODE2_CALL                         0x00000002 /* ----V */
#define NV_FIFO_DMA_CALL_OFFSET               ( 0*32+31):( 0*32+ 2) /* RWXUF */
#define NV_FIFO_DMA_RETURN                               0x00020000 /* RWXUF */
#define NV_FIFO_DMA_OPCODE3                   ( 0*32+17):( 0*32+16) /* RWXUF */
#define NV_FIFO_DMA_OPCODE3_RETURN                       0x00000002 /* ----V */
/* dev_ram.ref */
#define NV_PRAM                               0x00006FFF:0x00006000 /* RW--D */
/* dev_fb.ref */
#define NV_PFB                                0x00100FFF:0x00100000 /* RW--D */
#define NV_PFB_DEBUG_0                                   0x00100080 /* RW-4R */
#define NV_PFB_DEBUG_0_FINE_SEL                                 2:0 /* RWIVF */
#define NV_PFB_DEBUG_0_FINE_SEL_0                        0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_MRS                                      4:4 /* RWIVF */
#define NV_PFB_DEBUG_0_MRS_256                           0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_MRS_2                             0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_SPARE0                                   8:8 /* RWIVF */
#define NV_PFB_DEBUG_0_SPARE0_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_SPARE0_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2NV                    16:16 /* RWIVF */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2NV_DISABLED      0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2NV_ENABLED       0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2CPU                   17:17 /* RWIVF */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2CPU_DISABLED     0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2CPU_ENABLED      0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2AGP                   18:18 /* RWIVF */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2AGP_DISABLED     0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2AGP_ENABLED      0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2LDT                   19:19 /* RWIVF */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2LDT_DISABLED     0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_RR_M2LDT_ENABLED      0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_FA                         24:24 /* RWIVF */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_FA_DISABLED           0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_XTRA_SETTLE_FA_ENABLED            0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_BURST_INTERRUPT                        27:27 /* RWIVF */
#define NV_PFB_DEBUG_0_BURST_INTERRUPT_ENABLED           0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_BURST_INTERRUPT_DISABLED          0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_SPARE1                                 28:28 /* RWIVF */
#define NV_PFB_DEBUG_0_SPARE1_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_SPARE1_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_SPARE2                                 29:29 /* RWIVF */
#define NV_PFB_DEBUG_0_SPARE2_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_SPARE2_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_SPARE3                                 30:30 /* RWIVF */
#define NV_PFB_DEBUG_0_SPARE3_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_SPARE3_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_DEBUG_0_SPARE4                                 31:31 /* RWIVF */
#define NV_PFB_DEBUG_0_SPARE4_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_DEBUG_0_SPARE4_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_RDI_INDEX                                 0x001000F0 /* RW-4R */
#define NV_PFB_RDI_INDEX_ADDRESS                               12:6 /* RWIVF */
#define NV_PFB_RDI_INDEX_ADDRESS_0                       0x00000000 /* RWI-V */
#define NV_PFB_RDI_INDEX_SELECT                               24:16 /* RWIVF */
#define NV_PFB_RDI_INDEX_SELECT_0                        0x00000000 /* RWI-V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQ_P0                0x00000100 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQ_P1                0x00000101 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQ_P2                0x00000102 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQ_P3                0x00000103 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZOQ_P0                0x00000104 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZOQ_P1                0x00000105 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZOQ_P2                0x00000106 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZOQ_P3                0x00000107 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T0Q_P0                0x00000108 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T0Q_P1                0x00000109 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T0Q_P2                0x0000010A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T0Q_P3                0x0000010B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T1Q_P0                0x0000010C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T1Q_P1                0x0000010D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T1Q_P2                0x0000010E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_T1Q_P3                0x0000010F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZRQ_P0                0x00000110 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZRQ_P1                0x00000111 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZRQ_P2                0x00000112 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZRQ_P3                0x00000113 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQ_P0                0x00000114 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQ_P1                0x00000115 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQ_P2                0x00000116 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQ_P3                0x00000117 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CRQ_P0                0x00000118 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CRQ_P1                0x00000119 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CRQ_P2                0x0000011A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CRQ_P3                0x0000011B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQ_P0                0x0000011C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQ_P1                0x0000011D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQ_P2                0x0000011E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQ_P3                0x0000011F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_EXTQ_P0               0x00000120 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_EXTQ_P1               0x00000121 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_EXTQ_P2               0x00000122 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_EXTQ_P3               0x00000123 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_HP_HPQ_P0                0x00000124 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_HP_HPQ_P1                0x00000125 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_HP_HPQ_P2                0x00000126 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_HP_HPQ_P3                0x00000127 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_AGP_D             0x00000128 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_AGP_BE            0x00000129 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_ISO_D             0x0000012A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_ISO_BE            0x0000012B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_NONISO_D          0x0000012C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_NONISO_BE         0x0000012D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_CPU_D             0x0000012E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_SNQ_CPU_BE            0x0000012F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_ZTAG_P0               0x00000130 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_ZTAG_P1               0x00000131 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_ZTAG_P2               0x00000132 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_ZTAG_P3               0x00000133 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_GART_INTFC_CPU_D         0x00000134 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_GART_INTFC_CPU_BE        0x00000135 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_WBC_DATA                 0x00000136 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_CPUQ_P0         0x00000138 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_CPUQ_P1         0x00000139 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_CPUQ_P2         0x0000013A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_CPUQ_P3         0x0000013B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_LDTQ_P0         0x0000013C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_LDTQ_P1         0x0000013D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_LDTQ_P2         0x0000013E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_PA_RTARB_LDTQ_P3         0x0000013F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_RWAQ_P0        0x00000140 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_RWAQ_P1        0x00000141 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_RWAQ_P2        0x00000142 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_RWAQ_P3        0x00000143 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_PRQ_P0         0x00000148 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_PRQ_P1         0x00000149 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_PRQ_P2         0x0000014A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_PRQ_P3         0x0000014B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_ACQ_P0         0x0000014C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_ACQ_P1         0x0000014D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_ACQ_P2         0x0000014E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQHP_ACQ_P3         0x0000014F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQW_P0               0x00000150 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQW_P1               0x00000151 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQW_P2               0x00000152 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_LPQW_P3               0x00000153 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQW_P0               0x00000154 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQW_P1               0x00000155 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQW_P2               0x00000156 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_ZWQW_P3               0x00000157 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQW_P0               0x00000158 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQW_P1               0x00000159 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQW_P2               0x0000015A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_FA_CWQW_P3               0x0000015B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_AGP_P0                0x0000015C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_AGP_P1                0x0000015D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_AGP_P2                0x0000015E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_AGP_P3                0x0000015F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_ISO_P0                0x00000160 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_ISO_P1                0x00000161 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_ISO_P2                0x00000162 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_ISO_P3                0x00000163 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_NONISO_P0             0x00000164 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_NONISO_P1             0x00000165 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_NONISO_P2             0x00000166 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_NONISO_P3             0x00000167 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_CPU_P0                0x00000168 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_CPU_P1                0x00000169 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_CPU_P2                0x0000016A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_CPU_P3                0x0000016B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0HP_P0               0x0000016C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0HP_P1               0x0000016D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0HP_P2               0x0000016E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0HP_P3               0x0000016F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0LP_P0               0x00000170 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0LP_P1               0x00000171 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0LP_P2               0x00000172 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W0LP_P3               0x00000173 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W1LP_P0               0x00000174 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W1LP_P1               0x00000175 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W1LP_P2               0x00000176 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W1LP_P3               0x00000177 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W2LP_P0               0x00000178 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W2LP_P1               0x00000179 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W2LP_P2               0x0000017A /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W2LP_P3               0x0000017B /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W3HP_P0               0x0000017C /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W3HP_P1               0x0000017D /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W3HP_P2               0x0000017E /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_RR_W3HP_P3               0x0000017F /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWAQ_P0        0x000001A0 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWAQ_P1        0x000001A1 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWAQ_P2        0x000001A2 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWAQ_P3        0x000001A3 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWDQ_P0        0x000001A4 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWDQ_P1        0x000001A5 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWDQ_P2        0x000001A6 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_RWDQ_P3        0x000001A7 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_PRQ_P0         0x000001A8 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_PRQ_P1         0x000001A9 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_PRQ_P2         0x000001AA /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_PRQ_P3         0x000001AB /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_ACQ_P0         0x000001AC /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_ACQ_P1         0x000001AD /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_ACQ_P2         0x000001AE /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQFA_ACQ_P3         0x000001AF /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWAQ_P0        0x000001B0 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWAQ_P1        0x000001B1 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWAQ_P2        0x000001B2 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWAQ_P3        0x000001B3 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWDQ_P0        0x000001B4 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWDQ_P1        0x000001B5 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWDQ_P2        0x000001B6 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_RWDQ_P3        0x000001B7 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_PRQ_P0         0x000001B8 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_PRQ_P1         0x000001B9 /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_PRQ_P2         0x000001BA /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_PRQ_P3         0x000001BB /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_ACQ_P0         0x000001BC /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_ACQ_P1         0x000001BD /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_ACQ_P2         0x000001BE /* RW--V */
#define NV_PFB_RDI_INDEX_SELECT_MC_CMDQRT_ACQ_P3         0x000001BF /* RW--V */
#define NV_PFB_RDI_DATA(i)                       (0x00100100+(i)*4) /* RW-4A */
#define NV_PFB_RDI_DATA__SIZE_1                                  16 /*       */
#define NV_PFB_RDI_DATA_FIELD                                  31:0 /* RW-VF */
#define NV_PFB_CFG0                                      0x00100200 /* RW-4R */
#define NV_PFB_CFG0_PART                                        1:0 /* RWIVF */
#define NV_PFB_CFG0_PART_4                               0x00000003 /* RWI-V */
#define NV_PFB_CFG0_PART_1                               0x00000000 /* RW--V */
#define NV_PFB_CFG0_PART_2                               0x00000001 /* RW--V */
#define NV_PFB_CFG0_EXTBANK                                     8:8 /* RWIVF */
#define NV_PFB_CFG0_EXTBANK_0                            0x00000000 /* RW--V */
#define NV_PFB_CFG0_EXTBANK_1                            0x00000001 /* RWI-V */
#define NV_PFB_CFG0_BURST_INT_RD2RD                           16:16 /* RWIVF */
#define NV_PFB_CFG0_BURST_INT_RD2RD_DISABLED             0x00000000 /* RW--V */
#define NV_PFB_CFG0_BURST_INT_RD2RD_ENABLED              0x00000001 /* RWI-V */
#define NV_PFB_CFG0_BURST_INT_WR2WR                           17:17 /* RWIVF */
#define NV_PFB_CFG0_BURST_INT_WR2WR_DISABLED             0x00000000 /* RW--V */
#define NV_PFB_CFG0_BURST_INT_WR2WR_ENABLED              0x00000001 /* RWI-V */
#define NV_PFB_CFG0_BURST_INT_RD2PRE                          18:18 /* RWIVF */
#define NV_PFB_CFG0_BURST_INT_RD2PRE_DISABLED            0x00000000 /* RW--V */
#define NV_PFB_CFG0_BURST_INT_RD2PRE_ENABLED             0x00000001 /* RWI-V */
#define NV_PFB_CFG0_SPARE0                                    19:19 /* RWIVF */
#define NV_PFB_CFG0_SPARE0_DISABLED                      0x00000000 /* RWI-V */
#define NV_PFB_CFG0_SPARE0_ENABLED                       0x00000001 /* RW--V */
#define NV_PFB_CFG0_AUTO_PRE_RD                               24:24 /* RWIVF */
#define NV_PFB_CFG0_AUTO_PRE_RD_DISABLED                 0x00000000 /* RW--V */
#define NV_PFB_CFG0_AUTO_PRE_RD_ENABLED                  0x00000001 /* RWI-V */
#define NV_PFB_CFG0_AUTO_PRE_WR                               25:25 /* RWIVF */
#define NV_PFB_CFG0_AUTO_PRE_WR_DISABLED                 0x00000000 /* RW--V */
#define NV_PFB_CFG0_AUTO_PRE_WR_ENABLED                  0x00000001 /* RWI-V */
#define NV_PFB_CFG0_SYNC_MODE                                 26:26 /* RWIVF */
#define NV_PFB_CFG0_SYNC_MODE_DISABLED                   0x00000000 /* RWI-V */
#define NV_PFB_CFG0_SYNC_MODE_ENABLED                    0x00000001 /* RW--V */
#define NV_PFB_CFG0_TWO_CLK_ADDR                              27:27 /* RWIVF */
#define NV_PFB_CFG0_TWO_CLK_ADDR_DISABLE                 0x00000000 /* RWI-V */
#define NV_PFB_CFG0_TWO_CLK_ADDR_ENABLE                  0x00000001 /* RW--V */
#define NV_PFB_CFG1                                      0x00100204 /* RW-4R */
#define NV_PFB_CFG1_APA                                         6:4 /* RWIVF */
#define NV_PFB_CFG1_APA_A8                               0x00000000 /* RWI-V */
#define NV_PFB_CFG1_APA_A9                               0x00000001 /* RW--V */
#define NV_PFB_CFG1_APA_A10                              0x00000002 /* RW--V */
#define NV_PFB_CFG1_APA_A11                              0x00000003 /* RW--V */
#define NV_PFB_CFG1_APA_A12                              0x00000004 /* RW--V */
#define NV_PFB_CFG1_APB                                        10:8 /* RWIVF */
#define NV_PFB_CFG1_APB_A8                               0x00000000 /* RWI-V */
#define NV_PFB_CFG1_APB_A9                               0x00000001 /* RW--V */
#define NV_PFB_CFG1_APB_A10                              0x00000002 /* RW--V */
#define NV_PFB_CFG1_APB_A11                              0x00000003 /* RW--V */
#define NV_PFB_CFG1_APB_A12                              0x00000004 /* RW--V */
#define NV_PFB_CFG1_COL                                       15:12 /* RWIVF */
#define NV_PFB_CFG1_COL_8                                0x00000008 /* RWI-V */
#define NV_PFB_CFG1_COL_9                                0x00000009 /* RW--V */
#define NV_PFB_CFG1_COL_7                                0x00000007 /* RW--V */
#define NV_PFB_CFG1_COL_10                               0x0000000A /* RW--V */
#define NV_PFB_CFG1_ROWA                                      19:16 /* RWIVF */
#define NV_PFB_CFG1_ROWA_11                              0x00000003 /* RWI-V */
#define NV_PFB_CFG1_ROWA_12                              0x00000004 /* RW--V */
#define NV_PFB_CFG1_ROWA_9                               0x00000001 /* RW--V */
#define NV_PFB_CFG1_ROWA_10                              0x00000002 /* RW--V */
#define NV_PFB_CFG1_ROWA_13                              0x00000005 /* RW--V */
#define NV_PFB_CFG1_ROWB                                      23:20 /* RWIVF */
#define NV_PFB_CFG1_ROWB_11                              0x00000003 /* RWI-V */
#define NV_PFB_CFG1_ROWB_12                              0x00000004 /* RW--V */
#define NV_PFB_CFG1_ROWB_9                               0x00000001 /* RW--V */
#define NV_PFB_CFG1_ROWB_10                              0x00000002 /* RW--V */
#define NV_PFB_CFG1_ROWB_13                              0x00000005 /* RW--V */
#define NV_PFB_CFG1_BANKA                                     24:24 /* RWIVF */
#define NV_PFB_CFG1_BANKA_2                              0x00000001 /* RWI-V */
#define NV_PFB_CFG1_BANKA_1                              0x00000000 /* RW--V */
#define NV_PFB_CFG1_BANKB                                     28:28 /* RWIVF */
#define NV_PFB_CFG1_BANKB_2                              0x00000001 /* RWI-V */
#define NV_PFB_CFG1_BANKB_1                              0x00000000 /* RW--V */
#define NV_PFB_CSTATUS                                   0x0010020C /* R--4R */
#define NV_PFB_CSTATUS_RAMAMOUNT_MS                             0:0 /* R--VF */
#define NV_PFB_CSTATUS_RAMAMOUNT_LS                           31:20 /* R--VF */
#define NV_PFB_REFCTRL                                   0x00100210 /* RW-4R */
#define NV_PFB_REFCTRL_PUT                                      6:0 /* RWIVF */
#define NV_PFB_REFCTRL_PUT_0                             0x00000000 /* RWI-V */
#define NV_PFB_REFCTRL_GET                                     14:8 /* RWIVF */
#define NV_PFB_REFCTRL_GET_0                             0x00000000 /* RWI-V */
#define NV_PFB_REFCTRL_VALID                                  31:31 /* RWIVF */
#define NV_PFB_REFCTRL_VALID_0                           0x00000000 /* RWI-V */
#define NV_PFB_REFCTRL_VALID_1                           0x00000001 /* RW--V */
#define NV_PFB_NVM                                       0x00100214 /* RW-4R */
#define NV_PFB_NVM_MODE                                         0:0 /* RWIVF */
#define NV_PFB_NVM_MODE_DISABLE                          0x00000000 /* RWI-V */
#define NV_PFB_NVM_MODE_ENABLE                           0x00000001 /* RW--V */
#define NV_PFB_NVM_LIMIT                                        7:4 /* RW-VF */
#define NV_PFB_NVM_LIMIT_64K                             0x00000000 /* RW--V */
#define NV_PFB_NVM_LIMIT_128K                            0x00000001 /* RW--V */
#define NV_PFB_NVM_LIMIT_192K                            0x00000002 /* RW--V */
#define NV_PFB_NVM_LIMIT_256K                            0x00000003 /* RW--V */
#define NV_PFB_NVM_LIMIT_320K                            0x00000004 /* RW--V */
#define NV_PFB_NVM_LIMIT_384K                            0x00000005 /* RW--V */
#define NV_PFB_NVM_LIMIT_448K                            0x00000006 /* RW--V */
#define NV_PFB_NVM_LIMIT_512K                            0x00000007 /* RW--V */
#define NV_PFB_NVM_LIMIT_576K                            0x00000008 /* RW--V */
#define NV_PFB_NVM_LIMIT_640K                            0x00000009 /* RW--V */
#define NV_PFB_NVM_LIMIT_704K                            0x0000000A /* RW--V */
#define NV_PFB_NVM_LIMIT_768K                            0x0000000B /* RW--V */
#define NV_PFB_NVM_LIMIT_832K                            0x0000000C /* RW--V */
#define NV_PFB_NVM_LIMIT_896K                            0x0000000D /* RW--V */
#define NV_PFB_NVM_LIMIT_960K                            0x0000000E /* RW--V */
#define NV_PFB_NVM_LIMIT_1024K                           0x0000000F /* RW--V */
#define NV_PFB_PIN                                       0x00100218 /* RW-4R */
#define NV_PFB_PIN_CKE                                          0:0 /* RWIVF */
#define NV_PFB_PIN_CKE_POWERDOWN                         0x00000000 /* RWI-V */
#define NV_PFB_PIN_CKE_NORMAL                            0x00000001 /* RW--V */
#define NV_PFB_PIN_DQM                                          4:4 /* RWIVF */
#define NV_PFB_PIN_DQM_NORMAL                            0x00000000 /* RWI-V */
#define NV_PFB_PIN_DQM_INACTIVE                          0x00000001 /* RW--V */
#define NV_PFB_PAD                                       0x0010021C /* RW-4R */
#define NV_PFB_PAD_CKE                                          0:0 /* RWIVF */
#define NV_PFB_PAD_CKE_TRISTATE                          0x00000000 /* RWI-V */
#define NV_PFB_PAD_CKE_NORMAL                            0x00000001 /* RW--V */
#define NV_PFB_TIMING0                                   0x00100220 /* RW-4R */
#define NV_PFB_TIMING0_RC                                       4:0 /* RWIVF */
#define NV_PFB_TIMING0_RC_12                             0x0000000C /* RWI-V */
#define NV_PFB_TIMING0_RC_31                             0x0000001F /* RW--V */
#define NV_PFB_TIMING0_RFC                                     12:8 /* RWIVF */
#define NV_PFB_TIMING0_RFC_14                            0x0000000E /* RWI-V */
#define NV_PFB_TIMING0_RFC_31                            0x0000001F /* RW--V */
#define NV_PFB_TIMING0_RAS                                    19:15 /* RWIVF */
#define NV_PFB_TIMING0_RAS_8                             0x00000008 /* RWI-V */
#define NV_PFB_TIMING0_RAS_31                            0x0000001F /* RW--V */
#define NV_PFB_TIMING0_RD_RCD                                 23:20 /* RWIVF */
#define NV_PFB_TIMING0_RD_RCD_4                          0x00000004 /* RWI-V */
#define NV_PFB_TIMING0_RD_RCD_15                         0x0000000F /* RW--V */
#define NV_PFB_TIMING0_WR_RCD                                 27:24 /* RWIVF */
#define NV_PFB_TIMING0_WR_RCD_4                          0x00000004 /* RWI-V */
#define NV_PFB_TIMING0_WR_RCD_15                         0x0000000F /* RW--V */
#define NV_PFB_TIMING0_RP                                     31:28 /* RWIVF */
#define NV_PFB_TIMING0_RP_4                              0x00000004 /* RWI-V */
#define NV_PFB_TIMING0_RP_15                             0x0000000F /* RW--V */
#define NV_PFB_TIMING1                                   0x00100224 /* RW-4R */
#define NV_PFB_TIMING1_R2W                                      7:4 /* RWIVF */
#define NV_PFB_TIMING1_R2W_5                             0x00000005 /* RWI-V */
#define NV_PFB_TIMING1_R2W_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING1_R2P                                     11:8 /* RWIVF */
#define NV_PFB_TIMING1_R2P_1                             0x00000001 /* RW--V */
#define NV_PFB_TIMING1_R2P_2                             0x00000002 /* RWI-V */
#define NV_PFB_TIMING1_R2P_3                             0x00000003 /* RW--V */
#define NV_PFB_TIMING1_R2P_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING1_REXT                                   14:12 /* RWIVF */
#define NV_PFB_TIMING1_REXT_1                            0x00000001 /* RW--V */
#define NV_PFB_TIMING1_REXT_2                            0x00000002 /* RWI-V */
#define NV_PFB_TIMING1_W2R                                    19:16 /* RWIVF */
#define NV_PFB_TIMING1_W2R_3                             0x00000003 /* RW--V */
#define NV_PFB_TIMING1_W2R_4                             0x00000004 /* RWI-V */
#define NV_PFB_TIMING1_W2R_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING1_W2P                                    23:20 /* RWIVF */
#define NV_PFB_TIMING1_W2P_4                             0x00000004 /* RW--V */
#define NV_PFB_TIMING1_W2P_5                             0x00000005 /* RWI-V */
#define NV_PFB_TIMING1_W2P_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING1_RRD                                    26:24 /* RWIVF */
#define NV_PFB_TIMING1_RRD_1                             0x00000001 /* RW--V */
#define NV_PFB_TIMING1_RRD_2                             0x00000002 /* RWI-V */
#define NV_PFB_TIMING1_RRD_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING1_DOE_TYPE                               27:27 /* RWIVF */
#define NV_PFB_TIMING1_DOE_TYPE_0                        0x00000000 /* RWI-V */
#define NV_PFB_TIMING1_DOE_DLY                                30:28 /* RWIVF */
#define NV_PFB_TIMING1_DOE_DLY_7                         0x00000007 /* RWI-V */
#define NV_PFB_TIMING2                                   0x00100228 /* RW-4R */
#define NV_PFB_TIMING2_REFRESH_LO                               4:0 /* C-IVF */
#define NV_PFB_TIMING2_REFRESH_LO_1F                     0x0000001F /* C-I-V */
#define NV_PFB_TIMING2_REFRESH                                 15:5 /* RWIVF */
#define NV_PFB_TIMING2_REFRESH_0                         0x00000000 /* RW--V */
#define NV_PFB_TIMING2_REFRESH_47                        0x0000002F /* RWI-V */
#define NV_PFB_TIMING2_QUSE                                   18:16 /* RWIVF */
#define NV_PFB_TIMING2_QUSE_2                            0x00000002 /* RWI-V */
#define NV_PFB_TIMING2_QUSE_MIN                          0x00000000 /* RW--V */
#define NV_PFB_TIMING2_QUSE_MAX                          0x00000007 /* RW--V */
#define NV_PFB_TIMING2_QINC                                   23:20 /* RWIVF */
#define NV_PFB_TIMING2_QINC_1                            0x00000001 /* RWI-V */
#define NV_PFB_TIMING2_QINC_MIN                          0x00000000 /* RW--V */
#define NV_PFB_TIMING2_QINC_MAX                          0x0000000F /* RW--V */
#define NV_PFB_TIMING2_RDV                                    27:24 /* RWIVF */
#define NV_PFB_TIMING2_RDV_7                             0x00000007 /* RW--V */
#define NV_PFB_TIMING2_RDV_8                             0x00000008 /* RWI-V */
#define NV_PFB_TIMING2_RDV_MIN                           0x00000002 /* RW--V */
#define NV_PFB_TIMING2_RDV_MAX                           0x0000000E /* RW--V */
#define NV_PFB_TILE(i)                          (0x00100240+(i)*16) /* RW-4A */
#define NV_PFB_TILE__SIZE_1                                       8 /*       */
#define NV_PFB_TILE_REGION                                      0:0 /* RWIVF */
#define NV_PFB_TILE_REGION_INVALID                       0x00000000 /* RWI-V */
#define NV_PFB_TILE_REGION_VALID                         0x00000001 /* RW--V */
#define NV_PFB_TILE_BANK0_SENSE                                 1:1 /* RWIVF */
#define NV_PFB_TILE_BANK0_SENSE_0                        0x00000000 /* RWI-V */
#define NV_PFB_TILE_BANK0_SENSE_1                        0x00000001 /* RW--V */
#define NV_PFB_TILE_ADR                                       31:14 /* RW-UF */
#define NV_PFB_TLIMIT(i)                        (0x00100244+(i)*16) /* RW-4A */
#define NV_PFB_TLIMIT__SIZE_1                                     8 /*       */
#define NV_PFB_TLIMIT_ADR                                     31:14 /* RW-UF */
#define NV_PFB_TLIMIT_ADR_LO                                   13:0 /* C-IVF */
#define NV_PFB_TLIMIT_ADR_LO_3FFF                       0x000003FFF /* C-I-V */
#define NV_PFB_TSIZE(i)                         (0x00100248+(i)*16) /* RW-4A */
#define NV_PFB_TSIZE__SIZE_1                                      8 /*       */
#define NV_PFB_TSIZE_PITCH                                     15:8 /* RW-UF */
#define NV_PFB_TSIZE_PITCH_0200                          0x00000002 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0300                          0x00000003 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0400                          0x00000004 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0500                          0x00000005 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0600                          0x00000006 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0700                          0x00000007 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0800                          0x00000008 /* RW--V */
#define NV_PFB_TSIZE_PITCH_0A00                          0x0000000A /* RW--V */
#define NV_PFB_TSIZE_PITCH_0C00                          0x0000000C /* RW--V */
#define NV_PFB_TSIZE_PITCH_0E00                          0x0000000E /* RW--V */
#define NV_PFB_TSIZE_PITCH_1000                          0x00000010 /* RW--V */
#define NV_PFB_TSIZE_PITCH_1400                          0x00000014 /* RW--V */
#define NV_PFB_TSIZE_PITCH_1800                          0x00000018 /* RW--V */
#define NV_PFB_TSIZE_PITCH_1C00                          0x0000001C /* RW--V */
#define NV_PFB_TSIZE_PITCH_2000                          0x00000020 /* RW--V */
#define NV_PFB_TSIZE_PITCH_2800                          0x00000028 /* RW--V */
#define NV_PFB_TSIZE_PITCH_3000                          0x00000030 /* RW--V */
#define NV_PFB_TSIZE_PITCH_3800                          0x00000038 /* RW--V */
#define NV_PFB_TSIZE_PITCH_4000                          0x00000040 /* RW--V */
#define NV_PFB_TSIZE_PITCH_5000                          0x00000050 /* RW--V */
#define NV_PFB_TSIZE_PITCH_6000                          0x00000060 /* RW--V */
#define NV_PFB_TSIZE_PITCH_7000                          0x00000070 /* RW--V */
#define NV_PFB_TSIZE_PITCH_8000                          0x00000080 /* RW--V */
#define NV_PFB_TSIZE_PITCH_A000                          0x000000A0 /* RW--V */
#define NV_PFB_TSIZE_PITCH_C000                          0x000000C0 /* RW--V */
#define NV_PFB_TSIZE_PITCH_E000                          0x000000E0 /* RW--V */
#define NV_PFB_TSTATUS(i)                       (0x0010024C+(i)*16) /* R--4A */
#define NV_PFB_TSTATUS__SIZE_1                                    8 /*       */
#define NV_PFB_TSTATUS_PRIME                                    1:0 /* R--VF */
#define NV_PFB_TSTATUS_PRIME_1                           0x00000000 /* R---V */
#define NV_PFB_TSTATUS_PRIME_3                           0x00000001 /* R---V */
#define NV_PFB_TSTATUS_PRIME_5                           0x00000002 /* R---V */
#define NV_PFB_TSTATUS_PRIME_7                           0x00000003 /* R---V */
#define NV_PFB_TSTATUS_FACTOR                                   6:4 /* R--VF */
#define NV_PFB_TSTATUS_FACTOR_1                          0x00000000 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_2                          0x00000001 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_4                          0x00000002 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_8                          0x00000003 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_16                         0x00000004 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_32                         0x00000005 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_64                         0x00000006 /* R---V */
#define NV_PFB_TSTATUS_FACTOR_128                        0x00000007 /* R---V */
#define NV_PFB_TSTATUS_REGION                                 31:31 /* R-IVF */
#define NV_PFB_TSTATUS_REGION_INVALID                    0x00000000 /* R-I-V */
#define NV_PFB_TSTATUS_REGION_VALID                      0x00000001 /* R---V */
#define NV_PFB_MRS                                       0x001002C0 /* RW-4R */
#define NV_PFB_MRS_A0                                           0:0 /* RWIVF */
#define NV_PFB_MRS_A0_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A0_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A1                                           1:1 /* RWIVF */
#define NV_PFB_MRS_A1_0                                  0x00000000 /* RW--V */
#define NV_PFB_MRS_A1_1                                  0x00000001 /* RWI-V */
#define NV_PFB_MRS_A2                                           2:2 /* RWIVF */
#define NV_PFB_MRS_A2_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A2_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A3                                           3:3 /* RWIVF */
#define NV_PFB_MRS_A3_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A3_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A4                                           4:4 /* RWIVF */
#define NV_PFB_MRS_A4_0                                  0x00000000 /* RW--V */
#define NV_PFB_MRS_A4_1                                  0x00000001 /* RWI-V */
#define NV_PFB_MRS_A5                                           5:5 /* RWIVF */
#define NV_PFB_MRS_A5_0                                  0x00000000 /* RW--V */
#define NV_PFB_MRS_A5_1                                  0x00000001 /* RWI-V */
#define NV_PFB_MRS_A6                                           6:6 /* RWIVF */
#define NV_PFB_MRS_A6_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A6_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A7                                           7:7 /* RWIVF */
#define NV_PFB_MRS_A7_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A7_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A8                                           8:8 /* RWIVF */
#define NV_PFB_MRS_A8_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A8_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A9                                           9:9 /* RWIVF */
#define NV_PFB_MRS_A9_0                                  0x00000000 /* RWI-V */
#define NV_PFB_MRS_A9_1                                  0x00000001 /* RW--V */
#define NV_PFB_MRS_A10                                        10:10 /* RWIVF */
#define NV_PFB_MRS_A10_0                                 0x00000000 /* RWI-V */
#define NV_PFB_MRS_A10_1                                 0x00000001 /* RW--V */
#define NV_PFB_MRS_A11                                        11:11 /* RWIVF */
#define NV_PFB_MRS_A11_0                                 0x00000000 /* RWI-V */
#define NV_PFB_MRS_A11_1                                 0x00000001 /* RW--V */
#define NV_PFB_MRS_A12                                        12:12 /* RWIVF */
#define NV_PFB_MRS_A12_0                                 0x00000000 /* RWI-V */
#define NV_PFB_MRS_A12_1                                 0x00000001 /* RW--V */
#define NV_PFB_MRS_BA0                                        20:20 /* RWIVF */
#define NV_PFB_MRS_BA0_0                                 0x00000000 /* RWI-V */
#define NV_PFB_MRS_BA0_1                                 0x00000001 /* RW--V */
#define NV_PFB_MRS_BA1                                        21:21 /* RWIVF */
#define NV_PFB_MRS_BA1_0                                 0x00000000 /* RWI-V */
#define NV_PFB_MRS_BA1_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS                                      0x001002C4 /* RW-4R */
#define NV_PFB_EMRS_A0                                          0:0 /* RWIVF */
#define NV_PFB_EMRS_A0_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A0_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A1                                          1:1 /* RWIVF */
#define NV_PFB_EMRS_A1_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A1_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A2                                          2:2 /* RWIVF */
#define NV_PFB_EMRS_A2_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A2_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A3                                          3:3 /* RWIVF */
#define NV_PFB_EMRS_A3_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A3_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A4                                          4:4 /* RWIVF */
#define NV_PFB_EMRS_A4_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A4_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A5                                          5:5 /* RWIVF */
#define NV_PFB_EMRS_A5_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A5_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A6                                          6:6 /* RWIVF */
#define NV_PFB_EMRS_A6_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A6_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A7                                          7:7 /* RWIVF */
#define NV_PFB_EMRS_A7_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A7_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A8                                          8:8 /* RWIVF */
#define NV_PFB_EMRS_A8_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A8_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A9                                          9:9 /* RWIVF */
#define NV_PFB_EMRS_A9_0                                 0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A9_1                                 0x00000001 /* RW--V */
#define NV_PFB_EMRS_A10                                       10:10 /* RWIVF */
#define NV_PFB_EMRS_A10_0                                0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A10_1                                0x00000001 /* RW--V */
#define NV_PFB_EMRS_A11                                       11:11 /* RWIVF */
#define NV_PFB_EMRS_A11_0                                0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A11_1                                0x00000001 /* RW--V */
#define NV_PFB_EMRS_A12                                       12:12 /* RWIVF */
#define NV_PFB_EMRS_A12_0                                0x00000000 /* RWI-V */
#define NV_PFB_EMRS_A12_1                                0x00000001 /* RW--V */
#define NV_PFB_EMRS_BA0                                       20:20 /* RWIVF */
#define NV_PFB_EMRS_BA0_0                                0x00000000 /* RW--V */
#define NV_PFB_EMRS_BA0_1                                0x00000001 /* RWI-V */
#define NV_PFB_EMRS_BA1                                       21:21 /* RWIVF */
#define NV_PFB_EMRS_BA1_0                                0x00000000 /* RWI-V */
#define NV_PFB_EMRS_BA1_1                                0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT                                   0x001002C8 /* RW-4R */
#define NV_PFB_MRS_EXT_A0                                       0:0 /* RWIVF */
#define NV_PFB_MRS_EXT_A0_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A0_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A1                                       1:1 /* RWIVF */
#define NV_PFB_MRS_EXT_A1_0                              0x00000000 /* RW--V */
#define NV_PFB_MRS_EXT_A1_1                              0x00000001 /* RWI-V */
#define NV_PFB_MRS_EXT_A2                                       2:2 /* RWIVF */
#define NV_PFB_MRS_EXT_A2_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A2_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A3                                       3:3 /* RWIVF */
#define NV_PFB_MRS_EXT_A3_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A3_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A4                                       4:4 /* RWIVF */
#define NV_PFB_MRS_EXT_A4_0                              0x00000000 /* RW--V */
#define NV_PFB_MRS_EXT_A4_1                              0x00000001 /* RWI-V */
#define NV_PFB_MRS_EXT_A5                                       5:5 /* RWIVF */
#define NV_PFB_MRS_EXT_A5_0                              0x00000000 /* RW--V */
#define NV_PFB_MRS_EXT_A5_1                              0x00000001 /* RWI-V */
#define NV_PFB_MRS_EXT_A6                                       6:6 /* RWIVF */
#define NV_PFB_MRS_EXT_A6_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A6_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A7                                       7:7 /* RWIVF */
#define NV_PFB_MRS_EXT_A7_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A7_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A8                                       8:8 /* RWIVF */
#define NV_PFB_MRS_EXT_A8_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A8_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A9                                       9:9 /* RWIVF */
#define NV_PFB_MRS_EXT_A9_0                              0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A9_1                              0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A10                                    10:10 /* RWIVF */
#define NV_PFB_MRS_EXT_A10_0                             0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A10_1                             0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A11                                    11:11 /* RWIVF */
#define NV_PFB_MRS_EXT_A11_0                             0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A11_1                             0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_A12                                    12:12 /* RWIVF */
#define NV_PFB_MRS_EXT_A12_0                             0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_A12_1                             0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_BA0                                    20:20 /* RWIVF */
#define NV_PFB_MRS_EXT_BA0_0                             0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_BA0_1                             0x00000001 /* RW--V */
#define NV_PFB_MRS_EXT_BA1                                    21:21 /* RWIVF */
#define NV_PFB_MRS_EXT_BA1_0                             0x00000000 /* RWI-V */
#define NV_PFB_MRS_EXT_BA1_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT                                  0x001002CC /* RW-4R */
#define NV_PFB_EMRS_EXT_A0                                      0:0 /* RWIVF */
#define NV_PFB_EMRS_EXT_A0_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A0_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A1                                      1:1 /* RWIVF */
#define NV_PFB_EMRS_EXT_A1_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A1_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A2                                      2:2 /* RWIVF */
#define NV_PFB_EMRS_EXT_A2_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A2_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A3                                      3:3 /* RWIVF */
#define NV_PFB_EMRS_EXT_A3_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A3_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A4                                      4:4 /* RWIVF */
#define NV_PFB_EMRS_EXT_A4_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A4_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A5                                      5:5 /* RWIVF */
#define NV_PFB_EMRS_EXT_A5_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A5_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A6                                      6:6 /* RWIVF */
#define NV_PFB_EMRS_EXT_A6_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A6_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A7                                      7:7 /* RWIVF */
#define NV_PFB_EMRS_EXT_A7_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A7_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A8                                      8:8 /* RWIVF */
#define NV_PFB_EMRS_EXT_A8_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A8_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A9                                      9:9 /* RWIVF */
#define NV_PFB_EMRS_EXT_A9_0                             0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A9_1                             0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A10                                   10:10 /* RWIVF */
#define NV_PFB_EMRS_EXT_A10_0                            0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A10_1                            0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A11                                   11:11 /* RWIVF */
#define NV_PFB_EMRS_EXT_A11_0                            0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A11_1                            0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_A12                                   12:12 /* RWIVF */
#define NV_PFB_EMRS_EXT_A12_0                            0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_A12_1                            0x00000001 /* RW--V */
#define NV_PFB_EMRS_EXT_BA0                                   20:20 /* RWIVF */
#define NV_PFB_EMRS_EXT_BA0_0                            0x00000000 /* RW--V */
#define NV_PFB_EMRS_EXT_BA0_1                            0x00000001 /* RWI-V */
#define NV_PFB_EMRS_EXT_BA1                                   21:21 /* RWIVF */
#define NV_PFB_EMRS_EXT_BA1_0                            0x00000000 /* RWI-V */
#define NV_PFB_EMRS_EXT_BA1_1                            0x00000001 /* RW--V */
#define NV_PFB_REF                                       0x001002D0 /* -W-4R */
#define NV_PFB_REF_CMD                                          0:0 /* -WIVF */
#define NV_PFB_REF_CMD_REFRESH                           0x00000000 /* -WI-V */
#define NV_PFB_REF_CMD_REFRESH_1                         0x00000001 /* -W--T */
#define NV_PFB_PRE                                       0x001002D4 /* -W-4R */
#define NV_PFB_PRE_CMD                                          0:0 /* -WIVF */
#define NV_PFB_PRE_CMD_PRECHARGE                         0x00000000 /* -WI-V */
#define NV_PFB_PRE_CMD_PRECHARGE_1                       0x00000001 /* -W--T */
#define NV_PFB_ZCOMP(i)                          (0x00100300+(i)*4) /* RW-4A */
#define NV_PFB_ZCOMP__SIZE_1                                      8 /*       */
#define NV_PFB_ZCOMP_BASE_TAG_ADR                              17:6 /* RW-UF */
#define NV_PFB_ZCOMP_MODE                                     26:26 /* RWIVF */
#define NV_PFB_ZCOMP_MODE_16                             0x00000000 /* RW--V */
#define NV_PFB_ZCOMP_MODE_32                             0x00000001 /* RWI-V */
#define NV_PFB_ZCOMP_ENDIAN                                   27:27 /* RWIVF */
#define NV_PFB_ZCOMP_ENDIAN_LITTLE                       0x00000000 /* RWI-V */
#define NV_PFB_ZCOMP_ENDIAN_BIG                          0x00000001 /* RW--V */
#define NV_PFB_ZCOMP_AA                                       29:28 /* RWIVF */
#define NV_PFB_ZCOMP_AA_DISABLED                         0x00000000 /* RWI-V */
#define NV_PFB_ZCOMP_AA_CENTER_1                         0x00000001 /* RW--V */
#define NV_PFB_ZCOMP_AA_CENTER_CORNER_2                  0x00000002 /* RW--V */
#define NV_PFB_ZCOMP_AA_SQUARE_OFFSET_4                  0x00000003 /* RW--V */
#define NV_PFB_ZCOMP_EN                                       31:31 /* RWIVF */
#define NV_PFB_ZCOMP_EN_FALSE                            0x00000000 /* RWI-V */
#define NV_PFB_ZCOMP_EN_TRUE                             0x00000001 /* RW--V */
#define NV_PFB_ZCOMP_MAX_TAG                             0x00100320 /* R-X4R */
#define NV_PFB_ZCOMP_MAX_TAG_ADR_LO                             5:0 /* C-IVF */
#define NV_PFB_ZCOMP_MAX_TAG_ADR_LO_3F                   0x0000003F /* C-I-V */
#define NV_PFB_ZCOMP_MAX_TAG_ADR                               17:6 /* C-IVF */
#define NV_PFB_ZCOMP_MAX_TAG_ADR_VALUE                   0x0000012B /* C-I-V */
#define NV_PFB_ZCOMP_OFFSET                              0x00100324 /* RW-4R */
#define NV_PFB_ZCOMP_OFFSET_ADR_SPACE                           3:0 /* RW-UF */
#define NV_PFB_ZCOMP_OFFSET_ZCULL_COMP_ONLY_EN                  4:4 /* RWIVF */
#define NV_PFB_ZCOMP_OFFSET_ZCULL_COMP_ONLY_EN_FALSE     0x00000000 /* RW--V */
#define NV_PFB_ZCOMP_OFFSET_ZCULL_COMP_ONLY_EN_TRUE      0x00000001 /* RWI-V */
#define NV_PFB_ZCOMP_OFFSET_ADR                               25:14 /* RW-UF */
#define NV_PFB_ZCOMP_OFFSET_EN                                31:31 /* RWIVF */
#define NV_PFB_ZCOMP_OFFSET_EN_FALSE                     0x00000000 /* RWI-V */
#define NV_PFB_ZCOMP_OFFSET_EN_TRUE                      0x00000001 /* RW--V */
#define NV_PFB_ARB_PREDIVIDER                            0x00100328 /* RW-4R */
#define NV_PFB_ARB_PREDIVIDER_DIV                               7:0 /* RWIUF */
#define NV_PFB_ARB_PREDIVIDER_DIV_0                      0x00000000 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_1                      0x00000001 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_2                      0x00000002 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_3                      0x00000003 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_4                      0x00000004 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_5                      0x00000005 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_6                      0x00000006 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_7                      0x00000007 /* RWIUV */
#define NV_PFB_ARB_PREDIVIDER_DIV_8                      0x00000008 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_9                      0x00000009 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_10                     0x0000000A /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_11                     0x0000000B /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_12                     0x0000000C /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_13                     0x0000000D /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_14                     0x0000000E /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_15                     0x0000000F /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_16                     0x00000010 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_DIV_20                     0x00000014 /* RW-UV */
#define NV_PFB_ARB_PREDIVIDER_TIMEOUT_CONT_GNT                12:12 /* RWIUF */
#define NV_PFB_ARB_PREDIVIDER_TIMEOUT_CONT_GNT_DISABLE   0x00000000 /* RWIUV */
#define NV_PFB_ARB_PREDIVIDER_TIMEOUT_CONT_GNT_ENABLE    0x00000001 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT                               0x0010032C /* RW-4R */
#define NV_PFB_ARB_TIMEOUT_EXT                                  3:0 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_EXT_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_EXT_14                        0x0000000E /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_EXT_DISABLE                   0x0000000F /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_LP                                   7:4 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_LP_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_LP_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_ZO                                  11:8 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_ZO_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_ZO_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_TX                                 15:12 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_TX_3                          0x00000003 /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_TX_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_TX_12                         0x0000000C /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_TX_DISABLE                    0x0000000F /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_ZR                                 19:16 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_ZR_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_ZR_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_ZW                                 23:20 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_ZW_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_ZW_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_CR                                 27:24 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_CR_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_CR_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_TIMEOUT_CW                                 31:28 /* RWIUF */
#define NV_PFB_ARB_TIMEOUT_CW_8                          0x00000008 /* RW-UV */
#define NV_PFB_ARB_TIMEOUT_CW_DISABLE                    0x0000000F /* RWIUV */
#define NV_PFB_ARB_XFER_SZ                               0x00100330 /* RW-4R */
#define NV_PFB_ARB_XFER_SZ_EXT                                  3:0 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_EXT_4                         0x00000002 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_EXT_8                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_EXT_MIN                       0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_EXT_INF                       0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_LP                                   7:4 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_LP_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_LP_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_LP_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZO                                  11:8 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_ZO_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_ZO_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZO_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_TX                                 15:12 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_TX_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_TX_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_TX_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZR                                 19:16 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_ZR_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_ZR_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZR_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZW                                 23:20 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_ZW_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_ZW_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_ZW_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_CR                                 27:24 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_CR_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_CR_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_CR_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_CW                                 31:28 /* RWIUF */
#define NV_PFB_ARB_XFER_SZ_CW_8                          0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_SZ_CW_MIN                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_SZ_CW_INF                        0x0000000F /* RW-UV */
#define NV_PFB_ARB_XFER_REM                              0x00100334 /* RW-4R */
#define NV_PFB_ARB_XFER_REM_EXT                                 3:0 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_EXT_0                        0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_EXT_4                        0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_EXT_8                        0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_LP                                  7:4 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_LP_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_LP_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_LP_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZO                                 11:8 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_ZO_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZO_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_ZO_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_TX                                15:12 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_TX_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_TX_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_TX_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZR                                19:16 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_ZR_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZR_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_ZR_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZW                                23:20 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_ZW_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_ZW_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_ZW_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_CR                                27:24 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_CR_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_CR_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_CR_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_CW                                31:28 /* RWIUF */
#define NV_PFB_ARB_XFER_REM_CW_0                         0x00000000 /* RW-UV */
#define NV_PFB_ARB_XFER_REM_CW_4                         0x00000004 /* RWIUV */
#define NV_PFB_ARB_XFER_REM_CW_8                         0x00000008 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK                             0x00100338 /* RW-4R */
#define NV_PFB_ARB_DIFF_BANK_EXT                                0:0 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_EXT_DISABLED                0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_EXT_ENABLED                 0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_LP                                 1:1 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_LP_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_LP_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_ZO                                 2:2 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_ZO_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_ZO_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_TX                                 3:3 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_TX_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_TX_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_ZR                                 4:4 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_ZR_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_ZR_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_ZW                                 5:5 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_ZW_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_ZW_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_CR                                 6:6 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_CR_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_CR_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_ARB_DIFF_BANK_CW                                 7:7 /* RWIUF */
#define NV_PFB_ARB_DIFF_BANK_CW_DISABLED                 0x00000000 /* RW-UV */
#define NV_PFB_ARB_DIFF_BANK_CW_ENABLED                  0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0                               0x00100340 /* RW-4R */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_EXT                         0:0 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_EXT_DISABLED         0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_EXT_ENABLED          0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LP                          1:1 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LP_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LP_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZO                          2:2 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZO_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZO_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_TX                          3:3 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_TX_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_TX_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZR                          4:4 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZR_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZR_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZW                          5:5 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZW_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_ZW_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CR                          6:6 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CR_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CR_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CW                          7:7 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CW_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CW_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_HP                          8:8 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_HP_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_HP_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CPU                         9:9 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CPU_DISABLED         0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_CPU_ENABLED          0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LDT                       10:10 /* RWIUF */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LDT_DISABLED         0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE0_DIFF_ROW_LDT_ENABLED          0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1                               0x00100344 /* RW-4R */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_EXT                        0:0 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_EXT_DISABLED        0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_EXT_ENABLED         0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LP                         1:1 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LP_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LP_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZO                         2:2 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZO_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZO_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_TX                         3:3 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_TX_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_TX_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZR                         4:4 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZR_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZR_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZW                         5:5 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZW_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_ZW_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CR                         6:6 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CR_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CR_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CW                         7:7 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CW_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CW_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_HP                         8:8 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_HP_DISABLED         0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_HP_ENABLED          0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CPU                        9:9 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CPU_DISABLED        0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_CPU_ENABLED         0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LDT                      10:10 /* RWIUF */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LDT_DISABLED        0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE1_DIFF_BANK_LDT_ENABLED         0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2                               0x00100348 /* RW-4R */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_EXT                          0:0 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_EXT_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_EXT_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LP                           1:1 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LP_DISABLED           0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LP_ENABLED            0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZO                           2:2 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZO_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZO_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_TX                           3:3 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_TX_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_TX_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZR                           4:4 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZR_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZR_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZW                           5:5 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZW_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_ZW_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CR                           6:6 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CR_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CR_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CW                           7:7 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CW_DISABLED           0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CW_ENABLED            0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_HP                           8:8 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_HP_DISABLED           0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_HP_ENABLED            0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CPU                          9:9 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CPU_DISABLED          0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_CPU_ENABLED           0x00000001 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LDT                        10:10 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LDT_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_Q_EMPTY_LDT_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_GART                        11:11 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_GART_DISABLED          0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_GART_ENABLED           0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_LP                      12:12 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_LP_DISABLED        0x00000000 /* RW-UV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_LP_ENABLED         0x00000001 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_HP                      13:13 /* RWIUF */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_HP_DISABLED        0x00000000 /* RWIUV */
#define NV_PFB_CLOSE_PAGE2_ALWAYS_WBC_HP_ENABLED         0x00000001 /* RW-UV */
#define NV_PFB_BPARB                                     0x0010034C /* RW-4R */
#define NV_PFB_BPARB_HP_ARB_MODE                                2:0 /* RWIUF */
#define NV_PFB_BPARB_HP_ARB_MODE_REL_WTRMRK_10           0x00000000 /* RWIUV */
#define NV_PFB_BPARB_HP_ARB_MODE_REL_WTRMRK_8            0x00000001 /* RW-UV */
#define NV_PFB_BPARB_HP_ARB_MODE_REL_WTRMRK_6            0x00000002 /* RW-UV */
#define NV_PFB_BPARB_HP_ARB_MODE_REL_WTRMRK_4            0x00000003 /* RW-UV */
#define NV_PFB_BPARB_HP_ARB_MODE_KEEP_NEVER              0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0                                     0x00100350 /* RW-4R */
#define NV_PFB_CMDQ0_FA_RW                                      4:0 /* RWIUF */
#define NV_PFB_CMDQ0_FA_RW_4                             0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_FA_RW_5                             0x00000005 /* RW-UV */
#define NV_PFB_CMDQ0_FA_RW_6                             0x00000006 /* RW-UV */
#define NV_PFB_CMDQ0_FA_RW_7                             0x00000007 /* RW-UV */
#define NV_PFB_CMDQ0_FA_RW_8                             0x00000008 /* RW-UV */
#define NV_PFB_CMDQ0_FA_RW_16                            0x00000010 /* RWIUV */
#define NV_PFB_CMDQ0_FA_ACT                                    11:8 /* RWIUF */
#define NV_PFB_CMDQ0_FA_ACT_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ0_FA_ACT_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ0_FA_ACT_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ0_FA_ACT_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_FA_ACT_8                            0x00000008 /* RWIUV */
#define NV_PFB_CMDQ0_FA_PRE                                   15:12 /* RWIUF */
#define NV_PFB_CMDQ0_FA_PRE_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ0_FA_PRE_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ0_FA_PRE_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ0_FA_PRE_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_FA_PRE_8                            0x00000008 /* RWIUV */
#define NV_PFB_CMDQ0_HP_RW                                    20:16 /* RWIUF */
#define NV_PFB_CMDQ0_HP_RW_4                             0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_HP_RW_5                             0x00000005 /* RW-UV */
#define NV_PFB_CMDQ0_HP_RW_6                             0x00000006 /* RW-UV */
#define NV_PFB_CMDQ0_HP_RW_7                             0x00000007 /* RW-UV */
#define NV_PFB_CMDQ0_HP_RW_8                             0x00000008 /* RW-UV */
#define NV_PFB_CMDQ0_HP_RW_16                            0x00000010 /* RWIUV */
#define NV_PFB_CMDQ0_HP_ACT                                   27:24 /* RWIUF */
#define NV_PFB_CMDQ0_HP_ACT_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ0_HP_ACT_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ0_HP_ACT_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ0_HP_ACT_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_HP_ACT_8                            0x00000008 /* RWIUV */
#define NV_PFB_CMDQ0_HP_PRE                                   31:28 /* RWIUF */
#define NV_PFB_CMDQ0_HP_PRE_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ0_HP_PRE_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ0_HP_PRE_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ0_HP_PRE_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ0_HP_PRE_8                            0x00000008 /* RWIUV */
#define NV_PFB_CMDQ1                                     0x00100354 /* RW-4R */
#define NV_PFB_CMDQ1_RT_RW                                      4:0 /* RWIUF */
#define NV_PFB_CMDQ1_RT_RW_3                             0x00000003 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_4                             0x00000004 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_5                             0x00000005 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_6                             0x00000006 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_7                             0x00000007 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_8                             0x00000008 /* RW-UV */
#define NV_PFB_CMDQ1_RT_RW_10                            0x0000000A /* RWIUV */
#define NV_PFB_CMDQ1_RT_RW_16                            0x00000010 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT                                    11:8 /* RWIUF */
#define NV_PFB_CMDQ1_RT_ACT_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT_6                            0x00000006 /* RW-UV */
#define NV_PFB_CMDQ1_RT_ACT_8                            0x00000008 /* RWIUV */
#define NV_PFB_CMDQ1_RT_PRE                                   15:12 /* RWIUF */
#define NV_PFB_CMDQ1_RT_PRE_1                            0x00000001 /* RW-UV */
#define NV_PFB_CMDQ1_RT_PRE_2                            0x00000002 /* RW-UV */
#define NV_PFB_CMDQ1_RT_PRE_3                            0x00000003 /* RW-UV */
#define NV_PFB_CMDQ1_RT_PRE_4                            0x00000004 /* RW-UV */
#define NV_PFB_CMDQ1_RT_PRE_6                            0x00000006 /* RW-UV */
#define NV_PFB_CMDQ1_RT_PRE_8                            0x00000008 /* RWIUV */
#define NV_PFB_ILL_INSTR(i)                      (0x00100360+(i)*4) /* R--4A */
#define NV_PFB_ILL_INSTR__SIZE_1                                  4 /*       */
#define NV_PFB_ILL_INSTR_REQID                                  4:0 /* R--VF */
#define NV_PFB_ILL_INSTR_CMD                                   26:5 /* R--VF */
#define NV_PFB_ILL_INSTR_CODE                                 30:27 /* R--VF */
#define NV_PFB_ILL_INSTR_TRAPPED                              31:31 /* R--VF */
#define NV_PFB_RT                                        0x00100400 /* RW-4R */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP                             2:0 /* RWIUF */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_0                    0x00000000 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_1                    0x00000001 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_2                    0x00000002 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_3                    0x00000003 /* RWIUV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_4                    0x00000004 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_5                    0x00000005 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_6                    0x00000006 /* RW-UV */
#define NV_PFB_RT_CPU_GNT_BLOCKS_LP_7                    0x00000007 /* RW-UV */
#define NV_PFB_AUTOCLOSE                                 0x00100404 /* RW-4R */
#define NV_PFB_AUTOCLOSE_ACTIVE                                 0:0 /* RWIVF */
#define NV_PFB_AUTOCLOSE_ACTIVE_FALSE                    0x00000000 /* RW--V */
#define NV_PFB_AUTOCLOSE_ACTIVE_TRUE                     0x00000001 /* RWI-V */
#define NV_PFB_AUTOCLOSE_RT                                     4:4 /* RWIVF */
#define NV_PFB_AUTOCLOSE_RT_DISABLED                     0x00000000 /* RW--V */
#define NV_PFB_AUTOCLOSE_RT_ENABLED                      0x00000001 /* RWI-V */
#define NV_PFB_AUTOCLOSE_HP                                     5:5 /* RWIVF */
#define NV_PFB_AUTOCLOSE_HP_DISABLED                     0x00000000 /* RWI-V */
#define NV_PFB_AUTOCLOSE_HP_ENABLED                      0x00000001 /* RW--V */
#define NV_PFB_AUTOCLOSE_FA                                     6:6 /* RWIVF */
#define NV_PFB_AUTOCLOSE_FA_DISABLED                     0x00000000 /* RWI-V */
#define NV_PFB_AUTOCLOSE_FA_ENABLED                      0x00000001 /* RW--V */
#define NV_PFB_AUTOCLOSE_TIMEOUT                               12:8 /* RWIUF */
#define NV_PFB_AUTOCLOSE_TIMEOUT_MIN                     0x00000000 /* RW-UV */
#define NV_PFB_AUTOCLOSE_TIMEOUT_15                      0x0000000F /* RWIUV */
#define NV_PFB_AUTOCLOSE_TIMEOUT_MAX                     0x0000001F /* RW-UV */
#define NV_PFB_AUTOCLOSE_DRAMC_DEBUG                          31:16 /* RWIVF */
#define NV_PFB_AUTOCLOSE_DRAMC_DEBUG_INIT                0x00000000 /* RWI-V */
#define NV_PFB_WBC                                       0x00100410 /* RW-4R */
#define NV_PFB_WBC_HWM                                          4:0 /* RWIUF */
#define NV_PFB_WBC_HWM_0                                 0x00000000 /* RW-UV */
#define NV_PFB_WBC_HWM_1                                 0x00000001 /* RW-UV */
#define NV_PFB_WBC_HWM_2                                 0x00000002 /* RW-UV */
#define NV_PFB_WBC_HWM_3                                 0x00000003 /* RW-UV */
#define NV_PFB_WBC_HWM_4                                 0x00000004 /* RW-UV */
#define NV_PFB_WBC_HWM_5                                 0x00000005 /* RW-UV */
#define NV_PFB_WBC_HWM_6                                 0x00000006 /* RW-UV */
#define NV_PFB_WBC_HWM_7                                 0x00000007 /* RW-UV */
#define NV_PFB_WBC_HWM_8                                 0x00000008 /* RW-UV */
#define NV_PFB_WBC_HWM_9                                 0x00000009 /* RW-UV */
#define NV_PFB_WBC_HWM_10                                0x0000000A /* RW-UV */
#define NV_PFB_WBC_HWM_11                                0x0000000B /* RW-UV */
#define NV_PFB_WBC_HWM_12                                0x0000000C /* RW-UV */
#define NV_PFB_WBC_HWM_13                                0x0000000D /* RW-UV */
#define NV_PFB_WBC_HWM_14                                0x0000000E /* RW-UV */
#define NV_PFB_WBC_HWM_15                                0x0000000F /* RW-UV */
#define NV_PFB_WBC_HWM_16                                0x00000010 /* RW-UV */
#define NV_PFB_WBC_HWM_17                                0x00000011 /* RW-UV */
#define NV_PFB_WBC_HWM_18                                0x00000012 /* RW-UV */
#define NV_PFB_WBC_HWM_19                                0x00000013 /* RW-UV */
#define NV_PFB_WBC_HWM_20                                0x00000014 /* RW-UV */
#define NV_PFB_WBC_HWM_21                                0x00000015 /* RW-UV */
#define NV_PFB_WBC_HWM_22                                0x00000016 /* RW-UV */
#define NV_PFB_WBC_HWM_23                                0x00000017 /* RW-UV */
#define NV_PFB_WBC_HWM_24                                0x00000018 /* RWIUV */
#define NV_PFB_WBC_HWM_25                                0x00000019 /* RW-UV */
#define NV_PFB_WBC_HWM_26                                0x0000001A /* RW-UV */
#define NV_PFB_WBC_HWM_27                                0x0000001B /* RW-UV */
#define NV_PFB_WBC_HWM_28                                0x0000001C /* RW-UV */
#define NV_PFB_WBC_HWM_29                                0x0000001D /* RW-UV */
#define NV_PFB_WBC_HWM_30                                0x0000001E /* RW-UV */
#define NV_PFB_WBC_HWM_31                                0x0000001F /* RW-UV */
#define NV_PFB_WBC_LWM                                         12:8 /* RWIUF */
#define NV_PFB_WBC_LWM_0                                 0x00000000 /* RW-UV */
#define NV_PFB_WBC_LWM_1                                 0x00000001 /* RW-UV */
#define NV_PFB_WBC_LWM_2                                 0x00000002 /* RW-UV */
#define NV_PFB_WBC_LWM_3                                 0x00000003 /* RW-UV */
#define NV_PFB_WBC_LWM_4                                 0x00000004 /* RW-UV */
#define NV_PFB_WBC_LWM_5                                 0x00000005 /* RW-UV */
#define NV_PFB_WBC_LWM_6                                 0x00000006 /* RW-UV */
#define NV_PFB_WBC_LWM_7                                 0x00000007 /* RW-UV */
#define NV_PFB_WBC_LWM_8                                 0x00000008 /* RW-UV */
#define NV_PFB_WBC_LWM_9                                 0x00000009 /* RW-UV */
#define NV_PFB_WBC_LWM_10                                0x0000000A /* RW-UV */
#define NV_PFB_WBC_LWM_11                                0x0000000B /* RW-UV */
#define NV_PFB_WBC_LWM_12                                0x0000000C /* RW-UV */
#define NV_PFB_WBC_LWM_13                                0x0000000D /* RW-UV */
#define NV_PFB_WBC_LWM_14                                0x0000000E /* RW-UV */
#define NV_PFB_WBC_LWM_15                                0x0000000F /* RW-UV */
#define NV_PFB_WBC_LWM_16                                0x00000010 /* RWIUV */
#define NV_PFB_WBC_LWM_17                                0x00000011 /* RW-UV */
#define NV_PFB_WBC_LWM_18                                0x00000012 /* RW-UV */
#define NV_PFB_WBC_LWM_19                                0x00000013 /* RW-UV */
#define NV_PFB_WBC_LWM_20                                0x00000014 /* RW-UV */
#define NV_PFB_WBC_LWM_21                                0x00000015 /* RW-UV */
#define NV_PFB_WBC_LWM_22                                0x00000016 /* RW-UV */
#define NV_PFB_WBC_LWM_23                                0x00000017 /* RW-UV */
#define NV_PFB_WBC_LWM_24                                0x00000018 /* RW-UV */
#define NV_PFB_WBC_LWM_25                                0x00000019 /* RW-UV */
#define NV_PFB_WBC_LWM_26                                0x0000001A /* RW-UV */
#define NV_PFB_WBC_LWM_27                                0x0000001B /* RW-UV */
#define NV_PFB_WBC_LWM_28                                0x0000001C /* RW-UV */
#define NV_PFB_WBC_LWM_29                                0x0000001D /* RW-UV */
#define NV_PFB_WBC_LWM_30                                0x0000001E /* RW-UV */
#define NV_PFB_WBC_LWM_31                                0x0000001F /* RW-UV */
#define NV_PFB_WBC_FLUSH                                      16:16 /* RWIVF */
#define NV_PFB_WBC_FLUSH_NOT_PENDING                     0x00000000 /* RWI-V */
#define NV_PFB_WBC_FLUSH_PENDING                         0x00000001 /* -W--T */
#define NV_PFB_WBC_FULL_BLOCKS_ISOLDT_READ                    20:20 /* RWIVF */
#define NV_PFB_WBC_FULL_BLOCKS_ISOLDT_READ_FALSE         0x00000000 /* RWI-V */
#define NV_PFB_WBC_FULL_BLOCKS_ISOLDT_READ_TRUE          0x00000001 /* RW--V */
#define NV_PFB_WBC_FULL_BLOCKS_NONISOLDT_READ                 21:21 /* RWIVF */
#define NV_PFB_WBC_FULL_BLOCKS_NONISOLDT_READ_FALSE      0x00000000 /* RWI-V */
#define NV_PFB_WBC_FULL_BLOCKS_NONISOLDT_READ_TRUE       0x00000001 /* RW--V */
#define NV_PFB_WBC_ATOMIC_CPU_READS                           24:24 /* RWIVF */
#define NV_PFB_WBC_ATOMIC_CPU_READS_DISABLED             0x00000000 /* RW--V */
#define NV_PFB_WBC_ATOMIC_CPU_READS_ENABLED              0x00000001 /* RWI-V */
#define NV_PFB_WBC_ATOMIC_AGP_READS                           25:25 /* RWIVF */
#define NV_PFB_WBC_ATOMIC_AGP_READS_DISABLED             0x00000000 /* RWI-V */
#define NV_PFB_WBC_ATOMIC_AGP_READS_ENABLED              0x00000001 /* RW--V */
#define NV_PFB_WBC_ATOMIC_LDT_READS                           26:26 /* RWIVF */
#define NV_PFB_WBC_ATOMIC_LDT_READS_DISABLED             0x00000000 /* RWI-V */
#define NV_PFB_WBC_ATOMIC_LDT_READS_ENABLED              0x00000001 /* RW--V */
#define NV_PFB_WBC_32B_WRITE_BLOCKS_READS                     28:28 /* RWIVF */
#define NV_PFB_WBC_32B_WRITE_BLOCKS_READS_DISABLED       0x00000000 /* RW--V */
#define NV_PFB_WBC_32B_WRITE_BLOCKS_READS_ENABLED        0x00000001 /* RWI-V */
#define NV_PFB_CMDQ_PRT                                  0x00100418 /* RW-4R */
#define NV_PFB_CMDQ_PRT_DISABLE                                 0:0 /* RWIVF */
#define NV_PFB_CMDQ_PRT_DISABLE_OFF                      0x00000000 /* RWI-V */
#define NV_PFB_CMDQ_PRT_DISABLE_ON                       0x00000001 /* RW--V */
#define NV_PFB_CMDQ_PRT_HP_MIN                                  5:2 /* RWIUF */
#define NV_PFB_CMDQ_PRT_HP_MIN_0                         0x00000000 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_1                         0x00000001 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_2                         0x00000002 /* RWIUV */
#define NV_PFB_CMDQ_PRT_HP_MIN_3                         0x00000003 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_4                         0x00000004 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_5                         0x00000005 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_6                         0x00000006 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_7                         0x00000007 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_8                         0x00000008 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_9                         0x00000009 /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_10                        0x0000000a /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_11                        0x0000000b /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_12                        0x0000000c /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_13                        0x0000000d /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_14                        0x0000000e /* RW-UV */
#define NV_PFB_CMDQ_PRT_HP_MIN_15                        0x0000000f /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN                                14:11 /* RWIUF */
#define NV_PFB_CMDQ_PRT_RT_MIN_0                         0x00000000 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_1                         0x00000001 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_2                         0x00000002 /* RWIUV */
#define NV_PFB_CMDQ_PRT_RT_MIN_3                         0x00000003 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_4                         0x00000004 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_5                         0x00000005 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_6                         0x00000006 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_7                         0x00000007 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_8                         0x00000008 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_9                         0x00000009 /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_10                        0x0000000a /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_11                        0x0000000b /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_12                        0x0000000c /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_13                        0x0000000d /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_14                        0x0000000e /* RW-UV */
#define NV_PFB_CMDQ_PRT_RT_MIN_15                        0x0000000f /* RW-UV */
#define NV_PFB_CPU_RRQ                                   0x00100420 /* RW-4R */
#define NV_PFB_CPU_RRQ_BYPASS                                   0:0 /* RWIVF */
#define NV_PFB_CPU_RRQ_BYPASS_DISABLED                   0x00000000 /* R-I-V */
#define NV_PFB_CPU_RRQ_BYPASS_ENABLED                    0x00000001 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY                                  7:4 /* RWIUF */
#define NV_PFB_CPU_RRQ_LATENCY_MIN                       0x00000000 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_0                         0x00000000 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_1                         0x00000001 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_2                         0x00000002 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_3                         0x00000003 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_4                         0x00000004 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_5                         0x00000005 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_6                         0x00000006 /* R---V */
#define NV_PFB_CPU_RRQ_LATENCY_MAX                       0x00000006 /* R-I-V */
#define NV_PFB_CPU_RRQ_FWP                                     11:8 /* RWIUF */
#define NV_PFB_CPU_RRQ_FWP_MIN                           0x00000003 /* R---V */
#define NV_PFB_CPU_RRQ_FWP_3                             0x00000003 /* R---V */
#define NV_PFB_CPU_RRQ_FWP_4                             0x00000004 /* R---V */
#define NV_PFB_CPU_RRQ_FWP_MAX                           0x00000004 /* R-I-V */
#define NV_PFB_BYPASS                                    0x00100424 /* RW-4R */
#define NV_PFB_BYPASS_FAST_READ                                 0:0 /* RWIVF */
#define NV_PFB_BYPASS_FAST_READ_DISABLED                 0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_FAST_READ_ENABLED                  0x00000001 /* RW--V */
#define NV_PFB_BYPASS_SINGLE_CYCLE                              4:4 /* RWIVF */
#define NV_PFB_BYPASS_SINGLE_CYCLE_DISABLED              0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_SINGLE_CYCLE_ENABLED               0x00000001 /* RW--V */
#define NV_PFB_BYPASS_BLOCK_WBC_AUTOPRE                         5:5 /* RWIVF */
#define NV_PFB_BYPASS_BLOCK_WBC_AUTOPRE_DISABLED         0x00000000 /* RW--V */
#define NV_PFB_BYPASS_BLOCK_WBC_AUTOPRE_ENABLED          0x00000001 /* RWI-V */
#define NV_PFB_BYPASS_ALLOW_CPUREAD_DURING_BYPASS               8:8 /* RWIVF */
#define NV_PFB_BYPASS_ALLOW_CPUREAD_DURING_BYPASS_FALSE  0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_ALLOW_CPUREAD_DURING_BYPASS_TRUE   0x00000001 /* RW--V */
#define NV_PFB_BYPASS_DEBUG                                    15:9 /* RWIVF */
#define NV_PFB_BYPASS_DEBUG_INIT                         0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY                         19:16 /* RWIUF */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_0                  0x00000000 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_1                  0x00000001 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_2                  0x00000002 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_3                  0x00000003 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_4                  0x00000004 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_5                  0x00000005 /* RWIUV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_6                  0x00000006 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_7                  0x00000007 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_8                  0x00000008 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_9                  0x00000009 /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_10                 0x0000000a /* RW-UV */
#define NV_PFB_BYPASS_MAX_CPU_LATENCY_11                 0x0000000b /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY                         22:20 /* RWIUF */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_0                  0x00000000 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_1                  0x00000001 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_2                  0x00000002 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_3                  0x00000003 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_4                  0x00000004 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_5                  0x00000005 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_6                  0x00000006 /* RW-UV */
#define NV_PFB_BYPASS_MAX_MEM_LATENCY_7                  0x00000007 /* RWIUV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED                         26:24 /* RWIUF */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_0                  0x00000000 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_1                  0x00000001 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_2                  0x00000002 /* RWIUV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_3                  0x00000003 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_4                  0x00000004 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_5                  0x00000005 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_6                  0x00000006 /* RW-UV */
#define NV_PFB_BYPASS_RR_SLOTS_NEEDED_7                  0x00000007 /* RW-UV */
#define NV_PFB_BYPASS_ROW_EARLY_NONSPEC                       28:28 /* RWIVF */
#define NV_PFB_BYPASS_ROW_EARLY_NONSPEC_DISABLED         0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_ROW_EARLY_NONSPEC_ENABLED          0x00000001 /* RW--V */
#define NV_PFB_BYPASS_ROW_EARLY_SPEC                          29:29 /* RWIVF */
#define NV_PFB_BYPASS_ROW_EARLY_SPEC_DISABLED            0x00000000 /* RWI-V */
#define NV_PFB_BYPASS_ROW_EARLY_SPEC_ENABLED             0x00000001 /* RW--V */
#define NV_PFB_BYPASS_RETIRE_DELAY                            31:30 /* RWIUF */
#define NV_PFB_BYPASS_RETIRE_DELAY_MIN                   0x00000000 /* RWIUV */
#define NV_PFB_BYPASS_RETIRE_DELAY_0                     0x00000000 /* RW-UV */
#define NV_PFB_BYPASS_RETIRE_DELAY_1                     0x00000001 /* RW-UV */
#define NV_PFB_BYPASS_RETIRE_DELAY_2                     0x00000002 /* RW-UV */
#define NV_PFB_BYPASS_RETIRE_DELAY_3                     0x00000003 /* RW-UV */
#define NV_PFB_BYPASS_RETIRE_DELAY_MAX                   0x00000003 /* RW-UV */
/* dev_fb.ref */
#define NV_PFBM                               0x3FFFFFFF:0x08000000 /* RW--M */
/* dev_fb.ref */
#define NV_PFBIN                              0x007FFFFF:0x00700000 /* RW--M */
/* dev_ext_devices.ref */
#define NV_PEXTDEV                            0x00101FFF:0x00101000 /* RW--D */
#define NV_PEXTDEV_BOOT_0                                0x00101000 /* R--4R */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_AD                          0:0 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_AD_NORMAL            0x00000001 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_AD_REVERSED          0x00000000 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_SUB_VENDOR                      1:1 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_SUB_VENDOR_NO_BIOS       0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_SUB_VENDOR_BIOS          0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_RAMCFG                          5:2 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_RAMCFG_0                 0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_CRYSTAL                         6:6 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_CRYSTAL_13500K           0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_CRYSTAL_14318180         0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_TVMODE                          8:7 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_TVMODE_SECAM             0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_TVMODE_NTSC              0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_TVMODE_PAL               0x00000002 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_TVMODE_DISABLED          0x00000003 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_4X                          9:9 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_4X_ENABLED           0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_4X_DISABLED          0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_SBA                       10:10 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_SBA_DISABLED         0x00000001 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_SBA_ENABLED          0x00000000 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_FASTWR                    11:11 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_FASTWR_ENABLED       0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_AGP_FASTWR_DISABLED      0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_DEVID                     13:12 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_DEVID_0              0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_DEVID_1              0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_DEVID_2              0x00000002 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_PCI_DEVID_3              0x00000003 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_BUS_TYPE                      14:14 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_BUS_TYPE_AGP             0x00000001 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_BUS_TYPE_PCI             0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_FP_IFACE                      15:15 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_FP_IFACE_24BIT           0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_FP_IFACE_12BIT           0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB                            17:16 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_64M                   0x00000000 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_128M                  0x00000001 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_256M                  0x00000002 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_512M                  0x00000003 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_EMRS                          19:18 /* RWXVF */
#define NV_PEXTDEV_BOOT_0_STRAP_EMRS_MICRON              0x00000000 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_EMRS_REDUCED_DRIVE       0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_EMRS_RESERVED            0x00000002 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_EMRS_MATCHED             0x00000003 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_CPU                           23:20 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_LDT_BIAS_EN                   24:24 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_USER                          28:25 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_OVERWRITE                     31:31 /* RWIVF */
#define NV_PEXTDEV_BOOT_0_STRAP_OVERWRITE_DISABLED       0x00000000 /* RWI-V */
#define NV_PEXTDEV_BOOT_0_STRAP_OVERWRITE_ENABLED        0x00000001 /* RW--V */
#define NV_PEXTDEV_NEW_BOOT_0                            0x00101000 /* RW-4R */
#define NV_PEXTDEV_NEW_BOOT_0_STRAP_VALUE                      30:0 /* RWIVF */
#define NV_PEXTDEV_NEW_BOOT_0_STRAP_OVERWRITE                 31:31 /* RWIVF */
#define NV_PEXTDEV_NEW_BOOT_0_STRAP_OVERWRITE_DISABLED   0x00000000 /* RWI-V */
#define NV_PEXTDEV_NEW_BOOT_0_STRAP_OVERWRITE_ENABLED    0x00000001 /* RW--V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB                            17:16 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_64M                   0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_128M                  0x00000001 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_256M                  0x00000002 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_FB_512M                  0x00000003 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR                            18:18 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_DISABLED              0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_ENABLED               0x00000001 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_REG_128M                   19:19 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_REG_128M_ENABLED      0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_REG_128M_DISABLED     0x00000001 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_AGP_DEV                    20:20 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_AGP_DEV_DISABLED      0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_AGP_DEV_ENABLED       0x00000001 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_IO_DEV                     21:21 /* R-XVF */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_IO_DEV_DISABLED       0x00000000 /* R---V */
#define NV_PEXTDEV_BOOT_0_STRAP_BR_IO_DEV_ENABLED        0x00000001 /* R---V */
/* dev_ext_devices.ref */
#define NV_PDAC                               0x00680FFF:0x00680000 /* RW--D */
#define NV_PDAC_DATA(i)                          (0x00680000+(i)*4) /* RW-4A */
#define NV_PDAC_DATA__SIZE_1                                     16 /*       */
#define NV_PDAC_DATA_VALUE                                      7:0 /* RW-VF */
/* dev_ext_devices.ref */
/* dev_ext_devices.ref */
#define NV_PROM                               0x0030FFFF:0x00300000 /* RW--D */
#define NV_PROM_DATA(i)                            (0x00300000+(i)) /* RW-1A */
#define NV_PROM_DATA__SIZE_1                                  65536 /*       */
#define NV_PROM_DATA_VALUE                                      7:0 /* RW-VF */
/* dev_fifo.ref */
#define NV_USER                               0x00BFFFFF:0x00800000 /* RW--D */
#define NV_USER_OBJECT(i,j)     (0x00800000+(i)*0x10000+(j)*0x2000) /* -W-4A */
#define NV_USER_OBJECT__SIZE_1                                   32 /*       */
#define NV_USER_OBJECT__SIZE_2                                    8 /*       */
#define NV_USER_OBJECT_HANDLE                                  31:0 /* -W-VF */
#define NV_USER_FREE016(i,j)        (0x00800010+(i)*65536+(j)*8192) /* R--2A */
#define NV_USER_FREE016__SIZE_1                                  32 /*       */
#define NV_USER_FREE016__SIZE_2                                   8 /*       */
#define NV_USER_FREE016_COUNT_LO                                1:0 /* C--UF */
#define NV_USER_FREE016_COUNT_LO_0                       0x00000000 /* C---V */
#define NV_USER_FREE016_COUNT                                   9:2 /* R--UF */
#define NV_USER_FREE016_COUNT_HI                              15:10 /* C--UF */
#define NV_USER_FREE016_COUNT_HI_0                       0x00000000 /* C---V */
#define NV_USER_FREE032(i,j)        (0x00800010+(i)*65536+(j)*8192) /* R--4A */
#define NV_USER_FREE032__SIZE_1                                  32 /*       */
#define NV_USER_FREE032__SIZE_2                                   8 /*       */
#define NV_USER_FREE032_COUNT_LO                                1:0 /* C--UF */
#define NV_USER_FREE032_COUNT_LO_0                       0x00000000 /* C---V */
#define NV_USER_FREE032_COUNT                                   9:2 /* R--UF */
#define NV_USER_FREE032_COUNT_HI                              31:10 /* C--UF */
#define NV_USER_FREE032_COUNT_HI_0                       0x00000000 /* C---V */
#define NV_USER_ZERO016(i,j,k) (0x0800012+(i)*65536+(j)*8192+(k)*2) /* R--2A */
#define NV_USER_ZERO016__SIZE_1                                  32 /*       */
#define NV_USER_ZERO016__SIZE_2                                   8 /*       */
#define NV_USER_ZERO016__SIZE_3                                   7 /*       */
#define NV_USER_ZERO016_COUNT                                  15:0 /* C--UF */
#define NV_USER_ZERO016_COUNT_0                          0x00000000 /* C---V */
#define NV_USER_ZERO032(i,j,k) (0x0800014+(i)*65536+(j)*8192+(k)*4) /* R--4A */
#define NV_USER_ZERO032__SIZE_1                                  32 /*       */
#define NV_USER_ZERO032__SIZE_2                                   8 /*       */
#define NV_USER_ZERO032__SIZE_3                                   3 /*       */
#define NV_USER_ZERO032_COUNT                                  31:0 /* C--UF */
#define NV_USER_ZERO032_COUNT_0                          0x00000000 /* C---V */
#define NV_USER_DMA_PUT(i,j)    (0x00800040+(i)*0x10000+(j)*0x2000) /* -W-4A */
#define NV_USER_DMA_PUT__SIZE_1                                  32 /*       */
#define NV_USER_DMA_PUT__SIZE_2                                   8 /*       */
#define NV_USER_DMA_PUT_OFFSET                                 31:2 /* -WXUF */
#define NV_USER_DMA_GET(i,j)    (0x00800044+(i)*0x10000+(j)*0x2000) /* R--4A */
#define NV_USER_DMA_GET__SIZE_1                                  32 /*       */
#define NV_USER_DMA_GET__SIZE_2                                   8 /*       */
#define NV_USER_DMA_GET_OFFSET                                 31:2 /* R-XUF */
#define NV_USER_REF(i,j)        (0x00800048+(i)*0x10000+(j)*0x2000) /* R--4A */
#define NV_USER_REF__SIZE_1                                      32 /*       */
#define NV_USER_REF__SIZE_2                                       8 /*       */
#define NV_USER_REF_CNT                                        31:0 /* R-XUF */
/* dev_fifo.ref */
#define NV_UDMA_OBJECT(j)                   (0x00000000+(j)*0x2000) /* -W-4A */
#define NV_UDMA_OBJECT__SIZE_1                                   32 /*       */
#define NV_UDMA_OBJECT__SIZE_2                                    8 /*       */
#define NV_UDMA_OBJECT_HANDLE                                  31:0 /* -W-VF */
#define NV_UDMA_SET_REF(j)                  (0x00000050+(j)*0x2000) /* R--4A */
#define NV_UDMA_SET_REF__SIZE_1                                  32 /*       */
#define NV_UDMA_SET_REF__SIZE_2                                   8 /*       */
#define NV_UDMA_SET_REF_CNT                                    31:0 /* R-XUF */
#define NV_UDMA_SEM_CTXDMA(j)               (0x00000060+(j)*0x2000) /* -W-4A */
#define NV_UDMA_SEM_CTXDMA__SIZE_1                               32 /*       */
#define NV_UDMA_SEM_CTXDMA__SIZE_2                                8 /*       */
#define NV_UDMA_SEM_CTXDMA_HANDLE                              31:0 /* -W-VF */
#define NV_UDMA_SEM_OFFSET(j)               (0x00000064+(j)*0x2000) /* -W-4A */
#define NV_UDMA_SEM_OFFSET__SIZE_1                               32 /*       */
#define NV_UDMA_SEM_OFFSET__SIZE_2                                8 /*       */
#define NV_UDMA_SEM_OFFSET_ADDRESS                             11:2 /* -W-VF */
#define NV_UDMA_SEM_ACQUIRE(j)              (0x00000068+(j)*0x2000) /* -W-4A */
#define NV_UDMA_SEM_ACQUIRE__SIZE_1                              32 /*       */
#define NV_UDMA_SEM_ACQUIRE__SIZE_2                               8 /*       */
#define NV_UDMA_SEM_ACQUIRE_VALUE                              31:0 /* -W-VF */
#define NV_UDMA_SEM_RELEASE(j)              (0x0000006C+(j)*0x2000) /* -W-4A */
#define NV_UDMA_SEM_RELEASE__SIZE_1                              32 /*       */
#define NV_UDMA_SEM_RELEASE__SIZE_2                               8 /*       */
#define NV_UDMA_SEM_RELEASE_VALUE                              31:0 /* -W-VF */
/* dev_misc.ref */
#define NV_USER_ADR_CHID                                      22:16 /*       */
#define NV_USER_ADR_SUBCHID                                   15:13 /*       */
#define NV_USER_ADR_METHOD                                     12:0 /*       */
#define NV_USER_DEVICE                                        22:16 /*       */
/* dev_timer.ref */
#define NV_PTIMER                             0x00009FFF:0x00009000 /* RW--D */
#define NV_PTIMER_INTR_0                                 0x00009100 /* RW-4R */
#define NV_PTIMER_INTR_0_ALARM                                  0:0 /* RWXVF */
#define NV_PTIMER_INTR_0_ALARM_NOT_PENDING               0x00000000 /* R---V */
#define NV_PTIMER_INTR_0_ALARM_PENDING                   0x00000001 /* R---V */
#define NV_PTIMER_INTR_0_ALARM_RESET                     0x00000001 /* -W--V */
#define NV_PTIMER_INTR_EN_0                              0x00009140 /* RW-4R */
#define NV_PTIMER_INTR_EN_0_ALARM                               0:0 /* RWIVF */
#define NV_PTIMER_INTR_EN_0_ALARM_DISABLED               0x00000000 /* RWI-V */
#define NV_PTIMER_INTR_EN_0_ALARM_ENABLED                0x00000001 /* RW--V */
#define NV_PTIMER_NUMERATOR                              0x00009200 /* RW-4R */
#define NV_PTIMER_NUMERATOR_VALUE                              15:0 /* RWIUF */
#define NV_PTIMER_NUMERATOR_VALUE_0                      0x00000000 /* RWI-V */
#define NV_PTIMER_DENOMINATOR                            0x00009210 /* RW-4R */
#define NV_PTIMER_DENOMINATOR_VALUE                            15:0 /* RWIUF */
#define NV_PTIMER_DENOMINATOR_VALUE_0                    0x00000000 /* RWI-V */
#define NV_PTIMER_TIME_0                                 0x00009400 /* RW-4R */
#define NV_PTIMER_TIME_0_NSEC                                  31:5 /* RWXUF */
#define NV_PTIMER_TIME_1                                 0x00009410 /* RW-4R */
#define NV_PTIMER_TIME_1_NSEC                                  28:0 /* RWXUF */
#define NV_PTIMER_ALARM_0                                0x00009420 /* RW-4R */
#define NV_PTIMER_ALARM_0_NSEC                                 31:5 /* RWXUF */
/* dev_ram.ref */
#define NV_RAMHT__SIZE_0                      0x00000FFF:0x00000000 /* RW--M */
#define NV_RAMHT__SIZE_1                      0x00001FFF:0x00000000 /* RW--M */
#define NV_RAMHT__SIZE_2                      0x00003FFF:0x00000000 /* RW--M */
#define NV_RAMHT__SIZE_3                      0x00007FFF:0x00000000 /* RW--M */
#define NV_RAMHT_HANDLE                       ( 0*32+31):( 0*32+ 0) /* RWXVF */
#define NV_RAMHT_INSTANCE                     ( 1*32+15):( 1*32+ 0) /* RWXUF */
#define NV_RAMHT_ENGINE                       ( 1*32+17):( 1*32+16) /* RWXVF */
#define NV_RAMHT_ENGINE_SW                               0x00000000 /* RW--V */
#define NV_RAMHT_ENGINE_GRAPHICS                         0x00000001 /* RW--V */
#define NV_RAMHT_ENGINE_DVD                              0x00000002 /* RW--V */
#define NV_RAMHT_CHID                         ( 1*32+28):( 1*32+24) /* RWXUF */
#define NV_RAMHT_STATUS                       ( 1*32+31):( 1*32+31) /* RWXUF */
#define NV_RAMHT_STATUS_INVALID                          0x00000000 /* RW--V */
#define NV_RAMHT_STATUS_VALID                            0x00000001 /* RW--V */
/* dev_ram.ref */
#define NV_RAMRO__SIZE_0                      0x000001FF:0x00000000 /* RW--M */
#define NV_RAMRO__SIZE_1                      0x00001FFF:0x00000000 /* RW--M */
#define NV_RAMRO_METHOD                       ( 0*32+12):( 0*32+ 0) /* RWXUF */
#define NV_RAMRO_SUBCHANNEL                   ( 0*32+15):( 0*32+13) /* RWXUF */
#define NV_RAMRO_CHID                         ( 0*32+22):( 0*32+16) /* RWXUF */
#define NV_RAMRO_TYPE                         ( 0*32+23):( 0*32+23) /* RWXVF */
#define NV_RAMRO_TYPE_WRITE                              0x00000000 /* RW--V */
#define NV_RAMRO_TYPE_READ                               0x00000001 /* RW--V */
#define NV_RAMRO_BYTE_ENABLES                 ( 0*32+27):( 0*32+24) /* RWXUF */
#define NV_RAMRO_REASON                       ( 0*32+31):( 0*32+28) /* RWXVF */
#define NV_RAMRO_REASON_ILLEGAL_ACCESS                   0x00000000 /* RW--V */
#define NV_RAMRO_REASON_NO_CACHE_AVAILABLE               0x00000001 /* RW--V */
#define NV_RAMRO_REASON_CACHE_RAN_OUT                    0x00000002 /* RW--V */
#define NV_RAMRO_REASON_FREE_COUNT_OVERRUN               0x00000003 /* RW--V */
#define NV_RAMRO_REASON_CAUGHT_LYING                     0x00000004 /* RW--V */
#define NV_RAMRO_REASON_RESERVED_ACCESS                  0x00000005 /* RW--V */
#define NV_RAMRO_DATA                         ( 1*32+31):( 1*32+ 0) /* RWXUF */
/* dev_ram.ref */
#define NV_RAMFC__SIZE_0                      0x000003FF:0x00000000 /* RW--M */
#define NV_RAMFC__SIZE_1                      0x000007FF:0x00000000 /* RW--M */
#define NV_RAMFC_DMA_PUT                      ( 0*32+31):( 0*32+ 2) /* RWXUF */
#define NV_RAMFC_DMA_GET                      ( 1*32+31):( 1*32+ 2) /* RWXUF */
#define NV_RAMFC_REF_CNT                      ( 2*32+31):( 2*32+ 0) /* RWXUF */
#define NV_RAMFC_DMA_INST                     ( 3*32+15):( 3*32+ 0) /* RWXUF */
#define NV_RAMFC_DMA_COUNT                    ( 3*32+28):( 3*32+18) /* RWXUF */
#define NV_RAMFC_DMA_METHOD                   ( 4*32+12):( 4*32+ 2) /* RWXUF */
#define NV_RAMFC_DMA_SUBCHANNEL               ( 4*32+15):( 4*32+13) /* RWXUF */
#define NV_RAMFC_DMA_METHOD_COUNT             ( 4*32+28):( 4*32+18) /* RWXUF */
#define NV_RAMFC_DMA_METHOD_TYPE              ( 4*32+ 0):( 4*32+ 0) /* RWXUF */
#define NV_RAMFC_DMA_FETCH_TRIG               ( 5*32+ 7):( 5*32+ 3) /* RWXUF */
#define NV_RAMFC_DMA_FETCH_SIZE               ( 5*32+15):( 5*32+13) /* RWXUF */
#define NV_RAMFC_DMA_FETCH_MAX_REQS           ( 5*32+20):( 5*32+16) /* RWXUF */
#define NV_RAMFC_BIG_ENDIAN                   ( 5*32+31):( 5*32+31) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_0                 ( 6*32+ 1):( 6*32+ 0) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_1                 ( 6*32+ 5):( 6*32+ 4) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_2                 ( 6*32+ 9):( 6*32+ 8) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_3                 ( 6*32+13):( 6*32+12) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_4                 ( 6*32+17):( 6*32+16) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_5                 ( 6*32+21):( 6*32+20) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_6                 ( 6*32+25):( 6*32+24) /* RWXUF */
#define NV_RAMFC_ENGINE_SUB_7                 ( 6*32+29):( 6*32+28) /* RWXUF */
#define NV_RAMFC_ENGINE_SW                               0x00000000 /* RW--V */
#define NV_RAMFC_ENGINE_GRAPHICS                         0x00000001 /* RW--V */
#define NV_RAMFC_ENGINE_DVD                              0x00000002 /* RW--V */
#define NV_RAMFC_PULL1_ENGINE                 ( 7*32+ 1):( 7*32+ 0) /* RWXUF */
#define NV_RAMFC_PULL1_ENGINE_SW                         0x00000000 /* RW--V */
#define NV_RAMFC_PULL1_ENGINE_GRAPHICS                   0x00000001 /* RW--V */
#define NV_RAMFC_PULL1_ENGINE_DVD                        0x00000002 /* RW--V */
#define NV_RAMFC_PULL1_ACQ_STATE              ( 7*32+ 4):( 7*32+ 4) /* RWXVF */
#define NV_RAMFC_PULL1_ACQ_STATE_INACTIVE                0x00000000 /* RW--V */
#define NV_RAMFC_PULL1_ACQ_STATE_ACTIVE                  0x00000001 /* RW--V */
#define NV_RAMFC_PULL1_SEM_TARGET_NODE        ( 7*32+17):( 7*32+16) /* RWXUF */
#define NV_RAMFC_PULL1_SEM_TARGET_NODE_NVM               0x00000000 /* RW--V */
#define NV_RAMFC_PULL1_SEM_TARGET_NODE_PCI               0x00000002 /* RW--V */
#define NV_RAMFC_PULL1_SEM_TARGET_NODE_AGP               0x00000003 /* RW--V */
#define NV_RAMFC_ACQUIRE_VALUE                ( 8*32+31):( 8*32+ 0) /* RWXUF */
#define NV_RAMFC_ACQUIRE_TIMESTAMP            ( 9*32+31):( 9*32+ 0) /* RWXUF */
#define NV_RAMFC_ACQUIRE_TIMEOUT              (10*32+30):(10*32+ 0) /* RWXUF */
#define NV_RAMFC_SEMAPHORE_CTXDMA             (11*32+ 0):(11*32+ 0) /* RWXVF */
#define NV_RAMFC_SEMAPHORE_CTXDMA_INVALID                0x00000000 /* RW--V */
#define NV_RAMFC_SEMAPHORE_CTXDMA_VALID                  0x00000001 /* RW--V */
#define NV_RAMFC_SEMAPHORE_OFFSET             (11*32+11):(11*32+ 2) /* RWXUF */
#define NV_RAMFC_SEMAPHORE_PAGE_ADDRESS       (11*32+31):(11*32+12) /* RWXUF */
#define NV_RAMFC_DMA_SUBROUTINE_STATE         (12*32+ 0):(12*32+ 0) /* RWXVF */
#define NV_RAMFC_DMA_SUBROUTINE_STATE_INACTIVE           0x00000000 /* RW--V */
#define NV_RAMFC_DMA_SUBROUTINE_STATE_ACTIVE             0x00000001 /* RW--V */
#define NV_RAMFC_DMA_SUBROUTINE_RETURN_OFFSET (12*32+31):(12*32+ 2) /* RWXUF */
/* dev_ram.ref */
/* dev_ram.ref */
/* dev_ram.ref */
#define NV_RAMDVD_CTX_TABLE                   (63*32+31):( 0*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT(c,s) (((c)*4+((s)/2))*32+((s)%2)*16+15):(((c)*4+((s)/2))*32+((s)%2)*16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_0        ( 0*32+15):( 0*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_1        ( 0*32+31):( 0*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_2        ( 1*32+15):( 1*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_3        ( 1*32+31):( 1*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_4        ( 2*32+15):( 2*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_5        ( 2*32+31):( 2*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_6        ( 3*32+15):( 3*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_0_7        ( 3*32+31):( 3*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_0       (60*32+15):(60*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_1       (60*32+31):(60*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_2       (61*32+15):(61*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_3       (61*32+31):(61*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_4       (62*32+15):(62*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_5       (62*32+31):(62*32+16) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_6       (63*32+15):(63*32+ 0) /* RWXUF */
#define NV_RAMDVD_CTX_TABLE_OBJECT_15_7       (63*32+31):(63*32+16) /* RWXUF */
/* dev_ram.ref */
/* dev_ram.ref */
#define NV_DMA_CLASS                          ( 0*32+11):( 0*32+ 0) /* RWXUF */
#define NV_DMA_PAGE_TABLE                     ( 0*32+12):( 0*32+12) /* RWXVF */
#define NV_DMA_PAGE_TABLE_NOT_PRESENT                    0x00000000 /* RW--V */
#define NV_DMA_PAGE_TABLE_PRESENT                        0x00000001 /* RW--V */
#define NV_DMA_PAGE_ENTRY                     ( 0*32+13):( 0*32+13) /* RWXVF */
#define NV_DMA_PAGE_ENTRY_NOT_LINEAR                     0x00000000 /* RW--V */
#define NV_DMA_PAGE_ENTRY_LINEAR                         0x00000001 /* RW--V */
#define NV_DMA_FLAGS_ACCESS                   ( 0*32+14):( 0*32+14) /* RWXVF */
#define NV_DMA_FLAGS_ACCESS_READ_WRITE                   0x00000000 /* RW--V */
#define NV_DMA_FLAGS_ACCESS_OTHER                        0x00000001 /* RW--V */
#define NV_DMA_FLAGS_MAPPING_COHERENCY        ( 0*32+15):( 0*32+15) /* RWXVF */
#define NV_DMA_FLAGS_MAPPING_COHERENCY_UNCACHED          0x00000000 /* RW--V */
#define NV_DMA_FLAGS_MAPPING_COHERENCY_CACHED            0x00000001 /* RW--V */
#define NV_DMA_TARGET_NODE                    ( 0*32+17):( 0*32+16) /* RWXVF */
#define NV_DMA_TARGET_NODE_NVM                           0x00000000 /* RW--V */
#define NV_DMA_TARGET_NODE_NVM_TILED                     0x00000001 /* RW--V */
#define NV_DMA_TARGET_NODE_PCI                           0x00000002 /* RW--V */
#define NV_DMA_TARGET_NODE_AGP                           0x00000003 /* RW--V */
#define NV_DMA_MEMORY_CLASS                   ( 0*32+19):( 0*32+18) /* RWXVF */
#define NV_DMA_MEMORY_CLASS_NV01_MEMORY_LOCAL_LINEAR     0x00000000 /* RW--V */
#define NV_DMA_MEMORY_CLASS_NV01_MEMORY_LOCAL_BANKED     0x00000001 /* RW--V */
#define NV_DMA_MEMORY_CLASS_NV01_MEMORY_SYSTEM           0x00000002 /* RW--V */
#define NV_DMA_MEMORY_CLASS_OTHER                        0x00000003 /* RW--V */
#define NV_DMA_ADJUST                         ( 0*32+31):( 0*32+20) /* RWXUF */
#define NV_DMA_LIMIT                          ( 1*32+31):( 1*32+ 0) /* RWXUF */
#define NV_DMA_ACCESS                         ( 2*32+ 1):( 2*32+ 1) /* RWXVF */
#define NV_DMA_ACCESS_READ_ONLY                          0x00000000 /* RW--V */
#define NV_DMA_ACCESS_READ_AND_WRITE                     0x00000001 /* RW--V */
#define NV_DMA_FRAME_ADDRESS                  ( 2*32+31):( 2*32+12) /* RWXUF */
/* dev_ram.ref */
#define NV_SUBCHAN_CTX_SWITCH                 ( 0*32+31):( 0*32+ 0) /* RWXUF */
#define NV_SUBCHAN_DMA_INSTANCE               ( 1*32+15):( 1*32+ 0) /* RWXUF */
#define NV_SUBCHAN_NOTIFY_INSTANCE            ( 1*32+31):( 1*32+16) /* RWXUF */
#define NV_SUBCHAN_MEMFMT_INSTANCE            ( 2*32+15):( 2*32+ 0) /* RWXUF */
#define NV_SUBCHAN_MEMFMT_LINEAR              ( 2*32+16):( 2*32+16) /* RWXUF */
#define NV_SUBCHAN_MEMFMT_LINEAR_OUT                     0x00000000 /* RW--V */
#define NV_SUBCHAN_MEMFMT_LINEAR_IN                      0x00000001 /* RW--V */
#endif /* _NV_REF_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\PatchBackend.cpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       PatchBackend.cpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/

#include "precomp.hpp"

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

void setFrontFace(NV_PATCH_INFO *info, int reversed)
{
    PPUSH pPush;
    CDevice* pDevice = g_pDevice;

    switch(D3D__RenderState[D3DRS_CULLMODE])
    {
    case D3DCULL_NONE:
        break;

    case D3DCULL_CW:
        reversed = 1 - reversed;

    case D3DCULL_CCW:

        pPush = pDevice->StartPush();

        if (reversed)
        {
            Push1(pPush, NV097_SET_FRONT_FACE, NV097_SET_FRONT_FACE_V_CW);
        } 
        else 
        {
            Push1(pPush, NV097_SET_FRONT_FACE, NV097_SET_FRONT_FACE_V_CCW);
        }

        pDevice->EndPush(pPush + 2);
        break;
    }
}

// routines for integer tessellations
void SendGuardCurve(unsigned long curvetype, NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, unsigned long flags)
{
    int i;
    NV_PATCH_CURVE_INFO *pTemp, *pTempN;
    unsigned long dwMethod;
    unsigned long preSteppedInnerCurve = 0x0;

    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    nvAssert(curvetype == NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE ||
             curvetype == NV097_SET_BEGIN_END_CURVE_CMD_RIGHT_GUARD_CURVE);


    //don't send guard curves if there aren't any attribs on that can be guarded
    if (!(info->evalEnables & (0x1 << NV_PATCH_ATTRIB_POSITION)) && !(flags & NV_PATCH_HAS_NORMAL)) { return; }

    //GUARD CURVE DATA SENT IN THIS ORDER!!!!!
    //(1) GUARDPOINT NORMAL (2) GUARDPOINT POSITION (3) GUARDCURVE POSITION (4) GUARDCURVE NORMAL

    if (NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE == curvetype) {
        pTemp  = (*quadInfo->pSwatchVBegin)[NV_PATCH_ATTRIB_POSITION];
        if (flags & NV_PATCH_HAS_NORMAL) {
            pTempN = (*quadInfo->pSwatchVBegin)[info->dstNormal];
        }

    } else {
        pTemp  = (*quadInfo->pSwatchVEnd)[NV_PATCH_ATTRIB_POSITION];
        if (flags & NV_PATCH_HAS_NORMAL)
            pTempN = (*quadInfo->pSwatchVEnd)[info->dstNormal];
    }

    //  ^-----^-----^
    // /|\ s /|\ s /|\
    //  |  w  |  w  |
    //  |  a  |  a  |
    //  |--t--o--t--|
    //  |  h  |  h  |
    //  o-----+-----o

    //TODO FIX THIS!!!!
    //if I'm an inner guard curve (i.e. a RIGHT guard curve, or left guard not on first row/last row) then step forward
    if (quadInfo->stitchVBegin
            && ( ((curvetype == NV097_SET_BEGIN_END_CURVE_CMD_RIGHT_GUARD_CURVE) && !(flags & NV_PATCH_SWATCH_LAST_COL))
                 || ((curvetype == NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE)  && !(flags & NV_PATCH_SWATCH_FIRST_COL))))
    {
        if (info->evalEnables & (0x1 << NV_PATCH_ATTRIB_POSITION)) OffsetCurve(info, pTemp,1);   //is position on?
        if (flags & NV_PATCH_HAS_NORMAL) OffsetCurve(info, pTempN,1);                            //do we have a normal?
        preSteppedInnerCurve = 0x1; //this is a hack because I prestep the curve here then step forward again for the guard pts later.
    }

    HOS_NOTE("Begin Curve (Guard Curve)");
    pPush = pDevice->StartPush();
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, curvetype);
    pDevice->EndPush(pPush + 2);

    //send guard point position
    if (flags & NV_PATCH_HAS_NORMAL) {
        //send guard point normal if active

        CopyCurve(info, &info->tempCurve, pTempN);
        OffsetCurve(info, &info->tempCurve, quadInfo->vMaxSegs - quadInfo->stitchVEnd - preSteppedInnerCurve);

        HOS_NOTE("Set Curve Coefficients");
        pPush = pDevice->StartPush(5);
        PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
        *(pPush + 1) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][0]);
        *(pPush + 2) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][1]);
        *(pPush + 3) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][2]);
        *(pPush + 4) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][3]);
        pDevice->EndPush(pPush + 5);
    }

    if (info->evalEnables & (0x1 << NV_PATCH_ATTRIB_POSITION)) {
        CopyCurve(info, &info->tempCurve, pTemp);
        OffsetCurve(info, &info->tempCurve, quadInfo->vMaxSegs - quadInfo->stitchVEnd - preSteppedInnerCurve);

        pPush = pDevice->StartPush(5);
        PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
        *(pPush + 1) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][0]);
        *(pPush + 2) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][1]);
        *(pPush + 3) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][2]);
        *(pPush + 4) = VIEW_AS_DWORD(info->tempCurve.coeffs[0][3]);
        pDevice->EndPush(pPush + 5);

        //send guard curve position
        for (i = 0; i < pTemp->order; i++) {
            HOS_NOTE("Set Curve Coefficients");
            pPush = pDevice->StartPush(5);
            PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
            *(pPush + 1) = VIEW_AS_DWORD(pTemp->coeffs[i][0]);
            *(pPush + 2) = VIEW_AS_DWORD(pTemp->coeffs[i][1]);
            *(pPush + 3) = VIEW_AS_DWORD(pTemp->coeffs[i][2]);
            *(pPush + 4) = VIEW_AS_DWORD(pTemp->coeffs[i][3]);
            pDevice->EndPush(pPush + 5);
        }
    }

    //send guard curve for normal if active
    if (flags & NV_PATCH_HAS_NORMAL) {
        //send guard curve...
        for (i = 0; i < pTempN->order; i++) {
            HOS_NOTE("Set Curve Coefficients");
            pPush = pDevice->StartPush(5);
            PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
            *(pPush + 1) = VIEW_AS_DWORD(pTempN->coeffs[i][0]);
            *(pPush + 2) = VIEW_AS_DWORD(pTempN->coeffs[i][1]);
            *(pPush + 3) = VIEW_AS_DWORD(pTempN->coeffs[i][2]);
            *(pPush + 4) = VIEW_AS_DWORD(pTempN->coeffs[i][3]);
            pDevice->EndPush(pPush + 5);
        }
    }
    pPush = pDevice->StartPush();
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
    pDevice->EndPush(pPush + 2);

    return;
}

void ComputeKelvinHOSControlWords(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, long flags)
{
    int hwAttr, numcoeffs, order;
    unsigned int BPControl[4];
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();
    unsigned int t1, t2;
    int uMaxSegs = quadInfo->uMaxSegs;
    int vMaxSegs = quadInfo->vMaxSegs;
    int partialWidth, partialHeight, nSwatchU, nSwatchV;
    int doFrac = info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL;

    nvAssert(NV_PATCH_NUMBER_OF_ATTRIBS == 16);   //this is assumed in this loop that follows
    BPControl[0] = BPControl[1] = 0x0;
    numcoeffs = 0;

    for (hwAttr = 0; hwAttr <= 7; hwAttr++) {               //BPControl0
        if (info->evalEnables & (1 << hwAttr)) {
            order = info->maps[hwAttr].uorder;
            nvAssert(order-1 > 0);
            BPControl[0] |= ((order-1) << (hwAttr<<2));     //hwAttr*4
            numcoeffs+=order;
        }
    }

    for (hwAttr = 8; hwAttr < 16; hwAttr++) {               //BPControl1
        if (info->evalEnables & (1 << hwAttr)) {
            order = info->maps[hwAttr].uorder;
            nvAssert(order-1 > 0);
            BPControl[1] |= ((order-1) << (hwAttr<<2));
            numcoeffs+=order;
        }
    }       

    //in the fractional case we've intentionally rounded up by 1 to subsume the fractional portion of the transition
    //but we don't want to fool the HW with this notational convenience, drop by 1 here if necessary
    if (doFrac) { 
        //stitchUEnd/stitchVEnd are never set in the fractional case so decrement these in the non degenerate cases
        //because the partialwidth/height below won't account for it properly -- in the degenerate case
        //we don't have a last row or last col transition so DON'T decrement here... UGH.
        if (uMaxSegs>1) uMaxSegs--;     
        if (vMaxSegs>1) vMaxSegs--; 
    }
        
    partialWidth = (uMaxSegs - quadInfo->stitchUEnd) % info->maxSwatch;   //should truncate to integer...   
    partialHeight = (vMaxSegs - quadInfo->stitchVEnd) % info->maxSwatch;
    nSwatchU = (uMaxSegs - quadInfo->stitchUEnd - partialWidth)  / info->maxSwatch;
    nSwatchV = (vMaxSegs - quadInfo->stitchVEnd - partialHeight) / info->maxSwatch;   

    //if we have a degenerate regular grid -- ignore the normal
    //counts of SwatchU,SwatchV and set them to 0.  This is required by HW
    //despite appearances.  The Transition inside/outside params in the transition
    //control words will disambiguate this apparent strangeness.
    if (quadInfo->stitchUBegin || quadInfo->stitchUEnd) {
        if (uMaxSegs  <= 1) { nSwatchU = 0; nSwatchV = 0; }
    }
    if (quadInfo->stitchVBegin || quadInfo->stitchVEnd) {
        if (vMaxSegs  <= 1) { nSwatchU = 0; nSwatchV = 0; }
    }

    BPControl[2] = 0x0; //BPControl2
    nvAssert(info->maxSwatch <=17);

    //assumed as a QUAD..
    BPControl[2] = (partialHeight << 26) | (partialWidth << 21) | (info->maxSwatch << 16) | (nSwatchU << 8) | (nSwatchV << 0);

    //Don't turn this on because we don't actully support triangle patches natively... for future work
    //BPControl[2] |=  ((info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR ? 1 : 0) << 31 /*primitive type */);//
    if (doFrac) {        
        BPControl[3] = (NV097_SET_BEGIN_PATCH3_TESSELATION_FIXED_STITCH << 16); 
        if (quadInfo->uMaxSegs == 1 || quadInfo->vMaxSegs == 1) {
            BPControl[3] |= NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST;
            BPControl[3] |= (NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST << 3);
        } else {
            BPControl[3] |= (NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST_AND_LAST | (NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST_AND_LAST << 3));
        }

    } else {
        // row transitions
        t1 = (quadInfo->stitchVEnd ? 2 : 0) | (quadInfo->stitchVBegin ? 1 : 0);
        if (quadInfo->u0Dir != quadInfo->u1Dir  &&  t1) {
            // reverse transition, and not degenerate
            t1 |= 4;
        }
        nvAssert(t1 != 7);

        // col transitions
        t2 = (quadInfo->stitchUEnd ? 16 : 0) | (quadInfo->stitchUBegin ? 8 : 0);
        if (quadInfo->v0Dir != quadInfo->v1Dir  &&  t2) {
            // reverse col transition, and not degenerate
            t2 |= 0x20;
        }
        nvAssert(t2 != 0x38);
        BPControl[3] = t2 | t1;
    }

    if (quadInfo->uMaxDir ^ quadInfo->vMaxDir ^ info->flipUV) {
        BPControl[3] |= (1 << 14);
    }

    if (info->evalEnables & (1 << NV_PATCH_ATTRIB_POSITION)) {
        order = (info->maps[NV_PATCH_ATTRIB_POSITION].vorder - 1);
        nvAssert(order > 0);
        BPControl[3] |= (order << 6 );
    }
    if (flags & NV_PATCH_HAS_NORMAL || info->evalEnables & (1 << NV_PATCH_ATTRIB_NORMAL)) {
        order = (info->maps[info->dstNormal].vorder - 1);
        nvAssert(order > 0);
        BPControl[3] |= (order << 10);
    }
    BPControl[3] |= (numcoeffs << 24);

    HOS_NOTE("Set Begin Patch");
    pPush = pDevice->StartPush();
    Push1(pPush + 0, NV097_SET_BEGIN_PATCH0, BPControl[0]);
    Push1(pPush + 2, NV097_SET_BEGIN_PATCH1, BPControl[1]);
    Push1(pPush + 4, NV097_SET_BEGIN_PATCH2, BPControl[2]);
    Push1(pPush + 6, NV097_SET_BEGIN_PATCH3, BPControl[3]);
    pDevice->EndPush(pPush + 8);

    return;
}

} // end of namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\patch.cpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       patch.cpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/
 
#include "precomp.hpp"

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#pragma warning(disable:4244)

float g_Scratch[16][36][4];
NV_PATCH_ALLOC_CACHE MyCache[MAX_EV_CACHE];

int SlotToAttribute(DWORD Slot)
{
    switch (Slot)
    {
    case D3DVSDE_POSITION:
    case D3DVSDE_BLENDWEIGHT:
    case D3DVSDE_NORMAL:
    case D3DVSDE_DIFFUSE:
    case D3DVSDE_SPECULAR:
    case D3DVSDE_TEXCOORD0:
    case D3DVSDE_TEXCOORD1:
    case D3DVSDE_TEXCOORD2:
    case D3DVSDE_TEXCOORD3:
        return Slot;
    }
    return -1;
}

DWORD g_PatchArraySize = 0;
CPatch** g_PatchArray;

//------------------------------------------------------------------------------
// FindPatch

inline CPatch* FindPatch(DWORD dwHandle)
{
    if (dwHandle < g_PatchArraySize)
    {
        return g_PatchArray[dwHandle];
    }
    else
    {
        return NULL;
    }
}

//------------------------------------------------------------------------------
// RemovePatch

inline void RemovePatch(DWORD dwHandle)
{
    g_PatchArray[dwHandle] = NULL;
}

//------------------------------------------------------------------------------
// AddPatch

BOOL AddPatch(CPatch *p, DWORD dwHandle)
{
    CPatch** NewPatchArray;
    DWORD count = dwHandle + 1;

    if (count > g_PatchArraySize)
    {
        DWORD newCount = (count + 16) & ~0xf;

        NewPatchArray = (CPatch**)MemAlloc(sizeof(PVOID) * newCount);
        if (NewPatchArray == NULL)
        {
            return FALSE;
        }

        if (g_PatchArray != NULL)
        {
            memcpy(NewPatchArray, g_PatchArray, count * sizeof(PVOID));
            MemFree(g_PatchArray);
        }

        g_PatchArray = NewPatchArray;
        g_PatchArraySize = newCount;
    }

    g_PatchArray[dwHandle] = p;

    return TRUE;
}

//------------------------------------------------------------------------------
// D3DDevice_DrawRectPatch

extern "C"
HRESULT WINAPI D3DDevice_DrawRectPatch(
    UINT dwHandle,
    CONST float* pfSegs,
    CONST D3DRECTPATCH_INFO* pRSInfo) 
{ 
    COUNT_API(API_D3DDEVICE_DRAWRECTPATCH);

    // PERF: Because the driver needs to generate the forward differencing
    //       values from the stream data using the CPU, it would be best if 
    //       we used a cached view.  But since we have no cheap means of 
    //       flushing the cache, we can't mix cacheable and uncacheable
    //       views.  We might need a new sys-mem VB construct for patches?
    //
    // NOTE: I think the API starts reading at offset 0 of the VB?  Shouldn't
    //       there be a means of specifying a different offset?  (Otherwise
    //       there has to be a separate VB per patch?)


    float Segs[4];
    CPatch *pPatch = NULL;
    DWORD  num_subpatches = 0;
    DWORD dwDirty = 0;
    DWORD retVal = D3D_OK;
    int i;
    CDevice *pDevice = g_pDevice;

    pDevice->StartBracket();

    //if no pfSegs info get it from the renderstate
    if (pfSegs == NULL)
    {
        Segs[0] = Segs[1] = Segs[2] = Segs[3] = *(float*)(&(D3D__RenderState[D3DRS_PATCHSEGMENTS]));
    }
    else
    {
        if (D3D__RenderState[D3DRS_PATCHEDGESTYLE] == 0x1)
        {
            for (i = 0; i < 4; i++)
            {
                Segs[i] = pfSegs[i];
            }
        }
        else
        {
            for (i = 0; i < 4; i++)
            {
                Segs[i] = int(pfSegs[i]);
            }
        }
    }

    //check to see if we've cached this patch.
    //Note a handle of 0 implies NOT to cache the patch.
    if (dwHandle != 0)
    {
        pPatch = FindPatch(dwHandle);
    }
        
    if (pPatch != NULL)
    {
        if (Segs[0] != pPatch->getSeg(0) || Segs[1] != pPatch->getSeg(1) ||
                Segs[2] != pPatch->getSeg(2) || Segs[3] != pPatch->getSeg(3))
        {
            //tessellation has changed recalc parameterization
            pPatch->setCalc(NV_PATCH_DIRTY_TESSELLATION);
            pPatch->setTessellation(Segs, NV_PATCH_FLAG_TYPE_PATCH);
            dwDirty = NV_PATCH_DIRTY_TESSELLATION;
        }
        else
        {
            //used cached FD params directly
            pPatch->setCalc(NV_PATCH_DIRTY_NONE);
        }
    }

    //patch hasn't been cached -- build a new one
    if (pPatch == NULL || pRSInfo != NULL)
    {
        if (pPatch != NULL)
        {
            pPatch->UnInit();
            MemFree(pPatch);
        }

        pPatch = (CPatch*)MemAlloc(sizeof(CPatch));
        if (!pPatch->Init(dwHandle))
        {
            return E_OUTOFMEMORY;
        }

        pPatch->setTessellation(Segs, NV_PATCH_FLAG_TYPE_PATCH);
        pPatch->setOriginalTessellation(Segs, NV_PATCH_FLAG_TYPE_PATCH);
    }

    if (pRSInfo != NULL)
    {
        //given this is a new cached patch  assume there is a valid pRSInfo.
        //initialize the patch structure
        pPatch->setDimension(pRSInfo->Width, pRSInfo->Height);
        pPatch->setBasis((NV_PATCH_BASIS_TYPE)pRSInfo->Basis);    //int cast to deal with enum casts.
        pPatch->setOrder(pRSInfo->Order);
        pPatch->setStride(pRSInfo->Stride);                       //IS THIS RIGHT??

        //alwasy set as fractional tessellation until they get their renderstate defined.
        if (D3D__RenderState[D3DRS_PATCHEDGESTYLE] == 0x1)
        {
            pPatch->setTessMode(NV_PATCH_FLAG_TESS_FRACTIONAL);
        }
        else
        {
            pPatch->setTessMode(NV_PATCH_FLAG_TESS_INTEGER);
        }

        //do this AFTER the normal/uv/stream setup cause they use these variable to figure out what to allocate
        pPatch->setCalc(NV_PATCH_DIRTY_TESSELLATION | NV_PATCH_DIRTY_CONTROL_POINTS);
        dwDirty = NV_PATCH_DIRTY_TESSELLATION | NV_PATCH_DIRTY_CONTROL_POINTS;

        //defined in # of vertices in a logical 2 dimensional Vertex buffer
        pPatch->setVertexOffset(pRSInfo->StartVertexOffsetHeight * pRSInfo->Stride + pRSInfo->StartVertexOffsetWidth);

        //copy data to scratch.
        pPatch->setupStreams();
    }

    switch (pPatch->getBasis())
    {
    case NV_PATCH_BASIS_BEZIER:

        //if bezier don't cycle through multiple patches in the width/height fashion as bsplines
        //if we dirtied the control points -- free them up and reallocate some cached space for them.
        if (dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS)
        {
            pPatch->copyDataToScratch(0,0);
            pPatch->freeCached();
            if(!pPatch->allocCached(1))
            {
                retVal = D3DERR_DRIVERINTERNALERROR;
                goto nvPatch_Mem_Fault;
            }

            pPatch->getCachedData(0);
        }

        pPatch->setTextureOffsets(0.0,1.0,0.0,1.0);
        pPatch->setupStreams();

        retVal = nvEvalPatchSetup(pPatch->getInfo());    
        nvAllocInfoScratch(pPatch->getInfo());
        if (dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS)
        {
            nvAllocFDMatricesEtc(pPatch->getInfo());
            retVal |= nvEvalPatch(pPatch->getInfo());
            pPatch->saveCachedData(0);
        }
        else
        {
            retVal |= nvEvalPatch(pPatch->getInfo());
        }
        break;

    case NV_PATCH_BASIS_BSPLINE:
    case NV_PATCH_BASIS_CATMULL_ROM:
        DWORD upatches = pPatch->getWidth()  - pPatch->getOrder();
        DWORD vpatches = pPatch->getHeight() - pPatch->getOrder();
        float ustep,vstep;

        //allocate some data for
        if (dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS)
        {
            pPatch->freeCached();     //free up old cached data and reinit for a new patch to be rebuilt.
            if (!pPatch->allocCached(upatches * vpatches))
            {
                retVal = D3DERR_DRIVERINTERNALERROR;
                goto nvPatch_Mem_Fault;
            }

        }

        //reset the tessellation value here to account for subpatches.  The tessellation is meant to describe
        //the ENTIRE patch, not each subpatch.  Divide the tessellation by the # of subpatches in each direction.
        if (dwDirty)
        {
            if (D3D__RenderState[D3DRS_PATCHEDGESTYLE] == 0x1)
            {
                //fractional
                Segs[0] = max(1.0,Segs[0]/upatches+0.5); Segs[1] = max(1.0,Segs[1]/vpatches);
                Segs[2] = max(1.0,Segs[2]/upatches+0.5); Segs[3] = max(1.0,Segs[3]/vpatches);
            }
            else
            {
                //integer
                Segs[0] = max(1.0,int(Segs[0]/upatches+0.5)); Segs[1] = max(1.0,int(Segs[1]/vpatches+0.5));
                Segs[2] = max(1.0,int(Segs[2]/upatches+0.5)); Segs[3] = max(1.0,int(Segs[3]/vpatches+0.5));
            }

            switch (dwDirty)
            {
            case NV_PATCH_DIRTY_CONTROL_POINTS | NV_PATCH_DIRTY_TESSELLATION:
            case NV_PATCH_DIRTY_CONTROL_POINTS:
                pPatch->setOriginalTessellation(Segs, NV_PATCH_FLAG_TYPE_PATCH);
            case NV_PATCH_DIRTY_TESSELLATION:
                pPatch->setTessellation(Segs, NV_PATCH_FLAG_TYPE_PATCH);
            }
        }

        //bpsline -- observe that width/height in PRSInfo implies multiple subpatches...
        //render and cache each one seperately.
        //pPatch->setupStreams();

        ustep = 1.0/upatches;
        vstep = 1.0/vpatches;
        unsigned int i,j;
        for (i = 0; i < (upatches); i++)
        {
            for (j = 0; j < (vpatches); j++)
            {
                pPatch->setCalc(dwDirty);     //reset these flags everytime through loop
                                                //because they'll be cleared internally for each map
                                                //though technically I'm rebuilding all here
                pPatch->getCachedData(upatches*i+j);
                pPatch->setTextureOffsets(i*ustep, (i+1)*ustep, j*vstep, (j+1)*vstep);
                pPatch->copyDataToScratch(i, j);
                pPatch->setupStreams();

                //if we dirtied the control points -- free them up and reallocate some cached space for them.
                nvEvalPatchSetup(pPatch->getInfo());
                if (dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS)
                {
                    nvAllocFDMatricesEtc(pPatch->getInfo());                
                    nvAllocInfoScratch(pPatch->getInfo());
                    retVal = nvEvalPatch(pPatch->getInfo());
                    pPatch->saveCachedData(upatches*i+j);
                }
                else
                {
                    retVal = nvEvalPatch(pPatch->getInfo());
                }
                nvEvalPatchCleanup(pPatch->getInfo());
            }
        }
    }

    nvEvalPatchCleanup(pPatch->getInfo());

    retVal = D3D_OK;

    //if handle is 0 we don't want this cached and should release the pNvObj, patch, and cached data
    if (dwHandle == 0)
    {
        pPatch->UnInit();
        MemFree(pPatch);
    }

nvPatch_Mem_Fault:

    // Restore the actual front face mode, since the front face register is whacked
    // directly during patch rendering.

    if (D3D__RenderState[D3DRS_CULLMODE] != D3DCULL_NONE)
    {
        D3DDevice_SetRenderState_FrontFace(D3D__RenderState[D3DRS_FRONTFACE]);
    }

    pDevice->EndBracket();

    return retVal;
}

//------------------------------------------------------------------------------
// D3DDevice_DrawTriPatch

extern "C"
HRESULT WINAPI D3DDevice_DrawTriPatch(
    UINT dwHandle,
    CONST float* pfSegs,
    CONST D3DTRIPATCH_INFO* pTSInfo) 
{ 
    COUNT_API(API_D3DDEVICE_DRAWTRIPATCH);

    float Segs[4];
    CPatch *pPatch = NULL;
    DWORD dwDirty = 0;
    DWORD retVal = D3D_OK;
    int i;
    CDevice *pDevice = g_pDevice;

    pDevice->StartBracket();

    //if no pfSegs info get it from the renderstate
    if (pfSegs == NULL)
    {
        Segs[0] = Segs[1] = Segs[2] = Segs[3] = *(float*)(&(D3D__RenderState[D3DRS_PATCHSEGMENTS]));
    }
    else
    {
        if (D3D__RenderState[D3DRS_PATCHEDGESTYLE] == 0x1)
        {
            for (i = 0; i < 4; i++)
            {
                Segs[i] = pfSegs[i];
            }
        }
        else
        {
            for (i = 0; i < 4; i++)
            {
                Segs[i] = int(pfSegs[i]);
            }
        }
    }
    Segs[3] = 0;    

    //check to see if we've cached this patch.
    //Note a handle of 0 implies NOT to cache the patch.
    if (dwHandle != 0)
    {
        pPatch = FindPatch(dwHandle);
    }

    if (pPatch != NULL)
    {
        //we have a pObj then we have a cached patch.
        if(Segs[0] != pPatch->getSeg(0) || Segs[1] != pPatch->getSeg(1) ||
           Segs[2] != pPatch->getSeg(2))
        {
            //tessellation has changed recalc parameterization
            pPatch->setCalc(NV_PATCH_DIRTY_TESSELLATION);
            pPatch->setTessellation(Segs, NV_PATCH_FLAG_TYPE_TRIANGULAR);
        }
        else
            //used cached FD params directly
            pPatch->setCalc(NV_PATCH_DIRTY_NONE);
    }

    //patch hasn't been cached -- build a new one
    if (pPatch == NULL || pTSInfo != NULL)
    {
        if (pPatch != NULL)
        {
            pPatch->UnInit();
            MemFree(pPatch);
        }

        pPatch = (CPatch*)MemAlloc(sizeof(CPatch));
        if (!pPatch->Init(dwHandle))
        {
            return E_OUTOFMEMORY;
        }

        pPatch->setTessellation(Segs, NV_PATCH_FLAG_TYPE_TRIANGULAR);
        pPatch->setOriginalTessellation(Segs, NV_PATCH_FLAG_TYPE_TRIANGULAR);
    }

    if (pTSInfo)
    {   //new RenderSurface info -- reinitialize the patch data

        //given this is a new cached patch  assume there is a valid pRSInfo.
        //initialize the patch structure
        pPatch->setDimension(1, 1);
        pPatch->setBasis((NV_PATCH_BASIS_TYPE)pTSInfo->Basis);    //int cast to deal with enum casts.
        pPatch->setOrder(pTSInfo->Order);
        pPatch->setStride(pTSInfo->Order);                       //IS THIS RIGHT FOR TRI PATCHES????
        pPatch->setPrimMode(NV_PATCH_FLAG_TYPE_TRIANGULAR);

        //alwasy set as fractional tessellation until they get their renderstate defined.
        if(D3D__RenderState[D3DRS_PATCHEDGESTYLE] == 0x1)
            pPatch->setTessMode(NV_PATCH_FLAG_TESS_FRACTIONAL);
        else pPatch->setTessMode(NV_PATCH_FLAG_TESS_INTEGER);

        //do this AFTER the normal/uv/stream setup cause they use these variable to figure out what to allocate
        pPatch->setCalc(NV_PATCH_DIRTY_TESSELLATION | NV_PATCH_DIRTY_CONTROL_POINTS);
        dwDirty = NV_PATCH_DIRTY_TESSELLATION | NV_PATCH_DIRTY_CONTROL_POINTS;

        //defined in # of vertices in a logical 2 dimensional Vertex buffer
        pPatch->setVertexOffset(pTSInfo->StartVertexOffset);

        //copy data to scratch.
        pPatch->setupStreams();
    }

    switch(pPatch->getBasis()){
    case NV_PATCH_BASIS_BEZIER:

        //if bezier don't cycle through multiple patches in the width/height fashion as bsplines
        if(dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS){
            pPatch->copyDataToScratchTri(0,0);
            pPatch->freeCached();     //free up old cached data and reinit for a new patch to be built.
            if(!pPatch->allocCached(1)){
                retVal = D3DERR_DRIVERINTERNALERROR;
                goto nvPatch_Mem_Fault;
            }
            pPatch->getCachedData(0);
        }

        //the app? will make a call for each seperately.
        //if we dirtied the control points -- free them up and reallocate some cached space for them.
        pPatch->setTextureOffsets(0.0,1.0,0.0,1.0);
        pPatch->setupStreams();

        retVal = nvEvalPatchSetup(pPatch->getInfo());    
        nvAllocInfoScratch(pPatch->getInfo());
        if (dwDirty & NV_PATCH_DIRTY_CONTROL_POINTS)
        {
            nvAllocFDMatricesEtc(pPatch->getInfo());   
            retVal |= nvEvalPatch(pPatch->getInfo());
            pPatch->saveCachedData(0);
        }
        else
        {
            retVal |= nvEvalPatch(pPatch->getInfo());
        }
        break;
    case NV_PATCH_BASIS_BSPLINE:
    case NV_PATCH_BASIS_CATMULL_ROM:
        nvAssert(0);  //THIS SHOULD NEVER HAPPEN FOR TRI PATCHES!!!
    }

    nvEvalPatchCleanup(pPatch->getInfo());

    retVal = D3D_OK;

    //if handle is 0 we don't want this cached and should release the pNvObj, patch, and cached data
    if (dwHandle == 0)
    {
        pPatch->UnInit();
        MemFree(pPatch);
    }

nvPatch_Mem_Fault:

    // Restore the actual front face mode, since the front face register is whacked
    // directly during patch rendering.

    if (D3D__RenderState[D3DRS_CULLMODE] != D3DCULL_NONE)
    {
        D3DDevice_SetRenderState_FrontFace(D3D__RenderState[D3DRS_FRONTFACE]);
    }

    pDevice->EndBracket();

    return retVal;
}

//------------------------------------------------------------------------------
// D3DDevice_DeletePatch

extern "C"
void WINAPI D3DDevice_DeletePatch(
    UINT Handle) 
{ 
    COUNT_API(API_D3DDEVICE_DELETEPATCH);
    CPatch *pPatch = FindPatch(Handle);

    if (pPatch != NULL)
    {
        pPatch->UnInit();
        MemFree(pPatch);
    }
}

BOOL CPatch::Init(DWORD dwHandle)
{
    int i;

    if (!AddPatch(this, dwHandle))
    {
        return FALSE;
    }

    m_dwHandle = dwHandle;

    m_PatchData.maxSwatch = NV_PATCH_KELVIN_SWATCH_SIZE;

    m_subpatchcount = 0;
    m_dwStride = m_dwWidth = m_dwHeight = 0;
    m_dwOrder = 1;
    m_PatchData.srcNormal = -1;
    m_PatchData.dstNormal = -1;
    m_PatchData.maxSwatch = NV_PATCH_KELVIN_SWATCH_SIZE;
    m_PatchData.nAttr = NV_PATCH_NUMBER_OF_ATTRIBS;
    m_PatchData.maxAttr = NV_PATCH_NUMBER_OF_ATTRIBS;
    m_PatchData.maxOrder = NV_PATCH_MAX_ORDER;
//    m_PatchData.evAlloc9FDMatrices.pBase = NULL;
    m_PatchData.quadInfo = NULL;

    for (i = 0; i < 8; i++)
    {
        m_PatchData.srcUV[i] = -1;
        m_PatchData.dstUV[i] = -1;
    }

    m_PatchData.tess.tensor.nu0 = 0;
    m_PatchData.tess.tensor.nu1 = 0;
    m_PatchData.tess.tensor.nv0 = 0;
    m_PatchData.tess.tensor.nv1 = 0;

    m00 = m10 = m01 = m11 = NULL;
    guardQF = NULL;
    guardTF = NULL;

    cachedQuadInfo = NULL;

    for(i=0; i < MAX_EV_CACHE; i++){
        m_PatchData.pCache[i] = &MyCache[i];       
    }

    //setup default render flags
    m_PatchData.flags = 0x0;    //TESS=FLOAT, PRIM=QUAD, NO BUFFER ALLOCATED

    return TRUE;
}

void CPatch::UnInit(void)
{
    RemovePatch(m_dwHandle);

    freeCached();
}

void CPatch::setStream(UINT streamID, void *memptr, DWORD stride, DWORD pitch, NV_PATCH_VERTEX_FORMAT_TYPE mt, UINT order)
{
    m_PatchData.maps[streamID].maptype       = NV_PATCH_VERTEX_FORMAT_FLOAT_4;//shared code deals in 4 vectors!!!                                                                             
    //copy to scratch routine will expand.
    m_PatchData.maps[streamID].Originaltype  = mt;
    m_PatchData.maps[streamID].rawData       = (float*)memptr;
    m_PatchData.maps[streamID].stride        = stride;
    m_PatchData.maps[streamID].pitch         = pitch;                           //in # of vertices to next row.
    m_PatchData.maps[streamID].ufStride      = 4;                               //# of floats to next vertex in u.
    m_PatchData.maps[streamID].vfStride      = pitch*4;                         //# of floats to next vertex in v.
    m_PatchData.maps[streamID].uorder        = order;
    m_PatchData.maps[streamID].vorder        = order;
    if(order == 0) m_PatchData.evalEnables &= ~(0x1 << streamID);
    else m_PatchData.evalEnables |= (0x1 << streamID);
}

void CPatch::getCachedData(DWORD i){
    m_PatchData.quadInfo = cachedQuadInfo[i];
}

void CPatch::saveCachedData(DWORD i){
    //this assumes that the EVALLOC routines in the shared code allocate Quadinfo first yes?
    cachedQuadInfo[i] = (NV_PATCH_QUAD_INFO*)(m_PatchData.pCache[EV_CACHE_QUADINFO_ETC]->pBaseCache);    
    m_PatchData.pCache[EV_CACHE_QUADINFO_ETC]->pBaseCache = NULL;    
    m_PatchData.pCache[EV_CACHE_QUADINFO_ETC]->bytesAllocCache = 0;        
}

BOOL CPatch::allocCached(DWORD dwNumSubPatches)
{
    DWORD evalEnables = m_PatchData.evalEnables;
    DWORD i;

    //new char[NV_PATCH_NUMBER_OF_ATTRIBS*dwNumSubPatches*sizeof(FDMatrix*)]
    if(m_PatchData.flags & NV_PATCH_FLAG_AUTO_UV){
        for(i=0; i < 8; i++){   if(m_PatchData.dstUV[i] != 0xFFFFFFFF) evalEnables |= (1<< m_PatchData.dstUV[i]); }
    }
    if(m_PatchData.flags & NV_PATCH_FLAG_AUTO_NORMAL){ evalEnables |= (1<< m_PatchData.dstNormal); }
   
    //allocate set of ptrs to our cached data structures
    m_subpatchcount = dwNumSubPatches;
    bool failed = FALSE;

    //allocate space for quadInfo structs
    cachedQuadInfo = (NV_PATCH_QUAD_INFO**)MemAlloc(sizeof(NV_PATCH_QUAD_INFO*)*dwNumSubPatches);
    if(cachedQuadInfo == NULL){ return FALSE; }

    for(i=0; i < dwNumSubPatches; i++){ cachedQuadInfo[i] = NULL; }
    
    return TRUE;
}

void CPatch::freeCached()
{
    DWORD i;

    for(i=0; i < this->m_subpatchcount; i++){       
        if(cachedQuadInfo[i]) MemFree(cachedQuadInfo[i]);
        cachedQuadInfo[i] = NULL;
    }
    if(cachedQuadInfo){ MemFree(cachedQuadInfo); cachedQuadInfo = NULL; }    
    m_PatchData.quadInfo = NULL;
}

inline NV_PATCH_VERTEX_FORMAT_TYPE SizeAndTypeToType(DWORD SizeAndType)
{
    switch (SizeAndType)
    {
    case ST(1, F): return NV_PATCH_VERTEX_FORMAT_FLOAT_1;
    case ST(2, F): return NV_PATCH_VERTEX_FORMAT_FLOAT_2;
    case ST(3, F): return NV_PATCH_VERTEX_FORMAT_FLOAT_3;
    case ST(4, F): return NV_PATCH_VERTEX_FORMAT_FLOAT_4;
    default: return NV_PATCH_VERTEX_FORMAT_FLOAT_1;
    }
}

DWORD GetAutoNormalStream(VertexShader *pVShader)
{
    int i, v;

    for (v = 0; v < VERTEXSHADER_SLOTS; v++)
    {
        i = SlotToAttribute(v);
        if (i == -1)
        {
            continue;
        }

        if (pVShader->Slot[v].Flags == AUTONORMAL)
        {
            return i;
        }
    }
    return STREAM_NONE;
}

DWORD GetAutoTextureStream(DWORD dwCount)
{
    CDevice *pDevice = g_pDevice;
    VertexShader *pVShader = pDevice->m_pVertexShader;
    int i, v;

    for (v = 0; v < VERTEXSHADER_SLOTS; v++) {

        i = SlotToAttribute(v);
        if (i == -1)
        {
            continue;
        }

        if (pVShader->Slot[v].Flags == AUTOTEXCOORD) {
            if (dwCount == 0)
                return i;
            else
                dwCount--;
        }
    }
    return STREAM_NONE;
}

void CPatch::setupStreams()
{
    DWORD i, v, dwOffset, dwVBStride, dwOrder, dwStream;
    BYTE *dwVBBase;
    NV_PATCH_VERTEX_FORMAT_TYPE dwType;
    CDevice *pDevice = g_pDevice;
    VertexShader *pVShader;

    pVShader = pDevice->m_pVertexShader;

    m_PatchData.nAttr = 0x0;

    for (v = 0; v < VERTEXSHADER_SLOTS; v++)
    {
        i = SlotToAttribute(v);
        if (i == -1)
        {
            continue;
        }

        dwStream = pVShader->Slot[v].StreamIndex;

        if (pVShader->Slot[v].SizeAndType != SIZEANDTYPE_DISABLED &&
                pVShader->Slot[v].Flags == AUTONONE &&
                g_Stream[dwStream].pVertexBuffer != NULL)
        {
            dwType = SizeAndTypeToType(pVShader->Slot[v].SizeAndType);
            dwVBStride = 4*sizeof(float);   //stride size for shared code -- i.e. vector.
            dwVBBase = (BYTE*)&g_Scratch[i][0][0];
            dwOffset = 0;
            dwOrder = getOrder() + 1;
            m_PatchData.nAttr++;
        }
        else
        {
            dwVBBase = NULL;
            dwOffset = dwVBStride = dwOrder = 0;
            dwType = NV_PATCH_VERTEX_FORMAT_FLOAT_1;
        }
        setStream(i, dwVBBase + dwOffset, dwVBStride, dwOrder, dwType, dwOrder);
    }

    //get auto generated normals
    dwStream = GetAutoNormalStream(pVShader);
    if (dwStream != STREAM_NONE)
    {
        //destination should be the normal stream itself
        setAutoNormal(pVShader->Slot[dwStream].Source, dwStream);
    }

    //get auto generated texture coordinates
    for (i=0; i < 8; i++)
    {
        dwStream = GetAutoTextureStream(i);
        if (dwStream != STREAM_NONE)
        {
            //destination should be texture stream itself
            setAutoUV(pVShader->Slot[dwStream].Source, dwStream, i);
        }
    }

    pDevice->SetStateUP();
    setVertexStride(pDevice->m_InlineVertexDwords);
}

void CPatch::copyDataToScratch(DWORD offsetu, DWORD offsetv)
{
    DWORD v,i,j,k, pitch, vertexcount;
    float *data;
    DWORD evalEnables, dwOffset, dwStream, dwStride;
    DWORD order;
    CDevice *pDevice = g_pDevice;
    VertexShader *pVShader = pDevice->m_pVertexShader;

    order = m_dwOrder + 1;
    evalEnables = m_PatchData.evalEnables;

    for (v = 0; v < VERTEXSHADER_SLOTS; v++)
    {
        i = SlotToAttribute(v);
        if (i == -1)
        {
            continue;
        }

        if ((evalEnables & (1 << i)) &&
                pVShader->Slot[v].SizeAndType != SIZEANDTYPE_DISABLED)
        {
            dwStream = pVShader->Slot[v].StreamIndex;

            if (g_Stream[dwStream].pVertexBuffer != NULL) {

                data = (float*)GetDataFromResource(g_Stream[dwStream].pVertexBuffer);

                dwOffset = (offsetv * getWidth() + offsetu) + m_dwVertexOffset;
                dwStride =  g_Stream[dwStream].Stride >> 2; //convert to float
                data += dwOffset * dwStride;

                //BUG BUG: THIS IS WEIRD TO ADD AN OFFSET TO OFFSETS?? NEED TO LOOK INTO THIS
                data += (pVShader->Slot[v].Offset >> 0x2);  //vertex offset converted to offset in float
                pitch = getStride() * dwStride;   //getStride returns a stride value in vertices for mosaiced patches
                vertexcount = 0;

                switch (m_PatchData.maps[i].Originaltype)
                {
                case NV_PATCH_VERTEX_FORMAT_FLOAT_1:
                    for (j = 0; j < order; j++)
                    {
                        for(k = 0; k < order*dwStride; k+=dwStride)
                        {
                            g_Scratch[i][vertexcount][0] = data[k+0];
                            g_Scratch[i][vertexcount][1] = 0.0;
                            g_Scratch[i][vertexcount][2] = 0.0;
                            g_Scratch[i][vertexcount][3] = 1.0;
                            vertexcount++;
                        }
                        data += pitch;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_2:
                    for (j = 0; j < order; j++)
                    {
                        for (k = 0; k < order*dwStride; k+=dwStride)
                        {
                            g_Scratch[i][vertexcount][0] = data[k+0];
                            g_Scratch[i][vertexcount][1] = data[k+1];
                            g_Scratch[i][vertexcount][2] = 0.0;         
                            g_Scratch[i][vertexcount][3] = 1.0; 
                            vertexcount++;
                        }
                        data += pitch;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_3:
                    for (j = 0; j < order; j++)
                    {
                        for(k=0; k < order*dwStride; k+=dwStride)
                        {
                            g_Scratch[i][vertexcount][0] = data[k+0]; 
                            g_Scratch[i][vertexcount][1] = data[k+1];
                            g_Scratch[i][vertexcount][2] = data[k+2]; 
                            g_Scratch[i][vertexcount][3] = 1.0; 
                            vertexcount++;
                        }
                        data+=pitch;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_4:
                    for (j = 0; j < order; j++)
                    {
                        for (k = 0; k < order*dwStride; k+=dwStride)
                        {
                            g_Scratch[i][vertexcount][0] = data[k+0]; 
                            g_Scratch[i][vertexcount][1] = data[k+1];
                            g_Scratch[i][vertexcount][2] = data[k+2]; 
                            g_Scratch[i][vertexcount][3] = data[k+3]; 
                            vertexcount++;
                        }
                        data+=pitch;
                    }
                    break;
                }
            }
        }
    }

    //conversions not necessary for linear maps.
    if (m_dwOrder > 1)
    {
        switch(m_PatchData.basis){
        case NV_PATCH_BASIS_BEZIER:
            //convert data inline from BSpline to Scratch.
            break;
        case NV_PATCH_BASIS_BSPLINE:
            //convert basis inline from BSpline to Scratch.
            convertBsplineToBezier();
            break;
        case NV_PATCH_BASIS_CATMULL_ROM:
            ASSERT(m_dwOrder == 3);   //we only ever expect a cubic catmull rom here.
            //convert basis inline from Catmul Rom to Scratch.
            convertCatmullRomToBezier();
            break;
        }
    }
}

const int trilookup_1[] = {2, 1, 0};
const int trilookup_3[] = {12,9,8,6,5,4,3,2,1,0};
const int trilookup_5[] = {30,25,24,20,19,18,15,14,13,12,10,9,8,7,6,5,4,3,2,1,0};

void CPatch::copyDataToScratchTri(DWORD offsetu, DWORD offsetv)
{
    DWORD v,i,j,pitch;
    float *data;
    DWORD evalEnables, dwOffset, dwStream, dwStride, vertex;
    DWORD order;
    order = m_dwOrder+1;
    int *lookup;
    DWORD count = 0;
    evalEnables = m_PatchData.evalEnables;
    CDevice *pDevice = g_pDevice;
    VertexShader *pVShader = pDevice->m_pVertexShader;

    for (v = 0; v < VERTEXSHADER_SLOTS; v++){

        i = SlotToAttribute(v);
        if (i == -1)
        {
            continue;
        }

        if((evalEnables & (1<<i)) && pVShader->Slot[v].SizeAndType != SIZEANDTYPE_DISABLED){
            dwStream = pVShader->Slot[v].StreamIndex;

            if (g_Stream[dwStream].pVertexBuffer != NULL) {
                data = (float*)GetDataFromResource(g_Stream[dwStream].pVertexBuffer);
                dwOffset = (offsetv*getWidth() + offsetu) + m_dwVertexOffset;
                dwStride = g_Stream[dwStream].Stride >> 2;
                data += dwOffset * dwStride;
                data += (pVShader->Slot[v].Offset >> 0x2);
                pitch = getStride()*dwStride; //in vertices
                switch(order){
                    case 2: lookup = (int*)trilookup_1; count = 3;  break;    //linear
                    case 4: lookup = (int*)trilookup_3; count = 10; break;    //cubic
                    case 6: lookup = (int*)trilookup_5; count = 21; break;    //quintic
                    default: nvAssert(0);                   //shouldn't ever be here.
                }
                switch(m_PatchData.maps[i].Originaltype) {
                case NV_PATCH_VERTEX_FORMAT_FLOAT_1:
                    for(j=0; j < count; j++){
                        vertex = lookup[j];
                        g_Scratch[i][vertex][0] = data[0];   g_Scratch[i][vertex][1] = 0.0;
                        g_Scratch[i][vertex][2] = 0.0;       g_Scratch[i][vertex][3] = 1.0;
                        data+=dwStride;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_2:
                    for(j=0; j < count; j++){
                        vertex = lookup[j];
                        g_Scratch[i][vertex][0] = data[0];   g_Scratch[i][vertex][1] = data[1];
                        g_Scratch[i][vertex][2] = 0.0;       g_Scratch[i][vertex][3] = 1.0;
                        data+=dwStride;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_3:
                    for(j=0; j < count; j++){
                        vertex = lookup[j];
                        g_Scratch[i][vertex][0] = data[0];   g_Scratch[i][vertex][1] = data[1];
                        g_Scratch[i][vertex][2] = data[2];   g_Scratch[i][vertex][3] = 1.0;
                        data+=dwStride;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_FLOAT_4:
                    for(j=0; j < count; j++){
                        vertex = lookup[j];
                        g_Scratch[i][vertex][0] = data[0];   g_Scratch[i][vertex][1] = data[1];
                        g_Scratch[i][vertex][2] = data[2];   g_Scratch[i][vertex][3] = data[3];
                        data+=dwStride;
                    }
                    break;
                case NV_PATCH_VERTEX_FORMAT_UBYTE:
                case NV_PATCH_VERTEX_FORMAT_D3DCOLOR:
                    for(j=0; j < count; j++){
                        vertex = lookup[j];
                        g_Scratch[i][vertex][0] = ((VIEW_AS_DWORD(data[0])&0x00ff0000)>>16)/255.0;
                        g_Scratch[i][vertex][1] = ((VIEW_AS_DWORD(data[0])&0x0000ff00)>>8 )/255.0;
                        g_Scratch[i][vertex][2] = ((VIEW_AS_DWORD(data[0])&0x000000ff)>>0 )/255.0;
                        g_Scratch[i][vertex][3] = ((VIEW_AS_DWORD(data[0])&0xff000000)>>24)/255.0;                                             
                        data+=dwStride;
                    }
                    break;
                default:
                    nvAssert(0);
                }
            }
        }
    }
}

__inline void catrom2bez3(float *in, int stride) {

    float in1_1x,in1_1y,in1_1z,in1_1w;
    float in0_1x,in0_1y,in0_1z,in0_1w;
    float in2_1x,in2_1y,in2_1z,in2_1w;

    in1_1x = (1.0/6.0)*in[1*stride+0];
    in1_1y = (1.0/6.0)*in[1*stride+1];
    in1_1z = (1.0/6.0)*in[1*stride+2];
    in1_1w = (1.0/6.0)*in[1*stride+3];
    in0_1x = (1.0/6.0)*in[0*stride+0];
    in0_1y = (1.0/6.0)*in[0*stride+1];
    in0_1z = (1.0/6.0)*in[0*stride+2];
    in0_1w = (1.0/6.0)*in[0*stride+3];
    in2_1x = in[2*stride+0];
    in2_1y = in[2*stride+1];
    in2_1z = in[2*stride+2];
    in2_1w = in[2*stride+3];

    in[0*stride+0] = in[1*stride+0];
    in[0*stride+1] = in[1*stride+1];
    in[0*stride+2] = in[1*stride+2];
    in[0*stride+3] = in[1*stride+3];
    in[1*stride+0] = -in0_1x + in[1*stride+0] +  (1.0/6.0)*in[2*stride+0];
    in[1*stride+1] = -in0_1y + in[1*stride+1] +  (1.0/6.0)*in[2*stride+1];
    in[1*stride+2] = -in0_1z + in[1*stride+2] +  (1.0/6.0)*in[2*stride+2];
    in[1*stride+3] = -in0_1w + in[1*stride+3] +  (1.0/6.0)*in[2*stride+3];
    in[2*stride+0] =  in1_1x + in[2*stride+0] + -(1.0/6.0)*in[3*stride+0];
    in[2*stride+1] =  in1_1y + in[2*stride+1] + -(1.0/6.0)*in[3*stride+1];
    in[2*stride+2] =  in1_1z + in[2*stride+2] + -(1.0/6.0)*in[3*stride+2];
    in[2*stride+3] =  in1_1w + in[2*stride+3] + -(1.0/6.0)*in[3*stride+3];
    in[3*stride+0] = in2_1x;
    in[3*stride+1] = in2_1y;
    in[3*stride+2] = in2_1z;
    in[3*stride+3] = in2_1w;

}

__inline void bsp2bez5(float *in, int stride) {
    float in2_66x,in2_66y,in2_66z,in2_66w;
    float in3_66x,in3_66y,in3_66z,in3_66w;
    float in1_1x,in1_1y,in1_1z,in1_1w;
    float in2_48x,in2_48y,in2_48z,in2_48w;
    float in2_36x,in2_36y,in2_36z,in2_36w;

    in2_66x = (66.0f/120.0f)*in[2*stride+0]; in2_66y = (66.0f/120.0f)*in[2*stride+1];
    in2_66z = (66.0f/120.0f)*in[2*stride+2]; in2_66w = (66.0f/120.0f)*in[2*stride+3];
    in3_66x = (66.0f/120.0f)*in[3*stride+0]; in3_66y = (66.0f/120.0f)*in[3*stride+1];
    in3_66z = (66.0f/120.0f)*in[3*stride+2]; in3_66w = (66.0f/120.0f)*in[3*stride+3];
    in1_1x =  (1.0f/120.0f)*in[1*stride+0];  in1_1y  = (1.0f/120.0f)*in[1*stride+1];
    in1_1z =  (1.0f/120.0f)*in[1*stride+2];  in1_1w  = (1.0f/120.0f)*in[1*stride+3];
    in2_48x = (48.0f/120.0f)*in[2*stride+0]; in2_48y =  (48.0f/120.0f)*in[2*stride+1];
    in2_48z = (48.0f/120.0f)*in[2*stride+2]; in2_48w = (48.0f/120.0f)*in[2*stride+3];
    in2_36x = (36.0f/120.0f)*in[2*stride+0]; in2_36y = (36.0f/120.0f)*in[2*stride+1];
    in2_36z = (36.0f/120.0f)*in[2*stride+2]; in2_36w = (36.0f/120.0f)*in[2*stride+3];

    //in[0] = (1.0f/120.0f)*in[0] + (26.0f/120.0f)*in[1]          + in2_66  + (26.0f/120.0f)*in[3]         + ( 1.0f/120.0f)*in[4];
    in[0] = (1.0f/120.0f)*in[0]   + (26.0f/120.0f)*in[1*stride+0] + in2_66x + (26.0f/120.0f)*in[3*stride+0] + ( 1.0f/120.0f)*in[4*stride+0];
    in[1] = (1.0f/120.0f)*in[1]   + (26.0f/120.0f)*in[1*stride+1] + in2_66y + (26.0f/120.0f)*in[3*stride+1] + ( 1.0f/120.0f)*in[4*stride+1];
    in[2] = (1.0f/120.0f)*in[2]   + (26.0f/120.0f)*in[1*stride+2] + in2_66z + (26.0f/120.0f)*in[3*stride+2] + ( 1.0f/120.0f)*in[4*stride+2];
    in[3] = (1.0f/120.0f)*in[3]   + (26.0f/120.0f)*in[1*stride+3] + in2_66w + (26.0f/120.0f)*in[3*stride+3] + ( 1.0f/120.0f)*in[4*stride+3];

    //move this up here to avoid conflicts on in place operations -- this ONLY works because pt5 is only used in the last pt calc and no where else
    //in[5] =         ( 1.0f/120.0f)*in[1]          + (26.0f/120.0f)*in[2]          + in3_66  + (26.0f/120.0f)*in[4]          + (1.0f/120.0f)*in[5];
    in[5*stride+0] =  in1_1x + (26.0f/120.0f)*in[2*stride+0] + in3_66x + (26.0f/120.0f)*in[4*stride+0] + (1.0f/120.0f)*in[5*stride+0];
    in[5*stride+1] =  in1_1y + (26.0f/120.0f)*in[2*stride+1] + in3_66y + (26.0f/120.0f)*in[4*stride+1] + (1.0f/120.0f)*in[5*stride+1];
    in[5*stride+2] =  in1_1z + (26.0f/120.0f)*in[2*stride+2] + in3_66z + (26.0f/120.0f)*in[4*stride+2] + (1.0f/120.0f)*in[5*stride+2];
    in[5*stride+3] =  in1_1w + (26.0f/120.0f)*in[2*stride+3] + in3_66w + (26.0f/120.0f)*in[4*stride+3] + (1.0f/120.0f)*in[5*stride+3];

    //in[1] =         (16.0f/120.0f)*in[1]          + in2_66  + (36.0f/120.0f)*in[3]          + ( 2.0f/120.0f)*in[4];
    in[1*stride+0] =  (16.0f/120.0f)*in[1*stride+0] + in2_66x + (36.0f/120.0f)*in[3*stride+0] + ( 2.0f/120.0f)*in[4*stride+0];
    in[1*stride+1] =  (16.0f/120.0f)*in[1*stride+1] + in2_66y + (36.0f/120.0f)*in[3*stride+1] + ( 2.0f/120.0f)*in[4*stride+1];
    in[1*stride+2] =  (16.0f/120.0f)*in[1*stride+2] + in2_66z + (36.0f/120.0f)*in[3*stride+2] + ( 2.0f/120.0f)*in[4*stride+2];
    in[1*stride+3] =  (16.0f/120.0f)*in[1*stride+3] + in2_66w + (36.0f/120.0f)*in[3*stride+3] + ( 2.0f/120.0f)*in[4*stride+3];

    //in[2] =         ( 8.0f/120.0f)*in[1]          + (60.0f/120.0f)*in[2]          + (48.0f/120.0f)*in[3]          + ( 4.0f/120.0f)*in[4];
    in[2*stride+0] =  in1_1x*8 + (60.0f/120.0f)*in[2*stride+0] + (48.0f/120.0f)*in[3*stride+0] + ( 4.0f/120.0f)*in[4*stride+0];
    in[2*stride+1] =  in1_1y*8 + (60.0f/120.0f)*in[2*stride+1] + (48.0f/120.0f)*in[3*stride+1] + ( 4.0f/120.0f)*in[4*stride+1];
    in[2*stride+2] =  in1_1z*8 + (60.0f/120.0f)*in[2*stride+2] + (48.0f/120.0f)*in[3*stride+2] + ( 4.0f/120.0f)*in[4*stride+2];
    in[2*stride+3] =  in1_1w*8 + (60.0f/120.0f)*in[2*stride+3] + (48.0f/120.0f)*in[3*stride+3] + ( 4.0f/120.0f)*in[4*stride+3];

    //in[3] =         ( 4.0f/120.0f)*in[1]          + (48.0f/120.0f)*in[2]          + (60.0f/120.0f)*in[3]          + ( 8.0f/120.0f)*in[4];
    in[3*stride+0] =  in1_1x*4 + in2_48x + (60.0f/120.0f)*in[3*stride+0] + ( 8.0f/120.0f)*in[4*stride+0];
    in[3*stride+1] =  in1_1y*4 + in2_48y + (60.0f/120.0f)*in[3*stride+1] + ( 8.0f/120.0f)*in[4*stride+1];
    in[3*stride+2] =  in1_1z*4 + in2_48z + (60.0f/120.0f)*in[3*stride+2] + ( 8.0f/120.0f)*in[4*stride+2];
    in[3*stride+3] =  in1_1w*4 + in2_48w + (60.0f/120.0f)*in[3*stride+3] + ( 8.0f/120.0f)*in[4*stride+3];

    //in[4] =         ( 2.0f/120.0f)*in[1]          + (36.0f/120.0f)*in[2]          + in3_66  + (16.0f/120.0f)*in[4];
    in[4*stride+0] =  in1_1x*2 + in2_36x + in3_66x + (16.0f/120.0f)*in[4*stride+0];
    in[4*stride+1] =  in1_1y*2 + in2_36y + in3_66y + (16.0f/120.0f)*in[4*stride+1];
    in[4*stride+2] =  in1_1z*2 + in2_36z + in3_66z + (16.0f/120.0f)*in[4*stride+2];
    in[4*stride+3] =  in1_1w*2 + in2_36w + in3_66w + (16.0f/120.0f)*in[4*stride+3];
}

//stride = 4 or 16;
// 4 ---> traverses across a row
//16 ---> traverses down a column
__inline void bsp2bez3(float *in, int stride) {
    float in1_4x,in1_4y,in1_4z,in1_4w;
    float in2_4x,in2_4y,in2_4z,in2_4w;
    float in1_2x,in1_2y,in1_2z,in1_2w;
    float in1_1x,in1_1y,in1_1z,in1_1w;

    in1_4x = (4.0f/6.0f) * in[stride+0];
    in1_4y = (4.0f/6.0f) * in[stride+1];
    in1_4z = (4.0f/6.0f) * in[stride+2];
    in1_4w = (4.0f/6.0f) * in[stride+3];

    in2_4x = (4.0f/6.0f) * in[2*stride+0];
    in2_4y = (4.0f/6.0f) * in[2*stride+1];
    in2_4z = (4.0f/6.0f) * in[2*stride+2];
    in2_4w = (4.0f/6.0f) * in[2*stride+3];

    in1_2x = (2.0f/6.0f) * in[stride+0];
    in1_2y = (2.0f/6.0f) * in[stride+1];
    in1_2z = (2.0f/6.0f) * in[stride+2];
    in1_2w = (2.0f/6.0f) * in[stride+3];

    in1_1x = (1.0f/6.0f) * in[stride+0];
    in1_1y = (1.0f/6.0f) * in[stride+1];
    in1_1z = (1.0f/6.0f) * in[stride+2];
    in1_1w = (1.0f/6.0f) * in[stride+3];

    in[0] = (1.0f/6.0f)*in[0] + in1_4x + (1.0f/6.0f) * in[2*stride+0];           //x
    in[1] = (1.0f/6.0f)*in[1] + in1_4y + (1.0f/6.0f) * in[2*stride+1];           //y
    in[2] = (1.0f/6.0f)*in[2] + in1_4z + (1.0f/6.0f) * in[2*stride+2];           //z
    in[3] = (1.0f/6.0f)*in[3] + in1_4w + (1.0f/6.0f) * in[2*stride+3];           //w

    in[stride+0] =              in1_4x + (2.0f/6.0f) * in[2*stride+0];       //x
    in[stride+1] =              in1_4y + (2.0f/6.0f) * in[2*stride+1];       //y
    in[stride+2] =              in1_4z + (2.0f/6.0f) * in[2*stride+2];       //z
    in[stride+3] =              in1_4w + (2.0f/6.0f) * in[2*stride+3];       //w

    in[2*stride+0] =            in1_2x + in2_4x;                         //x
    in[2*stride+1] =            in1_2y + in2_4y;                         //y
    in[2*stride+2] =            in1_2z + in2_4z;                         //z
    in[2*stride+3] =            in1_2w + in2_4w;                         //w

    in[3*stride+0] =            in1_1x + in2_4x + (1.0f/6.0f)*in[3*stride+0];    //x
    in[3*stride+1] =            in1_1y + in2_4y + (1.0f/6.0f)*in[3*stride+1];    //y
    in[3*stride+2] =            in1_1z + in2_4z + (1.0f/6.0f)*in[3*stride+2];    //z
    in[3*stride+3] =            in1_1w + in2_4w + (1.0f/6.0f)*in[3*stride+3];    //w
}

void CPatch::convertCatmullRomToBezier(){
    int i;
    for(i=0; i < NV_PATCH_NUMBER_OF_ATTRIBS; i++){
        if(m_PatchData.evalEnables & (1<<i)){
            switch(m_dwOrder){
            case 1:
            case 2:
            case 4:
            case 5:
                nvAssert(0);    //we shouldn't ever get these.
                break;
            case 3:
                //convert cubic bezier patch.
                catrom2bez3(&g_Scratch[i][0][0],  4);  //row1
                catrom2bez3(&g_Scratch[i][4][0],  4);  //row2
                catrom2bez3(&g_Scratch[i][8][0],  4);  //row3
                catrom2bez3(&g_Scratch[i][12][0], 4);  //row4
                catrom2bez3(&g_Scratch[i][0][0], 16);  //column 1
                catrom2bez3(&g_Scratch[i][1][0], 16);  //column 2
                catrom2bez3(&g_Scratch[i][2][0], 16);  //column 3
                catrom2bez3(&g_Scratch[i][3][0], 16);  //column 4
                break;
            }
        }
    }
}

void CPatch::convertBsplineToBezier(){

    int i;
    for(i=0; i < NV_PATCH_NUMBER_OF_ATTRIBS; i++){
        if(m_PatchData.evalEnables & (1<<i)){
            switch(m_dwOrder){
            case 3:
                //convert cubic bezier patch.
                bsp2bez3(&g_Scratch[i][0][0],  4);  //row1
                bsp2bez3(&g_Scratch[i][4][0],  4);  //row2
                bsp2bez3(&g_Scratch[i][8][0],  4);  //row3
                bsp2bez3(&g_Scratch[i][12][0], 4);  //row4
                bsp2bez3(&g_Scratch[i][0][0], 16);  //column 1
                bsp2bez3(&g_Scratch[i][1][0], 16);  //column 2
                bsp2bez3(&g_Scratch[i][2][0], 16);  //column 3
                bsp2bez3(&g_Scratch[i][3][0], 16);  //column 4
                break;
            case 5:
                //convert quintic bezier patch.
                bsp2bez5(&g_Scratch[i][0][0],  4);  //row1
                bsp2bez5(&g_Scratch[i][6][0],  4);  //row2
                bsp2bez5(&g_Scratch[i][12][0], 4);  //row3
                bsp2bez5(&g_Scratch[i][18][0], 4);  //row4
                bsp2bez5(&g_Scratch[i][24][0], 4);  //row1
                bsp2bez5(&g_Scratch[i][30][0], 4);  //row2
                bsp2bez5(&g_Scratch[i][0][0],  24);  //column1
                bsp2bez5(&g_Scratch[i][1][0],  24);  //column2
                bsp2bez5(&g_Scratch[i][2][0],  24);  //column3
                bsp2bez5(&g_Scratch[i][3][0],  24);  //column4
                bsp2bez5(&g_Scratch[i][4][0],  24);  //column5
                bsp2bez5(&g_Scratch[i][5][0],  24);  //column6
                break;
            default:
                nvAssert(0);
                break;
            }
        }
    }
}

} // end of namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\nv32.h ===
/***************************************************************************\
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     *|
|*     international laws.  Users and possessors of this source code are     *|
|*     hereby granted a nonexclusive,  royalty-free copyright license to     *|
|*     use this code in individual and commercial software.                  *|
|*                                                                           *|
|*     Any use of this source code must include,  in the user documenta-     *|
|*     tion and  internal comments to the code,  notices to the end user     *|
|*     as follows:                                                           *|
|*                                                                           *|
|*       Copyright 1993-1998 NVIDIA, Corporation.  All rights reserved.      *|
|*                                                                           *|
|*     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     *|
|*     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     *|
|*     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     *|
|*     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     *|
|*     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     *|
|*     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     *|
|*     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     *|
|*     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     *|
|*     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     *|
|*     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     *|
|*     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     *|
|*                                                                           *|
|*     U.S. Government  End  Users.   This source code  is a "commercial     *|
|*     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     *|
|*     consisting  of "commercial  computer  software"  and  "commercial     *|
|*     computer  software  documentation,"  as such  terms  are  used in     *|
|*     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     *|
|*     ment only as  a commercial end item.   Consistent with  48 C.F.R.     *|
|*     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     *|
|*     all U.S. Government End Users  acquire the source code  with only     *|
|*     those rights set forth herein.                                        *|
|*                                                                           *|
 \***************************************************************************/



 /***************************************************************************\
|*                                                                           *|
|*                         NV Architecture Interface                         *|
|*                                                                           *|
|*  <nv32.h> defines a 32-bit wide naming convention  for the functionality  *|
|*  of NVIDIA's Unified Media Architecture (TM).                             *|
|*                                                                           *|
 \***************************************************************************/


#ifndef NV32_INCLUDED
#define NV32_INCLUDED
#ifdef __cplusplus
extern "C" {
#endif

#include <nvtypes.h>


 /***************************************************************************\
|*                                NV Classes                                 *|
 \***************************************************************************/

/*
 * These structures indicate the offsets of hardware registers corresponding to
 * the methods of each class.  Since the first 256 bytes of each subchannel is
 * the NvControlPio registers, the hexadecimal offsets in comments start at
 * 0x100.
 */

/* class NV01_ROOT */
#define  NV01_ROOT                                                 (0x00000000)
/* NvNotification[] fields and values */
#define NV000_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv000Typedef, Nv01Root;
#define NV000_TYPEDEF                                              Nv01Root
/* obsolete stuff */
#define Nv1Root                                                    Nv01Root
#define nv1Root                                                    Nv01Root
#define nv01Root                                                   Nv01Root


/* class NV01_CLASS */
#define  NV01_CLASS                                                (0x00000001)
/* NvNotification[] fields and values */
#define NV001_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv001Typedef, Nv01Class;
#define NV001_TYPEDEF                                              Nv01Class
/* obsolete stuff */
#define  NV1_CLASS                                                 (0x00000001)
#define Nv1Class                                                   Nv01Class
#define nv1Class                                                   Nv01Class
#define nv01Class                                                  Nv01Class


/* class NV01_CONTEXT_DMA_FROM_MEMORY */
#define  NV01_CONTEXT_DMA_FROM_MEMORY                              (0x00000002)
/* NvNotification[] fields and values */
#define NV002_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv002Typedef, Nv01ContextDmaFromMemory;
#define  NV002_TYPEDEF                                 Nv01ContextDmaFromMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_FROM_MEMORY                               (0x00000002)
#define  NV01_CONTEXT_DMA                                          (0x00000002)
#define  Nv1ContextDmaFromMemory                       Nv01ContextDmaFromMemory
#define  nv1ContextDmaFromMemory                       Nv01ContextDmaFromMemory
#define  nv01ContextDmaFromMemory                      Nv01ContextDmaFromMemory


/* class NV01_CONTEXT_DMA_TO_MEMORY */
#define  NV01_CONTEXT_DMA_TO_MEMORY                                (0x00000003)
/* NvNotification[] fields and values */
#define NV003_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv003Typedef, Nv01ContextDmaToMemory;
#define  NV003_TYPEDEF                                   Nv01ContextDmaToMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_TO_MEMORY                                 (0x00000003)
#define  Nv1ContextDmaToMemory                           Nv01ContextDmaToMemory
#define  nv1ContextDmaToMemory                           Nv01ContextDmaToMemory
#define  nv01ContextDmaToMemory                          Nv01ContextDmaToMemory


/* class NV01_TIMER */
#define  NV01_TIMER                                                (0x00000004)
/* NvNotification[] elements */
#define NV004_NOTIFIERS_NOTIFY                                     (0)
#define NV004_NOTIFIERS_SET_ALARM_NOTIFY                           (1)
/* NvNotification[] fields and values */
#define NV004_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV004_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV004_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV004_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV004_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV004_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;            /* ignored                           0100-0103*/
 NvV32 Notify;                 /* NV004_NOTIFY_*                    0104-0107*/
 NvV32 StopTransfer;           /* NV004_STOP_TRANSFER_VALUE         0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;  /* NV01_CONTEXT_DMA                  0180-0183*/
 NvV32 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  NvU32 nanoseconds[2];        /* nsec since 1970-01-01 0=immediate    0-   7*/
 } SetAlarmTime;               /* end of method                         -0307*/
 NvV32 Reserved02[0x001];
 NvV32 SetAlarmNotify;         /* NV004_SET_ALARM_NOTIFY_*          030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv004Typedef, Nv01Timer;
#define NV004_TYPEDEF                                              Nv01Timer
/* dma method offsets, fields, and values */
#define NV004_SET_OBJECT                                           (0x00000000)
#define NV004_NO_OPERATION                                         (0x00000100)
#define NV004_NOTIFY                                               (0x00000104)
#define NV004_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV004_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV004_STOP_TRANSFER                                        (0x00000108)
#define NV004_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV004_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV004_SET_ALARM_TIME                                       (0x00000300)
#define NV004_SET_ALARM_NOTIFY                                     (0x0000030C)
#define NV004_SET_ALARM_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NV004_SET_ALARM_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
/* obsolete stuff */
#define Nv1Timer                                                   Nv01Timer
#define nv1Timer                                                   Nv01Timer
#define nv01Timer                                                  Nv01Timer


/* class NV01_EVENT */
#define  NV01_EVENT                                                (0x00000005)
/* NvNotification[] fields and values */
#define NV003_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct _Nv005Typedef{
 NvV32 Reserved00[0x7c0];
} Nv005Typedef, Nv01Event;
#define NV005_TYPEDEF                                              Nv01Event
/* obsolete stuff */
#define NV1_TIMER                                                  (0x00000004)
#define Nv1Event                                                   Nv01Event
#define nv1Event                                                   Nv01Event
#define nv01Event                                                  Nv01Event


typedef NvV32 Nv006Typedef;

typedef NvV32 Nv007Typedef;

typedef NvV32 Nv008Typedef;

typedef NvV32 Nv009Typedef;

typedef NvV32 Nv00aTypedef;

typedef NvV32 Nv00bTypedef;

typedef NvV32 Nv00cTypedef;

typedef NvV32 Nv00dTypedef;

typedef NvV32 Nv00eTypedef;

typedef NvV32 Nv00fTypedef;

typedef NvV32 Nv010Typedef;

typedef NvV32 Nv011Typedef;


/* class NV01_CONTEXT_BETA */
#define  NV01_CONTEXT_BETA                                         (0x00000012)
/* NvNotification[] elements */
#define NV012_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV012_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV012_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV012_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV012_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV012_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV012_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV012_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetBeta1d31;             /* S1d31 beta value                 0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv012Typedef, Nv01ContextBeta;
#define NV012_TYPEDEF                                           Nv01ContextBeta
/* dma method offsets, fields, and values */
#define NV012_SET_OBJECT                                           (0x00000000)
#define NV012_NO_OPERATION                                         (0x00000100)
#define NV012_NOTIFY                                               (0x00000104)
#define NV012_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV012_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV012_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV012_SET_BETA_1D31                                        (0x00000300)
/* obsolete stuff */
#define NV01_BETA_SOLID                                            (0x00000012)
#define NV1_BETA_SOLID                                             (0x00000012)
#define Nv01BetaSolid                                           Nv01ContextBeta
#define nv01BetaSolid                                           Nv01ContextBeta
#define Nv1BetaSolid                                            Nv01ContextBeta
#define nv1BetaSolid                                            Nv01ContextBeta

typedef NvV32 Nv013Typedef;

typedef NvV32 Nv014Typedef;

typedef NvV32 Nv015Typedef;

typedef NvV32 Nv016Typedef;


/* class NV01_CONTEXT_COLOR_KEY */
#define  NV01_CONTEXT_COLOR_KEY                                    (0x00000017)
/* NvNotification[] elements */
#define NV017_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV017_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV017_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV017_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV017_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV017_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV017_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV017_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV017_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetColor;                /* color key value                  0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv017Typedef, Nv01ContextColorKey;
#define NV017_TYPEDEF                                       Nv01ContextColorKey
/* dma method offsets, fields, and values */
#define NV017_SET_OBJECT                                           (0x00000000)
#define NV017_NO_OPERATION                                         (0x00000100)
#define NV017_NOTIFY                                               (0x00000104)
#define NV017_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV017_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV017_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV017_SET_COLOR_FORMAT                                     (0x00000300)
#define NV017_SET_COLOR_FORMAT_LE_X16A8Y8                          (0x00000001)
#define NV017_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV017_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV017_SET_COLOR                                            (0x00000304)
/* obsolete stuff */
#define NV01_IMAGE_SOLID                                           (0x00000017)
#define NV1_IMAGE_SOLID                                            (0x00000017)
#define Nv01ImageSolid                                      Nv01ContextColorKey
#define nv01ImageSolid                                      Nv01ContextColorKey
#define Nv1ImageSolid                                       Nv01ContextColorKey
#define nv1ImageSolid                                       Nv01ContextColorKey
#define nv01ContextColorKey                                 Nv01ContextColorKey


/* class NV01_CONTEXT_PATTERN */
#define  NV01_CONTEXT_PATTERN                                      (0x00000018)
/* NvNotification[] elements */
#define NV018_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV018_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV018_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV018_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV018_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV018_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV018_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV018_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV018_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV018_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 SetMonochromeShape;      /* NV018_SET_MONOCHROME_SHAPE_*     0308-030b*/
 NvV32 Reserved02[0x001];
 NvV32 SetMonochromeColor0;     /* color of 0 pixels                0310-0313*/
 NvV32 SetMonochromeColor1;     /* color of 1 pixels                0314-0317*/
 NvV32 SetMonochromePattern0;   /* first  32 bits of pattern data   0318-031b*/
 NvV32 SetMonochromePattern1;   /* second 32 bits of pattern data   031c-031f*/
 NvV32 Reserved03[0x738];
} Nv018Typedef, Nv01ContextPattern;
#define NV018_TYPEDEF                                        Nv01ContextPattern
/* dma method offsets, fields, and values */
#define NV018_SET_OBJECT                                           (0x00000000)
#define NV018_NO_OPERATION                                         (0x00000100)
#define NV018_NOTIFY                                               (0x00000104)
#define NV018_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV018_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV018_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV018_SET_COLOR_FORMAT                                     (0x00000300)
#define NV018_SET_COLOR_FORMAT_LE_X16A8Y8                          (0x00000001)
#define NV018_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV018_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV018_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV018_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV018_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV018_SET_MONOCHROME_SHAPE                                 (0x00000308)
#define NV018_SET_MONOCHROME_SHAPE_8X_8Y                           (0x00000000)
#define NV018_SET_MONOCHROME_SHAPE_64X_1Y                          (0x00000001)
#define NV018_SET_MONOCHROME_SHAPE_1X_64Y                          (0x00000002)
#define NV018_SET_MONOCHORME_COLOR0                                (0x00000310)
#define NV018_SET_MONOCHORME_COLOR1                                (0x00000314)
#define NV018_SET_MONOCHORME_PATTERN0                              (0x00000318)
#define NV018_SET_MONOCHORME_PATTERN1                              (0x0000031C)
/* obsolete stuff */
#define NV01_IMAGE_PATTERN                                         (0x00000018)
#define NV1_IMAGE_PATTERN                                          (0x00000018)
#define Nv01ImagePattern                                     Nv01ContextPattern
#define nv01ImagePattern                                     Nv01ContextPattern
#define Nv1ImagePattern                                      Nv01ContextPattern
#define nv1ImagePattern                                      Nv01ContextPattern
#define nv01ContextPattern                                   Nv01ContextPattern


/* class NV01_CONTEXT_CLIP_RECTANGLE */
#define  NV01_CONTEXT_CLIP_RECTANGLE                               (0x00000019)
/* NvNotification[] elements */
#define NV019_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV019_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV019_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV019_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV019_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV019_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV019_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV019_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetPoint;                /* y_x S16_S16                      0300-0303*/
 NvV32 SetSize;                 /* height_width U16_U16             0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv019Typedef, Nv01ContextClipRectangle;
#define NV019_TYPEDEF                                  Nv01ContextClipRectangle
/* dma method offsets, fields, and values */
#define NV019_SET_OBJECT                                           (0x00000000)
#define NV019_NO_OPERATION                                         (0x00000100)
#define NV019_NOTIFY                                               (0x00000104)
#define NV019_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV019_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV019_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV019_SET_POINT                                            (0x00000300)
#define NV019_SET_POINT_X                                          15:0
#define NV019_SET_POINT_Y                                          31:16
#define NV019_SET_SIZE                                             (0x00000304)
#define NV019_SET_SIZE_WIDTH                                       15:0
#define NV019_SET_SIZE_HEIGHT                                      31:16
/* obsolete stuff */
#define NV01_IMAGE_BLACK_RECTANGLE                                 (0x00000019)
#define NV1_IMAGE_BLACK_RECTANGLE                                  (0x00000019)
#define Nv01ImageBlackRectangle                        Nv01ContextClipRectangle
#define nv01ImageBlackRectangle                        Nv01ContextClipRectangle
#define Nv1ImageBlackRectangle                         Nv01ContextClipRectangle
#define nv1ImageBlackRectangle                         Nv01ContextClipRectangle
#define nv01ContextClipRectangle                       Nv01ContextClipRectangle

typedef NvV32 Nv01aTypedef;

typedef NvV32 Nv01bTypedef;


/* class NV01_RENDER_SOLID_LIN */
#define  NV01_RENDER_SOLID_LIN                                     (0x0000001C)
/* NvNotification[] elements */
#define NV01C_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01C_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01C_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01C_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point0;                 /* y_x S16_S16 in pixels               0-   3*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               4-   7*/
 } Lin[16];                     /* end of aliased methods in array      -047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 point0X;                /* in pixels, 0 at left                0-   3*/
  NvS32 point0Y;                /* in pixels, 0 at top                 4-   7*/
  NvS32 point1X;                /* in pixels, 0 at left                8-   b*/
  NvS32 point1Y;                /* in pixels, 0 at top                 c-   f*/
 } Lin32[8];                    /* end of aliased methods in array      -04ff*/
 NvV32 PolyLin[32];             /* y_x S16_S16 in pixels            0500-057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } PolyLin32[16];               /* end of aliased methods in array      -05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorPolyLin[16];            /* end of aliased methods in array      -067f*/
 NvV32 Reserved03[0x660];
} Nv01cTypedef, Nv01RenderSolidLin;
#define NV01C_TYPEDEF                                        Nv01RenderSolidLin
/* dma method offsets, fields, and values */
#define NV01C_SET_OBJECT                                           (0x00000000)
#define NV01C_NO_OPERATION                                         (0x00000100)
#define NV01C_NOTIFY                                               (0x00000104)
#define NV01C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01C_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01C_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01C_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01C_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01C_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01C_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01C_SET_OPERATION                                        (0x000002FC)
#define NV01C_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01C_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01C_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01C_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01C_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01C_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01C_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01C_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01C_COLOR                                                (0x00000304)
#define NV01C_LIN(a)                                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT0(a)                                        (0x00000400\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT0_X                                         15:0
#define NV01C_LIN_POINT0_Y                                         31:16
#define NV01C_LIN_POINT1(a)                                        (0x00000404\
                                                                   +(a)*0x0008)
#define NV01C_LIN_POINT1_X                                         15:0
#define NV01C_LIN_POINT1_Y                                         31:16
#define NV01C_LIN32(a)                                             (0x00000480\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT0_X(a)                                    (0x00000480\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT0_Y(a)                                    (0x00000484\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT1_X(a)                                    (0x00000488\
                                                                   +(a)*0x0010)
#define NV01C_LIN32_POINT1_Y(a)                                    (0x0000048C\
                                                                   +(a)*0x0010)
#define NV01C_POLY_LIN(a)                                          (0x00000500\
                                                                   +(a)*0x0004)
#define NV01C_POLY_LIN_X                                           15:0
#define NV01C_POLY_LIN_Y                                           31:16
#define NV01C_POLY_LIN32(a)                                        (0x00000580\
                                                                   +(a)*0x0008)
#define NV01C_POLY_LIN32_X(a)                                      (0x00000580\
                                                                   +(a)*0x0008)
#define NV01C_POLY_LIN32_Y(a)                                      (0x00000584\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN(a)                                    (0x00000600\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_COLOR(a)                              (0x00000600\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_POINT(a)                              (0x00000604\
                                                                   +(a)*0x0008)
#define NV01C_COLOR_POLY_LIN_POINT_X                               15:0
#define NV01C_COLOR_POLY_LIN_POINT_Y                               31:16
/* obsolete stuff */
#define Nv1RenderSolidLin                                    Nv01RenderSolidLin
#define nv1RenderSolidLin                                    Nv01RenderSolidLin
#define nv01RenderSolidLin                                   Nv01RenderSolidLin


/* class NV01_RENDER_SOLID_TRIANGLE */
#define  NV01_RENDER_SOLID_TRIANGLE                                (0x0000001D)
/* NvNotification[] elements */
#define NV01D_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01D_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01D_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01D_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x002];
 NvV32 TrianglePoint0;          /* y_x S16_S16 in pixels            0310-0313*/
 NvV32 TrianglePoint1;          /* y_x S16_S16 in pixels            0314-0317*/
 NvV32 TrianglePoint2;          /* y_x S16_S16 in pixels            0318-031b*/
 NvV32 Reserved03[0x001];
 NvS32 Triangle32Point0X;       /* in pixels, 0 at left             0320-0323*/
 NvS32 Triangle32Point0Y;       /* in pixels, 0 at top              0324-0327*/
 NvS32 Triangle32Point1X;       /* in pixels, 0 at left             0328-032b*/
 NvS32 Triangle32Point1Y;       /* in pixels, 0 at top              032c-032f*/
 NvS32 Triangle32Point2X;       /* in pixels, 0 at left             0330-0333*/
 NvS32 Triangle32Point2Y;       /* in pixels, 0 at top              0334-0337*/
 NvV32 Reserved04[0x032];
 NvV32 Trimesh[32];             /* y_x S16_S16 in pixels            0400-047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } Trimesh32[16];               /* end of aliased methods in array      -04ff*/
 struct {                       /* start aliased methods in array   0500-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point0;                 /* y_x S16_S16 in pixels               4-   7*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               8-   b*/
  NvV32 point2;                 /* y_x S16_S16 in pixels               c-   f*/
 } ColorTriangle[8];            /* end of aliased methods in array      -057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorTrimesh[16];            /* end of aliased methods in array      -05ff*/
 NvV32 Reserved05[0x680];
} Nv01dTypedef, Nv01RenderSolidTriangle;
#define NV01D_TYPEDEF                                   Nv01RenderSolidTriangle
/* dma method offsets, fields, and values */
#define NV01D_SET_OBJECT                                           (0x00000000)
#define NV01D_NO_OPERATION                                         (0x00000100)
#define NV01D_NOTIFY                                               (0x00000104)
#define NV01D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01D_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01D_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01D_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01D_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01D_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01D_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01D_SET_OPERATION                                        (0x000002FC)
#define NV01D_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01D_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01D_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01D_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01D_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01D_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01D_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01D_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01D_COLOR                                                (0x00000304)
#define NV01D_TRIANGLE_POINT0                                      (0x00000310)
#define NV01D_TRIANGLE_POINT0_X                                    15:0
#define NV01D_TRIANGLE_POINT0_Y                                    31:16
#define NV01D_TRIANGLE_POINT1                                      (0x00000314)
#define NV01D_TRIANGLE_POINT1_X                                    15:0
#define NV01D_TRIANGLE_POINT1_Y                                    31:16
#define NV01D_TRIANGLE_POINT2                                      (0x00000318)
#define NV01D_TRIANGLE_POINT2_X                                    15:0
#define NV01D_TRIANGLE_POINT2_Y                                    31:16
#define NV01D_TRIANGLE32_POINT0_X                                  (0x00000320)
#define NV01D_TRIANGLE32_POINT0_Y                                  (0x00000324)
#define NV01D_TRIANGLE32_POINT1_X                                  (0x00000328)
#define NV01D_TRIANGLE32_POINT1_Y                                  (0x0000032C)
#define NV01D_TRIANGLE32_POINT2_X                                  (0x00000330)
#define NV01D_TRIANGLE32_POINT2_Y                                  (0x00000334)
#define NV01D_TRIMESH(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
#define NV01D_TRIMESH_X                                            15:0
#define NV01D_TRIMESH_Y                                            31:16
#define NV01D_TRIMESH32(a)                                         (0x00000480\
                                                                   +(a)*0x0008)
#define NV01D_TRIMESH32_X(a)                                       (0x00000480\
                                                                   +(a)*0x0008)
#define NV01D_TRIMESH32_Y(a)                                       (0x00000484\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIANGLE(a)                                    (0x00000500\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_COLOR(a)                              (0x00000500\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT0(a)                             (0x00000504\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT0_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT0_Y                              31:16
#define NV01D_COLOR_TRIANGLE_POINT1(a)                             (0x00000508\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT1_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT1_Y                              31:16
#define NV01D_COLOR_TRIANGLE_POINT2(a)                             (0x0000050C\
                                                                   +(a)*0x0010)
#define NV01D_COLOR_TRIANGLE_POINT2_X                              15:0
#define NV01D_COLOR_TRIANGLE_POINT2_Y                              31:16
#define NV01D_COLOR_TRIMESH(a)                                     (0x00000580\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_COLOR(a)                               (0x00000580\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_POINT(a)                               (0x00000584\
                                                                   +(a)*0x0008)
#define NV01D_COLOR_TRIMESH_POINT_X                                15:0
#define NV01D_COLOR_TRIMESH_POINT_Y                                31:16
/* obsolete stuff */
#define NV1_RENDER_SOLID_TRIANGLE                                  (0x0000001D)
#define Nv1RenderSolidTriangle                          Nv01RenderSolidTriangle
#define nv1RenderSolidTriangle                          Nv01RenderSolidTriangle
#define nv01RenderSolidTriangle                         Nv01RenderSolidTriangle


/* class NV01_RENDER_SOLID_RECTANGLE */
#define  NV01_RENDER_SOLID_RECTANGLE                               (0x0000001E)
/* NvNotification[] elements */
#define NV01E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV01E_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV01E_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* y_x S16_S16                         0-   3*/
  NvV32 size;                   /* height_width U16_U16                4-   7*/
 } Rectangle[16];               /* end of method in array in array      -047f*/
 NvV32 Reserved03[0x6e0];
} Nv01eTypedef, Nv01RenderSolidRectangle;
#define NV01E_TYPEDEF                                  Nv01RenderSolidRectangle
/* dma method offsets, fields, and values */
#define NV01E_SET_OBJECT                                           (0x00000000)
#define NV01E_NO_OPERATION                                         (0x00000100)
#define NV01E_NOTIFY                                               (0x00000104)
#define NV01E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01E_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01E_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV01E_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV01E_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV01E_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV01E_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV01E_SET_OPERATION                                        (0x000002FC)
#define NV01E_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01E_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01E_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01E_SET_COLOR_FORMAT                                     (0x00000300)
#define NV01E_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV01E_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV01E_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV01E_SET_COLOR_FORMAT_LE_X16Y16                           (0x00000004)
#define NV01E_COLOR                                                (0x00000304)
#define NV01E_RECTANGLE(a)                                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_POINT(a)                                   (0x00000400\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_POINT_X                                    15:0
#define NV01E_RECTANGLE_POINT_Y                                    31:16
#define NV01E_RECTANGLE_SIZE(a)                                    (0x00000404\
                                                                   +(a)*0x0008)
#define NV01E_RECTANGLE_SIZE_WIDTH                                 15:0
#define NV01E_RECTANGLE_SIZE_HEIGHT                                31:16
/* obsolete stuff */
#define NV1_RENDER_SOLID_RECTANGLE                                 (0x0000001E)
#define Nv1RenderSolidRectangle                        Nv01RenderSolidRectangle
#define nv1RenderSolidRectangle                        Nv01RenderSolidRectangle
#define nv01RenderSolidRectangle                       Nv01RenderSolidRectangle


/* class NV01_IMAGE_BLIT */
#define  NV01_IMAGE_BLIT                                           (0x0000001F)
/* NvNotification[] elements */
#define NV01F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV01F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV01F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV01F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV01F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV01F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV01F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV01F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurfaceSource; /* NV03_CONTEXT_SURFACE_2D_SOURCE   0198-019b*/
 NvV32 SetContextSurfaceDestin; /* NV03_CONTEXT_SURFACE_2D_DESTINAT 019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV01F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved02[0x73d];
} Nv01fTypedef, Nv01ImageBlit;
#define NV01F_TYPEDEF                                             Nv01ImageBlit
/* dma method offsets, fields, and values */
#define NV01F_SET_OBJECT                                           (0x00000000)
#define NV01F_NO_OPERATION                                         (0x00000100)
#define NV01F_NOTIFY                                               (0x00000104)
#define NV01F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV01F_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV01F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV01F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV01F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV01F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV01F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV01F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV01F_SET_CONTEXT_SURFACE_SOURCE                           (0x00000198)
#define NV01F_SET_CONTEXT_SURFACE_DESTIN                           (0x0000019C)
#define NV01F_SET_OPERATION                                        (0x000002FC)
#define NV01F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV01F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV01F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV01F_CONTROL_POINT_IN                                     (0x00000300)
#define NV01F_CONTROL_POINT_IN_X                                   15:0
#define NV01F_CONTROL_POINT_IN_Y                                   31:16
#define NV01F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV01F_CONTROL_POINT_OUT_X                                  15:0
#define NV01F_CONTROL_POINT_OUT_Y                                  31:16
#define NV01F_SIZE                                                 (0x00000308)
#define NV01F_SIZE_WIDTH                                           15:0
#define NV01F_SIZE_HEIGHT                                          31:16
/* obsolete stuff */
#define NV1_IMAGE_BLIT                                             (0x0000001F)
#define Nv1ImageBlit                                              Nv01ImageBlit
#define nv1ImageBlit                                              Nv01ImageBlit
#define nv01ImageBlit                                             Nv01ImageBlit

typedef NvV32 Nv020Typedef;


/* class NV01_IMAGE_FROM_CPU */
#define  NV01_IMAGE_FROM_CPU                                       (0x00000021)
/* NvNotification[] elements */
#define NV021_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV021_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV021_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV021_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV021_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV021_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV021_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV021_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV021_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV021_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, in pixels  0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, in pixels  030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[32];               /* packed pixel(s) to add to image  0400-047f*/
 NvV32 Reserved03[0x6e0];
} Nv021Typedef, Nv01ImageFromCpu;
#define NV021_TYPEDEF                                          Nv01ImageFromCpu
/* dma method offsets, fields, and values */
#define NV021_SET_OBJECT                                           (0x00000000)
#define NV021_NO_OPERATION                                         (0x00000100)
#define NV021_NOTIFY                                               (0x00000104)
#define NV021_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV021_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV021_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV021_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV021_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV021_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV021_SET_CONTEXT_ROP                                      (0x00000190)
#define NV021_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV021_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV021_SET_OPERATION                                        (0x000002FC)
#define NV021_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV021_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV021_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV021_SET_COLOR_FORMAT                                     (0x00000300)
#define NV021_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV021_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV021_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV021_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV021_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV021_POINT                                                (0x00000304)
#define NV021_POINT_X                                              15:0
#define NV021_POINT_Y                                              31:16
#define NV021_SIZE_OUT                                             (0x00000308)
#define NV021_SIZE_OUT_WIDTH                                       15:0
#define NV021_SIZE_OUT_HEIGHT                                      31:16
#define NV021_SIZE_IN                                              (0x0000030C)
#define NV021_SIZE_IN_WIDTH                                        15:0
#define NV021_SIZE_IN_HEIGHT                                       31:16
#define NV021_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV1_IMAGE_FROM_CPU                                         (0x00000021)
#define Nv1ImageFromCpu                                        Nv01ImageFromCpu
#define nv1ImageFromCpu                                        Nv01ImageFromCpu
#define nv01ImageFromCpu                                       Nv01ImageFromCpu

typedef NvV32 Nv022Typedef;

typedef NvV32 Nv023Typedef;

typedef NvV32 Nv024Typedef;

typedef NvV32 Nv025Typedef;

typedef NvV32 Nv026Typedef;

typedef NvV32 Nv027Typedef;

typedef NvV32 Nv028Typedef;

typedef NvV32 Nv029Typedef;

typedef NvV32 Nv02aTypedef;

typedef NvV32 Nv02bTypedef;

typedef NvV32 Nv02cTypedef;

typedef NvV32 Nv02dTypedef;

typedef NvV32 Nv02eTypedef;

typedef NvV32 Nv02fTypedef;


/* class NV01_NULL */
#define  NV01_NULL                                                 (0x00000030)
/* NvNotification[] fields and values */
#define NV030_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv030Typedef, Nv01Null;
#define NV030_TYPEDEF                                              Nv01Null
/* obsolete stuff */
#define NV1_NULL                                                   (0x00000030)
#define Nv1Null                                                    Nv01Null
#define nv1Null                                                    Nv01Null
#define nv01Null                                                   Nv01Null

typedef NvV32 Nv031Typedef;

typedef NvV32 Nv032Typedef;

typedef NvV32 Nv033Typedef;

typedef NvV32 Nv034Typedef;

typedef NvV32 Nv035Typedef;



/* class NV03_STRETCHED_IMAGE_FROM_CPU */
#define  NV03_STRETCHED_IMAGE_FROM_CPU                             (0x00000036)
/* NvNotification[] elements */
#define NV036_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV036_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV036_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV036_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV036_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV036_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV036_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV036_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV01_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x059];
 NvV32 SetOperation;            /* NV036_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV036_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DeltaDxDu;               /* S12d20 ratio dx/du               0308-030b*/
 NvV32 DeltaDyDv;               /* S12d20 ratio dy/dv               030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv036Typedef, Nv03StretchedImageFromCpu;
#define NV036_TYPEDEF                                 Nv03StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV036_SET_OBJECT                                           (0x00000000)
#define NV036_NO_OPERATION                                         (0x00000100)
#define NV036_NOTIFY                                               (0x00000104)
#define NV036_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV036_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV036_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV036_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV036_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV036_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV036_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV036_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV036_SET_OPERATION                                        (0x000002FC)
#define NV036_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV036_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV036_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV036_SET_COLOR_FORMAT                                     (0x00000300)
#define NV036_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV036_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV036_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV036_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV036_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV036_SIZE_IN                                              (0x00000304)
#define NV036_SIZE_IN_WIDTH                                        15:0
#define NV036_SIZE_IN_HEIGHT                                       31:16
#define NV036_DELTA_DX_DU                                          (0x00000308)
#define NV036_DELTA_DY_DV                                          (0x0000030C)
#define NV036_CLIP_POINT                                           (0x00000310)
#define NV036_CLIP_POINT_X                                         15:0
#define NV036_CLIP_POINT_Y                                         31:16
#define NV036_CLIP_SIZE                                            (0x00000314)
#define NV036_CLIP_SIZE_WIDTH                                      15:0
#define NV036_CLIP_SIZE_HEIGHT                                     31:16
#define NV036_POINT_12D4                                           (0x00000318)
#define NV036_POINT_12D4_X                                         15:0
#define NV036_POINT_12D4_Y                                         31:16
#define NV036_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV3_STRETCHED_IMAGE_FROM_CPU                               (0x00000036)
#define Nv3StretchedImageFromCpu                      Nv03StretchedImageFromCpu
#define nv3StretchedImageFromCpu                      Nv03StretchedImageFromCpu
#define nv03StretchedImageFromCpu                     Nv03StretchedImageFromCpu


/* class NV03_SCALED_IMAGE_FROM_MEMORY */
#define  NV03_SCALED_IMAGE_FROM_MEMORY                             (0x00000037)
/* NvNotification[] elements */
#define NV037_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV037_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV037_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV037_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV037_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV037_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV037_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV037_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0194-0197*/
 NvV32 Reserved01[0x05A];
 NvV32 SetColorFormat;          /* NV037_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV037_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DeltaDuDx;               /* S12d20 ratio du/dx               0318-031b*/
 NvV32 DeltaDvDy;               /* S12d20 ratio dv/dy               031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvU32 ImageInPitch;            /* bytes, vertical pixel delta      0404-0407*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv037Typedef, Nv03ScaledImageFromMemory;
#define NV037_TYPEDEF                                 Nv03ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV037_SET_OBJECT                                           (0x00000000)
#define NV037_NO_OPERATION                                         (0x00000100)
#define NV037_NOTIFY                                               (0x00000104)
#define NV037_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV037_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV037_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV037_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV037_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV037_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV037_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV037_SET_CONTEXT_SURFACE                                  (0x00000194)
#define NV037_SET_COLOR_FORMAT                                     (0x00000300)
#define NV037_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV037_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV037_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV037_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV037_SET_COLOR_FORMAT_LE_V8YB8U8YA8                       (0x00000005)
#define NV037_SET_COLOR_FORMAT_LE_YB8V8YA8U8                       (0x00000006)
#define NV037_SET_OPERATION                                        (0x00000304)
#define NV037_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV037_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV037_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV037_CLIP_POINT                                           (0x00000308)
#define NV037_CLIP_POINT_X                                         15:0
#define NV037_CLIP_POINT_Y                                         31:16
#define NV037_CLIP_SIZE                                            (0x0000030C)
#define NV037_CLIP_SIZE_WIDTH                                      15:0
#define NV037_CLIP_SIZE_HEIGHT                                     31:16
#define NV037_IMAGE_OUT_POINT                                      (0x00000310)
#define NV037_IMAGE_OUT_POINT_X                                    15:0
#define NV037_IMAGE_OUT_POINT_Y                                    31:16
#define NV037_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV037_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV037_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV037_DELTA_DU_DX                                          (0x00000318)
#define NV037_DELTA_DV_DY                                          (0x0000031C)
#define NV037_IMAGE_IN_SIZE                                        (0x00000400)
#define NV037_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV037_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV037_IMAGE_IN_PITCH                                       (0x00000404)
#define NV037_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV037_IMAGE_IN_POINT                                       (0x0000040C)
#define NV037_IMAGE_IN_POINT_U                                     15:0
#define NV037_IMAGE_IN_POINT_V                                     31:16
/* obsolete stuff */
#define NV3_SCALED_IMAGE_FROM_MEMORY                               (0x00000037)
#define Nv3ScaledImageFromMemory                      Nv03ScaledImageFromMemory
#define nv3ScaledImageFromMemory                      Nv03ScaledImageFromMemory
#define nv03ScaledImageFromMemory                     Nv03ScaledImageFromMemory


/* class NV04_DVD_SUBPICTURE */
#define  NV04_DVD_SUBPICTURE                                       (0x00000038)
/* NvNotification[] elements */
#define NV038_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV038_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV038_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV038_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV038_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV038_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV038_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV038_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaOverlay;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageIn;    /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextDmaImageOut;   /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0300-0303*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0304-0307*/
 NvU32 ImageOutFormat;          /* color_pitch V16_U16              0308-030b*/
 NvU32 ImageOutOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 ImageInDeltaDuDx;        /* S12d20 ratio du/dx               0310-0313*/
 NvV32 ImageInDeltaDvDy;        /* S12d20 ratio dv/dy               0314-0317*/
 NvV32 ImageInSize;             /* height_width U16_U16 in texels   0318-031b*/
 NvV32 ImageInFormat;           /* color_pitch V16_U16              031c-031f*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0320-0323*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4 in texels        0324-0317*/
 NvV32 OverlayDeltaDuDx;        /* S12d20 ratio du/dx               0328-032b*/
 NvV32 OverlayDeltaDvDy;        /* S12d20 ratio dv/dy               032c-032f*/
 NvV32 OverlaySize;             /* height_width U16_U16 in texels   0330-0333*/
 NvV32 OverlayFormat;           /* color_pitch V16_U16              0334-0337*/
 NvU32 OverlayOffset;           /* byte offset of top-left texel    0338-033b*/
 NvV32 OverlayPoint;            /* v_u U12d4_U12d4 in texels        033c-033f*/
 NvV32 Reserved02[0x730];
} Nv038Typedef, Nv04DvdSubpicture;
#define NV038_TYPEDEF                                         Nv04DvdSubpicture
/* dma method offsets, fields, and values */
#define NV038_SET_OBJECT                                           (0x00000000)
#define NV038_NO_OPERATION                                         (0x00000100)
#define NV038_NOTIFY                                               (0x00000104)
#define NV038_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV038_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV038_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV038_SET_CONTEXT_DMA_OVERLAY                              (0x00000184)
#define NV038_SET_CONTEXT_DMA_IMAGE_IN                             (0x00000188)
#define NV038_SET_CONTEXT_DMA_IMAGE_OUT                            (0x0000018C)
#define NV038_IMAGE_OUT_POINT                                      (0x00000300)
#define NV038_IMAGE_OUT_POINT_X                                    15:0
#define NV038_IMAGE_OUT_POINT_Y                                    31:16
#define NV038_IMAGE_OUT_SIZE                                       (0x00000304)
#define NV038_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV038_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV038_IMAGE_OUT_FORMAT                                     (0x00000308)
#define NV038_IMAGE_OUT_FORMAT_PITCH                               15:0
#define NV038_IMAGE_OUT_FORMAT_COLOR                               31:16
#define NV038_IMAGE_OUT_FORMAT_COLOR_LE_V8YB8U8YA8                 (0x00000001)
#define NV038_IMAGE_OUT_FORMAT_COLOR_LE_YB8V8YA8U8                 (0x00000002)
#define NV038_IMAGE_OUT_OFFSET                                     (0x0000030C)
#define NV038_IMAGE_IN_DELTA_DU_DX                                 (0x00000310)
#define NV038_IMAGE_IN_DELTA_DV_DY                                 (0x00000314)
#define NV038_IMAGE_IN_SIZE                                        (0x00000318)
#define NV038_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV038_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV038_IMAGE_IN_FORMAT                                      (0x0000031C)
#define NV038_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV038_IMAGE_IN_FORMAT_COLOR                                31:16
#define NV038_IMAGE_IN_FORMAT_COLOR_LE_V8YB8U8YA8                  (0x00000001)
#define NV038_IMAGE_IN_FORMAT_COLOR_LE_YB8V8YA8U8                  (0x00000002)
#define NV038_IMAGE_IN_OFFSET                                      (0x00000320)
#define NV038_IMAGE_IN_POINT                                       (0x00000324)
#define NV038_IMAGE_IN_POINT_U                                     15:0
#define NV038_IMAGE_IN_POINT_V                                     31:16
#define NV038_OVERLAY_DELTA_DU_DX                                  (0x00000328)
#define NV038_OVERLAY_DELTA_DV_DY                                  (0x0000032C)
#define NV038_OVERLAY_SIZE                                         (0x00000330)
#define NV038_OVERLAY_SIZE_WIDTH                                   15:0
#define NV038_OVERLAY_SIZE_HEIGHT                                  31:16
#define NV038_OVERLAY_FORMAT                                       (0x00000334)
#define NV038_OVERLAY_FORMAT_PITCH                                 15:0
#define NV038_OVERLAY_FORMAT_COLOR                                 31:16
#define NV038_OVERLAY_FORMAT_COLOR_LE_A8V8U8Y8                     (0x00000001)
#define NV038_OVERLAY_FORMAT_COLOR_LE_A4V6YB6A4U6YA6               (0x00000002)
#define NV038_OVERLAY_FORMAT_COLOR_LE_TRANSPARENT                  (0x00000003)
#define NV038_OVERLAY_OFFSET                                       (0x00000338)
#define NV038_OVERLAY_POINT                                        (0x0000033C)
#define NV038_OVERLAY_POINT_U                                      15:0
#define NV038_OVERLAY_POINT_V                                      31:16


/* class NV03_MEMORY_TO_MEMORY_FORMAT */
#define  NV03_MEMORY_TO_MEMORY_FORMAT                              (0x00000039)
/* NvNotification[] elements */
#define NV039_NOTIFIERS_NOTIFY                                     (0)
#define NV039_NOTIFIERS_BUFFER_NOTIFY                              (1)
/* NvNotification[] fields and values */
#define NV039_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV039_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV039_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV039_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV039_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV039_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV039_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaBufferIn;   /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaBufferOut;  /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x060];
 NvU32 OffsetIn;                /* src offset in bytes              030c-030f*/
 NvU32 OffsetOut;               /* dst offset in bytes              0310-0313*/
 NvS32 PitchIn;                 /* delta in bytes, vert pixel delta 0314-0317*/
 NvS32 PitchOut;                /* delta in bytes, vert pixel delta 0318-031b*/
 NvU32 LineLengthIn;            /* in bytes                         031c-031f*/
 NvU32 LineCount;               /* in lines                         0320-0323*/
 NvV32 Format;                  /* out_in U24_U8                    0324-0327*/
 NvV32 BufferNotify;            /* NV039_BUFFER_NOTIFY_*            0328-032b*/
 NvV32 Reserved02[0x735];
} Nv039Typedef, Nv03MemoryToMemoryFormat;
#define NV039_TYPEDEF                                  Nv03MemoryToMemoryFormat
/* dma method offsets, fields, and values */
#define NV039_SET_OBJECT                                           (0x00000000)
#define NV039_NO_OPERATION                                         (0x00000100)
#define NV039_NOTIFY                                               (0x00000104)
#define NV039_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV039_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV039_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV039_SET_CONTEXT_DMA_BUFFER_IN                            (0x00000184)
#define NV039_SET_CONTEXT_DMA_BUFFER_OUT                           (0x00000188)
#define NV039_OFFSET_IN                                            (0x0000030C)
#define NV039_OFFSET_OUT                                           (0x00000310)
#define NV039_PITCH_IN                                             (0x00000314)
#define NV039_PITCH_OUT                                            (0x00000318)
#define NV039_LINE_LENGTH_IN                                       (0x0000031C)
#define NV039_LINE_COUNT                                           (0x00000320)
#define NV039_FORMAT                                               (0x00000324)
#define NV039_FORMAT_IN                                            7:0
#define NV039_FORMAT_OUT                                           31:8
#define NV039_BUFFER_NOTIFY                                        (0x00000328)
#define NV039_BUFFER_NOTIFY_WRITE_ONLY                             (0x00000000)
#define NV039_BUFFER_NOTIFY_WRITE_THEN_AWAKEN                      (0x00000001)
/* obsolete stuff */
#define NV3_MEMORY_TO_MEMORY_FORMAT                                (0x00000039)
#define Nv3MemoryToMemoryFormat                        Nv03MemoryToMemoryFormat
#define nv3MemoryToMemoryFormat                        Nv03MemoryToMemoryFormat
#define nv03MemoryToMemoryFormat                       Nv03MemoryToMemoryFormat

typedef NvV32 Nv03aTypedef;

typedef NvV32 Nv03bTypedef;

typedef NvV32 Nv03cTypedef;

/* class NV01_CONTEXT_DMA_IN_MEMORY */
#define  NV01_CONTEXT_DMA_IN_MEMORY                                (0x0000003D)
/* NvNotification[] fields and values */
#define NV03D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03dTypedef, Nv01ContextDmaInMemory;
#define  NV03D_TYPEDEF                                   Nv01ContextDmaInMemory
/* obsolete stuff */
#define  NV1_CONTEXT_DMA_IN_MEMORY                                 (0x0000003D)
#define  Nv1ContextDmaInMemory                           Nv01ContextDmaInMemory
#define  nv1ContextDmaInMemory                           Nv01ContextDmaInMemory
#define  nv01ContextDmaInMemory                          Nv01ContextDmaInMemory


#define  NV01_MEMORY_SYSTEM                                        (0x0000003E)
/* obsolete stuff */
/* class NV01_CONTEXT_ERROR_TO_MEMORY */
#define   NV01_CONTEXT_ERROR_TO_MEMORY                             (0x0000003E)
/* NvNotification[] fields and values */
#define NV03E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03eTypedef, Nv01ContextErrorToMemory;
#define  NV03E_TYPEDEF                                 Nv01ContextErrorToMemory
#define  NV1_CONTEXT_ERROR_TO_MEMORY                               (0x0000003E)
#define  Nv1ContextErrorToMemory                       Nv01ContextErrorToMemory
#define  nv1ContextErrorToMemory                       Nv01ContextErrorToMemory
#define  nv01ContextErrorToMemory                      Nv01ContextErrorToMemory


/* class NV01_MEMORY_LOCAL_PRIVILEGED */
#define  NV01_MEMORY_LOCAL_PRIVILEGED                              (0x0000003F)
/* NvNotification[] fields and values */
#define NV03F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv03fTypedef, Nv01MemoryLocalPrivileged;
#define NV03F_TYPEDEF                                 Nv01MemoryLocalPrivileged
/* obsolete stuff */
#define NV01_MEMORY_PRIVILEGED                                     (0x0000003F)
#define NV1_MEMORY_PRIVILEGED                                      (0x0000003F)
#define Nv01MemoryPrivileged                          Nv01MemoryLocalPrivileged
#define nv01MemoryPrivileged                          Nv01MemoryLocalPrivileged
#define Nv1MemoryPrivileged                           Nv01MemoryLocalPrivileged
#define nv1MemoryPrivileged                           Nv01MemoryLocalPrivileged
#define nv01MemoryLocalPrivileged                     Nv01MemoryLocalPrivileged


/* class NV01_MEMORY_LOCAL_USER */

/* Class MEMORY_LOCAL_USER refers to framebuffer heap memory that is local to our device
   and accessable to every client.  This is in contrast to MEMORY_SYSTEM, that is 
   considered local to the system CPU, and MEMORY_LOCAL_PRIVILEGED, that refers to
   local instance memory and the local priveledge register space. - Chuck Moidel*/

/* Please note that RmAllocMemory(NV01_MEMORY_LOCAL_USER) and RmAlloc(NV01_MEMORY_LOCAL USER) 
   do VERY different things.  The older RmAllocMemory(NV01_MEMORY_LOCAL_USER) function does 
   not allocate ANY framebuffer memory.  It only allocates and returns a dumb linear mapping
   to the entire framebuffer. RmAlloc(NV01_MEMORY_LOCAL USER) on the other hand allocates blocks
   from the framebuffer heap.  - Chuck Moidel*/

#define  NV01_MEMORY_LOCAL_USER                                    (0x00000040)
/* NvNotification[] fields and values */
#define NV040_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv040Typedef, Nv01MemoryLocalUser;
#define NV040_TYPEDEF                                       Nv01MemoryLocalUser
/* obsolete stuff */
#define NV01_MEMORY_USER                                           (0x00000040)
#define NV1_MEMORY_USER                                            (0x00000040)
#define Nv01MemoryUser                                      Nv01MemoryLocalUser
#define nv01MemoryUser                                      Nv01MemoryLocalUser
#define Nv1MemoryUser                                       Nv01MemoryLocalUser
#define nv1MemoryUser                                       Nv01MemoryLocalUser
#define nv01MemoryLocalUser                                 Nv01MemoryLocalUser


/* class NV03_VIDEO_LUT_CURSOR_PAL */
#define  NV03_VIDEO_LUT_CURSOR_PAL                                 (0x00000041)
/* NvNotification[] elements */
#define NV041_NOTIFIERS_NOTIFY                                     (0)
#define NV041_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV041_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (3+(b))
#define NV041_NOTIFIERS_SET_LUT(b)                                 (5+(b))
#define NV041_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (7+(b))
#define NV041_NOTIFIERS_SET_CURSOR_POINT(b)                        (9+(b))
#define NV041_NOTIFIERS_SET_ENCODER(b)                             (11+(b))
/* NvNotification[] fields and values */
#define NV041_NOTIFICATION_INFO16_OFFSET_VALID                     (0x0001)
#define NV041_NOTIFICATION_INFO16_OFFSET_INVALID                   (0x0002)
#define NV041_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV041_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV041_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV041_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV041_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV041_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV041_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV041_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV041_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01D];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 SetContextDmaCursor;     /* NV01_CONTEXT_DMA                 0190-0193*/
 NvV32 Reserved01[0x05B];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvU32 size;                   /* height_width U16_U16 in pixels      4-   7*/
  NvV32 format;                 /* pitch_color_field_notify            8-   b*/
 } SetImage[2];                 /* end of methods in array              -0317*/
 NvV32 GetImageOffsetNotify[2]; /* NV041_GET_IMAGE_OFFSET_NOTIFY_*  0318-031f*/
 NvV32 SetLut[2];               /* notify_offset V02_U30            0320-0327*/
 NvV32 SetCursorImage[2];       /* notify_offset V02_U30            0328-032f*/
 NvV32 SetCursorPoint[2];       /* notify_y_x V02_S14_S16           0330-0337*/
 NvV32 SetEncoder[2];           /* see text                         0338-033f*/
 NvV32 Reserved02[0x730];
} Nv041Typedef, Nv03VideoLutCursorPal;
#define NV041_TYPEDEF                                     Nv03VideoLutCursorPal
/* dma method offsets, fields, and values */
#define NV041_SET_OBJECT                                           (0x00000000)
#define NV041_NO_OPERATION                                         (0x00000100)
#define NV041_NOTIFY                                               (0x00000104)
#define NV041_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV041_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV041_STOP_TRANSFER                                        (0x00000108)
#define NV041_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV041_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV041_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV041_SET_CONTEXT_DMA_LUT                                  (0x0000018C)
#define NV041_SET_CONTEXT_DMA_CURSOR                               (0x00000190)
#define NV041_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_SIZE(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV041_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV041_SET_IMAGE_FORMAT(b)                                  (0x00000308\
                                                                   +(b)*0x000C)
#define NV041_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV041_SET_IMAGE_FORMAT_COLOR                               23:16
#define NV041_SET_IMAGE_FORMAT_COLOR_LUT_LE_Y8                     (0x00000000)
#define NV041_SET_IMAGE_FORMAT_COLOR_BYPASS_LE_R5G6B5              (0x00000001)
#define NV041_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1R5G5B5              (0x00000002)
#define NV041_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1X7R8G8B8            (0x00000003)
#define NV041_SET_IMAGE_FORMAT_FIELD                               29:24
#define NV041_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV041_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV041_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV041_SET_IMAGE_FORMAT_NOTIFY                              31:30
#define NV041_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000318\
                                                                   +(b)*0x0004)
#define NV041_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_LUT(b)                                           (0x00000320\
                                                                   +(b)*0x0004)
#define NV041_SET_LUT_OFFSET                                       29:0
#define NV041_SET_LUT_NOTIFY                                       31:30
#define NV041_SET_LUT_NOTIFY_WRITE_ONLY                            (0x00000000)
#define NV041_SET_LUT_NOTIFY_WRITE_THEN_AWAKEN                     (0x00000001)
#define NV041_SET_CURSOR_IMAGE(b)                                  (0x00000328\
                                                                   +(b)*0x0004)
#define NV041_SET_CURSOR_IMAGE_OFFSET                              29:0
#define NV041_SET_CURSOR_IMAGE_NOTIFY                              31:30
#define NV041_SET_CURSOR_IMAGE_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_CURSOR_IMAGE_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_CURSOR_POINT(b)                                  (0x00000330\
                                                                   +(b)*0x0004)
#define NV041_SET_CURSOR_POINT_X                                   15:0
#define NV041_SET_CURSOR_POINT_Y                                   29:16
#define NV041_SET_CURSOR_POINT_NOTIFY                              31:30
#define NV041_SET_CURSOR_POINT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV041_SET_CURSOR_POINT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV041_SET_ENCODER(b)                                       (0x00000338\
                                                                   +(b)*0x0004)
#define NV041_SET_ENCODER_UNDERSCAN_LEFT                           4:0
#define NV041_SET_ENCODER_UNDERSCAN_RIGHT                          9:5
#define NV041_SET_ENCODER_UNDERSCAN_TOP                            14:10
#define NV041_SET_ENCODER_UNDERSCAN_BOTTOM                         19:15
#define NV041_SET_ENCODER_FILTER_HORIZONTAL                        21:20
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_ZOH                    (0x00000000)
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_FOH                    (0x00000001)
#define NV041_SET_ENCODER_FILTER_HORIZONTAL_SOH                    (0x00000002)
#define NV041_SET_ENCODER_FILTER_VERTICAL                          23:22
#define NV041_SET_ENCODER_FILTER_VERTICAL_ZOH                      (0x00000000)
#define NV041_SET_ENCODER_FILTER_VERTICAL_FOH                      (0x00000001)
#define NV041_SET_ENCODER_FILTER_VERTICAL_SOH                      (0x00000002)
#define NV041_SET_ENCODER_VERTICAL_FRONT_PORCH_ADJUST              29:24
#define NV041_SET_ENCODER_REFRESH                                  30:30
#define NV041_SET_ENCODER_REFRESH_INTERLACED                       (0x00000000)
#define NV041_SET_ENCODER_REFRESH_NONINTERLACED                    (0x00000001)
#define NV041_SET_ENCODER_NOTIFY                                   31:31
#define NV041_SET_ENCODER_NOTIFY_WRITE_ONLY                        (0x00000000)
#define NV041_SET_ENCODER_NOTIFY_WRITE_THEN_AWAKEN                 (0x00000001)


/* class NV04_CONTEXT_SURFACES_2D */
#define  NV04_CONTEXT_SURFACES_2D                                  (0x00000042)
/* NvNotification[] elements */
#define NV042_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV042_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV042_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV042_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV042_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV042_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV042_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV042_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImageSource;/* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageDestin;/* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05d];
 NvV32 SetColorFormat;          /* NV042_SET_COLOR_FORMAT_*         0300-0303*/
 NvU32 SetPitch;                /* destin_source U16_U16            0304-0307*/
 NvU32 SetOffsetSource;         /* byte offset of top-left pixel    0308-030b*/
 NvU32 SetOffsetDestin;         /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved02[0x73c];
} Nv042Typedef, Nv04ContextSurfaces2d;
#define NV042_TYPEDEF                                     Nv04ContextSurfaces2d
/* dma method offsets, fields, and values */
#define NV042_SET_OBJECT                                           (0x00000000)
#define NV042_NO_OPERATION                                         (0x00000100)
#define NV042_NOTIFY                                               (0x00000104)
#define NV042_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV042_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV042_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV042_SET_CONTEXT_DMA_IMAGE_SOURCE                         (0x00000184)
#define NV042_SET_CONTEXT_DMA_IMAGE_DESTIN                         (0x00000188)
#define NV042_SET_COLOR_FORMAT                                     (0x00000300)
#define NV042_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV042_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV042_SET_COLOR_FORMAT_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV042_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000004)
#define NV042_SET_COLOR_FORMAT_LE_Y16                              (0x00000005)
#define NV042_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV042_SET_COLOR_FORMAT_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV042_SET_COLOR_FORMAT_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV042_SET_COLOR_FORMAT_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV042_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x0000000A)
#define NV042_SET_COLOR_FORMAT_LE_Y32                              (0x0000000B)
#define NV042_SET_PITCH                                            (0x00000304)
#define NV042_SET_PITCH_SOURCE                                     15:0
#define NV042_SET_PITCH_DESTIN                                     31:16
#define NV042_SET_OFFSET_SOURCE                                    (0x00000308)
#define NV042_SET_OFFSET_DESTIN                                    (0x0000030C)
/* obsolete stuff */
#define NV4_CONTEXT_SURFACES_2D                                    (0x00000042)
#define Nv4ContextSurfaces2d                              Nv04ContextSurfaces2d
#define nv4ContextSurfaces2d                              Nv04ContextSurfaces2d
#define nv4ContextSurfaces2D                              Nv04ContextSurfaces2d
#define nv04ContextSurfaces2d                             Nv04ContextSurfaces2d


/* class NV03_CONTEXT_ROP */
#define  NV03_CONTEXT_ROP                                          (0x00000043)
/* NvNotification[] elements */
#define NV043_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV043_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV043_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV043_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV043_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV043_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV043_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV043_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetRop5;                 /* 32-bit ROP5                      0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv043Typedef, Nv03ContextRop;
#define NV043_TYPEDEF                                            Nv03ContextRop
/* dma method offsets, fields, and values */
#define NV043_SET_OBJECT                                           (0x00000000)
#define NV043_NO_OPERATION                                         (0x00000100)
#define NV043_NOTIFY                                               (0x00000104)
#define NV043_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV043_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV043_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV043_SET_ROP5                                             (0x00000300)
/* obsolete stuff */
#define NV3_CONTEXT_ROP                                            (0x00000043)
#define Nv3ContextRop                                            Nv03ContextRop
#define nv3ContextRop                                            Nv03ContextRop
#define nv03ContextRop                                           Nv03ContextRop


/* class NV04_CONTEXT_PATTERN */
#define  NV04_CONTEXT_PATTERN                                      (0x00000044)
/* NvNotification[] elements */
#define NV044_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV044_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV044_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV044_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV044_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV044_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV044_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV044_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV044_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV044_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 SetMonochromeShape;      /* NV044_SET_MONOCHROME_SHAPE_*     0308-030b*/
 NvV32 SetPatternSelect;        /* NV044_SET_PATTERN_SELECT_*       030c-030f*/
 NvV32 SetMonochromeColor0;     /* color of 0 pixels                0310-0313*/
 NvV32 SetMonochromeColor1;     /* color of 1 pixels                0314-0317*/
 NvV32 SetMonochromePattern0;   /* first  32 bits of pattern data   0318-031b*/
 NvV32 SetMonochromePattern1;   /* second 32 bits of pattern data   031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 SetPatternY8[16];        /* y3_y2_y1_y0 U8_U8_U8_U8          0400-043f*/
 NvV32 Reserved03[0x030];
 NvV32 SetPatternR5G6B5[32];    /* see text                         0500-057f*/
 NvV32 Reserved04[0x020];
 NvV32 SetPatternX1R5G5B5[32];  /* see text                         0600-067f*/
 NvV32 Reserved05[0x020];
 NvV32 SetPatternX8R8G8B8[64];  /* ignore_red_green_blu U8_U8_U8_U8 0700-07ff*/
 NvV32 Reserved06[0x600];
} Nv044Typedef, Nv04ContextPattern;
#define NV044_TYPEDEF                                          Nv04ContextPattern
/* dma method offsets, fields, and values */
#define NV044_SET_OBJECT                                           (0x00000000)
#define NV044_NO_OPERATION                                         (0x00000100)
#define NV044_NOTIFY                                               (0x00000104)
#define NV044_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV044_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV044_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV044_SET_COLOR_FORMAT                                     (0x00000300)
#define NV044_SET_COLOR_FORMAT_LE_A16R5G6B5                        (0x00000001)
#define NV044_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV044_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV044_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV044_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV044_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV044_SET_MONOCHROME_SHAPE                                 (0x00000308)
#define NV044_SET_MONOCHROME_SHAPE_8X_8Y                           (0x00000000)
#define NV044_SET_MONOCHROME_SHAPE_64X_1Y                          (0x00000001)
#define NV044_SET_MONOCHROME_SHAPE_1X_64Y                          (0x00000002)
#define NV044_SET_PATTERN_SELECT                                   (0x0000030C)
#define NV044_SET_PATTERN_SELECT_MONOCHROME                        (0x00000001)
#define NV044_SET_PATTERN_SELECT_COLOR                             (0x00000002)
#define NV044_SET_MONOCHORME_COLOR0                                (0x00000310)
#define NV044_SET_MONOCHORME_COLOR1                                (0x00000314)
#define NV044_SET_MONOCHORME_PATTERN0                              (0x00000318)
#define NV044_SET_MONOCHORME_PATTERN1                              (0x0000031C)

#define NV044_SET_MONOCHROME_COLOR0                                (0x00000310)
#define NV044_SET_MONOCHROME_COLOR1                                (0x00000314)
#define NV044_SET_MONOCHROME_PATTERN0                              (0x00000318)
#define NV044_SET_MONOCHROME_PATTERN1                              (0x0000031C)

#define NV044_SET_PATTERN_Y8(i)                                    (0x00000400\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_Y8_Y0                                    7:0
#define NV044_SET_PATTERN_Y8_Y1                                    15:8
#define NV044_SET_PATTERN_Y8_Y2                                    23:16
#define NV044_SET_PATTERN_Y8_Y3                                    31:24
#define NV044_SET_PATTERN_R5G6B5(i)                                (0x00000500\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_R5G6B5_BLUE0                             4:0
#define NV044_SET_PATTERN_R5G6B5_GREEN0                            10:5
#define NV044_SET_PATTERN_R5G6B5_RED0                              15:11
#define NV044_SET_PATTERN_R5G6B5_BLUE1                             20:16
#define NV044_SET_PATTERN_R5G6B5_GREEN1                            26:21
#define NV044_SET_PATTERN_R5G6B5_RED1                              31:27
#define NV044_SET_PATTERN_X1R5G5B5(i)                              (0x00000600\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_X1R5G5B5_BLUE0                           4:0
#define NV044_SET_PATTERN_X1R5G5B5_GREEN0                          9:5
#define NV044_SET_PATTERN_X1R5G5B5_RED0                            14:10
#define NV044_SET_PATTERN_X1R5G5B5_IGNORE0                         15:15
#define NV044_SET_PATTERN_X1R5G5B5_BLUE1                           20:16
#define NV044_SET_PATTERN_X1R5G5B5_GREEN1                          25:21
#define NV044_SET_PATTERN_X1R5G5B5_RED1                            30:26
#define NV044_SET_PATTERN_X1R5G5B5_IGNORE1                         31:31
#define NV044_SET_PATTERN_X8R8G8B8(i)                              (0x00000700\
                                                                   +(i)*0x0004)
#define NV044_SET_PATTERN_X8R8G8B8_BLUE                            7:0
#define NV044_SET_PATTERN_X8R8G8B8_GREEN                           15:8
#define NV044_SET_PATTERN_X8R8G8B8_RED                             23:16
#define NV044_SET_PATTERN_X8R8G8B8_IGNORE                          31:24
/* obsolete stuff */
#define NV4_CONTEXT_PATTERN                                        (0x00000044)
#define Nv04ImagePattern                                     Nv04ContextPattern
#define Nv4ImagePattern                                      Nv04ContextPattern
#define nv4ImagePattern                                      Nv04ContextPattern
#define Nv4ContextPattern                                    Nv04ContextPattern
#define nv4ContextPattern                                    Nv04ContextPattern
#define nv04ContextPattern                                   Nv04ContextPattern


/* class NV03_VIDEO_LUT_CURSOR_NTSC */
#define  NV03_VIDEO_LUT_CURSOR_NTSC                                (0x00000045)
/* NvNotification[] elements */
#define NV045_NOTIFIERS_NOTIFY                                     (0)
#define NV045_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV045_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (3+(b))
#define NV045_NOTIFIERS_SET_LUT(b)                                 (5+(b))
#define NV045_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (7+(b))
#define NV045_NOTIFIERS_SET_CURSOR_POINT(b)                        (9+(b))
#define NV045_NOTIFIERS_SET_ENCODER(b)                             (11+(b))
/* NvNotification[] fields and values */
#define NV045_NOTIFICATION_INFO16_OFFSET_VALID                     (0x0001)
#define NV045_NOTIFICATION_INFO16_OFFSET_INVALID                   (0x0002)
#define NV045_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV045_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV045_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV045_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV045_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV045_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV045_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV045_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV045_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01D];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 SetContextDmaCursor;     /* NV01_CONTEXT_DMA                 0190-0193*/
 NvV32 Reserved01[0x05B];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvU32 size;                   /* height_width U16_U16 in pixels      4-   7*/
  NvV32 format;                 /* pitch_color_field_notify            8-   b*/
 } SetImage[2];                 /* end of methods in array              -0317*/
 NvV32 GetImageOffsetNotify[2]; /* NV045_GET_IMAGE_OFFSET_NOTIFY_*  0318-031f*/
 NvV32 SetLut[2];               /* notify_offset V02_U30            0320-0327*/
 NvV32 SetCursorImage[2];       /* notify_offset V02_U30            0328-032f*/
 NvV32 SetCursorPoint[2];       /* notify_y_x V02_S14_S16           0330-0337*/
 NvV32 SetEncoder[2];           /* see text                         0338-033f*/
 NvV32 Reserved02[0x730];
} Nv045Typedef, Nv03VideoLutCursorNtsc;
#define NV045_TYPEDEF                                    Nv03VideoLutCursorNtsc
/* dma method offsets, fields, and values */
#define NV045_SET_OBJECT                                           (0x00000000)
#define NV045_NO_OPERATION                                         (0x00000100)
#define NV045_NOTIFY                                               (0x00000104)
#define NV045_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV045_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV045_STOP_TRANSFER                                        (0x00000108)
#define NV045_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV045_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV045_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV045_SET_CONTEXT_DMA_LUT                                  (0x0000018C)
#define NV045_SET_CONTEXT_DMA_CURSOR                               (0x00000190)
#define NV045_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_SIZE(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV045_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV045_SET_IMAGE_FORMAT(b)                                  (0x00000308\
                                                                   +(b)*0x000C)
#define NV045_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV045_SET_IMAGE_FORMAT_COLOR                               23:16
#define NV045_SET_IMAGE_FORMAT_COLOR_LUT_LE_Y8                     (0x00000000)
#define NV045_SET_IMAGE_FORMAT_COLOR_BYPASS_LE_R5G6B5              (0x00000001)
#define NV045_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1R5G5B5              (0x00000002)
#define NV045_SET_IMAGE_FORMAT_COLOR_LE_BYPASS1X7R8G8B8            (0x00000003)
#define NV045_SET_IMAGE_FORMAT_FIELD                               29:24
#define NV045_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV045_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV045_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV045_SET_IMAGE_FORMAT_NOTIFY                              31:30
#define NV045_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000318\
                                                                   +(b)*0x0004)
#define NV045_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_LUT(b)                                           (0x00000320\
                                                                   +(b)*0x0004)
#define NV045_SET_LUT_OFFSET                                       29:0
#define NV045_SET_LUT_NOTIFY                                       31:30
#define NV045_SET_LUT_NOTIFY_WRITE_ONLY                            (0x00000000)
#define NV045_SET_LUT_NOTIFY_WRITE_THEN_AWAKEN                     (0x00000001)
#define NV045_SET_CURSOR_IMAGE(b)                                  (0x00000328\
                                                                   +(b)*0x0004)
#define NV045_SET_CURSOR_IMAGE_OFFSET                              29:0
#define NV045_SET_CURSOR_IMAGE_NOTIFY                              31:30
#define NV045_SET_CURSOR_IMAGE_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_CURSOR_IMAGE_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_CURSOR_POINT(b)                                  (0x00000330\
                                                                   +(b)*0x0004)
#define NV045_SET_CURSOR_POINT_X                                   15:0
#define NV045_SET_CURSOR_POINT_Y                                   29:16
#define NV045_SET_CURSOR_POINT_NOTIFY                              31:30
#define NV045_SET_CURSOR_POINT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV045_SET_CURSOR_POINT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV045_SET_ENCODER(b)                                       (0x00000338\
                                                                   +(b)*0x0004)
#define NV045_SET_ENCODER_UNDERSCAN_LEFT                           4:0
#define NV045_SET_ENCODER_UNDERSCAN_RIGHT                          9:5
#define NV045_SET_ENCODER_UNDERSCAN_TOP                            14:10
#define NV045_SET_ENCODER_UNDERSCAN_BOTTOM                         19:15
#define NV045_SET_ENCODER_FILTER_HORIZONTAL                        21:20
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_ZOH                    (0x00000000)
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_FOH                    (0x00000001)
#define NV045_SET_ENCODER_FILTER_HORIZONTAL_SOH                    (0x00000002)
#define NV045_SET_ENCODER_FILTER_VERTICAL                          23:22
#define NV045_SET_ENCODER_VERTICAL_FRONT_PORCH_ADJUST              29:24
#define NV045_SET_ENCODER_FILTER_VERTICAL_ZOH                      (0x00000000)
#define NV045_SET_ENCODER_FILTER_VERTICAL_FOH                      (0x00000001)
#define NV045_SET_ENCODER_FILTER_VERTICAL_SOH                      (0x00000002)
#define NV045_SET_ENCODER_REFRESH                                  30:30
#define NV045_SET_ENCODER_REFRESH_INTERLACED                       (0x00000000)
#define NV045_SET_ENCODER_REFRESH_NONINTERLACED                    (0x00000001)
#define NV045_SET_ENCODER_NOTIFY                                   31:31
#define NV045_SET_ENCODER_NOTIFY_WRITE_ONLY                        (0x00000000)
#define NV045_SET_ENCODER_NOTIFY_WRITE_THEN_AWAKEN                 (0x00000001)


/* class NV04_VIDEO_LUT_CURSOR_DAC */
#define  NV04_VIDEO_LUT_CURSOR_DAC                                 (0x00000046)
/* NvNotification[] elements */
#define NV046_NOTIFIERS_NOTIFY                                     (0)
#define NV046_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV046_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV046_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV046_NOTIFIERS_SET_DAC(b)                                 (7+(b))
/* NvNotification[] fields and values */
#define NV046_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV046_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV046_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV046_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV046_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV046_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV046_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV046_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV046_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV046_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV046_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV046_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV046_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV046_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x058];
 NvV32 GetOffset;               /* NV046_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_pitch V1_U16_U16             4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv046Typedef, Nv04VideoLutCursorDac;
#define NV046_TYPEDEF                                     Nv04VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV046_SET_OBJECT                                           (0x00000000)
#define NV046_NO_OPERATION                                         (0x00000100)
#define NV046_NOTIFY                                               (0x00000104)
#define NV046_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV046_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV046_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV046_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV046_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV046_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV046_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV046_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV046_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV046_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV046_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV046_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV046_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV046_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV046_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV046_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV046_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV046_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV046_GET_OFFSET                                           (0x000002FC)
#define NV046_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV046_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV046_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV046_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV046_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV046_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV046_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV046_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV046_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV046_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV046_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV046_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV046_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV046_SET_CURSOR_POINT                                     (0x00000330)
#define NV046_SET_CURSOR_POINT_X                                   15:0
#define NV046_SET_CURSOR_POINT_Y                                   31:16
#define NV046_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV046_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV046_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV046_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV046_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV046_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV046_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV046_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV046_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV046_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV046_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV046_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV046_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV046_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV046_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV046_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV046_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV046_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV046_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV046_SET_DAC_FORMAT_COLOR                                 19:16
#define NV046_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV046_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV046_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV046_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV046_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV046_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV046_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV046_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV046_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV046_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV046_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


/* class NV04_VIDEO_OVERLAY */
#define  NV04_VIDEO_OVERLAY                                        (0x00000047)
/* NvNotification[] elements */
#define NV047_NOTIFIERS_NOTIFY                                     (0)
#define NV047_NOTIFIERS_SET_OVERLAY(b)                             (1+(b))
/* NvNotification[] fields and values */
#define NV047_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV047_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV047_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV047_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV047_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV047_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV047_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV047_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV047_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV047_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 StopOverlay[2];          /* NV047_STOP_OVERLAY_*             0120-0127*/
 NvV32 Reserved01[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved02[0x006];
 NvV32 SetContextDmaOverlay[2]; /* NV01_CONTEXT_DMA                 019c-01a3*/
 NvV32 Reserved03[0x056];
 NvV32 GetOffset;               /* NV047_GET_OFFSET_*               02FC-02FF*/
 NvV32 Reserved04[0x040];
 struct {                       /* start of methods in array        0400-    */
  NvV32 reserved05[0x017];      /* see text                           00-  5b*/
  NvV32 colorKey;               /* see text                           5c-  5f*/
  NvU32 offset;                 /* byte offset of top-left texel      60-  63*/
  NvV32 sizeIn;                 /* height_width U16_U16               64-  67*/
  NvV32 pointIn;                /* t_s U12d4_U12d4                    68-  6b*/
  NvV32 dsDx;                   /* U12d20 ds/dx                       6c-  6f*/
  NvV32 dtDy;                   /* U12d20 dt/dy                       70-  73*/
  NvV32 pointOut;               /* y_x U16_U16                        74-  77*/
  NvV32 sizeOut;                /* height_width U16_U16               78-  7b*/
  NvV32 format;                 /* format_display_color_pitch         7c-  7f*/
 } SetOverlay[2];               /* end of methods in array              -04ff*/
 NvV32 SetOverlayPointOutA;     /* y_x U16_U16                      0500-0503*/
 NvV32 Reserved06[0x6bf];
} Nv047Typedef, Nv04VideoOverlay;
#define NV047_TYPEDEF                                          Nv04VideoOverlay
/* dma method offsets, fields, and values */
#define NV047_SET_OBJECT                                           (0x00000000)
#define NV047_NO_OPERATION                                         (0x00000100)
#define NV047_NOTIFY                                               (0x00000104)
#define NV047_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV047_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV047_STOP_OVERLAY(b)                                      (0x00000120\
                                                                   +(b)*0x0004)
#define NV047_STOP_OVERLAY_AS_SOON_AS_POSSIBLE                     (0x00000000)
#define NV047_STOP_OVERLAY_BETWEEN_BUFFERS                         (0x00000001)
#define NV047_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV047_SET_CONTEXT_DMA_OVERLAY(b)                           (0x0000019C\
                                                                   +(b)*0x0004)
#define NV047_SET_OVERLAY(b)                                       (0x00000400\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_COLORKEY(b)                              (0x0000045C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_OFFSET(b)                                (0x00000460\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_IN(b)                               (0x00000464\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_IN_WIDTH                            15:0
#define NV047_SET_OVERLAY_SIZE_IN_HEIGHT                           31:16
#define NV047_SET_OVERLAY_POINT_IN(b)                              (0x00000468\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_IN_S                               15:0
#define NV047_SET_OVERLAY_POINT_IN_T                               31:16
#define NV047_SET_OVERLAY_DS_DX(b)                                 (0x0000046C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_DT_DY(b)                                 (0x00000470\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_OUT(b)                             (0x00000474\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_POINT_OUT_X                              15:0
#define NV047_SET_OVERLAY_POINT_OUT_Y                              31:16
#define NV047_SET_OVERLAY_SIZE_OUT(b)                              (0x00000478\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_SIZE_OUT_WIDTH                           15:0
#define NV047_SET_OVERLAY_SIZE_OUT_HEIGHT                          31:16
#define NV047_SET_OVERLAY_FORMAT(b)                                (0x0000047C\
                                                                   +(b)*0x0080)
#define NV047_SET_OVERLAY_FORMAT_PITCH                             15:0
#define NV047_SET_OVERLAY_FORMAT_COLOR                             19:16
#define NV047_SET_OVERLAY_FORMAT_COLOR_LE_YB8CR8YA8CB8             (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_COLOR_LE_CR8YB8CB8YA8             (0x00000001)
#define NV047_SET_OVERLAY_FORMAT_DISPLAY                           30:20
#define NV047_SET_OVERLAY_FORMAT_DISPLAY_ALWAYS                    (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_DISPLAY_COLOR_KEY_EQUAL           (0x00000001)
#define NV047_SET_OVERLAY_FORMAT_NOTIFY                            31:31
#define NV047_SET_OVERLAY_FORMAT_NOTIFY_WRITE_ONLY                 (0x00000000)
#define NV047_SET_OVERLAY_FORMAT_NOTIFY_WRITE_THEN_AWAKEN          (0x00000001)
#define NV047_SET_OVERLAY_POINT_OUT_A                              (0x00000500)
#define NV047_SET_OVERLAY_POINT_OUT_A_X                            15:0
#define NV047_SET_OVERLAY_POINT_OUT_A_Y                            31:16

/* class NV03_DX3_TEXTURED_TRIANGLE */
#define  NV03_DX3_TEXTURED_TRIANGLE                                (0x00000048)
/* NvNotification[] elements */
#define NV048_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV048_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV048_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV048_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV048_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV048_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV048_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV048_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaTexture;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextSurfaceColor;  /* NV03_CONTEXT_SURFACE_3D_COLOR    018c-018f*/
 NvV32 SetContextSurfaceZeta;   /* NV03_CONTEXT_SURFACE_3D_DEPTH    0190-0193*/
 NvV32 Reserved01[0x05c];
 NvU32 TextureOffset;           /* offset in bytes                  0304-0307*/
 NvV32 TextureFormat;           /* see text                         0308-030b*/
 NvV32 TextureFilter;           /* ignre_sizeAdjust_spreadY_spreadX 030c-030f*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0310-0313*/
 NvV32 Control0;                /* see text                         0314-0317*/
 NvV32 Control1;                /* alphafunc_alpharef V24_U8        0318-031b*/
 NvV32 Reserved02[0x339];
 struct {                       /* start of method in array         1000-    */
  NvV32 specular;               /* fog_i5-i0 U0d8_U4_U4_U4_U4_U4_U4   00-  03*/
  NvV32 color;                  /* X8R8G8B8 or A8R8G8B8               04-  07*/
  NvF32 sx;                     /* screen x coordinate                08-  0b*/
  NvF32 sy;                     /* screen y coordinate                0c-  0f*/
  NvF32 sz;                     /* screen z coordinate                10-  13*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[128];               /* end of method in array               -1fff*/
} Nv048Typedef, Nv03Dx3TexturedTriangle;
#define NV048_TYPEDEF                                   Nv03Dx3TexturedTriangle
/* dma method offsets, fields, and values */
#define NV048_SET_OBJECT                                           (0x00000000)
#define NV048_NO_OPERATION                                         (0x00000100)
#define NV048_NOTIFY                                               (0x00000104)
#define NV048_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV048_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV048_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV048_SET_CONTEXT_DMA_TEXTURE                              (0x00000184)
#define NV048_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV048_SET_CONTEXT_SURFACE_COLOR                            (0x0000018C)
#define NV048_SET_CONTEXT_SURFACE_ZETA                             (0x00000190)
#define NV048_TEXTURE_OFFSET                                       (0x00000304)
#define NV048_TEXTURE_FORMAT                                       (0x00000308)
#define NV048_TEXTURE_FORMAT_VALUE                                 15:0
#define NV048_TEXTURE_FORMAT_KEY                                   19:16
#define NV048_TEXTURE_FORMAT_KEY_DISABLED                          (0x00000000)
#define NV048_TEXTURE_FORMAT_KEY_ENABLED                           (0x00000001)
#define NV048_TEXTURE_FORMAT_COLOR                                 23:20
#define NV048_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                     (0x00000000)
#define NV048_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                     (0x00000001)
#define NV048_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                     (0x00000002)
#define NV048_TEXTURE_FORMAT_COLOR_LE_R5G6B5                       (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MIN                              27:24
#define NV048_TEXTURE_FORMAT_SIZE_MIN_4X4                          (0x00000002)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_8X8                          (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_16X16                        (0x00000004)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_32X32                        (0x00000005)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_64X64                        (0x00000006)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_128X128                      (0x00000007)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_256X256                      (0x00000008)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_512X512                      (0x00000009)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_1024X1024                    (0x0000000A)
#define NV048_TEXTURE_FORMAT_SIZE_MIN_2048X2048                    (0x0000000B)
#define NV048_TEXTURE_FORMAT_SIZE_MAX                              31:28
#define NV048_TEXTURE_FORMAT_SIZE_MAX_4X4                          (0x00000002)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_8X8                          (0x00000003)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_16X16                        (0x00000004)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_32X32                        (0x00000005)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_64X64                        (0x00000006)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_128X128                      (0x00000007)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_256X256                      (0x00000008)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_512X512                      (0x00000009)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_1024X1024                    (0x0000000A)
#define NV048_TEXTURE_FORMAT_SIZE_MAX_2048X2048                    (0x0000000B)
#define NV048_TEXTURE_FILTER                                       (0x0000030C)
#define NV048_TEXTURE_FILTER_SPREAD_X                              4:0
#define NV048_TEXTURE_FILTER_IGNORE0                               7:5
#define NV048_TEXTURE_FILTER_SPREAD_Y                              12:8
#define NV048_TEXTURE_FILTER_IGNORE1                               15:13
#define NV048_TEXTURE_FILTER_SIZE_ADJUST                           23:16
#define NV048_TEXTURE_FILTER_IGNORE2                               31:24
#define NV048_FOG_COLOR                                            (0x00000310)
#define NV048_CONTROL0                                             (0x00000314)
#define NV048_CONTROL0_INTERPOLATOR                                3:0
#define NV048_CONTROL0_INTERPOLATOR_ZOH_CORNER                     (0x00000000)
#define NV048_CONTROL0_INTERPOLATOR_ZOH_CENTER                     (0x00000001)
#define NV048_CONTROL0_INTERPOLATOR_FOH_CENTER                     (0x00000002)
#define NV048_CONTROL0_WRAP_U                                      5:4
#define NV048_CONTROL0_WRAP_U_CYLINDRICAL                          (0x00000000)
#define NV048_CONTROL0_WRAP_U_WRAP                                 (0x00000001)
#define NV048_CONTROL0_WRAP_U_MIRROR                               (0x00000002)
#define NV048_CONTROL0_WRAP_U_CLAMP                                (0x00000003)
#define NV048_CONTROL0_WRAP_V                                      7:6
#define NV048_CONTROL0_WRAP_V_CYLINDRICAL                          (0x00000000)
#define NV048_CONTROL0_WRAP_V_WRAP                                 (0x00000001)
#define NV048_CONTROL0_WRAP_V_MIRROR                               (0x00000002)
#define NV048_CONTROL0_WRAP_V_CLAMP                                (0x00000003)
#define NV048_CONTROL0_COLOR_FORMAT                                9:8
#define NV048_CONTROL0_COLOR_FORMAT_LE_X8R8G8B8                    (0x00000000)
#define NV048_CONTROL0_COLOR_FORMAT_LE_A8R8G8B8                    (0x00000001)
#define NV048_CONTROL0_SOURCE_COLOR                                11:10
#define NV048_CONTROL0_SOURCE_COLOR_NORMAL                         (0x00000000)
#define NV048_CONTROL0_SOURCE_COLOR_COLOR_INVERSE                  (0x00000001)
#define NV048_CONTROL0_SOURCE_COLOR_ALPHA_INVERSE                  (0x00000002)
#define NV048_CONTROL0_SOURCE_COLOR_ALPHA_ONE                      (0x00000003)
#define NV048_CONTROL0_CULLING                                     14:12
#define NV048_CONTROL0_CULLING_NONE                                (0x00000001)
#define NV048_CONTROL0_CULLING_COUNTERCLOCKWISE                    (0x00000002)
#define NV048_CONTROL0_CULLING_CLOCKWISE                           (0x00000003)
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE                        15:15
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV048_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV048_CONTROL0_ZFUNC                                       19:16
#define NV048_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV048_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV048_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV048_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV048_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV048_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV048_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV048_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV048_CONTROL0_ZETA_WRITE                                  23:20
#define NV048_CONTROL0_ZETA_WRITE_NEVER                            (0x00000000)
#define NV048_CONTROL0_ZETA_WRITE_ALPHA                            (0x00000001)
#define NV048_CONTROL0_ZETA_WRITE_ALPHA_ZETA                       (0x00000002)
#define NV048_CONTROL0_ZETA_WRITE_ZETA                             (0x00000003)
#define NV048_CONTROL0_ZETA_WRITE_ALWAYS                           (0x00000004)
#define NV048_CONTROL0_COLOR_WRITE                                 27:24
#define NV048_CONTROL0_COLOR_WRITE_NEVER                           (0x00000000)
#define NV048_CONTROL0_COLOR_WRITE_ALPHA                           (0x00000001)
#define NV048_CONTROL0_COLOR_WRITE_ALPHA_ZETA                      (0x00000002)
#define NV048_CONTROL0_COLOR_WRITE_ZETA                            (0x00000003)
#define NV048_CONTROL0_COLOR_WRITE_ALWAYS                          (0x00000004)
#define NV048_CONTROL0_ROP                                         28:28
#define NV048_CONTROL0_ROP_BLEND_AND                               (0x00000000)
#define NV048_CONTROL0_ROP_ADD_WITH_SATURATION                     (0x00000001)
#define NV048_CONTROL0_BLEND_BETA                                  29:29
#define NV048_CONTROL0_BLEND_BETA_SRCALPHA                         (0x00000000)
#define NV048_CONTROL0_BLEND_BETA_DESTCOLOR                        (0x00000001)
#define NV048_CONTROL0_BLEND_INPUT0                                30:30
#define NV048_CONTROL0_BLEND_INPUT0_DESTCOLOR                      (0x00000000)
#define NV048_CONTROL0_BLEND_INPUT0_ZERO                           (0x00000001)
#define NV048_CONTROL0_BLEND_INPUT1                                31:31
#define NV048_CONTROL0_BLEND_INPUT1_SRCCOLOR                       (0x00000000)
#define NV048_CONTROL0_BLEND_INPUT1_ZERO                           (0x00000001)
#define NV048_CONTROL1                                             (0x00000318)
#define NV048_CONTROL1_ALPHAREF                                    7:0
#define NV048_CONTROL1_ALPHAFUNC                                   31:8
#define NV048_CONTROL1_ALPHAFUNC_NEVER                             (0x00000001)
#define NV048_CONTROL1_ALPHAFUNC_LESS                              (0x00000002)
#define NV048_CONTROL1_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV048_CONTROL1_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV048_CONTROL1_ALPHAFUNC_GREATER                           (0x00000005)
#define NV048_CONTROL1_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV048_CONTROL1_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV048_CONTROL1_ALPHAFUNC_ALWAYS                            (0x00000008)

#define NV048_TLVERTEX(a)                                          (0x00001000\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SPECULAR(a)                                 (0x00001000\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SPECULAR_I0                                 3:0
#define NV048_TLVERTEX_SPECULAR_I1                                 7:4
#define NV048_TLVERTEX_SPECULAR_I2                                 11:8
#define NV048_TLVERTEX_SPECULAR_I3                                 15:12
#define NV048_TLVERTEX_SPECULAR_I4                                 19:16
#define NV048_TLVERTEX_SPECULAR_I5                                 23:20
#define NV048_TLVERTEX_SPECULAR_FOG                                31:24
#define NV048_TLVERTEX_COLOR(a)                                    (0x00001004\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SX(a)                                       (0x00001008\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SY(a)                                       (0x0000100C\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_SZ(a)                                       (0x00001010\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_RHW(a)                                      (0x00001014\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_TU(a)                                       (0x00001018\
                                                                   +(a)*0x0020)
#define NV048_TLVERTEX_TV(a)                                       (0x0000101C\
                                                                   +(a)*0x0020)
/* obsolete stuff */
#define NV3_DX3_TEXTURED_TRIANGLE                                  (0x00000048)
#define Nv3Dx3TexturedTriangle                          Nv03Dx3TexturedTriangle
#define nv3Dx3TexturedTriangle                          Nv03Dx3TexturedTriangle
#define nv03Dx3TexturedTriangle                         Nv03Dx3TexturedTriangle

/* class NV05_VIDEO_LUT_CURSOR_DAC */
#define  NV05_VIDEO_LUT_CURSOR_DAC                                 (0x00000049)
#define NV049_NOTIFIERS_NOTIFY                                     (0)
#define NV049_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV049_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV049_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV049_NOTIFIERS_SET_DAC(b)                                 (7+(b))
#define NV049_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV049_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV049_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV049_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV049_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV049_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV049_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV049_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV049_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV049_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV049_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV049_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV049_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV049_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x058];
 NvV32 GetOffset;               /* NV049_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       4-   7*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels       8-   b*/
  NvV32 totalSize;              /* height_width U16_U16                c-   f*/
  NvV32 pixelClock;             /* in Hertz                           10-  13*/
  NvV32 format;                 /* see text                           14-  17*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x724];
} Nv049Typedef, NV05VideoLutCursorDac;
#define NV049_TYPEDEF                                     NV05VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV049_SET_OBJECT                                           (0x00000000)
#define NV049_NO_OPERATION                                         (0x00000100)
#define NV049_NOTIFY                                               (0x00000104)
#define NV049_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV049_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV049_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV049_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV049_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV049_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV049_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV049_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV049_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV049_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV049_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV049_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV049_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV049_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV049_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV049_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV049_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV049_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV049_GET_OFFSET                                           (0x000002FC)
#define NV049_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV049_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV049_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV049_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV049_SET_IMAGE_FORMAT_WHEN                                30:20
#define NV049_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV049_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV049_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV049_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV049_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV049_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV049_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV049_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV049_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV049_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV049_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV049_SET_CURSOR_POINT                                     (0x00000330)
#define NV049_SET_CURSOR_POINT_X                                   15:0
#define NV049_SET_CURSOR_POINT_Y                                   31:16
#define NV049_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV049_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV049_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000344\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV049_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV049_SET_DAC_VERTICAL_SYNC(b)                             (0x00000348\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV049_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV049_SET_DAC_TOTAL_SIZE(b)                                (0x0000034C\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV049_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV049_SET_DAC_PIXEL_CLOCK(b)                               (0x00000350\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_FORMAT(b)                                    (0x00000354\
                                                                   +(b)*0x0018)
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV049_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV049_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV049_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV049_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV049_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV049_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV049_SET_DAC_FORMAT_COLOR                                 19:16
#define NV049_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV049_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV049_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV049_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV049_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV049_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV049_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV049_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV049_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV049_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV049_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


/* class NV04_GDI_RECTANGLE_TEXT */
#define  NV04_GDI_RECTANGLE_TEXT                                   (0x0000004A)
/* NvNotification[] elements */
#define NV04A_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV04A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* memory data structures */
typedef struct {                /* start of data structure          0000-    */
   NvV32 size;                  /* height_width U16_U16 in pixels      0-   3*/
   NvV32 monochrome[1];         /* 32 monochrome pixels per write      4-   7*/
} Nv04aCharacter8[];            /* end of data structure                -0007*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels      0-   3*/
  NvV32 monochrome[3];          /* 32 monochrome pixels per write      4-   f*/
} Nv04aCharacter16[];           /* end of data structure                -000f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[7];          /* 32 monochrome pixels per write     04-  1f*/
} Nv04aCharacter32[];           /* end of data structure                -001f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[15];         /* 32 monochrome pixels per write     04-  3f*/
} Nv04aCharacter64[];           /* end of data structure                -003f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[31];         /* 32 monochrome pixels per write     04-  7f*/
} Nv04aCharacter128[];          /* end of data structure                -007f*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels     00-  03*/
  NvV32 monochrome[63];         /* 32 monochrome pixels per write     04-  ff*/
} Nv04aCharacter256[];          /* end of data structure                -00ff*/
typedef struct {                /* start of data structure          0000-    */
  NvV32 size;                   /* height_width U16_U16 in pixels    000- 003*/
  NvV32 monochrome[127];        /* 32 monochrome pixels per write    004- 1ff*/
} Nv04aCharacter512[];          /* end of data structure                -01ff*/
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaFonts;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV04A_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV04A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV04A_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 Reserved02[0x03D];
 NvV32 Color1A;                 /* rectangle color                  03fc-03ff*/
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* x_y S16_S16 in pixels               0-   3*/
  NvV32 size;                   /* width_height U16_U16 in pixels      4-   7*/
 } UnclippedRectangle[32];      /* end of aliased methods in array      -04ff*/
 NvV32 Reserved03[0x03D];
 NvV32 ClipPoint0B;             /* top_left S16_S16 in pixels       05f4-05f7*/
 NvV32 ClipPoint1B;             /* bottom_right S16_S16 in pixels   05f8-05fb*/
 NvV32 Color1B;                 /* rectangle color                  05fc-05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 point0;                 /* top_left S16_S16 in pixels          0-   3*/
  NvV32 point1;                 /* bottom_right S16_S16 in pixels      4-   7*/
 } ClippedRectangle[32];        /* end of aliased methods in array      -06ff*/
 NvV32 Reserved04[0x03B];
 NvV32 ClipPoint0C;             /* top_left S16_S16 in pixels       07ec-07ef*/
 NvV32 ClipPoint1C;             /* bottom_right S16_S16 in pixe     07f0-07f3*/
 NvV32 Color1C;                 /* color of 1 pixels                07f4-07f7*/
 NvV32 SizeC;                   /* height_width U16_U16 in pixels   07f8-07fb*/
 NvV32 PointC;                  /* y_x S16_S16 in pixels            07fc-07ff*/
 NvV32 MonochromeColor1C[128];  /* 32 monochrome pixels per write   0800-09ff*/
 NvV32 Reserved05[0x079];
 NvV32 ClipPoint0E;             /* top_left S16_S16 in pixels       0be4-0be7*/
 NvV32 ClipPoint1E;             /* bottom_right S16_S16 in pixels   0be8-0beb*/
 NvV32 Color0E;                 /* color of 0 pixels                0bec-0bef*/
 NvV32 Color1E;                 /* color of 1 pixels                0bf0-0bf3*/
 NvV32 SizeInE;                 /* height_width U16_U16 in pixels   0bf4-0bf7*/
 NvV32 SizeOutE;                /* height_width U16_U16 in pixels   0bf8-0bfb*/
 NvV32 PointE;                  /* y_x S16_S16 in pixels            0bfc-0bff*/
 NvV32 MonochromeColor01E[128]; /* 32 monochrome pixels per write   0c00-0dff*/
 NvV32 Reserved06[0x07C];
 NvV32 FontF;                   /* pitch_offset V4_U28              0ff0-0ff3*/
 NvV32 ClipPoint0F;             /* top_left S16_S16 in pixels       0ff4-0ff7*/
 NvV32 ClipPoint1F;             /* bottom_right S16_S16 in pixels   0ff8-0ffb*/
 NvV32 Color1F;                 /* color of 1 pixels                0ffc-0fff*/
 NvV32 CharacterColor1F[256];   /* y_x_index S12_S12_U8             1000-13ff*/
 NvV32 Reserved07[0x0FC];
 NvV32 FontG;                   /* pitch_offset V4_U28              17f0-17f3*/
 NvV32 ClipPoint0G;             /* top_left S16_S16 in pixels       17f4-17f7*/
 NvV32 ClipPoint1G;             /* bottom_right S16_S16 in pixels   17f8-17fb*/
 NvV32 Color1G;                 /* color of 1 pixels                17fc-17ff*/
 struct {                       /* start aliased methods in array   1800-    */
  NvV32 point;                  /* y_x S16_S16 in pixels               0-   3*/
  NvU32 index;                  /* 0<=index<=65525                     4-   7*/
 } CharacterColor1G[256];       /* end of aliased methods in array      -1fff*/
} Nv04aTypedef, Nv04GdiRectangleText;
#define NV04A_TYPEDEF                                      Nv04GdiRectangleText
/* dma method offsets, fields, and values */
#define NV04A_SET_OBJECT                                           (0x00000000)
#define NV04A_NO_OPERATION                                         (0x00000100)
#define NV04A_NOTIFY                                               (0x00000104)
#define NV04A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04A_SET_CONTEXT_DMA_FONTS                                (0x00000184)
#define NV04A_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV04A_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV04A_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV04A_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV04A_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV04A_SET_OPERATION                                        (0x000002FC)
#define NV04A_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV04A_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV04A_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV04A_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV04A_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV04A_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV04A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV04A_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV04A_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV04A_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV04A_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV04A_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV04A_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV04A_COLOR1_A                                             (0x000003FC)
#define NV04A_UNCLIPPED_RECTANGLE(a)                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_POINT(a)                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_POINT_Y                          15:0
#define NV04A_UNCLIPPED_RECTANGLE_POINT_X                          31:16
#define NV04A_UNCLIPPED_RECTANGLE_SIZE(a)                          (0x00000404\
                                                                   +(a)*0x0008)
#define NV04A_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                      15:0
#define NV04A_UNCLIPPED_RECTANGLE_SIZE_WIDTH                       31:16
#define NV04A_CLIP_POINT0_B                                        (0x000005F4)
#define NV04A_CLIP_POINT0_B_LEFT                                   15:0
#define NV04A_CLIP_POINT0_B_TOP                                    31:16
#define NV04A_CLIP_POINT1_B                                        (0x000005F8)
#define NV04A_CLIP_POINT1_B_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_B_BOTTOM                                 31:16
#define NV04A_COLOR1_B                                             (0x000005FC)
#define NV04A_CLIPPED_RECTANGLE(a)                                 (0x00000600\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_0(a)                         (0x00000600\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_0_LEFT                       15:0
#define NV04A_CLIPPED_RECTANGLE_POINT_0_TOP                        31:16
#define NV04A_CLIPPED_RECTANGLE_POINT_1(a)                         (0x00000604\
                                                                   +(a)*0x0008)
#define NV04A_CLIPPED_RECTANGLE_POINT_1_RIGHT                      15:0
#define NV04A_CLIPPED_RECTANGLE_POINT_1_BOTTOM                     31:16
#define NV04A_CLIP_POINT0_C                                        (0x000007EC)
#define NV04A_CLIP_POINT0_C_LEFT                                   15:0
#define NV04A_CLIP_POINT0_C_TOP                                    31:16
#define NV04A_CLIP_POINT1_C                                        (0x000007F0)
#define NV04A_CLIP_POINT1_C_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_C_BOTTOM                                 31:16
#define NV04A_COLOR1_C                                             (0x000007F4)
#define NV04A_SIZE_C                                               (0x000007F8)
#define NV04A_SIZE_C_WIDTH                                         15:0
#define NV04A_SIZE_C_HEIGHT                                        31:16
#define NV04A_POINT_C                                              (0x000007FC)
#define NV04A_POINT_C_X                                            15:0
#define NV04A_POINT_C_Y                                            31:16
#define NV04A_MONOCHROME_COLOR1_C(a)                               (0x00000800\
                                                                   +(a)*0x0004)
#define NV04A_CLIP_POINT0_E                                        (0x00000BE4)
#define NV04A_CLIP_POINT0_E_LEFT                                   15:0
#define NV04A_CLIP_POINT0_E_TOP                                    31:16
#define NV04A_CLIP_POINT1_E                                        (0x00000BE8)
#define NV04A_CLIP_POINT1_E_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_E_BOTTOM                                 31:16
#define NV04A_COLOR0_E                                             (0x00000BEC)
#define NV04A_COLOR1_E                                             (0x00000BF0)
#define NV04A_SIZE_IN_E                                            (0x00000BF4)
#define NV04A_SIZE_IN_E_WIDTH                                      15:0
#define NV04A_SIZE_IN_E_HEIGHT                                     31:16
#define NV04A_SIZE_OUT_E                                           (0x00000BF8)
#define NV04A_SIZE_OUT_E_WIDTH                                     15:0
#define NV04A_SIZE_OUT_E_HEIGHT                                    31:16
#define NV04A_POINT_E                                              (0x00000BFC)
#define NV04A_POINT_E_X                                            15:0
#define NV04A_POINT_E_Y                                            31:16
#define NV04A_MONOCHROME_COLOR01_E(a)                              (0x00000C00\
                                                                   +(a)*0x0004)
#define NV04A_FONT_F                                               (0x00000FF0)
#define NV04A_FONT_F_OFFSET                                        27:0
#define NV04A_FONT_F_PITCH                                         31:28
#define NV04A_FONT_F_PITCH_8                                       (0x00000003)
#define NV04A_FONT_F_PITCH_16                                      (0x00000004)
#define NV04A_FONT_F_PITCH_32                                      (0x00000005)
#define NV04A_FONT_F_PITCH_64                                      (0x00000006)
#define NV04A_FONT_F_PITCH_128                                     (0x00000007)
#define NV04A_FONT_F_PITCH_256                                     (0x00000008)
#define NV04A_FONT_F_PITCH_512                                     (0x00000009)
#define NV04A_CLIP_POINT0_F                                        (0x00000FF4)
#define NV04A_CLIP_POINT0_F_LEFT                                   15:0
#define NV04A_CLIP_POINT0_F_TOP                                    31:16
#define NV04A_CLIP_POINT1_F                                        (0x00000FF8)
#define NV04A_CLIP_POINT1_F_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_F_BOTTOM                                 31:16
#define NV04A_COLOR1_F                                             (0x00000FFC)
#define NV04A_CHARACTER_COLOR1_F(a)                                (0x00001000\
                                                                   +(a)*0x0004)
#define NV04A_CHARACTER_COLOR1_F_INDEX                             7:0
#define NV04A_CHARACTER_COLOR1_F_X                                 19:8
#define NV04A_CHARACTER_COLOR1_F_Y                                 31:20
#define NV04A_FONT_G                                               (0x000017F0)
#define NV04A_FONT_G_OFFSET                                        27:0
#define NV04A_FONT_G_PITCH                                         31:28
#define NV04A_FONT_G_PITCH_8                                       (0x00000003)
#define NV04A_FONT_G_PITCH_16                                      (0x00000004)
#define NV04A_FONT_G_PITCH_32                                      (0x00000005)
#define NV04A_FONT_G_PITCH_64                                      (0x00000006)
#define NV04A_FONT_G_PITCH_128                                     (0x00000007)
#define NV04A_FONT_G_PITCH_256                                     (0x00000008)
#define NV04A_FONT_G_PITCH_512                                     (0x00000009)
#define NV04A_CLIP_POINT0_G                                        (0x000017F4)
#define NV04A_CLIP_POINT0_G_LEFT                                   15:0
#define NV04A_CLIP_POINT0_G_TOP                                    31:16
#define NV04A_CLIP_POINT1_G                                        (0x000017F8)
#define NV04A_CLIP_POINT1_G_RIGHT                                  15:0
#define NV04A_CLIP_POINT1_G_BOTTOM                                 31:16
#define NV04A_COLOR1_G                                             (0x000017FC)
#define NV04A_CHARACTER_COLOR1_G(a)                                (0x00001800\
                                                                   +(a)*0x0008)
#define NV04A_CHARACTER_COLOR1_G_POINT(a)                          (0x00001800\
                                                                   +(a)*0x0008)
#define NV04A_CHARACTER_COLOR1_G_POINT_X                           15:0
#define NV04A_CHARACTER_COLOR1_G_POINT_Y                           31:16
#define NV04A_CHARACTER_COLOR1_G_INDEX(a)                          (0x00001804\
                                                                   +(a)*0x0008)

/* class NV03_GDI_RECTANGLE_TEXT */
#define  NV03_GDI_RECTANGLE_TEXT                                   (0x0000004B)
/* NvNotification[] elements */
#define NV04B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV04B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04B_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextPattern;       /* NV01_CONTEXT_PATTERN             0184-0187*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0188-018b*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                018c-018f*/
 NvV32 SetContextSurface;       /* NV03_CONTEXT_SURFACE_2D_DESTINAT 0190-0193*/
 NvV32 Reserved01[0x05a];
 NvV32 SetOperation;            /* NV04B_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV04B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetMonochromeFormat;     /* NV04B_SET_MONOCHROME_FORMAT_*    0304-0307*/
 NvV32 Reserved02[0x03d];
 NvV32 Color1A;                 /* rectangle color                  03fc-03ff*/
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* x_y S16_S16 in pixels               0-   3*/
  NvV32 size;                   /* width_height U16_U16 in pixels      4-   7*/
 } UnclippedRectangle[64];      /* end of aliased methods in array      -05ff*/
 NvV32 Reserved03[0x07D];
 NvV32 ClipPoint0B;             /* top_left S16_S16 in pixels       07f4-07f7*/
 NvV32 ClipPoint1B;             /* bottom_right S16_S16 in pixels   07f8-07fb*/
 NvV32 Color1B;                 /* rectangle color                  07fc-07ff*/
 struct {                       /* start aliased methods in array   0800-    */
  NvV32 point0;                 /* top_left S16_S16 in pixels          0-   3*/
  NvV32 point1;                 /* bottom_right S16_S16 in pixels      4-   7*/
 } ClippedRectangle[64];        /* end of aliased methods in array      -09ff*/
 NvV32 Reserved04[0x07B];
 NvV32 ClipPoint0C;             /* top_left S16_S16 in pixels       0bec-0bef*/
 NvV32 ClipPoint1C;             /* bottom_right S16_S16 in pixels   0bf0-0bf3*/
 NvV32 Color1C;                 /* color of 1 pixels                0bf4-0bf7*/
 NvV32 SizeC;                   /* height_width U16_U16 in pixels   0bf8-0bfb*/
 NvV32 PointC;                  /* y_x S16_S16 in pixels            0bfc-0bff*/
 NvV32 MonochromeColor1C[128];  /* 32 monochrome pixels per write   0c00-0dff*/
 NvV32 Reserved05[0x07A];
 NvV32 ClipPoint0D;             /* top_left S16_S16 in pixels       0fe8-0feb*/
 NvV32 ClipPoint1D;             /* bottom_right S16_S16 in pixels   0fec-0fef*/
 NvV32 Color1D;                 /* color of 1 pixels                0ff0-0ff3*/
 NvV32 SizeInD;                 /* height_width U16_U16 in pixels   0ff4-0ff7*/
 NvV32 SizeOutD;                /* height_width U16_U16 in pixels   0ff8-0ffb*/
 NvV32 PointD;                  /* y_x S16_S16 in pixels            0ffc-0fff*/
 NvV32 MonochromeColor1D[128];  /* 32 monochrome pixels per write   1000-11ff*/
 NvV32 Reserved06[0x079];
 NvV32 ClipPoint0E;             /* top_left S16_S16 in pixels       13e4-13e7*/
 NvV32 ClipPoint1E;             /* bottom_right S16_S16 in pixels   13e8-13eb*/
 NvV32 Color0E;                 /* color of 0 pixels                13ec-13ef*/
 NvV32 Color1E;                 /* color of 1 pixels                13f0-13f3*/
 NvV32 SizeInE;                 /* height_width U16_U16 in pixels   13f4-13f7*/
 NvV32 SizeOutE;                /* height_width U16_U16 in pixels   13f8-13fb*/
 NvV32 PointE;                  /* y_x S16_S16 in pixels            13fc-13ff*/
 NvV32 MonochromeColor01E[128]; /* 32 monochrome pixels per write   1400-15ff*/
 NvV32 Reserved07[0x280];
} Nv04bTypedef, Nv03GdiRectangleText;
#define NV04B_TYPEDEF                                      Nv03GdiRectangleText
/* dma method offsets, fields, and values */
#define NV04B_SET_OBJECT                                           (0x00000000)
#define NV04B_NO_OPERATION                                         (0x00000100)
#define NV04B_NOTIFY                                               (0x00000104)
#define NV04B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV04B_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV04B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04B_SET_CONTEXT_PATTERN                                  (0x00000184)
#define NV04B_SET_CONTEXT_ROP                                      (0x00000188)
#define NV04B_SET_CONTEXT_BETA1                                    (0x0000018C)
#define NV04B_SET_CONTEXT_SURFACE                                  (0x00000190)
#define NV04B_SET_OPERATION                                        (0x000002FC)
#define NV04B_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV04B_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV04B_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV04B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV04B_SET_COLOR_FORMAT_LE_X24Y8                            (0x00000001)
#define NV04B_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV04B_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV04B_SET_MONOCHROME_FORMAT                                (0x00000304)
#define NV04B_SET_MONOCHROME_FORMAT_CGA6_M1                        (0x00000001)
#define NV04B_SET_MONOCHROME_FORMAT_LE_M1                          (0x00000002)
#define NV04B_COLOR1_A                                             (0x000003FC)
#define NV04B_UNCLIPPED_RECTANGLE(a)                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_POINT(a)                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_POINT_X                          15:0
#define NV04B_UNCLIPPED_RECTANGLE_POINT_Y                          31:16
#define NV04B_UNCLIPPED_RECTANGLE_SIZE(a)                          (0x00000404\
                                                                   +(a)*0x0008)
#define NV04B_UNCLIPPED_RECTANGLE_SIZE_WIDTH                       15:0
#define NV04B_UNCLIPPED_RECTANGLE_SIZE_HEIGHT                      31:16
#define NV04B_CLIP_POINT0_B                                        (0x000007F4)
#define NV04B_CLIP_POINT0_B_LEFT                                   15:0
#define NV04B_CLIP_POINT0_B_TOP                                    31:16
#define NV04B_CLIP_POINT1_B                                        (0x000007F8)
#define NV04B_CLIP_POINT1_B_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_B_BOTTOM                                 31:16
#define NV04B_COLOR1_B                                             (0x000007FC)
#define NV04B_CLIPPED_RECTANGLE(a)                                 (0x00000800\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT0(a)                          (0x00000800\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT0_LEFT                        15:0
#define NV04B_CLIPPED_RECTANGLE_POINT0_TOP                         31:16
#define NV04B_CLIPPED_RECTANGLE_POINT1(a)                          (0x00000804\
                                                                   +(a)*0x0008)
#define NV04B_CLIPPED_RECTANGLE_POINT1_RIGHT                       15:0
#define NV04B_CLIPPED_RECTANGLE_POINT1_BOTTOM                      31:16
#define NV04B_CLIP_POINT0_C                                        (0x00000BEC)
#define NV04B_CLIP_POINT0_C_LEFT                                   15:0
#define NV04B_CLIP_POINT0_C_TOP                                    31:16
#define NV04B_CLIP_POINT1_C                                        (0x00000BF0)
#define NV04B_CLIP_POINT1_C_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_C_BOTTOM                                 31:16
#define NV04B_COLOR1_C                                             (0x00000BF4)
#define NV04B_SIZE_C                                               (0x00000BF8)
#define NV04B_SIZE_C_WIDTH                                         15:0
#define NV04B_SIZE_C_HEIGHT                                        31:16
#define NV04B_POINT_C                                              (0x00000BFC)
#define NV04B_POINT_C_X                                            15:0
#define NV04B_POINT_C_Y                                            31:16
#define NV04B_MONOCHROME_COLOR1_C(a)                               (0x00000C00\
                                                                   +(a)*0x0004)
#define NV04B_CLIP_POINT0_D                                        (0x00000FE8)
#define NV04B_CLIP_POINT0_D_LEFT                                   15:0
#define NV04B_CLIP_POINT0_D_TOP                                    31:16
#define NV04B_CLIP_POINT1_D                                        (0x00000FEC)
#define NV04B_CLIP_POINT1_D_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_D_BOTTOM                                 31:16
#define NV04B_COLOR1_D                                             (0x00000FF0)
#define NV04B_SIZE_IN_D                                            (0x00000FF4)
#define NV04B_SIZE_IN_D_WIDTH                                      15:0
#define NV04B_SIZE_IN_D_HEIGHT                                     31:16
#define NV04B_SIZE_OUT_D                                           (0x00000FF8)
#define NV04B_SIZE_OUT_D_WIDTH                                     15:0
#define NV04B_SIZE_OUT_D_HEIGHT                                    31:16
#define NV04B_POINT_D                                              (0x00000FFC)
#define NV04B_POINT_D_X                                            15:0
#define NV04B_POINT_D_Y                                            31:16
#define NV04B_MONOCHROME_COLOR1_D(a)                               (0x00001000\
                                                                   +(a)*0x0004)
#define NV04B_CLIP_POINT0_E                                        (0x000013E4)
#define NV04B_CLIP_POINT0_E_LEFT                                   15:0
#define NV04B_CLIP_POINT0_E_TOP                                    31:16
#define NV04B_CLIP_POINT1_E                                        (0x000013E8)
#define NV04B_CLIP_POINT1_E_RIGHT                                  15:0
#define NV04B_CLIP_POINT1_E_BOTTOM                                 31:16
#define NV04B_COLOR0_E                                             (0x000013EC)
#define NV04B_COLOR1_E                                             (0x000013F0)
#define NV04B_SIZE_IN_E                                            (0x000013F4)
#define NV04B_SIZE_IN_E_WIDTH                                      15:0
#define NV04B_SIZE_IN_E_HEIGHT                                     31:16
#define NV04B_SIZE_OUT_E                                           (0x000013F8)
#define NV04B_SIZE_OUT_E_WIDTH                                     15:0
#define NV04B_SIZE_OUT_E_HEIGHT                                    31:16
#define NV04B_POINT_E                                              (0x000013FC)
#define NV04B_POINT_E_X                                            15:0
#define NV04B_POINT_E_Y                                            31:16
#define NV04B_MONOCHROME_COLOR01_E(a)                              (0x00001400\
                                                                   +(a)*0x0004)
typedef NvV32 Nv04cTypedef;


/* class NV03_EXTERNAL_VIDEO_DECODER */
#define  NV03_EXTERNAL_VIDEO_DECODER                               (0x0000004D)
/* NvNotification[] elements */
#define NV04D_NOTIFIERS_NOTIFY                                     (0)
#define NV04D_NOTIFIERS_SET_VBI_FORMAT_NOTIFY(b)                   (1+(b))
#define NV04D_NOTIFIERS_GET_VBI_OFFSET_NOTIFY(b)                   (3+(b))
#define NV04D_NOTIFIERS_SET_IMAGE_FORMAT_NOTIFY(b)                 (5+(b))
#define NV04D_NOTIFIERS_GET_IMAGE_OFFSET_NOTIFY(b)                 (7+(b))
/* NvNotification[] fields and values */
#define NV04D_NOTIFICATION_INFO16_FIELD_NOT_STARTED                (0x0000)
#define NV04D_NOTIFICATION_INFO16_FIELD_VALID_OFFSET               (0x0001)
#define NV04D_NOTIFICATION_INFO16_FIELD_DONE                       (0x0002)
#define NV04D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04D_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04D_NOTIFY_*                   0104-0107*/
 NvV32 StopTransferVbi;         /* NV04D_STOP_TRANSFER_VBI_VALUE    0108-010b*/
 NvV32 StopTransferImage;       /* NV04D_STOP_TRANSFER_IMAGE_VALUE  010c-010f*/
 NvV32 Reserved00[0x01c];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaVbi[2];     /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 Reserved01[0x059];
 NvU32 SetImageConfig;          /* data width, task bit, null data  02f8-02fb*/
 NvU32 SetImageStartLine;       /* lines                            02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvV32 size;                   /* height_firstLine U16_U16            0-   3*/
  NvU32 offset;                 /* byte offset of top-left pixel       4-   7*/
  NvV32 format;                 /* notify_field_pitch V8_V8_U16        8-   b*/
 } SetVbi[2];                   /* end of methods in array              -0317*/
 NvV32 GetVbiOffsetNotify[2];   /* NV04D_GET_VBI_OFFSET_NOTIFY_*    0318-031f*/
 struct {                       /* start of methods in array        0320-    */
  NvV32 sizeIn;                 /* height_width U16_U16 in pixels      0-   3*/
  NvV32 sizeOut;                /* height_width U16_U16 in pixels      4-   7*/
  NvU32 offset;                 /* byte offset of top-left pixel       8-   b*/
  NvV32 format;                 /* notify_field_pitch V8_V8_U16        c-   f*/
 } SetImage[2];                 /* end of methods in array              -033f*/
 NvV32 GetImageOffsetNotify[2]; /* NV04D_GET_IMAGE_OFFSET_NOTIFY_*  0340-0347*/
 NvV32 Reserved02[0x72e];
} Nv04dTypedef, Nv03ExternalVideoDecoder;
#define NV04D_TYPEDEF                                  Nv03ExternalVideoDecoder
/* dma method offsets, fields, and values */
#define NV04D_SET_OBJECT                                           (0x00000000)
#define NV04D_NO_OPERATION                                         (0x00000100)
#define NV04D_NOTIFY                                               (0x00000104)
#define NV04D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04D_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04D_STOP_TRANSFER_VBI                                    (0x00000108)
#define NV04D_STOP_TRANSFER_VBI_VALUE                              (0x00000000)
#define NV04D_STOP_TRANSFER_IMAGE                                  (0x0000010C)
#define NV04D_STOP_TRANSFER_IMAGE_VALUE                            (0x00000000)
#define NV04D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04D_SET_CONTEXT_DMA_VBI(b)                               (0x00000184\
                                                                   +(b)*0x0004)
#define NV04D_SET_CONTEXT_DMA_IMAGE(b)                             (0x0000018C\
                                                                   +(b)*0x0004)
#define NV04D_SET_IMAGE_CONFIG                                     (0x000002f8)
#define NV04D_SET_IMAGE_CONFIG_DATA_WIDTH                          7:0
#define NV04D_SET_IMAGE_CONFIG_TASK                                8:8
#define NV04D_SET_IMAGE_CONFIG_TASK_A                              (0x00000000)
#define NV04D_SET_IMAGE_CONFIG_TASK_B                              (0x00000001)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA                           13:12
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_DISABLED                  (0x00000000)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_BYTE_ENABLED              (0x00000001)
#define NV04D_SET_IMAGE_CONFIG_NULL_DATA_LINE_ENABLED              (0x00000002)
#define NV04D_SET_IMAGE_CONFIG_NULL_VALUE                          31:16
#define NV04D_SET_IMAGE_START_LINE                                 (0x000002FC)
#define NV04D_SET_VBI(b)                                           (0x00000300\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_SIZE(b)                                      (0x00000300\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_SIZE_FIRST_LINE                              15:0
#define NV04D_SET_VBI_SIZE_HEIGHT                                  31:16
#define NV04D_SET_VBI_OFFSET(b)                                    (0x00000304\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_FORMAT(b)                                    (0x00000308\
                                                                   +(b)*0x000C)
#define NV04D_SET_VBI_FORMAT_PITCH                                 15:0
#define NV04D_SET_VBI_FORMAT_FIELD                                 23:16
#define NV04D_SET_VBI_FORMAT_FIELD_PROGRESSIVE                     (0x00000000)
#define NV04D_SET_VBI_FORMAT_FIELD_EVEN_FIELD                      (0x00000001)
#define NV04D_SET_VBI_FORMAT_FIELD_ODD_FIELD                       (0x00000002)
#define NV04D_SET_VBI_FORMAT_NOTIFY                                31:24
#define NV04D_SET_VBI_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV04D_SET_VBI_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV04D_GET_VBI_OFFSET_NOTIFY(b)                             (0x00000318\
                                                                   +(b)*0x0004)
#define NV04D_GET_VBI_OFFSET_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV04D_GET_VBI_OFFSET_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV04D_SET_IMAGE(b)                                         (0x00000320\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_IN(b)                                 (0x00000320\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_IN_WIDTH                              15:0
#define NV04D_SET_IMAGE_SIZE_IN_HEIGHT                             31:16
#define NV04D_SET_IMAGE_SIZE_OUT(b)                                (0x00000324\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_SIZE_OUT_WIDTH                             15:0
#define NV04D_SET_IMAGE_SIZE_OUT_HEIGHT                            31:16
#define NV04D_SET_IMAGE_OFFSET(b)                                  (0x00000328\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_FORMAT(b)                                  (0x0000032C\
                                                                   +(b)*0x0010)
#define NV04D_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV04D_SET_IMAGE_FORMAT_FIELD                               23:16
#define NV04D_SET_IMAGE_FORMAT_FIELD_PROGRESSIVE                   (0x00000000)
#define NV04D_SET_IMAGE_FORMAT_FIELD_EVEN_FIELD                    (0x00000001)
#define NV04D_SET_IMAGE_FORMAT_FIELD_ODD_FIELD                     (0x00000002)
#define NV04D_SET_IMAGE_FORMAT_NOTIFY                              31:24
#define NV04D_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV04D_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY(b)                           (0x00000340\
                                                                   +(b)*0x0004)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV04D_GET_IMAGE_OFFSET_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_VIDEO_DECOMPRESSOR                            (0x0000004E)
#define Nv3ExternalVideoDecoder                        Nv03ExternalVideoDecoder
#define nv3ExternalVideoDecoder                        Nv03ExternalVideoDecoder
#define nv03ExternalVideoDecoder                       Nv03ExternalVideoDecoder


/* class NV03_EXTERNAL_VIDEO_DECOMPRESSOR */
#define  NV03_EXTERNAL_VIDEO_DECOMPRESSOR                          (0x0000004E)
/* NvNotification[] elements */
#define NV04E_NOTIFIERS_NOTIFY                                     (0)
#define NV04E_NOTIFIERS_SET_DATA_NOTIFY(b)                         (1+(b))
#define NV04E_NOTIFIERS_SET_IMAGE_NOTIFY(b)                        (3+(b))
/* NvNotification[] fields and values */
#define NV04E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04E_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04E_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV04E_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaData[2];    /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 Reserved01[0x05b];
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* in bytes                            0-   3*/
  NvU32 length;                 /* in bytes                            4-   7*/
  NvV32 notify;                 /* NV04E_SET_DATA_NOTIFY_*             8-   b*/
 } SetData[2];                  /* end of methods in array              -0317*/
 struct {                       /* start of methods in array        0318-    */
  NvV32 formatIn;               /* zero_field V16_V16                 00-  03*/
  NvV32 size;                   /* height_width U16_U16 in pixels     04-  07*/
  NvU32 offsetOut;              /* byte offset of top-left pixel      08-  0b*/
  NvV32 formatOut;              /* ignore_pitch V16_U16               0c-  0f*/
  NvV32 notify;                 /* NV04E_SET_IMAGE_NOTIFY_*           10-  13*/
 } SetImage[2];                 /* end of methods in array              -033f*/
 NvV32 Reserved02[0x730];
} Nv04eTypedef, Nv03ExternalVideoDecompressor;
#define NV04E_TYPEDEF                             Nv03ExternalVideoDecompressor
/* dma method offsets, fields, and values */
#define NV04E_SET_OBJECT                                           (0x00000000)
#define NV04E_NO_OPERATION                                         (0x00000100)
#define NV04E_NOTIFY                                               (0x00000104)
#define NV04E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04E_STOP_TRANSFER                                        (0x00000108)
#define NV04E_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV04E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04E_SET_CONTEXT_DMA_DATA(b)                              (0x00000184\
                                                                   +(b)*0x0004)
#define NV04E_SET_CONTEXT_DMA_IMAGE(b)                             (0x0000018C\
                                                                   +(b)*0x0004)
#define NV04E_SET_DATA(b)                                          (0x00000300\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_OFFSET(b)                                   (0x00000300\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_LENGTH(b)                                   (0x00000304\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_NOTIFY(b)                                   (0x00000308\
                                                                   +(b)*0x000C)
#define NV04E_SET_DATA_NOTIFY_WRITE_ONLY                           (0x00000000)
#define NV04E_SET_DATA_NOTIFY_WRITE_THEN_AWAKEN                    (0x00000001)
#define NV04E_SET_IMAGE(b)                                         (0x00000318\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_IN(b)                               (0x00000318\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD                            15:0
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_PROGRESSIVE                (0x00000001)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_EVEN_FIELD                 (0x00000002)
#define NV04E_SET_IMAGE_FORMAT_IN_FIELD_ODD_FIELD                  (0x00000003)
#define NV04E_SET_IMAGE_FORMAT_IN_ZERO                             31:16
#define NV04E_SET_IMAGE_SIZE(b)                                    (0x0000031C\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_SIZE_WIDTH                                 15:0
#define NV04E_SET_IMAGE_SIZE_HEIGHT                                31:16
#define NV04E_SET_IMAGE_OFFSET_OUT(b)                              (0x00000320\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_OUT(b)                              (0x00000324\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_FORMAT_OUT_PITCH                           15:0
#define NV04E_SET_IMAGE_FORMAT_OUT_IGNORE                          31:16
#define NV04E_SET_IMAGE_NOTIFY(b)                                  (0x00000328\
                                                                   +(b)*0x0014)
#define NV04E_SET_IMAGE_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NV04E_SET_IMAGE_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_VIDEO_DECOMPRESSOR                            (0x0000004E)
#define Nv3ExternalVideoDecompressor              Nv03ExternalVideoDecompressor
#define nv3ExternalVideoDecompressor              Nv03ExternalVideoDecompressor
#define nv03ExternalVideoDecompressor             Nv03ExternalVideoDecompressor


/* class NV01_EXTERNAL_PARALLEL_BUS */
#define  NV01_EXTERNAL_PARALLEL_BUS                                (0x0000004F)
/* NvNotification[] elements */
#define NV04F_NOTIFIERS_NOTIFY                                     (0)
#define NV04F_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV04F_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV04F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV04F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV04F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV04F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV04F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV04F_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV04F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV04F_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV04F_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV04F_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV04F_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv04fTypedef, Nv01ExternalParallelBus;
#define NV04F_TYPEDEF                                   Nv01ExternalParallelBus
/* dma method offsets, fields, and values */
#define NV04F_SET_OBJECT                                           (0x00000000)
#define NV04F_NO_OPERATION                                         (0x00000100)
#define NV04F_NOTIFY                                               (0x00000104)
#define NV04F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV04F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV04F_STOP_TRANSFER                                        (0x00000108)
#define NV04F_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV04F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV04F_WRITE                                                (0x00000300)
#define NV04F_WRITE_SIZE                                           (0x00000300)
#define NV04F_WRITE_SIZE_DATA                                      15:0
#define NV04F_WRITE_SIZE_ADDRESS                                   31:16
#define NV04F_WRITE_ADDRESS                                        (0x00000304)
#define NV04F_WRITE_DATA                                           (0x00000308)
#define NV04F_READ                                                 (0x0000030C)
#define NV04F_READ_SIZE                                            (0x0000030C)
#define NV04F_READ_SIZE_DATA                                       15:0
#define NV04F_READ_SIZE_ADDRESS                                    31:16
#define NV04F_READ_ADDRESS                                         (0x00000310)
#define NV04F_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV04F_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV04F_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV04F_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV04F_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV04F_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV1_EXTERNAL_PARALLEL_BUS                                  (0x0000004F)
#define Nv1ExternalParallelBus                          Nv01ExternalParallelBus
#define nv1ExternalParallelBus                          Nv01ExternalParallelBus
#define nv01ExternalParallelBus                         Nv01ExternalParallelBus


/* class NV03_EXTERNAL_MONITOR_BUS */
#define  NV03_EXTERNAL_MONITOR_BUS                                 (0x00000050)
/* NvNotification[] elements */
#define NV050_NOTIFIERS_NOTIFY                                     (0)
#define NV050_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV050_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV050_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV050_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV050_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV050_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV050_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV050_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV050_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV050_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV050_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV050_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV050_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv050Typedef, Nv03ExternalMonitorBus;
#define NV050_TYPEDEF                                    Nv03ExternalMonitorBus
/* dma method offsets, fields, and values */
#define NV050_SET_OBJECT                                           (0x00000000)
#define NV050_NO_OPERATION                                         (0x00000100)
#define NV050_NOTIFY                                               (0x00000104)
#define NV050_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV050_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV050_STOP_TRANSFER                                        (0x00000108)
#define NV050_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV050_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV050_WRITE                                                (0x00000300)
#define NV050_WRITE_SIZE                                           (0x00000300)
#define NV050_WRITE_SIZE_DATA                                      15:0
#define NV050_WRITE_SIZE_ADDRESS                                   31:16
#define NV050_WRITE_ADDRESS                                        (0x00000304)
#define NV050_WRITE_DATA                                           (0x00000308)
#define NV050_READ                                                 (0x0000030C)
#define NV050_READ_SIZE                                            (0x0000030C)
#define NV050_READ_SIZE_DATA                                       15:0
#define NV050_READ_SIZE_ADDRESS                                    31:16
#define NV050_READ_ADDRESS                                         (0x00000310)
#define NV050_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV050_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV050_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV050_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV050_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV050_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV3_EXTERNAL_MONITOR_BUS                                   (0x00000050)
#define Nv3ExternalMonitorBus                            Nv03ExternalMonitorBus
#define nv3ExternalMonitorBus                            Nv03ExternalMonitorBus
#define nv03ExternalMonitorBus                           Nv03ExternalMonitorBus


/* class NV04_EXTERNAL_SERIAL_BUS */
#define  NV04_EXTERNAL_SERIAL_BUS                                  (0x00000051)
/* NvNotification[] elements */
#define NV051_NOTIFIERS_NOTIFY                                     (0)
#define NV051_NOTIFICATION_READ_GET_DATA_NOTIFY                    (1)
#define NV051_NOTIFICATION_SET_INTERRUPT_NOTIFY                    (2)
/* NvNotification[] fields and values */
#define NV051_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV051_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV051_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV051_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV051_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV051_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NV051_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV051_NOTIFY_*                   0104-0107*/
 NvV32 StopTransfer;            /* NV051_STOP_TRANSFER_VALUE        0108-010b*/
 NvV32 Reserved00[0x01d];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 WriteSize;               /* address_data U16_U16             0300-0303*/
 NvU32 WriteAddress;            /* in bytes                         0304-0307*/
 NvV32 WriteData;               /* data                             0308-030b*/
 NvV32 ReadSize;                /* address_data U16_U16             030c-030f*/
 NvU32 ReadAddress;             /* in bytes                         0310-0313*/
 NvV32 ReadGetDataNotify;       /* NV051_READ_GET_DATA_NOTIFY_*     0314-0317*/
 NvV32 SetInterruptNotify;      /* NV051_SET_INTERRUPT_NOTIFY_*     0318-031b*/
 NvV32 Reserved02[0x739];
} Nv051Typedef, Nv04ExternalSerialBus;
#define NV051_TYPEDEF                                     Nv04ExternalSerialBus
/* dma method offsets, fields, and values */
#define NV051_SET_OBJECT                                           (0x00000000)
#define NV051_NO_OPERATION                                         (0x00000100)
#define NV051_NOTIFY                                               (0x00000104)
#define NV051_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV051_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV051_STOP_TRANSFER                                        (0x00000108)
#define NV051_STOP_TRANSFER_VALUE                                  (0x00000000)
#define NV051_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV051_WRITE                                                (0x00000300)
#define NV051_WRITE_SIZE                                           (0x00000300)
#define NV051_WRITE_SIZE_DATA                                      15:0
#define NV051_WRITE_SIZE_ADDRESS                                   31:16
#define NV051_WRITE_ADDRESS                                        (0x00000304)
#define NV051_WRITE_DATA                                           (0x00000308)
#define NV051_READ                                                 (0x0000030C)
#define NV051_READ_SIZE                                            (0x0000030C)
#define NV051_READ_SIZE_DATA                                       15:0
#define NV051_READ_SIZE_ADDRESS                                    31:16
#define NV051_READ_ADDRESS                                         (0x00000310)
#define NV051_READ_GET_DATA_NOTIFY                                 (0x00000314)
#define NV051_READ_GET_DATA_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV051_READ_GET_DATA_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
#define NV051_SET_INTERRUPT_NOTIFY                                 (0x00000318)
#define NV051_SET_INTERRUPT_NOTIFY_WRITE_ONLY                      (0x00000000)
#define NV051_SET_INTERRUPT_NOTIFY_WRITE_THEN_AWAKEN               (0x00000001)
/* obsolete stuff */
#define NV03_EXTERNAL_SERIAL_BUS                                   (0x00000051)
#define NV3_EXTERNAL_SERIAL_BUS                                    (0x00000051)
#define Nv03ExternalSerialBus                             Nv04ExternalSerialBus
#define nv03ExternalSerialBus                             Nv04ExternalSerialBus
#define Nv3ExternalSerialBus                              Nv04ExternalSerialBus
#define nv3ExternalSerialBus                              Nv04ExternalSerialBus
#define nv04ExternalSerialBus                             Nv04ExternalSerialBus


/* class NV04_CONTEXT_SURFACE_SWIZZLED */
#define  NV04_CONTEXT_SURFACE_SWIZZLED                             (0x00000052)
/* NvNotification[] elements */
#define NV052_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV052_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV052_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV052_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV052_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV052_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV052_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV052_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetFormat;               /* height_width_color V8_V8_V16     0300-0303*/
 NvU32 SetOffset;               /* byte offset of top-left pixel    0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv052Typedef, Nv04ContextSurfaceSwizzled;
#define NV052_TYPEDEF                                Nv04ContextSurfaceSwizzled
/* dma method offsets, fields, and values */
#define NV052_SET_OBJECT                                           (0x00000000)
#define NV052_NO_OPERATION                                         (0x00000100)
#define NV052_NOTIFY                                               (0x00000104)
#define NV052_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV052_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV052_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV052_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV052_SET_FORMAT                                           (0x00000300)
#define NV052_SET_FORMAT_COLOR                                     15:0
#define NV052_SET_FORMAT_COLOR_LE_Y8                               (0x00000001)
#define NV052_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV052_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV052_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000004)
#define NV052_SET_FORMAT_COLOR_LE_Y16                              (0x00000005)
#define NV052_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV052_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV052_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV052_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x0000000A)
#define NV052_SET_FORMAT_COLOR_LE_Y32                              (0x0000000B)
#define NV052_SET_FORMAT_WIDTH                                     23:16
#define NV052_SET_FORMAT_WIDTH_1                                   (0x00000000)
#define NV052_SET_FORMAT_WIDTH_2                                   (0x00000001)
#define NV052_SET_FORMAT_WIDTH_4                                   (0x00000002)
#define NV052_SET_FORMAT_WIDTH_8                                   (0x00000003)
#define NV052_SET_FORMAT_WIDTH_16                                  (0x00000004)
#define NV052_SET_FORMAT_WIDTH_32                                  (0x00000005)
#define NV052_SET_FORMAT_WIDTH_64                                  (0x00000006)
#define NV052_SET_FORMAT_WIDTH_128                                 (0x00000007)
#define NV052_SET_FORMAT_WIDTH_256                                 (0x00000008)
#define NV052_SET_FORMAT_WIDTH_512                                 (0x00000009)
#define NV052_SET_FORMAT_WIDTH_1024                                (0x0000000A)
#define NV052_SET_FORMAT_WIDTH_2048                                (0x0000000B)
#define NV052_SET_FORMAT_HEIGHT                                    31:24
#define NV052_SET_FORMAT_HEIGHT_1                                  (0x00000000)
#define NV052_SET_FORMAT_HEIGHT_2                                  (0x00000001)
#define NV052_SET_FORMAT_HEIGHT_4                                  (0x00000002)
#define NV052_SET_FORMAT_HEIGHT_8                                  (0x00000003)
#define NV052_SET_FORMAT_HEIGHT_16                                 (0x00000004)
#define NV052_SET_FORMAT_HEIGHT_32                                 (0x00000005)
#define NV052_SET_FORMAT_HEIGHT_64                                 (0x00000006)
#define NV052_SET_FORMAT_HEIGHT_128                                (0x00000007)
#define NV052_SET_FORMAT_HEIGHT_256                                (0x00000008)
#define NV052_SET_FORMAT_HEIGHT_512                                (0x00000009)
#define NV052_SET_FORMAT_HEIGHT_1024                               (0x0000000A)
#define NV052_SET_FORMAT_HEIGHT_2048                               (0x0000000B)
#define NV052_SET_OFFSET                                           (0x00000304)
/* obsolete stuff */
#define NV4_CONTEXT_SURFACE_SWIZZLED                               (0x00000052)
#define Nv4ContextSurfaceSwizzled                    Nv04ContextSurfaceSwizzled
#define nv4ContextSurfaceSwizzled                    Nv04ContextSurfaceSwizzled
#define nv04ContextSurfaceSwizzled                   Nv04ContextSurfaceSwizzled


/* class NV04_CONTEXT_SURFACES_3D */
#define  NV04_CONTEXT_SURFACES_3D                                  (0x00000053)
/* NvNotification[] elements */
#define NV053_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV053_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV053_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV053_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV053_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV053_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV053_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV053_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaColor;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaZeta;       /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05b];
 NvV32 SetClipHorizontal;       /* width_x U16_U16                  02F8-02FB*/
 NvV32 SetClipVertical;         /* height_y U16_U16                 02FC-02FF*/
 NvV32 SetFormat;               /* height_width_type_color all V8   0300-0303*/
 NvV32 SetClipSize;             /* height_width U16_U16             0304-0307*/
 NvU32 SetPitch;                /* zeta_color U16_U16               0308-030b*/
 NvU32 SetOffsetColor;          /* byte offset of top-left pixel    030c-030f*/
 NvU32 SetOffsetZeta;           /* byte offset of top-left pixel    0310-0313*/
 NvV32 Reserved02[0x73b];
} Nv053Typedef, Nv04ContextSurfaces3d;
#define NV053_TYPEDEF                                     Nv04ContextSurfaces3d
/* dma method offsets, fields, and values */
#define NV053_SET_OBJECT                                           (0x00000000)
#define NV053_NO_OPERATION                                         (0x00000100)
#define NV053_NOTIFY                                               (0x00000104)
#define NV053_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV053_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV053_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV053_SET_CONTEXT_DMA_COLOR                                (0x00000184)
#define NV053_SET_CONTEXT_DMA_ZETA                                 (0x00000188)
#define NV053_SET_FORMAT                                           (0x00000300)
#define NV053_SET_FORMAT_COLOR                                     7:0
#define NV053_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000001)
#define NV053_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000002)
#define NV053_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000003)
#define NV053_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000004)
#define NV053_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000005)
#define NV053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000006)
#define NV053_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000007)
#define NV053_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x00000008)
#define NV053_SET_FORMAT_TYPE                                      15:8
#define NV053_SET_FORMAT_TYPE_PITCH                                (0x00000001)
#define NV053_SET_FORMAT_TYPE_SWIZZLE                              (0x00000002)
#define NV053_SET_FORMAT_WIDTH                                     23:16
#define NV053_SET_FORMAT_HEIGHT                                    31:24
#define NV053_SET_CLIP_HORIZONTAL                                  (0x000002F8)
#define NV053_SET_CLIP_HORIZONTAL_X                                15:0
#define NV053_SET_CLIP_HORIZONTAL_WIDTH                            31:16
#define NV053_SET_CLIP_VERTICAL                                    (0x000002FC)
#define NV053_SET_CLIP_VERTICAL_Y                                  15:0
#define NV053_SET_CLIP_VERTICAL_HEIGHT                             31:16
#define NV053_SET_CLIP_SIZE                                        (0x00000304)
#define NV053_SET_CLIP_SIZE_WIDTH                                  15:0
#define NV053_SET_CLIP_SIZE_HEIGHT                                 31:16
#define NV053_SET_PITCH                                            (0x00000308)
#define NV053_SET_PITCH_COLOR                                      15:0
#define NV053_SET_PITCH_ZETA                                       31:16
#define NV053_SET_OFFSET_COLOR                                     (0x0000030C)
#define NV053_SET_OFFSET_ZETA                                      (0x00000310)


/* class NV04_DX5_TEXTURED_TRIANGLE */
#define  NV04_DX5_TEXTURED_TRIANGLE                                (0x00000054)
/* NvNotification[] elements */
#define NV054_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV054_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV054_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV054_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV054_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV054_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV054_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV054_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ColorKey;                /* texture color key value          0300-0303*/
 NvU32 Offset;                  /* texture offset in bytes          0304-0307*/
 NvV32 Format;                  /* see text                         0308-030b*/
 NvV32 Filter;                  /* see text                         030c-030f*/
 NvV32 Blend;                   /* see text                         0310-0313*/
 NvV32 Control;                 /* see text                         0314-0317*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0318-031b*/
 NvV32 Reserved02[0x039];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[16];                /* end of methods in array              -05ff*/
 NvV32 DrawPrimitive[64];       /* see text                         0600-06ff*/
 NvV32 Reserved03[0x640];
} Nv054Typedef, Nv04Dx5TexturedTriangle;
#define NV054_TYPEDEF                                   Nv04Dx5TexturedTriangle
/* dma method offsets, fields, and values */
#define NV054_SET_OBJECT                                           (0x00000000)
#define NV054_NO_OPERATION                                         (0x00000100)
#define NV054_NOTIFY                                               (0x00000104)
#define NV054_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV054_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV054_STALL_PIPE                                           (0x00000108)
#define NV054_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV054_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV054_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV054_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV054_COLOR_KEY                                            (0x00000300)
#define NV054_OFFSET                                               (0x00000304)
#define NV054_FORMAT                                               (0x00000308)
#define NV054_FORMAT_CONTEXT_DMA                                   1:0
#define NV054_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV054_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV054_FORMAT_COLORKEYENABLE                                3:2
#define NV054_FORMAT_COLORKEYENABLE_FALSE                          (0x00000000)
#define NV054_FORMAT_COLORKEYENABLE_TRUE                           (0x00000001)
#define NV054_FORMAT_ORIGIN_ZOH                                    5:4
#define NV054_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV054_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV054_FORMAT_ORIGIN_FOH                                    7:6
#define NV054_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV054_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV054_FORMAT_COLOR                                         11:8
#define NV054_FORMAT_COLOR_LE_Y8                                   (0x00000001)
#define NV054_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV054_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV054_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV054_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV054_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV054_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV054_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV054_FORMAT_BASE_SIZE_U                                   19:16
#define NV054_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV054_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV054_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV054_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV054_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV054_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV054_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV054_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV054_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV054_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV054_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV054_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV054_FORMAT_BASE_SIZE_V                                   23:20
#define NV054_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV054_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV054_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV054_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV054_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV054_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV054_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV054_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV054_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV054_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV054_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV054_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV054_FORMAT_TEXTUREADDRESSU                               26:24
#define NV054_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV054_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV054_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV054_FORMAT_WRAPU                                         27:27
#define NV054_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV054_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSV                               30:28
#define NV054_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV054_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV054_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV054_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV054_FORMAT_WRAPV                                         31:31
#define NV054_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV054_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV054_FILTER                                               (0x0000030C)
#define NV054_FILTER_KERNEL_SIZE_X                                 7:0
#define NV054_FILTER_KERNEL_SIZE_Y                                 14:8
#define NV054_FILTER_MIPMAP_DITHER_ENABLE                          15:15
#define NV054_FILTER_MIPMAP_DITHER_ENABLE_FALSE                    (0x00000000)
#define NV054_FILTER_MIPMAP_DITHER_ENABLE_TRUE                     (0x00000001)
#define NV054_FILTER_MIPMAPLODBIAS                                 23:16
#define NV054_FILTER_TEXTUREMIN                                    26:24
#define NV054_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV054_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV054_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV054_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV054_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV054_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE                     27:27
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE_FALSE               (0x00000000)
#define NV054_FILTER_ANISOTROPIC_MINIFY_ENABLE_TRUE                (0x00000001)
#define NV054_FILTER_TEXTUREMAG                                    30:28
#define NV054_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV054_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV054_FILTER_TEXTUREMAG_MIPNEAREST                         (0x00000003)
#define NV054_FILTER_TEXTUREMAG_MIPLINEAR                          (0x00000004)
#define NV054_FILTER_TEXTUREMAG_LINEARMIPNEAREST                   (0x00000005)
#define NV054_FILTER_TEXTUREMAG_LINEARMIPLINEAR                    (0x00000006)
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE                    31:31
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_FALSE              (0x00000000)
#define NV054_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_TRUE               (0x00000001)
#define NV054_BLEND                                                (0x00000310)
#define NV054_BLEND_TEXTUREMAPBLEND                                3:0
#define NV054_BLEND_TEXTUREMAPBLEND_DECAL                          (0x00000001)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATE                       (0x00000002)
#define NV054_BLEND_TEXTUREMAPBLEND_DECALALPHA                     (0x00000003)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATEALPHA                  (0x00000004)
#define NV054_BLEND_TEXTUREMAPBLEND_DECALMASK                      (0x00000005)
#define NV054_BLEND_TEXTUREMAPBLEND_MODULATEMASK                   (0x00000006)
#define NV054_BLEND_TEXTUREMAPBLEND_COPY                           (0x00000007)
#define NV054_BLEND_TEXTUREMAPBLEND_ADD                            (0x00000008)
#define NV054_BLEND_MASK_BIT                                       5:4
#define NV054_BLEND_MASK_BIT_LSB                                   (0x00000001)
#define NV054_BLEND_MASK_BIT_MSB                                   (0x00000002)
#define NV054_BLEND_SHADEMODE                                      7:6
#define NV054_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV054_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV054_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV054_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV054_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV054_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV054_BLEND_SPECULARENABLE                                 15:12
#define NV054_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV054_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV054_BLEND_FOGENABLE                                      19:16
#define NV054_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV054_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV054_BLEND_ALPHABLENDENABLE                               23:20
#define NV054_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV054_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV054_BLEND_SRCBLEND                                       27:24
#define NV054_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV054_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV054_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV054_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV054_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV054_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV054_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV054_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV054_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV054_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV054_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV054_BLEND_DESTBLEND                                      31:28
#define NV054_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV054_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV054_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV054_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV054_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV054_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV054_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV054_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV054_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV054_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV054_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV054_CONTROL                                              (0x00000314)
#define NV054_CONTROL_ALPHAREF                                     7:0
#define NV054_CONTROL_ALPHAFUNC                                    11:8
#define NV054_CONTROL_ALPHAFUNC_NEVER                              (0x00000001)
#define NV054_CONTROL_ALPHAFUNC_LESS                               (0x00000002)
#define NV054_CONTROL_ALPHAFUNC_EQUAL                              (0x00000003)
#define NV054_CONTROL_ALPHAFUNC_LESSEQUAL                          (0x00000004)
#define NV054_CONTROL_ALPHAFUNC_GREATER                            (0x00000005)
#define NV054_CONTROL_ALPHAFUNC_NOTEQUAL                           (0x00000006)
#define NV054_CONTROL_ALPHAFUNC_GREATEREQUAL                       (0x00000007)
#define NV054_CONTROL_ALPHAFUNC_ALWAYS                             (0x00000008)
#define NV054_CONTROL_ALPHATESTENABLE                              12:12
#define NV054_CONTROL_ALPHATESTENABLE_FALSE                        (0x00000000)
#define NV054_CONTROL_ALPHATESTENABLE_TRUE                         (0x00000001)
#define NV054_CONTROL_ORIGIN                                       13:13
#define NV054_CONTROL_ORIGIN_CENTER                                (0x00000000)
#define NV054_CONTROL_ORIGIN_CORNER                                (0x00000001)
#define NV054_CONTROL_ZENABLE                                      15:14
#define NV054_CONTROL_ZENABLE_FALSE                                (0x00000000)
#define NV054_CONTROL_ZENABLE_TRUE                                 (0x00000001)
#define NV054_CONTROL_ZFUNC                                        19:16
#define NV054_CONTROL_ZFUNC_NEVER                                  (0x00000001)
#define NV054_CONTROL_ZFUNC_LESS                                   (0x00000002)
#define NV054_CONTROL_ZFUNC_EQUAL                                  (0x00000003)
#define NV054_CONTROL_ZFUNC_LESSEQUAL                              (0x00000004)
#define NV054_CONTROL_ZFUNC_GREATER                                (0x00000005)
#define NV054_CONTROL_ZFUNC_NOTEQUAL                               (0x00000006)
#define NV054_CONTROL_ZFUNC_GREATEREQUAL                           (0x00000007)
#define NV054_CONTROL_ZFUNC_ALWAYS                                 (0x00000008)
#define NV054_CONTROL_CULLMODE                                     21:20
#define NV054_CONTROL_CULLMODE_NONE                                (0x00000001)
#define NV054_CONTROL_CULLMODE_CW                                  (0x00000002)
#define NV054_CONTROL_CULLMODE_CCW                                 (0x00000003)
#define NV054_CONTROL_DITHERENABLE                                 22:22
#define NV054_CONTROL_DITHERENABLE_FALSE                           (0x00000000)
#define NV054_CONTROL_DITHERENABLE_TRUE                            (0x00000001)
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE                         23:23
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE_FALSE                   (0x00000000)
#define NV054_CONTROL_Z_PERSPECTIVE_ENABLE_TRUE                    (0x00000001)
#define NV054_CONTROL_ZWRITEENABLE                                 29:24
#define NV054_CONTROL_ZWRITEENABLE_FALSE                           (0x00000000)
#define NV054_CONTROL_ZWRITEENABLE_TRUE                            (0x00000001)
#define NV054_CONTROL_Z_FORMAT                                     31:30
#define NV054_CONTROL_Z_FORMAT_FIXED                               (0x00000001)
#define NV054_CONTROL_Z_FORMAT_FLOAT                               (0x00000002)
#define NV054_FOG_COLOR                                            (0x00000318)
#define NV054_TLVERTEX(i)                                          (0x00000400\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SX(i)                                       (0x00000400\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SY(i)                                       (0x00000404\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SZ(i)                                       (0x00000408\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_RHW(i)                                      (0x0000040C\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_COLOR(i)                                    (0x00000410\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_COLOR_BLUE                                  7:0
#define NV054_TLVERTEX_COLOR_GREEN                                 15:8
#define NV054_TLVERTEX_COLOR_RED                                   23:16
#define NV054_TLVERTEX_COLOR_ALPHA                                 31:24
#define NV054_TLVERTEX_SPECULAR(i)                                 (0x00000414\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_SPECULAR_BLUE                               7:0
#define NV054_TLVERTEX_SPECULAR_GREEN                              15:8
#define NV054_TLVERTEX_SPECULAR_RED                                23:16
#define NV054_TLVERTEX_SPECULAR_FOG                                31:24
#define NV054_TLVERTEX_TU(i)                                       (0x00000418\
                                                                   +(i)*0x0020)
#define NV054_TLVERTEX_TV(i)                                       (0x0000041C\
                                                                   +(i)*0x0020)
#define NV054_DRAW_PRIMITIVE(a)                                    (0x00000600\
                                                                   +(a)*0x0004)
#define NV054_DRAW_PRIMITIVE_I0                                    3:0
#define NV054_DRAW_PRIMITIVE_I1                                    7:4
#define NV054_DRAW_PRIMITIVE_I2                                    11:8
#define NV054_DRAW_PRIMITIVE_I3                                    15:12
#define NV054_DRAW_PRIMITIVE_I4                                    19:16
#define NV054_DRAW_PRIMITIVE_I5                                    31:20
/* obsolete stuff */
#define NV4_DX5_TEXTURED_TRIANGLE                                  (0x00000054)
#define Nv4Dx5TexturedTriangle                          Nv04Dx5TexturedTriangle
#define nv4Dx5TexturedTriangle                          Nv04Dx5TexturedTriangle
#define nv04Dx5TexturedTriangle                         Nv04Dx5TexturedTriangle


/* class NV04_DX6_MULTI_TEXTURE_TRIANGLE */
#define  NV04_DX6_MULTI_TEXTURE_TRIANGLE                           (0x00000055)
/* NvNotification[] elements */
#define NV055_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV055_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV055_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV055_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV055_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV055_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV055_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV055_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05e];
 NvU32 Offset[2];               /* offset in bytes                  0308-030f*/
 NvV32 Format[2];               /* see text                         0310-0317*/
 NvV32 Filter[2];               /* see text                         0318-031f*/
 NvV32 Combine0Alpha;           /* see text                         0320-0323*/
 NvV32 Combine0Color;           /* see text                         0324-0327*/
 NvV32 Reserved02[0x001];
 NvV32 Combine1Alpha;           /* see text                         032c-032f*/
 NvV32 Combine1Color;           /* see text                         0330-0333*/
 NvV32 CombineFactor;           /* A8R8G8B8                         0334-0337*/
 NvV32 Blend;                   /* see text                         0338-033b*/
 NvV32 Control0;                /* see text                         033c-033f*/
 NvV32 Control1;                /* see text                         0340-0343*/
 NvV32 Control2;                /* see text                         0344-0347*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0348-034b*/
 NvV32 Reserved03[0x02D];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu0;                    /* texture 0 u coordinate             18-  1b*/
  NvF32 tv0;                    /* texture 0 v coordinate             1c-  1f*/
  NvF32 tu1;                    /* texture 1 u coordinate             20-  23*/
  NvF32 tv1;                    /* texture 1 v coordinate             24-  27*/
 } Tlmtvertex[8];               /* end of methods in array              -053f*/
 NvV32 DrawPrimitive[48];       /* see text                         0540-05ff*/
 NvV32 Reserved04[0x680];
} Nv055Typedef, Nv04Dx6MultiTextureTriangle;
#define NV055_TYPEDEF                               Nv04Dx6MultiTextureTriangle
/* dma method offsets, fields, and values */
#define NV055_SET_OBJECT                                           (0x00000000)
#define NV055_NO_OPERATION                                         (0x00000100)
#define NV055_NOTIFY                                               (0x00000104)
#define NV055_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV055_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV055_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV055_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV055_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV055_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV055_OFFSET(b)                                            (0x00000308\
                                                                   +(b)*0x0004)
#define NV055_FORMAT(b)                                            (0x00000310\
                                                                   +(b)*0x0004)
#define NV055_FORMAT_CONTEXT_DMA                                   3:0
#define NV055_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV055_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV055_FORMAT_ORIGIN_ZOH                                    5:4
#define NV055_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV055_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV055_FORMAT_ORIGIN_FOH                                    7:6
#define NV055_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV055_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV055_FORMAT_COLOR                                         11:8
#define NV055_FORMAT_COLOR_LE_AY8                                  (0x00000001)
#define NV055_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV055_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV055_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV055_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV055_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV055_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV055_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV055_FORMAT_BASE_SIZE_U                                   19:16
#define NV055_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV055_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV055_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV055_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV055_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV055_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV055_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV055_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV055_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV055_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV055_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV055_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV055_FORMAT_BASE_SIZE_V                                   23:20
#define NV055_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV055_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV055_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV055_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV055_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV055_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV055_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV055_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV055_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV055_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV055_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV055_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV055_FORMAT_TEXTUREADDRESSU                               26:24
#define NV055_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV055_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV055_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV055_FORMAT_WRAPU                                         27:27
#define NV055_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV055_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSV                               30:28
#define NV055_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV055_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV055_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV055_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV055_FORMAT_WRAPV                                         31:31
#define NV055_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV055_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV055_FILTER(b)                                            (0x00000318\
                                                                   +(b)*0x0004)
#define NV055_FILTER_KERNEL_SIZE_X                                 7:0
#define NV055_FILTER_KERNEL_SIZE_Y                                 14:8
#define NV055_FILTER_MIPMAP_DITHER_ENABLE                          15:15
#define NV055_FILTER_MIPMAP_DITHER_ENABLE_FALSE                    (0x00000000)
#define NV055_FILTER_MIPMAP_DITHER_ENABLE_TRUE                     (0x00000001)
#define NV055_FILTER_MIPMAPLODBIAS                                 23:16
#define NV055_FILTER_TEXTUREMIN                                    26:24
#define NV055_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV055_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV055_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV055_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV055_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV055_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE                     27:27
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE_FALSE               (0x00000000)
#define NV055_FILTER_ANISOTROPIC_MINIFY_ENABLE_TRUE                (0x00000001)
#define NV055_FILTER_TEXTUREMAG                                    30:28
#define NV055_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV055_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV055_FILTER_TEXTUREMAG_MIPNEAREST                         (0x00000003)
#define NV055_FILTER_TEXTUREMAG_MIPLINEAR                          (0x00000004)
#define NV055_FILTER_TEXTUREMAG_LINEARMIPNEAREST                   (0x00000005)
#define NV055_FILTER_TEXTUREMAG_LINEARMIPLINEAR                    (0x00000006)
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE                    31:31
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_FALSE              (0x00000000)
#define NV055_FILTER_ANISOTROPIC_MAGNIFY_ENABLE_TRUE               (0x00000001)
#define NV055_COMBINE_0_ALPHA                                      (0x00000320)
#define NV055_COMBINE_0_ALPHA_INVERSE_0                            0:0
#define NV055_COMBINE_0_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_0                              1:1
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0                           7:2
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_1                            8:8
#define NV055_COMBINE_0_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_1                              9:9
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1                           15:10
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_2                            16:16
#define NV055_COMBINE_0_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_2                              17:17
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2                           23:18
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_INVERSE_3                            24:24
#define NV055_COMBINE_0_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_ALPHA_ALPHA_3                              25:25
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3                           28:26
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_ALPHA_OPERATION                            31:29
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_0_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_0_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_0_COLOR                                      (0x00000324)
#define NV055_COMBINE_0_COLOR_INVERSE_0                            0:0
#define NV055_COMBINE_0_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_0                              1:1
#define NV055_COMBINE_0_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0                           7:2
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_1                            8:8
#define NV055_COMBINE_0_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_1                              9:9
#define NV055_COMBINE_0_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1                           15:10
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_2                            16:16
#define NV055_COMBINE_0_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_2                              17:17
#define NV055_COMBINE_0_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2                           23:18
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_INVERSE_3                            24:24
#define NV055_COMBINE_0_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_0_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_0_COLOR_ALPHA_3                              25:25
#define NV055_COMBINE_0_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV055_COMBINE_0_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3                           28:26
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_0_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_0_COLOR_OPERATION                            31:29
#define NV055_COMBINE_0_COLOR_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_0_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_0_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_0_COLOR_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_0_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_1_ALPHA                                      (0x0000032C)
#define NV055_COMBINE_1_ALPHA_INVERSE_0                            0:0
#define NV055_COMBINE_1_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_0                              1:1
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0                           7:2
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_1                            8:8
#define NV055_COMBINE_1_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_1                              9:9
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1                           15:10
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_2                            16:16
#define NV055_COMBINE_1_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_2                              17:17
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2                           23:18
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_INVERSE_3                            24:24
#define NV055_COMBINE_1_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_ALPHA_ALPHA_3                              25:25
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3                           28:26
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_ALPHA_OPERATION                            31:29
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_1_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_1_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV055_COMBINE_1_COLOR                                      (0x00000330)
#define NV055_COMBINE_1_COLOR_INVERSE_0                            0:0
#define NV055_COMBINE_1_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_0                              1:1
#define NV055_COMBINE_1_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0                           7:2
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_1                            8:8
#define NV055_COMBINE_1_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_1                              9:9
#define NV055_COMBINE_1_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1                           15:10
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_2                            16:16
#define NV055_COMBINE_1_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_2                              17:17
#define NV055_COMBINE_1_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2                           23:18
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_INVERSE_3                            24:24
#define NV055_COMBINE_1_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV055_COMBINE_1_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV055_COMBINE_1_COLOR_ALPHA_3                              25:25
#define NV055_COMBINE_1_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV055_COMBINE_1_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3                           28:26
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV055_COMBINE_1_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV055_COMBINE_1_COLOR_OPERATION                            31:29
#define NV055_COMBINE_1_COLOR_OPERATION_ADD                        (0x00000001)
#define NV055_COMBINE_1_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV055_COMBINE_1_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV055_COMBINE_1_COLOR_OPERATION_MUX                        (0x00000005)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV055_COMBINE_1_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
/* The following NV055_COMBINE_*** defines can be used without regard to the combiner number */
#define NV055_COMBINE_ALPHA_INVERSE_0                              0:0
#define NV055_COMBINE_ALPHA_INVERSE_0_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_0_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_0                                1:1
#define NV055_COMBINE_ALPHA_ARGUMENT_0                             7:2
#define NV055_COMBINE_ALPHA_ARGUMENT_0_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_1                              8:8
#define NV055_COMBINE_ALPHA_INVERSE_1_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_1_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_1                                9:9
#define NV055_COMBINE_ALPHA_ARGUMENT_1                             15:10
#define NV055_COMBINE_ALPHA_ARGUMENT_1_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_2                              16:16
#define NV055_COMBINE_ALPHA_INVERSE_2_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_2_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_2                                17:17
#define NV055_COMBINE_ALPHA_ARGUMENT_2                             23:18
#define NV055_COMBINE_ALPHA_ARGUMENT_2_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_INVERSE_3                              24:24
#define NV055_COMBINE_ALPHA_INVERSE_3_NORMAL                       (0x00000000)
#define NV055_COMBINE_ALPHA_INVERSE_3_INVERSE                      (0x00000001)
#define NV055_COMBINE_ALPHA_ALPHA_3                                25:25
#define NV055_COMBINE_ALPHA_ARGUMENT_3                             28:26
#define NV055_COMBINE_ALPHA_ARGUMENT_3_ZERO                        (0x00000001)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_INPUT                       (0x00000004)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_ALPHA_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_ALPHA_OPERATION                              31:29
#define NV055_COMBINE_ALPHA_OPERATION_ADD                          (0x00000001)
#define NV055_COMBINE_ALPHA_OPERATION_ADD2                         (0x00000002)
#define NV055_COMBINE_ALPHA_OPERATION_ADD4                         (0x00000003)
#define NV055_COMBINE_ALPHA_OPERATION_ADDSIGNED                    (0x00000004)
#define NV055_COMBINE_ALPHA_OPERATION_MUX                          (0x00000005)
#define NV055_COMBINE_ALPHA_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV055_COMBINE_ALPHA_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_0                              0:0
#define NV055_COMBINE_COLOR_INVERSE_0_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_0_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_0                                1:1
#define NV055_COMBINE_COLOR_ALPHA_0_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_0_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_0                             7:2
#define NV055_COMBINE_COLOR_ARGUMENT_0_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_0_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_1                              8:8
#define NV055_COMBINE_COLOR_INVERSE_1_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_1_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_1                                9:9
#define NV055_COMBINE_COLOR_ALPHA_1_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_1_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_1                             15:10
#define NV055_COMBINE_COLOR_ARGUMENT_1_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_1_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_2                              16:16
#define NV055_COMBINE_COLOR_INVERSE_2_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_2_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_2                                17:17
#define NV055_COMBINE_COLOR_ALPHA_2_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_2_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_2                             23:18
#define NV055_COMBINE_COLOR_ARGUMENT_2_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_2_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_INVERSE_3                              24:24
#define NV055_COMBINE_COLOR_INVERSE_3_NORMAL                       (0x00000000)
#define NV055_COMBINE_COLOR_INVERSE_3_INVERSE                      (0x00000001)
#define NV055_COMBINE_COLOR_ALPHA_3                                25:25
#define NV055_COMBINE_COLOR_ALPHA_3_COLOR                          (0x00000000)
#define NV055_COMBINE_COLOR_ALPHA_3_ALPHA                          (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_3                             28:26
#define NV055_COMBINE_COLOR_ARGUMENT_3_ZERO                        (0x00000001)
#define NV055_COMBINE_COLOR_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV055_COMBINE_COLOR_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV055_COMBINE_COLOR_ARGUMENT_3_INPUT                       (0x00000004)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV055_COMBINE_COLOR_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV055_COMBINE_COLOR_OPERATION                              31:29
#define NV055_COMBINE_COLOR_OPERATION_ADD                          (0x00000001)
#define NV055_COMBINE_COLOR_OPERATION_ADD2                         (0x00000002)
#define NV055_COMBINE_COLOR_OPERATION_ADD4                         (0x00000003)
#define NV055_COMBINE_COLOR_OPERATION_ADDSIGNED                    (0x00000004)
#define NV055_COMBINE_COLOR_OPERATION_MUX                          (0x00000005)
#define NV055_COMBINE_COLOR_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV055_COMBINE_COLOR_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV055_COMBINE_FACTOR                                       (0x00000334)
#define NV055_COMBINE_FACTOR_BLUE                                  7:0
#define NV055_COMBINE_FACTOR_GREEN                                 15:8
#define NV055_COMBINE_FACTOR_RED                                   23:16
#define NV055_COMBINE_FACTOR_ALPHA                                 31:24
#define NV055_BLEND                                                (0x00000338)
#define NV055_BLEND_MASK_BIT                                       5:0
#define NV055_BLEND_MASK_BIT_LSB                                   (0x00000010)
#define NV055_BLEND_MASK_BIT_MSB                                   (0x00000020)
#define NV055_BLEND_SHADEMODE                                      7:6
#define NV055_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV055_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV055_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV055_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV055_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV055_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV055_BLEND_SPECULARENABLE                                 15:12
#define NV055_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV055_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV055_BLEND_FOGENABLE                                      19:16
#define NV055_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV055_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV055_BLEND_ALPHABLENDENABLE                               23:20
#define NV055_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV055_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV055_BLEND_SRCBLEND                                       27:24
#define NV055_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV055_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV055_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV055_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV055_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV055_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV055_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV055_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV055_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV055_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV055_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV055_BLEND_DESTBLEND                                      31:28
#define NV055_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV055_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV055_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV055_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV055_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV055_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV055_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV055_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV055_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV055_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV055_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV055_CONTROL0                                             (0x0000033C)
#define NV055_CONTROL0_ALPHAREF                                    7:0
#define NV055_CONTROL0_ALPHAFUNC                                   11:8
#define NV055_CONTROL0_ALPHAFUNC_NEVER                             (0x00000001)
#define NV055_CONTROL0_ALPHAFUNC_LESS                              (0x00000002)
#define NV055_CONTROL0_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV055_CONTROL0_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV055_CONTROL0_ALPHAFUNC_GREATER                           (0x00000005)
#define NV055_CONTROL0_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV055_CONTROL0_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV055_CONTROL0_ALPHAFUNC_ALWAYS                            (0x00000008)
#define NV055_CONTROL0_ALPHATESTENABLE                             12:12
#define NV055_CONTROL0_ALPHATESTENABLE_FALSE                       (0x00000000)
#define NV055_CONTROL0_ALPHATESTENABLE_TRUE                        (0x00000001)
#define NV055_CONTROL0_ORIGIN                                      13:13
#define NV055_CONTROL0_ORIGIN_CENTER                               (0x00000000)
#define NV055_CONTROL0_ORIGIN_CORNER                               (0x00000001)
#define NV055_CONTROL0_ZENABLE                                     15:14
#define NV055_CONTROL0_ZENABLE_FALSE                               (0x00000000)
#define NV055_CONTROL0_ZENABLE_TRUE                                (0x00000001)
#define NV055_CONTROL0_ZFUNC                                       19:16
#define NV055_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV055_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV055_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV055_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV055_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV055_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV055_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV055_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV055_CONTROL0_CULLMODE                                    21:20
#define NV055_CONTROL0_CULLMODE_NONE                               (0x00000001)
#define NV055_CONTROL0_CULLMODE_CW                                 (0x00000002)
#define NV055_CONTROL0_CULLMODE_CCW                                (0x00000003)
#define NV055_CONTROL0_DITHERENABLE                                22:22
#define NV055_CONTROL0_DITHERENABLE_FALSE                          (0x00000000)
#define NV055_CONTROL0_DITHERENABLE_TRUE                           (0x00000001)
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE                        23:23
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV055_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV055_CONTROL0_ZWRITEENABLE                                24:24
#define NV055_CONTROL0_ZWRITEENABLE_FALSE                          (0x00000000)
#define NV055_CONTROL0_ZWRITEENABLE_TRUE                           (0x00000001)
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE                        25:25
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                  (0x00000000)
#define NV055_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                   (0x00000001)
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE                          26:26
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV055_CONTROL0_ALPHA_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV055_CONTROL0_RED_WRITE_ENABLE                            27:27
#define NV055_CONTROL0_RED_WRITE_ENABLE_FALSE                      (0x00000000)
#define NV055_CONTROL0_RED_WRITE_ENABLE_TRUE                       (0x00000001)
#define NV055_CONTROL0_GREEN_WRITE_ENABLE                          28:28
#define NV055_CONTROL0_GREEN_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV055_CONTROL0_GREEN_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV055_CONTROL0_BLUE_WRITE_ENABLE                           29:29
#define NV055_CONTROL0_BLUE_WRITE_ENABLE_FALSE                     (0x00000000)
#define NV055_CONTROL0_BLUE_WRITE_ENABLE_TRUE                      (0x00000001)
#define NV055_CONTROL0_Z_FORMAT                                    31:30
#define NV055_CONTROL0_Z_FORMAT_FIXED                              (0x00000001)
#define NV055_CONTROL0_Z_FORMAT_FLOAT                              (0x00000002)
#define NV055_CONTROL1                                             (0x00000340)
#define NV055_CONTROL1_STENCIL_TEST_ENABLE                         3:0
#define NV055_CONTROL1_STENCIL_TEST_ENABLE_FALSE                   (0x00000000)
#define NV055_CONTROL1_STENCIL_TEST_ENABLE_TRUE                    (0x00000001)
#define NV055_CONTROL1_STENCIL_FUNC                                7:4
#define NV055_CONTROL1_STENCIL_FUNC_NEVER                          (0x00000001)
#define NV055_CONTROL1_STENCIL_FUNC_LESS                           (0x00000002)
#define NV055_CONTROL1_STENCIL_FUNC_EQUAL                          (0x00000003)
#define NV055_CONTROL1_STENCIL_FUNC_LESSEQUAL                      (0x00000004)
#define NV055_CONTROL1_STENCIL_FUNC_GREATER                        (0x00000005)
#define NV055_CONTROL1_STENCIL_FUNC_NOTEQUAL                       (0x00000006)
#define NV055_CONTROL1_STENCIL_FUNC_GREATEREQUAL                   (0x00000007)
#define NV055_CONTROL1_STENCIL_FUNC_ALWAYS                         (0x00000008)
#define NV055_CONTROL1_STENCIL_REF                                 15:8
#define NV055_CONTROL1_STENCIL_MASK_READ                           23:16
#define NV055_CONTROL1_STENCIL_MASK_WRITE                          31:24
#define NV055_CONTROL2                                             (0x00000344)
#define NV055_CONTROL2_STENCIL_OP_FAIL                             3:0
#define NV055_CONTROL2_STENCIL_OP_FAIL_KEEP                        (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_FAIL_ZERO                        (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_FAIL_REPLACE                     (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INCRSAT                     (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_FAIL_DECRSAT                     (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INVERT                      (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_FAIL_INCR                        (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_FAIL_DECR                        (0x00000008)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL                            7:4
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_KEEP                       (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_ZERO                       (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_REPLACE                    (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INCRSAT                    (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_DECRSAT                    (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INVERT                     (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_INCR                       (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_ZFAIL_DECR                       (0x00000008)
#define NV055_CONTROL2_STENCIL_OP_ZPASS                            31:8
#define NV055_CONTROL2_STENCIL_OP_ZPASS_KEEP                       (0x00000001)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_ZERO                       (0x00000002)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_REPLACE                    (0x00000003)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INCRSAT                    (0x00000004)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_DECRSAT                    (0x00000005)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INVERT                     (0x00000006)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_INCR                       (0x00000007)
#define NV055_CONTROL2_STENCIL_OP_ZPASS_DECR                       (0x00000008)
#define NV055_FOG_COLOR                                            (0x00000348)
#define NV055_TLMTVERTEX(i)                                        (0x00000400\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SX(i)                                     (0x00000400\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SY(i)                                     (0x00000404\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SZ(i)                                     (0x00000408\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_RHW(i)                                    (0x0000040C\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_COLOR(i)                                  (0x00000410\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_COLOR_BLUE                                7:0
#define NV055_TLMTVERTEX_COLOR_GREEN                               15:8
#define NV055_TLMTVERTEX_COLOR_RED                                 23:16
#define NV055_TLMTVERTEX_COLOR_ALPHA                               31:24
#define NV055_TLMTVERTEX_SPECULAR(i)                               (0x00000414\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_SPECULAR_BLUE                             7:0
#define NV055_TLMTVERTEX_SPECULAR_GREEN                            15:8
#define NV055_TLMTVERTEX_SPECULAR_RED                              23:16
#define NV055_TLMTVERTEX_SPECULAR_FOG                              31:24
#define NV055_TLMTVERTEX_TU0(i)                                    (0x00000418\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TV0(i)                                    (0x0000041C\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TU1(i)                                    (0x00000420\
                                                                   +(i)*0x0028)
#define NV055_TLMTVERTEX_TV1(i)                                    (0x00000424\
                                                                   +(i)*0x0028)
#define NV055_DRAW_PRIMITIVE(a)                                    (0x00000540\
                                                                   +(a)*0x0004)
#define NV055_DRAW_PRIMITIVE_I0                                    3:0
#define NV055_DRAW_PRIMITIVE_I1                                    7:4
#define NV055_DRAW_PRIMITIVE_I2                                    11:8
#define NV055_DRAW_PRIMITIVE_I3                                    15:12
#define NV055_DRAW_PRIMITIVE_I4                                    19:16
#define NV055_DRAW_PRIMITIVE_I5                                    31:20

// We ensure we're not calling any Celsius stuff when compiling for
// Kelvin by simply commenting out all the Celsius defines...

#if 0

// This typedef really should be the same as Nv10CelsiusPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.


typedef NvV32 Nv056Typedef;


/* class NV10_CELSIUS_PRIMITIVE */
#define  NV10_CELSIUS_PRIMITIVE                                    (0x00000056)
/* NvNotification[] elements */
#define NV056_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV056_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV056_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV056_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV056_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV056_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV056_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved00[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved01[0x2c/4];
    NvV32 PmTrigger;
    NvV32 Reserved02[0x3c/4];
    NvV32 SetContextDmaNotifies;
    NvV32 SetContextDmaA;
    NvV32 SetContextDmaB;
    NvV32 SetContextDmaVertex;
    NvV32 SetContextDmaState;
    NvV32 SetContextDmaColor;
    NvV32 SetContextDmaZeta;
    NvV32 Reserved03[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved04[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved05[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvV32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvV32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvV32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvV32 SetStencilFuncRef;
    NvV32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvV32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvV32 SetMaterialEmission[3];
    NvV32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
        NvV32 S;
        NvV32 T;
        NvV32 R;
        NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvV32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved06[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved07[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved08[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved09[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0b[0xc8/4];
    struct {
        NvF32 AmbientColor[3];
        NvF32 DiffuseColor[3];
        NvF32 SpecularColor[3];
        NvF32 LocalRange;
        NvF32 InfiniteHalfVector[3];
        NvF32 InfiniteDirection[3];
        NvF32 SpotFalloff[3];
        NvF32 SpotDirection[4];
        NvF32 LocalPosition[3];
        NvF32 LocalAttenuation[3];
        NvV32 Reserved0c[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0d[0xc/4];
    NvF32 SetVertex4f[4];
    NvS16 SetVertex4s[4];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0e[0x4/4];
    NvS16 SetNormal3s[3];
    NvV16 Reserved0f[0xa/2];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvV32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvV32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS16 SetTexcoord0_2s[2];
    NvV32 Reserved10[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS16 SetTexcoord0_4s[4];
    NvF32 SetTexcoord1_2f[2];
    NvS16 SetTexcoord1_2s[2];
    NvV32 Reserved11[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS16 SetTexcoord1_4s[4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved12[0x4/4];
    NvV32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 Reserved13[0xbc/4];
    NvV32 SetBeginEnd;
    NvV16 ArrayElement16[256];
    NvV32 Reserved14[0xfc/4];
    NvV32 SetBeginEnd2;
    NvV32 ArrayElement32[64];
    NvV32 Reserved15[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 SetMaterialEmissionSW[3];
    NvV32 Reserved16[0x1c8/4];
    NvV32 SetBeginEnd4;
    NvV32 InlineArray[512];
} Nv10CelsiusPrimitive;


#define NV056_TYPEDEF                                      Nv10CelsiusPrimitive
#define NV056_SET_OBJECT                                           (0x00000000)


#define NV056_DEBUG_INIT(i)                                        (0x00001600+(i)*4)


#define NV056_FLUSH                                                        0x00000728


#define NV056_NO_OPERATION                                                 0x00000100


#define NV056_NOTIFY                                                       0x00000104
#define NV056_NOTIFY_TYPE                                                        23:0
#define NV056_NOTIFY_TYPE_WRITE_ONLY                                       0x00000000
#define NV056_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                0x00000001


#define NV056_SET_WARNING_ENABLE                                           0x00000108
#define NV056_SET_WARNING_ENABLE_V                                               23:0
#define NV056_SET_WARNING_ENABLE_V_FALSE                                   0x00000000
#define NV056_SET_WARNING_ENABLE_V_TRUE                                    0x00000001


#define NV056_GET_STATE                                                    0x0000010c
#define NV056_GET_STATE_GETSTATE                                                 31:0
#define NV056_GET_STATE_GETSTATE_ALL_STATE                                 0x00000001
#define NV056_GET_STATE_PUTSTATE_ALL_STATE                                 0x00000002
#define NV056_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                   0x00000003
#define NV056_GET_STATE_GETSTATE_RENDERING_STATE                           0x00000004
#define NV056_GET_STATE_GETSTATE_GEOMETRY_STATE                            0x00000005
#define NV056_GET_STATE_GETSTATE_SNAPSHOT_PRIM_ASSM                        0x00000006
#define NV056_GET_STATE_GETSTATE_RELOAD_PRIM_ASSM                          0x00000007

#define NV056_WAIT_FOR_IDLE                                                0x00000110


#define NV056_PM_TRIGGER                                                   0x00000140


#define NV056_SET_CONTEXT_DMA_NOTIFIES                                     0x00000180


#define NV056_SET_CONTEXT_DMA_A                                            0x00000184


#define NV056_SET_CONTEXT_DMA_B                                            0x00000188


#define NV056_SET_CONTEXT_DMA_VERTEX                                       0x0000018c


#define NV056_SET_CONTEXT_DMA_STATE                                        0x00000190


#define NV056_SET_CONTEXT_DMA_COLOR                                        0x00000194


#define NV056_SET_CONTEXT_DMA_ZETA                                         0x00000198


#define NV056_SET_SURFACE_CLIP_HORIZONTAL                                  0x00000200
#define NV056_SET_SURFACE_CLIP_HORIZONTAL_X                                      15:0
#define NV056_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                 31:16


#define NV056_SET_SURFACE_CLIP_VERTICAL                                    0x00000204
#define NV056_SET_SURFACE_CLIP_VERTICAL_Y                                        15:0
#define NV056_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                  31:16


#define NV056_SET_SURFACE_FORMAT                                           0x00000208
#define NV056_SET_SURFACE_FORMAT_COLOR                                            7:0
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                0x00000001
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                0x00000002
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                           0x00000003
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                0x00000004
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                0x00000005
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            0x00000006
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            0x00000007
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000008
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_B8                               0x00000009
#define NV056_SET_SURFACE_FORMAT_COLOR_LE_G8B8                             0x0000000A
#define NV056_SET_SURFACE_FORMAT_TYPE                                            15:8
#define NV056_SET_SURFACE_FORMAT_TYPE_PITCH                                0x00000001
#define NV056_SET_SURFACE_FORMAT_TYPE_SWIZZLE                              0x00000002
#define NV056_SET_SURFACE_FORMAT_WIDTH                                          23:16
#define NV056_SET_SURFACE_FORMAT_WIDTH_1                                   0x00000000
#define NV056_SET_SURFACE_FORMAT_WIDTH_2                                   0x00000001
#define NV056_SET_SURFACE_FORMAT_WIDTH_4                                   0x00000002
#define NV056_SET_SURFACE_FORMAT_WIDTH_8                                   0x00000003
#define NV056_SET_SURFACE_FORMAT_WIDTH_16                                  0x00000004
#define NV056_SET_SURFACE_FORMAT_WIDTH_32                                  0x00000005
#define NV056_SET_SURFACE_FORMAT_WIDTH_64                                  0x00000006
#define NV056_SET_SURFACE_FORMAT_WIDTH_128                                 0x00000007
#define NV056_SET_SURFACE_FORMAT_WIDTH_256                                 0x00000008
#define NV056_SET_SURFACE_FORMAT_WIDTH_512                                 0x00000009
#define NV056_SET_SURFACE_FORMAT_WIDTH_1024                                0x0000000A
#define NV056_SET_SURFACE_FORMAT_WIDTH_2048                                0x0000000B
#define NV056_SET_SURFACE_FORMAT_HEIGHT                                         31:24
#define NV056_SET_SURFACE_FORMAT_HEIGHT_1                                  0x00000000
#define NV056_SET_SURFACE_FORMAT_HEIGHT_2                                  0x00000001
#define NV056_SET_SURFACE_FORMAT_HEIGHT_4                                  0x00000002
#define NV056_SET_SURFACE_FORMAT_HEIGHT_8                                  0x00000003
#define NV056_SET_SURFACE_FORMAT_HEIGHT_16                                 0x00000004
#define NV056_SET_SURFACE_FORMAT_HEIGHT_32                                 0x00000005
#define NV056_SET_SURFACE_FORMAT_HEIGHT_64                                 0x00000006
#define NV056_SET_SURFACE_FORMAT_HEIGHT_128                                0x00000007
#define NV056_SET_SURFACE_FORMAT_HEIGHT_256                                0x00000008
#define NV056_SET_SURFACE_FORMAT_HEIGHT_512                                0x00000009
#define NV056_SET_SURFACE_FORMAT_HEIGHT_1024                               0x0000000A
#define NV056_SET_SURFACE_FORMAT_HEIGHT_2048                               0x0000000B


#define NV056_SET_SURFACE_PITCH                                            0x0000020c
#define NV056_SET_SURFACE_PITCH_COLOR                                            15:0
#define NV056_SET_SURFACE_PITCH_ZETA                                            31:16


#define NV056_SET_SURFACE_COLOR_OFFSET                                     0x00000210
#define NV056_SET_SURFACE_COLOR_OFFSET_V                                         31:0


#define NV056_SET_SURFACE_ZETA_OFFSET                                      0x00000214
#define NV056_SET_SURFACE_ZETA_OFFSET_V                                          31:0


#define NV056_SET_TEXTURE_OFFSET(i)                                (0x00000218+(i)*4)
#define NV056_SET_TEXTURE_OFFSET_V                                               31:0


#define NV056_SET_TEXTURE_FORMAT(i)                                (0x00000220+(i)*4)
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA                                      1:0
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                   2:2
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                      0x00000000
#define NV056_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                       0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                       4:3
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                         0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH                                       6:5
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                         0x00000001
#define NV056_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_COLOR                                           11:7
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_Y8                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_AY8                              0x00000001
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                         0x00000002
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                         0x00000003
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                         0x00000004
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                           0x00000005
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000006
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                         0x00000007
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                      0x00000008
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                        0x00000009
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                      0x0000000A
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                      0x0000000B
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                    0x0000000C
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                   0x0000000E
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                   0x0000000F
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                   0x00000010
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                     0x00000011
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                   0x00000012
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                         0x00000013
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                        0x00000014
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                      0x00000015
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                       0x00000016
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                       0x00000017
#define NV056_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                     0x00000018
#define NV056_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                  15:12
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U                                    19:16
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                             0x00000000
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                             0x00000003
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                            0x00000004
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                            0x00000005
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                            0x00000006
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                           0x00000007
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                           0x00000008
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                           0x00000009
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                          0x0000000A
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                          0x0000000B
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V                                    23:20
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                             0x00000000
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                             0x00000001
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                             0x00000002
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                             0x00000003
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                            0x00000004
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                            0x00000005
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                            0x00000006
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                           0x00000007
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                           0x00000008
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                           0x00000009
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                          0x0000000A
#define NV056_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                          0x0000000B
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                                26:24
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                      0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                    0x00000002
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                     0x00000003
#define NV056_SET_TEXTURE_FORMAT_WRAPU                                          27:27
#define NV056_SET_TEXTURE_FORMAT_WRAPU_FALSE                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_WRAPU_TRUE                                0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                                30:28
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                      0x00000001
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                    0x00000002
#define NV056_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                     0x00000003
#define NV056_SET_TEXTURE_FORMAT_WRAPV                                          31:31
#define NV056_SET_TEXTURE_FORMAT_WRAPV_FALSE                               0x00000000
#define NV056_SET_TEXTURE_FORMAT_WRAPV_TRUE                                0x00000001


#define NV056_SET_TEXTURE_CONTROL0(i)                              (0x00000228+(i)*4)
#define NV056_SET_TEXTURE_CONTROL0_ENABLE                                       30:30
#define NV056_SET_TEXTURE_CONTROL0_ENABLE_FALSE                            0x00000000
#define NV056_SET_TEXTURE_CONTROL0_ENABLE_TRUE                             0x00000001
#define NV056_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                29:18
#define NV056_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                 17:6
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                  5:4
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                         0x00000000
#define NV056_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                         0x00000001
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                             3:3
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                0x00000000
#define NV056_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                 0x00000001
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                              2:2
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                 0x00000000
#define NV056_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                  0x00000001
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                            1:0
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE               0x00000000
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA               0x00000001
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                0x00000002
#define NV056_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                0x00000003


#define NV056_SET_TEXTURE_CONTROL1(i)                              (0x00000230+(i)*4)
#define NV056_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                  31:16
#define NV056_SET_TEXTURE_CONTROL1_ZERO                                          15:0


#define NV056_SET_TEXTURE_CONTROL2(i)                              (0x00000238+(i)*4)
#define NV056_SET_TEXTURE_CONTROL2_PERTURB_DU                                    11:0
#define NV056_SET_TEXTURE_CONTROL2_PERTURB_DV                                   23:12
#define NV056_SET_TEXTURE_CONTROL2_IMAGE_LODF                                   31:24


#define NV056_SET_TEXTURE_IMAGE_RECT(i)                            (0x00000240+(i)*4)
#define NV056_SET_TEXTURE_IMAGE_RECT_WIDTH                                      31:16
#define NV056_SET_TEXTURE_IMAGE_RECT_HEIGHT                                      15:0


#define NV056_SET_TEXTURE_FILTER(i)                                (0x00000248+(i)*4)
#define NV056_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                   23:0
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN                                     27:24
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                        0x00000001
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                         0x00000002
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                     0x00000003
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                      0x00000004
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST               0x00000005
#define NV056_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR                0x00000006
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG                                     31:28
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                        0x00000001
#define NV056_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                         0x00000002


#define NV056_SET_TEXTURE_PALETTE(i)                               (0x00000250+(i)*4)
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA                                     5:0
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                            0x00000000
#define NV056_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                            0x00000001
#define NV056_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                 31:6


#define NV056_SET_COMBINER_ALPHA_ICW(i)                            (0x00000260+(i)*4)
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP                                      31:29
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA                                    28:28
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE                                   27:24
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP                                      23:21
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA                                    20:20
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE                                   19:16
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP                                      15:13
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA                                    12:12
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE                                    11:8
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP                                        7:5
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA                                      4:4
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE                                     3:0
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV056_SET_COMBINER_COLOR_ICW(i)                            (0x00000268+(i)*4)
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP                                      31:29
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA                                    28:28
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE                                   27:24
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP                                      23:21
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA                                    20:20
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE                                   19:16
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP                                      15:13
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA                                    12:12
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE                                    11:8
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP                                        7:5
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV056_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA                                      4:4
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                         0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                          0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE                                     3:0
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                        0x00000000
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                        0x00000001
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                        0x00000002
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                        0x00000003
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                        0x00000004
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                        0x00000005
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                        0x00000008
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                        0x00000009
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV056_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV056_SET_COMBINE_FACTOR(i)                                (0x00000270+(i)*4)
#define NV056_SET_COMBINE_FACTOR_BLUE                                             7:0
#define NV056_SET_COMBINE_FACTOR_GREEN                                           15:8
#define NV056_SET_COMBINE_FACTOR_RED                                            23:16
#define NV056_SET_COMBINE_FACTOR_ALPHA                                          31:24


#define NV056_SET_COMBINER_ALPHA_OCW(i)                            (0x00000278+(i)*4)
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION                                  31:15
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                     0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                0x00000001
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                0x00000002
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS           0x00000003
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1               0x00000006
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                 14:14
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                      0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                       0x00000001
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST                                     11:8
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST                                       7:4
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                          0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                          0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                          0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                          0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                          0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                          0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                          0x0000000D
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST                                       3:0
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                          0x00000000
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                          0x00000004
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                          0x00000005
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                          0x00000008
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                          0x00000009
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                          0x0000000C
#define NV056_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                          0x0000000D


#define NV056_SET_COMBINER0_COLOR_OCW                                      0x00000280
#define NV056_SET_COMBINER0_COLOR_OCW_ZERO                                      31:27
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION                                 26:15
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                                14:14
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST                                    11:8
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST                                      7:4
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST                                      3:0
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV056_SET_COMBINER1_COLOR_OCW                                      0x00000284
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                           31:28
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                  0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                  0x00000002
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT                                27:27
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                       0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                       0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION                                 26:15
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                                14:14
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST                                    11:8
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST                                      7:4
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST                                      3:0
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV056_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV056_SET_COMBINER_SPECULAR_FOG_CW0                                0x00000288
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                           31:29
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                             28:28
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                            27:24
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                           23:21
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                             20:20
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                            19:16
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                           15:13
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                             12:12
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                             11:8
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD           0x0000000F
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                             7:5
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                               4:4
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                              3:0
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT           0x0000000E
#define NV056_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD           0x0000000F


#define NV056_SET_COMBINER_SPECULAR_FOG_CW1                                0x0000028c
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                           31:29
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                             28:28
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                            27:24
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                           23:21
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                             20:20
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                            19:16
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                           15:13
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                             12:12
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                   0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                             11:8
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                 0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                 0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                 0x00000002
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                 0x00000003
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                 0x00000004
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                 0x00000005
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                 0x00000008
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                 0x00000009
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                 0x0000000C
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                 0x0000000D
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                        7:7
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE           0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE            0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                6:6
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE   0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE    0x00000001
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12               5:0
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE  0x00000000
#define NV056_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE   0x00000020


#define NV056_SET_CONTROL0                                                 0x00000290
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA                                   31:24
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                        0x00000000
#define NV056_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                         0x00000001
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE                                   23:20
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                        0x00000000
#define NV056_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                         0x00000001
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                 19:16
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                      0x00000000
#define NV056_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                       0x00000001
#define NV056_SET_CONTROL0_Z_FORMAT                                             15:12
#define NV056_SET_CONTROL0_Z_FORMAT_FIXED                                  0x00000000
#define NV056_SET_CONTROL0_Z_FORMAT_FLOAT                                  0x00000001
#define NV056_SET_CONTROL0_WBUFFER_SELECT                                        11:8
#define NV056_SET_CONTROL0_WBUFFER_SELECT_0                                0x00000000
#define NV056_SET_CONTROL0_WBUFFER_SELECT_1                                0x00000001
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE                                   7:0
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                       0x00000001


#define NV056_SET_LIGHT_CONTROL                                            0x00000294
#define NV056_SET_LIGHT_CONTROL_LOCALEYE                                        31:16
#define NV056_SET_LIGHT_CONTROL_LOCALEYE_FALSE                             0x00000000
#define NV056_SET_LIGHT_CONTROL_LOCALEYE_TRUE                              0x00000001
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE                                 15:2
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                    0x00000000
#define NV056_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT                0x00000001
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                              1:1
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                 0x00000000
#define NV056_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                  0x00000001
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                                0:0
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                   0x00000000
#define NV056_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                    0x00000001


#define NV056_SET_COLOR_MATERIAL                                           0x00000298
#define NV056_SET_COLOR_MATERIAL_V                                               31:0
#define NV056_SET_COLOR_MATERIAL_V_DISABLED                                0x00000000
#define NV056_SET_COLOR_MATERIAL_V_EMISSION                                0x00000001
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT                                 0x00000002
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                        0x00000003
#define NV056_SET_COLOR_MATERIAL_V_DIFFUSE                                 0x00000004
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                        0x00000005
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                         0x00000006
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE                0x00000007
#define NV056_SET_COLOR_MATERIAL_V_SPECULAR                                0x00000008
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                       0x00000009
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                        0x0000000A
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR               0x0000000B
#define NV056_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                        0x0000000C
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR               0x0000000D
#define NV056_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR                0x0000000E
#define NV056_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR       0x0000000F


#define NV056_SET_FOG_MODE                                                 0x0000029c
#define NV056_SET_FOG_MODE_FOG_MODE                                              31:0
#define NV056_SET_FOG_MODE_FOG_MODE_LINEAR                                 0x00002601
#define NV056_SET_FOG_MODE_FOG_MODE_EXP                                    0x00000800
#define NV056_SET_FOG_MODE_FOG_MODE_EXP2                                   0x00000801
#define NV056_SET_FOG_MODE_FOG_MODE_EXP_ABS                                0x00000802
#define NV056_SET_FOG_MODE_FOG_MODE_EXP2_ABS                               0x00000803


#define NV056_SET_FOG_GEN_MODE                                             0x000002a0
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE                                      31:0
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                      0x00000000
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                         0x00000001
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                         0x00000002
#define NV056_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                     0x00000003


#define NV056_SET_FOG_ENABLE                                               0x000002a4
#define NV056_SET_FOG_ENABLE_V                                                   31:0
#define NV056_SET_FOG_ENABLE_V_FALSE                                       0x00000000
#define NV056_SET_FOG_ENABLE_V_TRUE                                        0x00000001


#define NV056_SET_FOG_COLOR                                               0x000002a8
#define NV056_SET_FOG_COLOR_FOG_COLOR_RED                                        7:0
#define NV056_SET_FOG_COLOR_FOG_COLOR_GREEN                                     15:8
#define NV056_SET_FOG_COLOR_FOG_COLOR_BLUE                                     23:16
#define NV056_SET_FOG_COLOR_FOG_COLOR_ALPHA                                    31:24


#define NV056_SET_COLOR_KEY_COLOR(i)                               (0x000002ac+(i)*4)
#define NV056_SET_COLOR_KEY_COLOR_V                                              31:0


#define NV056_SET_WINDOW_CLIP_TYPE                                         0x000002b4
#define NV056_SET_WINDOW_CLIP_TYPE_V                                             31:0
#define NV056_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                             0x00000000
#define NV056_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                             0x00000001


#define NV056_SET_WINDOW_CLIP_HORIZONTAL(i)                        (0x000002c0+(i)*4)
#define NV056_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                    15:0
#define NV056_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                   31:16


#define NV056_SET_WINDOW_CLIP_VERTICAL(i)                          (0x000002e0+(i)*4)
#define NV056_SET_WINDOW_CLIP_VERTICAL_YMIN                                      15:0
#define NV056_SET_WINDOW_CLIP_VERTICAL_YMAX                                     31:16


#define NV056_SET_ALPHA_TEST_ENABLE                                        0x00000300
#define NV056_SET_ALPHA_TEST_ENABLE_V                                            31:0
#define NV056_SET_ALPHA_TEST_ENABLE_V_FALSE                                0x00000000
#define NV056_SET_ALPHA_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV056_SET_BLEND_ENABLE                                             0x00000304
#define NV056_SET_BLEND_ENABLE_V                                                 31:0
#define NV056_SET_BLEND_ENABLE_V_FALSE                                     0x00000000
#define NV056_SET_BLEND_ENABLE_V_TRUE                                      0x00000001


#define NV056_SET_CULL_FACE_ENABLE                                         0x00000308
#define NV056_SET_CULL_FACE_ENABLE_V                                             31:0
#define NV056_SET_CULL_FACE_ENABLE_V_FALSE                                 0x00000000
#define NV056_SET_CULL_FACE_ENABLE_V_TRUE                                  0x00000001


#define NV056_SET_DEPTH_TEST_ENABLE                                        0x0000030c
#define NV056_SET_DEPTH_TEST_ENABLE_V                                            31:0
#define NV056_SET_DEPTH_TEST_ENABLE_V_FALSE                                0x00000000
#define NV056_SET_DEPTH_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV056_SET_DITHER_ENABLE                                            0x00000310
#define NV056_SET_DITHER_ENABLE_V                                                31:0
#define NV056_SET_DITHER_ENABLE_V_FALSE                                    0x00000000
#define NV056_SET_DITHER_ENABLE_V_TRUE                                     0x00000001


#define NV056_SET_LIGHTING_ENABLE                                          0x00000314
#define NV056_SET_LIGHTING_ENABLE_V                                              31:0
#define NV056_SET_LIGHTING_ENABLE_V_FALSE                                  0x00000000
#define NV056_SET_LIGHTING_ENABLE_V_TRUE                                   0x00000001


#define NV056_SET_POINT_PARAMS_ENABLE                                      0x00000318
#define NV056_SET_POINT_PARAMS_ENABLE_V                                          31:0
#define NV056_SET_POINT_PARAMS_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_POINT_PARAMS_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_POINT_SMOOTH_ENABLE                                      0x0000031c
#define NV056_SET_POINT_SMOOTH_ENABLE_V                                          31:0
#define NV056_SET_POINT_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_POINT_SMOOTH_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_LINE_SMOOTH_ENABLE                                       0x00000320
#define NV056_SET_LINE_SMOOTH_ENABLE_V                                           31:0
#define NV056_SET_LINE_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV056_SET_LINE_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV056_SET_POLY_SMOOTH_ENABLE                                       0x00000324
#define NV056_SET_POLY_SMOOTH_ENABLE_V                                           31:0
#define NV056_SET_POLY_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV056_SET_POLY_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV056_SET_SKIN_ENABLE                                              0x00000328
#define NV056_SET_SKIN_ENABLE_V                                                  31:0
#define NV056_SET_SKIN_ENABLE_V_FALSE                                      0x00000000
#define NV056_SET_SKIN_ENABLE_V_TRUE                                       0x00000001


#define NV056_SET_STENCIL_TEST_ENABLE                                      0x0000032c
#define NV056_SET_STENCIL_TEST_ENABLE_V                                          31:0
#define NV056_SET_STENCIL_TEST_ENABLE_V_FALSE                              0x00000000
#define NV056_SET_STENCIL_TEST_ENABLE_V_TRUE                               0x00000001


#define NV056_SET_POLY_OFFSET_POINT_ENABLE                                 0x00000330
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V                                     31:0
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                         0x00000000
#define NV056_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                          0x00000001


#define NV056_SET_POLY_OFFSET_LINE_ENABLE                                  0x00000334
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V                                      31:0
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                          0x00000000
#define NV056_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                           0x00000001


#define NV056_SET_POLY_OFFSET_FILL_ENABLE                                  0x00000338
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V                                      31:0
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                          0x00000000
#define NV056_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                           0x00000001


#define NV056_SET_ALPHA_FUNC                                               0x0000033c
#define NV056_SET_ALPHA_FUNC_V                                                   31:0
#define NV056_SET_ALPHA_FUNC_V_NEVER                                       0x00000200
#define NV056_SET_ALPHA_FUNC_V_LESS                                        0x00000201
#define NV056_SET_ALPHA_FUNC_V_EQUAL                                       0x00000202
#define NV056_SET_ALPHA_FUNC_V_LEQUAL                                      0x00000203
#define NV056_SET_ALPHA_FUNC_V_GREATER                                     0x00000204
#define NV056_SET_ALPHA_FUNC_V_NOTEQUAL                                    0x00000205
#define NV056_SET_ALPHA_FUNC_V_GEQUAL                                      0x00000206
#define NV056_SET_ALPHA_FUNC_V_ALWAYS                                      0x00000207


#define NV056_SET_ALPHA_REF                                                0x00000340


#define NV056_SET_BLEND_FUNC_SFACTOR                                       0x00000344
#define NV056_SET_BLEND_FUNC_SFACTOR_V                                           31:0
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ZERO                                0x00000000
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE                                 0x00000001
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                           0x00000300
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                           0x00000302
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV056_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                           0x00000304
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV056_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                           0x00000306
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV056_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                  0x00000308
#define NV056_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV056_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV056_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV056_SET_BLEND_FUNC_DFACTOR                                       0x00000348
#define NV056_SET_BLEND_FUNC_DFACTOR_V                                           31:0
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ZERO                                0x00000000
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE                                 0x00000001
#define NV056_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                           0x00000300
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV056_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                           0x00000302
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV056_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                           0x00000304
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV056_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                           0x00000306
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV056_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV056_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV056_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV056_SET_BLEND_COLOR                                              0x0000034c
#define NV056_SET_BLEND_COLOR_V                                                  31:0


#define NV056_SET_BLEND_EQUATION                                           0x00000350
#define NV056_SET_BLEND_EQUATION_V                                               31:0
#define NV056_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                           0x0000800A
#define NV056_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                   0x0000800B
#define NV056_SET_BLEND_EQUATION_V_FUNC_ADD                                0x00008006
#define NV056_SET_BLEND_EQUATION_V_MIN                                     0x00008007
#define NV056_SET_BLEND_EQUATION_V_MAX                                     0x00008008


#define NV056_SET_DEPTH_FUNC                                               0x00000354
#define NV056_SET_DEPTH_FUNC_V                                                   31:0
#define NV056_SET_DEPTH_FUNC_V_NEVER                                       0x00000200
#define NV056_SET_DEPTH_FUNC_V_LESS                                        0x00000201
#define NV056_SET_DEPTH_FUNC_V_EQUAL                                       0x00000202
#define NV056_SET_DEPTH_FUNC_V_LEQUAL                                      0x00000203
#define NV056_SET_DEPTH_FUNC_V_GREATER                                     0x00000204
#define NV056_SET_DEPTH_FUNC_V_NOTEQUAL                                    0x00000205
#define NV056_SET_DEPTH_FUNC_V_GEQUAL                                      0x00000206
#define NV056_SET_DEPTH_FUNC_V_ALWAYS                                      0x00000207


#define NV056_SET_COLOR_MASK                                               0x00000358
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                 31:24
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                       0x00000001
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE                                   23:16
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                        0x00000000
#define NV056_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                         0x00000001
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                  15:8
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                      0x00000000
#define NV056_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                       0x00000001
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                    7:0
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                       0x00000000
#define NV056_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                        0x00000001


#define NV056_SET_DEPTH_MASK                                               0x0000035c
#define NV056_SET_DEPTH_MASK_V                                                   31:0
#define NV056_SET_DEPTH_MASK_V_FALSE                                       0x00000000
#define NV056_SET_DEPTH_MASK_V_TRUE                                        0x00000001


#define NV056_SET_STENCIL_MASK                                             0x00000360
#define NV056_SET_STENCIL_MASK_V                                                 31:0


#define NV056_SET_STENCIL_FUNC                                             0x00000364
#define NV056_SET_STENCIL_FUNC_V                                                 31:0
#define NV056_SET_STENCIL_FUNC_V_NEVER                                     0x00000200
#define NV056_SET_STENCIL_FUNC_V_LESS                                      0x00000201
#define NV056_SET_STENCIL_FUNC_V_EQUAL                                     0x00000202
#define NV056_SET_STENCIL_FUNC_V_LEQUAL                                    0x00000203
#define NV056_SET_STENCIL_FUNC_V_GREATER                                   0x00000204
#define NV056_SET_STENCIL_FUNC_V_NOTEQUAL                                  0x00000205
#define NV056_SET_STENCIL_FUNC_V_GEQUAL                                    0x00000206
#define NV056_SET_STENCIL_FUNC_V_ALWAYS                                    0x00000207


#define NV056_SET_STENCIL_FUNC_REF                                         0x00000368
#define NV056_SET_STENCIL_FUNC_REF_V                                             31:0


#define NV056_SET_STENCIL_FUNC_MASK                                        0x0000036c
#define NV056_SET_STENCIL_FUNC_MASK_V                                            31:0


#define NV056_SET_STENCIL_OP_FAIL                                          0x00000370
#define NV056_SET_STENCIL_OP_FAIL_V                                              31:0
#define NV056_SET_STENCIL_OP_FAIL_V_KEEP                                   0x00001E00
#define NV056_SET_STENCIL_OP_FAIL_V_ZERO                                   0x00000000
#define NV056_SET_STENCIL_OP_FAIL_V_REPLACE                                0x00001E01
#define NV056_SET_STENCIL_OP_FAIL_V_INCRSAT                                0x00001E02
#define NV056_SET_STENCIL_OP_FAIL_V_DECRSAT                                0x00001E03
#define NV056_SET_STENCIL_OP_FAIL_V_INVERT                                 0x0000150A
#define NV056_SET_STENCIL_OP_FAIL_V_INCR                                   0x00008507
#define NV056_SET_STENCIL_OP_FAIL_V_DECR                                   0x00008508


#define NV056_SET_STENCIL_OP_ZFAIL                                         0x00000374
#define NV056_SET_STENCIL_OP_ZFAIL_V                                             31:0
#define NV056_SET_STENCIL_OP_ZFAIL_V_KEEP                                  0x00001E00
#define NV056_SET_STENCIL_OP_ZFAIL_V_ZERO                                  0x00000000
#define NV056_SET_STENCIL_OP_ZFAIL_V_REPLACE                               0x00001E01
#define NV056_SET_STENCIL_OP_ZFAIL_V_INCRSAT                               0x00001E02
#define NV056_SET_STENCIL_OP_ZFAIL_V_DECRSAT                               0x00001E03
#define NV056_SET_STENCIL_OP_ZFAIL_V_INVERT                                0x0000150A
#define NV056_SET_STENCIL_OP_ZFAIL_V_INCR                                  0x00008507
#define NV056_SET_STENCIL_OP_ZFAIL_V_DECR                                  0x00008508


#define NV056_SET_STENCIL_OP_ZPASS                                         0x00000378
#define NV056_SET_STENCIL_OP_ZPASS_V                                             31:0
#define NV056_SET_STENCIL_OP_ZPASS_V_KEEP                                  0x00001E00
#define NV056_SET_STENCIL_OP_ZPASS_V_ZERO                                  0x00000000
#define NV056_SET_STENCIL_OP_ZPASS_V_REPLACE                               0x00001E01
#define NV056_SET_STENCIL_OP_ZPASS_V_INCRSAT                               0x00001E02
#define NV056_SET_STENCIL_OP_ZPASS_V_DECRSAT                               0x00001E03
#define NV056_SET_STENCIL_OP_ZPASS_V_INVERT                                0x0000150A
#define NV056_SET_STENCIL_OP_ZPASS_V_INCR                                  0x00008507
#define NV056_SET_STENCIL_OP_ZPASS_V_DECR                                  0x00008508


#define NV056_SET_SHADE_MODE                                               0x0000037c
#define NV056_SET_SHADE_MODE_V                                                   31:0
#define NV056_SET_SHADE_MODE_V_FLAT                                        0x00001D00
#define NV056_SET_SHADE_MODE_V_SMOOTH                                      0x00001D01


#define NV056_SET_LINE_WIDTH                                               0x00000380
#define NV056_SET_LINE_WIDTH_V                                                   31:0


#define NV056_SET_POLYGON_OFFSET_SCALE_FACTOR                              0x00000384
#define NV056_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                  31:0


#define NV056_SET_POLYGON_OFFSET_BIAS                                      0x00000388
#define NV056_SET_POLYGON_OFFSET_BIAS_V                                          31:0


#define NV056_SET_FRONT_POLYGON_MODE                                       0x0000038c
#define NV056_SET_FRONT_POLYGON_MODE_V                                           31:0
#define NV056_SET_FRONT_POLYGON_MODE_V_POINT                               0x00001B00
#define NV056_SET_FRONT_POLYGON_MODE_V_LINE                                0x00001B01
#define NV056_SET_FRONT_POLYGON_MODE_V_FILL                                0x00001B02


#define NV056_SET_BACK_POLYGON_MODE                                        0x00000390
#define NV056_SET_BACK_POLYGON_MODE_V                                            31:0
#define NV056_SET_BACK_POLYGON_MODE_V_POINT                                0x00001B00
#define NV056_SET_BACK_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV056_SET_BACK_POLYGON_MODE_V_FILL                                 0x00001B02


#define NV056_SET_CLIP_MIN                                                 0x00000394
#define NV056_SET_CLIP_MIN_V                                                     31:0


#define NV056_SET_CLIP_MAX                                                 0x00000398
#define NV056_SET_CLIP_MAX_V                                                     31:0


#define NV056_SET_CULL_FACE                                                0x0000039c
#define NV056_SET_CULL_FACE_V                                                    31:0
#define NV056_SET_CULL_FACE_V_FRONT                                        0x00000404
#define NV056_SET_CULL_FACE_V_BACK                                         0x00000405
#define NV056_SET_CULL_FACE_V_FRONT_AND_BACK                               0x00000408


#define NV056_SET_FRONT_FACE                                               0x000003a0
#define NV056_SET_FRONT_FACE_V                                                   31:0
#define NV056_SET_FRONT_FACE_V_CW                                          0x00000900
#define NV056_SET_FRONT_FACE_V_CCW                                         0x00000901


#define NV056_SET_NORMALIZATION_ENABLE                                     0x000003a4
#define NV056_SET_NORMALIZATION_ENABLE_V                                         31:0
#define NV056_SET_NORMALIZATION_ENABLE_V_FALSE                             0x00000000
#define NV056_SET_NORMALIZATION_ENABLE_V_TRUE                              0x00000001


#define NV056_SET_MATERIAL_EMISSION(i)                             (0x000003a8+(i)*4)


#define NV056_SET_MATERIAL_ALPHA                                           0x000003b4


#define NV056_SET_SPECULAR_ENABLE                                          0x000003b8
#define NV056_SET_SPECULAR_ENABLE_V                                              31:0
#define NV056_SET_SPECULAR_ENABLE_V_FALSE                                  0x00000000
#define NV056_SET_SPECULAR_ENABLE_V_TRUE                                   0x00000001


#define NV056_SET_LIGHT_ENABLE_MASK                                        0x000003bc
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0                                        1:0
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1                                        3:2
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2                                        5:4
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3                                        7:6
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4                                        9:8
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5                                      11:10
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6                                      13:12
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                            0x00000003
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7                                      15:14
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                             0x00000000
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                        0x00000001
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                           0x00000002
#define NV056_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                            0x00000003


#define NV056_SET_TEXGEN_S(i)                                     (0x000003c0+(i)*16)
#define NV056_SET_TEXGEN_S_V                                                     31:0
#define NV056_SET_TEXGEN_S_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_S_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_S_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_S_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_S_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_S_V_SPHERE_MAP                                    0x00002402
#define NV056_SET_TEXGEN_S_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_T(i)                                     (0x000003c4+(i)*16)
#define NV056_SET_TEXGEN_T_V                                                     31:0
#define NV056_SET_TEXGEN_T_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_T_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_T_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_T_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_T_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_T_V_SPHERE_MAP                                    0x00002402
#define NV056_SET_TEXGEN_T_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_R(i)                                     (0x000003c8+(i)*16)
#define NV056_SET_TEXGEN_R_V                                                     31:0
#define NV056_SET_TEXGEN_R_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_R_V_NORMAL_MAP                                    0x00008511
#define NV056_SET_TEXGEN_R_V_REFLECTION_MAP                                0x00008512
#define NV056_SET_TEXGEN_R_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_R_V_OBJECT_LINEAR                                 0x00002401
#define NV056_SET_TEXGEN_R_V_EMBOSS                                        0x0000855F


#define NV056_SET_TEXGEN_Q(i)                                     (0x000003cc+(i)*16)
#define NV056_SET_TEXGEN_Q_V                                                     31:0
#define NV056_SET_TEXGEN_Q_V_DISABLE                                       0x00000000
#define NV056_SET_TEXGEN_Q_V_EYE_LINEAR                                    0x00002400
#define NV056_SET_TEXGEN_Q_V_OBJECT_LINEAR                                 0x00002401


#define NV056_SET_TEXTURE_MATRIX0_ENABLE                                   0x000003e0
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V                                       31:0
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                           0x00000000
#define NV056_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                            0x00000001


#define NV056_SET_TEXTURE_MATRIX1_ENABLE                                   0x000003e4
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V                                       31:0
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                           0x00000000
#define NV056_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                            0x00000001


#define NV056_SET_TLMODE                                                   0x000003e8
#define NV056_SET_TLMODE_PASSTHROUGH                                              0:0
#define NV056_SET_TLMODE_PASSTHROUGH_TRUE                                  0x00000001
#define NV056_SET_TLMODE_PASSTHROUGH_FALSE                                 0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_0                                               1:1
#define NV056_SET_TLMODE_W_DIVIDE_0_DISABLE                                0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_0_ENABLE                                 0x00000001
#define NV056_SET_TLMODE_W_DIVIDE_1                                               2:2
#define NV056_SET_TLMODE_W_DIVIDE_1_DISABLE                                0x00000000
#define NV056_SET_TLMODE_W_DIVIDE_1_ENABLE                                 0x00000001


#define NV056_SET_POINT_SIZE                                               0x000003ec
#define NV056_SET_POINT_SIZE_V                                                   31:0


#define NV056_SET_SWATH_WIDTH                                              0x000003f0
#define NV056_SET_SWATH_WIDTH_V                                                  31:0
#define NV056_SET_SWATH_WIDTH_V_8                                          0x00000000
#define NV056_SET_SWATH_WIDTH_V_16                                         0x00000001
#define NV056_SET_SWATH_WIDTH_V_32                                         0x00000002
#define NV056_SET_SWATH_WIDTH_V_64                                         0x00000003


#define NV056_SET_FLAT_SHADE_OP                                            0x000003f4
#define NV056_SET_FLAT_SHADE_OP_V                                                31:0
#define NV056_SET_FLAT_SHADE_OP_V_LAST_VTX                                 0x00000000
#define NV056_SET_FLAT_SHADE_OP_V_FIRST_VTX                                0x00000001


#define NV056_SET_MODEL_VIEW_MATRIX0(i)                            (0x00000400+(i)*4)


#define NV056_SET_MODEL_VIEW_MATRIX1(i)                            (0x00000440+(i)*4)


#define NV056_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                    (0x00000480+(i)*4)


#define NV056_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                    (0x000004c0+(i)*4)


#define NV056_SET_COMPOSITE_MATRIX(i)                              (0x00000500+(i)*4)


#define NV056_SET_TEXTURE_MATRIX0(i)                               (0x00000540+(i)*4)


#define NV056_SET_TEXTURE_MATRIX1(i)                               (0x00000580+(i)*4)


#define NV056_SET_TEXGEN_SPLANE0(i)                                (0x00000600+(i)*4)


#define NV056_SET_TEXGEN_TPLANE0(i)                                (0x00000610+(i)*4)


#define NV056_SET_TEXGEN_RPLANE0(i)                                (0x00000620+(i)*4)


#define NV056_SET_TEXGEN_QPLANE0(i)                                (0x00000630+(i)*4)


#define NV056_SET_TEXGEN_SPLANE1(i)                                (0x00000640+(i)*4)


#define NV056_SET_TEXGEN_TPLANE1(i)                                (0x00000650+(i)*4)


#define NV056_SET_TEXGEN_RPLANE1(i)                                (0x00000660+(i)*4)


#define NV056_SET_TEXGEN_QPLANE1(i)                                (0x00000670+(i)*4)


#define NV056_SET_FOG_PARAMS(i)                                    (0x00000680+(i)*4)


#define NV056_SET_FOG_PLANE(i)                                     (0x0000068c+(i)*4)


#define NV056_SET_SPECULAR_PARAMS(i)                               (0x000006a0+(i)*4)


#define NV056_SET_SCENE_AMBIENT_COLOR(i)                           (0x000006c4+(i)*4)


#define NV056_SET_VIEWPORT_OFFSET(i)                               (0x000006e8+(i)*4)


#define NV056_SET_POINT_PARAMS(i)                                  (0x000006f8+(i)*4)


#define NV056_SET_EYE_POSITION(i)                                  (0x00000718+(i)*4)

#define NV056_SET_EYE_DIRECTION_SW(i)                              (0x0000072c+(i)*4)


#define NV056_SET_LIGHT_AMBIENT_COLOR(i,j)                 (0x00000800+(i)*128+(j)*4)


#define NV056_SET_LIGHT_DIFFUSE_COLOR(i,j)                 (0x0000080c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPECULAR_COLOR(i,j)                (0x00000818+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_RANGE(i)                           (0x00000824+(i)*128)


#define NV056_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)          (0x00000828+(i)*128+(j)*4)


#define NV056_SET_LIGHT_INFINITE_DIRECTION(i,j)            (0x00000834+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPOT_FALLOFF(i,j)                  (0x00000840+(i)*128+(j)*4)


#define NV056_SET_LIGHT_SPOT_DIRECTION(i,j)                (0x0000084c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_POSITION(i,j)                (0x0000085c+(i)*128+(j)*4)


#define NV056_SET_LIGHT_LOCAL_ATTENUATION(i,j)             (0x00000868+(i)*128+(j)*4)


#define NV056_SET_VERTEX3F(i)                                      (0x00000c00+(i)*4)


#define NV056_SET_VERTEX4F(i)                                      (0x00000c18+(i)*4)


#define NV056_SET_VERTEX4S(i)                                      (0x00000c28+(i)*4)


#define NV056_SET_NORMAL3F(i)                                      (0x00000c30+(i)*4)


#define NV056_SET_NORMAL3S(i)                                      (0x00000c40+(i)*2)


#define NV056_SET_DIFFUSE_COLOR4F(i)                               (0x00000c50+(i)*4)


#define NV056_SET_DIFFUSE_COLOR3F(i)                               (0x00000c60+(i)*4)


#define NV056_SET_DIFFUSE_COLOR4UB                                         0x00000c6c


#define NV056_SET_SPECULAR_COLOR4F(i)                              (0x00000c70+(i)*4)


#define NV056_SET_SPECULAR_COLOR3F(i)                              (0x00000c80+(i)*4)


#define NV056_SET_SPECULAR_COLOR4UB                                        0x00000c8c


#define NV056_SET_TEXCOORD0_2F(i)                                  (0x00000c90+(i)*4)


#define NV056_SET_TEXCOORD0_2S(i)                                  (0x00000c98+(i)*2)


#define NV056_SET_TEXCOORD0_4F(i)                                  (0x00000ca0+(i)*4)


#define NV056_SET_TEXCOORD0_4S(i)                                  (0x00000cb0+(i)*2)


#define NV056_SET_TEXCOORD1_2F(i)                                  (0x00000cb8+(i)*4)


#define NV056_SET_TEXCOORD1_2S(i)                                  (0x00000cc0+(i)*2)


#define NV056_SET_TEXCOORD1_4F(i)                                  (0x00000cc8+(i)*4)


#define NV056_SET_TEXCOORD1_4S(i)                                  (0x00000cd8+(i)*2)


#define NV056_SET_FOG1F                                                    0x00000ce0


#define NV056_SET_WEIGHT1F                                                 0x00000ce4


#define NV056_SET_EDGE_FLAG                                                0x00000cec


#define NV056_INVALIDATE_VERTEX_CACHE_FILE                                 0x00000cf0


#define NV056_INVALIDATE_VERTEX_FILE                                       0x00000cf4


#define NV056_TL_NOP                                                       0x00000cf8


#define NV056_TL_SYNC                                                      0x00000cfc


#define NV056_SET_VERTEX_ARRAY_OFFSET                                      0x00000d00
#define NV056_SET_VERTEX_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_VERTEX_ARRAY_FORMAT                                      0x00000d04
#define NV056_SET_VERTEX_ARRAY_FORMAT_W                                         31:24
#define NV056_SET_VERTEX_ARRAY_FORMAT_W_NONE                               0x00000000
#define NV056_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                            0x00000001
#define NV056_SET_VERTEX_ARRAY_FORMAT_STRIDE                                     23:8
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_2                               0x00000002
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV056_SET_VERTEX_ARRAY_FORMAT_SIZE_4                               0x00000004
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_DIFFUSE_ARRAY_OFFSET                                     0x00000d08
#define NV056_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                    27:0


#define NV056_SET_DIFFUSE_ARRAY_FORMAT                                     0x00000d0c
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                    31:8
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                       7:4
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                       3:0
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA             0x00000000
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002
#define NV056_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA             0x00000004


#define NV056_SET_SPECULAR_ARRAY_OFFSET                                    0x00000d10
#define NV056_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                   27:0


#define NV056_SET_SPECULAR_ARRAY_FORMAT                                    0x00000d14
#define NV056_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                   31:8
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE                                      7:4
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV056_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE                                      3:0
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV056_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004


#define NV056_SET_TEX_COORD0_ARRAY_OFFSET                                  0x00000d18
#define NV056_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                 27:0


#define NV056_SET_TEX_COORD0_ARRAY_FORMAT                                  0x00000d1c
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                 31:8
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                    7:4
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                    3:0
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV056_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV056_SET_TEX_COORD1_ARRAY_OFFSET                                  0x00000d20
#define NV056_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                 27:0


#define NV056_SET_TEX_COORD1_ARRAY_FORMAT                                  0x00000d24
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                 31:8
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                    7:4
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                    3:0
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV056_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV056_SET_NORMAL_ARRAY_OFFSET                                      0x00000d28
#define NV056_SET_NORMAL_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_NORMAL_ARRAY_FORMAT                                      0x00000d2c
#define NV056_SET_NORMAL_ARRAY_FORMAT_STRIDE                                     31:8
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV056_SET_NORMAL_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_WEIGHT_ARRAY_OFFSET                                      0x00000d30
#define NV056_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                     27:0


#define NV056_SET_WEIGHT_ARRAY_FORMAT                                      0x00000d34
#define NV056_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                     31:8
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE                                        7:4
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV056_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                               0x00000001
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE                                        3:0
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV056_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV056_SET_FOG_ARRAY_OFFSET                                         0x00000d38
#define NV056_SET_FOG_ARRAY_OFFSET_OFFSET                                        27:0


#define NV056_SET_FOG_ARRAY_FORMAT                                         0x00000d3c
#define NV056_SET_FOG_ARRAY_FORMAT_STRIDE                                        31:8
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE                                           7:4
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE_0                                  0x00000000
#define NV056_SET_FOG_ARRAY_FORMAT_SIZE_1                                  0x00000001
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE                                           3:0
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                              0x00000001
#define NV056_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                              0x00000002


#define NV056_SET_BEGIN_END                                                0x00000dfc
#define NV056_SET_BEGIN_END_OP                                                   31:0
#define NV056_SET_BEGIN_END_OP_END                                         0x00000000
#define NV056_SET_BEGIN_END_OP_POINTS                                      0x00000001
#define NV056_SET_BEGIN_END_OP_LINES                                       0x00000002
#define NV056_SET_BEGIN_END_OP_LINE_LOOP                                   0x00000003
#define NV056_SET_BEGIN_END_OP_LINE_STRIP                                  0x00000004
#define NV056_SET_BEGIN_END_OP_TRIANGLES                                   0x00000005
#define NV056_SET_BEGIN_END_OP_TRIANGLE_STRIP                              0x00000006
#define NV056_SET_BEGIN_END_OP_TRIANGLE_FAN                                0x00000007
#define NV056_SET_BEGIN_END_OP_QUADS                                       0x00000008
#define NV056_SET_BEGIN_END_OP_QUAD_STRIP                                  0x00000009
#define NV056_SET_BEGIN_END_OP_POLYGON                                     0x0000000A


#define NV056_ARRAY_ELEMENT16(i)                                   (0x00000e00+(i)*2)


#define NV056_SET_BEGIN_END2                                               0x000010fc
#define NV056_SET_BEGIN_END2_OP                                                  31:0
#define NV056_SET_BEGIN_END2_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END2_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END2_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END2_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END2_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END2_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END2_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END2_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END2_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END2_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END2_OP_POLYGON                                    0x0000000A


#define NV056_ARRAY_ELEMENT32(i)                                   (0x00001100+(i)*4)


#define NV056_SET_BEGIN_END3                                               0x000013fc
#define NV056_SET_BEGIN_END3_OP                                                  31:0
#define NV056_SET_BEGIN_END3_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END3_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END3_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END3_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END3_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END3_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END3_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END3_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END3_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END3_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END3_OP_POLYGON                                    0x0000000A


#define NV056_DRAW_ARRAYS(i)                                       (0x00001400+(i)*4)
#define NV056_DRAW_ARRAYS_COUNT                                                 31:24
#define NV056_DRAW_ARRAYS_START_INDEX                                            23:0


#define NV056_SET_MATERIAL_EMISSION_SW(i)                          (0x00001628+(i)*4)

#define NV056_SET_BEGIN_END4                                               0x000017fc
#define NV056_SET_BEGIN_END4_OP                                                  31:0
#define NV056_SET_BEGIN_END4_OP_END                                        0x00000000
#define NV056_SET_BEGIN_END4_OP_POINTS                                     0x00000001
#define NV056_SET_BEGIN_END4_OP_LINES                                      0x00000002
#define NV056_SET_BEGIN_END4_OP_LINE_LOOP                                  0x00000003
#define NV056_SET_BEGIN_END4_OP_LINE_STRIP                                 0x00000004
#define NV056_SET_BEGIN_END4_OP_TRIANGLES                                  0x00000005
#define NV056_SET_BEGIN_END4_OP_TRIANGLE_STRIP                             0x00000006
#define NV056_SET_BEGIN_END4_OP_TRIANGLE_FAN                               0x00000007
#define NV056_SET_BEGIN_END4_OP_QUADS                                      0x00000008
#define NV056_SET_BEGIN_END4_OP_QUAD_STRIP                                 0x00000009
#define NV056_SET_BEGIN_END4_OP_POLYGON                                    0x0000000A


#define NV056_INLINE_ARRAY(i)                                      (0x00001800+(i)*4)

#endif // 0


/* class NV04_CONTEXT_COLOR_KEY */
#define  NV04_CONTEXT_COLOR_KEY                                    (0x00000057)
/* NvNotification[] elements */
#define NV057_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV057_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV057_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV057_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV057_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV057_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV057_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV057_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetColorFormat;          /* NV057_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetColor;                /* color key value                  0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv057Typedef, Nv04ContextColorKey;
#define NV057_TYPEDEF                                       Nv04ContextColorKey
/* dma method offsets, fields, and values */
#define NV057_SET_OBJECT                                           (0x00000000)
#define NV057_NO_OPERATION                                         (0x00000100)
#define NV057_NOTIFY                                               (0x00000104)
#define NV057_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV057_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV057_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV057_SET_COLOR_FORMAT                                     (0x00000300)
#define NV057_SET_COLOR_FORMAT_LE_A16R5G6B5                        (0x00000001)
#define NV057_SET_COLOR_FORMAT_LE_X16A1R5G5B5                      (0x00000002)
#define NV057_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV057_SET_COLOR                                            (0x00000304)


/* class NV03_CONTEXT_SURFACE_2D_DESTINATION */
#define  NV03_CONTEXT_SURFACE_2D_DESTINATION                       (0x00000058)
/* NvNotification[] elements */
#define NV058_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV058_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV058_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV058_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV058_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV058_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV058_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV058_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV058_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv058Typedef, Nv03ContextSurface2dDestination;
#define NV058_TYPEDEF                           Nv03ContextSurface2dDestination
/* dma method offsets, fields, and values */
#define NV058_SET_OBJECT                                           (0x00000000)
#define NV058_NO_OPERATION                                         (0x00000100)
#define NV058_NOTIFY                                               (0x00000104)
#define NV058_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV058_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV058_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV058_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV058_SET_COLOR_FORMAT                                     (0x00000300)
#define NV058_SET_COLOR_FORMAT_LE_Y8                               (0x01010000)
#define NV058_SET_COLOR_FORMAT_LE_Y16                              (0x01010001)
#define NV058_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x01000000)
#define NV058_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000001)
#define NV058_SET_IMAGE_PITCH                                      (0x00000308)
#define NV058_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_0                                     (0x00000058)
#define NV3_CONTEXT_SURFACE_0                                      (0x00000058)
#define Nv03ContextSurface0                     Nv03ContextSurface2dDestination
#define nv03ContextSurface0                     Nv03ContextSurface2dDestination
#define Nv3ContextSurface0                      Nv03ContextSurface2dDestination
#define nv3ContextSurface0                      Nv03ContextSurface2dDestination
#define nv03ContextSurface2dDestination         Nv03ContextSurface2dDestination


/* class NV03_CONTEXT_SURFACE_2D_SOURCE */
#define  NV03_CONTEXT_SURFACE_2D_SOURCE                            (0x00000059)
/* NvNotification[] elements */
#define NV059_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV059_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV059_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV059_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV059_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV059_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV059_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV059_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV059_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv059Typedef, Nv03ContextSurface2dSource;
#define NV059_TYPEDEF                                Nv03ContextSurface2dSource
/* dma method offsets, fields, and values */
#define NV059_SET_OBJECT                                           (0x00000000)
#define NV059_NO_OPERATION                                         (0x00000100)
#define NV059_NOTIFY                                               (0x00000104)
#define NV059_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV059_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV059_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV059_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV059_SET_COLOR_FORMAT                                     (0x00000300)
#define NV059_SET_COLOR_FORMAT_LE_Y8                               (0x01010000)
#define NV059_SET_COLOR_FORMAT_LE_Y16                              (0x01010001)
#define NV059_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x01000000)
#define NV059_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000001)
#define NV059_SET_IMAGE_PITCH                                      (0x00000308)
#define NV059_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_1                                     (0x00000059)
#define NV3_CONTEXT_SURFACE_1                                      (0x00000059)
#define Nv03ContextSurface1                          Nv03ContextSurface2dSource
#define nv03ContextSurface1                          Nv03ContextSurface2dSource
#define Nv3ContextSurface1                           Nv03ContextSurface2dSource
#define nv3ContextSurface1                           Nv03ContextSurface2dSource
#define nv03ContextSurface2dSource                   Nv03ContextSurface2dSource


/* class NV03_CONTEXT_SURFACE_3D_COLOR */
#define  NV03_CONTEXT_SURFACE_3D_COLOR                             (0x0000005A)
/* NvNotification[] elements */
#define NV05A_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV05A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 SetImagePitch;           /* bytes, vertical pixel delta      0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv05aTypedef, Nv03ContextSurface3dColor;
#define NV05A_TYPEDEF                                 Nv03ContextSurface3dColor
/* dma method offsets, fields, and values */
#define NV05A_SET_OBJECT                                           (0x00000000)
#define NV05A_NO_OPERATION                                         (0x00000100)
#define NV05A_NOTIFY                                               (0x00000104)
#define NV05A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV05A_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV05A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05A_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV05A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05A_SET_COLOR_FORMAT_DUMMY_0                             (0x01010000)
#define NV05A_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5_1              (0x01010001)
#define NV05A_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5_2              (0x01000000)
#define NV05A_SET_COLOR_FORMAT_DUMMY_3                             (0x00000001)
#define NV05A_SET_IMAGE_PITCH                                      (0x00000308)
#define NV05A_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_2                                     (0x0000005A)
#define NV3_CONTEXT_SURFACE_2                                      (0x0000005A)
#define Nv03ContextSurface2                           Nv03ContextSurface3dColor
#define nv03ContextSurface2                           Nv03ContextSurface3dColor
#define Nv3ContextSurface2                            Nv03ContextSurface3dColor
#define nv3ContextSurface2                            Nv03ContextSurface3dColor
#define nv03ContextSurface3dColor                     Nv03ContextSurface3dColor


/* class NV03_CONTEXT_SURFACE_3D_DEPTH */
#define  NV03_CONTEXT_SURFACE_3D_DEPTH                             (0x0000005B)
/* NvNotification[] elements */
#define NV05B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05B_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV05B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Reserved02[0x001];
 NvU32 NvDummy;                   /* ignored                          0308-030b*/
 NvU32 SetImageOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved03[0x73c];
} Nv05bTypedef, Nv03ContextSurface3dDepth;
#define NV05B_TYPEDEF                                 Nv03ContextSurface3dDepth
/* dma method offsets, fields, and values */
#define NV05B_SET_OBJECT                                           (0x00000000)
#define NV05B_NO_OPERATION                                         (0x00000100)
#define NV05B_NOTIFY                                               (0x00000104)
#define NV05B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_1                           (0x00000001)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_2                           (0x00000002)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_3                           (0x00000003)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_4                           (0x00000004)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_5                           (0x00000005)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_6                           (0x00000006)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_7                           (0x00000007)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_8                           (0x00000008)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_9                           (0x00000009)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_A                           (0x0000000A)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_B                           (0x0000000B)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_C                           (0x0000000C)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_D                           (0x0000000D)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_E                           (0x0000000E)
#define NV05B_NOTIFY_WRITE_THEN_AWAKEN_F                           (0x0000000F)
#define NV05B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05B_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV05B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05B_SET_COLOR_FORMAT_LE_W16_0                            (0x01010000)
#define NV05B_SET_COLOR_FORMAT_LE_W16_1                            (0x01010001)
#define NV05B_SET_COLOR_FORMAT_LE_W16_2                            (0x01000000)
#define NV05B_SET_COLOR_FORMAT_LE_W16_3                            (0x00000001)
#define NV05B_DUMMY                                                (0x00000308)
#define NV05B_SET_IMAGE_OFFSET                                     (0x0000030C)
/* obsolete stuff */
#define NV03_CONTEXT_SURFACE_3                                     (0x0000005B)
#define NV3_CONTEXT_SURFACE_3                                      (0x0000005B)
#define Nv03ContextSurface3                           Nv03ContextSurface3dDepth
#define nv03ContextSurface3                           Nv03ContextSurface3dDepth
#define Nv3ContextSurface3                            Nv03ContextSurface3dDepth
#define nv3ContextSurface3                            Nv03ContextSurface3dDepth
#define nv03ContextSurface3dDepth                     Nv03ContextSurface3dDepth


/* class NV04_RENDER_SOLID_LIN */
#define  NV04_RENDER_SOLID_LIN                                     (0x0000005C)
/* NvNotification[] elements */
#define NV05C_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05C_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05C_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05C_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point0;                 /* y_x S16_S16 in pixels            0400-0403*/
  NvV32 point1;                 /* y_x S16_S16 in pixels            0404-0407*/
 } Lin[16];                     /* end of aliased methods in array      -047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 point0X;                /* in pixels, 0 at left                0-   3*/
  NvS32 point0Y;                /* in pixels, 0 at top                 4-   7*/
  NvS32 point1X;                /* in pixels, 0 at left                8-   b*/
  NvS32 point1Y;                /* in pixels, 0 at top                 c-   f*/
 } Lin32[8];                    /* end of aliased methods in array      -04ff*/
 NvV32 PolyLin[32];             /* y_x S16_S16 in pixels            0500-057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } PolyLin32[16];               /* end of aliased methods in array      -05ff*/
 struct {                       /* start aliased methods in array   0600-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorPolyLin[16];            /* end of aliased methods in array      -067f*/
 NvV32 Reserved03[0x660];
} Nv05cTypedef, Nv04RenderSolidLin;
#define NV05C_TYPEDEF                                        Nv04RenderSolidLin
/* dma method offsets, fields, and values */
#define NV05C_SET_OBJECT                                           (0x00000000)
#define NV05C_NO_OPERATION                                         (0x00000100)
#define NV05C_NOTIFY                                               (0x00000104)
#define NV05C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05C_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05C_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05C_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05C_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05C_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05C_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05C_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05C_SET_OPERATION                                        (0x000002FC)
#define NV05C_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05C_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05C_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05C_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05C_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05C_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05C_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05C_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05C_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05C_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05C_COLOR                                                (0x00000304)
#define NV05C_LIN(a)                                               (0x00000400\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT0(a)                                        (0x00000400\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT0_X                                         15:0
#define NV05C_LIN_POINT0_Y                                         31:16
#define NV05C_LIN_POINT1(a)                                        (0x00000404\
                                                                   +(a)*0x0008)
#define NV05C_LIN_POINT1_X                                         15:0
#define NV05C_LIN_POINT1_Y                                         31:16
#define NV05C_LIN32(a)                                             (0x00000480\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT0_X(a)                                    (0x00000480\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT0_Y(a)                                    (0x00000484\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT1_X(a)                                    (0x00000488\
                                                                   +(a)*0x0010)
#define NV05C_LIN32_POINT1_Y(a)                                    (0x0000048C\
                                                                   +(a)*0x0010)
#define NV05C_POLY_LIN(a)                                          (0x00000500\
                                                                   +(a)*0x0004)
#define NV05C_POLY_LIN_X                                           15:0
#define NV05C_POLY_LIN_Y                                           31:16
#define NV05C_POLY_LIN32(a)                                        (0x00000580\
                                                                   +(a)*0x0008)
#define NV05C_POLY_LIN32_X(a)                                      (0x00000580\
                                                                   +(a)*0x0008)
#define NV05C_POLY_LIN32_Y(a)                                      (0x00000584\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN(a)                                    (0x00000600\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_COLOR(a)                              (0x00000600\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_POINT(a)                              (0x00000604\
                                                                   +(a)*0x0008)
#define NV05C_COLOR_POLY_LIN_POINT_X                               15:0
#define NV05C_COLOR_POLY_LIN_POINT_Y                               31:16


/* class NV04_RENDER_SOLID_TRIANGLE */
#define  NV04_RENDER_SOLID_TRIANGLE                                (0x0000005D)
/* NvNotification[] elements */
#define NV05D_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05D_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05D_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05D_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05D_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05D_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05D_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05D_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x002];
 NvV32 TrianglePoint0;          /* y_x S16_S16 in pixels            0310-0313*/
 NvV32 TrianglePoint1;          /* y_x S16_S16 in pixels            0314-0317*/
 NvV32 TrianglePoint2;          /* y_x S16_S16 in pixels            0318-031b*/
 NvV32 Reserved03[0x001];
 NvS32 Triangle32Point0X;       /* in pixels, 0 at left             0320-0323*/
 NvS32 Triangle32Point0Y;       /* in pixels, 0 at top              0324-0327*/
 NvS32 Triangle32Point1X;       /* in pixels, 0 at left             0328-032b*/
 NvS32 Triangle32Point1Y;       /* in pixels, 0 at top              032c-032f*/
 NvS32 Triangle32Point2X;       /* in pixels, 0 at left             0330-0333*/
 NvS32 Triangle32Point2Y;       /* in pixels, 0 at top              0334-0337*/
 NvV32 Reserved04[0x032];
 NvV32 Trimesh[32];             /* y_x S16_S16 in pixels            0400-047f*/
 struct {                       /* start aliased methods in array   0480-    */
  NvS32 x;                      /* in pixels, 0 at left                0-   3*/
  NvS32 y;                      /* in pixels, 0 at top                 4-   7*/
 } Trimesh32[16];               /* end of aliased methods in array      -04ff*/
 struct {                       /* start aliased methods in array   0500-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point0;                 /* y_x S16_S16 in pixels               4-   7*/
  NvV32 point1;                 /* y_x S16_S16 in pixels               8-   b*/
  NvV32 point2;                 /* y_x S16_S16 in pixels               c-   f*/
 } ColorTriangle[8];            /* end of aliased methods in array      -057f*/
 struct {                       /* start aliased methods in array   0580-    */
  NvV32 color;                  /* source color                        0-   3*/
  NvV32 point;                  /* y_x S16_S16 in pixels               4-   7*/
 } ColorTrimesh[16];            /* end of aliased methods in array      -05ff*/
 NvV32 Reserved05[0x680];
} Nv05dTypedef, Nv04RenderSolidTriangle;
#define NV05D_TYPEDEF                                   Nv04RenderSolidTriangle
/* dma method offsets, fields, and values */
#define NV05D_SET_OBJECT                                           (0x00000000)
#define NV05D_NO_OPERATION                                         (0x00000100)
#define NV05D_NOTIFY                                               (0x00000104)
#define NV05D_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05D_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05D_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05D_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05D_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05D_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05D_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05D_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05D_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05D_SET_OPERATION                                        (0x000002FC)
#define NV05D_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05D_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05D_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05D_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05D_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05D_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05D_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05D_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05D_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05D_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05D_COLOR                                                (0x00000304)
#define NV05D_TRIANGLE                                             (0x00000310)
#define NV05D_TRIANGLE_POINT0                                      (0x00000310)
#define NV05D_TRIANGLE_POINT0_X                                    15:0
#define NV05D_TRIANGLE_POINT0_Y                                    31:16
#define NV05D_TRIANGLE_POINT1                                      (0x00000314)
#define NV05D_TRIANGLE_POINT1_X                                    15:0
#define NV05D_TRIANGLE_POINT1_Y                                    31:16
#define NV05D_TRIANGLE_POINT2                                      (0x00000318)
#define NV05D_TRIANGLE_POINT2_X                                    15:0
#define NV05D_TRIANGLE_POINT2_Y                                    31:16
#define NV05D_TRIANGLE32_POINT0_X                                  (0x00000320)
#define NV05D_TRIANGLE32_POINT0_Y                                  (0x00000324)
#define NV05D_TRIANGLE32_POINT1_X                                  (0x00000328)
#define NV05D_TRIANGLE32_POINT1_Y                                  (0x0000032C)
#define NV05D_TRIANGLE32_POINT2_X                                  (0x00000330)
#define NV05D_TRIANGLE32_POINT2_Y                                  (0x00000334)
#define NV05D_TRIMESH(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
#define NV05D_TRIMESH_X                                            15:0
#define NV05D_TRIMESH_Y                                            31:16
#define NV05D_TRIMESH32(a)                                         (0x00000480\
                                                                   +(a)*0x0008)
#define NV05D_TRIMESH32_X(a)                                       (0x00000480\
                                                                   +(a)*0x0008)
#define NV05D_TRIMESH32_Y(a)                                       (0x00000484\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIANGLE(a)                                    (0x00000500\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_COLOR(a)                              (0x00000500\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT0(a)                             (0x00000504\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT0_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT0_Y                              31:16
#define NV05D_COLOR_TRIANGLE_POINT1(a)                             (0x00000508\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT1_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT1_Y                              31:16
#define NV05D_COLOR_TRIANGLE_POINT2(a)                             (0x0000050C\
                                                                   +(a)*0x0010)
#define NV05D_COLOR_TRIANGLE_POINT2_X                              15:0
#define NV05D_COLOR_TRIANGLE_POINT2_Y                              31:16
#define NV05D_COLOR_TRIMESH(a)                                     (0x00000580\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_COLOR(a)                               (0x00000580\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_POINT(a)                               (0x00000584\
                                                                   +(a)*0x0008)
#define NV05D_COLOR_TRIMESH_POINT_X                                15:0
#define NV05D_COLOR_TRIMESH_POINT_Y                                31:16
/* obsolete stuff */
#define NV4_RENDER_SOLID_TRIANGLE                                  (0x0000005D)
#define Nv4RenderSolidTriangle                          Nv04RenderSolidTriangle
#define nv4RenderSolidTriangle                          Nv04RenderSolidTriangle
#define nv04RenderSolidTriangle                         Nv04RenderSolidTriangle


/* class NV04_RENDER_SOLID_RECTANGLE */
#define  NV04_RENDER_SOLID_RECTANGLE                               (0x0000005E)
/* NvNotification[] elements */
#define NV05E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV05E_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV05E_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Color;                   /* source color                     0304-0307*/
 NvV32 Reserved02[0x03e];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 point;                  /* y_x S16_S16                         0-   3*/
  NvV32 size;                   /* height_width U16_U16                4-   7*/
 } Rectangle[16];               /* end of aliased methods in array      -047f*/
 NvV32 Reserved03[0x6e0];
} Nv05eTypedef, Nv04RenderSolidRectangle;
#define NV05E_TYPEDEF                                  Nv04RenderSolidRectangle
/* dma method offsets, fields, and values */
#define NV05E_SET_OBJECT                                           (0x00000000)
#define NV05E_NO_OPERATION                                         (0x00000100)
#define NV05E_NOTIFY                                               (0x00000104)
#define NV05E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05E_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000184)
#define NV05E_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV05E_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV05E_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV05E_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV05E_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV05E_SET_OPERATION                                        (0x000002FC)
#define NV05E_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05E_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05E_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05E_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05E_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05E_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05E_SET_COLOR_FORMAT                                     (0x00000300)
#define NV05E_SET_COLOR_FORMAT_LE_X16R5G6B5                        (0x00000001)
#define NV05E_SET_COLOR_FORMAT_LE_X17R5G5B5                        (0x00000002)
#define NV05E_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000003)
#define NV05E_COLOR                                                (0x00000304)
#define NV05E_RECTANGLE(a)                                         (0x00000400\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_POINT(a)                                   (0x00000400\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_POINT_X                                    15:0
#define NV05E_RECTANGLE_POINT_Y                                    31:16
#define NV05E_RECTANGLE_SIZE(a)                                    (0x00000404\
                                                                   +(a)*0x0008)
#define NV05E_RECTANGLE_SIZE_WIDTH                                 15:0
#define NV05E_RECTANGLE_SIZE_HEIGHT                                31:16
/* obsolete stuff */
#define NV4_RENDER_SOLID_RECTANGLE                                 (0x0000005E)
#define Nv4RenderSolidRectangle                        Nv04RenderSolidRectangle
#define nv4RenderSolidRectangle                        Nv04RenderSolidRectangle
#define nv04RenderSolidRectangle                       Nv04RenderSolidRectangle


/* class NV04_IMAGE_BLIT */
#define  NV04_IMAGE_BLIT                                           (0x0000005F)
/* NvNotification[] elements */
#define NV05F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV05F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV05F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV05F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV05F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV05F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV05F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV05F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV05F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved02[0x73d];
} Nv05fTypedef, Nv04ImageBlit;
#define NV05F_TYPEDEF                                             Nv04ImageBlit
/* dma method offsets, fields, and values */
#define NV05F_SET_OBJECT                                           (0x00000000)
#define NV05F_NO_OPERATION                                         (0x00000100)
#define NV05F_NOTIFY                                               (0x00000104)
#define NV05F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV05F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV05F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV05F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV05F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV05F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV05F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV05F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV05F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV05F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV05F_SET_OPERATION                                        (0x000002FC)
#define NV05F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV05F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV05F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV05F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV05F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV05F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV05F_CONTROL_POINT_IN                                     (0x00000300)
#define NV05F_CONTROL_POINT_IN_X                                   15:0
#define NV05F_CONTROL_POINT_IN_Y                                   31:16
#define NV05F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV05F_CONTROL_POINT_OUT_X                                  15:0
#define NV05F_CONTROL_POINT_OUT_Y                                  31:16
#define NV05F_SIZE                                                 (0x00000308)
#define NV05F_SIZE_WIDTH                                           15:0
#define NV05F_SIZE_HEIGHT                                          31:16
/* obsolete stuff */
#define NV4_IMAGE_BLIT                                             (0x0000005F)
#define Nv4ImageBlit                                              Nv04ImageBlit
#define nv4ImageBlit                                              Nv04ImageBlit
#define nv04ImageBlit                                             Nv04ImageBlit


/* class NV04_INDEXED_IMAGE_FROM_CPU */
#define  NV04_INDEXED_IMAGE_FROM_CPU                               (0x00000060)
/* NvNotification[] elements */
#define NV060_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV060_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV060_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV060_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV060_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV060_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV060_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV060_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0188-018b*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      018c-018f*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0190-0193*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0194-0197*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                019c-019f*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 01a0-01a3*/
 NvV32 Reserved01[0x08F];
 NvV32 SetColorConversion;      /* NV060_SET_COLOR_CONVERSION_*     03e0-03e3*/
 NvV32 SetOperation;            /* NV060_SET_OPERATION_*            03e4-03e7*/
 NvV32 SetColorFormat;          /* NV060_SET_COLOR_FORMAT_*         03e8-03eb*/
 NvV32 IndexFormat;             /* NV060_INDEX_FORMAT_*             03ec-03ef*/
 NvU32 LutOffset;               /* offset in bytes                  03f0-03f3*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            03f4-03f7*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     03f8-03fb*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     03fc-03ff*/
 NvV32 Indices[1792];           /* source indices (packed texels)   0400-1fff*/
} Nv060Typedef, Nv04IndexedImageFromCpu;
#define NV060_TYPEDEF                                   Nv04IndexedImageFromCpu
/* dma method offsets, fields, and values */
#define NV060_SET_OBJECT                                           (0x00000000)
#define NV060_NO_OPERATION                                         (0x00000100)
#define NV060_NOTIFY                                               (0x00000104)
#define NV060_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV060_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV060_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV060_SET_CONTEXT_DMA_LUT                                  (0x00000184)
#define NV060_SET_CONTEXT_COLOR_KEY                                (0x00000188)
#define NV060_SET_CONTEXT_CLIP_RECTANGLE                           (0x0000018C)
#define NV060_SET_CONTEXT_PATTERN                                  (0x00000190)
#define NV060_SET_CONTEXT_ROP                                      (0x00000194)
#define NV060_SET_CONTEXT_BETA1                                    (0x00000198)
#define NV060_SET_CONTEXT_BETA4                                    (0x0000019C)
#define NV060_SET_CONTEXT_SURFACE                                  (0x000001A0)
#define NV060_SET_COLOR_CONVERSION                                 (0x000003E0)
#define NV060_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV060_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV060_SET_OPERATION                                        (0x000003E4)
#define NV060_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV060_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV060_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV060_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV060_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV060_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV060_SET_COLOR_FORMAT                                     (0x000003E8)
#define NV060_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV060_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV060_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV060_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV060_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV060_INDEX_FORMAT                                         (0x000003EC)
#define NV060_INDEX_FORMAT_LE_I8                                   (0x00000000)
#define NV060_INDEX_FORMAT_SVGA65_I4                               (0x00000001)
#define NV060_LUT_OFFSET                                           (0x000003F0)
#define NV060_POINT                                                (0x000003F4)
#define NV060_POINT_X                                              15:0
#define NV060_POINT_Y                                              31:16
#define NV060_SIZE_OUT                                             (0x000003F8)
#define NV060_SIZE_OUT_WIDTH                                       15:0
#define NV060_SIZE_OUT_HEIGHT                                      31:16
#define NV060_SIZE_IN                                              (0x000003FC)
#define NV060_SIZE_IN_WIDTH                                        15:0
#define NV060_SIZE_IN_HEIGHT                                       31:16
#define NV060_INDICES(a)                                           (0x00000400\
                                                                   +(a)*0x0004)
/* class NV04_IMAGE_FROM_CPU */
#define  NV04_IMAGE_FROM_CPU                                       (0x00000061)
/* NvNotification[] elements */
#define NV061_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV061_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV061_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV061_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV061_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV061_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV061_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV061_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x057];
 NvV32 SetOperation;            /* NV061_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV061_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv061Typedef, Nv04ImageFromCpu;
#define NV061_TYPEDEF                                          Nv04ImageFromCpu
/* dma method offsets, fields, and values */
#define NV061_SET_OBJECT                                           (0x00000000)
#define NV061_NO_OPERATION                                         (0x00000100)
#define NV061_NOTIFY                                               (0x00000104)
#define NV061_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV061_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV061_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV061_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV061_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV061_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV061_SET_CONTEXT_ROP                                      (0x00000190)
#define NV061_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV061_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV061_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV061_SET_OPERATION                                        (0x000002FC)
#define NV061_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV061_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV061_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV061_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV061_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV061_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV061_SET_COLOR_FORMAT                                     (0x00000300)
#define NV061_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV061_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV061_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV061_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV061_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV061_POINT                                                (0x00000304)
#define NV061_POINT_X                                              15:0
#define NV061_POINT_Y                                              31:16
#define NV061_SIZE_OUT                                             (0x00000308)
#define NV061_SIZE_OUT_WIDTH                                       15:0
#define NV061_SIZE_OUT_HEIGHT                                      31:16
#define NV061_SIZE_IN                                              (0x0000030C)
#define NV061_SIZE_IN_WIDTH                                        15:0
#define NV061_SIZE_IN_HEIGHT                                       31:16
#define NV061_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV4_IMAGE_FROM_CPU                                         (0x00000061)
#define Nv4ImageFromCpu                                        Nv04ImageFromCpu
#define nv4ImageFromCpu                                        Nv04ImageFromCpu
#define nv04ImageFromCpu                                       Nv04ImageFromCpu


/* class NV10_CONTEXT_SURFACES_2D */
/* NvNotification[] elements */
#define NV062_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV062_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV062_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV062_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV062_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV062_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV062_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV062_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImageSource;/* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageDestin;/* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05d];
 NvV32 SetColorFormat;          /* NV062_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetPitch;                /* destin_source U16_U16            0304-0307*/
 NvU32 SetOffsetSource;         /* byte offset of top-left pixel    0308-030b*/
 NvU32 SetOffsetDestin;         /* byte offset of top-left pixel    030c-030f*/
 NvV32 Reserved02[0x73c];
} Nv062Typedef, Nv10ContextSurfaces2d;
#define NV062_TYPEDEF                                     Nv10ContextSurfaces2d
/* dma method offsets, fields, and values */
#define NV062_SET_OBJECT                                           (0x00000000)
#define NV062_NO_OPERATION                                         (0x00000100)
#define NV062_NOTIFY                                               (0x00000104)
#define NV062_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV062_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV062_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV062_SET_CONTEXT_DMA_IMAGE_SOURCE                         (0x00000184)
#define NV062_SET_CONTEXT_DMA_IMAGE_DESTIN                         (0x00000188)
#define NV062_SET_COLOR_FORMAT                                     (0x00000300)
#define NV062_SET_COLOR_FORMAT_LE_Y8                               (0x00000001)
#define NV062_SET_COLOR_FORMAT_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV062_SET_COLOR_FORMAT_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV062_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000004)
#define NV062_SET_COLOR_FORMAT_LE_Y16                              (0x00000005)
#define NV062_SET_COLOR_FORMAT_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV062_SET_COLOR_FORMAT_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV062_SET_COLOR_FORMAT_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV062_SET_COLOR_FORMAT_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV062_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x0000000A)
#define NV062_SET_COLOR_FORMAT_LE_Y32                              (0x0000000B)
#define NV062_SET_PITCH                                            (0x00000304)
#define NV062_SET_PITCH_SOURCE                                     15:0
#define NV062_SET_PITCH_DESTIN                                     31:16
#define NV062_SET_OFFSET_SOURCE                                    (0x00000308)
#define NV062_SET_OFFSET_DESTIN                                    (0x0000030C)


/* class NV05_SCALED_IMAGE_FROM_MEMORY */
#define  NV05_SCALED_IMAGE_FROM_MEMORY                             (0x00000063)
/* NvNotification[] elements */
#define NV063_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV063_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV063_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV063_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV063_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV063_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV063_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV063_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV063_SET_COLOR_CONVERSION_*     02fc-02ff*/
 NvV32 SetColorFormat;          /* NV063_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV063_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv063Typedef, Nv05ScaledImageFromMemory;
#define NV063_TYPEDEF                                 Nv05ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV063_SET_OBJECT                                           (0x00000000)
#define NV063_NO_OPERATION                                         (0x00000100)
#define NV063_NOTIFY                                               (0x00000104)
#define NV063_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV063_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV063_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV063_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV063_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV063_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV063_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV063_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV063_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV063_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV063_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV063_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV063_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV063_SET_COLOR_FORMAT                                     (0x00000300)
#define NV063_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV063_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV063_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV063_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV063_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV063_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV063_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV063_SET_OPERATION                                        (0x00000304)
#define NV063_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV063_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV063_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV063_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV063_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV063_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV063_CLIP_POINT                                           (0x00000308)
#define NV063_CLIP_POINT_X                                         15:0
#define NV063_CLIP_POINT_Y                                         31:16
#define NV063_CLIP_SIZE                                            (0x0000030C)
#define NV063_CLIP_SIZE_WIDTH                                      15:0
#define NV063_CLIP_SIZE_HEIGHT                                     31:16
#define NV063_IMAGE_OUT_POINT                                      (0x00000310)
#define NV063_IMAGE_OUT_POINT_X                                    15:0
#define NV063_IMAGE_OUT_POINT_Y                                    31:16
#define NV063_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV063_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV063_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV063_DS_DX                                                (0x00000318)
#define NV063_DT_DY                                                (0x0000031C)
#define NV063_IMAGE_IN_SIZE                                        (0x00000400)
#define NV063_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV063_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV063_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV063_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV063_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV063_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV063_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV063_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV063_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV063_IMAGE_IN                                             (0x0000040C)
#define NV063_IMAGE_IN_POINT_U                                     15:0
#define NV063_IMAGE_IN_POINT_V                                     31:16


/* class NV05_INDEXED_IMAGE_FROM_CPU */
#define  NV05_INDEXED_IMAGE_FROM_CPU                               (0x00000064)
/* NvNotification[] elements */
#define NV064_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV064_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV064_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV064_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV064_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV064_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV064_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV064_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaLut;        /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0188-018b*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      018c-018f*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0190-0193*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0194-0197*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                019c-019f*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 01a0-01a3*/
 NvV32 Reserved01[0x08f];
 NvV32 SetColorConversion;      /* NV064_SET_COLOR_CONVERSION_*     03e0-03e3*/
 NvV32 SetOperation;            /* NV064_SET_OPERATION_*            03e4-03e7*/
 NvV32 SetColorFormat;          /* NV064_SET_COLOR_FORMAT_*         03e8-03eb*/
 NvV32 IndexFormat;             /* NV064_INDEX_FORMAT_*             03ec-03ef*/
 NvU32 LutOffset;               /* offset in bytes                  03f0-03f3*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            03f4-03f7*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     03f8-03fb*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     03fc-03ff*/
 NvV32 Indices[1792];           /* source indices (packed texels)   0400-1fff*/
} Nv064Typedef, Nv05IndexedImageFromCpu;
#define NV064_TYPEDEF                                   Nv05IndexedImageFromCpu
/* dma method offsets, fields, and values */
#define NV064_SET_OBJECT                                           (0x00000000)
#define NV064_NO_OPERATION                                         (0x00000100)
#define NV064_NOTIFY                                               (0x00000104)
#define NV064_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV064_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV064_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV064_SET_CONTEXT_DMA_LUT                                  (0x00000184)
#define NV064_SET_CONTEXT_COLOR_KEY                                (0x00000188)
#define NV064_SET_CONTEXT_CLIP_RECTANGLE                           (0x0000018C)
#define NV064_SET_CONTEXT_PATTERN                                  (0x00000190)
#define NV064_SET_CONTEXT_ROP                                      (0x00000194)
#define NV064_SET_CONTEXT_BETA1                                    (0x00000198)
#define NV064_SET_CONTEXT_BETA4                                    (0x0000019C)
#define NV064_SET_CONTEXT_SURFACE                                  (0x000001A0)
#define NV064_SET_COLOR_CONVERSION                                 (0x000003E0)
#define NV064_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV064_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV064_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV064_SET_OPERATION                                        (0x000003E4)
#define NV064_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV064_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV064_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV064_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV064_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV064_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV064_SET_COLOR_FORMAT                                     (0x000003E8)
#define NV064_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV064_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV064_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV064_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV064_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV064_INDEX_FORMAT                                         (0x000003EC)
#define NV064_INDEX_FORMAT_LE_I8                                   (0x00000000)
#define NV064_INDEX_FORMAT_SVGA65_I4                               (0x00000001)
#define NV064_LUT_OFFSET                                           (0x000003F0)
#define NV064_POINT                                                (0x000003F4)
#define NV064_POINT_X                                              15:0
#define NV064_POINT_Y                                              31:16
#define NV064_SIZE_OUT                                             (0x000003F8)
#define NV064_SIZE_OUT_WIDTH                                       15:0
#define NV064_SIZE_OUT_HEIGHT                                      31:16
#define NV064_SIZE_IN                                              (0x000003FC)
#define NV064_SIZE_IN_WIDTH                                        15:0
#define NV064_SIZE_IN_HEIGHT                                       31:16
#define NV064_INDICES(a)                                           (0x00000400\
                                                                   +(a)*0x0004)


/* class NV05_IMAGE_FROM_CPU */
#define  NV05_IMAGE_FROM_CPU                                       (0x00000065)
/* NvNotification[] elements */
#define NV065_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV065_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV065_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV065_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV065_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV065_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV065_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV065_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x056];
 NvV32 SetColorConversion;      /* NV065_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV065_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV065_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv065Typedef, Nv05ImageFromCpu;
#define NV065_TYPEDEF                                          Nv05ImageFromCpu
/* dma method offsets, fields, and values */
#define NV065_SET_OBJECT                                           (0x00000000)
#define NV065_NO_OPERATION                                         (0x00000100)
#define NV065_NOTIFY                                               (0x00000104)
#define NV065_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV065_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV065_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV065_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV065_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV065_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV065_SET_CONTEXT_ROP                                      (0x00000190)
#define NV065_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV065_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV065_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV065_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV065_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV065_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV065_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV065_SET_OPERATION                                        (0x000002FC)
#define NV065_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV065_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV065_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV065_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV065_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV065_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV065_SET_COLOR_FORMAT                                     (0x00000300)
#define NV065_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV065_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV065_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV065_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV065_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV065_POINT                                                (0x00000304)
#define NV065_POINT_X                                              15:0
#define NV065_POINT_Y                                              31:16
#define NV065_SIZE_OUT                                             (0x00000308)
#define NV065_SIZE_OUT_WIDTH                                       15:0
#define NV065_SIZE_OUT_HEIGHT                                      31:16
#define NV065_SIZE_IN                                              (0x0000030C)
#define NV065_SIZE_IN_WIDTH                                        15:0
#define NV065_SIZE_IN_HEIGHT                                       31:16
#define NV065_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


 /* class NV05_STRETCHED_IMAGE_FROM_CPU */
#define  NV05_STRETCHED_IMAGE_FROM_CPU                             (0x00000066)
/* NvNotification[] elements */
#define NV066_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV066_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV066_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV066_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV066_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV066_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV066_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct _Nv066Typedef{
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV066_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x057];
 NvV32 SetColorConversion;      /* NV066_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV066_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV066_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DxDs;                    /* S12d20 dx/ds                     0308-030b*/
 NvV32 DyDt;                    /* S12d20 dy/dt                     030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv066Typedef, Nv05StretchedImageFromCpu;
#define NV066_TYPEDEF                                 Nv05StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV066_SET_OBJECT                                           (0x00000000)
#define NV066_NO_OPERATION                                         (0x00000100)
#define NV066_NOTIFY                                               (0x00000104)
#define NV066_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV066_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV066_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV066_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV066_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV066_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV066_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV066_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV066_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV066_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV066_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV066_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV066_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV066_SET_OPERATION                                        (0x000002FC)
#define NV066_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV066_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV066_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV066_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV066_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV066_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV066_SET_COLOR_FORMAT                                     (0x00000300)
#define NV066_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV066_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV066_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV066_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV066_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV066_SIZE_IN                                              (0x00000304)
#define NV066_SIZE_IN_WIDTH                                        15:0
#define NV066_SIZE_IN_HEIGHT                                       31:16
#define NV066_DX_DS                                                (0x00000308)
#define NV066_DY_DT                                                (0x0000030C)
#define NV066_CLIP_POINT                                           (0x00000310)
#define NV066_CLIP_POINT_X                                         15:0
#define NV066_CLIP_POINT_Y                                         31:16
#define NV066_CLIP_SIZE                                            (0x00000314)
#define NV066_CLIP_SIZE_WIDTH                                      15:0
#define NV066_CLIP_SIZE_HEIGHT                                     31:16
#define NV066_POINT_12D4                                           (0x00000318)
#define NV066_POINT_12D4_X                                         15:0
#define NV066_POINT_12D4_Y                                         31:16
#define NV066_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


/* class NV10_VIDEO_LUT_CURSOR_DAC */
#define  NV10_VIDEO_LUT_CURSOR_DAC                                 (0x00000067)
/* NvNotification[] elements */
#define NV067_NOTIFIERS_NOTIFY                                     (0)
#define NV067_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV067_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV067_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV067_NOTIFIERS_SET_DAC(b)                                 (7+(b))
/* NvNotification[] fields and values */
#define NV067_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV067_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV067_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV067_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV067_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV067_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV067_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV067_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV067_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV067_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV067_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV067_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV067_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV067_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 Reserved01[0x058];
 NvV32 GetOffset;               /* NV067_GET_OFFSET_*               02FC-02FF*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_color_height_width           4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv067Typedef, Nv10VideoLutCursorDac;
#define NV067_TYPEDEF                                     Nv10VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV067_SET_OBJECT                                           (0x00000000)
#define NV067_NO_OPERATION                                         (0x00000100)
#define NV067_NOTIFY                                               (0x00000104)
#define NV067_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV067_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV067_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV067_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV067_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV067_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV067_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV067_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV067_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV067_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV067_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV067_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV067_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV067_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV067_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV067_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV067_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV067_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV067_GET_OFFSET                                           (0x000002FC)
#define NV067_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV067_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV067_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV067_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV067_SET_IMAGE_FORMAT_WHEN                                30:20
#define NV067_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV067_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV067_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV067_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV067_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV067_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV067_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV067_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV067_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV067_SET_CURSOR_IMAGE_FORMAT_WIDTH                        7:0
#define NV067_SET_CURSOR_IMAGE_FORMAT_HEIGHT                       15:8
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR                        30:16
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_ROP1R5G5B5          (0x00000000)
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A1R5G5B5            (0x00000001)
#define NV067_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A8R8G8B8            (0x00000002)
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY                       31:31
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV067_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV067_SET_CURSOR_POINT                                     (0x00000330)
#define NV067_SET_CURSOR_POINT_X                                   15:0
#define NV067_SET_CURSOR_POINT_Y                                   31:16
#define NV067_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV067_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV067_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV067_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV067_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV067_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV067_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV067_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV067_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV067_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV067_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV067_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV067_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV067_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV067_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV067_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV067_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV067_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV067_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV067_SET_DAC_FORMAT_COLOR                                 19:16
#define NV067_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV067_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV067_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV067_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV067_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV067_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV067_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV067_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV067_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV067_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV067_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)

// Added by Chuck Moidel
/* class NV04_HEAP_OWNER */
#define NV04_HEAP_OWNER                                            (0x0000006F)
/* NvNotification[] fields and values */
#define NV06F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06fTypedef, Nv04HeapOwner;
#define NV06F_TYPEDEF                                              Nv04HeapOwner
#define Nv06FTypedef                                               Nv04HeapOwner

typedef NvV32 Nv070Typedef;

typedef NvV32 Nv071Typedef;


/* class NV04_CONTEXT_BETA */
#define  NV04_CONTEXT_BETA                                         (0x00000072)
/* NvNotification[] elements */
#define NV072_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV072_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV072_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV072_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV072_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV072_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV072_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV072_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved01[0x05f];
 NvV32 SetBetaFactor;           /* A8R8G8B8 beta values             0300-0303*/
 NvV32 Reserved02[0x73f];
} Nv072Typedef, Nv04ContextBeta;
#define NV072_TYPEDEF                                           Nv04ContextBeta
/* dma method offsets, fields, and values */
#define NV072_SET_OBJECT                                           (0x00000000)
#define NV072_NO_OPERATION                                         (0x00000100)
#define NV072_NOTIFY                                               (0x00000104)
#define NV072_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV072_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV072_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV072_SET_BETA_FACTOR                                      (0x00000300)
#define NV072_SET_BETA_FACTOR_BLUE                                 7:0
#define NV072_SET_BETA_FACTOR_GREEN                                15:8
#define NV072_SET_BETA_FACTOR_RED                                  23:16
#define NV072_SET_BETA_FACTOR_ALPHA                                31:24
/* obsolete stuff */
#define NV4_CONTEXT_BETA                                           (0x00000072)
#define Nv4ContextBeta                                          Nv04ContextBeta
#define nv4ContextBeta                                          Nv04ContextBeta
#define nv04ContextBeta                                         Nv04ContextBeta

typedef NvV32 Nv073Typedef;

typedef NvV32 Nv074Typedef;

typedef NvV32 Nv075Typedef;


/* class NV04_STRETCHED_IMAGE_FROM_CPU */
#define  NV04_STRETCHED_IMAGE_FROM_CPU                             (0x00000076)
/* NvNotification[] elements */
#define NV076_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV076_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV076_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV076_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV076_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV076_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV076_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV076_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetOperation;            /* NV076_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV076_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SizeIn;                  /* height_width U16_U16 in texels   0304-0307*/
 NvV32 DeltaDxDu;               /* S12d20 ratio dx/du               0308-030b*/
 NvV32 DeltaDyDv;               /* S12d20 ratio dy/dv               030c-030f*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0310-0313*/
 NvV32 ClipSize;                /* height_width U16_U16             0314-0317*/
 NvV32 Point12d4;               /* y_x S12d4_S12d4 in pixels        0318-031b*/
 NvV32 Reserved02[0x039];
 NvV32 Color[1792];             /* source colors (packed texels)    0400-1fff*/
} Nv076Typedef, Nv04StretchedImageFromCpu;
#define NV076_TYPEDEF                                 Nv04StretchedImageFromCpu
/* dma method offsets, fields, and values */
#define NV076_SET_OBJECT                                           (0x00000000)
#define NV076_NO_OPERATION                                         (0x00000100)
#define NV076_NOTIFY                                               (0x00000104)
#define NV076_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV076_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV076_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV076_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV076_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV076_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV076_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV076_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV076_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV076_SET_OPERATION                                        (0x000002FC)
#define NV076_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV076_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV076_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV076_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV076_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV076_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV076_SET_COLOR_FORMAT                                     (0x00000300)
#define NV076_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV076_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV076_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV076_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV076_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV076_SIZE_IN                                              (0x00000304)
#define NV076_SIZE_IN_WIDTH                                        15:0
#define NV076_SIZE_IN_HEIGHT                                       31:16
#define NV076_DELTA_DX_DU                                          (0x00000308)
#define NV076_DELTA_DY_DV                                          (0x0000030C)
#define NV076_CLIP_POINT                                           (0x00000310)
#define NV076_CLIP_POINT_X                                         15:0
#define NV076_CLIP_POINT_Y                                         31:16
#define NV076_CLIP_SIZE                                            (0x00000314)
#define NV076_CLIP_SIZE_WIDTH                                      15:0
#define NV076_CLIP_SIZE_HEIGHT                                     31:16
#define NV076_POINT_12D4                                           (0x00000318)
#define NV076_POINT_12D4_X                                         15:0
#define NV076_POINT_12D4_Y                                         31:16
#define NV076_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)
/* obsolete stuff */
#define NV4_STRETCHED_IMAGE_FROM_CPU                               (0x00000076)
#define Nv4StretchedImageFromCpu                      Nv04StretchedImageFromCpu
#define nv4StretchedImageFromCpu                      Nv04StretchedImageFromCpu
#define nv04StretchedImageFromCpu                     Nv04StretchedImageFromCpu


/* class NV04_SCALED_IMAGE_FROM_MEMORY */
#define  NV04_SCALED_IMAGE_FROM_MEMORY                             (0x00000077)
/* NvNotification[] elements */
#define NV077_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV077_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV077_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV077_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV077_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV077_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV077_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV077_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x059];
 NvV32 SetColorFormat;          /* NV077_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV077_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DeltaDuDx;               /* S12d20 ratio du/dx               0318-031b*/
 NvV32 DeltaDvDy;               /* S12d20 ratio dv/dy               031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvU32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv077Typedef, Nv04ScaledImageFromMemory;
#define NV077_TYPEDEF                                 Nv04ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV077_SET_OBJECT                                           (0x00000000)
#define NV077_NO_OPERATION                                         (0x00000100)
#define NV077_NOTIFY                                               (0x00000104)
#define NV077_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV077_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV077_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV077_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV077_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV077_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV077_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV077_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV077_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV077_SET_COLOR_FORMAT                                     (0x00000300)
#define NV077_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV077_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV077_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV077_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV077_SET_COLOR_FORMAT_LE_V8YB8U8YA8                       (0x00000005)
#define NV077_SET_COLOR_FORMAT_LE_YB8V8YA8U8                       (0x00000006)
#define NV077_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV077_SET_OPERATION                                        (0x00000304)
#define NV077_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV077_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV077_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV077_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV077_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV077_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV077_CLIP_POINT                                           (0x00000308)
#define NV077_CLIP_POINT_X                                         15:0
#define NV077_CLIP_POINT_Y                                         31:16
#define NV077_CLIP_SIZE                                            (0x0000030C)
#define NV077_CLIP_SIZE_WIDTH                                      15:0
#define NV077_CLIP_SIZE_HEIGHT                                     31:16
#define NV077_IMAGE_OUT_POINT                                      (0x00000310)
#define NV077_IMAGE_OUT_POINT_X                                    15:0
#define NV077_IMAGE_OUT_POINT_Y                                    31:16
#define NV077_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV077_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV077_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV077_DELTA_DU_DX                                          (0x00000318)
#define NV077_DELTA_DV_DY                                          (0x0000031C)
#define NV077_IMAGE_IN_SIZE                                        (0x00000400)
#define NV077_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV077_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV077_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV077_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV077_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV077_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV077_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV077_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV077_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV077_IMAGE_IN                                             (0x0000040C)
#define NV077_IMAGE_IN_POINT_U                                     15:0
#define NV077_IMAGE_IN_POINT_V                                     31:16
/* obsolete stuff */
#define NV4_SCALED_IMAGE_FROM_MEMORY                               (0x00000077)
#define Nv4ScaledImageFromMemory                      Nv04ScaledImageFromMemory
#define nv4ScaledImageFromMemory                      Nv04ScaledImageFromMemory
#define nv04ScaledImageFromMemory                     Nv04ScaledImageFromMemory

typedef NvV32 Nv078Typedef;

typedef NvV32 Nv079Typedef;

/* class NV10_VIDEO_OVERLAY */
#define  NV10_VIDEO_OVERLAY                                        (0x0000007A)
/* NvNotification[] elements */
#define NV07A_NOTIFIERS_NOTIFY                                     (0)
#define NV07A_NOTIFIERS_SET_OVERLAY(b)                             (1+(b))
/* NvNotification[] fields and values */
#define NV07A_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV07A_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV07A_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV07A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV07A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 StopOverlay[2];          /* NV07A_STOP_OVERLAY_*             0120-0127*/
 NvV32 Reserved01[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 Reserved02[0x006];
 NvV32 SetContextDmaOverlay[2]; /* NV01_CONTEXT_DMA                 019c-01a3*/
 NvV32 Reserved03[0x097];
 struct {                       /* start of methods in array        0400-    */
  NvV32 reserved05[0x015];      /* see text                           00-  53*/
  NvV32 luminance;              /* brightness_contrast S16_U8d8       54-  57*/
  NvV32 chrominance;            /* saturationSine_saturationCosine    58-  5b*/
  NvV32 colorKey;               /* see text                           5c-  5f*/
  NvU32 offset;                 /* byte offset of top-left texel      60-  63*/
  NvV32 sizeIn;                 /* height_width U16_U16               64-  67*/
  NvV32 pointIn;                /* t_s U12d4_U12d4                    68-  6b*/
  NvV32 duDx;                   /* U12d20 du/dx                       6c-  6f*/
  NvV32 dvDy;                   /* U12d20 dv/dy                       70-  73*/
  NvV32 pointOut;               /* y_x U16_U16                        74-  77*/
  NvV32 sizeOut;                /* height_width U16_U16               78-  7b*/
  NvV32 format;                 /* see text                           7c-  7f*/
 } SetOverlay[2];               /* end of methods in array              -04ff*/
 NvV32 SetOverlayPointOutA;     /* y_x U16_U16                      0500-0503*/
 NvV32 SetOverlayLuminanceA;    /* brightness_contrast S16_U8d8     0504-0507*/
 NvV32 SetOverlayChrominanceA;  /* saturationSine_saturationCosine  0508-050b*/
 NvV32 Reserved04[0x6bd];
} Nv07aTypedef, Nv10VideoOverlay;
#define NV07A_TYPEDEF                                          Nv10VideoOverlay
/* dma method offsets, fields, and values */
#define NV07A_SET_OBJECT                                           (0x00000000)
#define NV07A_NO_OPERATION                                         (0x00000100)
#define NV07A_NOTIFY                                               (0x00000104)
#define NV07A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07A_STOP_OVERLAY(b)                                      (0x00000120\
                                                                   +(b)*0x0004)
#define NV07A_STOP_OVERLAY_AS_SOON_AS_POSSIBLE                     (0x00000000)
#define NV07A_STOP_OVERLAY_BETWEEN_BUFFERS                         (0x00000001)
#define NV07A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07A_SET_CONTEXT_DMA_OVERLAY(b)                           (0x0000019C\
                                                                   +(b)*0x0004)
#define NV07A_SET_OVERLAY(b)                                       (0x00000400\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_LUMINANCE(b)                             (0x00000454\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_LUMINANCE_CONTRAST                       15:0
#define NV07A_SET_OVERLAY_LUMINANCE_BRIGHTNESS                     31:16
#define NV07A_SET_OVERLAY_CHROMINANCE(b)                           (0x00000458\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_CHROMINANCE_SATURATION_COSINE            15:0
#define NV07A_SET_OVERLAY_CHROMINANCE_SATURATION_SINE              31:16
#define NV07A_SET_OVERLAY_COLORKEY(b)                              (0x0000045C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_OFFSET(b)                                (0x00000460\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_IN(b)                               (0x00000464\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_IN_WIDTH                            15:0
#define NV07A_SET_OVERLAY_SIZE_IN_HEIGHT                           31:16
#define NV07A_SET_OVERLAY_POINT_IN(b)                              (0x00000468\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_IN_S                               15:0
#define NV07A_SET_OVERLAY_POINT_IN_T                               31:16
#define NV07A_SET_OVERLAY_DU_DX(b)                                 (0x0000046C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_DV_DY(b)                                 (0x00000470\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_OUT(b)                             (0x00000474\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_POINT_OUT_X                              15:0
#define NV07A_SET_OVERLAY_POINT_OUT_Y                              31:16
#define NV07A_SET_OVERLAY_SIZE_OUT(b)                              (0x00000478\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_SIZE_OUT_WIDTH                           15:0
#define NV07A_SET_OVERLAY_SIZE_OUT_HEIGHT                          31:16
#define NV07A_SET_OVERLAY_FORMAT(b)                                (0x0000047C\
                                                                   +(b)*0x0080)
#define NV07A_SET_OVERLAY_FORMAT_PITCH                             15:0
#define NV07A_SET_OVERLAY_FORMAT_COLOR                             19:16
#define NV07A_SET_OVERLAY_FORMAT_COLOR_LE_YB8CR8YA8CB8             (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_LE_CR8YB8CB8YA8             (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH                23:20
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_OVERLAY   (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_IMAGE     (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_MATRIX                            30:24
#define NV07A_SET_OVERLAY_FORMAT_MATRIX_ITURBT601                  (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_MATRIX_ITURBT709                  (0x00000001)
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY                            31:31
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY_WRITE_ONLY                 (0x00000000)
#define NV07A_SET_OVERLAY_FORMAT_NOTIFY_WRITE_THEN_AWAKEN          (0x00000001)
#define NV07A_SET_OVERLAY_POINT_OUT_A                              (0x00000500)
#define NV07A_SET_OVERLAY_POINT_OUT_A_X                            15:0
#define NV07A_SET_OVERLAY_POINT_OUT_A_Y                            31:16
#define NV07A_SET_OVERLAY_LUMINANCE_A                              (0x00000504)
#define NV07A_SET_OVERLAY_LUMINANCE_A_CONTRAST                     15:0
#define NV07A_SET_OVERLAY_LUMINANCE_A_BRIGHTNESS                   31:16
#define NV07A_SET_OVERLAY_CHROMINANCE_A                            (0x00000508)
#define NV07A_SET_OVERLAY_CHROMINANCE_A_SATURATION_COSINE          15:0
#define NV07A_SET_OVERLAY_CHROMINANCE_A_SATURATION_SIZE            31:16

/* class NV10_TEXTURE_FROM_CPU */
/* NvNotification[] elements */
#define NV07B_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV07B_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07B_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07B_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07B_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07B_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV089_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetColorFormat;          /* NV07B_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 Size;                    /* height_width U16_U16, pixels     0308-030b*/
 NvV32 ClipHorizontal;          /* width_x U16_U16                  030c-030f*/
 NvV32 ClipVertical;            /* height_y U16_U16                 0310-0313*/
 NvV32 Reserved02[0x03b];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 a;                      /* source colors (packed texels)       0-   3*/
  NvV32 b;                      /* source colors (packed texels)       4-   7*/
 } Color[896];                  /* end of aliased methods in array      -1fff*/
} Nv07bTypedef, Nv10TextureFromCpu;
#define NV07B_TYPEDEF                                        Nv10TextureFromCpu
/* dma method offsets, fields, and values */
#define NV07B_SET_OBJECT                                           (0x00000000)
#define NV07B_NO_OPERATION                                         (0x00000100)
#define NV07B_NOTIFY                                               (0x00000104)
#define NV07B_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07B_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07B_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07B_SET_CONTEXT_SURFACE                                  (0x00000184)
#define NV07B_SET_COLOR_FORMAT                                     (0x00000300)
#define NV07B_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV07B_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV07B_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV07B_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV07B_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV07B_POINT                                                (0x00000304)
#define NV07B_POINT_X                                              15:0
#define NV07B_POINT_Y                                              31:16
#define NV07B_SIZE                                                 (0x00000308)
#define NV07B_SIZE_WIDTH                                           15:0
#define NV07B_SIZE_HEIGHT                                          31:16
#define NV07B_CLIP_HORIZONTAL                                      (0x0000030C)
#define NV07B_CLIP_HORIZONTAL_X                                    15:0
#define NV07B_CLIP_HORIZONTAL_WIDTH                                31:16
#define NV07B_CLIP_VERTICAL                                        (0x00000310)
#define NV07B_CLIP_VERTICAL_Y                                      15:0
#define NV07B_CLIP_VERTICAL_HEIGHT                                 31:16
#define NV07B_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0008)
#define NV07B_COLOR_A(a)                                           (0x00000400\
                                                                   +(a)*0x0008)
#define NV07B_COLOR_B(a)                                           (0x00000404\
                                                                   +(a)*0x0008)
#define NV07B_COLOR__SIZE_1                                        896

/* class NV15_VIDEO_LUT_CURSOR_DAC */
#define  NV15_VIDEO_LUT_CURSOR_DAC                                 (0x0000007C)
/* NvNotification[] elements */
#define NV07C_NOTIFIERS_NOTIFY                                     (0)
#define NV07C_NOTIFIERS_GET_OFFSET                                 (0)
#define NV07C_NOTIFIERS_SET_IMAGE(b)                               (1+(b))
#define NV07C_NOTIFIERS_SET_LUT(b)                                 (3+(b))
#define NV07C_NOTIFIERS_SET_CURSOR_IMAGE(b)                        (5+(b))
#define NV07C_NOTIFIERS_SET_DAC(b)                                 (7+(b))
/* NvNotification[] fields and values */
#define NV07C_NOTIFICATION_INFO16_NOT_STARTED                      (0x0000)
#define NV07C_NOTIFICATION_INFO16_VALID_OFFSET                     (0x0001)
#define NV07C_NOTIFICATION_INFO16_DONE                             (0x0002)
#define NV07C_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV07C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV07C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV07C_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV07C_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV07C_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV07C_NOTIFY_*                   0104-0107*/
 NvV32 StopImage[2];            /* NV07C_STOP_IMAGE_*               0108-010f*/
 NvV32 StopLut[2];              /* NV07C_STOP_LUT_*                 0110-0117*/
 NvV32 StopCursorImage[2];      /* NV07C_STOP_CURSOR_IMAGE_*        0118-011f*/
 NvV32 StopDac[2];              /* NV07C_STOP_DAC_*                 0120-0127*/
 NvV32 Reserved00[0x016];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage[2];   /* NV01_CONTEXT_DMA                 0184-018b*/
 NvV32 SetContextDmaLut[2];     /* NV01_CONTEXT_DMA                 018c-0193*/
 NvV32 SetContextDmaCursor[2];  /* NV01_CONTEXT_DMA                 0194-019b*/
 NvV32 SetContextDmaSemaphore;  /* NV01_CONTEXT_DMA                 019c-0197*/
 NvV32 Reserved01[0x054];
 NvU32 SetSemaphoreOffset;      /* set semaphore offset             02f0-02f3*/
 NvU32 SetSemaphoreRelease;     /* set semaphore release value      02f4-02f7*/
 NvV32 SetOffsetRange;          /* NV07C_SET_OFFSET_RANGE_*         02f8-02fb*/
 NvV32 GetOffset;               /* NV07C_GET_OFFSET_*               02fc-02ff*/
 struct {                       /* start of methods in array        0300-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* see text                            4-   7*/
 } SetImage[2];                 /* end of methods in array              -030f*/
 struct {                       /* start of methods in array        0310-    */
  NvU32 offset;                 /* byte offset of first byte           0-   3*/
  NvV32 format;                 /* notify                              4-   7*/
 } SetLut[2];                   /* end of methods in array              -031f*/
 struct {                       /* start of methods in array        0320-    */
  NvU32 offset;                 /* byte offset of top-left pixel       0-   3*/
  NvV32 format;                 /* notify_color_height_width           4-   7*/
 } SetCursorImage[2];           /* end of methods in array              -032f*/
 NvV32 SetCursorPoint;          /* y_x S16_S16                      0330-0333*/
 NvV32 Reserved03[0x003];
 struct {                       /* start of methods in array        0340-    */
  NvV32 imageSize;              /* height_width U16_U16 in pixels      0-   3*/
  NvV32 horizontalBlank;        /* width_start U16_U16 in pixels       4-   7*/
  NvV32 horizontalSync;         /* width_start U16_U16 in pixels       8-   b*/
  NvV32 verticalBlank;          /* width_start U16_U16 in pixels       c-   f*/
  NvV32 verticalSync;           /* width_start U16_U16 in pixels      10-  13*/
  NvV32 totalSize;              /* height_width U16_U16               14-  17*/
  NvV32 pixelClock;             /* in Hertz                           18-  1b*/
  NvV32 format;                 /* see text                           1c-  1f*/
 } SetDac[2];                   /* end of methods in array              -037f*/
 NvV32 Reserved04[0x720];
} Nv07cTypedef, Nv12VideoLutCursorDac;
#define NV07C_TYPEDEF                                     Nv12VideoLutCursorDac
/* dma method offsets, fields, and values */
#define NV07C_SET_OBJECT                                           (0x00000000)
#define NV07C_NO_OPERATION                                         (0x00000100)
#define NV07C_NOTIFY                                               (0x00000104)
#define NV07C_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV07C_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV07C_STOP_IMAGE(b)                                        (0x00000108\
                                                                   +(b)*0x0004)
#define NV07C_STOP_IMAGE_AS_SOON_AS_POSSIBLE                       (0x00000000)
#define NV07C_STOP_IMAGE_BETWEEN_BUFFERS                           (0x00000001)
#define NV07C_STOP_LUT(b)                                          (0x00000110\
                                                                   +(b)*0x0004)
#define NV07C_STOP_LUT_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV07C_STOP_LUT_BETWEEN_BUFFERS                             (0x00000001)
#define NV07C_STOP_CURSOR_IMAGE(b)                                 (0x00000118\
                                                                   +(b)*0x0004)
#define NV07C_STOP_CURSOR_IMAGE_AS_SOON_AS_POSSIBLE                (0x00000000)
#define NV07C_STOP_CURSOR_IMAGE_BETWEEN_BUFFERS                    (0x00000001)
#define NV07C_STOP_DAC(b)                                          (0x00000120\
                                                                   +(b)*0x0004)
#define NV07C_STOP_DAC_AS_SOON_AS_POSSIBLE                         (0x00000000)
#define NV07C_STOP_DAC_BETWEEN_BUFFERS                             (0x00000001)
#define NV07C_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV07C_SET_CONTEXT_DMA_IMAGE(b)                             (0x00000184\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_LUT(b)                               (0x0000018C\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_CURSOR(b)                            (0x00000194\
                                                                   +(b)*0x0004)
#define NV07C_SET_CONTEXT_DMA_SEMAPHORE                            (0x0000019c)

#define NV07C_SET_SEMAPHORE_OFFSET                                 (0x000002f0)
#define NV07C_SET_SEMAPHORE_OFFSET_V                               31:0
#define NV07C_SET_SEMAPHORE_RELEASE                                (0x000002f4)
#define NV07C_SET_SEMAPHORE_RELEASE_V                              31:0

#define NV07C_SET_OFFSET_RANGE                                     (0x000002F8)
#define NV07C_SET_OFFSET_RANGE_START                               14:0
#define NV07C_SET_OFFSET_RANGE_STOP                                30:16
#define NV07C_SET_OFFSET_RANGE_POLARITY                            31:31
#define NV07C_SET_OFFSET_RANGE_POLARITY_IN_RANGE                   (0x00000000)
#define NV07C_SET_OFFSET_RANGE_POLARITY_OUT_RANGE                  (0x00000001)
#define NV07C_GET_OFFSET                                           (0x000002FC)
#define NV07C_GET_OFFSET_IMAGE_0                                   (0x00000000)
#define NV07C_GET_OFFSET_IMAGE_1                                   (0x00000001)
#define NV07C_SET_IMAGE(b)                                         (0x00000300\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_OFFSET(b)                                  (0x00000300\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_FORMAT(b)                                  (0x00000304\
                                                                   +(b)*0x0008)
#define NV07C_SET_IMAGE_FORMAT_PITCH                               15:0
#define NV07C_SET_IMAGE_FORMAT_WHEN                                23:20
#define NV07C_SET_IMAGE_FORMAT_WHEN_NOT_WITHIN_BUFFER              (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_WHEN_IMMEDIATELY                    (0x00000001)
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC                      27:24
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_DISABLED             (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_MULTIHEAD_SYNC_ENABLED              (0x00000001)
#define NV07C_SET_IMAGE_FORMAT_NOTIFY                              31:31
#define NV07C_SET_IMAGE_FORMAT_NOTIFY_WRITE_ONLY                   (0x00000000)
#define NV07C_SET_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN            (0x00000001)
#define NV07C_SET_LUT(b)                                           (0x00000310\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_OFFSET(b)                                    (0x00000310\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_FORMAT(b)                                    (0x00000314\
                                                                   +(b)*0x0008)
#define NV07C_SET_LUT_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV07C_SET_LUT_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)
#define NV07C_SET_CURSOR_IMAGE(b)                                  (0x00000320\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_OFFSET(b)                           (0x00000320\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_FORMAT(b)                           (0x00000324\
                                                                   +(b)*0x0008)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_WIDTH                        7:0
#define NV07C_SET_CURSOR_IMAGE_FORMAT_HEIGHT                       15:8
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR                        30:16
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_ROP1R5G5B5          (0x00000000)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A1R5G5B5            (0x00000001)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_LE_A8R8G8B8            (0x00000002)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_COLOR_PM_LE_A8R8G8B8         (0x00000003)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY                       31:31
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_ONLY            (0x00000000)
#define NV07C_SET_CURSOR_IMAGE_FORMAT_NOTIFY_WRITE_THEN_AWAKEN     (0x00000001)
#define NV07C_SET_CURSOR_POINT                                     (0x00000330)
#define NV07C_SET_CURSOR_POINT_X                                   15:0
#define NV07C_SET_CURSOR_POINT_Y                                   31:16
#define NV07C_SET_DAC(b)                                           (0x00000340\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_IMAGE_SIZE(b)                                (0x00000340\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_IMAGE_SIZE_WIDTH                             15:0
#define NV07C_SET_DAC_IMAGE_SIZE_HEIGHT                            31:16
#define NV07C_SET_DAC_HORIZONTAL_BLANK(b)                          (0x00000344\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_HORIZONTAL_BLANK_START                       15:0
#define NV07C_SET_DAC_HORIZONTAL_BLANK_WIDTH                       31:16
#define NV07C_SET_DAC_HORIZONTAL_SYNC(b)                           (0x00000348\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_HORIZONTAL_SYNC_START                        15:0
#define NV07C_SET_DAC_HORIZONTAL_SYNC_WIDTH                        31:16
#define NV07C_SET_DAC_VERTICAL_BLANK(b)                            (0x0000034c\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_VERTICAL_BLANK_START                         15:0
#define NV07C_SET_DAC_VERTICAL_BLANK_WIDTH                         31:16
#define NV07C_SET_DAC_VERTICAL_SYNC(b)                             (0x00000350\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_VERTICAL_SYNC_START                          15:0
#define NV07C_SET_DAC_VERTICAL_SYNC_WIDTH                          31:16
#define NV07C_SET_DAC_TOTAL_SIZE(b)                                (0x00000354\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_TOTAL_SIZE_WIDTH                             15:0
#define NV07C_SET_DAC_TOTAL_SIZE_HEIGHT                            31:16
#define NV07C_SET_DAC_PIXEL_CLOCK(b)                               (0x00000358\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_FORMAT(b)                                    (0x0000035c\
                                                                   +(b)*0x0020)
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN                           0:0
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN_DISABLED                  (0x00000000)
#define NV07C_SET_DAC_FORMAT_DOUBLE_SCAN_ENABLED                   (0x00000001)
#define NV07C_SET_DAC_FORMAT_INTERLACE                             1:1
#define NV07C_SET_DAC_FORMAT_INTERLACE_DISABLED                    (0x00000000)
#define NV07C_SET_DAC_FORMAT_INTERLACE_ENABLED                     (0x00000001)
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC                       2:2
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC_POSITIVE              (0x00000000)
#define NV07C_SET_DAC_FORMAT_HORIZONTAL_SYNC_NEGATIVE              (0x00000001)
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC                         3:3
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC_POSITIVE                (0x00000000)
#define NV07C_SET_DAC_FORMAT_VERTICAL_SYNC_NEGATIVE                (0x00000001)
#define NV07C_SET_DAC_FORMAT_COLOR                                 19:16
#define NV07C_SET_DAC_FORMAT_COLOR_LUT_LE_Y8                       (0x00000000)
#define NV07C_SET_DAC_FORMAT_COLOR_BYPASS_LE_R5G6B5                (0x00000001)
#define NV07C_SET_DAC_FORMAT_COLOR_LE_BYPASS1R5G5B5                (0x00000002)
#define NV07C_SET_DAC_FORMAT_COLOR_LE_BYPASS1X7R8G8B8              (0x00000003)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE                          21:20
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_CRT                      (0x00000000)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_TV                       (0x00000001)
#define NV07C_SET_DAC_FORMAT_DISPLAY_TYPE_DFP                      (0x00000003)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD                           25:22
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_NTSC_M                    (0x00000000)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_NTSC_J                    (0x00000001)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_M                     (0x00000002)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_A                     (0x00000003)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_N                     (0x00000004)
#define NV07C_SET_DAC_FORMAT_TV_STANDARD_PAL_NC                    (0x00000005)
#define NV07C_SET_DAC_FORMAT_HEAD                                  27:26
#define NV07C_SET_DAC_FORMAT_HEAD_0                                (0x00000000)
#define NV07C_SET_DAC_FORMAT_HEAD_1                                (0x00000001)
#define NV07C_SET_DAC_FORMAT_NOTIFY                                31:31
#define NV07C_SET_DAC_FORMAT_NOTIFY_WRITE_ONLY                     (0x00000000)
#define NV07C_SET_DAC_FORMAT_NOTIFY_WRITE_THEN_AWAKEN              (0x00000001)


typedef NvV32 Nv07dTypedef;

typedef NvV32 Nv07eTypedef;

typedef NvV32 Nv07fTypedef;


/* class NV01_DEVICE_0 */
#define  NV01_DEVICE_0                                             (0x00000080)
/* NvNotification[] fields and values */
#define NV080_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv080Typedef, Nv01Device0;
#define  NV080_TYPEDEF                                             Nv01Device0


/* class NV01_DEVICE_1 */
#define  NV01_DEVICE_1                                             (0x00000081)
/* NvNotification[] fields and values */
#define NV081_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv081Typedef, Nv01Device1;
#define  NV081_TYPEDEF                                             Nv01Device1


/* class NV01_DEVICE_2 */
#define  NV01_DEVICE_2                                             (0x00000082)
/* NvNotification[] fields and values */
#define NV082_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv082Typedef, Nv01Device2;
#define  NV082_TYPEDEF                                             Nv01Device2


/* class NV01_DEVICE_3 */
#define  NV01_DEVICE_3                                             (0x00000083)
/* NvNotification[] fields and values */
#define NV083_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv083Typedef, Nv01Device3;
#define  NV083_TYPEDEF                                             Nv01Device3


/* class NV01_DEVICE_4 */
#define  NV01_DEVICE_4                                             (0x00000084)
/* NvNotification[] fields and values */
#define NV084_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv084Typedef, Nv01Device4;
#define  NV084_TYPEDEF                                             Nv01Device4


/* class NV01_DEVICE_5 */
#define  NV01_DEVICE_5                                             (0x00000085)
/* NvNotification[] fields and values */
#define NV085_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv085Typedef, Nv01Device5;
#define  NV085_TYPEDEF                                             Nv01Device5


/* class NV01_DEVICE_6 */
#define  NV01_DEVICE_6                                             (0x00000086)
/* NvNotification[] fields and values */
#define NV086_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv086Typedef, Nv01Device6;
#define  NV086_TYPEDEF                                             Nv01Device6


/* class NV01_DEVICE_7 */
#define  NV01_DEVICE_7                                             (0x00000087)
/* NvNotification[] fields and values */
#define NV087_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv087Typedef, Nv01Device7;
#define  NV087_TYPEDEF                                             Nv01Device7


/* class NV10_DVD_SUBPICTURE */
/* NvNotification[] elements */
#define NV088_NOTIFIERS_SET_NOTIFY                                 (0)
/* NvNotification[] fields and values */
#define NV088_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV088_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV088_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV088_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV088_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV088_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV088_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaOverlay;    /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaImageIn;    /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextDmaImageOut;   /* NV01_CONTEXT_DMA                 018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0300-0303*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0304-0307*/
 NvU32 ImageOutFormat;          /* color_pitch V16_U16              0308-030b*/
 NvU32 ImageOutOffset;          /* byte offset of top-left pixel    030c-030f*/
 NvV32 ImageInDsDx;             /* S12d20 ds/dx                     0310-0313*/
 NvV32 ImageInDtDy;             /* S12d20 dt/dy                     0314-0317*/
 NvV32 ImageInSize;             /* height_width U16_U16 in texels   0318-031b*/
 NvV32 ImageInFormat;           /* color_pitch V16_U16              031c-031f*/
 NvU32 ImageInOffset;           /* byte offset of top-left texel    0320-0323*/
 NvV32 ImageInPoint;            /* t_s U12d4_U12d4 in texels        0324-0317*/
 NvV32 OverlayDsDx;             /* S12d20 ds/dx                     0328-032b*/
 NvV32 OverlayDtDy;             /* S12d20 dt/dy                     032c-032f*/
 NvV32 OverlaySize;             /* height_width U16_U16 in texels   0330-0333*/
 NvV32 OverlayFormat;           /* color_pitch V16_U16              0334-0337*/
 NvU32 OverlayOffset;           /* byte offset of top-left texel    0338-033b*/
 NvV32 OverlayPoint;            /* t_s U12d4_U12d4 in texels        033c-033f*/
 NvV32 Reserved02[0x730];
} Nv088Typedef, Nv10DvdSubpicture;
#define NV088_TYPEDEF                                         Nv10DvdSubpicture
/* dma method offsets, fields, and values */
#define NV088_SET_OBJECT                                           (0x00000000)
#define NV088_NO_OPERATION                                         (0x00000100)
#define NV088_NOTIFY                                               (0x00000104)
#define NV088_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV088_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV088_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV088_SET_CONTEXT_DMA_OVERLAY                              (0x00000184)
#define NV088_SET_CONTEXT_DMA_IMAGE_IN                             (0x00000188)
#define NV088_SET_CONTEXT_DMA_IMAGE_OUT                            (0x0000018C)
#define NV088_IMAGE_OUT_POINT                                      (0x00000300)
#define NV088_IMAGE_OUT_POINT_X                                    15:0
#define NV088_IMAGE_OUT_POINT_Y                                    31:16
#define NV088_IMAGE_OUT_SIZE                                       (0x00000304)
#define NV088_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV088_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV088_IMAGE_OUT_FORMAT                                     (0x00000308)
#define NV088_IMAGE_OUT_FORMAT_PITCH                               15:0
#define NV088_IMAGE_OUT_FORMAT_COLOR                               31:16
#define NV088_IMAGE_OUT_FORMAT_COLOR_LE_CR8YB8CB8YA8               (0x00000001)
#define NV088_IMAGE_OUT_FORMAT_COLOR_LE_YB8CR8YA8CB8               (0x00000002)
#define NV088_IMAGE_OUT_OFFSET                                     (0x0000030C)
#define NV088_IMAGE_IN_DS_DX                                       (0x00000310)
#define NV088_IMAGE_IN_DT_DY                                       (0x00000314)
#define NV088_IMAGE_IN_SIZE                                        (0x00000318)
#define NV088_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV088_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV088_IMAGE_IN_FORMAT                                      (0x0000031C)
#define NV088_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV088_IMAGE_IN_FORMAT_COLOR                                31:16
#define NV088_IMAGE_IN_FORMAT_COLOR_LE_CR8YB8CB8YA8                (0x00000001)
#define NV088_IMAGE_IN_FORMAT_COLOR_LE_YB8CR8YA8CB8                (0x00000002)
#define NV088_IMAGE_IN_OFFSET                                      (0x00000320)
#define NV088_IMAGE_IN_POINT                                       (0x00000324)
#define NV088_IMAGE_IN_POINT_S                                     15:0
#define NV088_IMAGE_IN_POINT_T                                     31:16
#define NV088_OVERLAY_DS_DX                                        (0x00000328)
#define NV088_OVERLAY_DT_DY                                        (0x0000032C)
#define NV088_OVERLAY_SIZE                                         (0x00000330)
#define NV088_OVERLAY_SIZE_WIDTH                                   15:0
#define NV088_OVERLAY_SIZE_HEIGHT                                  31:16
#define NV088_OVERLAY_FORMAT                                       (0x00000334)
#define NV088_OVERLAY_FORMAT_PITCH                                 15:0
#define NV088_OVERLAY_FORMAT_COLOR                                 31:16
#define NV088_OVERLAY_FORMAT_COLOR_LE_A8CR8CB8Y8                   (0x00000001)
#define NV088_OVERLAY_FORMAT_COLOR_LE_A4CR6YB6A4CB6YA6             (0x00000002)
#define NV088_OVERLAY_FORMAT_COLOR_LE_TRANSPARENT                  (0x00000003)
#define NV088_OVERLAY_OFFSET                                       (0x00000338)
#define NV088_OVERLAY_POINT                                        (0x0000033C)
#define NV088_OVERLAY_POINT_S                                      15:0
#define NV088_OVERLAY_POINT_T                                      31:16


/* class NV10_SCALED_IMAGE_FROM_MEMORY */
/* NvNotification[] elements */
#define NV089_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV089_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV089_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV089_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV089_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV089_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV089_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV089_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV089_SET_COLOR_CONVERSION_*     02fc-02ff*/
 NvV32 SetColorFormat;          /* NV089_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 SetOperation;            /* NV089_SET_OPERATION_*            0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv089Typedef, Nv10ScaledImageFromMemory;
#define NV089_TYPEDEF                                 Nv10ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV089_SET_OBJECT                                           (0x00000000)
#define NV089_NO_OPERATION                                         (0x00000100)
#define NV089_NOTIFY                                               (0x00000104)
#define NV089_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV089_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV089_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV089_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV089_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV089_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV089_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV089_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV089_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV089_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV089_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV089_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV089_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV089_SET_COLOR_FORMAT                                     (0x00000300)
#define NV089_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV089_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV089_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV089_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV089_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV089_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV089_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV089_SET_COLOR_FORMAT_LE_Y8                               (0x00000008)
#define NV089_SET_COLOR_FORMAT_LE_AY8                              (0x00000009)
#define NV089_SET_OPERATION                                        (0x00000304)
#define NV089_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV089_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV089_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV089_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV089_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV089_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV089_CLIP_POINT                                           (0x00000308)
#define NV089_CLIP_POINT_X                                         15:0
#define NV089_CLIP_POINT_Y                                         31:16
#define NV089_CLIP_SIZE                                            (0x0000030C)
#define NV089_CLIP_SIZE_WIDTH                                      15:0
#define NV089_CLIP_SIZE_HEIGHT                                     31:16
#define NV089_IMAGE_OUT_POINT                                      (0x00000310)
#define NV089_IMAGE_OUT_POINT_X                                    15:0
#define NV089_IMAGE_OUT_POINT_Y                                    31:16
#define NV089_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV089_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV089_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV089_DS_DX                                                (0x00000318)
#define NV089_DT_DY                                                (0x0000031C)
#define NV089_IMAGE_IN_SIZE                                        (0x00000400)
#define NV089_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV089_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV089_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV089_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV089_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV089_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV089_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV089_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV089_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV089_IMAGE_IN                                             (0x0000040C)
#define NV089_IMAGE_IN_POINT_U                                     15:0
#define NV089_IMAGE_IN_POINT_V                                     31:16


/* class NV11_SCALED_IMAGE_FROM_MEMORY */
/* NvNotification[] elements */
#define NV1189_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV1189_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV1189_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV1189_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV1189_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV1189_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV1189_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV1189_NOTIFY_*                  0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             0188-018b*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 018c-018f*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0190-0193*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D,SWIZZLE 0198-019b*/
 NvV32 Reserved01[0x058];
 NvV32 SetColorConversion;      /* NV1189_SET_COLOR_CONVERSION_*    02fc-02ff*/
 NvV32 SetColorFormat;          /* NV1189_SET_COLOR_FORMAT_*        0300-0303*/
 NvV32 SetOperation;            /* NV1189_SET_OPERATION_*           0304-0307*/
 NvV32 ClipPoint;               /* y_x S16_S16                      0308-030b*/
 NvV32 ClipSize;                /* height_width U16_U16             030c-030f*/
 NvV32 ImageOutPoint;           /* y_x S16_S16                      0310-0313*/
 NvV32 ImageOutSize;            /* height_width U16_U16             0314-0317*/
 NvV32 DsDx;                    /* S12d20 ds/dx                     0318-031b*/
 NvV32 DtDy;                    /* S12d20 dt/dy                     031c-031f*/
 NvV32 Reserved02[0x038];
 NvV32 ImageInSize;             /* height_width U16_U16             0400-0403*/
 NvV32 ImageInFormat;           /* interpolator_origin_pitch        0404-0407*/
 NvU32 ImageInOffset;           /* bytes                            0408-040b*/
 NvV32 ImageInPoint;            /* v_u U12d4_U12d4                  040c-040f*/
 NvV32 Reserved03[0x6fc];
} Nv1189Typedef, Nv11ScaledImageFromMemory;
#define NV1189_TYPEDEF                                 Nv11ScaledImageFromMemory
/* dma method offsets, fields, and values */
#define NV1189_SET_OBJECT                                           (0x00000000)
#define NV1189_NO_OPERATION                                         (0x00000100)
#define NV1189_NOTIFY                                               (0x00000104)
#define NV1189_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV1189_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV1189_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV1189_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV1189_SET_CONTEXT_PATTERN                                  (0x00000188)
#define NV1189_SET_CONTEXT_ROP                                      (0x0000018C)
#define NV1189_SET_CONTEXT_BETA1                                    (0x00000190)
#define NV1189_SET_CONTEXT_BETA4                                    (0x00000194)
#define NV1189_SET_CONTEXT_SURFACE                                  (0x00000198)
#define NV1189_SET_COLOR_CONVERSION                                 (0x000002fc)
#define NV1189_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV1189_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV1189_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV1189_SET_COLOR_FORMAT                                     (0x00000300)
#define NV1189_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000001)
#define NV1189_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000002)
#define NV1189_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000003)
#define NV1189_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000004)
#define NV1189_SET_COLOR_FORMAT_LE_CR8YB8CB8YA8                     (0x00000005)
#define NV1189_SET_COLOR_FORMAT_LE_YB8CR8YA8CB8                     (0x00000006)
#define NV1189_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000007)
#define NV1189_SET_COLOR_FORMAT_LE_Y8                               (0x00000008)
#define NV1189_SET_COLOR_FORMAT_LE_AY8                              (0x00000009)
#define NV1189_SET_OPERATION                                        (0x00000304)
#define NV1189_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV1189_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV1189_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV1189_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV1189_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV1189_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV1189_CLIP_POINT                                           (0x00000308)
#define NV1189_CLIP_POINT_X                                         15:0
#define NV1189_CLIP_POINT_Y                                         31:16
#define NV1189_CLIP_SIZE                                            (0x0000030C)
#define NV1189_CLIP_SIZE_WIDTH                                      15:0
#define NV1189_CLIP_SIZE_HEIGHT                                     31:16
#define NV1189_IMAGE_OUT_POINT                                      (0x00000310)
#define NV1189_IMAGE_OUT_POINT_X                                    15:0
#define NV1189_IMAGE_OUT_POINT_Y                                    31:16
#define NV1189_IMAGE_OUT_SIZE                                       (0x00000314)
#define NV1189_IMAGE_OUT_SIZE_WIDTH                                 15:0
#define NV1189_IMAGE_OUT_SIZE_HEIGHT                                31:16
#define NV1189_DS_DX                                                (0x00000318)
#define NV1189_DT_DY                                                (0x0000031C)
#define NV1189_IMAGE_IN_SIZE                                        (0x00000400)
#define NV1189_IMAGE_IN_SIZE_WIDTH                                  15:0
#define NV1189_IMAGE_IN_SIZE_HEIGHT                                 31:16
#define NV1189_IMAGE_IN_FORMAT                                      (0x00000404)
#define NV1189_IMAGE_IN_FORMAT_PITCH                                15:0
#define NV1189_IMAGE_IN_FORMAT_ORIGIN                               23:16
#define NV1189_IMAGE_IN_FORMAT_ORIGIN_CENTER                        (0x00000001)
#define NV1189_IMAGE_IN_FORMAT_ORIGIN_CORNER                        (0x00000002)
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR                         31:24
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR_ZOH                     (0x00000000)
#define NV1189_IMAGE_IN_FORMAT_INTERPOLATOR_FOH                     (0x00000001)
#define NV1189_IMAGE_IN_OFFSET                                      (0x00000408)
#define NV1189_IMAGE_IN                                             (0x0000040C)
#define NV1189_IMAGE_IN_POINT_U                                     15:0
#define NV1189_IMAGE_IN_POINT_V                                     31:16


/* class NV10_IMAGE_FROM_CPU */
#define NV08A_NOTIFIERS_NOTIFY                                     (0)
#define NV08A_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV08A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV08A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV08A_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV08A_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV08A_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV08A_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurface;       /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved01[0x056];
 NvV32 SetColorConversion;      /* NV08A_SET_COLOR_CONVERSION_*     02f8-02fb*/
 NvV32 SetOperation;            /* NV08A_SET_OPERATION_*            02fc-02ff*/
 NvV32 SetColorFormat;          /* NV08A_SET_COLOR_FORMAT_*         0300-0303*/
 NvV32 Point;                   /* y_x S16_S16 in pixels            0304-0307*/
 NvV32 SizeOut;                 /* height_width U16_U16, pixels     0308-030b*/
 NvV32 SizeIn;                  /* height_width U16_U16, pixels     030c-030f*/
 NvV32 Reserved02[0x03c];
 struct {                       /* start aliased methods in array   0400-    */
  NvV32 a;                      /* source colors (packed texels)       0-   3*/
  NvV32 b;                      /* source colors (packed texels)       4-   7*/
 } Color[896];                  /* end of aliased methods in array      -1fff*/
} Nv08ATypedef, NV10ImageFromCpu;
#define NV08A_TYPEDEF                                          NV10ImageFromCpu
/* dma method offsets, fields, and values */
#define NV08A_SET_OBJECT                                           (0x00000000)
#define NV08A_NO_OPERATION                                         (0x00000100)
#define NV08A_NOTIFY                                               (0x00000104)
#define NV08A_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV08A_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV08A_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV08A_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV08A_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV08A_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV08A_SET_CONTEXT_ROP                                      (0x00000190)
#define NV08A_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV08A_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV08A_SET_CONTEXT_SURFACE                                  (0x0000019C)
#define NV08A_SET_COLOR_CONVERSION                                 (0x000002F8)
#define NV08A_SET_COLOR_CONVERSION_DITHER                          (0x00000000)
#define NV08A_SET_COLOR_CONVERSION_TRUNCATE                        (0x00000001)
#define NV08A_SET_COLOR_CONVERSION_SUBTRACT_TRUNCATE               (0x00000002)
#define NV08A_SET_OPERATION                                        (0x000002FC)
#define NV08A_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV08A_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV08A_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV08A_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV08A_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV08A_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV08A_SET_COLOR_FORMAT                                     (0x00000300)
#define NV08A_SET_COLOR_FORMAT_LE_R5G6B5                           (0x00000001)
#define NV08A_SET_COLOR_FORMAT_LE_A1R5G5B5                         (0x00000002)
#define NV08A_SET_COLOR_FORMAT_LE_X1R5G5B5                         (0x00000003)
#define NV08A_SET_COLOR_FORMAT_LE_A8R8G8B8                         (0x00000004)
#define NV08A_SET_COLOR_FORMAT_LE_X8R8G8B8                         (0x00000005)
#define NV08A_POINT                                                (0x00000304)
#define NV08A_POINT_X                                              15:0
#define NV08A_POINT_Y                                              31:16
#define NV08A_SIZE_OUT                                             (0x00000308)
#define NV08A_SIZE_OUT_WIDTH                                       15:0
#define NV08A_SIZE_OUT_HEIGHT                                      31:16
#define NV08A_SIZE_IN                                              (0x0000030C)
#define NV08A_SIZE_IN_WIDTH                                        15:0
#define NV08A_SIZE_IN_HEIGHT                                       31:16
#define NV08A_COLOR(a)                                             (0x00000400\
                                                                   +(a)*0x0004)


/* class NV10_CONTEXT_SURFACES_3D */
#define  NV10_CONTEXT_SURFACES_3D                                  (0x00000093)
/* NvNotification[] elements */
#define NV093_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV093_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV093_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV093_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV093_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV093_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV093_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV093_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaColor;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaZeta;       /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 Reserved01[0x05b];
 NvV32 SetClipHorizontal;       /* width_x U16_U16                  02f8-02fb*/
 NvV32 SetClipVertical;         /* height_y U16_U16                 02fc-02ff*/
 NvV32 SetFormat;               /* height_width_type_color all V8   0300-0303*/
 NvV32 SetClipSize;             /* height_width U16_U16             0304-0307*/
 NvV32 SetPitch;                /* zeta_color U16_U16               0308-030b*/
 NvU32 SetOffsetColor;          /* byte offset of top-left pixel    030c-030f*/
 NvU32 SetOffsetZeta;           /* byte offset of top-left pixel    0310-0313*/
 NvV32 Reserved02[0x73b];
} Nv093Typedef, Nv10ContextSurfaces3d;
#define NV093_TYPEDEF                                     Nv10ContextSurfaces3d
/* dma method offsets, fields, and values */
#define NV093_SET_OBJECT                                           (0x00000000)
#define NV093_NO_OPERATION                                         (0x00000100)
#define NV093_NOTIFY                                               (0x00000104)
#define NV093_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV093_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV093_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV093_SET_CONTEXT_DMA_COLOR                                (0x00000184)
#define NV093_SET_CONTEXT_DMA_ZETA                                 (0x00000188)
#define NV093_SET_CLIP_HORIZONTAL                                  (0x000002F8)
#define NV093_SET_CLIP_HORIZONTAL_X                                15:0
#define NV093_SET_CLIP_HORIZONTAL_WIDTH                            31:16
#define NV093_SET_CLIP_VERTICAL                                    (0x000002FC)
#define NV093_SET_CLIP_VERTICAL_Y                                  15:0
#define NV093_SET_CLIP_VERTICAL_HEIGHT                             31:16
#define NV093_SET_FORMAT                                           (0x00000300)
#define NV093_SET_FORMAT_COLOR                                     7:0
#define NV093_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000001)
#define NV093_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000002)
#define NV093_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000003)
#define NV093_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000004)
#define NV093_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000005)
#define NV093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000006)
#define NV093_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000007)
#define NV093_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x00000008)
#define NV093_SET_FORMAT_TYPE                                      15:8
#define NV093_SET_FORMAT_TYPE_PITCH                                (0x00000001)
#define NV093_SET_FORMAT_TYPE_SWIZZLE                              (0x00000002)
#define NV093_SET_FORMAT_WIDTH                                     23:16
#define NV093_SET_FORMAT_HEIGHT                                    31:24
#define NV093_SET_CLIP_SIZE                                        (0x00000304)
#define NV093_SET_CLIP_SIZE_WIDTH                                  15:0
#define NV093_SET_CLIP_SIZE_HEIGHT                                 31:16
#define NV093_SET_PITCH                                            (0x00000308)
#define NV093_SET_PITCH_COLOR                                      15:0
#define NV093_SET_PITCH_ZETA                                       31:16
#define NV093_SET_OFFSET_COLOR                                     (0x0000030C)
#define NV093_SET_OFFSET_ZETA                                      (0x00000310)



/* class NV10_DX5_TEXTURED_TRIANGLE */
#define  NV10_DX5_TEXTURED_TRIANGLE                                (0x00000094)
/* NvNotification[] elements */
#define NV094_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV094_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV094_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV094_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV094_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV094_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV094_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV094_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05c];
 NvV32 ColorKeyValue;           /* see text                         0300-0303*/
 NvU32 Offset;                  /* texture offset in bytes          0304-0307*/
 NvV32 Format;                  /* see text                         0308-030b*/
 NvV32 Filter;                  /* see text                         030c-030f*/
 NvV32 Blend;                   /* see text                         0310-0313*/
 NvV32 Control;                 /* see text                         0314-0317*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0318-031b*/
 NvV32 Reserved02[0x039];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu;                     /* texture u coordinate               18-  1b*/
  NvF32 tv;                     /* texture v coordinate               1c-  1f*/
 } Tlvertex[16];                /* end of methods in array              -05ff*/
 NvV32 DrawPrimitive[64];       /* see text                         0600-06ff*/
 NvV32 Reserved03[0x640];
} Nv094Typedef, Nv10Dx5TexturedTriangle;
#define NV094_TYPEDEF                                   Nv10Dx5TexturedTriangle
/* dma method offsets, fields, and values */
#define NV094_SET_OBJECT                                           (0x00000000)
#define NV094_NO_OPERATION                                         (0x00000100)
#define NV094_NOTIFY                                               (0x00000104)
#define NV094_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV094_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV094_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV094_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV094_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV094_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV094_COLOR_KEY_VALUE                                      (0x00000300)
#define NV094_OFFSET                                               (0x00000304)
#define NV094_FORMAT                                               (0x00000308)
#define NV094_FORMAT_CONTEXT_DMA                                   1:0
#define NV094_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV094_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV094_FORMAT_COLOR_KEY_MATCH                               3:2
#define NV094_FORMAT_COLOR_KEY_MATCH_SRCCOPY                       (0x00000000)
#define NV094_FORMAT_COLOR_KEY_MATCH_ZERO_ALPHA                    (0x00000001)
#define NV094_FORMAT_ORIGIN_ZOH                                    5:4
#define NV094_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV094_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV094_FORMAT_ORIGIN_FOH                                    7:6
#define NV094_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV094_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV094_FORMAT_COLOR                                         11:8
#define NV094_FORMAT_COLOR_LE_Y8                                   (0x00000001)
#define NV094_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV094_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV094_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV094_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV094_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV094_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV094_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV094_FORMAT_BASE_SIZE_U                                   19:16
#define NV094_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV094_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV094_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV094_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV094_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV094_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV094_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV094_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV094_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV094_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV094_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV094_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV094_FORMAT_BASE_SIZE_V                                   23:20
#define NV094_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV094_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV094_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV094_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV094_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV094_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV094_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV094_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV094_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV094_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV094_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV094_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV094_FORMAT_TEXTUREADDRESSU                               26:24
#define NV094_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV094_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV094_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV094_FORMAT_WRAPU                                         27:27
#define NV094_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV094_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSV                               30:28
#define NV094_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV094_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV094_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV094_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV094_FORMAT_WRAPV                                         31:31
#define NV094_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV094_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV094_FILTER                                               (0x0000030C)
#define NV094_FILTER_IGNORE0                                       4:0
#define NV094_FILTER_ZERO0                                         7:5
#define NV094_FILTER_IGNORE1                                       12:8
#define NV094_FILTER_ZERO1                                         14:13
#define NV094_FILTER_IGNORE2                                       15:15
#define NV094_FILTER_MIPMAPLODBIAS                                 23:16
#define NV094_FILTER_TEXTUREMIN                                    26:24
#define NV094_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV094_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV094_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV094_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV094_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV094_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV094_FILTER_IGNORE3                                       27:27
#define NV094_FILTER_TEXTUREMAG                                    30:28
#define NV094_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV094_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV094_FILTER_IGNORE4                                       31:31
#define NV094_BLEND                                                (0x00000310)
#define NV094_BLEND_TEXTUREMAPBLEND                                3:0
#define NV094_BLEND_TEXTUREMAPBLEND_DECAL                          (0x00000001)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATE                       (0x00000002)
#define NV094_BLEND_TEXTUREMAPBLEND_DECALALPHA                     (0x00000003)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATEALPHA                  (0x00000004)
#define NV094_BLEND_TEXTUREMAPBLEND_DECALMASK                      (0x00000005)
#define NV094_BLEND_TEXTUREMAPBLEND_MODULATEMASK                   (0x00000006)
#define NV094_BLEND_TEXTUREMAPBLEND_COPY                           (0x00000007)
#define NV094_BLEND_TEXTUREMAPBLEND_ADD                            (0x00000008)
#define NV094_BLEND_MASK_BIT                                       5:4
#define NV094_BLEND_MASK_BIT_LSB                                   (0x00000001)
#define NV094_BLEND_MASK_BIT_MSB                                   (0x00000002)
#define NV094_BLEND_SHADEMODE                                      7:6
#define NV094_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV094_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV094_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV094_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV094_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV094_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV094_BLEND_SPECULARENABLE                                 15:12
#define NV094_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV094_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV094_BLEND_FOGENABLE                                      19:16
#define NV094_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV094_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV094_BLEND_ALPHABLENDENABLE                               23:20
#define NV094_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV094_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV094_BLEND_SRCBLEND                                       27:24
#define NV094_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV094_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV094_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV094_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV094_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV094_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV094_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV094_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV094_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV094_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV094_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV094_BLEND_DESTBLEND                                      31:28
#define NV094_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV094_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV094_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV094_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV094_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV094_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV094_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV094_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV094_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV094_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV094_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV094_CONTROL                                              (0x00000314)
#define NV094_CONTROL_ALPHAREF                                     7:0
#define NV094_CONTROL_ALPHAFUNC                                    11:8
#define NV094_CONTROL_ALPHAFUNC_NEVER                              (0x00000001)
#define NV094_CONTROL_ALPHAFUNC_LESS                               (0x00000002)
#define NV094_CONTROL_ALPHAFUNC_EQUAL                              (0x00000003)
#define NV094_CONTROL_ALPHAFUNC_LESSEQUAL                          (0x00000004)
#define NV094_CONTROL_ALPHAFUNC_GREATER                            (0x00000005)
#define NV094_CONTROL_ALPHAFUNC_NOTEQUAL                           (0x00000006)
#define NV094_CONTROL_ALPHAFUNC_GREATEREQUAL                       (0x00000007)
#define NV094_CONTROL_ALPHAFUNC_ALWAYS                             (0x00000008)
#define NV094_CONTROL_ALPHATESTENABLE                              12:12
#define NV094_CONTROL_ALPHATESTENABLE_FALSE                        (0x00000000)
#define NV094_CONTROL_ALPHATESTENABLE_TRUE                         (0x00000001)
#define NV094_CONTROL_ORIGIN                                       13:13
#define NV094_CONTROL_ORIGIN_CENTER                                (0x00000000)
#define NV094_CONTROL_ORIGIN_CORNER                                (0x00000001)
#define NV094_CONTROL_ZENABLE                                      15:14
#define NV094_CONTROL_ZENABLE_FALSE                                (0x00000000)
#define NV094_CONTROL_ZENABLE_TRUE                                 (0x00000001)
#define NV094_CONTROL_ZFUNC                                        19:16
#define NV094_CONTROL_ZFUNC_NEVER                                  (0x00000001)
#define NV094_CONTROL_ZFUNC_LESS                                   (0x00000002)
#define NV094_CONTROL_ZFUNC_EQUAL                                  (0x00000003)
#define NV094_CONTROL_ZFUNC_LESSEQUAL                              (0x00000004)
#define NV094_CONTROL_ZFUNC_GREATER                                (0x00000005)
#define NV094_CONTROL_ZFUNC_NOTEQUAL                               (0x00000006)
#define NV094_CONTROL_ZFUNC_GREATEREQUAL                           (0x00000007)
#define NV094_CONTROL_ZFUNC_ALWAYS                                 (0x00000008)
#define NV094_CONTROL_CULLMODE                                     21:20
#define NV094_CONTROL_CULLMODE_NONE                                (0x00000001)
#define NV094_CONTROL_CULLMODE_CW                                  (0x00000002)
#define NV094_CONTROL_CULLMODE_CCW                                 (0x00000003)
#define NV094_CONTROL_DITHERENABLE                                 22:22
#define NV094_CONTROL_DITHERENABLE_FALSE                           (0x00000000)
#define NV094_CONTROL_DITHERENABLE_TRUE                            (0x00000001)
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE                         23:23
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE_FALSE                   (0x00000000)
#define NV094_CONTROL_Z_PERSPECTIVE_ENABLE_TRUE                    (0x00000001)
#define NV094_CONTROL_ZWRITEENABLE                                 29:24
#define NV094_CONTROL_ZWRITEENABLE_FALSE                           (0x00000000)
#define NV094_CONTROL_ZWRITEENABLE_TRUE                            (0x00000001)
#define NV094_CONTROL_Z_FORMAT                                     31:30
#define NV094_CONTROL_Z_FORMAT_FIXED                               (0x00000001)
#define NV094_CONTROL_Z_FORMAT_FLOAT                               (0x00000002)
#define NV094_FOG_COLOR                                            (0x00000318)
#define NV094_TLVERTEX(i)                                          (0x00000400\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SX(i)                                       (0x00000400\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SY(i)                                       (0x00000404\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SZ(i)                                       (0x00000408\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_RHW(i)                                      (0x0000040C\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_COLOR(i)                                    (0x00000410\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_COLOR_BLUE                                  7:0
#define NV094_TLVERTEX_COLOR_GREEN                                 15:8
#define NV094_TLVERTEX_COLOR_RED                                   23:16
#define NV094_TLVERTEX_COLOR_ALPHA                                 31:24
#define NV094_TLVERTEX_SPECULAR(i)                                 (0x00000414\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_SPECULAR_BLUE                               7:0
#define NV094_TLVERTEX_SPECULAR_GREEN                              15:8
#define NV094_TLVERTEX_SPECULAR_RED                                23:16
#define NV094_TLVERTEX_SPECULAR_FOG                                31:24
#define NV094_TLVERTEX_TU(i)                                       (0x00000418\
                                                                   +(i)*0x0020)
#define NV094_TLVERTEX_TV(i)                                       (0x0000041C\
                                                                   +(i)*0x0020)
#define NV094_DRAW_PRIMITIVE(a)                                    (0x00000600\
                                                                   +(a)*0x0004)
#define NV094_DRAW_PRIMITIVE_I0                                    3:0
#define NV094_DRAW_PRIMITIVE_I1                                    7:4
#define NV094_DRAW_PRIMITIVE_I2                                    11:8
#define NV094_DRAW_PRIMITIVE_I3                                    15:12
#define NV094_DRAW_PRIMITIVE_I4                                    19:16
#define NV094_DRAW_PRIMITIVE_I5                                    31:20


/* class NV10_DX6_MULTI_TEXTURE_TRIANGLE */
/* NvNotification[] elements */
#define NV095_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV095_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV095_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV095_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV095_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV095_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV095_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV095_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaA;          /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 SetContextDmaB;          /* NV01_CONTEXT_DMA                 0188-018b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_3D         018c-018f*/
 NvV32 Reserved01[0x05e];
 NvU32 Offset[2];               /* offset in bytes                  0308-030f*/
 NvV32 Format[2];               /* see text                         0310-0317*/
 NvV32 Filter[2];               /* see text                         0318-031f*/
 NvV32 Combine0Alpha;           /* see text                         0320-0323*/
 NvV32 Combine0Color;           /* see text                         0324-0327*/
 NvV32 Reserved02;
 NvV32 Combine1Alpha;           /* see text                         032c-032f*/
 NvV32 Combine1Color;           /* see text                         0330-0333*/
 NvV32 CombineFactor;           /* A8R8G8B8                         0334-0337*/
 NvV32 Blend;                   /* see text                         0338-033b*/
 NvV32 Control0;                /* see text                         033c-033f*/
 NvV32 Control1;                /* see text                         0340-0343*/
 NvV32 Control2;                /* see text                         0344-0347*/
 NvV32 FogColor;                /* X8R8G8B8 fog color               0348-034b*/
 NvV32 Reserved03[0x02D];
 struct {                       /* start of methods in array        0400-    */
  NvF32 sx;                     /* screen x coordinate                00-  03*/
  NvF32 sy;                     /* screen y coordinate                04-  07*/
  NvF32 sz;                     /* screen z coordinate                08-  0b*/
  NvF32 rhw;                    /* reciprocal homogeneous W (1/W)     0c-  0f*/
  NvV32 color;                  /* A8R8G8B8                           10-  13*/
  NvV32 specular;               /* F8R8G8B8                           14-  17*/
  NvF32 tu0;                    /* texture 0 u coordinate             18-  1b*/
  NvF32 tv0;                    /* texture 0 v coordinate             1c-  1f*/
  NvF32 tu1;                    /* texture 1 u coordinate             20-  23*/
  NvF32 tv1;                    /* texture 1 v coordinate             24-  27*/
 } Tlmtvertex[8];               /* end of methods in array              -053f*/
 NvV32 DrawPrimitive[48];       /* see text                         0540-05ff*/
 NvV32 Reserved04[0x680];
} Nv095Typedef, Nv10Dx6MultiTextureTriangle;
#define NV095_TYPEDEF                               Nv10Dx6MultiTextureTriangle
/* dma method offsets, fields, and values */
#define NV095_SET_OBJECT                                           (0x00000000)
#define NV095_NO_OPERATION                                         (0x00000100)
#define NV095_NOTIFY                                               (0x00000104)
#define NV095_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV095_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV095_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV095_SET_CONTEXT_DMA_A                                    (0x00000184)
#define NV095_SET_CONTEXT_DMA_B                                    (0x00000188)
#define NV095_SET_CONTEXT_SURFACES                                 (0x0000018C)
#define NV095_OFFSET(b)                                            (0x00000308\
                                                                   +(b)*0x0004)
#define NV095_FORMAT(b)                                            (0x00000310\
                                                                   +(b)*0x0004)
#define NV095_FORMAT_CONTEXT_DMA                                   3:0
#define NV095_FORMAT_CONTEXT_DMA_A                                 (0x00000001)
#define NV095_FORMAT_CONTEXT_DMA_B                                 (0x00000002)
#define NV095_FORMAT_ORIGIN_ZOH                                    5:4
#define NV095_FORMAT_ORIGIN_ZOH_CENTER                             (0x00000001)
#define NV095_FORMAT_ORIGIN_ZOH_CORNER                             (0x00000002)
#define NV095_FORMAT_ORIGIN_FOH                                    7:6
#define NV095_FORMAT_ORIGIN_FOH_CENTER                             (0x00000001)
#define NV095_FORMAT_ORIGIN_FOH_CORNER                             (0x00000002)
#define NV095_FORMAT_COLOR                                         11:8
#define NV095_FORMAT_COLOR_LE_AY8                                  (0x00000001)
#define NV095_FORMAT_COLOR_LE_A1R5G5B5                             (0x00000002)
#define NV095_FORMAT_COLOR_LE_X1R5G5B5                             (0x00000003)
#define NV095_FORMAT_COLOR_LE_A4R4G4B4                             (0x00000004)
#define NV095_FORMAT_COLOR_LE_R5G6B5                               (0x00000005)
#define NV095_FORMAT_COLOR_LE_A8R8G8B8                             (0x00000006)
#define NV095_FORMAT_COLOR_LE_X8R8G8B8                             (0x00000007)
#define NV095_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV095_FORMAT_BASE_SIZE_U                                   19:16
#define NV095_FORMAT_BASE_SIZE_U_1                                 (0x00000000)
#define NV095_FORMAT_BASE_SIZE_U_2                                 (0x00000001)
#define NV095_FORMAT_BASE_SIZE_U_4                                 (0x00000002)
#define NV095_FORMAT_BASE_SIZE_U_8                                 (0x00000003)
#define NV095_FORMAT_BASE_SIZE_U_16                                (0x00000004)
#define NV095_FORMAT_BASE_SIZE_U_32                                (0x00000005)
#define NV095_FORMAT_BASE_SIZE_U_64                                (0x00000006)
#define NV095_FORMAT_BASE_SIZE_U_128                               (0x00000007)
#define NV095_FORMAT_BASE_SIZE_U_256                               (0x00000008)
#define NV095_FORMAT_BASE_SIZE_U_512                               (0x00000009)
#define NV095_FORMAT_BASE_SIZE_U_1024                              (0x0000000A)
#define NV095_FORMAT_BASE_SIZE_U_2048                              (0x0000000B)
#define NV095_FORMAT_BASE_SIZE_V                                   23:20
#define NV095_FORMAT_BASE_SIZE_V_1                                 (0x00000000)
#define NV095_FORMAT_BASE_SIZE_V_2                                 (0x00000001)
#define NV095_FORMAT_BASE_SIZE_V_4                                 (0x00000002)
#define NV095_FORMAT_BASE_SIZE_V_8                                 (0x00000003)
#define NV095_FORMAT_BASE_SIZE_V_16                                (0x00000004)
#define NV095_FORMAT_BASE_SIZE_V_32                                (0x00000005)
#define NV095_FORMAT_BASE_SIZE_V_64                                (0x00000006)
#define NV095_FORMAT_BASE_SIZE_V_128                               (0x00000007)
#define NV095_FORMAT_BASE_SIZE_V_256                               (0x00000008)
#define NV095_FORMAT_BASE_SIZE_V_512                               (0x00000009)
#define NV095_FORMAT_BASE_SIZE_V_1024                              (0x0000000A)
#define NV095_FORMAT_BASE_SIZE_V_2048                              (0x0000000B)
#define NV095_FORMAT_TEXTUREADDRESSU                               26:24
#define NV095_FORMAT_TEXTUREADDRESSU_WRAP                          (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSU_MIRROR                        (0x00000002)
#define NV095_FORMAT_TEXTUREADDRESSU_CLAMP                         (0x00000003)
#define NV095_FORMAT_TEXTUREADDRESSU_BORDER                        (0x00000004)
#define NV095_FORMAT_WRAPU                                         27:27
#define NV095_FORMAT_WRAPU_FALSE                                   (0x00000000)
#define NV095_FORMAT_WRAPU_TRUE                                    (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSV                               30:28
#define NV095_FORMAT_TEXTUREADDRESSV_WRAP                          (0x00000001)
#define NV095_FORMAT_TEXTUREADDRESSV_MIRROR                        (0x00000002)
#define NV095_FORMAT_TEXTUREADDRESSV_CLAMP                         (0x00000003)
#define NV095_FORMAT_TEXTUREADDRESSV_BORDER                        (0x00000004)
#define NV095_FORMAT_WRAPV                                         31:31
#define NV095_FORMAT_WRAPV_FALSE                                   (0x00000000)
#define NV095_FORMAT_WRAPV_TRUE                                    (0x00000001)
#define NV095_FILTER(b)                                            (0x00000318\
                                                                   +(b)*0x0004)
#define NV095_FILTER_IGNORE0                                       4:0
#define NV095_FILTER_ZERO0                                         7:5
#define NV095_FILTER_IGNORE1                                       12:8
#define NV095_FILTER_ZERO1                                         14:13
#define NV095_FILTER_IGNORE2                                       15:15
#define NV095_FILTER_MIPMAPLODBIAS                                 23:16
#define NV095_FILTER_TEXTUREMIN                                    26:24
#define NV095_FILTER_TEXTUREMIN_NEAREST                            (0x00000001)
#define NV095_FILTER_TEXTUREMIN_LINEAR                             (0x00000002)
#define NV095_FILTER_TEXTUREMIN_MIPNEAREST                         (0x00000003)
#define NV095_FILTER_TEXTUREMIN_MIPLINEAR                          (0x00000004)
#define NV095_FILTER_TEXTUREMIN_LINEARMIPNEAREST                   (0x00000005)
#define NV095_FILTER_TEXTUREMIN_LINEARMIPLINEAR                    (0x00000006)
#define NV095_FILTER_IGNORE3                                       27:27
#define NV095_FILTER_TEXTUREMAG                                    30:28
#define NV095_FILTER_TEXTUREMAG_NEAREST                            (0x00000001)
#define NV095_FILTER_TEXTUREMAG_LINEAR                             (0x00000002)
#define NV095_FILTER_IGNORE4                                       31:31
#define NV095_COMBINE_0_ALPHA                                      (0x00000320)
#define NV095_COMBINE_0_ALPHA_INVERSE_0                            0:0
#define NV095_COMBINE_0_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_0                              1:1
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0                           7:2
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_1                            8:8
#define NV095_COMBINE_0_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_1                              9:9
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1                           15:10
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_2                            16:16
#define NV095_COMBINE_0_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_2                              17:17
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2                           23:18
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_INVERSE_3                            24:24
#define NV095_COMBINE_0_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_ALPHA_ALPHA_3                              25:25
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3                           28:26
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_ALPHA_OPERATION                            31:29
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_0_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_0_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_0_COLOR                                      (0x00000324)
#define NV095_COMBINE_0_COLOR_INVERSE_0                            0:0
#define NV095_COMBINE_0_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_0                              1:1
#define NV095_COMBINE_0_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0                           7:2
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_1                            8:8
#define NV095_COMBINE_0_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_1                              9:9
#define NV095_COMBINE_0_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1                           15:10
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_2                            16:16
#define NV095_COMBINE_0_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_2                              17:17
#define NV095_COMBINE_0_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2                           23:18
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_INVERSE_3                            24:24
#define NV095_COMBINE_0_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_0_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_0_COLOR_ALPHA_3                              25:25
#define NV095_COMBINE_0_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV095_COMBINE_0_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3                           28:26
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_0_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_0_COLOR_OPERATION                            31:29
#define NV095_COMBINE_0_COLOR_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_0_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_0_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_0_COLOR_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_0_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_1_ALPHA                                      (0x0000032C)
#define NV095_COMBINE_1_ALPHA_INVERSE_0                            0:0
#define NV095_COMBINE_1_ALPHA_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_0                              1:1
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0                           7:2
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_1                            8:8
#define NV095_COMBINE_1_ALPHA_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_1                              9:9
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1                           15:10
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_2                            16:16
#define NV095_COMBINE_1_ALPHA_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_2                              17:17
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2                           23:18
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_INVERSE_3                            24:24
#define NV095_COMBINE_1_ALPHA_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_ALPHA_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_ALPHA_ALPHA_3                              25:25
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3                           28:26
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_ALPHA_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_ALPHA_OPERATION                            31:29
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_1_ALPHA_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_1_ALPHA_OPERATION_ADDSIGNED2                 (0x00000007)
#define NV095_COMBINE_1_COLOR                                      (0x00000330)
#define NV095_COMBINE_1_COLOR_INVERSE_0                            0:0
#define NV095_COMBINE_1_COLOR_INVERSE_0_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_0_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_0                              1:1
#define NV095_COMBINE_1_COLOR_ALPHA_0_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_0_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0                           7:2
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_0_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_1                            8:8
#define NV095_COMBINE_1_COLOR_INVERSE_1_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_1_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_1                              9:9
#define NV095_COMBINE_1_COLOR_ALPHA_1_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_1_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1                           15:10
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_1_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_2                            16:16
#define NV095_COMBINE_1_COLOR_INVERSE_2_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_2_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_2                              17:17
#define NV095_COMBINE_1_COLOR_ALPHA_2_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_2_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2                           23:18
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_2_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_INVERSE_3                            24:24
#define NV095_COMBINE_1_COLOR_INVERSE_3_NORMAL                     (0x00000000)
#define NV095_COMBINE_1_COLOR_INVERSE_3_INVERSE                    (0x00000001)
#define NV095_COMBINE_1_COLOR_ALPHA_3                              25:25
#define NV095_COMBINE_1_COLOR_ALPHA_3_COLOR                        (0x00000000)
#define NV095_COMBINE_1_COLOR_ALPHA_3_ALPHA                        (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3                           28:26
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_ZERO                      (0x00000001)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_FACTOR                    (0x00000002)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_DIFFUSE                   (0x00000003)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_INPUT                     (0x00000004)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE0                  (0x00000005)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURE1                  (0x00000006)
#define NV095_COMBINE_1_COLOR_ARGUMENT_3_TEXTURELOD                (0x00000007)
#define NV095_COMBINE_1_COLOR_OPERATION                            31:29
#define NV095_COMBINE_1_COLOR_OPERATION_ADD                        (0x00000001)
#define NV095_COMBINE_1_COLOR_OPERATION_ADD2                       (0x00000002)
#define NV095_COMBINE_1_COLOR_OPERATION_ADD4                       (0x00000003)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDSIGNED                  (0x00000004)
#define NV095_COMBINE_1_COLOR_OPERATION_MUX                        (0x00000005)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDCOMPLEMENT              (0x00000006)
#define NV095_COMBINE_1_COLOR_OPERATION_ADDSIGNED2                 (0x00000007)
/* The following NV095_COMBINE_*** defines can be used without regard to the combiner number */
#define NV095_COMBINE_ALPHA_INVERSE_0                              0:0
#define NV095_COMBINE_ALPHA_INVERSE_0_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_0_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_0                                1:1
#define NV095_COMBINE_ALPHA_ARGUMENT_0                             7:2
#define NV095_COMBINE_ALPHA_ARGUMENT_0_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_1                              8:8
#define NV095_COMBINE_ALPHA_INVERSE_1_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_1_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_1                                9:9
#define NV095_COMBINE_ALPHA_ARGUMENT_1                             15:10
#define NV095_COMBINE_ALPHA_ARGUMENT_1_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_2                              16:16
#define NV095_COMBINE_ALPHA_INVERSE_2_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_2_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_2                                17:17
#define NV095_COMBINE_ALPHA_ARGUMENT_2                             23:18
#define NV095_COMBINE_ALPHA_ARGUMENT_2_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_INVERSE_3                              24:24
#define NV095_COMBINE_ALPHA_INVERSE_3_NORMAL                       (0x00000000)
#define NV095_COMBINE_ALPHA_INVERSE_3_INVERSE                      (0x00000001)
#define NV095_COMBINE_ALPHA_ALPHA_3                                25:25
#define NV095_COMBINE_ALPHA_ARGUMENT_3                             28:26
#define NV095_COMBINE_ALPHA_ARGUMENT_3_ZERO                        (0x00000001)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_INPUT                       (0x00000004)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_ALPHA_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_ALPHA_OPERATION                              31:29
#define NV095_COMBINE_ALPHA_OPERATION_ADD                          (0x00000001)
#define NV095_COMBINE_ALPHA_OPERATION_ADD2                         (0x00000002)
#define NV095_COMBINE_ALPHA_OPERATION_ADD4                         (0x00000003)
#define NV095_COMBINE_ALPHA_OPERATION_ADDSIGNED                    (0x00000004)
#define NV095_COMBINE_ALPHA_OPERATION_MUX                          (0x00000005)
#define NV095_COMBINE_ALPHA_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV095_COMBINE_ALPHA_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_0                              0:0
#define NV095_COMBINE_COLOR_INVERSE_0_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_0_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_0                                1:1
#define NV095_COMBINE_COLOR_ALPHA_0_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_0_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_0                             7:2
#define NV095_COMBINE_COLOR_ARGUMENT_0_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_0_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_0_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_0_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_0_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_1                              8:8
#define NV095_COMBINE_COLOR_INVERSE_1_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_1_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_1                                9:9
#define NV095_COMBINE_COLOR_ALPHA_1_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_1_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_1                             15:10
#define NV095_COMBINE_COLOR_ARGUMENT_1_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_1_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_1_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_1_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_1_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_2                              16:16
#define NV095_COMBINE_COLOR_INVERSE_2_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_2_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_2                                17:17
#define NV095_COMBINE_COLOR_ALPHA_2_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_2_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_2                             23:18
#define NV095_COMBINE_COLOR_ARGUMENT_2_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_2_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_2_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_2_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_2_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_INVERSE_3                              24:24
#define NV095_COMBINE_COLOR_INVERSE_3_NORMAL                       (0x00000000)
#define NV095_COMBINE_COLOR_INVERSE_3_INVERSE                      (0x00000001)
#define NV095_COMBINE_COLOR_ALPHA_3                                25:25
#define NV095_COMBINE_COLOR_ALPHA_3_COLOR                          (0x00000000)
#define NV095_COMBINE_COLOR_ALPHA_3_ALPHA                          (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_3                             28:26
#define NV095_COMBINE_COLOR_ARGUMENT_3_ZERO                        (0x00000001)
#define NV095_COMBINE_COLOR_ARGUMENT_3_FACTOR                      (0x00000002)
#define NV095_COMBINE_COLOR_ARGUMENT_3_DIFFUSE                     (0x00000003)
#define NV095_COMBINE_COLOR_ARGUMENT_3_INPUT                       (0x00000004)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURE0                    (0x00000005)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURE1                    (0x00000006)
#define NV095_COMBINE_COLOR_ARGUMENT_3_TEXTURELOD                  (0x00000007)
#define NV095_COMBINE_COLOR_OPERATION                              31:29
#define NV095_COMBINE_COLOR_OPERATION_ADD                          (0x00000001)
#define NV095_COMBINE_COLOR_OPERATION_ADD2                         (0x00000002)
#define NV095_COMBINE_COLOR_OPERATION_ADD4                         (0x00000003)
#define NV095_COMBINE_COLOR_OPERATION_ADDSIGNED                    (0x00000004)
#define NV095_COMBINE_COLOR_OPERATION_MUX                          (0x00000005)
#define NV095_COMBINE_COLOR_OPERATION_ADDCOMPLEMENT                (0x00000006)
#define NV095_COMBINE_COLOR_OPERATION_ADDSIGNED2                   (0x00000007)
#define NV095_COMBINE_FACTOR                                       (0x00000334)
#define NV095_COMBINE_FACTOR_BLUE                                  7:0
#define NV095_COMBINE_FACTOR_GREEN                                 15:8
#define NV095_COMBINE_FACTOR_RED                                   23:16
#define NV095_COMBINE_FACTOR_ALPHA                                 31:24
#define NV095_BLEND                                                (0x00000338)
#define NV095_BLEND_MASK_BIT                                       5:0
#define NV095_BLEND_MASK_BIT_LSB                                   (0x00000010)
#define NV095_BLEND_MASK_BIT_MSB                                   (0x00000020)
#define NV095_BLEND_SHADEMODE                                      7:6
#define NV095_BLEND_SHADEMODE_FLAT                                 (0x00000001)
#define NV095_BLEND_SHADEMODE_GOURAUD                              (0x00000002)
#define NV095_BLEND_SHADEMODE_PHONG                                (0x00000003)
#define NV095_BLEND_TEXTUREPERSPECTIVE                             11:8
#define NV095_BLEND_TEXTUREPERSPECTIVE_FALSE                       (0x00000000)
#define NV095_BLEND_TEXTUREPERSPECTIVE_TRUE                        (0x00000001)
#define NV095_BLEND_SPECULARENABLE                                 15:12
#define NV095_BLEND_SPECULARENABLE_FALSE                           (0x00000000)
#define NV095_BLEND_SPECULARENABLE_TRUE                            (0x00000001)
#define NV095_BLEND_FOGENABLE                                      19:16
#define NV095_BLEND_FOGENABLE_FALSE                                (0x00000000)
#define NV095_BLEND_FOGENABLE_TRUE                                 (0x00000001)
#define NV095_BLEND_ALPHABLENDENABLE                               23:20
#define NV095_BLEND_ALPHABLENDENABLE_FALSE                         (0x00000000)
#define NV095_BLEND_ALPHABLENDENABLE_TRUE                          (0x00000001)
#define NV095_BLEND_SRCBLEND                                       27:24
#define NV095_BLEND_SRCBLEND_ZERO                                  (0x00000001)
#define NV095_BLEND_SRCBLEND_ONE                                   (0x00000002)
#define NV095_BLEND_SRCBLEND_SRCCOLOR                              (0x00000003)
#define NV095_BLEND_SRCBLEND_INVSRCCOLOR                           (0x00000004)
#define NV095_BLEND_SRCBLEND_SRCALPHA                              (0x00000005)
#define NV095_BLEND_SRCBLEND_INVSRCALPHA                           (0x00000006)
#define NV095_BLEND_SRCBLEND_DESTALPHA                             (0x00000007)
#define NV095_BLEND_SRCBLEND_INVDESTALPHA                          (0x00000008)
#define NV095_BLEND_SRCBLEND_DESTCOLOR                             (0x00000009)
#define NV095_BLEND_SRCBLEND_INVDESTCOLOR                          (0x0000000A)
#define NV095_BLEND_SRCBLEND_SRCALPHASAT                           (0x0000000B)
#define NV095_BLEND_DESTBLEND                                      31:28
#define NV095_BLEND_DESTBLEND_ZERO                                 (0x00000001)
#define NV095_BLEND_DESTBLEND_ONE                                  (0x00000002)
#define NV095_BLEND_DESTBLEND_SRCCOLOR                             (0x00000003)
#define NV095_BLEND_DESTBLEND_INVSRCCOLOR                          (0x00000004)
#define NV095_BLEND_DESTBLEND_SRCALPHA                             (0x00000005)
#define NV095_BLEND_DESTBLEND_INVSRCALPHA                          (0x00000006)
#define NV095_BLEND_DESTBLEND_DESTALPHA                            (0x00000007)
#define NV095_BLEND_DESTBLEND_INVDESTALPHA                         (0x00000008)
#define NV095_BLEND_DESTBLEND_DESTCOLOR                            (0x00000009)
#define NV095_BLEND_DESTBLEND_INVDESTCOLOR                         (0x0000000A)
#define NV095_BLEND_DESTBLEND_SRCALPHASAT                          (0x0000000B)
#define NV095_CONTROL0                                             (0x0000033C)
#define NV095_CONTROL0_ALPHAREF                                    7:0
#define NV095_CONTROL0_ALPHAFUNC                                   11:8
#define NV095_CONTROL0_ALPHAFUNC_NEVER                             (0x00000001)
#define NV095_CONTROL0_ALPHAFUNC_LESS                              (0x00000002)
#define NV095_CONTROL0_ALPHAFUNC_EQUAL                             (0x00000003)
#define NV095_CONTROL0_ALPHAFUNC_LESSEQUAL                         (0x00000004)
#define NV095_CONTROL0_ALPHAFUNC_GREATER                           (0x00000005)
#define NV095_CONTROL0_ALPHAFUNC_NOTEQUAL                          (0x00000006)
#define NV095_CONTROL0_ALPHAFUNC_GREATEREQUAL                      (0x00000007)
#define NV095_CONTROL0_ALPHAFUNC_ALWAYS                            (0x00000008)
#define NV095_CONTROL0_ALPHATESTENABLE                             12:12
#define NV095_CONTROL0_ALPHATESTENABLE_FALSE                       (0x00000000)
#define NV095_CONTROL0_ALPHATESTENABLE_TRUE                        (0x00000001)
#define NV095_CONTROL0_ORIGIN                                      13:13
#define NV095_CONTROL0_ORIGIN_CENTER                               (0x00000000)
#define NV095_CONTROL0_ORIGIN_CORNER                               (0x00000001)
#define NV095_CONTROL0_ZENABLE                                     15:14
#define NV095_CONTROL0_ZENABLE_FALSE                               (0x00000000)
#define NV095_CONTROL0_ZENABLE_TRUE                                (0x00000001)
#define NV095_CONTROL0_ZFUNC                                       19:16
#define NV095_CONTROL0_ZFUNC_NEVER                                 (0x00000001)
#define NV095_CONTROL0_ZFUNC_LESS                                  (0x00000002)
#define NV095_CONTROL0_ZFUNC_EQUAL                                 (0x00000003)
#define NV095_CONTROL0_ZFUNC_LESSEQUAL                             (0x00000004)
#define NV095_CONTROL0_ZFUNC_GREATER                               (0x00000005)
#define NV095_CONTROL0_ZFUNC_NOTEQUAL                              (0x00000006)
#define NV095_CONTROL0_ZFUNC_GREATEREQUAL                          (0x00000007)
#define NV095_CONTROL0_ZFUNC_ALWAYS                                (0x00000008)
#define NV095_CONTROL0_CULLMODE                                    21:20
#define NV095_CONTROL0_CULLMODE_NONE                               (0x00000001)
#define NV095_CONTROL0_CULLMODE_CW                                 (0x00000002)
#define NV095_CONTROL0_CULLMODE_CCW                                (0x00000003)
#define NV095_CONTROL0_DITHERENABLE                                22:22
#define NV095_CONTROL0_DITHERENABLE_FALSE                          (0x00000000)
#define NV095_CONTROL0_DITHERENABLE_TRUE                           (0x00000001)
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE                        23:23
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                  (0x00000000)
#define NV095_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                   (0x00000001)
#define NV095_CONTROL0_ZWRITEENABLE                                24:24
#define NV095_CONTROL0_ZWRITEENABLE_FALSE                          (0x00000000)
#define NV095_CONTROL0_ZWRITEENABLE_TRUE                           (0x00000001)
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE                        25:25
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                  (0x00000000)
#define NV095_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                   (0x00000001)
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE                          26:26
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV095_CONTROL0_ALPHA_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV095_CONTROL0_RED_WRITE_ENABLE                            27:27
#define NV095_CONTROL0_RED_WRITE_ENABLE_FALSE                      (0x00000000)
#define NV095_CONTROL0_RED_WRITE_ENABLE_TRUE                       (0x00000001)
#define NV095_CONTROL0_GREEN_WRITE_ENABLE                          28:28
#define NV095_CONTROL0_GREEN_WRITE_ENABLE_FALSE                    (0x00000000)
#define NV095_CONTROL0_GREEN_WRITE_ENABLE_TRUE                     (0x00000001)
#define NV095_CONTROL0_BLUE_WRITE_ENABLE                           29:29
#define NV095_CONTROL0_BLUE_WRITE_ENABLE_FALSE                     (0x00000000)
#define NV095_CONTROL0_BLUE_WRITE_ENABLE_TRUE                      (0x00000001)
#define NV095_CONTROL0_Z_FORMAT                                    31:30
#define NV095_CONTROL0_Z_FORMAT_FIXED                              (0x00000001)
#define NV095_CONTROL0_Z_FORMAT_FLOAT                              (0x00000002)
#define NV095_CONTROL1                                             (0x00000340)
#define NV095_CONTROL1_STENCIL_TEST_ENABLE                         3:0
#define NV095_CONTROL1_STENCIL_TEST_ENABLE_FALSE                   (0x00000000)
#define NV095_CONTROL1_STENCIL_TEST_ENABLE_TRUE                    (0x00000001)
#define NV095_CONTROL1_STENCIL_FUNC                                7:4
#define NV095_CONTROL1_STENCIL_FUNC_NEVER                          (0x00000001)
#define NV095_CONTROL1_STENCIL_FUNC_LESS                           (0x00000002)
#define NV095_CONTROL1_STENCIL_FUNC_EQUAL                          (0x00000003)
#define NV095_CONTROL1_STENCIL_FUNC_LESSEQUAL                      (0x00000004)
#define NV095_CONTROL1_STENCIL_FUNC_GREATER                        (0x00000005)
#define NV095_CONTROL1_STENCIL_FUNC_NOTEQUAL                       (0x00000006)
#define NV095_CONTROL1_STENCIL_FUNC_GREATEREQUAL                   (0x00000007)
#define NV095_CONTROL1_STENCIL_FUNC_ALWAYS                         (0x00000008)
#define NV095_CONTROL1_STENCIL_REF                                 15:8
#define NV095_CONTROL1_STENCIL_MASK_READ                           23:16
#define NV095_CONTROL1_STENCIL_MASK_WRITE                          31:24
#define NV095_CONTROL2                                             (0x00000344)
#define NV095_CONTROL2_STENCIL_OP_FAIL                             3:0
#define NV095_CONTROL2_STENCIL_OP_FAIL_KEEP                        (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_FAIL_ZERO                        (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_FAIL_REPLACE                     (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INCRSAT                     (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_FAIL_DECRSAT                     (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INVERT                      (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_FAIL_INCR                        (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_FAIL_DECR                        (0x00000008)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL                            7:4
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_KEEP                       (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_ZERO                       (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_REPLACE                    (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INCRSAT                    (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_DECRSAT                    (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INVERT                     (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_INCR                       (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_ZFAIL_DECR                       (0x00000008)
#define NV095_CONTROL2_STENCIL_OP_ZPASS                            31:8
#define NV095_CONTROL2_STENCIL_OP_ZPASS_KEEP                       (0x00000001)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_ZERO                       (0x00000002)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_REPLACE                    (0x00000003)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INCRSAT                    (0x00000004)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_DECRSAT                    (0x00000005)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INVERT                     (0x00000006)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_INCR                       (0x00000007)
#define NV095_CONTROL2_STENCIL_OP_ZPASS_DECR                       (0x00000008)
#define NV095_FOG_COLOR                                            (0x00000348)
#define NV095_TLMTVERTEX(i)                                        (0x00000400\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SX(i)                                     (0x00000400\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SY(i)                                     (0x00000404\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SZ(i)                                     (0x00000408\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_RHW(i)                                    (0x0000040C\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_COLOR(i)                                  (0x00000410\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_COLOR_BLUE                                7:0
#define NV095_TLMTVERTEX_COLOR_GREEN                               15:8
#define NV095_TLMTVERTEX_COLOR_RED                                 23:16
#define NV095_TLMTVERTEX_COLOR_ALPHA                               31:24
#define NV095_TLMTVERTEX_SPECULAR(i)                               (0x00000414\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_SPECULAR_BLUE                             7:0
#define NV095_TLMTVERTEX_SPECULAR_GREEN                            15:8
#define NV095_TLMTVERTEX_SPECULAR_RED                              23:16
#define NV095_TLMTVERTEX_SPECULAR_FOG                              31:24
#define NV095_TLMTVERTEX_TU0(i)                                    (0x00000418\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TV0(i)                                    (0x0000041C\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TU1(i)                                    (0x00000420\
                                                                   +(i)*0x0028)
#define NV095_TLMTVERTEX_TV1(i)                                    (0x00000424\
                                                                   +(i)*0x0028)
#define NV095_DRAW_PRIMITIVE(a)                                    (0x00000540\
                                                                   +(a)*0x0004)
#define NV095_DRAW_PRIMITIVE_I0                                    3:0
#define NV095_DRAW_PRIMITIVE_I1                                    7:4
#define NV095_DRAW_PRIMITIVE_I2                                    11:8
#define NV095_DRAW_PRIMITIVE_I3                                    15:12
#define NV095_DRAW_PRIMITIVE_I4                                    19:16
#define NV095_DRAW_PRIMITIVE_I5                                    31:20

// This typedef really should be the same as Nv12CelsiusPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.


typedef NvV32 Nv096Typedef;


/* class NV15_CELSIUS_PRIMITIVE */
#define  NV15_CELSIUS_PRIMITIVE                                    (0x00000096)
/* NvNotification[] elements */
#define NV096_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV096_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV096_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV096_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV096_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV096_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV096_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved00[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved01[0xc/4];
    NvV32 SyncSetRead;
    NvV32 SyncSetWrite;
    NvV32 SyncSetModulo;
    NvV32 SyncIncrementWrite;
    NvV32 SyncStall;
    NvV32 Reserved17[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved02[0x3c/4];
    NvV32 SetContextDmaNotifies;
    NvV32 SetContextDmaA;
    NvV32 SetContextDmaB;
    NvV32 SetContextDmaVertex;
    NvV32 SetContextDmaState;
    NvV32 SetContextDmaColor;
    NvV32 SetContextDmaZeta;
    NvV32 Reserved03[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved04[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved05[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvV32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvV32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvV32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvV32 SetStencilFuncRef;
    NvV32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvV32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvV32 SetMaterialEmission[3];
    NvV32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
        NvV32 S;
        NvV32 T;
        NvV32 R;
        NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvV32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved06[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved07[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved08[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved09[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0b[0xc8/4];
    struct {
        NvF32 AmbientColor[3];
        NvF32 DiffuseColor[3];
        NvF32 SpecularColor[3];
        NvF32 LocalRange;
        NvF32 InfiniteHalfVector[3];
        NvF32 InfiniteDirection[3];
        NvF32 SpotFalloff[3];
        NvF32 SpotDirection[4];
        NvF32 LocalPosition[3];
        NvF32 LocalAttenuation[3];
        NvV32 Reserved0c[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0d[0xc/4];
    NvF32 SetVertex4f[4];
    NvS16 SetVertex4s[4];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0e[0x4/4];
    NvS16 SetNormal3s[3];
    NvV16 Reserved0f[0xa/2];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvV32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvV32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS16 SetTexcoord0_2s[2];
    NvV32 Reserved10[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS16 SetTexcoord0_4s[4];
    NvF32 SetTexcoord1_2f[2];
    NvS16 SetTexcoord1_2s[2];
    NvV32 Reserved11[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS16 SetTexcoord1_4s[4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved12[0x4/4];
    NvV32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 Reserved13[0xbc/4];
    NvV32 SetBeginEnd;
    NvV16 ArrayElement16[256];
    NvV32 Reserved14[0xfc/4];
    NvV32 SetBeginEnd2;
    NvV32 ArrayElement32[64];
    NvV32 Reserved15[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 Reserved1628[0x1d4/4];
    NvV32 SetBeginEnd4;
    NvV32 InlineArray[512];
} Nv12CelsiusPrimitive;


#define NV096_TYPEDEF                                      Nv12CelsiusPrimitive
#define NV096_SET_OBJECT                                           (0x00000000)


#define NV096_DEBUG_INIT(i)                                        (0x00001600+(i)*4)


#define NV096_FLUSH                                                        0x00000728


#define NV096_NO_OPERATION                                                 0x00000100


#define NV096_NOTIFY                                                       0x00000104
#define NV096_NOTIFY_TYPE                                                        23:0
#define NV096_NOTIFY_TYPE_WRITE_ONLY                                       0x00000000
#define NV096_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                0x00000001


#define NV096_SET_WARNING_ENABLE                                           0x00000108
#define NV096_SET_WARNING_ENABLE_V                                               23:0
#define NV096_SET_WARNING_ENABLE_V_FALSE                                   0x00000000
#define NV096_SET_WARNING_ENABLE_V_TRUE                                    0x00000001


#define NV096_GET_STATE                                                    0x0000010c
#define NV096_GET_STATE_GETSTATE                                                 31:0
#define NV096_GET_STATE_GETSTATE_ALL_STATE                                 0x00000001
#define NV096_GET_STATE_PUTSTATE_ALL_STATE                                 0x00000002
#define NV096_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                   0x00000003
#define NV096_GET_STATE_GETSTATE_RENDERING_STATE                           0x00000004
#define NV096_GET_STATE_GETSTATE_GEOMETRY_STATE                            0x00000005
#define NV096_GET_STATE_GETSTATE_SNAPSHOT_PRIM_ASSM                        0x00000006
#define NV096_GET_STATE_GETSTATE_RELOAD_PRIM_ASSM                          0x00000007

#define NV096_WAIT_FOR_IDLE                                                0x00000110

#define NV096_SYNC_SET_READ                                                0x00000120
#define NV096_SYNC_SET_WRITE                                               0x00000124
#define NV096_SYNC_SET_MODULO                                              0x00000128
#define NV096_SYNC_INCREMENT_WRITE                                         0x0000012c
#define NV096_SYNC_STALL                                                   0x00000130

#define NV096_PM_TRIGGER                                                   0x00000140


#define NV096_SET_CONTEXT_DMA_NOTIFIES                                     0x00000180


#define NV096_SET_CONTEXT_DMA_A                                            0x00000184


#define NV096_SET_CONTEXT_DMA_B                                            0x00000188


#define NV096_SET_CONTEXT_DMA_VERTEX                                       0x0000018c


#define NV096_SET_CONTEXT_DMA_STATE                                        0x00000190


#define NV096_SET_CONTEXT_DMA_COLOR                                        0x00000194


#define NV096_SET_CONTEXT_DMA_ZETA                                         0x00000198


#define NV096_SET_SURFACE_CLIP_HORIZONTAL                                  0x00000200
#define NV096_SET_SURFACE_CLIP_HORIZONTAL_X                                      15:0
#define NV096_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                 31:16


#define NV096_SET_SURFACE_CLIP_VERTICAL                                    0x00000204
#define NV096_SET_SURFACE_CLIP_VERTICAL_Y                                        15:0
#define NV096_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                  31:16


#define NV096_SET_SURFACE_FORMAT                                           0x00000208
#define NV096_SET_SURFACE_FORMAT_COLOR                                            7:0
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                0x00000001
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                0x00000002
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                           0x00000003
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                0x00000004
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                0x00000005
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            0x00000006
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            0x00000007
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000008
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_B8                               0x00000009
#define NV096_SET_SURFACE_FORMAT_COLOR_LE_G8B8                             0x0000000A
#define NV096_SET_SURFACE_FORMAT_TYPE                                            15:8
#define NV096_SET_SURFACE_FORMAT_TYPE_PITCH                                0x00000001
#define NV096_SET_SURFACE_FORMAT_TYPE_SWIZZLE                              0x00000002
#define NV096_SET_SURFACE_FORMAT_WIDTH                                          23:16
#define NV096_SET_SURFACE_FORMAT_WIDTH_1                                   0x00000000
#define NV096_SET_SURFACE_FORMAT_WIDTH_2                                   0x00000001
#define NV096_SET_SURFACE_FORMAT_WIDTH_4                                   0x00000002
#define NV096_SET_SURFACE_FORMAT_WIDTH_8                                   0x00000003
#define NV096_SET_SURFACE_FORMAT_WIDTH_16                                  0x00000004
#define NV096_SET_SURFACE_FORMAT_WIDTH_32                                  0x00000005
#define NV096_SET_SURFACE_FORMAT_WIDTH_64                                  0x00000006
#define NV096_SET_SURFACE_FORMAT_WIDTH_128                                 0x00000007
#define NV096_SET_SURFACE_FORMAT_WIDTH_256                                 0x00000008
#define NV096_SET_SURFACE_FORMAT_WIDTH_512                                 0x00000009
#define NV096_SET_SURFACE_FORMAT_WIDTH_1024                                0x0000000A
#define NV096_SET_SURFACE_FORMAT_WIDTH_2048                                0x0000000B
#define NV096_SET_SURFACE_FORMAT_HEIGHT                                         31:24
#define NV096_SET_SURFACE_FORMAT_HEIGHT_1                                  0x00000000
#define NV096_SET_SURFACE_FORMAT_HEIGHT_2                                  0x00000001
#define NV096_SET_SURFACE_FORMAT_HEIGHT_4                                  0x00000002
#define NV096_SET_SURFACE_FORMAT_HEIGHT_8                                  0x00000003
#define NV096_SET_SURFACE_FORMAT_HEIGHT_16                                 0x00000004
#define NV096_SET_SURFACE_FORMAT_HEIGHT_32                                 0x00000005
#define NV096_SET_SURFACE_FORMAT_HEIGHT_64                                 0x00000006
#define NV096_SET_SURFACE_FORMAT_HEIGHT_128                                0x00000007
#define NV096_SET_SURFACE_FORMAT_HEIGHT_256                                0x00000008
#define NV096_SET_SURFACE_FORMAT_HEIGHT_512                                0x00000009
#define NV096_SET_SURFACE_FORMAT_HEIGHT_1024                               0x0000000A
#define NV096_SET_SURFACE_FORMAT_HEIGHT_2048                               0x0000000B


#define NV096_SET_SURFACE_PITCH                                            0x0000020c
#define NV096_SET_SURFACE_PITCH_COLOR                                            15:0
#define NV096_SET_SURFACE_PITCH_ZETA                                            31:16


#define NV096_SET_SURFACE_COLOR_OFFSET                                     0x00000210
#define NV096_SET_SURFACE_COLOR_OFFSET_V                                         31:0


#define NV096_SET_SURFACE_ZETA_OFFSET                                      0x00000214
#define NV096_SET_SURFACE_ZETA_OFFSET_V                                          31:0


#define NV096_SET_TEXTURE_OFFSET(i)                                (0x00000218+(i)*4)
#define NV096_SET_TEXTURE_OFFSET_V                                               31:0


#define NV096_SET_TEXTURE_FORMAT(i)                                (0x00000220+(i)*4)
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA                                      1:0
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                   2:2
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                      0x00000000
#define NV096_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                       0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                       4:3
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                         0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH                                       6:5
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                         0x00000001
#define NV096_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_COLOR                                           11:7
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_Y8                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_AY8                              0x00000001
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                         0x00000002
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                         0x00000003
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                         0x00000004
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                           0x00000005
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                         0x00000006
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                         0x00000007
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                      0x00000008
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                        0x00000009
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                      0x0000000A
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                      0x0000000B
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                    0x0000000C
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                   0x0000000E
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                   0x0000000F
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                   0x00000010
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                     0x00000011
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                   0x00000012
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                         0x00000013
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                        0x00000014
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                      0x00000015
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                       0x00000016
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                       0x00000017
#define NV096_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                     0x00000018
#define NV096_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                  15:12
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U                                    19:16
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                             0x00000000
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                             0x00000003
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                            0x00000004
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                            0x00000005
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                            0x00000006
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                           0x00000007
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                           0x00000008
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                           0x00000009
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                          0x0000000A
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                          0x0000000B
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V                                    23:20
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                             0x00000000
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                             0x00000001
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                             0x00000002
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                             0x00000003
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                            0x00000004
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                            0x00000005
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                            0x00000006
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                           0x00000007
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                           0x00000008
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                           0x00000009
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                          0x0000000A
#define NV096_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                          0x0000000B
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                                26:24
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                      0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                    0x00000002
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                     0x00000003
#define NV096_SET_TEXTURE_FORMAT_WRAPU                                          27:27
#define NV096_SET_TEXTURE_FORMAT_WRAPU_FALSE                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_WRAPU_TRUE                                0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                                30:28
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                      0x00000001
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                    0x00000002
#define NV096_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                     0x00000003
#define NV096_SET_TEXTURE_FORMAT_WRAPV                                          31:31
#define NV096_SET_TEXTURE_FORMAT_WRAPV_FALSE                               0x00000000
#define NV096_SET_TEXTURE_FORMAT_WRAPV_TRUE                                0x00000001


#define NV096_SET_TEXTURE_CONTROL0(i)                              (0x00000228+(i)*4)
#define NV096_SET_TEXTURE_CONTROL0_ENABLE                                       30:30
#define NV096_SET_TEXTURE_CONTROL0_ENABLE_FALSE                            0x00000000
#define NV096_SET_TEXTURE_CONTROL0_ENABLE_TRUE                             0x00000001
#define NV096_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                29:18
#define NV096_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                 17:6
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                  5:4
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                         0x00000000
#define NV096_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                         0x00000001
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                             3:3
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                0x00000000
#define NV096_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                 0x00000001
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                              2:2
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                 0x00000000
#define NV096_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                  0x00000001
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                            1:0
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE               0x00000000
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA               0x00000001
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                0x00000002
#define NV096_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                0x00000003


#define NV096_SET_TEXTURE_CONTROL1(i)                              (0x00000230+(i)*4)
#define NV096_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                  31:16
#define NV096_SET_TEXTURE_CONTROL1_ZERO                                          15:0


#define NV096_SET_TEXTURE_CONTROL2(i)                              (0x00000238+(i)*4)
#define NV096_SET_TEXTURE_CONTROL2_PERTURB_DU                                    11:0
#define NV096_SET_TEXTURE_CONTROL2_PERTURB_DV                                   23:12
#define NV096_SET_TEXTURE_CONTROL2_IMAGE_LODF                                   31:24


#define NV096_SET_TEXTURE_IMAGE_RECT(i)                            (0x00000240+(i)*4)
#define NV096_SET_TEXTURE_IMAGE_RECT_WIDTH                                      31:16
#define NV096_SET_TEXTURE_IMAGE_RECT_HEIGHT                                      15:0


#define NV096_SET_TEXTURE_FILTER(i)                                (0x00000248+(i)*4)
#define NV096_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                   23:0
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN                                     27:24
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                        0x00000001
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                         0x00000002
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                     0x00000003
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                      0x00000004
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST               0x00000005
#define NV096_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR                0x00000006
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG                                     31:28
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                        0x00000001
#define NV096_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                         0x00000002


#define NV096_SET_TEXTURE_PALETTE(i)                               (0x00000250+(i)*4)
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA                                     5:0
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                            0x00000000
#define NV096_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                            0x00000001
#define NV096_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                 31:6


#define NV096_SET_COMBINER_ALPHA_ICW(i)                            (0x00000260+(i)*4)
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP                                      31:29
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA                                    28:28
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE                                   27:24
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP                                      23:21
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA                                    20:20
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE                                   19:16
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP                                      15:13
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA                                    12:12
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE                                    11:8
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP                                        7:5
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA                                      4:4
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE                                     3:0
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV096_SET_COMBINER_COLOR_ICW(i)                            (0x00000268+(i)*4)
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP                                      31:29
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA                                    28:28
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE                                   27:24
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP                                      23:21
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA                                    20:20
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE                                   19:16
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP                                      15:13
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA                                    12:12
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE                                    11:8
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                        0x0000000D
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP                                        7:5
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY               0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                 0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                   0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                   0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                 0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                 0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                 0x00000006
#define NV096_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                   0x00000007
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA                                      4:4
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                         0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                          0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE                                     3:0
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                        0x00000000
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                        0x00000001
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                        0x00000002
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                        0x00000003
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                        0x00000004
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                        0x00000005
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                        0x00000008
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                        0x00000009
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                        0x0000000C
#define NV096_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                        0x0000000D


#define NV096_SET_COMBINE_FACTOR(i)                                (0x00000270+(i)*4)
#define NV096_SET_COMBINE_FACTOR_BLUE                                             7:0
#define NV096_SET_COMBINE_FACTOR_GREEN                                           15:8
#define NV096_SET_COMBINE_FACTOR_RED                                            23:16
#define NV096_SET_COMBINE_FACTOR_ALPHA                                          31:24


#define NV096_SET_COMBINER_ALPHA_OCW(i)                            (0x00000278+(i)*4)
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION                                  31:15
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                     0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                0x00000001
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                0x00000002
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS           0x00000003
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1               0x00000006
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                 14:14
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                      0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                       0x00000001
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST                                     11:8
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST                                       7:4
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                          0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                          0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                          0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                          0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                          0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                          0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                          0x0000000D
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST                                       3:0
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                          0x00000000
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                          0x00000004
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                          0x00000005
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                          0x00000008
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                          0x00000009
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                          0x0000000C
#define NV096_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                          0x0000000D


#define NV096_SET_COMBINER0_COLOR_OCW                                      0x00000280
#define NV096_SET_COMBINER0_COLOR_OCW_ZERO                                      31:27
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION                                 26:15
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                                14:14
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST                                    11:8
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST                                      7:4
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST                                      3:0
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV096_SET_COMBINER1_COLOR_OCW                                      0x00000284
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                           31:28
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                  0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                  0x00000002
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT                                27:27
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                       0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                       0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION                                 26:15
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                                14:14
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                             13:13
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                             12:12
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                  0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                   0x00000001
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST                                    11:8
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                        0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                        0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                        0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                        0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                        0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                        0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                        0x0000000D
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST                                      7:4
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                         0x0000000D
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST                                      3:0
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                         0x00000000
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                         0x00000004
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                         0x00000005
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                         0x00000008
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                         0x00000009
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                         0x0000000C
#define NV096_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                         0x0000000D


#define NV096_SET_COMBINER_SPECULAR_FOG_CW0                                0x00000288
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                           31:29
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                             28:28
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                            27:24
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                           23:21
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                             20:20
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                            19:16
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                           15:13
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                             12:12
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                             11:8
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD           0x0000000F
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                             7:5
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                               4:4
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                              3:0
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT           0x0000000E
#define NV096_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD           0x0000000F


#define NV096_SET_COMBINER_SPECULAR_FOG_CW1                                0x0000028c
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                           31:29
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                             28:28
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                            27:24
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                           23:21
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                             20:20
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                            19:16
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                           15:13
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                             12:12
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                   0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                             11:8
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                 0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                 0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                 0x00000002
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                 0x00000003
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                 0x00000004
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                 0x00000005
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                 0x00000008
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                 0x00000009
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                 0x0000000C
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                 0x0000000D
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                        7:7
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE           0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE            0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                6:6
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE   0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE    0x00000001
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12               5:0
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE  0x00000000
#define NV096_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE   0x00000020


#define NV096_SET_CONTROL0                                                 0x00000290
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA                                   31:24
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                        0x00000000
#define NV096_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                         0x00000001
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE                                   23:20
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                        0x00000000
#define NV096_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                         0x00000001
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                 19:16
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                      0x00000000
#define NV096_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                       0x00000001
#define NV096_SET_CONTROL0_Z_FORMAT                                             15:12
#define NV096_SET_CONTROL0_Z_FORMAT_FIXED                                  0x00000000
#define NV096_SET_CONTROL0_Z_FORMAT_FLOAT                                  0x00000001
#define NV096_SET_CONTROL0_WBUFFER_SELECT                                        11:8
#define NV096_SET_CONTROL0_WBUFFER_SELECT_0                                0x00000000
#define NV096_SET_CONTROL0_WBUFFER_SELECT_1                                0x00000001
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE                                   7:0
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                       0x00000001


#define NV096_SET_LIGHT_CONTROL                                            0x00000294
#define NV096_SET_LIGHT_CONTROL_LOCALEYE                                        31:16
#define NV096_SET_LIGHT_CONTROL_LOCALEYE_FALSE                             0x00000000
#define NV096_SET_LIGHT_CONTROL_LOCALEYE_TRUE                              0x00000001
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE                                 15:2
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                    0x00000000
#define NV096_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT                0x00000001
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                              1:1
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                 0x00000000
#define NV096_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                  0x00000001
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                                0:0
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                   0x00000000
#define NV096_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                    0x00000001


#define NV096_SET_COLOR_MATERIAL                                           0x00000298
#define NV096_SET_COLOR_MATERIAL_V                                               31:0
#define NV096_SET_COLOR_MATERIAL_V_DISABLED                                0x00000000
#define NV096_SET_COLOR_MATERIAL_V_EMISSION                                0x00000001
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT                                 0x00000002
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                        0x00000003
#define NV096_SET_COLOR_MATERIAL_V_DIFFUSE                                 0x00000004
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                        0x00000005
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                         0x00000006
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE                0x00000007
#define NV096_SET_COLOR_MATERIAL_V_SPECULAR                                0x00000008
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                       0x00000009
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                        0x0000000A
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR               0x0000000B
#define NV096_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                        0x0000000C
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR               0x0000000D
#define NV096_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR                0x0000000E
#define NV096_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR       0x0000000F


#define NV096_SET_FOG_MODE                                                 0x0000029c
#define NV096_SET_FOG_MODE_FOG_MODE                                              31:0
#define NV096_SET_FOG_MODE_FOG_MODE_LINEAR                                 0x00002601
#define NV096_SET_FOG_MODE_FOG_MODE_EXP                                    0x00000800
#define NV096_SET_FOG_MODE_FOG_MODE_EXP2                                   0x00000801
#define NV096_SET_FOG_MODE_FOG_MODE_EXP_ABS                                0x00000802
#define NV096_SET_FOG_MODE_FOG_MODE_EXP2_ABS                               0x00000803


#define NV096_SET_FOG_GEN_MODE                                             0x000002a0
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE                                      31:0
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                      0x00000000
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                         0x00000001
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                         0x00000002
#define NV096_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                     0x00000003


#define NV096_SET_FOG_ENABLE                                               0x000002a4
#define NV096_SET_FOG_ENABLE_V                                                   31:0
#define NV096_SET_FOG_ENABLE_V_FALSE                                       0x00000000
#define NV096_SET_FOG_ENABLE_V_TRUE                                        0x00000001


#define NV096_SET_FOG_COLOR                                               0x000002a8
#define NV096_SET_FOG_COLOR_FOG_COLOR_RED                                        7:0
#define NV096_SET_FOG_COLOR_FOG_COLOR_GREEN                                     15:8
#define NV096_SET_FOG_COLOR_FOG_COLOR_BLUE                                     23:16
#define NV096_SET_FOG_COLOR_FOG_COLOR_ALPHA                                    31:24


#define NV096_SET_COLOR_KEY_COLOR(i)                               (0x000002ac+(i)*4)
#define NV096_SET_COLOR_KEY_COLOR_V                                              31:0


#define NV096_SET_WINDOW_CLIP_TYPE                                         0x000002b4
#define NV096_SET_WINDOW_CLIP_TYPE_V                                             31:0
#define NV096_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                             0x00000000
#define NV096_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                             0x00000001


#define NV096_SET_WINDOW_CLIP_HORIZONTAL(i)                        (0x000002c0+(i)*4)
#define NV096_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                    15:0
#define NV096_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                   31:16


#define NV096_SET_WINDOW_CLIP_VERTICAL(i)                          (0x000002e0+(i)*4)
#define NV096_SET_WINDOW_CLIP_VERTICAL_YMIN                                      15:0
#define NV096_SET_WINDOW_CLIP_VERTICAL_YMAX                                     31:16


#define NV096_SET_ALPHA_TEST_ENABLE                                        0x00000300
#define NV096_SET_ALPHA_TEST_ENABLE_V                                            31:0
#define NV096_SET_ALPHA_TEST_ENABLE_V_FALSE                                0x00000000
#define NV096_SET_ALPHA_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV096_SET_BLEND_ENABLE                                             0x00000304
#define NV096_SET_BLEND_ENABLE_V                                                 31:0
#define NV096_SET_BLEND_ENABLE_V_FALSE                                     0x00000000
#define NV096_SET_BLEND_ENABLE_V_TRUE                                      0x00000001


#define NV096_SET_CULL_FACE_ENABLE                                         0x00000308
#define NV096_SET_CULL_FACE_ENABLE_V                                             31:0
#define NV096_SET_CULL_FACE_ENABLE_V_FALSE                                 0x00000000
#define NV096_SET_CULL_FACE_ENABLE_V_TRUE                                  0x00000001


#define NV096_SET_DEPTH_TEST_ENABLE                                        0x0000030c
#define NV096_SET_DEPTH_TEST_ENABLE_V                                            31:0
#define NV096_SET_DEPTH_TEST_ENABLE_V_FALSE                                0x00000000
#define NV096_SET_DEPTH_TEST_ENABLE_V_TRUE                                 0x00000001


#define NV096_SET_DITHER_ENABLE                                            0x00000310
#define NV096_SET_DITHER_ENABLE_V                                                31:0
#define NV096_SET_DITHER_ENABLE_V_FALSE                                    0x00000000
#define NV096_SET_DITHER_ENABLE_V_TRUE                                     0x00000001


#define NV096_SET_LIGHTING_ENABLE                                          0x00000314
#define NV096_SET_LIGHTING_ENABLE_V                                              31:0
#define NV096_SET_LIGHTING_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_LIGHTING_ENABLE_V_TRUE                                   0x00000001


#define NV096_SET_POINT_PARAMS_ENABLE                                      0x00000318
#define NV096_SET_POINT_PARAMS_ENABLE_V                                          31:0
#define NV096_SET_POINT_PARAMS_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_POINT_PARAMS_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_POINT_SMOOTH_ENABLE                                      0x0000031c
#define NV096_SET_POINT_SMOOTH_ENABLE_V                                          31:0
#define NV096_SET_POINT_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_POINT_SMOOTH_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_LINE_SMOOTH_ENABLE                                       0x00000320
#define NV096_SET_LINE_SMOOTH_ENABLE_V                                           31:0
#define NV096_SET_LINE_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV096_SET_LINE_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV096_SET_POLY_SMOOTH_ENABLE                                       0x00000324
#define NV096_SET_POLY_SMOOTH_ENABLE_V                                           31:0
#define NV096_SET_POLY_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV096_SET_POLY_SMOOTH_ENABLE_V_TRUE                                0x00000001


#define NV096_SET_SKIN_ENABLE                                              0x00000328
#define NV096_SET_SKIN_ENABLE_V                                                  31:0
#define NV096_SET_SKIN_ENABLE_V_FALSE                                      0x00000000
#define NV096_SET_SKIN_ENABLE_V_TRUE                                       0x00000001


#define NV096_SET_STENCIL_TEST_ENABLE                                      0x0000032c
#define NV096_SET_STENCIL_TEST_ENABLE_V                                          31:0
#define NV096_SET_STENCIL_TEST_ENABLE_V_FALSE                              0x00000000
#define NV096_SET_STENCIL_TEST_ENABLE_V_TRUE                               0x00000001


#define NV096_SET_POLY_OFFSET_POINT_ENABLE                                 0x00000330
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V                                     31:0
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                         0x00000000
#define NV096_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                          0x00000001


#define NV096_SET_POLY_OFFSET_LINE_ENABLE                                  0x00000334
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V                                      31:0
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                          0x00000000
#define NV096_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                           0x00000001


#define NV096_SET_POLY_OFFSET_FILL_ENABLE                                  0x00000338
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V                                      31:0
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                          0x00000000
#define NV096_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                           0x00000001


#define NV096_SET_ALPHA_FUNC                                               0x0000033c
#define NV096_SET_ALPHA_FUNC_V                                                   31:0
#define NV096_SET_ALPHA_FUNC_V_NEVER                                       0x00000200
#define NV096_SET_ALPHA_FUNC_V_LESS                                        0x00000201
#define NV096_SET_ALPHA_FUNC_V_EQUAL                                       0x00000202
#define NV096_SET_ALPHA_FUNC_V_LEQUAL                                      0x00000203
#define NV096_SET_ALPHA_FUNC_V_GREATER                                     0x00000204
#define NV096_SET_ALPHA_FUNC_V_NOTEQUAL                                    0x00000205
#define NV096_SET_ALPHA_FUNC_V_GEQUAL                                      0x00000206
#define NV096_SET_ALPHA_FUNC_V_ALWAYS                                      0x00000207


#define NV096_SET_ALPHA_REF                                                0x00000340


#define NV096_SET_BLEND_FUNC_SFACTOR                                       0x00000344
#define NV096_SET_BLEND_FUNC_SFACTOR_V                                           31:0
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ZERO                                0x00000000
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE                                 0x00000001
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                           0x00000300
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                           0x00000302
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV096_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                           0x00000304
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV096_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                           0x00000306
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV096_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                  0x00000308
#define NV096_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV096_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV096_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV096_SET_BLEND_FUNC_DFACTOR                                       0x00000348
#define NV096_SET_BLEND_FUNC_DFACTOR_V                                           31:0
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ZERO                                0x00000000
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE                                 0x00000001
#define NV096_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                           0x00000300
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                 0x00000301
#define NV096_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                           0x00000302
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                 0x00000303
#define NV096_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                           0x00000304
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                 0x00000305
#define NV096_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                           0x00000306
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                 0x00000307
#define NV096_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                      0x00008001
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR            0x00008002
#define NV096_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                      0x00008003
#define NV096_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA            0x00008004


#define NV096_SET_BLEND_COLOR                                              0x0000034c
#define NV096_SET_BLEND_COLOR_V                                                  31:0


#define NV096_SET_BLEND_EQUATION                                           0x00000350
#define NV096_SET_BLEND_EQUATION_V                                               31:0
#define NV096_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                           0x0000800A
#define NV096_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                   0x0000800B
#define NV096_SET_BLEND_EQUATION_V_FUNC_ADD                                0x00008006
#define NV096_SET_BLEND_EQUATION_V_MIN                                     0x00008007
#define NV096_SET_BLEND_EQUATION_V_MAX                                     0x00008008


#define NV096_SET_DEPTH_FUNC                                               0x00000354
#define NV096_SET_DEPTH_FUNC_V                                                   31:0
#define NV096_SET_DEPTH_FUNC_V_NEVER                                       0x00000200
#define NV096_SET_DEPTH_FUNC_V_LESS                                        0x00000201
#define NV096_SET_DEPTH_FUNC_V_EQUAL                                       0x00000202
#define NV096_SET_DEPTH_FUNC_V_LEQUAL                                      0x00000203
#define NV096_SET_DEPTH_FUNC_V_GREATER                                     0x00000204
#define NV096_SET_DEPTH_FUNC_V_NOTEQUAL                                    0x00000205
#define NV096_SET_DEPTH_FUNC_V_GEQUAL                                      0x00000206
#define NV096_SET_DEPTH_FUNC_V_ALWAYS                                      0x00000207


#define NV096_SET_COLOR_MASK                                               0x00000358
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                 31:24
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                       0x00000001
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE                                   23:16
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                        0x00000000
#define NV096_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                         0x00000001
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                  15:8
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                      0x00000000
#define NV096_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                       0x00000001
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                    7:0
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                       0x00000000
#define NV096_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                        0x00000001


#define NV096_SET_DEPTH_MASK                                               0x0000035c
#define NV096_SET_DEPTH_MASK_V                                                   31:0
#define NV096_SET_DEPTH_MASK_V_FALSE                                       0x00000000
#define NV096_SET_DEPTH_MASK_V_TRUE                                        0x00000001


#define NV096_SET_STENCIL_MASK                                             0x00000360
#define NV096_SET_STENCIL_MASK_V                                                 31:0


#define NV096_SET_STENCIL_FUNC                                             0x00000364
#define NV096_SET_STENCIL_FUNC_V                                                 31:0
#define NV096_SET_STENCIL_FUNC_V_NEVER                                     0x00000200
#define NV096_SET_STENCIL_FUNC_V_LESS                                      0x00000201
#define NV096_SET_STENCIL_FUNC_V_EQUAL                                     0x00000202
#define NV096_SET_STENCIL_FUNC_V_LEQUAL                                    0x00000203
#define NV096_SET_STENCIL_FUNC_V_GREATER                                   0x00000204
#define NV096_SET_STENCIL_FUNC_V_NOTEQUAL                                  0x00000205
#define NV096_SET_STENCIL_FUNC_V_GEQUAL                                    0x00000206
#define NV096_SET_STENCIL_FUNC_V_ALWAYS                                    0x00000207


#define NV096_SET_STENCIL_FUNC_REF                                         0x00000368
#define NV096_SET_STENCIL_FUNC_REF_V                                             31:0


#define NV096_SET_STENCIL_FUNC_MASK                                        0x0000036c
#define NV096_SET_STENCIL_FUNC_MASK_V                                            31:0


#define NV096_SET_STENCIL_OP_FAIL                                          0x00000370
#define NV096_SET_STENCIL_OP_FAIL_V                                              31:0
#define NV096_SET_STENCIL_OP_FAIL_V_KEEP                                   0x00001E00
#define NV096_SET_STENCIL_OP_FAIL_V_ZERO                                   0x00000000
#define NV096_SET_STENCIL_OP_FAIL_V_REPLACE                                0x00001E01
#define NV096_SET_STENCIL_OP_FAIL_V_INCRSAT                                0x00001E02
#define NV096_SET_STENCIL_OP_FAIL_V_DECRSAT                                0x00001E03
#define NV096_SET_STENCIL_OP_FAIL_V_INVERT                                 0x0000150A
#define NV096_SET_STENCIL_OP_FAIL_V_INCR                                   0x00008507
#define NV096_SET_STENCIL_OP_FAIL_V_DECR                                   0x00008508


#define NV096_SET_STENCIL_OP_ZFAIL                                         0x00000374
#define NV096_SET_STENCIL_OP_ZFAIL_V                                             31:0
#define NV096_SET_STENCIL_OP_ZFAIL_V_KEEP                                  0x00001E00
#define NV096_SET_STENCIL_OP_ZFAIL_V_ZERO                                  0x00000000
#define NV096_SET_STENCIL_OP_ZFAIL_V_REPLACE                               0x00001E01
#define NV096_SET_STENCIL_OP_ZFAIL_V_INCRSAT                               0x00001E02
#define NV096_SET_STENCIL_OP_ZFAIL_V_DECRSAT                               0x00001E03
#define NV096_SET_STENCIL_OP_ZFAIL_V_INVERT                                0x0000150A
#define NV096_SET_STENCIL_OP_ZFAIL_V_INCR                                  0x00008507
#define NV096_SET_STENCIL_OP_ZFAIL_V_DECR                                  0x00008508


#define NV096_SET_STENCIL_OP_ZPASS                                         0x00000378
#define NV096_SET_STENCIL_OP_ZPASS_V                                             31:0
#define NV096_SET_STENCIL_OP_ZPASS_V_KEEP                                  0x00001E00
#define NV096_SET_STENCIL_OP_ZPASS_V_ZERO                                  0x00000000
#define NV096_SET_STENCIL_OP_ZPASS_V_REPLACE                               0x00001E01
#define NV096_SET_STENCIL_OP_ZPASS_V_INCRSAT                               0x00001E02
#define NV096_SET_STENCIL_OP_ZPASS_V_DECRSAT                               0x00001E03
#define NV096_SET_STENCIL_OP_ZPASS_V_INVERT                                0x0000150A
#define NV096_SET_STENCIL_OP_ZPASS_V_INCR                                  0x00008507
#define NV096_SET_STENCIL_OP_ZPASS_V_DECR                                  0x00008508


#define NV096_SET_SHADE_MODE                                               0x0000037c
#define NV096_SET_SHADE_MODE_V                                                   31:0
#define NV096_SET_SHADE_MODE_V_FLAT                                        0x00001D00
#define NV096_SET_SHADE_MODE_V_SMOOTH                                      0x00001D01


#define NV096_SET_LINE_WIDTH                                               0x00000380
#define NV096_SET_LINE_WIDTH_V                                                   31:0


#define NV096_SET_POLYGON_OFFSET_SCALE_FACTOR                              0x00000384
#define NV096_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                  31:0


#define NV096_SET_POLYGON_OFFSET_BIAS                                      0x00000388
#define NV096_SET_POLYGON_OFFSET_BIAS_V                                          31:0


#define NV096_SET_FRONT_POLYGON_MODE                                       0x0000038c
#define NV096_SET_FRONT_POLYGON_MODE_V                                           31:0
#define NV096_SET_FRONT_POLYGON_MODE_V_POINT                               0x00001B00
#define NV096_SET_FRONT_POLYGON_MODE_V_LINE                                0x00001B01
#define NV096_SET_FRONT_POLYGON_MODE_V_FILL                                0x00001B02


#define NV096_SET_BACK_POLYGON_MODE                                        0x00000390
#define NV096_SET_BACK_POLYGON_MODE_V                                            31:0
#define NV096_SET_BACK_POLYGON_MODE_V_POINT                                0x00001B00
#define NV096_SET_BACK_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV096_SET_BACK_POLYGON_MODE_V_FILL                                 0x00001B02


#define NV096_SET_CLIP_MIN                                                 0x00000394
#define NV096_SET_CLIP_MIN_V                                                     31:0


#define NV096_SET_CLIP_MAX                                                 0x00000398
#define NV096_SET_CLIP_MAX_V                                                     31:0


#define NV096_SET_CULL_FACE                                                0x0000039c
#define NV096_SET_CULL_FACE_V                                                    31:0
#define NV096_SET_CULL_FACE_V_FRONT                                        0x00000404
#define NV096_SET_CULL_FACE_V_BACK                                         0x00000405
#define NV096_SET_CULL_FACE_V_FRONT_AND_BACK                               0x00000408


#define NV096_SET_FRONT_FACE                                               0x000003a0
#define NV096_SET_FRONT_FACE_V                                                   31:0
#define NV096_SET_FRONT_FACE_V_CW                                          0x00000900
#define NV096_SET_FRONT_FACE_V_CCW                                         0x00000901


#define NV096_SET_NORMALIZATION_ENABLE                                     0x000003a4
#define NV096_SET_NORMALIZATION_ENABLE_V                                         31:0
#define NV096_SET_NORMALIZATION_ENABLE_V_FALSE                             0x00000000
#define NV096_SET_NORMALIZATION_ENABLE_V_TRUE                              0x00000001


#define NV096_SET_MATERIAL_EMISSION(i)                             (0x000003a8+(i)*4)


#define NV096_SET_MATERIAL_ALPHA                                           0x000003b4


#define NV096_SET_SPECULAR_ENABLE                                          0x000003b8
#define NV096_SET_SPECULAR_ENABLE_V                                              31:0
#define NV096_SET_SPECULAR_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_SPECULAR_ENABLE_V_TRUE                                   0x00000001


#define NV096_SET_LIGHT_ENABLE_MASK                                        0x000003bc
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0                                        1:0
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1                                        3:2
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2                                        5:4
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3                                        7:6
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4                                        9:8
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5                                      11:10
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6                                      13:12
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                            0x00000003
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7                                      15:14
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                             0x00000000
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                        0x00000001
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                           0x00000002
#define NV096_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                            0x00000003


#define NV096_SET_TEXGEN_S(i)                                     (0x000003c0+(i)*16)
#define NV096_SET_TEXGEN_S_V                                                     31:0
#define NV096_SET_TEXGEN_S_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_S_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_S_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_S_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_S_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_S_V_SPHERE_MAP                                    0x00002402
#define NV096_SET_TEXGEN_S_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_T(i)                                     (0x000003c4+(i)*16)
#define NV096_SET_TEXGEN_T_V                                                     31:0
#define NV096_SET_TEXGEN_T_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_T_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_T_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_T_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_T_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_T_V_SPHERE_MAP                                    0x00002402
#define NV096_SET_TEXGEN_T_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_R(i)                                     (0x000003c8+(i)*16)
#define NV096_SET_TEXGEN_R_V                                                     31:0
#define NV096_SET_TEXGEN_R_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_R_V_NORMAL_MAP                                    0x00008511
#define NV096_SET_TEXGEN_R_V_REFLECTION_MAP                                0x00008512
#define NV096_SET_TEXGEN_R_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_R_V_OBJECT_LINEAR                                 0x00002401
#define NV096_SET_TEXGEN_R_V_EMBOSS                                        0x0000855F


#define NV096_SET_TEXGEN_Q(i)                                     (0x000003cc+(i)*16)
#define NV096_SET_TEXGEN_Q_V                                                     31:0
#define NV096_SET_TEXGEN_Q_V_DISABLE                                       0x00000000
#define NV096_SET_TEXGEN_Q_V_EYE_LINEAR                                    0x00002400
#define NV096_SET_TEXGEN_Q_V_OBJECT_LINEAR                                 0x00002401


#define NV096_SET_TEXTURE_MATRIX0_ENABLE                                   0x000003e0
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V                                       31:0
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                           0x00000000
#define NV096_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                            0x00000001


#define NV096_SET_TEXTURE_MATRIX1_ENABLE                                   0x000003e4
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V                                       31:0
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                           0x00000000
#define NV096_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                            0x00000001


#define NV096_SET_TLMODE                                                   0x000003e8
#define NV096_SET_TLMODE_PASSTHROUGH                                              0:0
#define NV096_SET_TLMODE_PASSTHROUGH_TRUE                                  0x00000001
#define NV096_SET_TLMODE_PASSTHROUGH_FALSE                                 0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_0                                               1:1
#define NV096_SET_TLMODE_W_DIVIDE_0_DISABLE                                0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_0_ENABLE                                 0x00000001
#define NV096_SET_TLMODE_W_DIVIDE_1                                               2:2
#define NV096_SET_TLMODE_W_DIVIDE_1_DISABLE                                0x00000000
#define NV096_SET_TLMODE_W_DIVIDE_1_ENABLE                                 0x00000001


#define NV096_SET_POINT_SIZE                                               0x000003ec
#define NV096_SET_POINT_SIZE_V                                                   31:0


#define NV096_SET_SWATH_WIDTH                                              0x000003f0
#define NV096_SET_SWATH_WIDTH_V                                                  31:0
#define NV096_SET_SWATH_WIDTH_V_8                                          0x00000000
#define NV096_SET_SWATH_WIDTH_V_16                                         0x00000001
#define NV096_SET_SWATH_WIDTH_V_32                                         0x00000002
#define NV096_SET_SWATH_WIDTH_V_64                                         0x00000003


#define NV096_SET_FLAT_SHADE_OP                                            0x000003f4
#define NV096_SET_FLAT_SHADE_OP_V                                                31:0
#define NV096_SET_FLAT_SHADE_OP_V_LAST_VTX                                 0x00000000
#define NV096_SET_FLAT_SHADE_OP_V_FIRST_VTX                                0x00000001


#define NV096_SET_MODEL_VIEW_MATRIX0(i)                            (0x00000400+(i)*4)


#define NV096_SET_MODEL_VIEW_MATRIX1(i)                            (0x00000440+(i)*4)


#define NV096_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                    (0x00000480+(i)*4)


#define NV096_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                    (0x000004c0+(i)*4)


#define NV096_SET_COMPOSITE_MATRIX(i)                              (0x00000500+(i)*4)


#define NV096_SET_TEXTURE_MATRIX0(i)                               (0x00000540+(i)*4)


#define NV096_SET_TEXTURE_MATRIX1(i)                               (0x00000580+(i)*4)


#define NV096_SET_TEXGEN_SPLANE0(i)                                (0x00000600+(i)*4)


#define NV096_SET_TEXGEN_TPLANE0(i)                                (0x00000610+(i)*4)


#define NV096_SET_TEXGEN_RPLANE0(i)                                (0x00000620+(i)*4)


#define NV096_SET_TEXGEN_QPLANE0(i)                                (0x00000630+(i)*4)


#define NV096_SET_TEXGEN_SPLANE1(i)                                (0x00000640+(i)*4)


#define NV096_SET_TEXGEN_TPLANE1(i)                                (0x00000650+(i)*4)


#define NV096_SET_TEXGEN_RPLANE1(i)                                (0x00000660+(i)*4)


#define NV096_SET_TEXGEN_QPLANE1(i)                                (0x00000670+(i)*4)


#define NV096_SET_FOG_PARAMS(i)                                    (0x00000680+(i)*4)


#define NV096_SET_FOG_PLANE(i)                                     (0x0000068c+(i)*4)


#define NV096_SET_SPECULAR_PARAMS(i)                               (0x000006a0+(i)*4)


#define NV096_SET_SCENE_AMBIENT_COLOR(i)                           (0x000006c4+(i)*4)


#define NV096_SET_VIEWPORT_OFFSET(i)                               (0x000006e8+(i)*4)


#define NV096_SET_POINT_PARAMS(i)                                  (0x000006f8+(i)*4)


#define NV096_SET_EYE_POSITION(i)                                  (0x00000718+(i)*4)

#define NV096_SET_EYE_DIRECTION_SW(i)                              (0x0000072c+(i)*4)


#define NV096_SET_LIGHT_AMBIENT_COLOR(i,j)                 (0x00000800+(i)*128+(j)*4)


#define NV096_SET_LIGHT_DIFFUSE_COLOR(i,j)                 (0x0000080c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPECULAR_COLOR(i,j)                (0x00000818+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_RANGE(i)                           (0x00000824+(i)*128)


#define NV096_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)          (0x00000828+(i)*128+(j)*4)


#define NV096_SET_LIGHT_INFINITE_DIRECTION(i,j)            (0x00000834+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPOT_FALLOFF(i,j)                  (0x00000840+(i)*128+(j)*4)


#define NV096_SET_LIGHT_SPOT_DIRECTION(i,j)                (0x0000084c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_POSITION(i,j)                (0x0000085c+(i)*128+(j)*4)


#define NV096_SET_LIGHT_LOCAL_ATTENUATION(i,j)             (0x00000868+(i)*128+(j)*4)


#define NV096_SET_VERTEX3F(i)                                      (0x00000c00+(i)*4)


#define NV096_SET_VERTEX4F(i)                                      (0x00000c18+(i)*4)


#define NV096_SET_VERTEX4S(i)                                      (0x00000c28+(i)*4)


#define NV096_SET_NORMAL3F(i)                                      (0x00000c30+(i)*4)


#define NV096_SET_NORMAL3S(i)                                      (0x00000c40+(i)*2)


#define NV096_SET_DIFFUSE_COLOR4F(i)                               (0x00000c50+(i)*4)


#define NV096_SET_DIFFUSE_COLOR3F(i)                               (0x00000c60+(i)*4)


#define NV096_SET_DIFFUSE_COLOR4UB                                         0x00000c6c


#define NV096_SET_SPECULAR_COLOR4F(i)                              (0x00000c70+(i)*4)


#define NV096_SET_SPECULAR_COLOR3F(i)                              (0x00000c80+(i)*4)


#define NV096_SET_SPECULAR_COLOR4UB                                        0x00000c8c


#define NV096_SET_TEXCOORD0_2F(i)                                  (0x00000c90+(i)*4)


#define NV096_SET_TEXCOORD0_2S(i)                                  (0x00000c98+(i)*2)


#define NV096_SET_TEXCOORD0_4F(i)                                  (0x00000ca0+(i)*4)


#define NV096_SET_TEXCOORD0_4S(i)                                  (0x00000cb0+(i)*2)


#define NV096_SET_TEXCOORD1_2F(i)                                  (0x00000cb8+(i)*4)


#define NV096_SET_TEXCOORD1_2S(i)                                  (0x00000cc0+(i)*2)


#define NV096_SET_TEXCOORD1_4F(i)                                  (0x00000cc8+(i)*4)


#define NV096_SET_TEXCOORD1_4S(i)                                  (0x00000cd8+(i)*2)


#define NV096_SET_FOG1F                                                    0x00000ce0


#define NV096_SET_WEIGHT1F                                                 0x00000ce4


#define NV096_SET_EDGE_FLAG                                                0x00000cec


#define NV096_INVALIDATE_VERTEX_CACHE_FILE                                 0x00000cf0


#define NV096_INVALIDATE_VERTEX_FILE                                       0x00000cf4


#define NV096_TL_NOP                                                       0x00000cf8


#define NV096_TL_SYNC                                                      0x00000cfc


#define NV096_SET_VERTEX_ARRAY_OFFSET                                      0x00000d00
#define NV096_SET_VERTEX_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_VERTEX_ARRAY_FORMAT                                      0x00000d04
#define NV096_SET_VERTEX_ARRAY_FORMAT_W                                         31:24
#define NV096_SET_VERTEX_ARRAY_FORMAT_W_NONE                               0x00000000
#define NV096_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                            0x00000001
#define NV096_SET_VERTEX_ARRAY_FORMAT_STRIDE                                     23:8
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_2                               0x00000002
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV096_SET_VERTEX_ARRAY_FORMAT_SIZE_4                               0x00000004
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_DIFFUSE_ARRAY_OFFSET                                     0x00000d08
#define NV096_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                    27:0


#define NV096_SET_DIFFUSE_ARRAY_FORMAT                                     0x00000d0c
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                    31:8
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                       7:4
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                       3:0
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA             0x00000000
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002
#define NV096_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA             0x00000004


#define NV096_SET_SPECULAR_ARRAY_OFFSET                                    0x00000d10
#define NV096_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                   27:0


#define NV096_SET_SPECULAR_ARRAY_FORMAT                                    0x00000d14
#define NV096_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                   31:8
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE                                      7:4
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV096_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE                                      3:0
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV096_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004


#define NV096_SET_TEX_COORD0_ARRAY_OFFSET                                  0x00000d18
#define NV096_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                 27:0


#define NV096_SET_TEX_COORD0_ARRAY_FORMAT                                  0x00000d1c
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                 31:8
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                    7:4
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                    3:0
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV096_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV096_SET_TEX_COORD1_ARRAY_OFFSET                                  0x00000d20
#define NV096_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                 27:0


#define NV096_SET_TEX_COORD1_ARRAY_FORMAT                                  0x00000d24
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                 31:8
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                    7:4
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                           0x00000000
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                    3:0
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                       0x00000001
#define NV096_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                       0x00000002


#define NV096_SET_NORMAL_ARRAY_OFFSET                                      0x00000d28
#define NV096_SET_NORMAL_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_NORMAL_ARRAY_FORMAT                                      0x00000d2c
#define NV096_SET_NORMAL_ARRAY_FORMAT_STRIDE                                     31:8
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV096_SET_NORMAL_ARRAY_FORMAT_SIZE_3                               0x00000003
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_WEIGHT_ARRAY_OFFSET                                      0x00000d30
#define NV096_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                     27:0


#define NV096_SET_WEIGHT_ARRAY_FORMAT                                      0x00000d34
#define NV096_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                     31:8
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE                                        7:4
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                               0x00000000
#define NV096_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                               0x00000001
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE                                        3:0
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                           0x00000001
#define NV096_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                           0x00000002


#define NV096_SET_FOG_ARRAY_OFFSET                                         0x00000d38
#define NV096_SET_FOG_ARRAY_OFFSET_OFFSET                                        27:0


#define NV096_SET_FOG_ARRAY_FORMAT                                         0x00000d3c
#define NV096_SET_FOG_ARRAY_FORMAT_STRIDE                                        31:8
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE                                           7:4
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE_0                                  0x00000000
#define NV096_SET_FOG_ARRAY_FORMAT_SIZE_1                                  0x00000001
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE                                           3:0
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                              0x00000001
#define NV096_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                              0x00000002

#define NV096_SET_LOGIC_OP_ENABLE                                          0x00000d40
#define NV096_SET_LOGIC_OP_ENABLE_V                                              31:0
#define NV096_SET_LOGIC_OP_ENABLE_V_FALSE                                  0x00000000
#define NV096_SET_LOGIC_OP_ENABLE_V_TRUE                                   0x00000001

#define NV096_SET_LOGIC_OP                                                 0x00000d44
#define NV096_SET_LOGIC_OP_V                                                     31:0
#define NV096_SET_LOGIC_OP_V_CLEAR                                         0x00001500
#define NV096_SET_LOGIC_OP_V_AND                                           0x00001501
#define NV096_SET_LOGIC_OP_V_AND_REVERSE                                   0x00001502
#define NV096_SET_LOGIC_OP_V_COPY                                          0x00001503
#define NV096_SET_LOGIC_OP_V_AND_INVERTED                                  0x00001504
#define NV096_SET_LOGIC_OP_V_NOOP                                          0x00001505
#define NV096_SET_LOGIC_OP_V_XOR                                           0x00001506
#define NV096_SET_LOGIC_OP_V_OR                                            0x00001507
#define NV096_SET_LOGIC_OP_V_NOR                                           0x00001508
#define NV096_SET_LOGIC_OP_V_EQUIV                                         0x00001509
#define NV096_SET_LOGIC_OP_V_INVERT                                        0x0000150a
#define NV096_SET_LOGIC_OP_V_OR_REVERSE                                    0x0000150b
#define NV096_SET_LOGIC_OP_V_COPY_INVERTED                                 0x0000150c
#define NV096_SET_LOGIC_OP_V_OR_INVERTED                                   0x0000150d
#define NV096_SET_LOGIC_OP_V_NAND                                          0x0000150e
#define NV096_SET_LOGIC_OP_V_SET                                           0x0000150f

#define NV096_SET_BEGIN_END                                                0x00000dfc
#define NV096_SET_BEGIN_END_OP                                                   31:0
#define NV096_SET_BEGIN_END_OP_END                                         0x00000000
#define NV096_SET_BEGIN_END_OP_POINTS                                      0x00000001
#define NV096_SET_BEGIN_END_OP_LINES                                       0x00000002
#define NV096_SET_BEGIN_END_OP_LINE_LOOP                                   0x00000003
#define NV096_SET_BEGIN_END_OP_LINE_STRIP                                  0x00000004
#define NV096_SET_BEGIN_END_OP_TRIANGLES                                   0x00000005
#define NV096_SET_BEGIN_END_OP_TRIANGLE_STRIP                              0x00000006
#define NV096_SET_BEGIN_END_OP_TRIANGLE_FAN                                0x00000007
#define NV096_SET_BEGIN_END_OP_QUADS                                       0x00000008
#define NV096_SET_BEGIN_END_OP_QUAD_STRIP                                  0x00000009
#define NV096_SET_BEGIN_END_OP_POLYGON                                     0x0000000A


#define NV096_ARRAY_ELEMENT16(i)                                   (0x00000e00+(i)*2)


#define NV096_SET_BEGIN_END2                                               0x000010fc
#define NV096_SET_BEGIN_END2_OP                                                  31:0
#define NV096_SET_BEGIN_END2_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END2_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END2_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END2_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END2_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END2_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END2_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END2_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END2_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END2_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END2_OP_POLYGON                                    0x0000000A


#define NV096_ARRAY_ELEMENT32(i)                                   (0x00001100+(i)*4)


#define NV096_SET_BEGIN_END3                                               0x000013fc
#define NV096_SET_BEGIN_END3_OP                                                  31:0
#define NV096_SET_BEGIN_END3_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END3_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END3_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END3_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END3_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END3_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END3_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END3_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END3_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END3_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END3_OP_POLYGON                                    0x0000000A


#define NV096_DRAW_ARRAYS(i)                                       (0x00001400+(i)*4)
#define NV096_DRAW_ARRAYS_COUNT                                                 31:24
#define NV096_DRAW_ARRAYS_START_INDEX                                            23:0

#define NV096_SET_BEGIN_END4                                               0x000017fc
#define NV096_SET_BEGIN_END4_OP                                                  31:0
#define NV096_SET_BEGIN_END4_OP_END                                        0x00000000
#define NV096_SET_BEGIN_END4_OP_POINTS                                     0x00000001
#define NV096_SET_BEGIN_END4_OP_LINES                                      0x00000002
#define NV096_SET_BEGIN_END4_OP_LINE_LOOP                                  0x00000003
#define NV096_SET_BEGIN_END4_OP_LINE_STRIP                                 0x00000004
#define NV096_SET_BEGIN_END4_OP_TRIANGLES                                  0x00000005
#define NV096_SET_BEGIN_END4_OP_TRIANGLE_STRIP                             0x00000006
#define NV096_SET_BEGIN_END4_OP_TRIANGLE_FAN                               0x00000007
#define NV096_SET_BEGIN_END4_OP_QUADS                                      0x00000008
#define NV096_SET_BEGIN_END4_OP_QUAD_STRIP                                 0x00000009
#define NV096_SET_BEGIN_END4_OP_POLYGON                                    0x0000000A


#define NV096_INLINE_ARRAY(i)                                      (0x00001800+(i)*4)



typedef NvV32 Nv1196Typedef;


/* class NV11_CELSIUS_PRIMITIVE */
#define  NV11_CELSIUS_PRIMITIVE                                    (0x00001196)
/* NvNotification[] elements */
#define NV1196_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV1196_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV1196_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV1196_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV1196_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV1196_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV1196_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved0004[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved0114[0xc/4];
    NvV32 SetFlipRead;
    NvV32 SetFlipWrite;
    NvV32 SetFlipModulo;
    NvV32 FlipIncrementWrite;
    NvV32 FlipStall;
    NvV32 Reserved0134[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved0144[0x3c/4];
    NvU32 SetContextDmaNotifies;
    NvU32 SetContextDmaA;
    NvU32 SetContextDmaB;
    NvU32 SetContextDmaVertex;
    NvU32 SetContextDmaState;
    NvU32 SetContextDmaColor;
    NvU32 SetContextDmaZeta;
    NvV32 Reserved019c[0x64/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvU32 SetTextureOffset[2];
    NvV32 SetTextureFormat[2];
    NvV32 SetTextureControl0[2];
    NvV32 SetTextureControl1[2];
    NvV32 SetTextureControl2[2];
    NvV32 SetTextureImageRect[2];
    NvV32 SetTextureFilter[2];
    NvV32 SetTexturePalette[2];
    NvV32 Reserved0258[0x8/4];
    NvV32 SetCombinerAlphaICW[2];
    NvV32 SetCombinerColorICW[2];
    NvV32 SetCombineFactor[2];
    NvV32 SetCombinerAlphaOCW[2];
    NvV32 SetCombiner0ColorOCW;
    NvV32 SetCombiner1ColorOCW;
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvU32 SetColorKeyColor[2];
    NvV32 SetWindowClipType;
    NvV32 Reserved02b8[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinEnable;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvU32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvU32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvU32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvU32 SetStencilFuncRef;
    NvU32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvU32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvF32 SetMaterialEmission[3];
    NvF32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
    NvV32 S;
    NvV32 T;
    NvV32 R;
    NvV32 Q;
    } SetTexgen[2];
    NvV32 SetTextureMatrix0Enable;
    NvV32 SetTextureMatrix1Enable;
    NvV32 SetTLMode;
    NvU32 SetPointSize;
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved03f8[0x8/4];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvV32 Reserved05c0[0x40/4];
    NvF32 SetTexgenSPlane0[4];
    NvF32 SetTexgenTPlane0[4];
    NvF32 SetTexgenRPlane0[4];
    NvF32 SetTexgenQPlane0[4];
    NvF32 SetTexgenSPlane1[4];
    NvF32 SetTexgenTPlane1[4];
    NvF32 SetTexgenRPlane1[4];
    NvF32 SetTexgenQPlane1[4];
    NvF32 SetFogParams[3];
    NvF32 SetFogPlane[4];
    NvV32 Reserved069c[0x4/4];
    NvF32 SetSpecularParams[6];
    NvV32 Reserved06b8[0xc/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved06d0[0x18/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 Flush;
    NvF32 SetEyeDirectionSW[3];
    NvV32 Reserved0738[0xc8/4];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvF32 LocalRange;
    NvF32 InfiniteHalfVector[3];
    NvF32 InfiniteDirection[3];
    NvF32 SpotFalloff[3];
    NvF32 SpotDirection[4];
    NvF32 LocalPosition[3];
    NvF32 LocalAttenuation[3];
    NvV32 Reserved0874[0xc/4];
    } SetLight[8];
    NvF32 SetVertex3f[3];
    NvV32 Reserved0c0c[0xc/4];
    NvF32 SetVertex4f[4];
    NvS32 SetVertex4s[2];
    NvF32 SetNormal3f[3];
    NvV32 Reserved0c3c[0x4/4];
    NvS32 SetNormal3s[2];
    NvV32 Reserved0c48[0x8/4];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvU32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvU32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS32 SetTexcoord0_2s;
    NvV32 Reserved0c9c[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS32 SetTexcoord0_4s[2];
    NvF32 SetTexcoord1_2f[2];
    NvS32 SetTexcoord1_2s;
    NvV32 Reserved0cc4[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS32 SetTexcoord1_4s[2];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvV32 Reserved0ce8[0x4/4];
    NvU32 SetEdgeFlag;
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvU32 SetVertexArrayOffset;
    NvV32 SetVertexArrayFormat;
    NvU32 SetDiffuseArrayOffset;
    NvV32 SetDiffuseArrayFormat;
    NvU32 SetSpecularArrayOffset;
    NvV32 SetSpecularArrayFormat;
    NvU32 SetTexCoord0ArrayOffset;
    NvV32 SetTexCoord0ArrayFormat;
    NvU32 SetTexCoord1ArrayOffset;
    NvV32 SetTexCoord1ArrayFormat;
    NvU32 SetNormalArrayOffset;
    NvV32 SetNormalArrayFormat;
    NvU32 SetWeightArrayOffset;
    NvV32 SetWeightArrayFormat;
    NvU32 SetFogArrayOffset;
    NvV32 SetFogArrayFormat;
    NvV32 SetLogicOpEnable;
    NvV32 SetLogicOp;
    NvV32 Reserved0d48[0xb4/4];
    NvV32 SetBeginEnd;
    NvV32 ArrayElement16[128];
    NvV32 Reserved1000[0xfc/4];
    NvV32 SetBeginEnd2;
    NvU32 ArrayElement32[64];
    NvV32 Reserved1200[0x1fc/4];
    NvV32 SetBeginEnd3;
    NvV32 DrawArrays[128];
    NvV32 DebugInit[10];
    NvV32 Reserved1628[0x1d4/4];
    NvV32 SetBeginEnd4;
    NvU32 InlineArray[512];
} Nv11CelsiusPrimitive;

#define NV1196_TYPEDEF                                      Nv11CelsiusPrimitive
#define NV1196_SET_OBJECT                                          (0x00000000)

#define NV1196_NO_OPERATION                                                0x00000100
#define NV1196_NO_OPERATION_V                                                    31:0

#define NV1196_FLUSH                                                       0x00000728
#define NV1196_FLUSH_V                                                           31:0

#define NV1196_NOTIFY                                                      0x00000104
#define NV1196_NOTIFY_TYPE                                                       31:0
#define NV1196_NOTIFY_TYPE_WRITE_ONLY                                      0x00000000
#define NV1196_NOTIFY_TYPE_WRITE_THEN_AWAKEN                               0x00000001

#define NV1196_SET_WARNING_ENABLE                                          0x00000108
#define NV1196_SET_WARNING_ENABLE_V                                              31:0
#define NV1196_SET_WARNING_ENABLE_V_STOP                                   0x00000000
#define NV1196_SET_WARNING_ENABLE_V_WRITE_ONLY                             0x00000001
#define NV1196_SET_WARNING_ENABLE_V_WRITE_THEN_AWAKEN                      0x00000002

#define NV1196_GET_STATE                                                   0x0000010c
#define NV1196_GET_STATE_GETSTATE                                                31:0
#define NV1196_GET_STATE_GETSTATE_ALL_STATE                                0x00000001
#define NV1196_GET_STATE_GETSTATE_TRANSFORMLIGHTING_STATE                  0x00000002
#define NV1196_GET_STATE_GETSTATE_RENDERING_STATE                          0x00000003
#define NV1196_GET_STATE_GETSTATE_GEOMETRY_STATE                           0x00000004

#define NV1196_WAIT_FOR_IDLE                                               0x00000110
#define NV1196_WAIT_FOR_IDLE_V                                                   31:0

#define NV1196_PM_TRIGGER                                                  0x00000140
#define NV1196_PM_TRIGGER_V                                                      31:0
#define NV1196_PM_TRIGGER_V_NOP                                            0x00000000
#define NV1196_PM_TRIGGER_V_TRIGGER                                        0x00000001

#define NV1196_SET_FLIP_READ                                               0x00000120
#define NV1196_SET_FLIP_WRITE                                              0x00000124
#define NV1196_SET_FLIP_MODULO                                             0x00000128
#define NV1196_FLIP_INCREMENT_WRITE                                        0x0000012c
#define NV1196_FLIP_STALL                                                  0x00000130

#define NV1196_SET_CONTEXT_DMA_NOTIFIES                                    0x00000180
#define NV1196_SET_CONTEXT_DMA_NOTIFIES_V                                        31:0

#define NV1196_SET_CONTEXT_DMA_A                                           0x00000184
#define NV1196_SET_CONTEXT_DMA_A_V                                               31:0

#define NV1196_SET_CONTEXT_DMA_B                                           0x00000188
#define NV1196_SET_CONTEXT_DMA_B_V                                               31:0

#define NV1196_SET_CONTEXT_DMA_VERTEX                                      0x0000018c
#define NV1196_SET_CONTEXT_DMA_VERTEX_V                                          31:0

#define NV1196_SET_CONTEXT_DMA_STATE                                       0x00000190
#define NV1196_SET_CONTEXT_DMA_STATE_V                                           31:0

#define NV1196_SET_CONTEXT_DMA_COLOR                                       0x00000194
#define NV1196_SET_CONTEXT_DMA_COLOR_V                                           31:0

#define NV1196_SET_CONTEXT_DMA_ZETA                                        0x00000198
#define NV1196_SET_CONTEXT_DMA_ZETA_V                                            31:0

#define NV1196_SET_SURFACE_CLIP_HORIZONTAL                                 0x00000200
#define NV1196_SET_SURFACE_CLIP_HORIZONTAL_X                                     15:0
#define NV1196_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                31:16

#define NV1196_SET_SURFACE_CLIP_VERTICAL                                   0x00000204
#define NV1196_SET_SURFACE_CLIP_VERTICAL_Y                                       15:0
#define NV1196_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                 31:16

#define NV1196_SET_SURFACE_FORMAT                                          0x00000208
#define NV1196_SET_SURFACE_FORMAT_COLOR                                           7:0
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5               0x00000001
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5               0x00000002
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                          0x00000003
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8               0x00000004
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8               0x00000005
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8           0x00000006
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8           0x00000007
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                        0x00000008
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_B8                              0x00000009
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_G8B8                            0x0000000A
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1R5G5B5_Z1R5G5B5           0x00000011
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1R5G5B5_O1R5G5B5           0x00000012
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_R5G6B5                      0x00000013
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X8R8G8B8_Z8R8G8B8           0x00000014
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X8R8G8B8_O8R8G8B8           0x00000015
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1A7R8G8B8_Z1A7R8G8B8       0x00000016
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_X1A7R8G8B8_O1A7R8G8B8       0x00000017
#define NV1196_SET_SURFACE_FORMAT_COLOR_LE_Z16_A8R8G8B8                    0x00000018
#define NV1196_SET_SURFACE_FORMAT_TYPE                                           15:8
#define NV1196_SET_SURFACE_FORMAT_TYPE_PITCH                               0x00000001
#define NV1196_SET_SURFACE_FORMAT_TYPE_SWIZZLE                             0x00000002
#define NV1196_SET_SURFACE_FORMAT_WIDTH                                         23:16
#define NV1196_SET_SURFACE_FORMAT_WIDTH_1                                  0x00000000
#define NV1196_SET_SURFACE_FORMAT_WIDTH_2                                  0x00000001
#define NV1196_SET_SURFACE_FORMAT_WIDTH_4                                  0x00000002
#define NV1196_SET_SURFACE_FORMAT_WIDTH_8                                  0x00000003
#define NV1196_SET_SURFACE_FORMAT_WIDTH_16                                 0x00000004
#define NV1196_SET_SURFACE_FORMAT_WIDTH_32                                 0x00000005
#define NV1196_SET_SURFACE_FORMAT_WIDTH_64                                 0x00000006
#define NV1196_SET_SURFACE_FORMAT_WIDTH_128                                0x00000007
#define NV1196_SET_SURFACE_FORMAT_WIDTH_256                                0x00000008
#define NV1196_SET_SURFACE_FORMAT_WIDTH_512                                0x00000009
#define NV1196_SET_SURFACE_FORMAT_WIDTH_1024                               0x0000000A
#define NV1196_SET_SURFACE_FORMAT_WIDTH_2048                               0x0000000B
#define NV1196_SET_SURFACE_FORMAT_HEIGHT                                        31:24
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_1                                 0x00000000
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_2                                 0x00000001
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_4                                 0x00000002
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_8                                 0x00000003
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_16                                0x00000004
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_32                                0x00000005
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_64                                0x00000006
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_128                               0x00000007
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_256                               0x00000008
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_512                               0x00000009
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_1024                              0x0000000A
#define NV1196_SET_SURFACE_FORMAT_HEIGHT_2048                              0x0000000B

#define NV1196_SET_SURFACE_PITCH                                           0x0000020c
#define NV1196_SET_SURFACE_PITCH_COLOR                                           15:0
#define NV1196_SET_SURFACE_PITCH_ZETA                                           31:16

#define NV1196_SET_SURFACE_COLOR_OFFSET                                    0x00000210
#define NV1196_SET_SURFACE_COLOR_OFFSET_V                                        31:0

#define NV1196_SET_SURFACE_ZETA_OFFSET                                     0x00000214
#define NV1196_SET_SURFACE_ZETA_OFFSET_V                                         31:0

#define NV1196_SET_TEXTURE_OFFSET(i)                               (0x00000218+(i)*4)
#define NV1196_SET_TEXTURE_OFFSET_V                                              31:0

#define NV1196_SET_TEXTURE_FORMAT(i)                               (0x00000220+(i)*4)
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA                                     1:0
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                  2:2
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                     0x00000000
#define NV1196_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                      0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH                                      4:3
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CENTER                        0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_ZOH_CORNER                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH                                      6:5
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH_CENTER                        0x00000001
#define NV1196_SET_TEXTURE_FORMAT_ORIGIN_FOH_CORNER                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_COLOR                                          11:7
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_Y8                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_AY8                             0x00000001
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A1R5G5B5                        0x00000002
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_X1R5G5B5                        0x00000003
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A4R4G4B4                        0x00000004
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_R5G6B5                          0x00000005
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_A8R8G8B8                        0x00000006
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_X8R8G8B8                        0x00000007
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A1R5G5B5                     0x00000008
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_R5G6B5                       0x00000009
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A4R4G4B4                     0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_I8_A8R8G8B8                     0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT1_A1R5G5B5                   0x0000000C
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT23_A8R8G8B8                  0x0000000E
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_DXT45_A8R8G8B8                  0x0000000F
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A1R5G5B5                  0x00000010
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R5G6B5                    0x00000011
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_A8R8G8B8                  0x00000012
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_Y8                        0x00000013
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SY8                       0x00000014
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_X7SY9                     0x00000015
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_R8B8                      0x00000016
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_G8B8                      0x00000017
#define NV1196_SET_TEXTURE_FORMAT_COLOR_LE_IMAGE_SG8SB8                    0x00000018
#define NV1196_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                 15:12
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U                                   19:16
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                            0x00000000
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                            0x00000003
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                           0x00000004
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                           0x00000005
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                           0x00000006
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                          0x00000007
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                          0x00000008
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                          0x00000009
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                         0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                         0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V                                   23:20
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                            0x00000000
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                            0x00000001
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                            0x00000002
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                            0x00000003
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                           0x00000004
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                           0x00000005
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                           0x00000006
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                          0x00000007
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                          0x00000008
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                          0x00000009
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                         0x0000000A
#define NV1196_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                         0x0000000B
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU                               26:24
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_WRAP                     0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_MIRROR                   0x00000002
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSU_CLAMP                    0x00000003
#define NV1196_SET_TEXTURE_FORMAT_WRAPU                                         27:27
#define NV1196_SET_TEXTURE_FORMAT_WRAPU_FALSE                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_WRAPU_TRUE                               0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV                               30:28
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_WRAP                     0x00000001
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_MIRROR                   0x00000002
#define NV1196_SET_TEXTURE_FORMAT_TEXTUREADDRESSV_CLAMP                    0x00000003
#define NV1196_SET_TEXTURE_FORMAT_WRAPV                                         31:31
#define NV1196_SET_TEXTURE_FORMAT_WRAPV_FALSE                              0x00000000
#define NV1196_SET_TEXTURE_FORMAT_WRAPV_TRUE                               0x00000001

#define NV1196_SET_TEXTURE_CONTROL0(i)                             (0x00000228+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE                                      31:30
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE_FALSE                           0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_ENABLE_TRUE                            0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                               29:18
#define NV1196_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                17:6
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                 5:4
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                        0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                        0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                            3:3
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE               0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                             2:2
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                 0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                           1:0
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE              0x00000000
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA              0x00000001
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA               0x00000002
#define NV1196_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL               0x00000003

#define NV1196_SET_TEXTURE_CONTROL1(i)                             (0x00000230+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                 31:16

#define NV1196_SET_TEXTURE_CONTROL2(i)                             (0x00000238+(i)*4)
#define NV1196_SET_TEXTURE_CONTROL2_PERTURB_DU                                   11:0
#define NV1196_SET_TEXTURE_CONTROL2_PERTURB_DV                                  23:12
#define NV1196_SET_TEXTURE_CONTROL2_IMAGE_LODF                                  31:24

#define NV1196_SET_TEXTURE_IMAGE_RECT(i)                           (0x00000240+(i)*4)
#define NV1196_SET_TEXTURE_IMAGE_RECT_WIDTH                                     31:16
#define NV1196_SET_TEXTURE_IMAGE_RECT_HEIGHT                                     15:0

#define NV1196_SET_TEXTURE_FILTER(i)                               (0x00000248+(i)*4)
#define NV1196_SET_TEXTURE_FILTER_MIPMAPLODBIAS                                  12:0
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN                                    27:24
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_NEAREST                       0x00000001
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEAR                        0x00000002
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_MIPNEAREST                    0x00000003
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_MIPLINEAR                     0x00000004
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPNEAREST              0x00000005
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMIN_LINEARMIPLINEAR               0x00000006
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG                                    31:28
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG_NEAREST                       0x00000001
#define NV1196_SET_TEXTURE_FILTER_TEXTUREMAG_LINEAR                        0x00000002

#define NV1196_SET_TEXTURE_PALETTE(i)                              (0x00000250+(i)*4)
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA                                    5:0
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                           0x00000000
#define NV1196_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                           0x00000001
#define NV1196_SET_TEXTURE_PALETTE_PALETTE_OFFSET                                31:6

#define NV1196_SET_COMBINER_ALPHA_ICW(i)                           (0x00000260+(i)*4)
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP                                     31:29
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA                                   28:28
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE                                  27:24
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP                                     23:21
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA                                   20:20
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE                                  19:16
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP                                     15:13
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA                                   12:12
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE                                   11:8
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP                                       7:5
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA                                     4:4
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE                                    3:0
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                       0x0000000D

#define NV1196_SET_COMBINER_COLOR_ICW(i)                           (0x00000268+(i)*4)
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP                                     31:29
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA                                   28:28
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE                                  27:24
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP                                     23:21
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA                                   20:20
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE                                  19:16
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP                                     15:13
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA                                   12:12
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE                                   11:8
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                       0x0000000D
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP                                       7:5
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY              0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                  0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                  0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                0x00000006
#define NV1196_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                  0x00000007
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA                                     4:4
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                        0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                         0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE                                    3:0
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                       0x00000000
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                       0x00000001
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                       0x00000002
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                       0x00000003
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                       0x00000004
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                       0x00000005
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                       0x00000008
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                       0x00000009
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                       0x0000000C
#define NV1196_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                       0x0000000D

#define NV1196_SET_COMBINE_FACTOR(i)                               (0x00000270+(i)*4)
#define NV1196_SET_COMBINE_FACTOR_BLUE                                            7:0
#define NV1196_SET_COMBINE_FACTOR_GREEN                                          15:8
#define NV1196_SET_COMBINE_FACTOR_RED                                           23:16
#define NV1196_SET_COMBINE_FACTOR_ALPHA                                         31:24

#define NV1196_SET_COMBINER_ALPHA_OCW(i)                           (0x00000278+(i)*4)
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION                                 31:15
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                    0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS               0x00000001
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1               0x00000002
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS          0x00000003
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2               0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1              0x00000006
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                14:14
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST                                    11:8
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST                                      7:4
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                         0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                         0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                         0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                         0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                         0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                         0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                         0x0000000D
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST                                      3:0
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                         0x00000000
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                         0x00000004
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                         0x00000005
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                         0x00000008
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                         0x00000009
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                         0x0000000C
#define NV1196_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                         0x0000000D

#define NV1196_SET_COMBINER0_COLOR_OCW                                     0x00000280
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION                                31:15
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT                   0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_NOSHIFT_BIAS              0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1              0x00000002
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS         0x00000003
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTLEFTBY2              0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_OPERATION_SHIFTRIGHTBY1             0x00000006
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE                               14:14
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_FALSE                    0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_MUX_ENABLE_TRUE                     0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE                            13:13
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE                            12:12
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST                                   11:8
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_0                       0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_4                       0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_5                       0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_8                       0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_9                       0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_C                       0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_SUM_DST_REG_D                       0x0000000D
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST                                     7:4
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_AB_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST                                     3:0
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER0_COLOR_OCW_CD_DST_REG_D                        0x0000000D

#define NV1196_SET_COMBINER1_COLOR_OCW                                     0x00000284
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT                          31:28
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_ONE                 0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_ITERATION_COUNT_TWO                 0x00000002
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT                               27:27
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT_LSB                      0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_SELECT_MSB                      0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION                                26:15
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT                   0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_NOSHIFT_BIAS              0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1              0x00000002
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY1_BIAS         0x00000003
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTLEFTBY2              0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_OPERATION_SHIFTRIGHTBY1             0x00000006
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE                               14:14
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_FALSE                    0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_MUX_ENABLE_TRUE                     0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE                            13:13
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE                            12:12
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_FALSE                 0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DOT_ENABLE_TRUE                  0x00000001
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST                                   11:8
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_0                       0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_4                       0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_5                       0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_8                       0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_9                       0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_C                       0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_SUM_DST_REG_D                       0x0000000D
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST                                     7:4
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_AB_DST_REG_D                        0x0000000D
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST                                     3:0
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_0                        0x00000000
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_4                        0x00000004
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_5                        0x00000005
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_8                        0x00000008
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_9                        0x00000009
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_C                        0x0000000C
#define NV1196_SET_COMBINER1_COLOR_OCW_CD_DST_REG_D                        0x0000000D

#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0                               0x00000288
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                          31:29
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                            28:28
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                           27:24
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                          23:21
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                            20:20
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                           19:16
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                          15:13
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                            12:12
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                            11:8
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD          0x0000000F
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                            7:5
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                              4:4
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                             3:0
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT          0x0000000E
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD          0x0000000F

#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1                               0x0000028c
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                          31:29
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                            28:28
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                           27:24
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                          23:21
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                            20:20
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                           19:16
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                          15:13
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE               0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                            12:12
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                  0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                            11:8
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                0x00000002
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                0x00000003
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                0x00000004
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                0x00000005
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                0x00000008
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                0x00000009
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                0x0000000C
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                0x0000000D
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                       7:7
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE          0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE           0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5               6:6
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE  0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE   0x00000001
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12              5:0
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE 0x00000000
#define NV1196_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE  0x00000020

#define NV1196_SET_CONTROL0                                                0x00000290
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA                                  31:24
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                       0x00000000
#define NV1196_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                        0x00000001
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE                                  23:20
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                       0x00000000
#define NV1196_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                        0x00000001
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                19:16
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_CONTROL0_Z_FORMAT                                            15:12
#define NV1196_SET_CONTROL0_Z_FORMAT_FIXED                                 0x00000000
#define NV1196_SET_CONTROL0_Z_FORMAT_FLOAT                                 0x00000001
#define NV1196_SET_CONTROL0_WBUFFER_SELECT                                       11:8
#define NV1196_SET_CONTROL0_WBUFFER_SELECT_0                               0x00000000
#define NV1196_SET_CONTROL0_WBUFFER_SELECT_1                               0x00000001
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE                                  7:0
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                      0x00000001

#define NV1196_SET_LIGHT_CONTROL                                           0x00000294
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE                                       31:16
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE_FALSE                            0x00000000
#define NV1196_SET_LIGHT_CONTROL_LOCALEYE_TRUE                             0x00000001
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE                                15:2
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE_INVERT                   0x00000000
#define NV1196_SET_LIGHT_CONTROL_ATTENUATION_MODE_NOT_INVERT               0x00000001
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                             1:1
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                0x00000000
#define NV1196_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                 0x00000001
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN                               0:0
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_FALSE                  0x00000000
#define NV1196_SET_LIGHT_CONTROL_SECONDARY_COLOR_EN_TRUE                   0x00000001

#define NV1196_SET_COLOR_MATERIAL                                          0x00000298
#define NV1196_SET_COLOR_MATERIAL_V                                              31:0
#define NV1196_SET_COLOR_MATERIAL_V_DISABLED                               0x00000000
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION                               0x00000001
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT                                0x00000002
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT                       0x00000003
#define NV1196_SET_COLOR_MATERIAL_V_DIFFUSE                                0x00000004
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE                       0x00000005
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE                        0x00000006
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE               0x00000007
#define NV1196_SET_COLOR_MATERIAL_V_SPECULAR                               0x00000008
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_SPECULAR                      0x00000009
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_SPECULAR                       0x0000000A
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_SPECULAR              0x0000000B
#define NV1196_SET_COLOR_MATERIAL_V_DIFFUSE_SPECULAR                       0x0000000C
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_DIFFUSE_SPECULAR              0x0000000D
#define NV1196_SET_COLOR_MATERIAL_V_AMBIENT_DIFFUSE_SPECULAR               0x0000000E
#define NV1196_SET_COLOR_MATERIAL_V_EMISSION_AMBIENT_DIFFUSE_SPECULAR      0x0000000F

#define NV1196_SET_FOG_MODE                                                0x0000029c
#define NV1196_SET_FOG_MODE_FOG_MODE                                             31:0
#define NV1196_SET_FOG_MODE_FOG_MODE_LINEAR                                0x00002601
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP                                   0x00000800
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP2                                  0x00000801
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP_ABS                               0x00000802
#define NV1196_SET_FOG_MODE_FOG_MODE_EXP2_ABS                              0x00000803

#define NV1196_SET_FOG_GEN_MODE                                            0x000002a0
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE                                     31:0
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_USE_INPUT                     0x00000000
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_RADIAL                        0x00000001
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_PLANAR                        0x00000002
#define NV1196_SET_FOG_GEN_MODE_FOG_GEN_MODE_ABS_PLANAR                    0x00000003

#define NV1196_SET_FOG_ENABLE                                              0x000002a4
#define NV1196_SET_FOG_ENABLE_V                                                  31:0
#define NV1196_SET_FOG_ENABLE_V_FALSE                                      0x00000000
#define NV1196_SET_FOG_ENABLE_V_TRUE                                       0x00000001

#define NV1196_SET_FOG_COLOR                                               0x000002a8
#define NV1196_SET_FOG_COLOR_RED                                                  7:0
#define NV1196_SET_FOG_COLOR_GREEN                                               15:8
#define NV1196_SET_FOG_COLOR_BLUE                                               23:16
#define NV1196_SET_FOG_COLOR_ALPHA                                              31:24

#define NV1196_SET_COLOR_KEY_COLOR(i)                              (0x000002ac+(i)*4)
#define NV1196_SET_COLOR_KEY_COLOR_V                                             31:0

#define NV1196_SET_WINDOW_CLIP_TYPE                                        0x000002b4
#define NV1196_SET_WINDOW_CLIP_TYPE_V                                            31:0
#define NV1196_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                            0x00000000
#define NV1196_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                            0x00000001

#define NV1196_SET_WINDOW_CLIP_HORIZONTAL(i)                       (0x000002c0+(i)*4)
#define NV1196_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                   11:0
#define NV1196_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                  27:16

#define NV1196_SET_WINDOW_CLIP_VERTICAL(i)                         (0x000002e0+(i)*4)
#define NV1196_SET_WINDOW_CLIP_VERTICAL_YMIN                                     11:0
#define NV1196_SET_WINDOW_CLIP_VERTICAL_YMAX                                    27:16

#define NV1196_SET_ALPHA_TEST_ENABLE                                       0x00000300
#define NV1196_SET_ALPHA_TEST_ENABLE_V                                           31:0
#define NV1196_SET_ALPHA_TEST_ENABLE_V_FALSE                               0x00000000
#define NV1196_SET_ALPHA_TEST_ENABLE_V_TRUE                                0x00000001

#define NV1196_SET_BLEND_ENABLE                                            0x00000304
#define NV1196_SET_BLEND_ENABLE_V                                                31:0
#define NV1196_SET_BLEND_ENABLE_V_FALSE                                    0x00000000
#define NV1196_SET_BLEND_ENABLE_V_TRUE                                     0x00000001

#define NV1196_SET_CULL_FACE_ENABLE                                        0x00000308
#define NV1196_SET_CULL_FACE_ENABLE_V                                            31:0
#define NV1196_SET_CULL_FACE_ENABLE_V_FALSE                                0x00000000
#define NV1196_SET_CULL_FACE_ENABLE_V_TRUE                                 0x00000001

#define NV1196_SET_DEPTH_TEST_ENABLE                                       0x0000030c
#define NV1196_SET_DEPTH_TEST_ENABLE_V                                           31:0
#define NV1196_SET_DEPTH_TEST_ENABLE_V_FALSE                               0x00000000
#define NV1196_SET_DEPTH_TEST_ENABLE_V_TRUE                                0x00000001

#define NV1196_SET_DITHER_ENABLE                                           0x00000310
#define NV1196_SET_DITHER_ENABLE_V                                               31:0
#define NV1196_SET_DITHER_ENABLE_V_FALSE                                   0x00000000
#define NV1196_SET_DITHER_ENABLE_V_TRUE                                    0x00000001

#define NV1196_SET_LIGHTING_ENABLE                                         0x00000314
#define NV1196_SET_LIGHTING_ENABLE_V                                             31:0
#define NV1196_SET_LIGHTING_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_LIGHTING_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_POINT_PARAMS_ENABLE                                     0x00000318
#define NV1196_SET_POINT_PARAMS_ENABLE_V                                         31:0
#define NV1196_SET_POINT_PARAMS_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_POINT_PARAMS_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_POINT_SMOOTH_ENABLE                                     0x0000031c
#define NV1196_SET_POINT_SMOOTH_ENABLE_V                                         31:0
#define NV1196_SET_POINT_SMOOTH_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_POINT_SMOOTH_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_LINE_SMOOTH_ENABLE                                      0x00000320
#define NV1196_SET_LINE_SMOOTH_ENABLE_V                                          31:0
#define NV1196_SET_LINE_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV1196_SET_LINE_SMOOTH_ENABLE_V_TRUE                               0x00000001

#define NV1196_SET_POLY_SMOOTH_ENABLE                                      0x00000324
#define NV1196_SET_POLY_SMOOTH_ENABLE_V                                          31:0
#define NV1196_SET_POLY_SMOOTH_ENABLE_V_FALSE                              0x00000000
#define NV1196_SET_POLY_SMOOTH_ENABLE_V_TRUE                               0x00000001

#define NV1196_SET_SKIN_ENABLE                                             0x00000328
#define NV1196_SET_SKIN_ENABLE_V                                                 31:0
#define NV1196_SET_SKIN_ENABLE_V_FALSE                                     0x00000000
#define NV1196_SET_SKIN_ENABLE_V_TRUE                                      0x00000001

#define NV1196_SET_STENCIL_TEST_ENABLE                                     0x0000032c
#define NV1196_SET_STENCIL_TEST_ENABLE_V                                         31:0
#define NV1196_SET_STENCIL_TEST_ENABLE_V_FALSE                             0x00000000
#define NV1196_SET_STENCIL_TEST_ENABLE_V_TRUE                              0x00000001

#define NV1196_SET_POLY_OFFSET_POINT_ENABLE                                0x00000330
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V                                    31:0
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                        0x00000000
#define NV1196_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                         0x00000001

#define NV1196_SET_POLY_OFFSET_LINE_ENABLE                                 0x00000334
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V                                     31:0
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                         0x00000000
#define NV1196_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                          0x00000001

#define NV1196_SET_POLY_OFFSET_FILL_ENABLE                                 0x00000338
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V                                     31:0
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                         0x00000000
#define NV1196_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                          0x00000001

#define NV1196_SET_ALPHA_FUNC                                              0x0000033c
#define NV1196_SET_ALPHA_FUNC_V                                                  31:0
#define NV1196_SET_ALPHA_FUNC_V_NEVER                                      0x00000200
#define NV1196_SET_ALPHA_FUNC_V_LESS                                       0x00000201
#define NV1196_SET_ALPHA_FUNC_V_EQUAL                                      0x00000202
#define NV1196_SET_ALPHA_FUNC_V_LEQUAL                                     0x00000203
#define NV1196_SET_ALPHA_FUNC_V_GREATER                                    0x00000204
#define NV1196_SET_ALPHA_FUNC_V_NOTEQUAL                                   0x00000205
#define NV1196_SET_ALPHA_FUNC_V_GEQUAL                                     0x00000206
#define NV1196_SET_ALPHA_FUNC_V_ALWAYS                                     0x00000207

#define NV1196_SET_ALPHA_REF                                               0x00000340
#define NV1196_SET_ALPHA_REF_V                                                   31:0

#define NV1196_SET_BLEND_FUNC_SFACTOR                                      0x00000344
#define NV1196_SET_BLEND_FUNC_SFACTOR_V                                          31:0
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ZERO                               0x00000000
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE                                0x00000001
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                          0x00000300
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                0x00000301
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                          0x00000302
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                0x00000303
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                          0x00000304
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                0x00000305
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                          0x00000306
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                0x00000307
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                 0x00000308
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                     0x00008001
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR           0x00008002
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                     0x00008003
#define NV1196_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA           0x00008004

#define NV1196_SET_BLEND_FUNC_DFACTOR                                      0x00000348
#define NV1196_SET_BLEND_FUNC_DFACTOR_V                                          31:0
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ZERO                               0x00000000
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE                                0x00000001
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                          0x00000300
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                0x00000301
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                          0x00000302
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                0x00000303
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                          0x00000304
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                0x00000305
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                          0x00000306
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                0x00000307
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA_SATURATE                 0x00000308
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                     0x00008001
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR           0x00008002
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                     0x00008003
#define NV1196_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA           0x00008004

#define NV1196_SET_BLEND_COLOR                                             0x0000034c
#define NV1196_SET_BLEND_COLOR_V                                                 31:0

#define NV1196_SET_BLEND_EQUATION                                          0x00000350
#define NV1196_SET_BLEND_EQUATION_V                                              31:0
#define NV1196_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                          0x0000800A
#define NV1196_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                  0x0000800B
#define NV1196_SET_BLEND_EQUATION_V_FUNC_ADD                               0x00008006
#define NV1196_SET_BLEND_EQUATION_V_MIN                                    0x00008007
#define NV1196_SET_BLEND_EQUATION_V_MAX                                    0x00008008

#define NV1196_SET_DEPTH_FUNC                                              0x00000354
#define NV1196_SET_DEPTH_FUNC_V                                                  31:0
#define NV1196_SET_DEPTH_FUNC_V_NEVER                                      0x00000200
#define NV1196_SET_DEPTH_FUNC_V_LESS                                       0x00000201
#define NV1196_SET_DEPTH_FUNC_V_EQUAL                                      0x00000202
#define NV1196_SET_DEPTH_FUNC_V_LEQUAL                                     0x00000203
#define NV1196_SET_DEPTH_FUNC_V_GREATER                                    0x00000204
#define NV1196_SET_DEPTH_FUNC_V_NOTEQUAL                                   0x00000205
#define NV1196_SET_DEPTH_FUNC_V_GEQUAL                                     0x00000206
#define NV1196_SET_DEPTH_FUNC_V_ALWAYS                                     0x00000207

#define NV1196_SET_COLOR_MASK                                              0x00000358
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                31:24
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE                                  23:16
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                       0x00000000
#define NV1196_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                        0x00000001
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                 15:8
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                     0x00000000
#define NV1196_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                      0x00000001
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                   7:0
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                      0x00000000
#define NV1196_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                       0x00000001

#define NV1196_SET_DEPTH_MASK                                              0x0000035c
#define NV1196_SET_DEPTH_MASK_V                                                  31:0
#define NV1196_SET_DEPTH_MASK_V_FALSE                                      0x00000000
#define NV1196_SET_DEPTH_MASK_V_TRUE                                       0x00000001

#define NV1196_SET_STENCIL_MASK                                            0x00000360
#define NV1196_SET_STENCIL_MASK_V                                                31:0

#define NV1196_SET_STENCIL_FUNC                                            0x00000364
#define NV1196_SET_STENCIL_FUNC_V                                                31:0
#define NV1196_SET_STENCIL_FUNC_V_NEVER                                    0x00000200
#define NV1196_SET_STENCIL_FUNC_V_LESS                                     0x00000201
#define NV1196_SET_STENCIL_FUNC_V_EQUAL                                    0x00000202
#define NV1196_SET_STENCIL_FUNC_V_LEQUAL                                   0x00000203
#define NV1196_SET_STENCIL_FUNC_V_GREATER                                  0x00000204
#define NV1196_SET_STENCIL_FUNC_V_NOTEQUAL                                 0x00000205
#define NV1196_SET_STENCIL_FUNC_V_GEQUAL                                   0x00000206
#define NV1196_SET_STENCIL_FUNC_V_ALWAYS                                   0x00000207

#define NV1196_SET_STENCIL_FUNC_REF                                        0x00000368
#define NV1196_SET_STENCIL_FUNC_REF_V                                            31:0

#define NV1196_SET_STENCIL_FUNC_MASK                                       0x0000036c
#define NV1196_SET_STENCIL_FUNC_MASK_V                                           31:0

#define NV1196_SET_STENCIL_OP_FAIL                                         0x00000370
#define NV1196_SET_STENCIL_OP_FAIL_V                                             31:0
#define NV1196_SET_STENCIL_OP_FAIL_V_KEEP                                  0x00001E00
#define NV1196_SET_STENCIL_OP_FAIL_V_ZERO                                  0x00000000
#define NV1196_SET_STENCIL_OP_FAIL_V_REPLACE                               0x00001E01
#define NV1196_SET_STENCIL_OP_FAIL_V_INCRSAT                               0x00001E02
#define NV1196_SET_STENCIL_OP_FAIL_V_DECRSAT                               0x00001E03
#define NV1196_SET_STENCIL_OP_FAIL_V_INVERT                                0x0000150A
#define NV1196_SET_STENCIL_OP_FAIL_V_INCR                                  0x00008507
#define NV1196_SET_STENCIL_OP_FAIL_V_DECR                                  0x00008508

#define NV1196_SET_STENCIL_OP_ZFAIL                                        0x00000374
#define NV1196_SET_STENCIL_OP_ZFAIL_V                                            31:0
#define NV1196_SET_STENCIL_OP_ZFAIL_V_KEEP                                 0x00001E00
#define NV1196_SET_STENCIL_OP_ZFAIL_V_ZERO                                 0x00000000
#define NV1196_SET_STENCIL_OP_ZFAIL_V_REPLACE                              0x00001E01
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INCRSAT                              0x00001E02
#define NV1196_SET_STENCIL_OP_ZFAIL_V_DECRSAT                              0x00001E03
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INVERT                               0x0000150A
#define NV1196_SET_STENCIL_OP_ZFAIL_V_INCR                                 0x00008507
#define NV1196_SET_STENCIL_OP_ZFAIL_V_DECR                                 0x00008508

#define NV1196_SET_STENCIL_OP_ZPASS                                        0x00000378
#define NV1196_SET_STENCIL_OP_ZPASS_V                                            31:0
#define NV1196_SET_STENCIL_OP_ZPASS_V_KEEP                                 0x00001E00
#define NV1196_SET_STENCIL_OP_ZPASS_V_ZERO                                 0x00000000
#define NV1196_SET_STENCIL_OP_ZPASS_V_REPLACE                              0x00001E01
#define NV1196_SET_STENCIL_OP_ZPASS_V_INCRSAT                              0x00001E02
#define NV1196_SET_STENCIL_OP_ZPASS_V_DECRSAT                              0x00001E03
#define NV1196_SET_STENCIL_OP_ZPASS_V_INVERT                               0x0000150A
#define NV1196_SET_STENCIL_OP_ZPASS_V_INCR                                 0x00008507
#define NV1196_SET_STENCIL_OP_ZPASS_V_DECR                                 0x00008508

#define NV1196_SET_SHADE_MODE                                              0x0000037c
#define NV1196_SET_SHADE_MODE_V                                                  31:0
#define NV1196_SET_SHADE_MODE_V_FLAT                                       0x00001D00
#define NV1196_SET_SHADE_MODE_V_SMOOTH                                     0x00001D01

#define NV1196_SET_LINE_WIDTH                                              0x00000380
#define NV1196_SET_LINE_WIDTH_V                                                  31:0

#define NV1196_SET_POLYGON_OFFSET_SCALE_FACTOR                             0x00000384
#define NV1196_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                 31:0

#define NV1196_SET_POLYGON_OFFSET_BIAS                                     0x00000388
#define NV1196_SET_POLYGON_OFFSET_BIAS_V                                         31:0

#define NV1196_SET_FRONT_POLYGON_MODE                                      0x0000038c
#define NV1196_SET_FRONT_POLYGON_MODE_V                                          31:0
#define NV1196_SET_FRONT_POLYGON_MODE_V_POINT                              0x00001B00
#define NV1196_SET_FRONT_POLYGON_MODE_V_LINE                               0x00001B01
#define NV1196_SET_FRONT_POLYGON_MODE_V_FILL                               0x00001B02

#define NV1196_SET_BACK_POLYGON_MODE                                       0x00000390
#define NV1196_SET_BACK_POLYGON_MODE_V                                           31:0
#define NV1196_SET_BACK_POLYGON_MODE_V_POINT                               0x00001B00
#define NV1196_SET_BACK_POLYGON_MODE_V_LINE                                0x00001B01
#define NV1196_SET_BACK_POLYGON_MODE_V_FILL                                0x00001B02

#define NV1196_SET_CLIP_MIN                                                0x00000394
#define NV1196_SET_CLIP_MIN_V                                                    31:0

#define NV1196_SET_CLIP_MAX                                                0x00000398
#define NV1196_SET_CLIP_MAX_V                                                    31:0

#define NV1196_SET_CULL_FACE                                               0x0000039c
#define NV1196_SET_CULL_FACE_V                                                   31:0
#define NV1196_SET_CULL_FACE_V_FRONT                                       0x00000404
#define NV1196_SET_CULL_FACE_V_BACK                                        0x00000405
#define NV1196_SET_CULL_FACE_V_FRONT_AND_BACK                              0x00000408

#define NV1196_SET_FRONT_FACE                                              0x000003a0
#define NV1196_SET_FRONT_FACE_V                                                  31:0
#define NV1196_SET_FRONT_FACE_V_CW                                         0x00000900
#define NV1196_SET_FRONT_FACE_V_CCW                                        0x00000901

#define NV1196_SET_NORMALIZATION_ENABLE                                    0x000003a4
#define NV1196_SET_NORMALIZATION_ENABLE_V                                        31:0
#define NV1196_SET_NORMALIZATION_ENABLE_V_FALSE                            0x00000000
#define NV1196_SET_NORMALIZATION_ENABLE_V_TRUE                             0x00000001

#define NV1196_SET_MATERIAL_EMISSION(i)                            (0x000003a8+(i)*4)
#define NV1196_SET_MATERIAL_EMISSION_V                                           31:0

#define NV1196_SET_MATERIAL_ALPHA                                          0x000003b4
#define NV1196_SET_MATERIAL_ALPHA_V                                              31:0

#define NV1196_SET_SPECULAR_ENABLE                                         0x000003b8
#define NV1196_SET_SPECULAR_ENABLE_V                                             31:0
#define NV1196_SET_SPECULAR_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_SPECULAR_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_LIGHT_ENABLE_MASK                                       0x000003bc
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0                                       1:0
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1                                       3:2
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2                                       5:4
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3                                       7:6
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4                                       9:8
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5                                     11:10
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6                                     13:12
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                           0x00000003
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7                                     15:14
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                            0x00000000
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                       0x00000001
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                          0x00000002
#define NV1196_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                           0x00000003

#define NV1196_SET_TEXGEN_S(i)                                    (0x000003c0+(i)*16)
#define NV1196_SET_TEXGEN_S_V                                                    31:0
#define NV1196_SET_TEXGEN_S_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_S_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_S_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_S_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_S_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_S_V_SPHERE_MAP                                   0x00002402
#define NV1196_SET_TEXGEN_S_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_T(i)                                    (0x000003c4+(i)*16)
#define NV1196_SET_TEXGEN_T_V                                                    31:0
#define NV1196_SET_TEXGEN_T_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_T_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_T_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_T_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_T_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_T_V_SPHERE_MAP                                   0x00002402
#define NV1196_SET_TEXGEN_T_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_R(i)                                    (0x000003c8+(i)*16)
#define NV1196_SET_TEXGEN_R_V                                                    31:0
#define NV1196_SET_TEXGEN_R_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_R_V_NORMAL_MAP                                   0x00008511
#define NV1196_SET_TEXGEN_R_V_REFLECTION_MAP                               0x00008512
#define NV1196_SET_TEXGEN_R_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_R_V_OBJECT_LINEAR                                0x00002401
#define NV1196_SET_TEXGEN_R_V_EMBOSS                                       0x0000855F

#define NV1196_SET_TEXGEN_Q(i)                                    (0x000003cc+(i)*16)
#define NV1196_SET_TEXGEN_Q_V                                                    31:0
#define NV1196_SET_TEXGEN_Q_V_DISABLE                                      0x00000000
#define NV1196_SET_TEXGEN_Q_V_EYE_LINEAR                                   0x00002400
#define NV1196_SET_TEXGEN_Q_V_OBJECT_LINEAR                                0x00002401

#define NV1196_SET_TEXTURE_MATRIX0_ENABLE                                  0x000003e0
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V                                      31:0
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V_FALSE                          0x00000000
#define NV1196_SET_TEXTURE_MATRIX0_ENABLE_V_TRUE                           0x00000001

#define NV1196_SET_TEXTURE_MATRIX1_ENABLE                                  0x000003e4
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V                                      31:0
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V_FALSE                          0x00000000
#define NV1196_SET_TEXTURE_MATRIX1_ENABLE_V_TRUE                           0x00000001

#define NV1196_SET_TLMODE                                                  0x000003e8
#define NV1196_SET_TLMODE_PASSTHROUGH                                             0:0
#define NV1196_SET_TLMODE_PASSTHROUGH_TRUE                                 0x00000001
#define NV1196_SET_TLMODE_PASSTHROUGH_FALSE                                0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_0                                              1:1
#define NV1196_SET_TLMODE_W_DIVIDE_0_DISABLE                               0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_0_ENABLE                                0x00000001
#define NV1196_SET_TLMODE_W_DIVIDE_1                                              2:2
#define NV1196_SET_TLMODE_W_DIVIDE_1_DISABLE                               0x00000000
#define NV1196_SET_TLMODE_W_DIVIDE_1_ENABLE                                0x00000001

#define NV1196_SET_POINT_SIZE                                              0x000003ec
#define NV1196_SET_POINT_SIZE_V                                                  31:0

#define NV1196_SET_SWATH_WIDTH                                             0x000003f0
#define NV1196_SET_SWATH_WIDTH_V                                                 31:0
#define NV1196_SET_SWATH_WIDTH_V_8                                         0x00000000
#define NV1196_SET_SWATH_WIDTH_V_16                                        0x00000001
#define NV1196_SET_SWATH_WIDTH_V_32                                        0x00000002
#define NV1196_SET_SWATH_WIDTH_V_64                                        0x00000003

#define NV1196_SET_FLAT_SHADE_OP                                           0x000003f4
#define NV1196_SET_FLAT_SHADE_OP_V                                               31:0
#define NV1196_SET_FLAT_SHADE_OP_V_LAST_VTX                                0x00000000
#define NV1196_SET_FLAT_SHADE_OP_V_FIRST_VTX                               0x00000001

#define NV1196_SET_MODEL_VIEW_MATRIX0(i)                           (0x00000400+(i)*4)
#define NV1196_SET_MODEL_VIEW_MATRIX0_V                                          31:0

#define NV1196_SET_MODEL_VIEW_MATRIX1(i)                           (0x00000440+(i)*4)
#define NV1196_SET_MODEL_VIEW_MATRIX1_V                                          31:0

#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                   (0x00000480+(i)*4)
#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX0_V                                  31:0

#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                   (0x000004c0+(i)*4)
#define NV1196_SET_INVERSE_MODEL_VIEW_MATRIX1_V                                  31:0

#define NV1196_SET_COMPOSITE_MATRIX(i)                             (0x00000500+(i)*4)
#define NV1196_SET_COMPOSITE_MATRIX_V                                            31:0

#define NV1196_SET_TEXTURE_MATRIX0(i)                              (0x00000540+(i)*4)
#define NV1196_SET_TEXTURE_MATRIX0_V                                             31:0

#define NV1196_SET_TEXTURE_MATRIX1(i)                              (0x00000580+(i)*4)
#define NV1196_SET_TEXTURE_MATRIX1_V                                             31:0

#define NV1196_SET_TEXGEN_SPLANE0(i)                               (0x00000600+(i)*4)
#define NV1196_SET_TEXGEN_SPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_TPLANE0(i)                               (0x00000610+(i)*4)
#define NV1196_SET_TEXGEN_TPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_RPLANE0(i)                               (0x00000620+(i)*4)
#define NV1196_SET_TEXGEN_RPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_QPLANE0(i)                               (0x00000630+(i)*4)
#define NV1196_SET_TEXGEN_QPLANE0_V                                              31:0

#define NV1196_SET_TEXGEN_SPLANE1(i)                               (0x00000640+(i)*4)
#define NV1196_SET_TEXGEN_SPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_TPLANE1(i)                               (0x00000650+(i)*4)
#define NV1196_SET_TEXGEN_TPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_RPLANE1(i)                               (0x00000660+(i)*4)
#define NV1196_SET_TEXGEN_RPLANE1_V                                              31:0

#define NV1196_SET_TEXGEN_QPLANE1(i)                               (0x00000670+(i)*4)
#define NV1196_SET_TEXGEN_QPLANE1_V                                              31:0

#define NV1196_SET_FOG_PARAMS(i)                                   (0x00000680+(i)*4)
#define NV1196_SET_FOG_PARAMS_V                                                  31:0

#define NV1196_SET_FOG_PLANE(i)                                    (0x0000068c+(i)*4)
#define NV1196_SET_FOG_PLANE_V                                                   31:0

#define NV1196_SET_SPECULAR_PARAMS(i)                              (0x000006a0+(i)*4)
#define NV1196_SET_SPECULAR_PARAMS_V                                             31:0

#define NV1196_SET_SCENE_AMBIENT_COLOR(i)                          (0x000006c4+(i)*4)
#define NV1196_SET_SCENE_AMBIENT_COLOR_V                                         31:0

#define NV1196_SET_VIEWPORT_OFFSET(i)                              (0x000006e8+(i)*4)
#define NV1196_SET_VIEWPORT_OFFSET_V                                             31:0

#define NV1196_SET_POINT_PARAMS(i)                                 (0x000006f8+(i)*4)
#define NV1196_SET_POINT_PARAMS_V                                                31:0

#define NV1196_SET_EYE_POSITION(i)                                 (0x00000718+(i)*4)
#define NV1196_SET_EYE_POSITION_V                                                31:0

#define NV1196_SET_EYE_DIRECTION_SW(i)                             (0x0000072c+(i)*4)

#define NV1196_SET_LIGHT_AMBIENT_COLOR(i,j)                (0x00000800+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_AMBIENT_COLOR_V                                         31:0

#define NV1196_SET_LIGHT_DIFFUSE_COLOR(i,j)                (0x0000080c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_DIFFUSE_COLOR_V                                         31:0

#define NV1196_SET_LIGHT_SPECULAR_COLOR(i,j)               (0x00000818+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPECULAR_COLOR_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_RANGE(i)                          (0x00000824+(i)*128)
#define NV1196_SET_LIGHT_LOCAL_RANGE_V                                           31:0

#define NV1196_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)         (0x00000828+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_INFINITE_HALF_VECTOR_V                                  31:0

#define NV1196_SET_LIGHT_INFINITE_DIRECTION(i,j)           (0x00000834+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_INFINITE_DIRECTION_V                                    31:0

#define NV1196_SET_LIGHT_SPOT_FALLOFF(i,j)                 (0x00000840+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPOT_FALLOFF_V                                          31:0

#define NV1196_SET_LIGHT_SPOT_DIRECTION(i,j)               (0x0000084c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_SPOT_DIRECTION_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_POSITION(i,j)               (0x0000085c+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_LOCAL_POSITION_V                                        31:0

#define NV1196_SET_LIGHT_LOCAL_ATTENUATION(i,j)            (0x00000868+(i)*128+(j)*4)
#define NV1196_SET_LIGHT_LOCAL_ATTENUATION_V                                     31:0

#define NV1196_SET_VERTEX3F(i)                                     (0x00000c00+(i)*4)
#define NV1196_SET_VERTEX3F_V                                                    31:0

#define NV1196_SET_VERTEX4F(i)                                     (0x00000c18+(i)*4)
#define NV1196_SET_VERTEX4F_V                                                    31:0

#define NV1196_SET_VERTEX4S(i)                                     (0x00000c28+(i)*4)
#define NV1196_SET_VERTEX4S_V                                                    31:0

#define NV1196_SET_NORMAL3F(i)                                     (0x00000c30+(i)*4)
#define NV1196_SET_NORMAL3F_V                                                    31:0

#define NV1196_SET_NORMAL3S(i)                                     (0x00000c40+(i)*4)
#define NV1196_SET_NORMAL3S_V                                                    31:0

#define NV1196_SET_DIFFUSE_COLOR4F(i)                              (0x00000c50+(i)*4)
#define NV1196_SET_DIFFUSE_COLOR4F_V                                             31:0

#define NV1196_SET_DIFFUSE_COLOR3F(i)                              (0x00000c60+(i)*4)
#define NV1196_SET_DIFFUSE_COLOR3F_V                                             31:0

#define NV1196_SET_DIFFUSE_COLOR4UB                                        0x00000c6c
#define NV1196_SET_DIFFUSE_COLOR4UB_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR4F(i)                             (0x00000c70+(i)*4)
#define NV1196_SET_SPECULAR_COLOR4F_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR3F(i)                             (0x00000c80+(i)*4)
#define NV1196_SET_SPECULAR_COLOR3F_V                                            31:0

#define NV1196_SET_SPECULAR_COLOR4UB                                       0x00000c8c
#define NV1196_SET_SPECULAR_COLOR4UB_V                                           31:0

#define NV1196_SET_TEXCOORD0_2F(i)                                 (0x00000c90+(i)*4)
#define NV1196_SET_TEXCOORD0_2F_V                                                31:0

#define NV1196_SET_TEXCOORD0_2S                                            0x00000c98
#define NV1196_SET_TEXCOORD0_2S_V                                                31:0

#define NV1196_SET_TEXCOORD0_4F(i)                                 (0x00000ca0+(i)*4)
#define NV1196_SET_TEXCOORD0_4F_V                                                31:0

#define NV1196_SET_TEXCOORD0_4S(i)                                 (0x00000cb0+(i)*4)
#define NV1196_SET_TEXCOORD0_4S_V                                                31:0

#define NV1196_SET_TEXCOORD1_2F(i)                                 (0x00000cb8+(i)*4)
#define NV1196_SET_TEXCOORD1_2F_V                                                31:0

#define NV1196_SET_TEXCOORD1_2S                                            0x00000cc0
#define NV1196_SET_TEXCOORD1_2S_V                                                31:0

#define NV1196_SET_TEXCOORD1_4F(i)                                 (0x00000cc8+(i)*4)
#define NV1196_SET_TEXCOORD1_4F_V                                                31:0

#define NV1196_SET_TEXCOORD1_4S(i)                                 (0x00000cd8+(i)*4)
#define NV1196_SET_TEXCOORD1_4S_V                                                31:0

#define NV1196_SET_FOG1F                                                   0x00000ce0
#define NV1196_SET_FOG1F_V                                                       31:0

#define NV1196_SET_WEIGHT1F                                                0x00000ce4
#define NV1196_SET_WEIGHT1F_V                                                    31:0

#define NV1196_SET_EDGE_FLAG                                               0x00000cec
#define NV1196_SET_EDGE_FLAG_V                                                   31:0

#define NV1196_INVALIDATE_VERTEX_CACHE_FILE                                0x00000cf0
#define NV1196_INVALIDATE_VERTEX_CACHE_FILE_V                                    31:0

#define NV1196_INVALIDATE_VERTEX_FILE                                      0x00000cf4
#define NV1196_INVALIDATE_VERTEX_FILE_V                                          31:0

#define NV1196_TL_NOP                                                      0x00000cf8
#define NV1196_TL_NOP_V                                                          31:0

#define NV1196_TL_SYNC                                                     0x00000cfc
#define NV1196_TL_SYNC_V                                                         31:0

#define NV1196_SET_VERTEX_ARRAY_OFFSET                                     0x00000d00
#define NV1196_SET_VERTEX_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_DIFFUSE_ARRAY_OFFSET                                    0x00000d08
#define NV1196_SET_DIFFUSE_ARRAY_OFFSET_OFFSET                                   31:0

#define NV1196_SET_SPECULAR_ARRAY_OFFSET                                   0x00000d10
#define NV1196_SET_SPECULAR_ARRAY_OFFSET_OFFSET                                  31:0

#define NV1196_SET_TEX_COORD0_ARRAY_OFFSET                                 0x00000d18
#define NV1196_SET_TEX_COORD0_ARRAY_OFFSET_OFFSET                                31:0

#define NV1196_SET_TEX_COORD1_ARRAY_OFFSET                                 0x00000d20
#define NV1196_SET_TEX_COORD1_ARRAY_OFFSET_OFFSET                                31:0

#define NV1196_SET_NORMAL_ARRAY_OFFSET                                     0x00000d28
#define NV1196_SET_NORMAL_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_WEIGHT_ARRAY_OFFSET                                     0x00000d30
#define NV1196_SET_WEIGHT_ARRAY_OFFSET_OFFSET                                    31:0

#define NV1196_SET_FOG_ARRAY_OFFSET                                        0x00000d38
#define NV1196_SET_FOG_ARRAY_OFFSET_OFFSET                                       31:0

#define NV1196_SET_VERTEX_ARRAY_FORMAT                                     0x00000d04
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W                                        31:24
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W_NONE                              0x00000000
#define NV1196_SET_VERTEX_ARRAY_FORMAT_W_PRESENT                           0x00000001
#define NV1196_SET_VERTEX_ARRAY_FORMAT_STRIDE                                    23:8
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_2                              0x00000002
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV1196_SET_VERTEX_ARRAY_FORMAT_SIZE_4                              0x00000004
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_VERTEX_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_DIFFUSE_ARRAY_FORMAT                                    0x00000d0c
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_STRIDE                                   31:8
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE                                      7:4
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_0                             0x00000000
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_3                             0x00000003
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_SIZE_4                             0x00000004
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE                                      3:0
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA            0x00000000
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_FLOAT                         0x00000002
#define NV1196_SET_DIFFUSE_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA            0x00000004

#define NV1196_SET_SPECULAR_ARRAY_FORMAT                                   0x00000d14
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_STRIDE                                  31:8
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE                                     7:4
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_0                            0x00000000
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_3                            0x00000003
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_SIZE_4                            0x00000004
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE                                     3:0
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_BGRA           0x00000000
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_FLOAT                        0x00000002
#define NV1196_SET_SPECULAR_ARRAY_FORMAT_TYPE_UNSIGNED_BYTE_RGBA           0x00000004

#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT                                 0x00000d1c
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_STRIDE                                31:8
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE                                   7:4
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_0                          0x00000000
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_1                          0x00000001
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_2                          0x00000002
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_3                          0x00000003
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_SIZE_4                          0x00000004
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE                                   3:0
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_SHORT                      0x00000001
#define NV1196_SET_TEX_COORD0_ARRAY_FORMAT_TYPE_FLOAT                      0x00000002

#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT                                 0x00000d24
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_STRIDE                                31:8
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE                                   7:4
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_0                          0x00000000
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_1                          0x00000001
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_2                          0x00000002
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_3                          0x00000003
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_SIZE_4                          0x00000004
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE                                   3:0
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_SHORT                      0x00000001
#define NV1196_SET_TEX_COORD1_ARRAY_FORMAT_TYPE_FLOAT                      0x00000002

#define NV1196_SET_NORMAL_ARRAY_FORMAT                                     0x00000d2c
#define NV1196_SET_NORMAL_ARRAY_FORMAT_STRIDE                                    31:8
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV1196_SET_NORMAL_ARRAY_FORMAT_SIZE_3                              0x00000003
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_NORMAL_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_WEIGHT_ARRAY_FORMAT                                     0x00000d34
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_STRIDE                                    31:8
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE                                       7:4
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE_0                              0x00000000
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_SIZE_1                              0x00000001
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE                                       3:0
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE_SHORT                          0x00000001
#define NV1196_SET_WEIGHT_ARRAY_FORMAT_TYPE_FLOAT                          0x00000002

#define NV1196_SET_FOG_ARRAY_FORMAT                                        0x00000d3c
#define NV1196_SET_FOG_ARRAY_FORMAT_STRIDE                                       31:8
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE                                          7:4
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE_0                                 0x00000000
#define NV1196_SET_FOG_ARRAY_FORMAT_SIZE_1                                 0x00000001
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE                                          3:0
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE_SHORT                             0x00000001
#define NV1196_SET_FOG_ARRAY_FORMAT_TYPE_FLOAT                             0x00000002

#define NV1196_SET_LOGIC_OP_ENABLE                                         0x00000d40
#define NV1196_SET_LOGIC_OP_ENABLE_V                                             31:0
#define NV1196_SET_LOGIC_OP_ENABLE_V_FALSE                                 0x00000000
#define NV1196_SET_LOGIC_OP_ENABLE_V_TRUE                                  0x00000001

#define NV1196_SET_LOGIC_OP                                                0x00000d44
#define NV1196_SET_LOGIC_OP_V                                                    31:0
#define NV1196_SET_LOGIC_OP_V_CLEAR                                        0x00001500
#define NV1196_SET_LOGIC_OP_V_AND                                          0x00001501
#define NV1196_SET_LOGIC_OP_V_AND_REVERSE                                  0x00001502
#define NV1196_SET_LOGIC_OP_V_COPY                                         0x00001503
#define NV1196_SET_LOGIC_OP_V_AND_INVERTED                                 0x00001504
#define NV1196_SET_LOGIC_OP_V_NOOP                                         0x00001505
#define NV1196_SET_LOGIC_OP_V_XOR                                          0x00001506
#define NV1196_SET_LOGIC_OP_V_OR                                           0x00001507
#define NV1196_SET_LOGIC_OP_V_NOR                                          0x00001508
#define NV1196_SET_LOGIC_OP_V_EQUIV                                        0x00001509
#define NV1196_SET_LOGIC_OP_V_INVERT                                       0x0000150A
#define NV1196_SET_LOGIC_OP_V_OR_REVERSE                                   0x0000150B
#define NV1196_SET_LOGIC_OP_V_COPY_INVERTED                                0x0000150C
#define NV1196_SET_LOGIC_OP_V_OR_INVERTED                                  0x0000150D
#define NV1196_SET_LOGIC_OP_V_NAND                                         0x0000150E
#define NV1196_SET_LOGIC_OP_V_SET                                          0x0000150F

#define NV1196_SET_BEGIN_END                                               0x00000dfc
#define NV1196_SET_BEGIN_END_OP                                                  31:0
#define NV1196_SET_BEGIN_END_OP_END                                        0x00000000
#define NV1196_SET_BEGIN_END_OP_POINTS                                     0x00000001
#define NV1196_SET_BEGIN_END_OP_LINES                                      0x00000002
#define NV1196_SET_BEGIN_END_OP_LINE_LOOP                                  0x00000003
#define NV1196_SET_BEGIN_END_OP_LINE_STRIP                                 0x00000004
#define NV1196_SET_BEGIN_END_OP_TRIANGLES                                  0x00000005
#define NV1196_SET_BEGIN_END_OP_TRIANGLE_STRIP                             0x00000006
#define NV1196_SET_BEGIN_END_OP_TRIANGLE_FAN                               0x00000007
#define NV1196_SET_BEGIN_END_OP_QUADS                                      0x00000008
#define NV1196_SET_BEGIN_END_OP_QUAD_STRIP                                 0x00000009
#define NV1196_SET_BEGIN_END_OP_POLYGON                                    0x0000000A

#define NV1196_ARRAY_ELEMENT16(i)                                  (0x00000e00+(i)*4)
#define NV1196_ARRAY_ELEMENT16_VERTEX0                                           15:0
#define NV1196_ARRAY_ELEMENT16_VERTEX1                                          31:16

#define NV1196_SET_BEGIN_END2                                              0x000010fc
#define NV1196_SET_BEGIN_END2_OP                                                 31:0
#define NV1196_SET_BEGIN_END2_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END2_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END2_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END2_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END2_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END2_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END2_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END2_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END2_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END2_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END2_OP_POLYGON                                   0x0000000A

#define NV1196_ARRAY_ELEMENT32(i)                                  (0x00001100+(i)*4)
#define NV1196_ARRAY_ELEMENT32_V                                                 31:0

#define NV1196_SET_BEGIN_END3                                              0x000013fc
#define NV1196_SET_BEGIN_END3_OP                                                 31:0
#define NV1196_SET_BEGIN_END3_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END3_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END3_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END3_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END3_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END3_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END3_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END3_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END3_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END3_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END3_OP_POLYGON                                   0x0000000A

#define NV1196_DRAW_ARRAYS(i)                                      (0x00001400+(i)*4)
#define NV1196_DRAW_ARRAYS_COUNT                                                31:24
#define NV1196_DRAW_ARRAYS_START_INDEX                                           23:0

#define NV1196_SET_BEGIN_END4                                              0x000017fc
#define NV1196_SET_BEGIN_END4_OP                                                 31:0
#define NV1196_SET_BEGIN_END4_OP_END                                       0x00000000
#define NV1196_SET_BEGIN_END4_OP_POINTS                                    0x00000001
#define NV1196_SET_BEGIN_END4_OP_LINES                                     0x00000002
#define NV1196_SET_BEGIN_END4_OP_LINE_LOOP                                 0x00000003
#define NV1196_SET_BEGIN_END4_OP_LINE_STRIP                                0x00000004
#define NV1196_SET_BEGIN_END4_OP_TRIANGLES                                 0x00000005
#define NV1196_SET_BEGIN_END4_OP_TRIANGLE_STRIP                            0x00000006
#define NV1196_SET_BEGIN_END4_OP_TRIANGLE_FAN                              0x00000007
#define NV1196_SET_BEGIN_END4_OP_QUADS                                     0x00000008
#define NV1196_SET_BEGIN_END4_OP_QUAD_STRIP                                0x00000009
#define NV1196_SET_BEGIN_END4_OP_POLYGON                                   0x0000000A

#define NV1196_INLINE_ARRAY(i)                                     (0x00001800+(i)*4)
#define NV1196_INLINE_ARRAY_V                                                    31:0

#define NV1196_DEBUG_INIT(i)                                       (0x00001600+(i)*4)
#define NV1196_DEBUG_INIT_V                                                      31:0


// This typedef really should be the same as Nv20KelvinPrimitive, but this
// causes the NV03/NV04_CHANNEL_PIO union to become too large for the 16bit
// compiler. Since we don't expect to use a PIO channel with Celsius, we'll
// just use the old DWORD size typedef.

typedef NvV32 Nv097Typedef;

/* class NV20_KELVIN_PRIMITIVE */
/* NvNotification[] elements */
#define NV097_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV097_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV097_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV097_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV097_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV097_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV097_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
typedef volatile struct {
    // system method
    NvV32 ctx_Switch;
    NvV32 Reserved0004[0xfc/4];
    NvV32 NoOperation;
    NvV32 Notify;
    NvV32 SetWarningEnable;
    NvV32 GetState;
    NvV32 WaitForIdle;
    NvV32 Reserved0114[0xc/4];
    NvU32 SetFlipRead;
    NvU32 SetFlipWrite;
    NvU32 SetFlipModulo;
    NvV32 FlipIncrementWrite;
    NvV32 FlipStall;
    NvV32 Reserved0134[0xc/4];
    NvV32 PmTrigger;
    NvV32 Reserved0144[0x3c/4];
    NvU32 SetContextDmaNotifies;
    NvU32 SetContextDmaA;
    NvU32 SetContextDmaB;
    NvV32 Reserved018c[0x4/4];
    NvU32 SetContextDmaState;
    NvU32 SetContextDmaColor;
    NvU32 SetContextDmaZeta;
    NvU32 SetContextDmaVertexA;
    NvU32 SetContextDmaVertexB;
    NvU32 SetContextDmaSemaphore;
    NvU32 SetContextDmaReport;
    NvV32 Reserved01ac[0x54/4];
    NvV32 SetSurfaceClipHorizontal;
    NvV32 SetSurfaceClipVertical;
    NvV32 SetSurfaceFormat;
    NvV32 SetSurfacePitch;
    NvU32 SetSurfaceColorOffset;
    NvU32 SetSurfaceZetaOffset;
    NvV32 Reserved0218[0x48/4];
    NvV32 SetCombinerAlphaICW[8];
    NvV32 Reserved0280[0x8/4];
    NvV32 SetCombinerSpecularFogCW0;
    NvV32 SetCombinerSpecularFogCW1;
    NvV32 SetControl0;
    NvV32 SetLightControl;
    NvV32 SetColorMaterial;
    NvV32 SetFogMode;
    NvV32 SetFogGenMode;
    NvV32 SetFogEnable;
    NvV32 SetFogColor;
    NvV32 Reserved02ac[0x8/4];
    NvV32 SetWindowClipType;
    NvV32 Reserved02b8[0x8/4];
    NvV32 SetWindowClipHorizontal[8];
    NvV32 SetWindowClipVertical[8];
    NvV32 SetAlphaTestEnable;
    NvV32 SetBlendEnable;
    NvV32 SetCullFaceEnable;
    NvV32 SetDepthTestEnable;
    NvV32 SetDitherEnable;
    NvV32 SetLightingEnable;
    NvV32 SetPointParamsEnable;
    NvV32 SetPointSmoothEnable;
    NvV32 SetLineSmoothEnable;
    NvV32 SetPolySmoothEnable;
    NvV32 SetSkinMode;
    NvV32 SetStencilTestEnable;
    NvV32 SetPolyOffsetPointEnable;
    NvV32 SetPolyOffsetLineEnable;
    NvV32 SetPolyOffsetFillEnable;
    NvV32 SetAlphaFunc;
    NvU32 SetAlphaRef;
    NvV32 SetBlendFuncSfactor;
    NvV32 SetBlendFuncDfactor;
    NvU32 SetBlendColor;
    NvV32 SetBlendEquation;
    NvV32 SetDepthFunc;
    NvV32 SetColorMask;
    NvV32 SetDepthMask;
    NvU32 SetStencilMask;
    NvV32 SetStencilFunc;
    NvU32 SetStencilFuncRef;
    NvU32 SetStencilFuncMask;
    NvV32 SetStencilOpFail;
    NvV32 SetStencilOpZfail;
    NvV32 SetStencilOpZpass;
    NvV32 SetShadeMode;
    NvU32 SetLineWidth;
    NvF32 SetPolygonOffsetScaleFactor;
    NvF32 SetPolygonOffsetBias;
    NvV32 SetFrontPolygonMode;
    NvV32 SetBackPolygonMode;
    NvF32 SetClipMin;
    NvF32 SetClipMax;
    NvV32 SetCullFace;
    NvV32 SetFrontFace;
    NvV32 SetNormalizationEnable;
    NvF32 SetMaterialEmission[3];
    NvF32 SetMaterialAlpha;
    NvV32 SetSpecularEnable;
    NvV32 SetLightEnableMask;
    struct {
    NvV32 S;
    NvV32 T;
    NvV32 R;
    NvV32 Q;
    } SetTexgen[4];
    NvV32 Reserved0400[0x20/4];
    NvV32 SetTextureMatrixEnable[4];
    NvV32 Reserved0430[0xc/4];
    NvU32 SetPointSize;
    NvF32 SetProjectionMatrix[16];
    NvF32 SetModelViewMatrix0[16];
    NvF32 SetModelViewMatrix1[16];
    NvF32 SetModelViewMatrix2[16];
    NvF32 SetModelViewMatrix3[16];
    NvF32 SetInverseModelViewMatrix0[16];
    NvF32 SetInverseModelViewMatrix1[16];
    NvF32 SetInverseModelViewMatrix2[16];
    NvF32 SetInverseModelViewMatrix3[16];
    NvF32 SetCompositeMatrix[16];
    NvF32 SetTextureMatrix0[16];
    NvF32 SetTextureMatrix1[16];
    NvF32 SetTextureMatrix2[16];
    NvF32 SetTextureMatrix3[16];
    NvV32 Reserved07c0[0x80/4];
    struct {
    NvF32 S[4];
    NvF32 T[4];
    NvF32 R[4];
    NvF32 Q[4];
    } SetTexgenPlane[4];
    NvV32 Reserved0940[0x80/4];
    NvF32 SetFogParams[3];
    NvV32 SetTexgenViewModel;
    NvF32 SetFogPlane[4];
    NvF32 SetSpecularParams[6];
    NvV32 SetSwathWidth;
    NvV32 SetFlatShadeOp;
    NvV32 Reserved0a00[0x10/4];
    NvF32 SetSceneAmbientColor[3];
    NvV32 Reserved0a1c[0x4/4];
    NvF32 SetViewportOffset[4];
    NvF32 SetPointParams[8];
    NvF32 SetEyePosition[4];
    NvV32 SetCombinerFactor0[8];
    NvV32 SetCombinerFactor1[8];
    NvV32 SetCombinerAlphaOCW[8];
    NvV32 SetCombinerColorICW[8];
    NvU32 SetColorKeyColor[4];
    NvF32 SetViewportScale[4];
    NvU32 SetTransformProgram[32];
    NvF32 SetTransformConstant[32];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvV32 Reserved0c24[0x1c/4];
    } SetBackLight[8];
    NvV32 Reserved0e00[0x200/4];
    struct {
    NvF32 AmbientColor[3];
    NvF32 DiffuseColor[3];
    NvF32 SpecularColor[3];
    NvF32 LocalRange;
    NvF32 InfiniteHalfVector[3];
    NvF32 InfiniteDirection[3];
    NvF32 SpotFalloff[3];
    NvF32 SpotDirection[4];
    NvF32 LocalPosition[3];
    NvF32 LocalAttenuation[3];
    NvV32 Reserved1074[0xc/4];
    } SetLight[8];
    NvV32 Reserved1400[0x7c/4];
    NvV32 SetStippleControl;
    NvU32 SetStipplePattern[32];
    NvF32 SetVertex3f[3];
    NvV32 Reserved150c[0xc/4];
    NvF32 SetVertex4f[4];
    NvS32 SetVertex4s[2];
    NvF32 SetNormal3f[3];
    NvV32 Reserved153c[0x4/4];
    NvS32 SetNormal3s[2];
    NvV32 Reserved1548[0x8/4];
    NvF32 SetDiffuseColor4f[4];
    NvF32 SetDiffuseColor3f[3];
    NvU32 SetDiffuseColor4ub;
    NvF32 SetSpecularColor4f[4];
    NvF32 SetSpecularColor3f[3];
    NvU32 SetSpecularColor4ub;
    NvF32 SetTexcoord0_2f[2];
    NvS32 SetTexcoord0_2s;
    NvV32 Reserved159c[0x4/4];
    NvF32 SetTexcoord0_4f[4];
    NvS32 SetTexcoord0_4s[2];
    NvF32 SetTexcoord1_2f[2];
    NvS32 SetTexcoord1_2s;
    NvV32 Reserved15c4[0x4/4];
    NvF32 SetTexcoord1_4f[4];
    NvS32 SetTexcoord1_4s[2];
    NvF32 SetTexcoord2_2f[2];
    NvS32 SetTexcoord2_2s;
    NvV32 Reserved15ec[0x4/4];
    NvF32 SetTexcoord2_4f[4];
    NvS32 SetTexcoord2_4s[2];
    NvF32 SetTexcoord3_2f[2];
    NvS32 SetTexcoord3_2s;
    NvV32 Reserved1614[0xc/4];
    NvF32 SetTexcoord3_4f[4];
    NvS32 SetTexcoord3_4s[2];
    NvV32 Reserved1638[0x60/4];
    NvF32 SetFog1f;
    NvF32 SetWeight1f;
    NvF32 SetWeight2f[2];
    NvV32 Reserved16a8[0x8/4];
    NvF32 SetWeight3f[3];
    NvV32 SetEdgeFlag;
    NvF32 SetWeight4f[4];
    NvF32 SetTransformFixedConst3[4];
    NvF32 SetTransformFixedConst0[4];
    NvF32 SetTransformFixedConst1[4];
    NvF32 SetTransformFixedConst2[4];
    NvV32 InvalidateVertexCacheFile;
    NvV32 InvalidateVertexFile;
    NvV32 TlNop;
    NvV32 TlSync;
    NvV32 SetVertexDataArrayOffset[16];
    NvV32 SetVertexDataArrayFormat[16];
    NvF32 SetBackSceneAmbientColor[3];
    NvF32 SetBackMaterialAlpha;
    NvF32 SetBackMaterialEmission[3];
    NvV32 SetLogicOpEnable;
    NvV32 SetLogicOp;
    NvV32 SetTwoSideLightEn;
    NvV32 ClearReportValue;
    NvV32 SetZpassPixelCountEnable;
    NvV32 GetReport;
    NvF32 SetTLConstZero[3];
    NvF32 SetEyeDirection[3];
    NvF32 SetLinearFogConst[3];
    NvV32 SetShaderClipPlaneMode;
    NvV32 SetBeginEnd;
    NvV32 ArrayElement16;
    NvV32 Reserved1804[0x4/4];
    NvU32 ArrayElement32;
    NvV32 Reserved180c[0x4/4];
    NvV32 DrawArrays;
    NvV32 Reserved1814[0x4/4];
    NvU32 InlineArray;
    NvF32 SetEyeVector[3];
    NvU32 InlineVertexReuse;
    NvV32 Reserved182c[0x54/4];
    struct {
    NvF32 M[2];
    } SetVertexData2f[16];
    NvS32 SetVertexData2s[16];
    NvS32 SetVertexData4ub[16];
    struct {
    NvS32 M[2];
    } SetVertexData4s[16];
    struct {
    NvF32 M[4];
    } SetVertexData4f[16];
    struct {
    NvU32 Offset;
    NvV32 Format;
    NvV32 Address;
    NvV32 Control0;
    NvV32 Control1;
    NvV32 Filter;
    NvV32 Reserved1b18[0x4/4];
    NvV32 ImageRect;
    NvV32 Palette;
    NvU32 BorderColor;
    NvF32 SetBumpEnvMat00;
    NvF32 SetBumpEnvMat01;
    NvF32 SetBumpEnvMat11;
    NvF32 SetBumpEnvMat10;
    NvF32 SetBumpEnvScale;
    NvF32 SetBumpEnvOffset;
    } SetTexture[4];
    NvV32 Reserved1c00[0x164/4];
    NvV32 ParkAttribute;
    NvV32 UnparkAttribute;
    NvU32 SetSemaphoreOffset;
    NvU32 BackEndWriteSemaphoreRelease;
    NvU32 TextureReadSemaphoreRelease;
    NvV32 SetZMinMaxControl;
    NvV32 SetAntiAliasingControl;
    NvV32 SetCompressZBufferEn;
    NvV32 SetOccludeZStencilEn;
    NvV32 Reserved1d88[0x4/4];
    NvU32 SetZStencilClearValue;
    NvU32 SetColorClearValue;
    NvV32 ClearSurface;
    NvV32 SetClearRectHorizontal;
    NvV32 SetClearRectVertical;
    NvV32 Reserved1da0[0x40/4];
    NvV32 SetBeginPatch0;
    NvV32 SetBeginPatch1;
    NvV32 SetBeginPatch2;
    NvV32 SetBeginPatch3;
    NvV32 SetEndPatch;
    NvV32 SetBeginEndSwatch;
    NvV32 SetBeginEndCurve;
    NvV32 Reserved1dfc[0x4/4];
    NvF32 SetCurveCoefficients[4];
    NvV32 SetBeginTransition0;
    NvV32 SetBeginTransition1;
    NvV32 SetBeginTransition2;
    NvV32 SetEndTransition;
    NvV32 SetSpecularFogFactor[2];
    NvF32 SetBackSpecularParams[6];
    NvV32 SetCombinerColorOCW[8];
    NvV32 SetCombinerControl;
    NvV32 Reserved1e64[0x4/4];
    NvF32 SetShadowZSlopeThreshold;
    NvV32 SetShadowDepthFunc;
    NvV32 SetShaderStageProgram;
    NvV32 SetDotRGBMapping;
    NvV32 SetShaderOtherStageInput;
    NvV32 Reserved1e7c[0x4/4];
    NvF32 SetTransformData[4];
    NvU32 LaunchTransformProgram;
    NvV32 SetTransformExecutionMode;
    NvV32 SetTransformProgramCxtWriteEn;
    NvU32 SetTransformProgramLoad;
    NvU32 SetTransformProgramStart;
    NvU32 SetTransformConstantLoad;
    NvV32 Reserved1ea8[0x118/4];
    NvV32 DebugInit[10];
    NvV32 Reserved1fe8[0x18/4];
} Nv20KelvinPrimitive;

#define NV097_NO_OPERATION                                                  0x00000100

#define NV097_NOTIFY                                                        0x00000104
#define NV097_NOTIFY_TYPE                                                         31:0
#define NV097_NOTIFY_TYPE_WRITE_ONLY                                        0x00000000
#define NV097_NOTIFY_TYPE_WRITE_THEN_AWAKEN                                 0x00000001

#define NV097_SET_WARNING_ENABLE                                            0x00000108
#define NV097_SET_WARNING_ENABLE_V                                                31:0
#define NV097_SET_WARNING_ENABLE_V_STOP                                     0x00000000
#define NV097_SET_WARNING_ENABLE_V_WRITE_ONLY                               0x00000001
#define NV097_SET_WARNING_ENABLE_V_WRITE_THEN_AWAKEN                        0x00000002

#define NV097_GET_STATE                                                     0x0000010c
#define NV097_GET_STATE_GETSTATE                                                  31:0
#define NV097_GET_STATE_GETSTATE_ALL_STATE                                  0x00000001
#define NV097_GET_STATE_GETSTATE_PUT_ALL_STATE                              0x00000002

#define NV097_WAIT_FOR_IDLE                                                 0x00000110

#define NV097_PM_TRIGGER                                                    0x00000140
#define NV097_PM_TRIGGER_V                                                        31:0
#define NV097_PM_TRIGGER_V_NOP                                              0x00000000
#define NV097_PM_TRIGGER_V_TRIGGER                                          0x00000001

#define NV097_SET_FLIP_READ                                                 0x00000120
#define NV097_SET_FLIP_READ_V                                                     31:0

#define NV097_SET_FLIP_WRITE                                                0x00000124
#define NV097_SET_FLIP_WRITE_V                                                    31:0

#define NV097_SET_FLIP_MODULO                                               0x00000128
#define NV097_SET_FLIP_MODULO_V                                                   31:0

#define NV097_FLIP_INCREMENT_WRITE                                          0x0000012c

#define NV097_FLIP_STALL                                                    0x00000130

#define NV097_SET_CONTEXT_DMA_NOTIFIES                                      0x00000180
#define NV097_SET_CONTEXT_DMA_NOTIFIES_V                                          31:0

#define NV097_SET_CONTEXT_DMA_A                                             0x00000184
#define NV097_SET_CONTEXT_DMA_A_V                                                 31:0

#define NV097_SET_CONTEXT_DMA_B                                             0x00000188
#define NV097_SET_CONTEXT_DMA_B_V                                                 31:0

#define NV097_SET_CONTEXT_DMA_STATE                                         0x00000190
#define NV097_SET_CONTEXT_DMA_STATE_V                                             31:0

#define NV097_SET_CONTEXT_DMA_COLOR                                         0x00000194
#define NV097_SET_CONTEXT_DMA_COLOR_V                                             31:0

#define NV097_SET_CONTEXT_DMA_ZETA                                          0x00000198
#define NV097_SET_CONTEXT_DMA_ZETA_V                                              31:0

#define NV097_SET_CONTEXT_DMA_VERTEX_A                                      0x0000019c
#define NV097_SET_CONTEXT_DMA_VERTEX_A_V                                          31:0

#define NV097_SET_CONTEXT_DMA_VERTEX_B                                      0x000001a0
#define NV097_SET_CONTEXT_DMA_VERTEX_B_V                                          31:0

#define NV097_SET_CONTEXT_DMA_SEMAPHORE                                     0x000001a4
#define NV097_SET_CONTEXT_DMA_SEMAPHORE_V                                         31:0

#define NV097_SET_CONTEXT_DMA_REPORT                                        0x000001a8
#define NV097_SET_CONTEXT_DMA_REPORT_V                                            31:0

#define NV097_SET_SURFACE_CLIP_HORIZONTAL                                   0x00000200
#define NV097_SET_SURFACE_CLIP_HORIZONTAL_X                                       15:0
#define NV097_SET_SURFACE_CLIP_HORIZONTAL_WIDTH                                  31:16

#define NV097_SET_SURFACE_CLIP_VERTICAL                                     0x00000204
#define NV097_SET_SURFACE_CLIP_VERTICAL_Y                                         15:0
#define NV097_SET_SURFACE_CLIP_VERTICAL_HEIGHT                                   31:16

#define NV097_SET_SURFACE_PITCH                                             0x0000020c
#define NV097_SET_SURFACE_PITCH_COLOR                                             15:0
#define NV097_SET_SURFACE_PITCH_ZETA                                             31:16

#define NV097_SET_SURFACE_COLOR_OFFSET                                      0x00000210
#define NV097_SET_SURFACE_COLOR_OFFSET_V                                          31:0

#define NV097_SET_SURFACE_ZETA_OFFSET                                       0x00000214
#define NV097_SET_SURFACE_ZETA_OFFSET_V                                           31:0

#define NV097_SET_COMBINER_ALPHA_ICW(i)                             (0x00000260+(i)*4)
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP                                       31:29
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_A_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA                                     28:28
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE                                    27:24
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP                                       23:21
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_B_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA                                     20:20
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE                                    19:16
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP                                       15:13
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_C_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA                                     12:12
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE                                     11:8
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP                                         7:5
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_ALPHA_ICW_D_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA                                       4:4
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE                                      3:0
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D                         0x0000000D

#define NV097_SET_COMBINER_COLOR_ICW(i)                             (0x00000ac0+(i)*4)
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP                                       31:29
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_A_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA                                     28:28
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE                                    27:24
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP                                       23:21
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_B_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA                                     20:20
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE                                    19:16
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP                                       15:13
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_C_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA                                     12:12
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE                                     11:8
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D                         0x0000000D
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP                                         7:5
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_IDENTITY                0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_UNSIGNED_INVERT                  0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NORMAL                    0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_EXPAND_NEGATE                    0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NORMAL                  0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_HALFBIAS_NEGATE                  0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_IDENTITY                  0x00000006
#define NV097_SET_COMBINER_COLOR_ICW_D_MAP_SIGNED_NEGATE                    0x00000007
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA                                       4:4
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA_FALSE                          0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_ALPHA_TRUE                           0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE                                      3:0
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0                         0x00000000
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1                         0x00000001
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2                         0x00000002
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3                         0x00000003
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4                         0x00000004
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5                         0x00000005
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8                         0x00000008
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9                         0x00000009
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_A                         0x0000000A
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_B                         0x0000000B
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C                         0x0000000C
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D                         0x0000000D

#define NV097_SET_COMBINER_FACTOR0(i)                               (0x00000a60+(i)*4)
#define NV097_SET_COMBINER_FACTOR0_BLUE                                            7:0
#define NV097_SET_COMBINER_FACTOR0_GREEN                                          15:8
#define NV097_SET_COMBINER_FACTOR0_RED                                           23:16
#define NV097_SET_COMBINER_FACTOR0_ALPHA                                         31:24

#define NV097_SET_COMBINER_FACTOR1(i)                               (0x00000a80+(i)*4)
#define NV097_SET_COMBINER_FACTOR1_BLUE                                            7:0
#define NV097_SET_COMBINER_FACTOR1_GREEN                                          15:8
#define NV097_SET_COMBINER_FACTOR1_RED                                           23:16
#define NV097_SET_COMBINER_FACTOR1_ALPHA                                         31:24

#define NV097_SET_COMBINER_ALPHA_OCW(i)                             (0x00000aa0+(i)*4)
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION                                   31:15
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT                      0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_NOSHIFT_BIAS                 0x00000001
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1                 0x00000002
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY1_BIAS            0x00000003
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTLEFTBY2                 0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_OPERATION_SHIFTRIGHTBY1                0x00000006
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE                                  14:14
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_FALSE                       0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_MUX_ENABLE_TRUE                        0x00000001
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST                                      11:8
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0                          0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4                          0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5                          0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8                          0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9                          0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_A                          0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_B                          0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C                          0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D                          0x0000000D
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST                                        7:4
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D                           0x0000000D
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST                                        3:0
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D                           0x0000000D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0                                 0x00000288
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE                            31:29
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA                              28:28
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE                             27:24
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE                            23:21
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA                              20:20
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE                             19:16
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE                            15:13
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA                              12:12
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE                              11:8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_EF_PROD            0x0000000F
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE                              7:5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA                                4:4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE                               3:0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECLIT            0x0000000E
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_EF_PROD            0x0000000F

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1                                 0x0000028c
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE                            31:29
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA                              28:28
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE                             27:24
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE                            23:21
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA                              20:20
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE                             19:16
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE                            15:13
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_FALSE                 0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_INVERSE_TRUE                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA                              12:12
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_FALSE                   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_ALPHA_TRUE                    0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE                              11:8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0                  0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1                  0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2                  0x00000002
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3                  0x00000003
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4                  0x00000004
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5                  0x00000005
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8                  0x00000008
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9                  0x00000009
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_A                  0x0000000A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_B                  0x0000000B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C                  0x0000000C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D                  0x0000000D
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP                         7:7
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_FALSE            0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_CLAMP_TRUE             0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5                 6:6
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_FALSE    0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R5_TRUE     0x00000001
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12                5:0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_FALSE   0x00000000
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_SPECULAR_ADD_INVERT_R12_TRUE    0x00000020

#define NV097_SET_CONTROL0                                                  0x00000290
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT                                   31:28
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_PASS                         0x00000000
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_CRYCB_TO_RGB                 0x00000001
#define NV097_SET_CONTROL0_COLOR_SPACE_CONVERT_SCRYSCB_TO_RGB               0x00000002
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA                                    27:24
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA_FALSE                         0x00000000
#define NV097_SET_CONTROL0_PREMULTIPLIEDALPHA_TRUE                          0x00000001
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE                                    23:20
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE_FALSE                         0x00000000
#define NV097_SET_CONTROL0_TEXTUREPERSPECTIVE_TRUE                          0x00000001
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE                                  19:16
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_FALSE                       0x00000000
#define NV097_SET_CONTROL0_Z_PERSPECTIVE_ENABLE_TRUE                        0x00000001
#define NV097_SET_CONTROL0_Z_FORMAT                                              15:12
#define NV097_SET_CONTROL0_Z_FORMAT_FIXED                                   0x00000000
#define NV097_SET_CONTROL0_Z_FORMAT_FLOAT                                   0x00000001
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE                                    7:0
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_CONTROL0_STENCIL_WRITE_ENABLE_TRUE                        0x00000001

#define NV097_SET_LIGHT_CONTROL                                             0x00000294
#define NV097_SET_LIGHT_CONTROL_LOCALEYE                                         16:16
#define NV097_SET_LIGHT_CONTROL_LOCALEYE_FALSE                              0x00000000
#define NV097_SET_LIGHT_CONTROL_LOCALEYE_TRUE                               0x00000001
#define NV097_SET_LIGHT_CONTROL_SOUT                                             31:17
#define NV097_SET_LIGHT_CONTROL_SOUT_ZERO_OUT                               0x00000000
#define NV097_SET_LIGHT_CONTROL_SOUT_PASSTHROUGH                            0x00000001
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN                               1:0
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_FALSE                  0x00000000
#define NV097_SET_LIGHT_CONTROL_SEPARATE_SPECULAR_EN_TRUE                   0x00000001

#define NV097_SET_COLOR_MATERIAL                                            0x00000298
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL                                 1:0
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_DISABLE                  0x00000000
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_DIFFUSE_VTX_COLOR        0x00000001
#define NV097_SET_COLOR_MATERIAL_EMISSIVE_MATERIAL_SPECULAR_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL                                  3:2
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_DISABLE                   0x00000000
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_DIFFUSE_VTX_COLOR         0x00000001
#define NV097_SET_COLOR_MATERIAL_AMBIENT_MATERIAL_SPECULAR_VTX_COLOR        0x00000002
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL                                     5:4
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_DISABLE                      0x00000000
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_DIFFUSE_VTX_COLOR            0x00000001
#define NV097_SET_COLOR_MATERIAL_DIFF_MATERIAL_SPECULAR_VTX_COLOR           0x00000002
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL                                 7:6
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_DISABLE                  0x00000000
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_DIFFUSE_VTX_COLOR        0x00000001
#define NV097_SET_COLOR_MATERIAL_SPECULAR_MATERIAL_SPECULAR_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL                            9:8
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_DISABLE             0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_DIFF_VTX_COLOR      0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_EMISSIVE_MATERIAL_SPEC_VTX_COLOR      0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL                           11:10
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_DISABLE              0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_DIFF_VTX_COLOR       0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_AMBIENT_MATERIAL_SPEC_VTX_COLOR       0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL                              13:12
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_DISABLE                 0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_DIFF_VTX_COLOR          0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_DIFF_MATERIAL_SPEC_VTX_COLOR          0x00000002
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL                          15:14
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_DISABLE             0x00000000
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_DIFF_VTX_COLOR      0x00000001
#define NV097_SET_COLOR_MATERIAL_BACK_SPECULAR_MATERIAL_SPEC_VTX_COLOR      0x00000002

#define NV097_SET_FOG_MODE                                                  0x0000029c
#define NV097_SET_FOG_MODE_V                                                      31:0
#define NV097_SET_FOG_MODE_V_LINEAR                                         0x00002601
#define NV097_SET_FOG_MODE_V_EXP                                            0x00000800
#define NV097_SET_FOG_MODE_V_EXP2                                           0x00000801
#define NV097_SET_FOG_MODE_V_EXP_ABS                                        0x00000802
#define NV097_SET_FOG_MODE_V_EXP2_ABS                                       0x00000803
#define NV097_SET_FOG_MODE_V_LINEAR_ABS                                     0x00000804

#define NV097_SET_FOG_GEN_MODE                                              0x000002a0
#define NV097_SET_FOG_GEN_MODE_V                                                  31:0
#define NV097_SET_FOG_GEN_MODE_V_SPEC_ALPHA                                 0x00000000
#define NV097_SET_FOG_GEN_MODE_V_RADIAL                                     0x00000001
#define NV097_SET_FOG_GEN_MODE_V_PLANAR                                     0x00000002
#define NV097_SET_FOG_GEN_MODE_V_ABS_PLANAR                                 0x00000003
#define NV097_SET_FOG_GEN_MODE_V_FOG_X                                      0x00000006

#define NV097_SET_FOG_ENABLE                                                0x000002a4
#define NV097_SET_FOG_ENABLE_V                                                    31:0
#define NV097_SET_FOG_ENABLE_V_FALSE                                        0x00000000
#define NV097_SET_FOG_ENABLE_V_TRUE                                         0x00000001

#define NV097_SET_FOG_COLOR                                                 0x000002a8
#define NV097_SET_FOG_COLOR_RED                                                    7:0
#define NV097_SET_FOG_COLOR_GREEN                                                 15:8
#define NV097_SET_FOG_COLOR_BLUE                                                 23:16
#define NV097_SET_FOG_COLOR_ALPHA                                                31:24

#define NV097_SET_COLOR_KEY_COLOR(i)                                (0x00000ae0+(i)*4)
#define NV097_SET_COLOR_KEY_COLOR_V                                               31:0

#define NV097_SET_WINDOW_CLIP_TYPE                                          0x000002b4
#define NV097_SET_WINDOW_CLIP_TYPE_V                                              31:0
#define NV097_SET_WINDOW_CLIP_TYPE_V_INCLUSIVE                              0x00000000
#define NV097_SET_WINDOW_CLIP_TYPE_V_EXCLUSIVE                              0x00000001

#define NV097_SET_WINDOW_CLIP_HORIZONTAL(i)                         (0x000002c0+(i)*4)
#define NV097_SET_WINDOW_CLIP_HORIZONTAL_XMIN                                     11:0
#define NV097_SET_WINDOW_CLIP_HORIZONTAL_XMAX                                    27:16

#define NV097_SET_WINDOW_CLIP_VERTICAL(i)                           (0x000002e0+(i)*4)
#define NV097_SET_WINDOW_CLIP_VERTICAL_YMIN                                       11:0
#define NV097_SET_WINDOW_CLIP_VERTICAL_YMAX                                      27:16

#define NV097_SET_ALPHA_TEST_ENABLE                                         0x00000300
#define NV097_SET_ALPHA_TEST_ENABLE_V                                             31:0
#define NV097_SET_ALPHA_TEST_ENABLE_V_FALSE                                 0x00000000
#define NV097_SET_ALPHA_TEST_ENABLE_V_TRUE                                  0x00000001

#define NV097_SET_BLEND_ENABLE                                              0x00000304
#define NV097_SET_BLEND_ENABLE_V                                                  31:0
#define NV097_SET_BLEND_ENABLE_V_FALSE                                      0x00000000
#define NV097_SET_BLEND_ENABLE_V_TRUE                                       0x00000001

#define NV097_SET_CULL_FACE_ENABLE                                          0x00000308
#define NV097_SET_CULL_FACE_ENABLE_V                                              31:0
#define NV097_SET_CULL_FACE_ENABLE_V_FALSE                                  0x00000000
#define NV097_SET_CULL_FACE_ENABLE_V_TRUE                                   0x00000001

#define NV097_SET_DEPTH_TEST_ENABLE                                         0x0000030c
#define NV097_SET_DEPTH_TEST_ENABLE_V                                             31:0
#define NV097_SET_DEPTH_TEST_ENABLE_V_FALSE                                 0x00000000
#define NV097_SET_DEPTH_TEST_ENABLE_V_TRUE                                  0x00000001

#define NV097_SET_DITHER_ENABLE                                             0x00000310
#define NV097_SET_DITHER_ENABLE_V                                                 31:0
#define NV097_SET_DITHER_ENABLE_V_FALSE                                     0x00000000
#define NV097_SET_DITHER_ENABLE_V_TRUE                                      0x00000001

#define NV097_SET_LIGHTING_ENABLE                                           0x00000314
#define NV097_SET_LIGHTING_ENABLE_V                                               31:0
#define NV097_SET_LIGHTING_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_LIGHTING_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_POINT_PARAMS_ENABLE                                       0x00000318
#define NV097_SET_POINT_PARAMS_ENABLE_V                                           31:0
#define NV097_SET_POINT_PARAMS_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_POINT_PARAMS_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_POINT_SMOOTH_ENABLE                                       0x0000031c
#define NV097_SET_POINT_SMOOTH_ENABLE_V                                           31:0
#define NV097_SET_POINT_SMOOTH_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_POINT_SMOOTH_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_LINE_SMOOTH_ENABLE                                        0x00000320
#define NV097_SET_LINE_SMOOTH_ENABLE_V                                            31:0
#define NV097_SET_LINE_SMOOTH_ENABLE_V_FALSE                                0x00000000
#define NV097_SET_LINE_SMOOTH_ENABLE_V_TRUE                                 0x00000001

#define NV097_SET_POLY_SMOOTH_ENABLE                                        0x00000324
#define NV097_SET_POLY_SMOOTH_ENABLE_V                                            31:0
#define NV097_SET_POLY_SMOOTH_ENABLE_V_FALSE                                0x00000000
#define NV097_SET_POLY_SMOOTH_ENABLE_V_TRUE                                 0x00000001

#define NV097_SET_STIPPLE_CONTROL                                           0x0000147c
#define NV097_SET_STIPPLE_CONTROL_V                                               31:0
#define NV097_SET_STIPPLE_CONTROL_V_OFF                                     0x00000000
#define NV097_SET_STIPPLE_CONTROL_V_POLYGON                                 0x00000001

#define NV097_SET_STIPPLE_PATTERN(i)                                (0x00001480+(i)*4)
#define NV097_SET_STIPPLE_PATTERN_V                                               31:0

#define NV097_SET_SKIN_MODE                                                 0x00000328
#define NV097_SET_SKIN_MODE_V                                                     31:0
#define NV097_SET_SKIN_MODE_V_OFF                                           0x00000000
#define NV097_SET_SKIN_MODE_V_2G                                            0x00000001
#define NV097_SET_SKIN_MODE_V_2                                             0x00000002
#define NV097_SET_SKIN_MODE_V_3G                                            0x00000003
#define NV097_SET_SKIN_MODE_V_3                                             0x00000004
#define NV097_SET_SKIN_MODE_V_4G                                            0x00000005
#define NV097_SET_SKIN_MODE_V_4                                             0x00000006

#define NV097_SET_STENCIL_TEST_ENABLE                                       0x0000032c
#define NV097_SET_STENCIL_TEST_ENABLE_V                                           31:0
#define NV097_SET_STENCIL_TEST_ENABLE_V_FALSE                               0x00000000
#define NV097_SET_STENCIL_TEST_ENABLE_V_TRUE                                0x00000001

#define NV097_SET_POLY_OFFSET_POINT_ENABLE                                  0x00000330
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V                                      31:0
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V_FALSE                          0x00000000
#define NV097_SET_POLY_OFFSET_POINT_ENABLE_V_TRUE                           0x00000001

#define NV097_SET_POLY_OFFSET_LINE_ENABLE                                   0x00000334
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V                                       31:0
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V_FALSE                           0x00000000
#define NV097_SET_POLY_OFFSET_LINE_ENABLE_V_TRUE                            0x00000001

#define NV097_SET_POLY_OFFSET_FILL_ENABLE                                   0x00000338
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V                                       31:0
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V_FALSE                           0x00000000
#define NV097_SET_POLY_OFFSET_FILL_ENABLE_V_TRUE                            0x00000001

#define NV097_SET_ALPHA_FUNC                                                0x0000033c
#define NV097_SET_ALPHA_FUNC_V                                                    31:0
#define NV097_SET_ALPHA_FUNC_V_NEVER                                        0x00000200
#define NV097_SET_ALPHA_FUNC_V_LESS                                         0x00000201
#define NV097_SET_ALPHA_FUNC_V_EQUAL                                        0x00000202
#define NV097_SET_ALPHA_FUNC_V_LEQUAL                                       0x00000203
#define NV097_SET_ALPHA_FUNC_V_GREATER                                      0x00000204
#define NV097_SET_ALPHA_FUNC_V_NOTEQUAL                                     0x00000205
#define NV097_SET_ALPHA_FUNC_V_GEQUAL                                       0x00000206
#define NV097_SET_ALPHA_FUNC_V_ALWAYS                                       0x00000207

#define NV097_SET_ALPHA_REF                                                 0x00000340
#define NV097_SET_ALPHA_REF_V                                                     31:0

#define NV097_SET_BLEND_FUNC_SFACTOR                                        0x00000344
#define NV097_SET_BLEND_FUNC_SFACTOR_V                                            31:0
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ZERO                                 0x00000000
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE                                  0x00000001
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_COLOR                            0x00000300
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_COLOR                  0x00000301
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA                            0x00000302
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_SRC_ALPHA                  0x00000303
#define NV097_SET_BLEND_FUNC_SFACTOR_V_DST_ALPHA                            0x00000304
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_ALPHA                  0x00000305
#define NV097_SET_BLEND_FUNC_SFACTOR_V_DST_COLOR                            0x00000306
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_DST_COLOR                  0x00000307
#define NV097_SET_BLEND_FUNC_SFACTOR_V_SRC_ALPHA_SATURATE                   0x00000308
#define NV097_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_COLOR                       0x00008001
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_COLOR             0x00008002
#define NV097_SET_BLEND_FUNC_SFACTOR_V_CONSTANT_ALPHA                       0x00008003
#define NV097_SET_BLEND_FUNC_SFACTOR_V_ONE_MINUS_CONSTANT_ALPHA             0x00008004

#define NV097_SET_BLEND_FUNC_DFACTOR                                        0x00000348
#define NV097_SET_BLEND_FUNC_DFACTOR_V                                            31:0
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ZERO                                 0x00000000
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE                                  0x00000001
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_COLOR                            0x00000300
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_COLOR                  0x00000301
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA                            0x00000302
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_SRC_ALPHA                  0x00000303
#define NV097_SET_BLEND_FUNC_DFACTOR_V_DST_ALPHA                            0x00000304
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_ALPHA                  0x00000305
#define NV097_SET_BLEND_FUNC_DFACTOR_V_DST_COLOR                            0x00000306
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_DST_COLOR                  0x00000307
#define NV097_SET_BLEND_FUNC_DFACTOR_V_SRC_ALPHA_SATURATE                   0x00000308
#define NV097_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_COLOR                       0x00008001
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_COLOR             0x00008002
#define NV097_SET_BLEND_FUNC_DFACTOR_V_CONSTANT_ALPHA                       0x00008003
#define NV097_SET_BLEND_FUNC_DFACTOR_V_ONE_MINUS_CONSTANT_ALPHA             0x00008004

#define NV097_SET_BLEND_COLOR                                               0x0000034c
#define NV097_SET_BLEND_COLOR_V                                                   31:0

#define NV097_SET_BLEND_EQUATION                                            0x00000350
#define NV097_SET_BLEND_EQUATION_V                                                31:0
#define NV097_SET_BLEND_EQUATION_V_FUNC_SUBTRACT                            0x0000800A
#define NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT                    0x0000800B
#define NV097_SET_BLEND_EQUATION_V_FUNC_ADD                                 0x00008006
#define NV097_SET_BLEND_EQUATION_V_MIN                                      0x00008007
#define NV097_SET_BLEND_EQUATION_V_MAX                                      0x00008008
#define NV097_SET_BLEND_EQUATION_V_FUNC_REVERSE_SUBTRACT_SIGNED             0x0000F005
#define NV097_SET_BLEND_EQUATION_V_FUNC_ADD_SIGNED                          0x0000F006

#define NV097_SET_DEPTH_FUNC                                                0x00000354
#define NV097_SET_DEPTH_FUNC_V                                                    31:0
#define NV097_SET_DEPTH_FUNC_V_NEVER                                        0x00000200
#define NV097_SET_DEPTH_FUNC_V_LESS                                         0x00000201
#define NV097_SET_DEPTH_FUNC_V_EQUAL                                        0x00000202
#define NV097_SET_DEPTH_FUNC_V_LEQUAL                                       0x00000203
#define NV097_SET_DEPTH_FUNC_V_GREATER                                      0x00000204
#define NV097_SET_DEPTH_FUNC_V_NOTEQUAL                                     0x00000205
#define NV097_SET_DEPTH_FUNC_V_GEQUAL                                       0x00000206
#define NV097_SET_DEPTH_FUNC_V_ALWAYS                                       0x00000207

#define NV097_SET_COLOR_MASK                                                0x00000358
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE                                  31:24
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_COLOR_MASK_ALPHA_WRITE_ENABLE_TRUE                        0x00000001
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE                                    23:16
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE_FALSE                         0x00000000
#define NV097_SET_COLOR_MASK_RED_WRITE_ENABLE_TRUE                          0x00000001
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE                                   15:8
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE_FALSE                       0x00000000
#define NV097_SET_COLOR_MASK_GREEN_WRITE_ENABLE_TRUE                        0x00000001
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE                                     7:0
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE_FALSE                        0x00000000
#define NV097_SET_COLOR_MASK_BLUE_WRITE_ENABLE_TRUE                         0x00000001

#define NV097_SET_DEPTH_MASK                                                0x0000035c
#define NV097_SET_DEPTH_MASK_V                                                    31:0
#define NV097_SET_DEPTH_MASK_V_FALSE                                        0x00000000
#define NV097_SET_DEPTH_MASK_V_TRUE                                         0x00000001

#define NV097_SET_STENCIL_MASK                                              0x00000360
#define NV097_SET_STENCIL_MASK_V                                                  31:0

#define NV097_SET_STENCIL_FUNC                                              0x00000364
#define NV097_SET_STENCIL_FUNC_V                                                  31:0
#define NV097_SET_STENCIL_FUNC_V_NEVER                                      0x00000200
#define NV097_SET_STENCIL_FUNC_V_LESS                                       0x00000201
#define NV097_SET_STENCIL_FUNC_V_EQUAL                                      0x00000202
#define NV097_SET_STENCIL_FUNC_V_LEQUAL                                     0x00000203
#define NV097_SET_STENCIL_FUNC_V_GREATER                                    0x00000204
#define NV097_SET_STENCIL_FUNC_V_NOTEQUAL                                   0x00000205
#define NV097_SET_STENCIL_FUNC_V_GEQUAL                                     0x00000206
#define NV097_SET_STENCIL_FUNC_V_ALWAYS                                     0x00000207

#define NV097_SET_STENCIL_FUNC_REF                                          0x00000368
#define NV097_SET_STENCIL_FUNC_REF_V                                              31:0

#define NV097_SET_STENCIL_FUNC_MASK                                         0x0000036c
#define NV097_SET_STENCIL_FUNC_MASK_V                                             31:0

#define NV097_SET_STENCIL_OP_FAIL                                           0x00000370
#define NV097_SET_STENCIL_OP_FAIL_V                                               31:0
#define NV097_SET_STENCIL_OP_FAIL_V_KEEP                                    0x00001E00
#define NV097_SET_STENCIL_OP_FAIL_V_ZERO                                    0x00000000
#define NV097_SET_STENCIL_OP_FAIL_V_REPLACE                                 0x00001E01
#define NV097_SET_STENCIL_OP_FAIL_V_INCRSAT                                 0x00001E02
#define NV097_SET_STENCIL_OP_FAIL_V_DECRSAT                                 0x00001E03
#define NV097_SET_STENCIL_OP_FAIL_V_INVERT                                  0x0000150A
#define NV097_SET_STENCIL_OP_FAIL_V_INCR                                    0x00008507
#define NV097_SET_STENCIL_OP_FAIL_V_DECR                                    0x00008508

#define NV097_SET_STENCIL_OP_ZFAIL                                          0x00000374
#define NV097_SET_STENCIL_OP_ZFAIL_V                                              31:0
#define NV097_SET_STENCIL_OP_ZFAIL_V_KEEP                                   0x00001E00
#define NV097_SET_STENCIL_OP_ZFAIL_V_ZERO                                   0x00000000
#define NV097_SET_STENCIL_OP_ZFAIL_V_REPLACE                                0x00001E01
#define NV097_SET_STENCIL_OP_ZFAIL_V_INCRSAT                                0x00001E02
#define NV097_SET_STENCIL_OP_ZFAIL_V_DECRSAT                                0x00001E03
#define NV097_SET_STENCIL_OP_ZFAIL_V_INVERT                                 0x0000150A
#define NV097_SET_STENCIL_OP_ZFAIL_V_INCR                                   0x00008507
#define NV097_SET_STENCIL_OP_ZFAIL_V_DECR                                   0x00008508

#define NV097_SET_STENCIL_OP_ZPASS                                          0x00000378
#define NV097_SET_STENCIL_OP_ZPASS_V                                              31:0
#define NV097_SET_STENCIL_OP_ZPASS_V_KEEP                                   0x00001E00
#define NV097_SET_STENCIL_OP_ZPASS_V_ZERO                                   0x00000000
#define NV097_SET_STENCIL_OP_ZPASS_V_REPLACE                                0x00001E01
#define NV097_SET_STENCIL_OP_ZPASS_V_INCRSAT                                0x00001E02
#define NV097_SET_STENCIL_OP_ZPASS_V_DECRSAT                                0x00001E03
#define NV097_SET_STENCIL_OP_ZPASS_V_INVERT                                 0x0000150A
#define NV097_SET_STENCIL_OP_ZPASS_V_INCR                                   0x00008507
#define NV097_SET_STENCIL_OP_ZPASS_V_DECR                                   0x00008508

#define NV097_SET_SHADE_MODE                                                0x0000037c
#define NV097_SET_SHADE_MODE_V                                                    31:0
#define NV097_SET_SHADE_MODE_V_FLAT                                         0x00001D00
#define NV097_SET_SHADE_MODE_V_SMOOTH                                       0x00001D01

#define NV097_SET_LINE_WIDTH                                                0x00000380
#define NV097_SET_LINE_WIDTH_V                                                    31:0

#define NV097_SET_POLYGON_OFFSET_SCALE_FACTOR                               0x00000384
#define NV097_SET_POLYGON_OFFSET_SCALE_FACTOR_V                                   31:0

#define NV097_SET_POLYGON_OFFSET_BIAS                                       0x00000388
#define NV097_SET_POLYGON_OFFSET_BIAS_V                                           31:0

#define NV097_SET_FRONT_POLYGON_MODE                                        0x0000038c
#define NV097_SET_FRONT_POLYGON_MODE_V                                            31:0
#define NV097_SET_FRONT_POLYGON_MODE_V_POINT                                0x00001B00
#define NV097_SET_FRONT_POLYGON_MODE_V_LINE                                 0x00001B01
#define NV097_SET_FRONT_POLYGON_MODE_V_FILL                                 0x00001B02

#define NV097_SET_BACK_POLYGON_MODE                                         0x00000390
#define NV097_SET_BACK_POLYGON_MODE_V                                             31:0
#define NV097_SET_BACK_POLYGON_MODE_V_POINT                                 0x00001B00
#define NV097_SET_BACK_POLYGON_MODE_V_LINE                                  0x00001B01
#define NV097_SET_BACK_POLYGON_MODE_V_FILL                                  0x00001B02

#define NV097_SET_CLIP_MIN                                                  0x00000394
#define NV097_SET_CLIP_MIN_V                                                      31:0

#define NV097_SET_CLIP_MAX                                                  0x00000398
#define NV097_SET_CLIP_MAX_V                                                      31:0

#define NV097_SET_CULL_FACE                                                 0x0000039c
#define NV097_SET_CULL_FACE_V                                                     31:0
#define NV097_SET_CULL_FACE_V_FRONT                                         0x00000404
#define NV097_SET_CULL_FACE_V_BACK                                          0x00000405
#define NV097_SET_CULL_FACE_V_FRONT_AND_BACK                                0x00000408

#define NV097_SET_FRONT_FACE                                                0x000003a0
#define NV097_SET_FRONT_FACE_V                                                    31:0
#define NV097_SET_FRONT_FACE_V_CW                                           0x00000900
#define NV097_SET_FRONT_FACE_V_CCW                                          0x00000901

#define NV097_SET_NORMALIZATION_ENABLE                                      0x000003a4
#define NV097_SET_NORMALIZATION_ENABLE_V                                          31:0
#define NV097_SET_NORMALIZATION_ENABLE_V_FALSE                              0x00000000
#define NV097_SET_NORMALIZATION_ENABLE_V_TRUE                               0x00000001

#define NV097_SET_MATERIAL_EMISSION(i)                              (0x000003a8+(i)*4)
#define NV097_SET_MATERIAL_EMISSION_V                                             31:0

#define NV097_SET_MATERIAL_ALPHA                                            0x000003b4
#define NV097_SET_MATERIAL_ALPHA_V                                                31:0

#define NV097_SET_BACK_MATERIAL_ALPHA                                       0x000017ac
#define NV097_SET_BACK_MATERIAL_ALPHA_V                                           31:0

#define NV097_SET_SPECULAR_ENABLE                                           0x000003b8
#define NV097_SET_SPECULAR_ENABLE_V                                               31:0
#define NV097_SET_SPECULAR_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_SPECULAR_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_LIGHT_ENABLE_MASK                                         0x000003bc
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0                                         1:0
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT0_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1                                         3:2
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT1_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2                                         5:4
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT2_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3                                         7:6
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT3_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4                                         9:8
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT4_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5                                       11:10
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT5_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6                                       13:12
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT6_SPOT                             0x00000003
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7                                       15:14
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_OFF                              0x00000000
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_INFINITE                         0x00000001
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_LOCAL                            0x00000002
#define NV097_SET_LIGHT_ENABLE_MASK_LIGHT7_SPOT                             0x00000003

#define NV097_SET_VERTEX_DATA2F_M(i,j)                        (0x00001880+(i)*8+(j)*4)
#define NV097_SET_VERTEX_DATA2F_M_V                                               31:0

#define NV097_SET_VERTEX_DATA4F_M(i,j)                       (0x00001a00+(i)*16+(j)*4)
#define NV097_SET_VERTEX_DATA4F_M_V                                               31:0

#define NV097_SET_VERTEX_DATA2S(i)                                  (0x00001900+(i)*4)
#define NV097_SET_VERTEX_DATA2S_V                                                 31:0

#define NV097_SET_VERTEX_DATA4UB(i)                                 (0x00001940+(i)*4)
#define NV097_SET_VERTEX_DATA4UB_V                                                31:0

#define NV097_SET_VERTEX_DATA4S_M(i,j)                        (0x00001980+(i)*8+(j)*4)
#define NV097_SET_VERTEX_DATA4S_M_V                                               31:0

#define NV097_SET_TEXGEN_S(i)                                      (0x000003c0+(i)*16)
#define NV097_SET_TEXGEN_S_V                                                      31:0
#define NV097_SET_TEXGEN_S_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_S_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_S_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_S_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_S_V_OBJECT_LINEAR                                  0x00002401
#define NV097_SET_TEXGEN_S_V_SPHERE_MAP                                     0x00002402

#define NV097_SET_TEXGEN_T(i)                                      (0x000003c4+(i)*16)
#define NV097_SET_TEXGEN_T_V                                                      31:0
#define NV097_SET_TEXGEN_T_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_T_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_T_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_T_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_T_V_OBJECT_LINEAR                                  0x00002401
#define NV097_SET_TEXGEN_T_V_SPHERE_MAP                                     0x00002402

#define NV097_SET_TEXGEN_R(i)                                      (0x000003c8+(i)*16)
#define NV097_SET_TEXGEN_R_V                                                      31:0
#define NV097_SET_TEXGEN_R_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_R_V_NORMAL_MAP                                     0x00008511
#define NV097_SET_TEXGEN_R_V_REFLECTION_MAP                                 0x00008512
#define NV097_SET_TEXGEN_R_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_R_V_OBJECT_LINEAR                                  0x00002401

#define NV097_SET_TEXGEN_Q(i)                                      (0x000003cc+(i)*16)
#define NV097_SET_TEXGEN_Q_V                                                      31:0
#define NV097_SET_TEXGEN_Q_V_DISABLE                                        0x00000000
#define NV097_SET_TEXGEN_Q_V_EYE_LINEAR                                     0x00002400
#define NV097_SET_TEXGEN_Q_V_OBJECT_LINEAR                                  0x00002401

#define NV097_SET_TEXGEN_VIEW_MODEL                                         0x000009cc
#define NV097_SET_TEXGEN_VIEW_MODEL_V                                             31:0
#define NV097_SET_TEXGEN_VIEW_MODEL_V_LOCAL_VIEWER                          0x00000000
#define NV097_SET_TEXGEN_VIEW_MODEL_V_INFINITE_VIEWER                       0x00000001

#define NV097_SET_TEXTURE_MATRIX_ENABLE(i)                          (0x00000420+(i)*4)
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V                                         31:0
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V_FALSE                             0x00000000
#define NV097_SET_TEXTURE_MATRIX_ENABLE_V_TRUE                              0x00000001

#define NV097_SET_POINT_SIZE                                                0x0000043c
#define NV097_SET_POINT_SIZE_V                                                    31:0

#define NV097_SET_SWATH_WIDTH                                               0x000009f8
#define NV097_SET_SWATH_WIDTH_V                                                   31:0
#define NV097_SET_SWATH_WIDTH_V_8                                           0x00000000
#define NV097_SET_SWATH_WIDTH_V_16                                          0x00000001
#define NV097_SET_SWATH_WIDTH_V_32                                          0x00000002
#define NV097_SET_SWATH_WIDTH_V_64                                          0x00000003
#define NV097_SET_SWATH_WIDTH_V_128                                         0x00000004
#define NV097_SET_SWATH_WIDTH_V_OFF                                         0x0000000F

#define NV097_SET_FLAT_SHADE_OP                                             0x000009fc
#define NV097_SET_FLAT_SHADE_OP_V                                                 31:0
#define NV097_SET_FLAT_SHADE_OP_V_LAST_VTX                                  0x00000000
#define NV097_SET_FLAT_SHADE_OP_V_FIRST_VTX                                 0x00000001

#define NV097_SET_PROJECTION_MATRIX(i)                              (0x00000440+(i)*4)
#define NV097_SET_PROJECTION_MATRIX_V                                             31:0

#define NV097_SET_MODEL_VIEW_MATRIX0(i)                             (0x00000480+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX0_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX1(i)                             (0x000004c0+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX1_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX2(i)                             (0x00000500+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX2_V                                            31:0

#define NV097_SET_MODEL_VIEW_MATRIX3(i)                             (0x00000540+(i)*4)
#define NV097_SET_MODEL_VIEW_MATRIX3_V                                            31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX0(i)                     (0x00000580+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX0_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX1(i)                     (0x000005c0+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX1_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX2(i)                     (0x00000600+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX2_V                                    31:0

#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX3(i)                     (0x00000640+(i)*4)
#define NV097_SET_INVERSE_MODEL_VIEW_MATRIX3_V                                    31:0

#define NV097_SET_COMPOSITE_MATRIX(i)                               (0x00000680+(i)*4)
#define NV097_SET_COMPOSITE_MATRIX_V                                              31:0

#define NV097_SET_TEXTURE_MATRIX0(i)                                (0x000006c0+(i)*4)
#define NV097_SET_TEXTURE_MATRIX0_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX1(i)                                (0x00000700+(i)*4)
#define NV097_SET_TEXTURE_MATRIX1_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX2(i)                                (0x00000740+(i)*4)
#define NV097_SET_TEXTURE_MATRIX2_V                                               31:0

#define NV097_SET_TEXTURE_MATRIX3(i)                                (0x00000780+(i)*4)
#define NV097_SET_TEXTURE_MATRIX3_V                                               31:0

#define NV097_SET_TEXGEN_PLANE_S(i,j)                        (0x00000840+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_S_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_T(i,j)                        (0x00000850+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_T_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_R(i,j)                        (0x00000860+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_R_V                                                31:0

#define NV097_SET_TEXGEN_PLANE_Q(i,j)                        (0x00000870+(i)*64+(j)*4)
#define NV097_SET_TEXGEN_PLANE_Q_V                                                31:0

#define NV097_SET_FOG_PARAMS(i)                                     (0x000009c0+(i)*4)
#define NV097_SET_FOG_PARAMS_V                                                    31:0

#define NV097_SET_FOG_PLANE(i)                                      (0x000009d0+(i)*4)
#define NV097_SET_FOG_PLANE_V                                                     31:0

#define NV097_SET_SPECULAR_PARAMS(i)                                (0x000009e0+(i)*4)
#define NV097_SET_SPECULAR_PARAMS_V                                               31:0

#define NV097_SET_BACK_SPECULAR_PARAMS(i)                           (0x00001e28+(i)*4)
#define NV097_SET_BACK_SPECULAR_PARAMS_V                                          31:0

#define NV097_SET_SCENE_AMBIENT_COLOR(i)                            (0x00000a10+(i)*4)
#define NV097_SET_SCENE_AMBIENT_COLOR_V                                           31:0

#define NV097_SET_VIEWPORT_SCALE(i)                                 (0x00000af0+(i)*4)
#define NV097_SET_VIEWPORT_SCALE_V                                                31:0

#define NV097_SET_VIEWPORT_OFFSET(i)                                (0x00000a20+(i)*4)
#define NV097_SET_VIEWPORT_OFFSET_V                                               31:0

#define NV097_SET_POINT_PARAMS(i)                                   (0x00000a30+(i)*4)
#define NV097_SET_POINT_PARAMS_V                                                  31:0

#define NV097_SET_EYE_POSITION(i)                                   (0x00000a50+(i)*4)
#define NV097_SET_EYE_POSITION_V                                                  31:0

#define NV097_SET_BACK_LIGHT_AMBIENT_COLOR(i,j)              (0x00000c00+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_AMBIENT_COLOR_V                                      31:0

#define NV097_SET_BACK_LIGHT_DIFFUSE_COLOR(i,j)              (0x00000c0c+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_DIFFUSE_COLOR_V                                      31:0

#define NV097_SET_BACK_LIGHT_SPECULAR_COLOR(i,j)             (0x00000c18+(i)*64+(j)*4)
#define NV097_SET_BACK_LIGHT_SPECULAR_COLOR_V                                     31:0

#define NV097_SET_LIGHT_AMBIENT_COLOR(i,j)                  (0x00001000+(i)*128+(j)*4)
#define NV097_SET_LIGHT_AMBIENT_COLOR_V                                           31:0

#define NV097_SET_LIGHT_DIFFUSE_COLOR(i,j)                  (0x0000100c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_DIFFUSE_COLOR_V                                           31:0

#define NV097_SET_LIGHT_SPECULAR_COLOR(i,j)                 (0x00001018+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPECULAR_COLOR_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_RANGE(i)                            (0x00001024+(i)*128)
#define NV097_SET_LIGHT_LOCAL_RANGE_V                                             31:0

#define NV097_SET_LIGHT_INFINITE_HALF_VECTOR(i,j)           (0x00001028+(i)*128+(j)*4)
#define NV097_SET_LIGHT_INFINITE_HALF_VECTOR_V                                    31:0

#define NV097_SET_LIGHT_INFINITE_DIRECTION(i,j)             (0x00001034+(i)*128+(j)*4)
#define NV097_SET_LIGHT_INFINITE_DIRECTION_V                                      31:0

#define NV097_SET_LIGHT_SPOT_FALLOFF(i,j)                   (0x00001040+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPOT_FALLOFF_V                                            31:0

#define NV097_SET_LIGHT_SPOT_DIRECTION(i,j)                 (0x0000104c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_SPOT_DIRECTION_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_POSITION(i,j)                 (0x0000105c+(i)*128+(j)*4)
#define NV097_SET_LIGHT_LOCAL_POSITION_V                                          31:0

#define NV097_SET_LIGHT_LOCAL_ATTENUATION(i,j)              (0x00001068+(i)*128+(j)*4)
#define NV097_SET_LIGHT_LOCAL_ATTENUATION_V                                       31:0

#define NV097_SET_VERTEX3F(i)                                       (0x00001500+(i)*4)
#define NV097_SET_VERTEX3F_V                                                      31:0

#define NV097_SET_VERTEX4F(i)                                       (0x00001518+(i)*4)
#define NV097_SET_VERTEX4F_V                                                      31:0

#define NV097_SET_VERTEX4S(i)                                       (0x00001528+(i)*4)
#define NV097_SET_VERTEX4S_V                                                      31:0

#define NV097_SET_NORMAL3F(i)                                       (0x00001530+(i)*4)
#define NV097_SET_NORMAL3F_V                                                      31:0

#define NV097_SET_NORMAL3S(i)                                       (0x00001540+(i)*4)
#define NV097_SET_NORMAL3S_V                                                      31:0

#define NV097_SET_DIFFUSE_COLOR4F(i)                                (0x00001550+(i)*4)
#define NV097_SET_DIFFUSE_COLOR4F_V                                               31:0

#define NV097_SET_DIFFUSE_COLOR3F(i)                                (0x00001560+(i)*4)
#define NV097_SET_DIFFUSE_COLOR3F_V                                               31:0

#define NV097_SET_DIFFUSE_COLOR4UB                                          0x0000156c
#define NV097_SET_DIFFUSE_COLOR4UB_V                                              31:0

#define NV097_SET_SPECULAR_COLOR4F(i)                               (0x00001570+(i)*4)
#define NV097_SET_SPECULAR_COLOR4F_V                                              31:0

#define NV097_SET_SPECULAR_COLOR3F(i)                               (0x00001580+(i)*4)
#define NV097_SET_SPECULAR_COLOR3F_V                                              31:0

#define NV097_SET_SPECULAR_COLOR4UB                                         0x0000158c
#define NV097_SET_SPECULAR_COLOR4UB_V                                             31:0

#define NV097_SET_TEXCOORD0_2F(i)                                   (0x00001590+(i)*4)
#define NV097_SET_TEXCOORD0_2F_V                                                  31:0

#define NV097_SET_TEXCOORD0_2S                                              0x00001598
#define NV097_SET_TEXCOORD0_2S_V                                                  31:0

#define NV097_SET_TEXCOORD0_4F(i)                                   (0x000015a0+(i)*4)
#define NV097_SET_TEXCOORD0_4F_V                                                  31:0

#define NV097_SET_TEXCOORD0_4S(i)                                   (0x000015b0+(i)*4)
#define NV097_SET_TEXCOORD0_4S_V                                                  31:0

#define NV097_SET_TEXCOORD1_2F(i)                                   (0x000015b8+(i)*4)
#define NV097_SET_TEXCOORD1_2F_V                                                  31:0

#define NV097_SET_TEXCOORD1_2S                                              0x000015c0
#define NV097_SET_TEXCOORD1_2S_V                                                  31:0

#define NV097_SET_TEXCOORD1_4F(i)                                   (0x000015c8+(i)*4)
#define NV097_SET_TEXCOORD1_4F_V                                                  31:0

#define NV097_SET_TEXCOORD1_4S(i)                                   (0x000015d8+(i)*4)
#define NV097_SET_TEXCOORD1_4S_V                                                  31:0

#define NV097_SET_TEXCOORD2_2F(i)                                   (0x000015e0+(i)*4)
#define NV097_SET_TEXCOORD2_2F_V                                                  31:0

#define NV097_SET_TEXCOORD2_2S                                              0x000015e8
#define NV097_SET_TEXCOORD2_2S_V                                                  31:0

#define NV097_SET_TEXCOORD2_4F(i)                                   (0x000015f0+(i)*4)
#define NV097_SET_TEXCOORD2_4F_V                                                  31:0

#define NV097_SET_TEXCOORD2_4S(i)                                   (0x00001600+(i)*4)
#define NV097_SET_TEXCOORD2_4S_V                                                  31:0

#define NV097_SET_TEXCOORD3_2F(i)                                   (0x00001608+(i)*4)
#define NV097_SET_TEXCOORD3_2F_V                                                  31:0

#define NV097_SET_TEXCOORD3_2S                                              0x00001610
#define NV097_SET_TEXCOORD3_2S_V                                                  31:0

#define NV097_SET_TEXCOORD3_4F(i)                                   (0x00001620+(i)*4)
#define NV097_SET_TEXCOORD3_4F_V                                                  31:0

#define NV097_SET_TEXCOORD3_4S(i)                                   (0x00001630+(i)*4)
#define NV097_SET_TEXCOORD3_4S_V                                                  31:0

#define NV097_SET_FOG1F                                                     0x00001698
#define NV097_SET_FOG1F_V                                                         31:0

#define NV097_SET_WEIGHT1F                                                  0x0000169c
#define NV097_SET_WEIGHT1F_V                                                      31:0

#define NV097_SET_WEIGHT2F(i)                                       (0x000016a0+(i)*4)
#define NV097_SET_WEIGHT2F_V                                                      31:0

#define NV097_SET_WEIGHT3F(i)                                       (0x000016b0+(i)*4)
#define NV097_SET_WEIGHT3F_V                                                      31:0

#define NV097_SET_WEIGHT4F(i)                                       (0x000016c0+(i)*4)
#define NV097_SET_WEIGHT4F_V                                                      31:0

#define NV097_SET_EDGE_FLAG                                                 0x000016bc
#define NV097_SET_EDGE_FLAG_V                                                     31:0
#define NV097_SET_EDGE_FLAG_V_FALSE                                         0x00000000
#define NV097_SET_EDGE_FLAG_V_TRUE                                          0x00000001

#define NV097_SET_TRANSFORM_FIXED_CONST0(i)                         (0x000016e0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST0_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST1(i)                         (0x000016f0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST1_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST2(i)                         (0x00001700+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST2_V                                        31:0

#define NV097_SET_TRANSFORM_FIXED_CONST3(i)                         (0x000016d0+(i)*4)
#define NV097_SET_TRANSFORM_FIXED_CONST3_V                                        31:0

#define NV097_SET_TLCONST_ZERO(i)                                   (0x000017d4+(i)*4)
#define NV097_SET_TLCONST_ZERO_V                                                  31:0

#define NV097_SET_EYE_DIRECTION(i)                                  (0x000017e0+(i)*4)
#define NV097_SET_EYE_DIRECTION_V                                                 31:0

#define NV097_SET_LINEAR_FOG_CONST(i)                               (0x000017ec+(i)*4)
#define NV097_SET_LINEAR_FOG_CONST_V                                              31:0

#define NV097_INVALIDATE_VERTEX_CACHE_FILE                                  0x00001710

#define NV097_INVALIDATE_VERTEX_FILE                                        0x00001714

#define NV097_TL_NOP                                                        0x00001718

#define NV097_TL_SYNC                                                       0x0000171c

#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET(i)                       (0x00001720+(i)*4)
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA                           31:31
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA_VERTEX_A             0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_CONTEXT_DMA_VERTEX_B             0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_OFFSET_OFFSET                                 30:0

#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT(i)                       (0x00001760+(i)*4)
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_STRIDE                                 31:8
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE                                    7:4
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_DISABLED                    0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_1                           0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_2                           0x00000002
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_3                           0x00000003
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_4                           0x00000004
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_SIZE_3W                          0x00000007
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE                                    3:0
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_UB_D3D                      0x00000000
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_S1                          0x00000001
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_F                           0x00000002
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_UB_OGL                      0x00000004
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_S32K                        0x00000005
#define NV097_SET_VERTEX_DATA_ARRAY_FORMAT_TYPE_CMP                         0x00000006

#define NV097_SET_LOGIC_OP_ENABLE                                           0x000017bc
#define NV097_SET_LOGIC_OP_ENABLE_V                                               31:0
#define NV097_SET_LOGIC_OP_ENABLE_V_FALSE                                   0x00000000
#define NV097_SET_LOGIC_OP_ENABLE_V_TRUE                                    0x00000001

#define NV097_SET_LOGIC_OP                                                  0x000017c0
#define NV097_SET_LOGIC_OP_V                                                      31:0
#define NV097_SET_LOGIC_OP_V_CLEAR                                          0x00001500
#define NV097_SET_LOGIC_OP_V_AND                                            0x00001501
#define NV097_SET_LOGIC_OP_V_AND_REVERSE                                    0x00001502
#define NV097_SET_LOGIC_OP_V_COPY                                           0x00001503
#define NV097_SET_LOGIC_OP_V_AND_INVERTED                                   0x00001504
#define NV097_SET_LOGIC_OP_V_NOOP                                           0x00001505
#define NV097_SET_LOGIC_OP_V_XOR                                            0x00001506
#define NV097_SET_LOGIC_OP_V_OR                                             0x00001507
#define NV097_SET_LOGIC_OP_V_NOR                                            0x00001508
#define NV097_SET_LOGIC_OP_V_EQUIV                                          0x00001509
#define NV097_SET_LOGIC_OP_V_INVERT                                         0x0000150A
#define NV097_SET_LOGIC_OP_V_OR_REVERSE                                     0x0000150B
#define NV097_SET_LOGIC_OP_V_COPY_INVERTED                                  0x0000150C
#define NV097_SET_LOGIC_OP_V_OR_INVERTED                                    0x0000150D
#define NV097_SET_LOGIC_OP_V_NAND                                           0x0000150E
#define NV097_SET_LOGIC_OP_V_SET                                            0x0000150F

#define NV097_SET_BEGIN_END                                                 0x000017fc
#define NV097_SET_BEGIN_END_OP                                                    31:0
#define NV097_SET_BEGIN_END_OP_END                                          0x00000000
#define NV097_SET_BEGIN_END_OP_POINTS                                       0x00000001
#define NV097_SET_BEGIN_END_OP_LINES                                        0x00000002
#define NV097_SET_BEGIN_END_OP_LINE_LOOP                                    0x00000003
#define NV097_SET_BEGIN_END_OP_LINE_STRIP                                   0x00000004
#define NV097_SET_BEGIN_END_OP_TRIANGLES                                    0x00000005
#define NV097_SET_BEGIN_END_OP_TRIANGLE_STRIP                               0x00000006
#define NV097_SET_BEGIN_END_OP_TRIANGLE_FAN                                 0x00000007
#define NV097_SET_BEGIN_END_OP_QUADS                                        0x00000008
#define NV097_SET_BEGIN_END_OP_QUAD_STRIP                                   0x00000009
#define NV097_SET_BEGIN_END_OP_POLYGON                                      0x0000000A

#define NV097_ARRAY_ELEMENT16                                               0x00001800
#define NV097_ARRAY_ELEMENT16_VERTEX0                                             15:0
#define NV097_ARRAY_ELEMENT16_VERTEX1                                            31:16

#define NV097_ARRAY_ELEMENT32                                               0x00001808
#define NV097_ARRAY_ELEMENT32_V                                                   31:0

#define NV097_DRAW_ARRAYS                                                   0x00001810
#define NV097_DRAW_ARRAYS_COUNT                                                  31:24
#define NV097_DRAW_ARRAYS_START_INDEX                                             23:0

#define NV097_INLINE_VERTEX_REUSE                                           0x00001828
#define NV097_INLINE_VERTEX_REUSE_V                                               31:0

#define NV097_INLINE_ARRAY                                                  0x00001818
#define NV097_INLINE_ARRAY_V                                                      31:0

#define NV097_SET_TEXTURE_OFFSET(i)                                (0x00001b00+(i)*64)
#define NV097_SET_TEXTURE_OFFSET_V                                                31:0

#define NV097_SET_TEXTURE_FORMAT(i)                                (0x00001b04+(i)*64)
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA                                       1:0
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA_A                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_CONTEXT_DMA_B                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE                                    2:2
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_FALSE                       0x00000000
#define NV097_SET_TEXTURE_FORMAT_CUBEMAP_ENABLE_TRUE                        0x00000001
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE                                     3:3
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE_TEXTURE                      0x00000000
#define NV097_SET_TEXTURE_FORMAT_BORDER_SOURCE_COLOR                        0x00000001
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY                                    7:4
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_ONE                         0x00000001
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_TWO                         0x00000002
#define NV097_SET_TEXTURE_FORMAT_DIMENSIONALITY_THREE                       0x00000003
#define NV097_SET_TEXTURE_FORMAT_COLOR                                            15:8
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_Y8                                0x00000000
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_AY8                               0x00000001
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A1R5G5B5                          0x00000002
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_X1R5G5B5                          0x00000003
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A4R4G4B4                          0x00000004
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R5G6B5                            0x00000005
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8R8G8B8                          0x00000006
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_X8R8G8B8                          0x00000007
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_I8_A8R8G8B8                       0x0000000B
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT1_A1R5G5B5                      0x0000000C
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT23_A8R8G8B8                     0x0000000E
#define NV097_SET_TEXTURE_FORMAT_COLOR_L_DXT45_A8R8G8B8                     0x0000000F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A1R5G5B5                    0x00000010
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R5G6B5                      0x00000011
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8R8G8B8                    0x00000012
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_Y8                          0x00000013
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_SY8                         0x00000014
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X7SY9                       0x00000015
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R8B8                        0x00000016
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_G8B8                        0x00000017
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_SG8SB8                      0x00000018
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8                                0x00000019
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8Y8                              0x0000001A
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_AY8                         0x0000001B
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X1R5G5B5                    0x0000001C
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A4R4G4B4                    0x0000001D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_X8R8G8B8                    0x0000001E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8                          0x0000001F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8Y8                        0x00000020
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_CR8YB8CB8YA8                0x00000024
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_YB8CR8YA8CB8                0x00000025
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8CR8CB8Y8                  0x00000026
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R6G5B5                            0x00000027
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_G8B8                              0x00000028
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R8B8                              0x00000029
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_X8_Y24_FIXED                0x0000002A
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_X8_Y24_FLOAT                0x0000002B
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_Y16_FIXED                   0x0000002C
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_DEPTH_Y16_FLOAT                   0x0000002D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_X8_Y24_FIXED          0x0000002E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_X8_Y24_FLOAT          0x0000002F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_Y16_FIXED             0x00000030
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_DEPTH_Y16_FLOAT             0x00000031
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_Y16                               0x00000032
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_YB_16_YA_16                       0x00000033
#define NV097_SET_TEXTURE_FORMAT_COLOR_LC_IMAGE_A4V6YB6A4U6YA6              0x00000034
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_Y16                         0x00000035
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_YB16YA16                    0x00000036
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R6G5B5                      0x00000037
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R5G5B5A1                          0x00000038
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R4G4B4A4                          0x00000039
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_A8B8G8R8                          0x0000003A
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_B8G8R8A8                          0x0000003B
#define NV097_SET_TEXTURE_FORMAT_COLOR_SZ_R8G8B8A8                          0x0000003C
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R5G5B5A1                    0x0000003D
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R4G4B4A4                    0x0000003E
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_A8B8G8R8                    0x0000003F
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_B8G8R8A8                    0x00000040
#define NV097_SET_TEXTURE_FORMAT_COLOR_LU_IMAGE_R8G8B8A8                    0x00000041
#define NV097_SET_TEXTURE_FORMAT_MIPMAP_LEVELS                                   19:16
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U                                     23:20
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_512                            0x00000009
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_1024                           0x0000000A
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_2048                           0x0000000B
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_U_4096                           0x0000000C
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V                                     27:24
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_512                            0x00000009
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_1024                           0x0000000A
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_2048                           0x0000000B
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_V_4096                           0x0000000C
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P                                     31:28
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_1                              0x00000000
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_2                              0x00000001
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_4                              0x00000002
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_8                              0x00000003
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_16                             0x00000004
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_32                             0x00000005
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_64                             0x00000006
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_128                            0x00000007
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_256                            0x00000008
#define NV097_SET_TEXTURE_FORMAT_BASE_SIZE_P_512                            0x00000009

#define NV097_SET_TEXTURE_ADDRESS(i)                               (0x00001b08+(i)*64)
#define NV097_SET_TEXTURE_ADDRESS_U                                                3:0
#define NV097_SET_TEXTURE_ADDRESS_U_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_U_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_U_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_U_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_U_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U                                        7:4
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_U_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_V                                               11:8
#define NV097_SET_TEXTURE_ADDRESS_V_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_V_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_V_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_V_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_V_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V                                      15:12
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_V_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_P                                              19:16
#define NV097_SET_TEXTURE_ADDRESS_P_WRAP                                    0x00000001
#define NV097_SET_TEXTURE_ADDRESS_P_MIRROR                                  0x00000002
#define NV097_SET_TEXTURE_ADDRESS_P_CLAMP_TO_EDGE                           0x00000003
#define NV097_SET_TEXTURE_ADDRESS_P_BORDER                                  0x00000004
#define NV097_SET_TEXTURE_ADDRESS_P_CLAMP_OGL                               0x00000005
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P                                      23:20
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_P_TRUE                            0x00000001
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q                                      31:24
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q_FALSE                           0x00000000
#define NV097_SET_TEXTURE_ADDRESS_CYLWRAP_Q_TRUE                            0x00000001

#define NV097_SET_TEXTURE_CONTROL0(i)                              (0x00001b0c+(i)*64)
#define NV097_SET_TEXTURE_CONTROL0_ENABLE                                        31:30
#define NV097_SET_TEXTURE_CONTROL0_ENABLE_FALSE                             0x00000000
#define NV097_SET_TEXTURE_CONTROL0_ENABLE_TRUE                              0x00000001
#define NV097_SET_TEXTURE_CONTROL0_MIN_LOD_CLAMP                                 29:18
#define NV097_SET_TEXTURE_CONTROL0_MAX_LOD_CLAMP                                  17:6
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO                                   5:4
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_0                          0x00000000
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_1                          0x00000001
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_2                          0x00000002
#define NV097_SET_TEXTURE_CONTROL0_LOG_MAX_ANISO_3                          0x00000003
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE                              3:3
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_FALSE                 0x00000000
#define NV097_SET_TEXTURE_CONTROL0_IMAGE_FIELD_ENABLE_TRUE                  0x00000001
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE                               2:2
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_FALSE                  0x00000000
#define NV097_SET_TEXTURE_CONTROL0_ALPHA_KILL_ENABLE_TRUE                   0x00000001
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION                             1:0
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_FALSE                0x00000000
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_ALPHA                0x00000001
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_RGBA                 0x00000002
#define NV097_SET_TEXTURE_CONTROL0_COLOR_KEY_OPERATION_KILL                 0x00000003

#define NV097_SET_TEXTURE_CONTROL1(i)                              (0x00001b10+(i)*64)
#define NV097_SET_TEXTURE_CONTROL1_IMAGE_PITCH                                   31:16

#define NV097_SET_TEXTURE_FILTER(i)                                (0x00001b14+(i)*64)
#define NV097_SET_TEXTURE_FILTER_MIPMAP_LOD_BIAS                                  12:0
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL                              15:13
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL_QUINCUNX                0x00000001
#define NV097_SET_TEXTURE_FILTER_CONVOLUTION_KERNEL_GAUSSIAN_3              0x00000002
#define NV097_SET_TEXTURE_FILTER_MIN                                             23:16
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_LOD0                               0x00000001
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_LOD0                              0x00000002
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_NEARESTLOD                         0x00000003
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_NEARESTLOD                        0x00000004
#define NV097_SET_TEXTURE_FILTER_MIN_BOX_TENT_LOD                           0x00000005
#define NV097_SET_TEXTURE_FILTER_MIN_TENT_TENT_LOD                          0x00000006
#define NV097_SET_TEXTURE_FILTER_MIN_CONVOLUTION_2D_LOD0                    0x00000007
#define NV097_SET_TEXTURE_FILTER_MAG                                             27:24
#define NV097_SET_TEXTURE_FILTER_MAG_BOX_LOD0                               0x00000001
#define NV097_SET_TEXTURE_FILTER_MAG_TENT_LOD0                              0x00000002
#define NV097_SET_TEXTURE_FILTER_MAG_CONVOLUTION_2D_LOD0                    0x00000004
#define NV097_SET_TEXTURE_FILTER_ASIGNED                                         28:28
#define NV097_SET_TEXTURE_FILTER_ASIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_ASIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_RSIGNED                                         29:29
#define NV097_SET_TEXTURE_FILTER_RSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_RSIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_GSIGNED                                         30:30
#define NV097_SET_TEXTURE_FILTER_GSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_GSIGNED_BIT_ENABLED                        0x00000001
#define NV097_SET_TEXTURE_FILTER_BSIGNED                                         31:31
#define NV097_SET_TEXTURE_FILTER_BSIGNED_BIT_DISABLED                       0x00000000
#define NV097_SET_TEXTURE_FILTER_BSIGNED_BIT_ENABLED                        0x00000001

#define NV097_SET_TEXTURE_IMAGE_RECT(i)                            (0x00001b1c+(i)*64)
#define NV097_SET_TEXTURE_IMAGE_RECT_WIDTH                                       31:16
#define NV097_SET_TEXTURE_IMAGE_RECT_HEIGHT                                       15:0

#define NV097_SET_TEXTURE_PALETTE(i)                               (0x00001b20+(i)*64)
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA                                      1:0
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA_A                             0x00000000
#define NV097_SET_TEXTURE_PALETTE_CONTEXT_DMA_B                             0x00000001
#define NV097_SET_TEXTURE_PALETTE_LENGTH                                           5:2
#define NV097_SET_TEXTURE_PALETTE_LENGTH_256                                0x00000000
#define NV097_SET_TEXTURE_PALETTE_LENGTH_128                                0x00000001
#define NV097_SET_TEXTURE_PALETTE_LENGTH_64                                 0x00000002
#define NV097_SET_TEXTURE_PALETTE_LENGTH_32                                 0x00000003
#define NV097_SET_TEXTURE_PALETTE_OFFSET                                          31:6

#define NV097_SET_TEXTURE_BORDER_COLOR(i)                          (0x00001b24+(i)*64)
#define NV097_SET_TEXTURE_BORDER_COLOR_V                                          31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT00(i)                    (0x00001b28+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT00_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT01(i)                    (0x00001b2c+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT01_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT11(i)                    (0x00001b30+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT11_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT10(i)                    (0x00001b34+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_MAT10_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_SCALE(i)                    (0x00001b38+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_SCALE_V                                    31:0

#define NV097_SET_TEXTURE_SET_BUMP_ENV_OFFSET(i)                   (0x00001b3c+(i)*64)
#define NV097_SET_TEXTURE_SET_BUMP_ENV_OFFSET_V                                   31:0

#define NV097_PARK_ATTRIBUTE                                                0x00001d64

#define NV097_UNPARK_ATTRIBUTE                                              0x00001d68

#define NV097_SET_SEMAPHORE_OFFSET                                          0x00001d6c
#define NV097_SET_SEMAPHORE_OFFSET_V                                              31:0

#define NV097_BACK_END_WRITE_SEMAPHORE_RELEASE                              0x00001d70
#define NV097_BACK_END_WRITE_SEMAPHORE_RELEASE_V                                  31:0

#define NV097_TEXTURE_READ_SEMAPHORE_RELEASE                                0x00001d74
#define NV097_TEXTURE_READ_SEMAPHORE_RELEASE_V                                    31:0

#define NV097_SET_ZMIN_MAX_CONTROL                                          0x00001d78
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN                                3:0
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN_FALSE                   0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_NEAR_FAR_EN_TRUE                    0x00000001
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN                                       7:4
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN_CULL                           0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_ZCLAMP_EN_CLAMP                          0x00000001
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W                                  11:8
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W_FALSE                      0x00000000
#define NV097_SET_ZMIN_MAX_CONTROL_CULL_IGNORE_W_TRUE                       0x00000001

#define NV097_SET_ANTI_ALIASING_CONTROL                                     0x00001d7c
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE                                     3:0
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE_FALSE                        0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ENABLE_TRUE                         0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE                          7:4
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE_DISABLE           0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_COVERAGE_ENABLE            0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE                              11:8
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE_DISABLE                0x00000000
#define NV097_SET_ANTI_ALIASING_CONTROL_ALPHA_TO_ONE_ENABLE                 0x00000001
#define NV097_SET_ANTI_ALIASING_CONTROL_SAMPLE_MASK                              31:16

#define NV097_SET_COMPRESS_ZBUFFER_EN                                       0x00001d80
#define NV097_SET_COMPRESS_ZBUFFER_EN_V                                           31:0
#define NV097_SET_COMPRESS_ZBUFFER_EN_V_DISABLE                             0x00000000
#define NV097_SET_COMPRESS_ZBUFFER_EN_V_ENABLE                              0x00000001

#define NV097_SET_OCCLUDE_ZSTENCIL_EN                                       0x00001d84
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN                                  0:0
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN_DISABLE                   0x00000000
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_ZEN_ENABLE                    0x00000001
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN                           1:1
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN_DISABLE            0x00000000
#define NV097_SET_OCCLUDE_ZSTENCIL_EN_OCCLUDE_STENCIL_EN_ENABLE             0x00000001

#define NV097_SET_SURFACE_FORMAT                                            0x00000208
#define NV097_SET_SURFACE_FORMAT_COLOR                                             3:0
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                 0x00000001
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                 0x00000002
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5                            0x00000003
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                 0x00000004
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                 0x00000005
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8             0x00000006
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8             0x00000007
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8                          0x00000008
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_B8                                0x00000009
#define NV097_SET_SURFACE_FORMAT_COLOR_LE_G8B8                              0x0000000A
#define NV097_SET_SURFACE_FORMAT_ZETA                                              7:4
#define NV097_SET_SURFACE_FORMAT_ZETA_Z16                                   0x00000001
#define NV097_SET_SURFACE_FORMAT_ZETA_Z24S8                                 0x00000002
#define NV097_SET_SURFACE_FORMAT_TYPE                                             11:8
#define NV097_SET_SURFACE_FORMAT_TYPE_PITCH                                 0x00000001
#define NV097_SET_SURFACE_FORMAT_TYPE_SWIZZLE                               0x00000002
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING                                   15:12
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_1                     0x00000000
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_CENTER_CORNER_2              0x00000001
#define NV097_SET_SURFACE_FORMAT_ANTI_ALIASING_SQUARE_OFFSET_4              0x00000002
#define NV097_SET_SURFACE_FORMAT_WIDTH                                           23:16
#define NV097_SET_SURFACE_FORMAT_WIDTH_1                                    0x00000000
#define NV097_SET_SURFACE_FORMAT_WIDTH_2                                    0x00000001
#define NV097_SET_SURFACE_FORMAT_WIDTH_4                                    0x00000002
#define NV097_SET_SURFACE_FORMAT_WIDTH_8                                    0x00000003
#define NV097_SET_SURFACE_FORMAT_WIDTH_16                                   0x00000004
#define NV097_SET_SURFACE_FORMAT_WIDTH_32                                   0x00000005
#define NV097_SET_SURFACE_FORMAT_WIDTH_64                                   0x00000006
#define NV097_SET_SURFACE_FORMAT_WIDTH_128                                  0x00000007
#define NV097_SET_SURFACE_FORMAT_WIDTH_256                                  0x00000008
#define NV097_SET_SURFACE_FORMAT_WIDTH_512                                  0x00000009
#define NV097_SET_SURFACE_FORMAT_WIDTH_1024                                 0x0000000A
#define NV097_SET_SURFACE_FORMAT_WIDTH_2048                                 0x0000000B
#define NV097_SET_SURFACE_FORMAT_WIDTH_4096                                 0x0000000C
#define NV097_SET_SURFACE_FORMAT_HEIGHT                                          31:24
#define NV097_SET_SURFACE_FORMAT_HEIGHT_1                                   0x00000000
#define NV097_SET_SURFACE_FORMAT_HEIGHT_2                                   0x00000001
#define NV097_SET_SURFACE_FORMAT_HEIGHT_4                                   0x00000002
#define NV097_SET_SURFACE_FORMAT_HEIGHT_8                                   0x00000003
#define NV097_SET_SURFACE_FORMAT_HEIGHT_16                                  0x00000004
#define NV097_SET_SURFACE_FORMAT_HEIGHT_32                                  0x00000005
#define NV097_SET_SURFACE_FORMAT_HEIGHT_64                                  0x00000006
#define NV097_SET_SURFACE_FORMAT_HEIGHT_128                                 0x00000007
#define NV097_SET_SURFACE_FORMAT_HEIGHT_256                                 0x00000008
#define NV097_SET_SURFACE_FORMAT_HEIGHT_512                                 0x00000009
#define NV097_SET_SURFACE_FORMAT_HEIGHT_1024                                0x0000000A
#define NV097_SET_SURFACE_FORMAT_HEIGHT_2048                                0x0000000B
#define NV097_SET_SURFACE_FORMAT_HEIGHT_4096                                0x0000000C

#define NV097_SET_ZSTENCIL_CLEAR_VALUE                                      0x00001d8c
#define NV097_SET_ZSTENCIL_CLEAR_VALUE_V                                          31:0

#define NV097_SET_COLOR_CLEAR_VALUE                                         0x00001d90
#define NV097_SET_COLOR_CLEAR_VALUE_V                                             31:0

#define NV097_CLEAR_SURFACE                                                 0x00001d94
#define NV097_CLEAR_SURFACE_Z                                                      0:0
#define NV097_CLEAR_SURFACE_Z_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_Z_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_STENCIL                                                1:1
#define NV097_CLEAR_SURFACE_STENCIL_DISABLE                                 0x00000000
#define NV097_CLEAR_SURFACE_STENCIL_ENABLE                                  0x00000001
#define NV097_CLEAR_SURFACE_R                                                      4:4
#define NV097_CLEAR_SURFACE_R_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_R_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_G                                                      5:5
#define NV097_CLEAR_SURFACE_G_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_G_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_B                                                      6:6
#define NV097_CLEAR_SURFACE_B_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_B_ENABLE                                        0x00000001
#define NV097_CLEAR_SURFACE_A                                                      7:7
#define NV097_CLEAR_SURFACE_A_DISABLE                                       0x00000000
#define NV097_CLEAR_SURFACE_A_ENABLE                                        0x00000001

#define NV097_SET_CLEAR_RECT_HORIZONTAL                                     0x00001d98
#define NV097_SET_CLEAR_RECT_HORIZONTAL_XMIN                                      15:0
#define NV097_SET_CLEAR_RECT_HORIZONTAL_XMAX                                     31:16

#define NV097_SET_CLEAR_RECT_VERTICAL                                       0x00001d9c
#define NV097_SET_CLEAR_RECT_VERTICAL_YMIN                                        15:0
#define NV097_SET_CLEAR_RECT_VERTICAL_YMAX                                       31:16

#define NV097_SET_BEGIN_PATCH0                                              0x00001de0
#define NV097_SET_BEGIN_PATCH0_POSITION_DEGREE                                     3:0
#define NV097_SET_BEGIN_PATCH0_PARAM1_DEGREE                                       7:4
#define NV097_SET_BEGIN_PATCH0_PARAM2_DEGREE                                      11:8
#define NV097_SET_BEGIN_PATCH0_PARAM3_DEGREE                                     15:12
#define NV097_SET_BEGIN_PATCH0_PARAM4_DEGREE                                     19:16
#define NV097_SET_BEGIN_PATCH0_PARAM5_DEGREE                                     23:20
#define NV097_SET_BEGIN_PATCH0_PARAM6_DEGREE                                     27:24
#define NV097_SET_BEGIN_PATCH0_PARAM7_DEGREE                                     31:28

#define NV097_SET_BEGIN_PATCH1                                              0x00001de4
#define NV097_SET_BEGIN_PATCH1_PARAM8_DEGREE                                       3:0
#define NV097_SET_BEGIN_PATCH1_PARAM9_DEGREE                                       7:4
#define NV097_SET_BEGIN_PATCH1_PARAM10_DEGREE                                     11:8
#define NV097_SET_BEGIN_PATCH1_PARAM11_DEGREE                                    15:12
#define NV097_SET_BEGIN_PATCH1_PARAM12_DEGREE                                    19:16
#define NV097_SET_BEGIN_PATCH1_PARAM13_DEGREE                                    23:20
#define NV097_SET_BEGIN_PATCH1_PARAM14_DEGREE                                    27:24
#define NV097_SET_BEGIN_PATCH1_PARAM15_DEGREE                                    31:28

#define NV097_SET_BEGIN_PATCH2                                              0x00001de8
#define NV097_SET_BEGIN_PATCH2_SWATCH_ROWS                                         7:0
#define NV097_SET_BEGIN_PATCH2_SWATCH_COLS                                        15:8
#define NV097_SET_BEGIN_PATCH2_SWATCH_SIZE                                       20:16
#define NV097_SET_BEGIN_PATCH2_PARTIAL_SWATCH_WIDTH                              25:21
#define NV097_SET_BEGIN_PATCH2_PARTIAL_SWATCH_HEIGHT                             30:26
#define NV097_SET_BEGIN_PATCH2_PATCH_TYPE                                        31:31
#define NV097_SET_BEGIN_PATCH2_PATCH_TYPE_SQUARE                            0x00000000

#define NV097_SET_BEGIN_PATCH3                                              0x00001dec
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS                                            2:0
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_NONE                                0x00000000
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST                               0x00000001
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_LAST                                0x00000002
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_FIRST_AND_LAST                      0x00000003
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_REV_FIRST                           0x00000005
#define NV097_SET_BEGIN_PATCH3_ROW_TRNS_REV_LAST                            0x00000006
#define NV097_SET_BEGIN_PATCH3_COL_TRNS                                            5:3
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_NONE                                0x00000000
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST                               0x00000001
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_LAST                                0x00000002
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_FIRST_AND_LAST                      0x00000003
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_REV_FIRST                           0x00000005
#define NV097_SET_BEGIN_PATCH3_COL_TRNS_REV_LAST                            0x00000006
#define NV097_SET_BEGIN_PATCH3_POSITION_GUARD_CURVE_DEGREE                         9:6
#define NV097_SET_BEGIN_PATCH3_NORMAL_GUARD_CURVE_DEGREE                         13:10
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE                                         15:14
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_TRI_STRIP                          0x00000000
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_REVERSED_TRI_STRIP                 0x00000001
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_BW_TRI_STRIP                       0x00000002
#define NV097_SET_BEGIN_PATCH3_PRIMITIVE_BW_REVERSED_TRI_STRIP              0x00000003
#define NV097_SET_BEGIN_PATCH3_TESSELATION                                       16:16
#define NV097_SET_BEGIN_PATCH3_TESSELATION_ADAPTIVE_STITCH                  0x00000000
#define NV097_SET_BEGIN_PATCH3_TESSELATION_FIXED_STITCH                     0x00000001
#define NV097_SET_BEGIN_PATCH3_NUM_COEFFS                                        31:24

#define NV097_SET_END_PATCH                                                 0x00001df0

#define NV097_SET_BEGIN_END_SWATCH                                          0x00001df4
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD                                      3:0
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_END                           0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_BEGIN                         0x00000001
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH                                       7:4
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_CONTINUE                       0x00000000
#define NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_NEW                            0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW                                 11:8
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_FALSE                     0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_TRUE                      0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL                                15:12
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_FALSE                     0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_TRUE                      0x00000001
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH                                  19:16
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_FULL_HEIGHT                 0x00000000
#define NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_PARTIAL_HEIGHT              0x00000001
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH                                 31:20
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_FULL_WIDTH                 0x00000000
#define NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_PARTIAL_WIDTH              0x00000001

#define NV097_SET_BEGIN_END_CURVE                                           0x00001df8
#define NV097_SET_BEGIN_END_CURVE_CMD                                              3:0
#define NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA                        0x00000000
#define NV097_SET_BEGIN_END_CURVE_CMD_STRIP_CURVE                           0x00000001
#define NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE                      0x00000002
#define NV097_SET_BEGIN_END_CURVE_CMD_RIGHT_GUARD_CURVE                     0x00000003
#define NV097_SET_BEGIN_END_CURVE_CMD_OUTER_TRANSITION_CURVE                0x00000004
#define NV097_SET_BEGIN_END_CURVE_CMD_INNER_TRANSITION_CURVE                0x00000005
#define NV097_SET_BEGIN_END_CURVE_CMD_OUTER_END_PT                          0x00000006
#define NV097_SET_BEGIN_END_CURVE_CMD_INNER_END_PT                          0x00000007

#define NV097_SET_CURVE_COEFFICIENTS(i)                             (0x00001e00+(i)*4)
#define NV097_SET_CURVE_COEFFICIENTS_V                                            31:0

#define NV097_SET_BEGIN_TRANSITION0                                         0x00001e10
#define NV097_SET_BEGIN_TRANSITION0_POSITION_DEGREE                                3:0
#define NV097_SET_BEGIN_TRANSITION0_PARAM1_DEGREE                                  7:4
#define NV097_SET_BEGIN_TRANSITION0_PARAM2_DEGREE                                 11:8
#define NV097_SET_BEGIN_TRANSITION0_PARAM3_DEGREE                                15:12
#define NV097_SET_BEGIN_TRANSITION0_PARAM4_DEGREE                                19:16
#define NV097_SET_BEGIN_TRANSITION0_PARAM5_DEGREE                                23:20
#define NV097_SET_BEGIN_TRANSITION0_PARAM6_DEGREE                                27:24
#define NV097_SET_BEGIN_TRANSITION0_PARAM7_DEGREE                                31:28

#define NV097_SET_BEGIN_TRANSITION1                                         0x00001e14
#define NV097_SET_BEGIN_TRANSITION1_PARAM8_DEGREE                                  3:0
#define NV097_SET_BEGIN_TRANSITION1_PARAM9_DEGREE                                  7:4
#define NV097_SET_BEGIN_TRANSITION1_PARAM10_DEGREE                                11:8
#define NV097_SET_BEGIN_TRANSITION1_PARAM11_DEGREE                               15:12
#define NV097_SET_BEGIN_TRANSITION1_PARAM12_DEGREE                               19:16
#define NV097_SET_BEGIN_TRANSITION1_PARAM13_DEGREE                               23:20
#define NV097_SET_BEGIN_TRANSITION1_PARAM14_DEGREE                               27:24
#define NV097_SET_BEGIN_TRANSITION1_PARAM15_DEGREE                               31:28

#define NV097_SET_BEGIN_TRANSITION2                                         0x00001e18
#define NV097_SET_BEGIN_TRANSITION2_INSIDE_SEGMENTS                                9:0
#define NV097_SET_BEGIN_TRANSITION2_OUTSIDE_SEGMENTS                             19:10
#define NV097_SET_BEGIN_TRANSITION2_NUM_COEFFS                                   31:24

#define NV097_SET_END_TRANSITION                                            0x00001e1c

#define NV097_SET_SHADOW_ZSLOPE_THRESHOLD                                   0x00001e68
#define NV097_SET_SHADOW_ZSLOPE_THRESHOLD_V                                       31:0

#define NV097_SET_SHADOW_DEPTH_FUNC                                         0x00001e6c
#define NV097_SET_SHADOW_DEPTH_FUNC_V                                             31:0
#define NV097_SET_SHADOW_DEPTH_FUNC_V_NEVER                                 0x00000000
#define NV097_SET_SHADOW_DEPTH_FUNC_V_LESS                                  0x00000001
#define NV097_SET_SHADOW_DEPTH_FUNC_V_EQUAL                                 0x00000002
#define NV097_SET_SHADOW_DEPTH_FUNC_V_LEQUAL                                0x00000003
#define NV097_SET_SHADOW_DEPTH_FUNC_V_GREATER                               0x00000004
#define NV097_SET_SHADOW_DEPTH_FUNC_V_NOTEQUAL                              0x00000005
#define NV097_SET_SHADOW_DEPTH_FUNC_V_GEQUAL                                0x00000006
#define NV097_SET_SHADOW_DEPTH_FUNC_V_ALWAYS                                0x00000007

#define NV097_SET_SHADER_STAGE_PROGRAM                                      0x00001e70
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0                                      4:0
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE0_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1                                      9:5
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE1_DOT_PRODUCT                   0x00000011
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2                                    14:10
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_BRDF                          0x00000008
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_ST                        0x00000009
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_ZW                        0x0000000A
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_REFLECT_DIFFUSE           0x0000000B
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE2_DOT_PRODUCT                   0x00000011
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3                                    19:15
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_PROGRAM_NONE                  0x00000000
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_2D_PROJECTIVE                 0x00000001
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_3D_PROJECTIVE                 0x00000002
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_CUBE_MAP                      0x00000003
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_PASS_THROUGH                  0x00000004
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_CLIP_PLANE                    0x00000005
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BUMPENVMAP                    0x00000006
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BUMPENVMAP_LUMINANCE          0x00000007
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_BRDF                          0x00000008
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_ST                        0x00000009
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_ZW                        0x0000000A
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_REFLECT_SPECULAR          0x0000000C
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_STR_3D                    0x0000000D
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_STR_CUBE                  0x0000000E
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DEPENDENT_AR                  0x0000000F
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DEPENDENT_GB                  0x00000010
#define NV097_SET_SHADER_STAGE_PROGRAM_STAGE3_DOT_REFLECT_SPECULAR_CONST    0x00000012

#define NV097_SET_EYE_VECTOR(i)                                     (0x0000181c+(i)*4)
#define NV097_SET_EYE_VECTOR_V                                                    31:0

#define NV097_SET_DOT_RGBMAPPING                                            0x00001e74
#define NV097_SET_DOT_RGBMAPPING_STAGE1                                            3:0
#define NV097_SET_DOT_RGBMAPPING_STAGE1_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE1_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE1_HILO_HEMISPHERE_NV                  0x00000007
#define NV097_SET_DOT_RGBMAPPING_STAGE2                                            7:4
#define NV097_SET_DOT_RGBMAPPING_STAGE2_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE2_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE2_HILO_HEMISPHERE_NV                  0x00000007
#define NV097_SET_DOT_RGBMAPPING_STAGE3                                           11:8
#define NV097_SET_DOT_RGBMAPPING_STAGE3_ZERO_TO_1                           0x00000000
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_MS                     0x00000001
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_GL                     0x00000002
#define NV097_SET_DOT_RGBMAPPING_STAGE3_MINUS_1_TO_1_NV                     0x00000003
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_1                              0x00000004
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_MS                  0x00000005
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_GL                  0x00000006
#define NV097_SET_DOT_RGBMAPPING_STAGE3_HILO_HEMISPHERE_NV                  0x00000007

#define NV097_SET_SHADER_CLIP_PLANE_MODE                                    0x000017f8
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S                                  0:0
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T                                  1:1
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R                                  2:2
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q                                  3:3
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE0_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S                                  4:4
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T                                  5:5
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R                                  6:6
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q                                  7:7
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE1_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S                                  8:8
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T                                  9:9
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R                                10:10
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q                                11:11
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE2_Q_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S                                12:12
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_S_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T                                13:13
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_T_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R                                14:14
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_R_CLIPGEZ                   0x00000001
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q                                15:15
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q_CLIPLTZ                   0x00000000
#define NV097_SET_SHADER_CLIP_PLANE_MODE_STAGE3_Q_CLIPGEZ                   0x00000001

#define NV097_SET_SHADER_OTHER_STAGE_INPUT                                  0x00001e78
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE1                                 15:0
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE1_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2                                19:16
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE2_INSTAGE_1                 0x00000001
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3                                23:20
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_0                 0x00000000
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_1                 0x00000001
#define NV097_SET_SHADER_OTHER_STAGE_INPUT_STAGE3_INSTAGE_2                 0x00000002

#define NV097_SET_SPECULAR_FOG_FACTOR(i)                            (0x00001e20+(i)*4)
#define NV097_SET_SPECULAR_FOG_FACTOR_BLUE                                         7:0
#define NV097_SET_SPECULAR_FOG_FACTOR_GREEN                                       15:8
#define NV097_SET_SPECULAR_FOG_FACTOR_RED                                        23:16
#define NV097_SET_SPECULAR_FOG_FACTOR_ALPHA                                      31:24

#define NV097_SET_COMBINER_CONTROL                                          0x00001e60
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT                                 7:0
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_ONE                      0x00000001
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_TWO                      0x00000002
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_THREE                    0x00000003
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_FOUR                     0x00000004
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_FIVE                     0x00000005
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_SIX                      0x00000006
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_SEVEN                    0x00000007
#define NV097_SET_COMBINER_CONTROL_ITERATION_COUNT_EIGHT                    0x00000008
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT                                     11:8
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT_LSB                           0x00000000
#define NV097_SET_COMBINER_CONTROL_MUX_SELECT_MSB                           0x00000001
#define NV097_SET_COMBINER_CONTROL_FACTOR0                                       15:12
#define NV097_SET_COMBINER_CONTROL_FACTOR0_SAME_FACTOR_ALL                  0x00000000
#define NV097_SET_COMBINER_CONTROL_FACTOR0_EACH_STAGE                       0x00000001
#define NV097_SET_COMBINER_CONTROL_FACTOR1                                       31:16
#define NV097_SET_COMBINER_CONTROL_FACTOR1_SAME_FACTOR_ALL                  0x00000000
#define NV097_SET_COMBINER_CONTROL_FACTOR1_EACH_STAGE                       0x00000001

#define NV097_SET_COMBINER_COLOR_OCW(i)                             (0x00001e40+(i)*4)
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB                              31:19
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB_DISABLE                 0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_AB_AB_DST_ENABLE           0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD                              18:18
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD_DISABLE                 0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_BLUETOALPHA_CD_CD_DST_ENABLE           0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_OP                                          17:15
#define NV097_SET_COMBINER_COLOR_OCW_OP_NOSHIFT                             0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_OP_NOSHIFT_BIAS                        0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY1                        0x00000002
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY1_BIAS                   0x00000003
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTLEFTBY2                        0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_OP_SHIFTRIGHTBY1                       0x00000006
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE                                  14:14
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE_FALSE                       0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_MUX_ENABLE_TRUE                        0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE                               13:13
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE_FALSE                    0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_AB_DOT_ENABLE_TRUE                     0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE                               12:12
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE_FALSE                    0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_CD_DOT_ENABLE_TRUE                     0x00000001
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST                                      11:8
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_0                          0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_4                          0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_5                          0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_8                          0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_9                          0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_A                          0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_B                          0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_C                          0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_D                          0x0000000D
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST                                        7:4
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_D                           0x0000000D
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST                                        3:0
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_0                           0x00000000
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_4                           0x00000004
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_5                           0x00000005
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_8                           0x00000008
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_9                           0x00000009
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_A                           0x0000000A
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_B                           0x0000000B
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_C                           0x0000000C
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_D                           0x0000000D

#define NV097_SET_TRANSFORM_EXECUTION_MODE                                  0x00001e94
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE                                    1:0
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE_FIXED                       0x00000000
#define NV097_SET_TRANSFORM_EXECUTION_MODE_MODE_PROGRAM                     0x00000002
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE                             31:2
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE_USER                  0x00000000
#define NV097_SET_TRANSFORM_EXECUTION_MODE_RANGE_MODE_PRIV                  0x00000001

#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN                            0x00001e98
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V                                31:0
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V_READ_ONLY                0x00000000
#define NV097_SET_TRANSFORM_PROGRAM_CXT_WRITE_EN_V_READ_WRITE               0x00000001

#define NV097_SET_TRANSFORM_PROGRAM_LOAD                                    0x00001e9c
#define NV097_SET_TRANSFORM_PROGRAM_LOAD_PROG_LD_PTR                              31:0

#define NV097_SET_TRANSFORM_PROGRAM_START                                   0x00001ea0
#define NV097_SET_TRANSFORM_PROGRAM_START_V                                       31:0

#define NV097_SET_TRANSFORM_PROGRAM(i)                              (0x00000b00+(i)*4)
#define NV097_SET_TRANSFORM_PROGRAM_V                                             31:0

#define NV097_SET_TRANSFORM_CONSTANT_LOAD                                   0x00001ea4
#define NV097_SET_TRANSFORM_CONSTANT_LOAD_CONST_LD_PTR                            31:0

#define NV097_SET_TRANSFORM_CONSTANT(i)                             (0x00000b80+(i)*4)
#define NV097_SET_TRANSFORM_CONSTANT_V                                            31:0

#define NV097_SET_TRANSFORM_DATA(i)                                 (0x00001e80+(i)*4)
#define NV097_SET_TRANSFORM_DATA_V                                                31:0

#define NV097_LAUNCH_TRANSFORM_PROGRAM                                      0x00001e90
#define NV097_LAUNCH_TRANSFORM_PROGRAM_V                                          31:0

#define NV097_SET_TWO_SIDE_LIGHT_EN                                         0x000017c4
#define NV097_SET_TWO_SIDE_LIGHT_EN_V                                             31:0
#define NV097_SET_TWO_SIDE_LIGHT_EN_V_FALSE                                 0x00000000
#define NV097_SET_TWO_SIDE_LIGHT_EN_V_TRUE                                  0x00000001

#define NV097_SET_BACK_SCENE_AMBIENT_COLOR(i)                       (0x000017a0+(i)*4)
#define NV097_SET_BACK_SCENE_AMBIENT_COLOR_V                                      31:0

#define NV097_SET_BACK_MATERIAL_EMISSION(i)                         (0x000017b0+(i)*4)
#define NV097_SET_BACK_MATERIAL_EMISSION_V                                        31:0

#define NV097_CLEAR_REPORT_VALUE                                            0x000017c8
#define NV097_CLEAR_REPORT_VALUE_TYPE                                             31:0
#define NV097_CLEAR_REPORT_VALUE_TYPE_ZPASS_PIXEL_CNT                       0x00000001

#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE                                  0x000017cc
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V                                      31:0
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V_FALSE                          0x00000000
#define NV097_SET_ZPASS_PIXEL_COUNT_ENABLE_V_TRUE                           0x00000001

#define NV097_GET_REPORT                                                    0x000017d0
#define NV097_GET_REPORT_OFFSET                                                   23:0
#define NV097_GET_REPORT_TYPE                                                    31:24
#define NV097_GET_REPORT_TYPE_ZPASS_PIXEL_CNT                               0x00000001

#define NV097_DEBUG_INIT(i)                                         (0x00001fc0+(i)*4)
#define NV097_DEBUG_INIT_V                                                        31:0
#define NV097_TYPEDEF                                              Nv20KelvinPrimitive
#define NV097_SET_OBJECT                                                  (0x00000000)


// XXXmjc Shaun Ho and John Montrym will roll these into the master file at some point.
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_A_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_B_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_C_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_ZERO              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_0
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_CONST0            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_1
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_CONST1            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_2
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_FOG               NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_3
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_4
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_5
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX0              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_8
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX1              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_9
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX2              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_A
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_TEX3              NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_B
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPARE0            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_C
#define NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_SPARE1            NV097_SET_COMBINER_ALPHA_ICW_D_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_A_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_B_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_C_SOURCE_REG_D

#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_ZERO              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_0
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_CONST0            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_1
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_CONST1            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_2
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_FOG               NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_3
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_DIFFUSE           NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_4
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPECULAR          NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_5
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX0              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_8
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX1              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_9
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX2              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_A
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_TEX3              NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_B
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPARE0            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_C
#define NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_SPARE1            NV097_SET_COMBINER_COLOR_ICW_D_SOURCE_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_ZERO               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_DIFFUSE            NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPECULAR           NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX0               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX1               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX2               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_TEX3               NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPARE0             NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_SPARE1             NV097_SET_COMBINER_ALPHA_OCW_SUM_DST_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_ZERO                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_DIFFUSE             NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPECULAR            NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX0                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX1                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX2                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_TEX3                NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPARE0              NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_SPARE1              NV097_SET_COMBINER_ALPHA_OCW_AB_DST_REG_D

#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_ZERO                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_0
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_DIFFUSE             NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_4
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPECULAR            NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_5
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX0                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_8
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX1                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_9
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX2                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_A
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_TEX3                NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_B
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPARE0              NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_C
#define NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_SPARE1              NV097_SET_COMBINER_ALPHA_OCW_CD_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_ZERO               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_DIFFUSE            NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPECULAR           NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX0               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX1               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX2               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_TEX3               NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPARE0             NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_SPARE1             NV097_SET_COMBINER_COLOR_OCW_SUM_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_ZERO                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_DIFFUSE             NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPECULAR            NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX0                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX1                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX2                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_TEX3                NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPARE0              NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_SPARE1              NV097_SET_COMBINER_COLOR_OCW_AB_DST_REG_D

#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_ZERO                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_0
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_DIFFUSE             NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_4
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPECULAR            NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_5
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX0                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_8
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX1                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_9
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX2                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_A
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_TEX3                NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_B
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPARE0              NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_C
#define NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_SPARE1              NV097_SET_COMBINER_COLOR_OCW_CD_DST_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_A_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_B_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_C_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW0_D_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_E_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_F_SOURCE_REG_D

#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_ZERO       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_0
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_CONST0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_1
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_CONST1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_2
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_FOG        NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_3
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_DIFFUSE    NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_4
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPECULAR   NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_5
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX0       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_8
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX1       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_9
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX2       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_A
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_TEX3       NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_B
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPARE0     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_C
#define NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_SPARE1     NV097_SET_COMBINER_SPECULAR_FOG_CW1_G_SOURCE_REG_D


/* class NV15_CONTEXT_SURFACE_SWIZZLED */
#define  NV15_CONTEXT_SURFACE_SWIZZLED                             (0x0000009E)
/* NvNotification[] elements */
#define NV09E_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV09E_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV09E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV09E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV09E_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV09E_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV09E_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV09E_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x01e];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextDmaImage;      /* NV01_CONTEXT_DMA                 0184-0187*/
 NvV32 Reserved01[0x05e];
 NvV32 SetFormat;               /* height_width_color V8_V8_V16     0300-0303*/
 NvU32 SetOffset;               /* byte offset of top-left pixel    0304-0307*/
 NvV32 Reserved02[0x73e];
} Nv09eTypedef, Nv15ContextSurfaceSwizzled;
#define NV09E_TYPEDEF                                Nv15ContextSurfaceSwizzled
/* dma method offsets, fields, and values */
#define NV09E_SET_OBJECT                                           (0x00000000)
#define NV09E_NO_OPERATION                                         (0x00000100)
#define NV09E_NOTIFY                                               (0x00000104)
#define NV09E_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV09E_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV09E_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV09E_SET_CONTEXT_DMA_IMAGE                                (0x00000184)
#define NV09E_SET_FORMAT                                           (0x00000300)
#define NV09E_SET_FORMAT_COLOR                                     15:0
#define NV09E_SET_FORMAT_COLOR_LE_Y8                               (0x00000001)
#define NV09E_SET_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5                (0x00000002)
#define NV09E_SET_FORMAT_COLOR_LE_X1R5G5B5_O1R5G5B5                (0x00000003)
#define NV09E_SET_FORMAT_COLOR_LE_R5G6B5                           (0x00000004)
#define NV09E_SET_FORMAT_COLOR_LE_Y16                              (0x00000005)
#define NV09E_SET_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8                (0x00000006)
#define NV09E_SET_FORMAT_COLOR_LE_X8R8G8B8_O8R8G8B8                (0x00000007)
#define NV09E_SET_FORMAT_COLOR_LE_X1A7R8G8B8_Z1A7R8G8B8            (0x00000008)
#define NV09E_SET_FORMAT_COLOR_LE_X1A7R8G8B8_O1A7R8G8B8            (0x00000009)
#define NV09E_SET_FORMAT_COLOR_LE_A8R8G8B8                         (0x0000000A)
#define NV09E_SET_FORMAT_COLOR_LE_Y32                              (0x0000000B)
#define NV09E_SET_FORMAT_WIDTH                                     23:16
#define NV09E_SET_FORMAT_WIDTH_2                                   (0x00000001)
#define NV09E_SET_FORMAT_WIDTH_4                                   (0x00000002)
#define NV09E_SET_FORMAT_WIDTH_8                                   (0x00000003)
#define NV09E_SET_FORMAT_WIDTH_16                                  (0x00000004)
#define NV09E_SET_FORMAT_WIDTH_32                                  (0x00000005)
#define NV09E_SET_FORMAT_WIDTH_64                                  (0x00000006)
#define NV09E_SET_FORMAT_WIDTH_128                                 (0x00000007)
#define NV09E_SET_FORMAT_WIDTH_256                                 (0x00000008)
#define NV09E_SET_FORMAT_WIDTH_512                                 (0x00000009)
#define NV09E_SET_FORMAT_WIDTH_1024                                (0x0000000A)
#define NV09E_SET_FORMAT_WIDTH_2048                                (0x0000000B)
#define NV09E_SET_FORMAT_HEIGHT                                    31:24
#define NV09E_SET_FORMAT_HEIGHT_2                                  (0x00000001)
#define NV09E_SET_FORMAT_HEIGHT_4                                  (0x00000002)
#define NV09E_SET_FORMAT_HEIGHT_8                                  (0x00000003)
#define NV09E_SET_FORMAT_HEIGHT_16                                 (0x00000004)
#define NV09E_SET_FORMAT_HEIGHT_32                                 (0x00000005)
#define NV09E_SET_FORMAT_HEIGHT_64                                 (0x00000006)
#define NV09E_SET_FORMAT_HEIGHT_128                                (0x00000007)
#define NV09E_SET_FORMAT_HEIGHT_256                                (0x00000008)
#define NV09E_SET_FORMAT_HEIGHT_512                                (0x00000009)
#define NV09E_SET_FORMAT_HEIGHT_1024                               (0x0000000A)
#define NV09E_SET_FORMAT_HEIGHT_2048                               (0x0000000B)
#define NV09E_SET_OFFSET                                           (0x00000304)


/* class NV15_IMAGE_BLIT */
#define  NV15_IMAGE_BLIT                                           (0x0000009F)
/* NvNotification[] elements */
#define NV09F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV09F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV09F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV09F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV09F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV09F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV09F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV09F_NOTIFY_*                   0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 SyncSetRead;             /*                                  0120-0123*/
 NvV32 SyncSetWrite;            /*                                  0124-0127*/
 NvV32 SyncSetModulo;           /*                                  0128-012b*/
 NvV32 SyncIncrementWrite;      /* ignored                          012c-012f*/
 NvV32 SyncStall;               /* ignored                          0130-0133*/
 NvV32 SyncIncrementReadRange;  /* scanline range to check 0 or 1   0134-0137*/
 NvV32 Reserved02[0x012];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved03[0x057];
 NvV32 SetOperation;            /* NV09F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved04[0x73d];
} Nv09fTypedef, Nv12ImageBlit;
#define NV09F_TYPEDEF                                             Nv12ImageBlit
/* dma method offsets, fields, and values */
#define NV09F_SET_OBJECT                                           (0x00000000)
#define NV09F_NO_OPERATION                                         (0x00000100)
#define NV09F_NOTIFY                                               (0x00000104)
#define NV09F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV09F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV09F_SYNC_SET_READ                                        (0x00000120)
#define NV09F_SYNC_SET_WRITE                                       (0x00000124)
#define NV09F_SYNC_SET_MODULO                                      (0x00000128)
#define NV09F_SYNC_INCREMENT_WRITE                                 (0x0000012C)
#define NV09F_SYNC_STALL                                           (0x00000130)
#define NV09F_SYNC_INCREMENT_READ_RANGE                            (0x00000134)
#define NV09F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV09F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV09F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV09F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV09F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV09F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV09F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV09F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV09F_SET_OPERATION                                        (0x000002FC)
#define NV09F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV09F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV09F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV09F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV09F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV09F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV09F_CONTROL_POINT_IN                                     (0x00000300)
#define NV09F_CONTROL_POINT_IN_X                                   15:0
#define NV09F_CONTROL_POINT_IN_Y                                   31:16
#define NV09F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV09F_CONTROL_POINT_OUT_X                                  15:0
#define NV09F_CONTROL_POINT_OUT_Y                                  31:16
#define NV09F_SIZE                                                 (0x00000308)
#define NV09F_SIZE_WIDTH                                           15:0
#define NV09F_SIZE_HEIGHT                                          31:16


/* class NV20_IMAGE_BLIT */
#define  NV20_IMAGE_BLIT                                            (0x0000205F)
/* NvNotification[] elements */
#define NV205F_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NV205F_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV205F_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV205F_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV205F_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV205F_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV205F_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 NoOperation;             /* ignored                          0100-0103*/
 NvV32 Notify;                  /* NV205F_NOTIFY_*                  0104-0107*/
 NvV32 Reserved00[0x006];
 NvV32 SyncSetRead;             /*                                  0120-0123*/
 NvV32 SyncSetWrite;            /*                                  0124-0127*/
 NvV32 SyncSetModulo;           /*                                  0128-012b*/
 NvV32 SyncIncrementWrite;      /* ignored                          012c-012f*/
 NvV32 SyncStall;               /* ignored                          0130-0133*/
 NvV32 SyncIncrementReadRange;  /* ignored                          0134-0137*/
 NvV32 Reserved02[0x012];
 NvV32 SetContextDmaNotifies;   /* NV01_CONTEXT_DMA                 0180-0183*/
 NvV32 SetContextColorKey;      /* NV04_CONTEXT_COLOR_KEY           0184-0187*/
 NvV32 SetContextClipRectangle; /* NV01_CONTEXT_CLIP_RECTANGLE      0188-018b*/
 NvV32 SetContextPattern;       /* NV04_CONTEXT_PATTERN             018c-018f*/
 NvV32 SetContextRop;           /* NV03_CONTEXT_ROP                 0190-0193*/
 NvV32 SetContextBeta1;         /* NV01_CONTEXT_BETA                0194-0197*/
 NvV32 SetContextBeta4;         /* NV04_CONTEXT_BETA                0198-019b*/
 NvV32 SetContextSurfaces;      /* NV04_CONTEXT_SURFACES_2D         019c-019f*/
 NvV32 Reserved03[0x057];
 NvV32 SetOperation;            /* NV205F_SET_OPERATION_*            02fc-02ff*/
 NvV32 ControlPointIn;          /* y_x U16_U16, pixels              0300-0303*/
 NvV32 ControlPointOut;         /* y_x S16_S16, pixels              0304-0307*/
 NvV32 Size;                    /* height_width U16_U16 in pixels   0308-030b*/
 NvV32 Reserved04[0x73d];
} Nv205fTypedef, Nv20ImageBlit;
#define NV205F_TYPEDEF                                             Nv20ImageBlit
/* dma method offsets, fields, and values */
#define NV205F_SET_OBJECT                                           (0x00000000)
#define NV205F_NO_OPERATION                                         (0x00000100)
#define NV205F_NOTIFY                                               (0x00000104)
#define NV205F_NOTIFY_WRITE_ONLY                                    (0x00000000)
#define NV205F_NOTIFY_WRITE_THEN_AWAKEN                             (0x00000001)
#define NV205F_SYNC_SET_READ                                        (0x00000120)
#define NV205F_SYNC_SET_WRITE                                       (0x00000124)
#define NV205F_SYNC_SET_MODULO                                      (0x00000128)
#define NV205F_SYNC_INCREMENT_WRITE                                 (0x0000012C)
#define NV205F_SYNC_STALL                                           (0x00000130)
#define NV205F_SYNC_INCREMENT_READ_RANGE                            (0x00000134)
#define NV205F_SET_CONTEXT_DMA_NOTIFIES                             (0x00000180)
#define NV205F_SET_CONTEXT_COLOR_KEY                                (0x00000184)
#define NV205F_SET_CONTEXT_CLIP_RECTANGLE                           (0x00000188)
#define NV205F_SET_CONTEXT_PATTERN                                  (0x0000018C)
#define NV205F_SET_CONTEXT_ROP                                      (0x00000190)
#define NV205F_SET_CONTEXT_BETA1                                    (0x00000194)
#define NV205F_SET_CONTEXT_BETA4                                    (0x00000198)
#define NV205F_SET_CONTEXT_SURFACES                                 (0x0000019C)
#define NV205F_SET_OPERATION                                        (0x000002FC)
#define NV205F_SET_OPERATION_SRCCOPY_AND                            (0x00000000)
#define NV205F_SET_OPERATION_ROP_AND                                (0x00000001)
#define NV205F_SET_OPERATION_BLEND_AND                              (0x00000002)
#define NV205F_SET_OPERATION_SRCCOPY                                (0x00000003)
#define NV205F_SET_OPERATION_SRCCOPY_PREMULT                        (0x00000004)
#define NV205F_SET_OPERATION_BLEND_PREMULT                          (0x00000005)
#define NV205F_CONTROL_POINT_IN                                     (0x00000300)
#define NV205F_CONTROL_POINT_IN_X                                   15:0
#define NV205F_CONTROL_POINT_IN_Y                                   31:16
#define NV205F_CONTROL_POINT_OUT                                    (0x00000304)
#define NV205F_CONTROL_POINT_OUT_X                                  15:0
#define NV205F_CONTROL_POINT_OUT_Y                                  31:16
#define NV205F_SIZE                                                 (0x00000308)
#define NV205F_SIZE_WIDTH                                           15:0
#define NV205F_SIZE_HEIGHT                                          31:16


/* class NV03_DEVICE_XX */
#define  NV03_DEVICE_XX                                            (0x000000FF)
/* NvNotification[] fields and values */
#define NV0FF_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0FFTypedef, Nv03DeviceXX;
#define  NV0FF_TYPEDEF                                             Nv03DeviceXX

typedef V032 Nvff0Typedef;

typedef V032 Nvff1Typedef;

typedef V032 Nvff2Typedef;

typedef V032 Nvff3Typedef;

typedef V032 Nvff4Typedef;


/* class NV_CONTEXT_ERROR_TO_MEMORY */
#define  NV_CONTEXT_ERROR_TO_MEMORY                                (0x00000FF5)
/* NvNotification[] elements */
#define NVFF5_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF5_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF5_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF5_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF5_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} Nvff5Typedef, NvContextErrorToMemory;
#define NVFF5_TYPEDEF                                    NvContextErrorToMemory
/* dma method offsets, fields, and values */
#define NVFF5_SET_OBJECT(s)                              (0x00040000+8192*(s))
#define NVFF5_NO_OPERATION(s)                            (0x00040100+8192*(s))
#define NVFF5_NOTIFY(s)                                  (0x00040104+8192*(s))
#define NVFF5_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF5_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF5_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00040180+8192*(s))
#define NVFF5_SET_DMA_SPECIFIER(s)                       (0x000C0300+8192*(s))
/* obsolete stuff */
#define nvContextErrorToMemory                           NvContextErrorToMemory


/* class NV_VIDEO_COLOR_KEY */
#define  NV_VIDEO_COLOR_KEY                                        (0x00000FF6)
/* NvNotification[] elements */
#define NVFF6_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF6_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF6_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF6_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF6_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput[3];        /* NV1_PATCHCORD_VIDEO               0204-020b*/
 V032 Reserved02[0x03c];
 V032 SetColorFormat;          /* NVFF6_SET_COLOR_FORMAT_*          0300-0303*/
 V032 SetColorKey;             /* color to compare with             0304-0307*/
 V032 SetPoint;                /* y_x, S16_S16 in pixels, top-left  0308-030b*/
 V032 SetSize;                 /* height_width U16_U16 in pixels    030c-030f*/
 V032 Reserved03[0x73c];
} Nvff6Typedef, NvVideoColorKey;
#define NVFF6_TYPEDEF                                    NvVideoColorKey
/* dma method offsets, fields, and values */
#define NVFF6_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF6_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF6_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF6_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF6_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF6_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF6_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF6_SET_VIDEO_INPUT(s,i)                       (0x00000204+8192*(s)+\
                                                                       4*(i))
#define NVFF6_SET_COLOR_FORMAT(s)                        (0x00000300+8192*(s))
#define NVFF6_SET_COLOR_FORMAT_LE_X16A8Y8                (0x00000001)
#define NVFF6_SET_COLOR_FORMAT_LE_X24Y8                  (0x00000002)
#define NVFF6_SET_COLOR_FORMAT_LE_X16A1R5G5B5            (0x00000003)
#define NVFF6_SET_COLOR_FORMAT_LE_X17R5G5B5              (0x00000004)
#define NVFF6_SET_COLOR_FORMAT_LE_A16R5G6B5              (0x00000005)
#define NVFF6_SET_COLOR_FORMAT_LE_A8R8G8B8               (0x00000006)
#define NVFF6_SET_COLOR_FORMAT_LE_X8R8G8B8               (0x00000007)
#define NVFF6_SET_COLOR_FORMAT_LE_A16Y16                 (0x00000008)
#define NVFF6_SET_COLOR_FORMAT_LE_X16Y16                 (0x00000009)
#define NVFF6_SET_COLOR_KEY(s)                           (0x00000304+8192*(s))
#define NVFF6_SET_POINT(s)                               (0x00000308+8192*(s))
#define NVFF6_SET_POINT_X                                15:0
#define NVFF6_SET_POINT_Y                                31:16
#define NVFF6_SET_SIZE(s)                                (0x0000030C+8192*(s))
#define NVFF6_SET_SIZE_WIDTH                             15:0
#define NVFF6_SET_SIZE_HEIGHT                            31:16
/* obsolete stuff */
#define nvVideoColorKey                                  NvVideoColorKey


/* class NV_VIDEO_SCALER */
#define  NV_VIDEO_SCALER                                           (0x00000FF7)
/* NvNotification[] elements */
#define NVFF7_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFF7_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF7_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF7_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF7_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput;           /* NV1_PATCHCORD_VIDEO               0204-0207*/
 V032 Reserved02[0x03e];
 V032 SetDeltaDuDx;            /* S12d20 ratio du/dx                0300-0303*/
 V032 SetDeltaDvDy;            /* S12d20 ratio dv/dy                0304-0307*/
 V032 SetPoint;                /* y_x S16_S16 in pixels, top-left   0308-030b*/
 V032 Reserved03[0x73d];
} Nvff7Typedef, NvVideoScaler;
#define NVFF7_TYPEDEF                                    NvVideoScaler
/* dma method offsets, fields, and values */
#define NVFF7_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF7_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF7_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF7_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF7_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF7_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF7_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF7_SET_VIDEO_INPUT(s)                         (0x00000204+8192*(s))
#define NVFF7_SET_DELTA_DU_DX(s)                         (0x00000300+8192*(s))
#define NVFF7_SET_DELTA_DV_DY(s)                         (0x00000304+8192*(s))
#define NVFF7_SET_POINT(s)                               (0x00000308+8192*(s))
#define NVFF7_SET_POINT_X                                15:0
#define NVFF7_SET_POINT_Y                                31:16
/* obsolete stuff */
#define nvVideoScaler                                    NvVideoScaler


/* class NV_VIDEO_FROM_MEMORY */
#define  NV_VIDEO_FROM_MEMORY                                      (0x00000FF8)
/* NvNotification[] elements */
#define NVFF8_NOTIFIERS_NOTIFY                                     (0)
#define NVFF8_NOTIFIERS_IMAGE_SCAN(b)                              (1+(b))
#define NVFF8_NOTIFIERS_GET_OFFSET_NOTIFY(b)                       (3+(b))
/* NvNotification[] fields and values */
#define NVFF8_NOTIFICATION_INFO16_BUFFER_NOT_STARTED               (0x0001)
#define NVFF8_NOTIFICATION_INFO16_BUFFER_OFFSET_VALID              (0x0002)
#define NVFF8_NOTIFICATION_INFO16_BUFFER_DONE                      (0x0003)
#define NVFF8_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF8_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF8_NOTIFICATION_STATUS_ERROR_BAD_PATCH                  (0x0400)
#define NVFF8_NOTIFICATION_STATUS_WARNING_INVALID_DATA             (0x0001)
#define NVFF8_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF8_NOTIFY_*                    0104-0107*/
 V032 StopTransfer;            /* NVFF8_STOP_TRANSFER_VALUE         0108-010b*/
 V032 SetPatch;                /* NVFF8_SET_PATCH_*                 010c-010f*/
 V032 Reserved00[0x01c];
 V032 SetContextDmaNotifies;   /* NV1_CONTEXT_DMA_TO_MEMORY         0180-0183*/
 V032 SetContextDmaImage[2];   /* NV1_CONTEXT_DMA_FROM_MEMORY       0184-018b*/
 V032 Reserved01[0x01d];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 Reserved02[0x03f];
 struct {                      /* start of methods in array         0300-    */
  U032 offset;                 /* byte offset of top-left pixel       00-  03*/
  U032 pitch;                  /* bytes, vertical pixel delta         04-  07*/
  V032 size;                   /* height_width U16_U16 in pixels      08-  0b*/
  V032 format;                 /* field_color V16_V16                 0c-  0f*/
  V032 notify;                 /* NVFF8_IMAGE_SCAN_NOTIFY_*           10-  13*/
 } ImageScan[2];               /* end of methods in array               -0327*/
 V032 GetOffsetNotify[2];      /* NVFF8_GET_OFFSET_NOTIFY_*         0328-032f*/
 V032 Reserved03[0x734];
} Nvff8Typedef, NvVideoFromMemory;
#define NVFF8_TYPEDEF                                    NvVideoFromMemory
/* dma method offsets, fields, and values */
#define NVFF8_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF8_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF8_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF8_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF8_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF8_STOP_TRANSFER(s)                           (0x00000108+8192*(s))
#define NVFF8_STOP_TRANSFER_VALUE                        (0x00000000)
#define NVFF8_SET_PATCH(s)                               (0x0000010C+8192*(s))
#define NVFF8_SET_PATCH_INVALIDATE                       (0x00000000)
#define NVFF8_SET_PATCH_VALIDATE                         (0x00000001)
#define NVFF8_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF8_SET_CONTEXT_DMA_IMAGE(s,b)                 (0x00000184+8192*(s)+\
                                                                        4*(b))
#define NVFF8_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF8_IMAGE_SCAN(s,b)                            (0x00000300+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_OFFSET(s,b)                     (0x00000300+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_PITCH(s,b)                      (0x00000304+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_SIZE(s,b)                       (0x00000308+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_SIZE_WIDTH                      15:0
#define NVFF8_IMAGE_SCAN_SIZE_HEIGHT                     31:16
#define NVFF8_IMAGE_SCAN_FORMAT(s,b)                     (0x0000030C+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR                    15:0
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_Y8              (0x00000001)
#define NV_VFM_FORMAT_COLOR_LE_Y8_P4                      0x00000001
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_V8YB8U8YA8      (0x00000002)
#define NV_VFM_FORMAT_COLOR_LE_V8Y8U8Y8                   0x00000002
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_YB8V8YA8U8      (0x00000003)
#define NV_VFM_FORMAT_COLOR_LE_Y8V8Y8U8                   0x00000003
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_GY1R5G5B5       (0x00000004)
#define NV_VFM_FORMAT_COLOR_LE_X1R5G5B5_P2                0x00000004
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_R5G6B5          (0x00000005)
#define NV_VFM_FORMAT_COLOR_LE_R5G6B5_P2                  0x00000005
#define NVFF8_IMAGE_SCAN_FORMAT_COLOR_LE_GY1X7R8G8B8     (0x00000006)
#define NV_VFM_FORMAT_COLOR_LE_X8R8G8B8                   0x00000006
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD                    31:16
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_PROGRESSIVE        (0x00000001)
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_EVEN_FIELD         (0x00000002)
#define NVFF8_IMAGE_SCAN_FORMAT_FIELD_ODD_FIELD          (0x00000003)
#define NVFF8_IMAGE_SCAN_NOTIFY(s,b)                     (0x00000310+8192*(s)+\
                                                                       20*(b))
#define NVFF8_IMAGE_SCAN_NOTIFY_WRITE_ONLY               (0x00000000)
#define NVFF8_IMAGE_SCAN_NOTIFY_WRITE_THEN_AWAKEN        (0x00000001)
#define NVFF8_GET_OFFSET_NOTIFY(s,b)                     (0x00000328+8192*(s)+\
                                                                        4*(b))
#define NVFF8_GET_OFFSET_NOTIFY_WRITE_ONLY               (0x00000000)
#define NVFF8_GET_OFFSET_NOTIFY_WRITE_THEN_AWAKEN        (0x00000001)
/* obsolete stuff */
#define nvVideoFromMemory                                NvVideoFromMemory
#define SetImageCtxDma                                   SetContextDmaImage
#define SetImageNotifyCtxDma                             SetContextDmaNotifies


/* class NV_VIDEO_COLORMAP */
#define  NV_VIDEO_COLORMAP                                         (0x00000FF9)
/* NvNotification[] elements */
#define NVFF9_NOTIFIERS_NOTIFY                                     (0)
#define NVFF9_NOTIFIERS_COLORMAP_DIRTY_NOTIFY                      (1)
/* NvNotification[] fields and values */
#define NVFF9_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFF9_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFF9_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFF9_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 SetContextDmaColormap;   /* NV_CONTEXT_DMA_FROM_MEMORY        0184-0187*/
 V032 Reserved01[0x01e];
 V032 SetVideoOutput;          /* NV1_PATCHCORD_VIDEO               0200-0203*/
 V032 SetVideoInput;           /* NV1_PATCHCORD_VIDEO               0204-0207*/
 V032 Reserved02[0x040];
 U032 SetColormapStart;        /* offset in bytes                   0308-030b*/
 U032 SetColormapLength;       /* in bytes                          030c-030f*/
 U032 ColormapDirtyStart;      /* start of region to update         0310-0313*/
 U032 ColormapDirtyLength;     /* in bytes, starts transfer         0314-0317*/
 V032 Reserved03[0x73a];
} Nvff9Typedef, NvVideoColormap;
#define NVFF9_TYPEDEF                                    NvVideoColormap
/* dma method offsets, fields, and values */
#define NVFF9_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFF9_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFF9_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFF9_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFF9_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFF9_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFF9_SET_CONTEXT_DMA_COLORMAP(s)                (0x00000184+8192*(s))
#define NVFF9_SET_VIDEO_OUTPUT(s)                        (0x00000200+8192*(s))
#define NVFF9_SET_VIDEO_INPUT(s)                         (0x00000204+8192*(s))
#define NVFF9_SET_COLORMAP_START(s)                      (0x00000308+8192*(s))
#define NVFF9_SET_COLORMAP_LENGTH(s)                     (0x0000030C+8192*(s))
#define NVFF9_COLORMAP_DIRTY_START(s)                    (0x00000310+8192*(s))
#define NVFF9_COLORMAP_DIRTY_LENGTH(s)                   (0x00000314+8192*(s))
/* obsolete stuff */
#define nvVideoColormap                                  NvVideoColormap


/* class NV_VIDEO_SINK */
#define  NV_VIDEO_SINK                                             (0x00000FFA)
/* NvNotification[] elements */
#define NVFFA_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFA_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFA_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFA_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFA_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x01f];
 V032 SetVideoInput[64];       /* NV1_PATCHCORD_VIDEO               0200-02ff*/
 V032 Reserved02[0x740];
} NvffaTypedef, NvVideoSink;
#define NVFFA_TYPEDEF                                    NvVideoSink
/* dma method offsets, fields, and values */
#define NVFFA_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFA_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFA_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFA_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFA_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFA_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFA_SET_VIDEO_INPUT(s,i)                       (0x00000200+8192*(s)+\
                                                                        4*(i))
/* obsolete stuff */
#define nvVideoSink                                      NvVideoSink


/* class NV_PATCHCORD_VIDEO */
#define  NV_PATCHCORD_VIDEO                                        (0x00000FFB)
/* NvNotification[] entries, values, errors, warnings */
#define NVFFB_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 V032 Reserved00[0x7c0];
} NvffbTypedef, NvPatchcordVideo;
#define NVFFB_TYPEDEF                                    NvPatchcordVideo
/* obsolete stuff */
#define nvPatchcordVideo                                 NvPatchcordVideo


/* class NV_CONTEXT_DMA_IN_MEMORY */
/* NvNotification[] elements */
#define NVFFC_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFC_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFC_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFC_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFC_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* On X86 address[1] is the selector    0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffcTypedef, NvContextDmaInMemory;
#define NVFFC_TYPEDEF                                    NvContextDmaInMemory
/* dma method offsets, fields, and values */
#define NVFFC_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFC_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFC_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFC_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFC_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFC_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFC_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaInMemory                             NvContextDmaInMemory


/* class NV_CONTEXT_DMA_TO_MEMORY */
/* NvNotification[] elements */
#define NVFFD_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFD_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFD_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFD_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFD_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffdTypedef, NvContextDmaToMemory;
#define NVFFD_TYPEDEF                                    NvContextDmaToMemory
/* dma method offsets, fields, and values */
#define NVFFD_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFD_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFD_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFD_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFD_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFD_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFD_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaToMemory                             NvContextDmaToMemory


/* class NV_CONTEXT_DMA_FROM_MEMORY */
/* NvNotification[] elements */
#define NVFFE_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFE_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFE_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFE_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFE_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 struct {                      /* start of method                   0300-    */
  V032 address[2];             /* address[1] is selector on X86        0-   7*/
  U032 limit;                  /* size of data region in bytes-1       8-   b*/
 } SetDmaSpecifier;            /* end of method                         -030b*/
 V032 Reserved02[0x73d];
} NvffeTypedef, NvContextDmaFromMemory;
#define NVFFE_TYPEDEF                                    NvContextDmaFromMemory
/* dma method offsets, fields, and values */
#define NVFFE_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFE_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFE_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFE_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFE_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFE_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFE_SET_DMA_SPECIFIER(s)                       (0x00000300+8192*(s))
/* obsolete stuff */
#define nvContextDmaFromMemory                           NvContextDmaFromMemory


/* class NV_CLASS */
#define  NV_CLASS                                                  (0x00000FFF)
/* NvNotification[] elements */
#define NVFFF_NOTIFIERS_NOTIFY                                     (0)
/* NvNotification[] fields and values */
#define NVFFF_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NVFFF_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NVFFF_NOTIFICATION_STATUS_WARNING_UNAVAILABLE              (0x0002)
#define NVFFF_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 V032 NoOperation;             /* ignored                           0100-0103*/
 V032 Notify;                  /* NVFFF_NOTIFY_*                    0104-0107*/
 V032 Reserved00[0x01e];
 V032 SetContextDmaNotifies;   /* NV_CONTEXT_DMA_TO_MEMORY          0180-0183*/
 V032 Reserved01[0x05f];
 V032 Create;                  /* 32-bit handle of new object       0300-0303*/
 V032 Destroy;                 /* 32-bit handle of object           0304-0307*/
 V032 Reserved02[0x73e];
} NvfffTypedef, NvClass;
#define NVFFF_TYPEDEF                                    NvClass
/* dma method offsets, fields, and values */
#define NVFFF_SET_OBJECT(s)                              (0x00000000+8192*(s))
#define NVFFF_NO_OPERATION(s)                            (0x00000100+8192*(s))
#define NVFFF_NOTIFY(s)                                  (0x00000104+8192*(s))
#define NVFFF_NOTIFY_WRITE_ONLY                          (0x00000000)
#define NVFFF_NOTIFY_WRITE_THEN_AWAKEN                   (0x00000001)
#define NVFFF_SET_CONTEXT_DMA_NOTIFIES(s)                (0x00000180+8192*(s))
#define NVFFF_CREATE(s)                                  (0x00000300+8192*(s))
#define NVFFF_DESTROY(s)                                 (0x00000304+8192*(s))
/* obsolete stuff */
#define nvClass                                          NvClass



 /***************************************************************************\
|*                                 Channels                                  *|
 \***************************************************************************/

typedef NvV32 Nv068Typedef;

typedef NvV32 Nv069Typedef;


/* class NV03_CHANNEL_PIO */
#define  NV03_CHANNEL_PIO                                          (0x0000006A)
/* NvNotification[] fields and values */
#define NV06A_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV06A_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06A_NOTIFICATION_STATUS_ERROR_FLOW_CONTROL               (0x0200)
/* pio subchannel method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x003];
#ifdef NV_BIG_ENDIAN
 NvU32 Free;                    /* 32 bit free count, read only     0010-0013*/
 NvU32 Zero;                    /* zeroes, read only                0014-0017*/
#else
 NvU16 Free;                    /* free count, read only            0010-0011*/
 NvU16 Zero[3];                 /* zeroes, read only                0012-0017*/
#endif
 NvV32 Reserved01[0x03A];
} Nv03ControlPio;
typedef volatile struct {
 NvV32 SetObject;               /* handle of current object         0000-0003*/
 Nv03ControlPio control;        /* flow control                     0000-00ff*/
 union {                        /* start of class methods           0100-    */
  Nv000Typedef NV000_TYPEDEF;
  Nv001Typedef NV001_TYPEDEF;
  Nv002Typedef NV002_TYPEDEF;
  Nv003Typedef NV003_TYPEDEF;
  Nv004Typedef NV004_TYPEDEF;
  Nv005Typedef NV005_TYPEDEF;
  Nv006Typedef NV006_TYPEDEF;
  Nv007Typedef NV007_TYPEDEF;
  Nv008Typedef NV008_TYPEDEF;
  Nv009Typedef NV009_TYPEDEF;
  Nv00aTypedef NV00A_TYPEDEF;
  Nv00bTypedef NV00B_TYPEDEF;
  Nv00cTypedef NV00C_TYPEDEF;
  Nv00dTypedef NV00D_TYPEDEF;
  Nv00eTypedef NV00E_TYPEDEF;
  Nv00fTypedef NV00F_TYPEDEF;
  Nv010Typedef NV010_TYPEDEF;
  Nv011Typedef NV011_TYPEDEF;
  Nv012Typedef NV012_TYPEDEF;
  Nv013Typedef NV013_TYPEDEF;
  Nv014Typedef NV014_TYPEDEF;
  Nv015Typedef NV015_TYPEDEF;
  Nv016Typedef NV016_TYPEDEF;
  Nv017Typedef NV017_TYPEDEF;
  Nv018Typedef NV018_TYPEDEF;
  Nv019Typedef NV019_TYPEDEF;
  Nv01aTypedef NV01A_TYPEDEF;
  Nv01bTypedef NV01B_TYPEDEF;
  Nv01cTypedef NV01C_TYPEDEF;
  Nv01dTypedef NV01D_TYPEDEF;
  Nv01eTypedef NV01E_TYPEDEF;
  Nv01fTypedef NV01F_TYPEDEF;
  Nv020Typedef NV020_TYPEDEF;
  Nv021Typedef NV021_TYPEDEF;
  Nv022Typedef NV022_TYPEDEF;
  Nv023Typedef NV023_TYPEDEF;
  Nv024Typedef NV024_TYPEDEF;
  Nv025Typedef NV025_TYPEDEF;
  Nv026Typedef NV026_TYPEDEF;
  Nv027Typedef NV027_TYPEDEF;
  Nv028Typedef NV028_TYPEDEF;
  Nv029Typedef NV029_TYPEDEF;
  Nv02aTypedef NV02A_TYPEDEF;
  Nv02bTypedef NV02B_TYPEDEF;
  Nv02cTypedef NV02C_TYPEDEF;
  Nv02dTypedef NV02D_TYPEDEF;
  Nv02eTypedef NV02E_TYPEDEF;
  Nv02fTypedef NV02F_TYPEDEF;
  Nv030Typedef NV030_TYPEDEF;
  Nv031Typedef NV031_TYPEDEF;
  Nv032Typedef NV032_TYPEDEF;
  Nv033Typedef NV033_TYPEDEF;
  Nv034Typedef NV034_TYPEDEF;
  Nv035Typedef NV035_TYPEDEF;
  Nv036Typedef NV036_TYPEDEF;
  Nv037Typedef NV037_TYPEDEF;
  Nv038Typedef NV038_TYPEDEF;
  Nv039Typedef NV039_TYPEDEF;
  Nv03aTypedef NV03A_TYPEDEF;
  Nv03bTypedef NV03B_TYPEDEF;
  Nv03cTypedef NV03C_TYPEDEF;
  Nv03dTypedef NV03D_TYPEDEF;
  Nv03eTypedef NV03E_TYPEDEF;
  Nv03fTypedef NV03F_TYPEDEF;
  Nv040Typedef NV040_TYPEDEF;
  Nv041Typedef NV041_TYPEDEF;
  Nv042Typedef NV042_TYPEDEF;
  Nv043Typedef NV043_TYPEDEF;
  Nv044Typedef NV044_TYPEDEF;
  Nv045Typedef NV045_TYPEDEF;
  Nv046Typedef NV046_TYPEDEF;
  Nv047Typedef NV047_TYPEDEF;
  Nv048Typedef NV048_TYPEDEF;
  Nv049Typedef NV049_TYPEDEF;
  Nv04aTypedef NV04A_TYPEDEF;
  Nv04bTypedef NV04B_TYPEDEF;
  Nv04cTypedef NV04C_TYPEDEF;
  Nv04dTypedef NV04D_TYPEDEF;
  Nv04eTypedef NV04E_TYPEDEF;
  Nv04fTypedef NV04F_TYPEDEF;
  Nv050Typedef NV050_TYPEDEF;
  Nv051Typedef NV051_TYPEDEF;
  Nv052Typedef NV052_TYPEDEF;
  Nv053Typedef NV053_TYPEDEF;
  Nv054Typedef NV054_TYPEDEF;
  Nv055Typedef NV055_TYPEDEF;
  Nv096Typedef NV096_TYPEDEF;
  Nv057Typedef NV057_TYPEDEF;
  Nv058Typedef NV058_TYPEDEF;
  Nv059Typedef NV059_TYPEDEF;
  Nv05aTypedef NV05A_TYPEDEF;
  Nv05bTypedef NV05B_TYPEDEF;
  Nv05cTypedef NV05C_TYPEDEF;
  Nv05dTypedef NV05D_TYPEDEF;
  Nv05eTypedef NV05E_TYPEDEF;
  Nv05fTypedef NV05F_TYPEDEF;
  Nv060Typedef NV060_TYPEDEF;
  Nv061Typedef NV061_TYPEDEF;
  Nv062Typedef NV062_TYPEDEF;
  Nv063Typedef NV063_TYPEDEF;
  Nv064Typedef NV064_TYPEDEF;
  Nv065Typedef NV065_TYPEDEF;
  Nv066Typedef NV066_TYPEDEF;
  Nv067Typedef NV067_TYPEDEF;
/*Nv068Typedef NV068_TYPEDEF;*/
/*Nv069Typedef NV069_TYPEDEF;*/
/*Nv06aTypedef NV06A_TYPEDEF;*/
/*Nv06bTypedef NV06B_TYPEDEF;*/
/*Nv06cTypedef NV06C_TYPEDEF;*/
/*Nv06dTypedef NV06D_TYPEDEF;*/
/*Nv06eTypedef NV06E_TYPEDEF;*/
  Nv06fTypedef NV06F_TYPEDEF;
  Nv070Typedef NV070_TYPEDEF;
  Nv071Typedef NV071_TYPEDEF;
  Nv072Typedef NV072_TYPEDEF;
  Nv073Typedef NV073_TYPEDEF;
  Nv074Typedef NV074_TYPEDEF;
  Nv075Typedef NV075_TYPEDEF;
  Nv076Typedef NV076_TYPEDEF;
  Nv077Typedef NV077_TYPEDEF;
  Nv078Typedef NV078_TYPEDEF;
  Nv079Typedef NV079_TYPEDEF;
  Nv07aTypedef NV07A_TYPEDEF;
  Nv07bTypedef NV07B_TYPEDEF;
  Nv07cTypedef NV07C_TYPEDEF;
  Nv07dTypedef NV07D_TYPEDEF;
  Nv07eTypedef NV07E_TYPEDEF;
  Nv07fTypedef NV07F_TYPEDEF;
  Nv080Typedef NV080_TYPEDEF;
  Nv081Typedef NV081_TYPEDEF;
  Nv082Typedef NV082_TYPEDEF;
  Nv083Typedef NV083_TYPEDEF;
  Nv084Typedef NV084_TYPEDEF;
  Nv085Typedef NV085_TYPEDEF;
  Nv086Typedef NV086_TYPEDEF;
  Nv087Typedef NV087_TYPEDEF;
  Nv088Typedef NV088_TYPEDEF;
  Nv089Typedef NV089_TYPEDEF;
  Nv093Typedef NV093_TYPEDEF;
  Nv094Typedef NV094_TYPEDEF;
  Nv095Typedef NV095_TYPEDEF;
  Nvff0Typedef NVFF0_TYPEDEF;
  Nvff1Typedef NVFF1_TYPEDEF;
  Nvff2Typedef NVFF2_TYPEDEF;
  Nvff3Typedef NVFF3_TYPEDEF;
  Nvff4Typedef NVFF4_TYPEDEF;
  Nvff5Typedef NVFF5_TYPEDEF;
  Nvff6Typedef NVFF6_TYPEDEF;
  Nvff7Typedef NVFF7_TYPEDEF;
  Nvff8Typedef NVFF8_TYPEDEF;
  Nvff9Typedef NVFF9_TYPEDEF;
  NvffaTypedef NVFFA_TYPEDEF;
  NvffbTypedef NVFFB_TYPEDEF;
  NvffcTypedef NVFFC_TYPEDEF;
  NvffdTypedef NVFFD_TYPEDEF;
  NvffeTypedef NVFFE_TYPEDEF;
  NvfffTypedef NVFFF_TYPEDEF;
#ifdef __GNUC__         /* anon union does not work on GCC */
 }  cls   ;         /* end of class methods                  -1fff*/
#else  /* __GNUC__ */
 }  /* cls */  ;    /* end of class methods                  -1fff*/
#endif /* __GNUC__ */

} Nv03SubchannelPio;
/* pio channel */
typedef volatile struct {      /* start of array of subchannels     0000-    */
 Nv03SubchannelPio subchannel[8];/*subchannel                       0000-1fff*/
} Nv03ChannelPio;              /* end of array of subchannels           -ffff*/
/* fields and values */
#define NV06A_FIFO_GUARANTEED_SIZE                                 (0x007C)
#define NV06A_FIFO_EMPTY                                           (0x007C)
#define NV06A_FIFO_FULL                                            (0x0000)
/* obsolete stuff */
#define NV3_CHANNEL_PIO                                            (0x0000006A)
#define Nv3ControlPio                                            Nv03ControlPio
#define Nv3SubchannelPio                                      Nv03SubchannelPio
#define Nv3ChannelPio                                            Nv03ChannelPio
#define NvChannel                                                Nv03ChannelPio
#define nv03ChannelPio                                           Nv03ChannelPio


/* class NV03_CHANNEL_DMA */
#define  NV03_CHANNEL_DMA                                          (0x0000006B)
/* NvNotification[] fields and values */
#define NV06B_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06bTypedef, Nv03ChannelDma;
#define NV06B_TYPEDEF                                            Nv03ChannelDma
#define nv03ChannelDma                                           Nv03ChannelDma


/* class NV04_CHANNEL_PIO */
#define  NV04_CHANNEL_PIO                                          (0x0000006D)
/* NvNotification[] fields and values */
#define NV06D_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV06D_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06D_NOTIFICATION_STATUS_ERROR_FLOW_CONTROL               (0x0200)
/* pio subchannel method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x003];
#ifdef NV_BIG_ENDIAN
 NvU32 Free;                    /* 32 bit free count, read only     0010-0013*/
 NvU32 Zero;                    /* zeroes, read only                0014-0017*/
#else
 NvU16 Free;                    /* free count, read only            0010-0011*/
 NvU16 Zero[3];                 /* zeroes, read only                0012-0017*/
#endif
 NvV32 Reserved01[0x03A];
} Nv04ControlPio;
typedef volatile struct {
 NvV32 SetObject;               /* handle of current object         0000-0003*/
 Nv04ControlPio control;        /* flow control                     0000-00ff*/
 union {                        /* start of class methods           0100-    */
  Nv000Typedef NV000_TYPEDEF;
  Nv001Typedef NV001_TYPEDEF;
  Nv002Typedef NV002_TYPEDEF;
  Nv003Typedef NV003_TYPEDEF;
  Nv004Typedef NV004_TYPEDEF;
  Nv005Typedef NV005_TYPEDEF;
  Nv006Typedef NV006_TYPEDEF;
  Nv007Typedef NV007_TYPEDEF;
  Nv008Typedef NV008_TYPEDEF;
  Nv009Typedef NV009_TYPEDEF;
  Nv00aTypedef NV00A_TYPEDEF;
  Nv00bTypedef NV00B_TYPEDEF;
  Nv00cTypedef NV00C_TYPEDEF;
  Nv00dTypedef NV00D_TYPEDEF;
  Nv00eTypedef NV00E_TYPEDEF;
  Nv00fTypedef NV00F_TYPEDEF;
  Nv010Typedef NV010_TYPEDEF;
  Nv011Typedef NV011_TYPEDEF;
  Nv012Typedef NV012_TYPEDEF;
  Nv013Typedef NV013_TYPEDEF;
  Nv014Typedef NV014_TYPEDEF;
  Nv015Typedef NV015_TYPEDEF;
  Nv016Typedef NV016_TYPEDEF;
  Nv017Typedef NV017_TYPEDEF;
  Nv018Typedef NV018_TYPEDEF;
  Nv019Typedef NV019_TYPEDEF;
  Nv01aTypedef NV01A_TYPEDEF;
  Nv01bTypedef NV01B_TYPEDEF;
  Nv01cTypedef NV01C_TYPEDEF;
  Nv01dTypedef NV01D_TYPEDEF;
  Nv01eTypedef NV01E_TYPEDEF;
  Nv01fTypedef NV01F_TYPEDEF;
  Nv020Typedef NV020_TYPEDEF;
  Nv021Typedef NV021_TYPEDEF;
  Nv022Typedef NV022_TYPEDEF;
  Nv023Typedef NV023_TYPEDEF;
  Nv024Typedef NV024_TYPEDEF;
  Nv025Typedef NV025_TYPEDEF;
  Nv026Typedef NV026_TYPEDEF;
  Nv027Typedef NV027_TYPEDEF;
  Nv028Typedef NV028_TYPEDEF;
  Nv029Typedef NV029_TYPEDEF;
  Nv02aTypedef NV02A_TYPEDEF;
  Nv02bTypedef NV02B_TYPEDEF;
  Nv02cTypedef NV02C_TYPEDEF;
  Nv02dTypedef NV02D_TYPEDEF;
  Nv02eTypedef NV02E_TYPEDEF;
  Nv02fTypedef NV02F_TYPEDEF;
  Nv030Typedef NV030_TYPEDEF;
  Nv031Typedef NV031_TYPEDEF;
  Nv032Typedef NV032_TYPEDEF;
  Nv033Typedef NV033_TYPEDEF;
  Nv034Typedef NV034_TYPEDEF;
  Nv035Typedef NV035_TYPEDEF;
  Nv036Typedef NV036_TYPEDEF;
  Nv037Typedef NV037_TYPEDEF;
  Nv038Typedef NV038_TYPEDEF;
  Nv039Typedef NV039_TYPEDEF;
  Nv03aTypedef NV03A_TYPEDEF;
  Nv03bTypedef NV03B_TYPEDEF;
  Nv03cTypedef NV03C_TYPEDEF;
  Nv03dTypedef NV03D_TYPEDEF;
  Nv03eTypedef NV03E_TYPEDEF;
  Nv03fTypedef NV03F_TYPEDEF;
  Nv040Typedef NV040_TYPEDEF;
  Nv041Typedef NV041_TYPEDEF;
  Nv042Typedef NV042_TYPEDEF;
  Nv043Typedef NV043_TYPEDEF;
  Nv044Typedef NV044_TYPEDEF;
  Nv045Typedef NV045_TYPEDEF;
  Nv046Typedef NV046_TYPEDEF;
  Nv047Typedef NV047_TYPEDEF;
  Nv048Typedef NV048_TYPEDEF;
  Nv049Typedef NV049_TYPEDEF;
  Nv04aTypedef NV04A_TYPEDEF;
  Nv04bTypedef NV04B_TYPEDEF;
  Nv04cTypedef NV04C_TYPEDEF;
  Nv04dTypedef NV04D_TYPEDEF;
  Nv04eTypedef NV04E_TYPEDEF;
  Nv04fTypedef NV04F_TYPEDEF;
  Nv050Typedef NV050_TYPEDEF;
  Nv051Typedef NV051_TYPEDEF;
  Nv052Typedef NV052_TYPEDEF;
  Nv053Typedef NV053_TYPEDEF;
  Nv054Typedef NV054_TYPEDEF;
  Nv055Typedef NV055_TYPEDEF;
  Nv096Typedef NV096_TYPEDEF;
  Nv057Typedef NV057_TYPEDEF;
  Nv058Typedef NV058_TYPEDEF;
  Nv059Typedef NV059_TYPEDEF;
  Nv05aTypedef NV05A_TYPEDEF;
  Nv05bTypedef NV05B_TYPEDEF;
  Nv05cTypedef NV05C_TYPEDEF;
  Nv05dTypedef NV05D_TYPEDEF;
  Nv05eTypedef NV05E_TYPEDEF;
  Nv05fTypedef NV05F_TYPEDEF;
  Nv060Typedef NV060_TYPEDEF;
  Nv061Typedef NV061_TYPEDEF;
  Nv062Typedef NV062_TYPEDEF;
  Nv063Typedef NV063_TYPEDEF;
  Nv064Typedef NV064_TYPEDEF;
  Nv065Typedef NV065_TYPEDEF;
  Nv066Typedef NV066_TYPEDEF;
  Nv067Typedef NV067_TYPEDEF;
/*Nv068Typedef NV068_TYPEDEF;*/
/*Nv069Typedef NV069_TYPEDEF;*/
/*Nv06aTypedef NV06A_TYPEDEF;*/
/*Nv06bTypedef NV06B_TYPEDEF;*/
/*Nv06cTypedef NV06C_TYPEDEF;*/
/*Nv06dTypedef NV06D_TYPEDEF;*/
/*Nv06eTypedef NV06E_TYPEDEF;*/
  Nv06fTypedef NV06F_TYPEDEF;
  Nv070Typedef NV070_TYPEDEF;
  Nv071Typedef NV071_TYPEDEF;
  Nv072Typedef NV072_TYPEDEF;
  Nv073Typedef NV073_TYPEDEF;
  Nv074Typedef NV074_TYPEDEF;
  Nv075Typedef NV075_TYPEDEF;
  Nv076Typedef NV076_TYPEDEF;
  Nv077Typedef NV077_TYPEDEF;
  Nv078Typedef NV078_TYPEDEF;
  Nv079Typedef NV079_TYPEDEF;
  Nv07aTypedef NV07A_TYPEDEF;
  Nv07bTypedef NV07B_TYPEDEF;
  Nv07cTypedef NV07C_TYPEDEF;
  Nv07dTypedef NV07D_TYPEDEF;
  Nv07eTypedef NV07E_TYPEDEF;
  Nv07fTypedef NV07F_TYPEDEF;
  Nv080Typedef NV080_TYPEDEF;
  Nv081Typedef NV081_TYPEDEF;
  Nv082Typedef NV082_TYPEDEF;
  Nv083Typedef NV083_TYPEDEF;
  Nv084Typedef NV084_TYPEDEF;
  Nv085Typedef NV085_TYPEDEF;
  Nv086Typedef NV086_TYPEDEF;
  Nv087Typedef NV087_TYPEDEF;
  Nv088Typedef NV088_TYPEDEF;
  Nv089Typedef NV089_TYPEDEF;
  Nv093Typedef NV093_TYPEDEF;
  Nv094Typedef NV094_TYPEDEF;
  Nv095Typedef NV095_TYPEDEF;
  Nv097Typedef NV097_TYPEDEF;
  Nv1189Typedef NV1189_TYPEDEF;
  Nv205fTypedef NV205F_TYPEDEF;
  Nvff0Typedef NVFF0_TYPEDEF;
  Nvff1Typedef NVFF1_TYPEDEF;
  Nvff2Typedef NVFF2_TYPEDEF;
  Nvff3Typedef NVFF3_TYPEDEF;
  Nvff4Typedef NVFF4_TYPEDEF;
  Nvff5Typedef NVFF5_TYPEDEF;
  Nvff6Typedef NVFF6_TYPEDEF;
  Nvff7Typedef NVFF7_TYPEDEF;
  Nvff8Typedef NVFF8_TYPEDEF;
  Nvff9Typedef NVFF9_TYPEDEF;
  NvffaTypedef NVFFA_TYPEDEF;
  NvffbTypedef NVFFB_TYPEDEF;
  NvffcTypedef NVFFC_TYPEDEF;
  NvffdTypedef NVFFD_TYPEDEF;
  NvffeTypedef NVFFE_TYPEDEF;
  NvfffTypedef NVFFF_TYPEDEF;
#ifdef __GNUC__         /* anon union does not work on GCC */
 }  cls   ;         /* end of class methods                  -1fff*/
#else  /* __GNUC__ */
 }  /* cls */  ;    /* end of class methods                  -1fff*/
#endif /* __GNUC__ */
} Nv04SubchannelPio;
/* pio channel */
typedef volatile struct {      /* start of array of subchannels     0000-    */
 Nv04SubchannelPio subchannel[8];/*subchannel                       0000-1fff*/
} Nv04ChannelPio;              /* end of array of subchannels           -ffff*/
/* fields and values */
#define NV06D_FIFO_GUARANTEED_SIZE                                 (0x0200)
#define NV06D_FIFO_EMPTY                                           (0x0200)
#define NV06D_FIFO_FULL                                            (0x0000)


/* class NV04_CHANNEL_DMA */
#define  NV04_CHANNEL_DMA                                          (0x0000006C)
/* NvNotification[] fields and values */
#define NV06C_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06C_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06cTypedef, Nv04ChannelDma;
#define NV06C_TYPEDEF                                            Nv04ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only            0040-0043*/
 NvU32 Get;                     /* get offset, read only             0044-0047*/
 NvV32 Ignored01[0x002];
 NvU32 StallNotifier;           /* Set stall notifier                0050-0053*/
 NvU32 StallChannel;            /* Stall the channel                 0054-0057*/
 NvV32 Ignored02[0x7EA];
} Nv04ControlDma;
/* obsolete stuff */
#define NV4_CHANNEL_DMA                                            (0x0000006C)
#define Nv4ChannelDma                                            Nv04ChannelDma
#define nv4ChannelDma                                            Nv04ChannelDma
#define Nv4ControlDma                                            Nv04ControlDma


/* class NV10_CHANNEL_DMA */
#define  NV10_CHANNEL_DMA                                          (0x0000006E)
/* NvNotification[] fields and values */
#define NV06E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV06E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv06eTypedef, Nv10ChannelDma;
#define NV06E_TYPEDEF                                            Nv10ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only           0040-0043*/
 NvU32 Get;                     /* get offset, read only            0044-0047*/
 NvU32 Reference;               /* reference value, read only       0048-004b*/
 NvV32 Ignored01[0x7ed];
} Nv06eControl, Nv10ControlDma;
/* fields and values */
#define NV06E_NUMBER_OF_SUBCHANNELS                                (8)
#define NV06E_SET_OBJECT                                           (0x00000000)
#define NV06E_SET_REFERENCE                                        (0x00000050)

/* class NV20_CHANNEL_DMA */
#define  NV20_CHANNEL_DMA                                          (0x0000206E)
/* NvNotification[] fields and values */
#define NV206E_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT              (0x2000)
#define NV206E_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT          (0x4000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv206eTypedef, Nv20ChannelDma;
#define NV206E_TYPEDEF                                           Nv20ChannelDma
/* pio flow control data structure */
typedef volatile struct {
 NvV32 Ignored00[0x010];
 NvU32 Put;                     /* put offset, write only           0040-0043*/
 NvU32 Get;                     /* get offset, read only            0044-0047*/
 NvU32 Reference;               /* reference value, read only       0048-004b*/
 NvV32 Ignored01[0x7ed];
} Nv206eControl, Nv20ControlDma;
/* fields and values */
#define NV206E_NUMBER_OF_SUBCHANNELS                               (8)
#define NV206E_SET_OBJECT                                          (0x00000000)
#define NV206E_SET_REFERENCE                                       (0x00000050)
#define NV206E_SET_CONTEXT_DMA_SEMAPHORE                           (0x00000060)
#define NV206E_SEMAPHORE_OFFSET                                    (0x00000064)
#define NV206E_SEMAPHORE_ACQUIRE                                   (0x00000068)
#define NV206E_SEMAPHORE_RELEASE                                   (0x0000006c)


 /***************************************************************************\
|*                            Well Known Objects                             *|
 \***************************************************************************/


/* object NV01_NULL_OBJECT */
#define   NV01_NULL_OBJECT                                         (0x00000000)
/* obsolete stuff */
#define NV1_NULL_OBJECT                                            (0x00000000)



 /***************************************************************************\
|*                               Notification                                *|
 \***************************************************************************/


/***** NvNotification Structure *****/
/*
 * NV objects return information about method completion to clients via an
 * array of notification structures in main memory.
 *
 * The client sets the status field to NV???_NOTIFICATION_STATUS_IN_PROGRESS.
 * NV fills in the NvNotification[] data structure in the following order:
 * timeStamp, otherInfo32, otherInfo16, and then status.
 */


/* memory data structures */
typedef volatile struct {
 struct {                      /*                                   0000-    */
  NvU32 nanoseconds[2];        /* nanoseconds since Jan. 1, 1970       0-   7*/
 } timeStamp;                  /*                                       -0007*/
 NvV32 info32;                 /* info returned depends on method   0008-000b*/
 NvV16 info16;                 /* info returned depends on method   000c-000d*/
 NvV16 status;                 /* user sets bit 15, NV sets status  000e-000f*/
} NvNotification;
/* status values */

 /***************************************************************************\
|*                          NvGraphicsState                                  *|
 \***************************************************************************/
/***** NvGraphicsState Structure *****/
/*
 * This represents the state structure that's passed between the Celsius
 * GetState method and the RM (in nv10 and eventually the HW). The context
 * DMA passed to NV056_SET_CONTEXT_DMA_STATE should be at least this size.
 */

typedef volatile struct {
    struct _PerFragmentState {
        // *** dword 0
        NvU32          pad0 : 8;
        NvU32     alphaFunc : 4;
        NvU32          pad1 : 4;
        NvU32     depthFunc : 4;
        NvU32          pad2 : 4;
        NvU32     depthMask : 1;
        NvU32          pad3 : 1;
        NvU32     alphaMask : 1;
        NvU32       redMask : 1;
        NvU32     greenMask : 1;
        NvU32      blueMask : 1;
        NvU32          pad4 : 2;
        // *** dword 1
        NvU32          pad5 : 4;
        NvU32   stencilFunc : 4;
        NvU32    stencilRef : 8;
        NvU32          pad6 : 8;
        NvU32   stencilMask : 8;
        // *** dword 2
        NvU32       sfailOp : 4;
        NvU32       zfailOp : 4;
        NvU32       zpassOp : 4;
        NvU32         pad7 : 20;
        // *** dword 3
        NvU32 blendEquation : 3;
        NvU32          pad8 : 1;
        NvU32      srcBlend : 4;
        NvU32     destBlend : 4;
        NvU32         pad9 : 20;
    } PerFragmentState;
    struct _PerVertexState {
        NvF32           pad0[4];
        NvF32   primaryColor[4];
        NvF32 secondaryColor[3];
        NvF32          fogCoord;
        NvF32    texCoord[2][4];
        NvF32         normal[3];
        NvF32              pad1;
        NvF32      vertexWeight;
        NvU32           pad2[7];
        NvU32              pad3;
        NvU32      edgeFlag : 8;
        NvU32         pad4 : 24;
        NvU32           pad5[2];
    } PerVertexState;
    struct _VertexArrayState {
        NvU32      vertexOffset;
        NvU32      vertexFormat;
        NvU32     diffuseOffset;
        NvU32     diffuseFormat;
        NvU32    specularOffset;
        NvU32    specularFormat;
        NvU32   texCoord0Offset;
        NvU32   texCoord0Format;
        NvU32   texCoord1Offset;
        NvU32   texCoord1Format;
        NvU32      normalOffset;
        NvU32      normalFormat;
        NvU32      weightOffset;
        NvU32      weightFormat;
        NvU32         fogOffset;
        NvU32         fogFormat;
    } VertexArrayState;
    struct _PrimitiveAssmState {
        NvU32    primAssm[3*16];
    } PrimitiveAssmState;
} NvGraphicsState;

 /***************************************************************************\
|*                          Object Allocation Parameters                     *|
 \***************************************************************************/

// class 0x07c creation parameters
typedef struct
{
    NvU32   version;
    NvP64   pInfo;
    NvU32   logicalHeadId;

} NV07C_ALLOCATION_PARAMETERS;

// class 0x07a creation parameters
typedef struct
{
    NvU32   version;
    NvP64   pInfo;
    NvU32   logicalHeadId;

} NV07A_ALLOCATION_PARAMETERS;

 /***************************************************************************\
|*                          NVIDIA Debug Extensions                         *|
 \***************************************************************************/

/*
 * These class numbers are a temporary hack to allow the debugger
 * client to use the NvAlloc interface to access debugger services.
 */
#define  NVDE_REGISTER_DEBUGGER                                    (0xDE000000)
#define  NVDE_UNREGISTER_DEBUGGER                                  (0xDE000001)
#define  NVDE_READ_MEMORY                                          (0xDE000002)
#define  NVDE_WRITE_MEMORY                                         (0xDE000003)
#define  NVDE_TEST                                                 (0xDE00ffff)

/*
 * Status codes.
 */
#define NVDE_STATUS_SUCCESS                                         (0x0000)
#define NVDE_STATUS_ERROR_STATE_IN_USE                              (0x0001)
#define NVDE_STATUS_ERROR_BAD_ARGUMENT                              (0x0002)

/*
 * Class-specific parameter blocks.
 */
typedef struct
{
    NvU32 TrapEvent;
} NVDE_REGISTER_DEBUGGER_PARAMETERS;

typedef struct
{
    NvU32 foo;
} NVDE_UNREGISTER_DEBUGGER_PARAMETERS;

typedef struct
{
    NvU32 Address;
    NvU32 Size;
    NvU32 Data;
} NVDE_READ_MEMORY_PARAMETERS;

typedef struct
{
    NvU32 Address;
    NvU32 Size;
    NvU32 Data;
} NVDE_WRITE_MEMORY_PARAMETERS;

typedef struct
{
    NvU32 CallBackAddress;
} NVDE_TEST_PARAMETERS;

typedef NvU32 (*NVDE_TEST_FUNC)();

/* class NV01_DEVICE_AUDIO */
#define  NV01_DEVICE_AUDIO                                         (0x000000A0)
/* NvNotification[] fields and values */
#define NV0A0_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A0_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A0_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0A0Typedef, Nv01DeviceAudio;
#define  NV0A0_TYPEDEF                                             Nv01DeviceAudio

#define NV01_CONTEXT_DMA_AUDIO                                      (0x000000A1)
/* NvNotification[] fields and values */
#define NV0A1_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A1_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A1_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)

#define NV1B_AUDIO_OBJECT                                           (0x000000A2)
/* NvNotification[] fields and values */
#define NV0A2_NOTIFICATION_STATUS_NOT_IMPLEMENTED                   (0x0000)
#define NV0A2_NOTIFICATION_STATUS_REQUESTED                         (0x0001)
#define NV0A2_NOTIFICATION_STATUS_METHOD_UNKNOWN                    (0x0002)
#define NV0A2_NOTIFICATION_STATUS_BAD_ARGUMENT                      (0x2000)
#define NV0A2_NOTIFICATION_STATUS_CURRENT_NOT_SET                   (0x0004)
#define NV0A2_NOTIFICATION_STATUS_ANTECEDENT_NOT_SET                (0x0005)
#define NV0A2_NOTIFICATION_STATUS_VOICE_ACTIVE                      (0x0006)
#define NV0A2_NOTIFICATION_STATUS_NOT_DATA_TYPE_BUFFER              (0x0007)

/* class NV01_DEVICE_EXTERNAL_CODEC */
#define  NV01_DEVICE_EXTERNAL_CODEC                                 (0x000000A3)
/* NvNotification[] fields and values */
#define NV0A0_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A0_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A0_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A0_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)
/* pio method data structure */
typedef volatile struct {
 NvV32 Reserved00[0x7c0];
} Nv0A3Typedef, Nv03DeviceExternalCodec;
#define  NV0A3_TYPEDEF                                             Nv01DeviceCodec

#define NV01_CONTEXT_DMA_EXTERNAL_CODEC                             (0x000000A4)
/* NvNotification[] fields and values */
#define NV0A1_NOTIFICATION_STATUS_IN_PROGRESS                      (0x8000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_PROTECTION_FAULT           (0x4000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_BAD_ARGUMENT               (0x2000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_INVALID_STATE              (0x1000)
#define NV0A1_NOTIFICATION_STATUS_ERROR_STATE_IN_USE               (0x0800)
#define NV0A1_NOTIFICATION_STATUS_INSUFFICIENT_BANDWIDTH           (0x0400)
#define NV0A1_NOTIFICATION_STATUS_DONE_SUCCESS                     (0x0000)

#define NV01_EXTERNAL_CODEC_OBJECT                                  (0x000000A5)
/* NvNotification[] fields and values */
#define NV0A2_NOTIFICATION_STATUS_NOT_IMPLEMENTED                   (0x0000)
#define NV0A2_NOTIFICATION_STATUS_REQUESTED                         (0x0001)
#define NV0A2_NOTIFICATION_STATUS_METHOD_UNKNOWN                    (0x0002)
#define NV0A2_NOTIFICATION_STATUS_BAD_ARGUMENT                      (0x2000)
#define NV0A2_NOTIFICATION_STATUS_CURRENT_NOT_SET                   (0x0004)
#define NV0A2_NOTIFICATION_STATUS_ANTECEDENT_NOT_SET                (0x0005)
#define NV0A2_NOTIFICATION_STATUS_VOICE_ACTIVE                      (0x0006)
#define NV0A2_NOTIFICATION_STATUS_NOT_DATA_TYPE_BUFFER              (0x0007)

#define NV01_EXTERNAL_CODEC_WRITE                                   (0x000000A6)
// define the errors here later
#define NV01_EXTERNAL_CODEC_READ                                    (0x000000A7)
// define the errors here later

// this IOCTL manages system memory for the client - see AUDIO_ALLOC_MEMORY / AUDIO_FREE_MEMORY
#define NV01_MEMORY_AUDIO		                                    (0x000000A8)

// class 0x0A1 creation params (NV01_CONTEXT_DMA_AUDIO)

typedef union
{
	struct
	{
		NvU32 : 32;
	}codec;

	struct
	{
		NvU32  : 27;
		// interrupts originating from FE/SE
		NvU32 FEMethodOverFlow : 1;	// user method fifo has been overwritten
		NvU32 FEVoice : 1;			// end-of-buffer / end-of-stream
		NvU32 FENotify : 1;			// notifier originating from the FE has been written
		NvU32 DeltaPanic : 1;		// delta panic
		NvU32 DeltaWarning : 1;		// delta warning
	}apu;
	
	NvU32 uValue;					// set to ~0x0 (for codec) if the ISR fn is to be called regardless
} INTR_MASK;

typedef void (*PISRCALLBACK)(NvV32,	/* service context*/ 
							NvU32,	/* interrupt mask (INTR_MASK.uValue) with bits of triggered intr set */
							NvV32);	/* info based on reason */

typedef struct
{
	NvV32			pResList;		/*	address of resource structure	*/
	NvU8			uRevisionID;	/*	HW Revision ID of the chip - byte 0x8 in the PCI config */
	NvV32			pDevObj;		/*	address of device object		*/		
	PISRCALLBACK	pISRFn;			/*	address to an optional ISR		*/
	NvV32			pServiceContext;/*	service context for the ISR		*/
	INTR_MASK		IntrMask;		/*	set the bits for which pISRFn needs to be called	*/
	NvU32			uDeviceRef;		/*	device reference				*/
} AUDIO_INIT_DEVICE;

/*
Arguments:
		IN pResourceList - 	of type PCM_FULL_RESOURCE_DESCRIPTOR (WDM)
				of type CM_CONFIG (Win9X VxD)
				of type PCI_COMMON_CONFIG (NT4)
				TBD for linux.
	 	IN pDeviceObject - only valid in NT and WDM, ignored in Win9X VxD
		IN pISRFn (optional) - not recommended unless it is absolutely necessary.  
								The driver can install it to handle interrupts from the codec if it needs to.  
								Type - void pISRFn(U032 ServiceContext);
		IN uServiceContext (optional) - value passed back to the pISRFn if installed.
		OUT pDeviceRef	- device ref returned by the RM
*/


// defines the "type" for context DMA
#define AUDIO_CONTEXT_DMA_SESGE			0x1
#define AUDIO_CONTEXT_DMA_SESSL			0x2
#define AUDIO_CONTEXT_DMA_GPSGE			0x3
#define AUDIO_CONTEXT_DMA_FENOTIFIER	0x4

typedef struct
{
	NvU32	uDeviceRef;			// device reference
	NvU8	uType;				// one of the values defined above
	NvU32	uBaseAddress;		// base address for the type. (must be 4K aligned)
	NvU32	uMaxOffset;			// max offset for the type. (must be 4K aligned)
	NvU32	uHandle;			// OUT: handle of the context DMA
} APU_AP_ALLOC_CONTEXT_DMA;

typedef struct
{
	NvU32	uDeviceRef;			// device reference
	NvU32	uHandle;			// handle of the context DMA
} APU_AP_FREE_CONTEXT_DMA;


// class 0x0A2 creation parameters (NV1B_AUDIO_PROCESSOR)
typedef union
{
	struct
	{	
		NvU32 : 31;
		NvU32 ISO : 1;		// set if ISO (takes care of all ISO flags in the HW)
	}fields;
	
	NvU32 uValue;
} APU_AP_FLAGS;

typedef struct 
{
	NvV32			pObjectDmaBuffer;			// in buffer for global effects dma commands.
	NvV32			pObjectNotifiesBuffer;		// in buffer for voice notifies
	NvV32			pObjectGlobalNotifiesBuffer; // in buffer for global notifies
	APU_AP_FLAGS	flags; 
	VOID_PTR		pioBase; 
	NvU32			limitFifo; 
	NvU32			limitBandwidth; 
	NvU32			limitBlockClock; 
	NvU32			overhead; 

	NvU32			uVoiceCount;		// in/out req # of voices , return #
	NvU32			uVoice3dCount;		// in/out req # of 3d voices , return #
	NvU32			uHRTFCount;			// in/out req # of HRTFs, return #
	NvU32			uSubmixCount;		// in/out req # of Submixes, return #
	NvU32			uSegInCount;		// in/out req # of segments for input, return #
	NvU32			uSGEInCount;		// in/out req # of 4K SGE for input, return #
	NvU32			uSGEOutCount;		// in/out req # of 4K SGE for output, return #
}APU_AP_CREATE;


typedef struct
{
	VOID_PTR	pioBase;
} APU_EP_CREATE;

typedef APU_AP_CREATE NV0A2_ALLOCATION_PARAMETERS;

// NV01_EXTERNAL_CODEC_OBJECT

// class 0x0A5 creation parameters (NV01_EXTERNAL_CODEC_OBJECT)
typedef struct
{
	VOID_PTR	pioBaseMixer;
	VOID_PTR	pioBaseAci;
} CODEC_AUDIO_CREATE;

// the object alloc structure is used, both for codec and APU object allocation
// uObjectCode codes
#define	AUDIO_OBJECT_AP					0x1
#define AUDIO_OBJECT_EP					0x2
#define CODEC_OBJECT_AUDIO				0x3
#define CODEC_OBJECT_MODEM				0x4		/* not supported */

typedef struct
{
	NvU32	uDeviceRef;			// device reference
	NvU8	uObjectCode;
	NvV32	pParam;	
} APU_OBJECT;

#define CODEC_ACCESS_08				1
#define CODEC_ACCESS_16				2
#define CODEC_ACCESS_32				4

// alloc params for NV01_EXTERNAL_CODEC_READ & NV01_EXTERNAL_CODEC_WRITE
typedef struct
{
	NvU32	    uDeviceRef;				// device reference
	VOID_PTR	BaseAddr;				// base address for which read/write is made
	NvU32	    Offset;					// offset from the base address for which access is to be made
	NvV32	    AccessType;				// hardware access type
	/*
	for BYTE reads/writes	ValidBytes = CODEC_ACCESS_08 valid Val field = u8
	for WORD reads/writes	ValidBytes = CODEC_ACCESS_16 valid Val field = u16
	for DWORD reads/writes	ValidBytes = CODEC_ACCESS_32 valid Val Field = u32
	any other value for ValidBytes is illegal
	*/
	union
	{
		NvU8	u8;
		NvU16	u16;
		NvU32	u32;
	}Val;
}CODEC_ACCESS_PARAMS;


// 0xA8 memory management paramters

#define MEM_ALIGN_4K					0x00000000
#define MEM_ALIGN_8K					0x00000001		
#define MEM_ALIGN_16K					0x00000003
#define MEM_ALIGN_32K					0x00000007
#define MEM_ALIGN_64K					0x0000000F
#define MEM_ALIGN_128K					0x0000001F
#define MEM_ALIGN_DONT_CARE				0xFFFFFFFF

// for allocation use:
typedef struct
{
	NvU32       uSize;			// IN:	size of memory to be allocated in bytes
	NvU32       uAlignMask;		// IN:	alignment mask to get physically contiguous memory
							    // use ALIGN_DONT_CARE if it need not be aligned and physically contiguous
	VOID_PTR    pLinearAddress;	// OUT: linear address of allocated memory (NULL on failure)
	NvU32       uRef;           // OUT: reference to be passed in when freeing memory.
} AUDIO_ALLOC_MEMORY;

// for freeing memory use:
typedef struct
{
	VOID_PTR    pLinearAddress;	// IN: linear address of allocated memory
	NvU32       uRef;           // IN: reference of the allocated memory
} AUDIO_FREE_MEMORY;

#ifdef __cplusplus
};          // extern "C" {
#endif

#endif /* NV32_INCLUDED */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\patch.hpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       patch.hpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#ifndef __PATCH_HPP__
#define __PATCH_HPP__

enum {
    AUTONONE      = 0,
    AUTONORMAL    = 1,
    AUTOTEXCOORD  = 2,
};

enum {
    VERTEX_ARRAY  = D3DVSDE_POSITION,
    WEIGHT_ARRAY  = D3DVSDE_BLENDWEIGHT,
    NORMAL_ARRAY  = D3DVSDE_NORMAL,
    DIFFUSE_ARRAY = D3DVSDE_DIFFUSE,
    SPEC_ARRAY    = D3DVSDE_SPECULAR,
    TEX0_ARRAY    = D3DVSDE_TEXCOORD0,
    TEX1_ARRAY    = D3DVSDE_TEXCOORD1,
    TEX2_ARRAY    = D3DVSDE_TEXCOORD2,
    TEX3_ARRAY    = D3DVSDE_TEXCOORD3,
};

enum {
    STREAM_NONE = 0xFFFFFFFF,
};

class CPatch
{
private:

    DWORD m_dwFlags;
    DWORD m_dwHandle;

    //copy of pRSInfo data
    DWORD               m_subpatchcount;
    DWORD               m_dwHeight, m_dwWidth, m_dwOrder, m_dwStride;
    DWORD               m_dwVertexOffset;
    NV_PATCH_VERTEX_FORMAT_TYPE m_dwTypes[NV_PATCH_NUMBER_OF_ATTRIBS];

    //cached data ptrs
    FDMatrix            **m00, **m10, **m01, **m11;
    NV_PATCH_FRAC_QUAD_GUARD_INFO **guardQF;
    NV_PATCH_QUAD_INFO       **cachedQuadInfo;
    NV_PATCH_FRAC_TRI_GUARD_INFO  **guardTF;
    //temporary data ptrs -- we need to allocate a patches worth of data then free it at the end.


    NV_PATCH_INFO       m_PatchData;        //patch struct to hand to shared code

    void setStream      (UINT streamID, void *memptr, DWORD stride, DWORD pitch,
                         NV_PATCH_VERTEX_FORMAT_TYPE mt, UINT order);
public:

    BOOL Init(DWORD dwHandle);
    void UnInit(void);

    void getCachedData  (DWORD subpatch);       //copy the 'nth' subpatch FD ptrs over to m_PatchData for rendering
    void saveCachedData (DWORD subpatch);       //save the 'nth' subpatch FD ptrs from m_PatchData (i.e. cache new data)
    void freeCached();                          //free any cached data members
    BOOL allocCached(DWORD);                    //alloc space for n 'subpatches' worth of FD coeffs/guards.

    void setupStreams   ();

    void copyDataToScratch(DWORD,DWORD);
    void copyDataToScratchTri(DWORD,DWORD);
    void convertBsplineToBezier();              //helper routines -- converts patch data inplace
    void convertCatmullRomToBezier();           //helper routines -- converts patch data inplace
    void setBasis       (NV_PATCH_BASIS_TYPE bt)    {m_PatchData.basis = bt; }
    UINT getBasis()                                 {return m_PatchData.basis; }
    NV_PATCH_INFO*      getInfo()                   { return &m_PatchData; }

    void setTessMode    (UINT rf)                   {(rf == NV_PATCH_FLAG_TESS_FRACTIONAL ? m_PatchData.flags |= NV_PATCH_FLAG_TESS_FRACTIONAL : 
                                                                                            m_PatchData.flags &= ~NV_PATCH_FLAG_TESS_MASK);}        
    void setPrimMode    (UINT rf)                   {(rf == NV_PATCH_FLAG_TYPE_TRIANGULAR ? m_PatchData.flags |= NV_PATCH_FLAG_TYPE_TRIANGULAR : 
                                                                                            m_PatchData.flags &= ~NV_PATCH_FLAG_TYPE_MASK);}        
    void setTessellation(float *segs, int flag)     { if((flag & NV_PATCH_FLAG_TYPE_MASK) == NV_PATCH_FLAG_TYPE_TRIANGULAR)
                                                      {  m_PatchData.tess.tri.n1 = segs[1]; m_PatchData.tess.tri.n2 = segs[0]; 
                                                      {  m_PatchData.tess.tri.n1 = segs[1]; 
                                                         m_PatchData.tess.tri.n3 = segs[2]; }
                                                         m_PatchData.tess.tri.n2 = segs[2]; 
                                                         m_PatchData.tess.tri.n3 = segs[0]; }
                                                      else
                                                      {  m_PatchData.tess.tensor.nu0 = segs[0]; m_PatchData.tess.tensor.nv0 = segs[3]; 
                                                         m_PatchData.tess.tensor.nu1 = segs[2]; m_PatchData.tess.tensor.nv1 = segs[1]; }
                                                    }        
    void setOriginalTessellation(float *segs, int flag){ if((flag & NV_PATCH_FLAG_TYPE_MASK) == NV_PATCH_FLAG_TYPE_TRIANGULAR)
                                                      {  m_PatchData.originaltess.tri.n1 = segs[1]; m_PatchData.originaltess.tri.n2 = segs[0]; 
                                                      {  m_PatchData.originaltess.tri.n1 = segs[1]; 
                                                         m_PatchData.originaltess.tri.n3 = segs[2]; }
                                                         m_PatchData.originaltess.tri.n2 = segs[2]; 
                                                         m_PatchData.originaltess.tri.n3 = segs[0]; }
                                                      else
                                                      {  m_PatchData.originaltess.tensor.nu0 = segs[0]; m_PatchData.originaltess.tensor.nv0 = segs[3]; 
                                                         m_PatchData.originaltess.tensor.nu1 = segs[2]; m_PatchData.originaltess.tensor.nv1 = segs[1]; }
                                                    }        
   
    void prepareBuffer  (long);                     //stream type should be set BEFORE calling this

    void setVertexOffset(DWORD dwOffset)            {m_dwVertexOffset = dwOffset;}
    void setAutoNormal  (UINT dwSrc, UINT dwDst)    {m_PatchData.srcNormal = dwSrc; m_PatchData.dstNormal = dwDst;
                                                     m_PatchData.flags |= NV_PATCH_FLAG_AUTO_NORMAL; }
    void setAutoUV      (UINT dwSrc, UINT dwDst, int i){m_PatchData.srcUV[i] = dwSrc; m_PatchData.dstUV[i] = dwDst;
                                                     m_PatchData.flags |= NV_PATCH_FLAG_AUTO_UV;}
    void  setDimension  (UINT width, UINT height)   {m_dwWidth = width; m_dwHeight = height;}
    UINT  getWidth      ()                          {return m_dwWidth;}
    UINT  getHeight     ()                          {return m_dwHeight;}
    void  setOrder      (DWORD order)               {m_dwOrder = order;}
    DWORD getOrder      ()                          {return m_dwOrder;}
    void  setStride     (DWORD stride)              {m_dwStride = stride;}
    DWORD getStride     ()                          {return m_dwStride;}
    void  setTextureOffsets(float startu, float endu,
                           float startv, float endv){ m_PatchData.startu = startu; m_PatchData.startv = startv;
                                                      m_PatchData.endu   = endu;   m_PatchData.endv   = endv; }

    float getSeg        (UINT i)                    {switch(i){
                                                        case 0: return m_PatchData.tess.tensor.nu0;
                                                        case 1: return m_PatchData.tess.tensor.nv1;
                                                        case 2: return m_PatchData.tess.tensor.nu1;
                                                        case 3: return m_PatchData.tess.tensor.nv0;
                                                        default: return 0;
                                                    }}
    void setCalc        (UINT df)                   {for(int i=0; i < NV_PATCH_NUMBER_OF_ATTRIBS; i++) m_PatchData.maps[i].dirtyFlags = df;}
    UINT getCalc        ()                          {return m_PatchData.maps[0].dirtyFlags;}
    void setVertexStride(int size)                  {m_PatchData.vertexSize = size;}
};

#endif // __PATCH_HPP__

} // end namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\overlay.cpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       overlay.cpp
 *  Content:    Implementation of overlays.
 *
 ****************************************************************************/

#include "precomp.hpp"

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#define NV_OVERLAY_BYTE_ALIGNMENT_PAD   63L

//----------------------------------------------------------------------------
// D3DDevice_UpdateOverlay
//
extern "C"
void WINAPI D3DDevice_UpdateOverlay(
    D3DSurface *pSurface, 
    CONST RECT *SrcRect,
    CONST RECT *DstRect, 
    BOOL EnableColorKey, 
    D3DCOLOR ColorKey)
{
    COUNT_API(API_D3DDEVICE_UPDATEOVERLAY);

    CDevice *pDevice = g_pDevice;
    HWREG *reg = pDevice->m_NvBase;
    ULONG data, SrcWidth, SrcHeight, DstWidth, DstHeight, Pitch;
    ULONG Offset, PointIn, SizeIn;

    if (DBG_CHECK(TRUE))
    {
        if (!pSurface || !SrcRect || !DstRect)
        {
            DXGRIP("D3DDevice_UpdateOverlay - One of pSurface, SrcRect or DstRect is null");
        }

        if (PixelJar::GetFormat(pSurface) != D3DFMT_YUY2)
        {
            DXGRIP("D3DDevice_UpdateOverlay - Invalid surface format.");
        }
    }

#if DBG
    data = REG_RD32(reg, NV_PVIDEO_INTR);
    if (data & DRF_NUM(_PVIDEO, _INTR, _BUFFER_0, NV_PVIDEO_INTR_BUFFER_0_PENDING))
    {
        DXGRIP("Hardware overlay buffer not ready");
    }
#endif

    pDevice->m_Miniport.m_OverlayVBlank = pDevice->m_Miniport.m_VBlankCount;

    SrcWidth = SrcRect->right - SrcRect->left;
    SrcHeight = SrcRect->bottom - SrcRect->top;

    DstWidth = DstRect->right - DstRect->left;
    DstHeight = DstRect->bottom - DstRect->top;

    REG_WR32(reg, NV_PVIDEO_STOP,
            DRF_DEF(_PVIDEO, _STOP, _OVERLAY, _INACTIVE) |
            DRF_DEF(_PVIDEO, _STOP, _METHOD, _IMMEDIATELY));

    // Color key
    REG_WR32(reg, NV_PVIDEO_COLOR_KEY, ColorKey);

    Pitch = PixelJar::GetPitch(pSurface);
    Offset = GetGPUAddress(GetDataFromResource(pSurface));

    // This magic is what the nvidia driver does to get the right offset
    // for the overlay YUV surfaces.
    Offset += (SrcRect->top & ~0x1) * Pitch + ((SrcRect->left & ~0x1) << 1);
    PointIn = (Offset & NV_OVERLAY_BYTE_ALIGNMENT_PAD) << 3;
    SizeIn = (SrcHeight << 16) | SrcWidth;
    SizeIn += PointIn >> 4;
    Offset &= ~NV_OVERLAY_BYTE_ALIGNMENT_PAD;

    // Address of the data
    REG_WR32(reg, NV_PVIDEO_OFFSET(0), Offset);

    // Location of the source
    REG_WR32(reg, NV_PVIDEO_POINT_IN(0), PointIn);

    // Size of the source
    REG_WR32(reg, NV_PVIDEO_SIZE_IN(0), SizeIn);

    // Horizontal du/dx ratio
    if (DstWidth <= 1) {
        data = 0x100000;
    } else {
        data = ((SrcWidth - 1) << 20) / (DstWidth - 1);
    }
    REG_WR32(reg, NV_PVIDEO_DS_DX(0), data);

    // Vertical dv/dy ratio
    if (DstHeight <= 1) {
        data = 0x100000;
    } else {
        data = ((SrcHeight - 1) << 20) / (DstHeight - 1);
    }
    REG_WR32(reg, NV_PVIDEO_DT_DY(0), data);

    // Location of the destination
    data = (DstRect->top << 16) | DstRect->left;
    REG_WR32(reg, NV_PVIDEO_POINT_OUT(0), data);

    // Size of the destination
    data = (DstHeight << 16) | DstWidth;
    REG_WR32(reg, NV_PVIDEO_SIZE_OUT(0), data);


    // Format - always assumes YUY2
    data = (NV07A_SET_OVERLAY_FORMAT_COLOR_LE_CR8YB8CB8YA8 << 16);
    data |= Pitch;
    if (EnableColorKey)
    {
        data |= (NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_IMAGE << 20);
    }
    else
    {
        data |= (NV07A_SET_OVERLAY_FORMAT_COLOR_KEY_MISMATCH_SHOW_OVERLAY << 20);
    }
    REG_WR32(reg, NV_PVIDEO_FORMAT(0), data);

    data = AGP_APERTURE_BYTES - 1;

    REG_WR32(reg, NV_PVIDEO_LIMIT(0), data);

    // Enable the interrupt for the overlay and point the hardware to
    // read from buffer0
    data = REG_RD32(reg, NV_PVIDEO_INTR_EN);
    REG_WR32(reg, NV_PVIDEO_INTR_EN, data | DRF_NUM(_PVIDEO, _INTR_EN, _BUFFER_0, NV_PVIDEO_INTR_EN_BUFFER_0_ENABLED));
    REG_WR32(reg, NV_PVIDEO_BUFFER, DRF_NUM(_PVIDEO, _BUFFER, _0_USE, NV_PVIDEO_BUFFER_0_USE_SET));
}

//----------------------------------------------------------------------------
// D3DDevice_EnableOverlay
//
extern "C"
void WINAPI D3DDevice_EnableOverlay(BOOL Enable)
{
    COUNT_API(API_D3DDEVICE_ENABLEOVERLAY);

    CDevice *pDevice = g_pDevice;
    HWREG *reg = pDevice->m_NvBase;

    if (REG_RD32(reg, NV_PVIDEO_BUFFER))
    {
        REG_WR32(reg, NV_PVIDEO_STOP,
                DRF_DEF(_PVIDEO, _STOP, _OVERLAY, _ACTIVE) |
                DRF_DEF(_PVIDEO, _STOP, _METHOD, _IMMEDIATELY));
    }

    // Make sure we're in an idle state
    while (REG_RD32(reg, NV_PVIDEO_BUFFER));

    // Reset overlay interrupts
    REG_WR32(reg, NV_PVIDEO_INTR,
            DRF_DEF(_PVIDEO, _INTR, _BUFFER_0, _RESET) |
            DRF_DEF(_PVIDEO, _INTR, _BUFFER_1, _RESET));

    REG_WR32(reg, NV_PVIDEO_OFFSET(0), 0);
    REG_WR32(reg, NV_PVIDEO_SIZE_IN(0), 0xFFFFFFFF);
    REG_WR32(reg, NV_PVIDEO_POINT_IN(0), 0);
    REG_WR32(reg, NV_PVIDEO_BASE(0), 0);

    REG_WR32(reg, NV_PVIDEO_LUMINANCE(0),
            DRF_DEF(_PVIDEO, _LUMINANCE, _CONTRAST, _UNITY) |
            DRF_DEF(_PVIDEO, _LUMINANCE, _BRIGHTNESS, _UNITY));

    REG_WR32(reg, NV_PVIDEO_CHROMINANCE(0),
            DRF_DEF(_PVIDEO, _CHROMINANCE, _SAT_COS, _UNITY) |
            DRF_DEF(_PVIDEO, _CHROMINANCE, _SAT_SIN, _UNITY));
}

//----------------------------------------------------------------------------
// D3DDevice_GetOverlayUpdateStatus
//
extern "C"
BOOL WINAPI D3DDevice_GetOverlayUpdateStatus()
{
    COUNT_API(API_D3DDEVICE_GETOVERLAYUPDATESTATUS);

    CDevice* pDevice = g_pDevice;

    if (pDevice->m_Miniport.m_OverlayVBlank == pDevice->m_Miniport.m_VBlankCount)
    {
        return FALSE;
    }

    return TRUE;
}

extern "C"
void WINAPI D3DDevice_EnableCC(BOOL Enable)
{
    COUNT_API(API_D3DDEVICE_ENABLECC);

    PVOID RegisterBase = g_pDevice->m_Miniport.m_RegisterBase;
    AvSendTVEncoderOption(RegisterBase, AV_OPTION_ENABLE_CC, Enable, NULL);
}

extern "C"
void WINAPI D3DDevice_SendCC(BOOL Field, BYTE cc1, BYTE cc2)
{
    COUNT_API(API_D3DDEVICE_SENDCC);

    PVOID RegisterBase = g_pDevice->m_Miniport.m_RegisterBase;
    ULONG Result = (cc1 << 16) | cc2;
    AvSendTVEncoderOption(RegisterBase, AV_OPTION_SEND_CC_DATA, Field, &Result);
}

extern "C"
void WINAPI D3DDevice_GetCCStatus(BOOL *pField1, BOOL *pField2)
{
    COUNT_API(API_D3DDEVICE_GETCCSTATUS);

    PVOID RegisterBase = g_pDevice->m_Miniport.m_RegisterBase;
    ULONG Result;
    AvSendTVEncoderOption(RegisterBase, AV_QUERY_CC_STATUS, 0, &Result);

    *pField1 = !(Result & 1);
    *pField2 = !(Result & 2);
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\PatchConst.cpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       PatchConst.cpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/

#include "precomp.hpp"

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#if defined(_MSC_VER)
# pragma warning (disable:4305)  /* Disable VC++ 5.0 "truncation from 'const double' to 'float' */
#endif

// Bezier basis matrices
static float bezBasis1[1][1] = {
    {1},
};

static float bezBasis2[2][2] = {
    {-1, 1},
    { 1, 0},
};

static float bezBasis3[3][3] = {
    { 1, -2, 1},
    {-2,  2, 0},
    { 1,  0, 0},
};

static float bezBasis4[4][4] = {
    {-1,  3, -3, 1},
    { 3, -6,  3, 0},
    {-3,  3,  0, 0},
    { 1,  0,  0, 0},
};

static float bezBasis5[5][5] = {
    { 1,  -4,   6, -4, 1},
    {-4,  12, -12,  4, 0},
    { 6, -12,   6,  0, 0},
    {-4,   4,   0,  0, 0},
    { 1,   0,   0,  0, 0},
};

static float bezBasis6[6][6] = {
    { -1,   5, -10,  10, -5, 1},
    {  5, -20,  30, -20,  5, 0},
    {-10,  30, -30,  10,  0, 0},
    { 10, -20,  10,   0,  0, 0},
    { -5,   5,   0,   0,  0, 0},
    {  1,   0,   0,   0,  0, 0},
};

static float bezBasis7[7][7] = {
    {  1,  -6,  15, -20,  15, -6, 1},
    { -6,  30, -60,  60, -30,  6, 0},
    { 15, -60,  90, -60,  15,  0, 0},
    {-20,  60, -60,  20,   0,  0, 0},
    { 15, -30,  15,   0,   0,  0, 0},
    { -6,   6,   0,   0,   0,  0, 0},
    {  1,   0,   0,   0,   0,  0, 0},
};

static float bezBasis8[8][8] = {
    { -1,    7,  -21,   35,  -35,  21, -7, 1},
    {  7,  -42,  105, -140,  105, -42,  7, 0},
    {-21,  105, -210,  210, -105,  21,  0, 0},
    { 35, -140,  210, -140,   35,   0,  0, 0},
    {-35,  105, -105,   35,    0,   0,  0, 0},
    { 21,  -42,   21,    0,    0,   0,  0, 0},
    { -7,    7,    0,    0,    0,   0,  0, 0},
    {  1,    0,    0,    0,    0,   0,  0, 0},
};

static float bezBasis9[9][9] = {
    {  1,   -8,   28,  -56,   70,  -56,  28, -8, 1},
    { -8,   56, -168,  280, -280,  168, -56,  8, 0},
    { 28, -168,  420, -560,  420, -168,  28,  0, 0},
    {-56,  280, -560,  560, -280,   56,   0,  0, 0},
    { 70, -280,  420, -280,   70,    0,   0,  0, 0},
    {-56,  168, -168,   56,    0,    0,   0,  0, 0},
    { 28,  -56,   28,    0,    0,    0,   0,  0, 0},
    { -8,    8,    0,    0,    0,    0,   0,  0, 0},
    {  1,    0,    0,    0,    0,    0,   0,  0, 0},
};

static float bezBasis10[10][10] = {
    {  -1,    9,   -36,    84,  -126,  126,  -84,  36, -9, 1},
    {   9,  -72,   252,  -504,   630, -504,  252, -72,  9, 0},
    { -36,  252,  -756,  1260, -1260,  756, -252,  36,  0, 0},
    {  84, -504,  1260, -1680,  1260, -504,   84,   0,  0, 0},
    {-126,  630, -1260,  1260,  -630,  126,    0,   0,  0, 0},
    { 126, -504,   756,  -504,   126,    0,    0,   0,  0, 0},
    { -84,  252,  -252,    84,     0,    0,    0,   0,  0, 0},
    {  36,  -72,    36,     0,     0,    0,    0,   0,  0, 0},
    {  -9,    9,     0,     0,     0,    0,    0,   0,  0, 0},
    {   1,    0,     0,     0,     0,    0,    0,   0,  0, 0},
};

static float bezBasis11[11][11] = {
    {1, -10, 45, -120, 210, -252, 210, -120, 45, -10, 1},
    {-10, 90, -360, 840, -1260, 1260, -840, 360, -90, 10, 0},
    {45, -360, 1260, -2520, 3150, -2520, 1260, -360, 45, 0, 0},
    {-120, 840, -2520, 4200, -4200, 2520, -840, 120, 0, 0, 0},
    {210, -1260, 3150, -4200, 3150, -1260, 210, 0, 0, 0, 0},
    {-252, 1260, -2520, 2520, -1260, 252, 0, 0, 0, 0, 0},
    {210, -840, 1260, -840, 210, 0, 0, 0, 0, 0, 0},
    {-120, 360, -360, 120, 0, 0, 0, 0, 0, 0, 0},
    {45, -90, 45, 0, 0, 0, 0, 0, 0, 0, 0},
    {-10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float bezBasis12[12][12] = {
    {-1, 11, -55, 165, -330, 462, -462, 330, -165, 55, -11, 1},
    {11, -110, 495, -1320, 2310, -2772, 2310, -1320, 495, -110, 11, 0},
    {-55, 495, -1980, 4620, -6930, 6930, -4620, 1980, -495, 55, 0, 0},
    {165, -1320, 4620, -9240, 11550, -9240, 4620, -1320, 165, 0, 0, 0},
    {-330, 2310, -6930, 11550, -11550, 6930, -2310, 330, 0, 0, 0, 0},
    {462, -2772, 6930, -9240, 6930, -2772, 462, 0, 0, 0, 0, 0},
    {-462, 2310, -4620, 4620, -2310, 462, 0, 0, 0, 0, 0, 0},
    {330, -1320, 1980, -1320, 330, 0, 0, 0, 0, 0, 0, 0},
    {-165, 495, -495, 165, 0, 0, 0, 0, 0, 0, 0, 0},
    {55, -110, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-11, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float bezBasis13[13][13] = {
    {1, -12, 66, -220, 495, -792, 924, -792, 495, -220, 66, -12, 1},
    {-12, 132, -660, 1980, -3960, 5544, -5544, 3960, -1980, 660, -132, 12, 0},
    {66, -660, 2970, -7920, 13860, -16632, 13860, -7920, 2970, -660, 66, 0, 0},
    {-220, 1980, -7920, 18480, -27720, 27720, -18480, 7920, -1980, 220, 0, 0, 0},
    {495, -3960, 13860, -27720, 34650, -27720, 13860, -3960, 495, 0, 0, 0, 0},
    {-792, 5544, -16632, 27720, -27720, 16632, -5544, 792, 0, 0, 0, 0, 0},
    {924, -5544, 13860, -18480, 13860, -5544, 924, 0, 0, 0, 0, 0, 0},
    {-792, 3960, -7920, 7920, -3960, 792, 0, 0, 0, 0, 0, 0, 0},
    {495, -1980, 2970, -1980, 495, 0, 0, 0, 0, 0, 0, 0, 0},
    {-220, 660, -660, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {66, -132, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float bezBasis14[14][14] = {
    {   -1,     13,    -78,    286,   -715,   1287,  -1716,   1716,  -1287,   715, -286,   78, -13, 1},
    {   13,   -156,    858,  -2860,   6435, -10296,  12012, -10296,   6435, -2860,  858, -156,  13, 0},
    {  -78,    858,  -4290,  12870, -25740,  36036, -36036,  25740, -12870,  4290, -858,   78,   0, 0},
    {  286,  -2860,  12870, -34320,  60060, -72072,  60060, -34320,  12870, -2860,  286,    0,   0, 0},
    { -715,   6435, -25740,  60060, -90090,  90090, -60060,  25740,  -6435,   715,    0,    0,   0, 0},
    { 1287, -10296,  36036, -72072,  90090, -72072,  36036, -10296,   1287,     0,    0,    0,   0, 0},
    {-1716,  12012, -36036,  60060, -60060,  36036, -12012,   1716,      0,     0,    0,    0,   0, 0},
    { 1716, -10296,  25740, -34320,  25740, -10296,   1716,      0,      0,     0,    0,    0,   0, 0},
    {-1287,   6435, -12870,  12870,  -6435,   1287,      0,      0,      0,     0,    0,    0,   0, 0},
    {  715,  -2860,   4290,  -2860,    715,      0,      0,      0,      0,     0,    0,    0,   0, 0},
    { -286,    858,   -858,    286,      0,      0,      0,      0,      0,     0,    0,    0,   0, 0},
    {   78,   -156,     78,      0,      0,      0,      0,      0,      0,     0,    0,    0,   0, 0},
    {  -13,     13,      0,      0,      0,      0,      0,      0,      0,     0,    0,    0,   0, 0},
    {    1,      0,      0,      0,      0,      0,      0,      0,      0,     0,    0,    0,   0, 0},
};

static float bezBasis15[15][15] = {
    {    1, -14, 91, -364, 1001, -2002, 3003, -3432, 3003, -2002, 1001, -364, 91, -14, 1},
    {  -14, 182, -1092, 4004, -10010, 18018, -24024, 24024, -18018, 10010, -4004, 1092, -182, 14, 0},
    {   91, -1092, 6006, -20020, 45045, -72072, 84084, -72072, 45045, -20020, 6006, -1092, 91, 0, 0},
    { -364, 4004, -20020, 60060, -120120, 168168, -168168, 120120, -60060, 20020, -4004, 364, 0, 0, 0},
    { 1001, -10010, 45045, -120120, 210210, -252252, 210210, -120120, 45045, -10010, 1001, 0, 0, 0, 0},
    {-2002, 18018, -72072, 168168, -252252, 252252, -168168, 72072, -18018, 2002, 0, 0, 0, 0, 0},
    { 3003, -24024, 84084, -168168, 210210, -168168, 84084, -24024, 3003, 0, 0, 0, 0, 0, 0},
    {-3432, 24024, -72072, 120120, -120120, 72072, -24024, 3432, 0, 0, 0, 0, 0, 0, 0},
    { 3003, -18018, 45045, -60060, 45045, -18018, 3003, 0, 0, 0, 0, 0, 0, 0, 0},
    {-2002,  10010, -20020, 20020, -10010, 2002, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { 1001,  -4004,   6006, -4004, 1001, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    { -364,   1092,  -1092, 364, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {   91,   -182,     91, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {  -14,     14,      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {    1,      0,      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float bezBasis16[16][16] = {
    {-1, 15, -105, 455, -1365, 3003, -5005, 6435, -6435, 5005, -3003, 1365, -455, 105, -15, 1},
    {15, -210, 1365, -5460, 15015, -30030, 45045, -51480, 45045, -30030, 15015, -5460, 1365, -210, 15, 0},
    {-105, 1365, -8190, 30030, -75075, 135135, -180180, 180180, -135135, 75075, -30030, 8190, -1365, 105, 0, 0},
    {455, -5460, 30030, -100100, 225225, -360360, 420420, -360360, 225225, -100100, 30030, -5460, 455, 0, 0, 0},
    {-1365, 15015, -75075, 225225, -450450, 630630, -630630, 450450, -225225, 75075, -15015, 1365, 0, 0, 0, 0},
    {3003, -30030, 135135, -360360, 630630, -756756, 630630, -360360, 135135, -30030, 3003, 0, 0, 0, 0, 0},
    {-5005, 45045, -180180, 420420, -630630, 630630, -420420, 180180, -45045, 5005, 0, 0, 0, 0, 0, 0},
    {6435, -51480, 180180, -360360, 450450, -360360, 180180, -51480, 6435, 0, 0, 0, 0, 0, 0, 0},
    {-6435, 45045, -135135, 225225, -225225, 135135, -45045, 6435, 0, 0, 0, 0, 0, 0, 0, 0},
    {5005, -30030, 75075, -100100, 75075, -30030, 5005, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-3003, 15015, -30030, 30030, -15015, 3003, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1365, -5460, 8190, -5460, 1365, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-455, 1365, -1365, 455, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {105, -210, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {-15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
};

static float catmullRomBasis4[4][4] = {
    {-1.0f/2,  3.0f/2, -3.0f/2,  1.0f/2}, 
    {   1.0f, -5.0f/2,    2.0f, -1.0f/2}, 
    {-1.0f/2,    0.0f,  1.0f/2,    0.0f}, 
    {   0.0f,    1.0f,    0.0f,    0.0f}
};

//divisors on bspline basis are factorial(order)
static float bsplineBasis1[1][1] = {
    {1},
};

static float bsplineBasis2[2][2] = {
    {-1.0f, 1.0f},
    { 1.0f, 0.0f}
};

static float bsplineBasis3[3][3] = {
    { 1.0f/2, -2.0f/2, 1.0f/2}, 
    {-2.0f/2,  2.0f/2, 0.0f/2}, 
    { 1.0f/2,  1.0f/2, 0.0f/2}
};

static float bsplineBasis4[4][4] = {
    {-1.0f/6,  3.0f/6, -3.0f/6, 1.0f/6}, 
    { 3.0f/6, -6.0f/6,  3.0f/6, 0.0f/6}, 
    {-3.0f/6,  0.0f/6,  3.0f/6, 0.0f/6},  
    { 1.0f/6,  4.0f/6,  1.0f/6, 0.0f/6}
};

static float bsplineBasis5[5][5] = {
    { 1.0f/24,  -4.0f/24,   6.0f/24, -4.0f/24, 1.0f/24}, 
    {-4.0f/24,  12.0f/24, -12.0f/24,  4.0f/24, 0.0f/24}, 
    { 6.0f/24,  -6.0f/24,  -6.0f/24,  6.0f/24, 0.0f/24}, 
    {-4.0f/24, -12.0f/24,  12.0f/24,  4.0f/24, 0.0f/24}, 
    { 1.0f/24,  11.0f/24,  11.0f/24,  1.0f/24, 0.0f/24}
};

static float bsplineBasis6[6][6] = {
    { -1.0f/120,   5.0f/120, -10.0f/120,  10.0f/120, -5.0f/120, 1.0f/120}, 
    {  5.0f/120, -20.0f/120,  30.0f/120, -20.0f/120,  5.0f/120, 0.0f/120}, 
    {-10.0f/120,  20.0f/120,   0.0f/120,  20.0f/120, 10.0f/120, 0.0f/120}, 
    { -5.0f/120, -50.0f/120,   0.0f/120,  50.0f/120,  5.0f/120, 0.0f/120}, 
    {  1.0f/120,  26.0f/120,  66.0f/120,  26.0f/120,  1.0f/120, 0.0f/120},
    {  5.0f/120, -20.0f/120,  30.0f/120, -20.0f/120,  5.0f/120, 0.0f/120} 
};

static float bsplineBasis7[7][7] = {
    {  1.0f/720,   -6.0f/720,   15.0f/720,  -20.0f/720,  15.0f/720, -6.0f/720, 1.0f/720}, 
    { -6.0f/720,   30.0f/720,  -60.0f/720,   60.0f/720, -30.0f/720,  6.0f/720, 0.0f/720}, 
    { 15.0f/720,  -45.0f/720,   30.0f/720,   30.0f/720, -45.0f/720, 15.0f/720, 0.0f/720}, 
    {-20.0f/720,  -20.0f/720,  160.0f/720, -160.0f/720,  20.0f/720, 20.0f/720, 0.0f/720}, 
    { 15.0f/720,  135.0f/720, -150.0f/720, -150.0f/720, 135.0f/720, 15.0f/720, 0.0f/720}, 
    { -6.0f/720, -150.0f/720, -240.0f/720,  240.0f/720, 150.0f/720,  6.0f/720, 0.0f/720}, 
    {  1.0f/720,   57.0f/720,  302.0f/720,  302.0f/720,  57.0f/720,  1.0f/720, 0.0f/720}
};
 
static float bsplineBasis8[8][8] = {
    { -1.0f/5040,    7.0f/5040,   -21.0f/5040,    35.0f/5040,  -35.0f/5040,  21.0f/5040,  -7.0f/5040,  1.0f/5040}, 
    {  7.0f/5040,  -42.0f/5040,   105.0f/5040,  -140.0f/5040,  105.0f/5040, -42.0f/5040,   7.0f/5040,  0.0f/5040}, 
    {-21.0f/5040,   84.0f/5040,  -105.0f/5040,     0.0f/5040,  105.0f/5040, -84.0f/5040,  21.0f/5040,  0.0f/5040}, 
    { 35.0f/5040,    0.0f/5040,  -315.0f/5040,   560.0f/5040, -315.0f/5040,   0.0f/5040,  35.0f/5040,  0.0f/5040}, 
    {-35.0f/5040, -280.0f/5040,   665.0f/5040,     0.0f/5040, -665.0f/5040, 280.0f/5040,  35.0f/5040,  0.0f/5040}, 
    { 21.0f/5040,  504.0f/5040,   315.0f/5040, -1680.0f/5040,  315.0f/5040, 504.0f/5040,  21.0f/5040,  0.0f/5040}, 
    { -7.0f/5040, -392.0f/5040, -1715.0f/5040,     0.0f/5040, 1715.0f/5040, 392.0f/5040,   7.0f/5040,  0.0f/5040}, 
    {  1.0f/5040,  120.0f/5040,  1191.0f/5040,  2416.0f/5040, 1191.0f/5040, 120.0f/5040,   1.0f/5040,  0.0f/5040}
};

static float bsplineBasis9[9][9] = {
    {  1.0f/362880,    -8.0f/362880,    28.0f/362880,   -56.0f/362880,    70.0f/362880,   -56.0f/362880,   28.0f/362880, -8.0f/362880, 1.0f/362880}, 
    { -8.0f/362880,    56.0f/362880,  -168.0f/362880,   280.0f/362880,  -280.0f/362880,   168.0f/362880,  -56.0f/362880,  8.0f/362880, 0.0f/362880}, 
    { 28.0f/362880,  -140.0f/362880,   252.0f/362880,  -140.0f/362880,  -140.0f/362880,   252.0f/362880, -140.0f/362880, 28.0f/362880, 0.0f/362880}, 
    {-56.0f/362880,    56.0f/362880,   504.0f/362880, -1400.0f/362880,  1400.0f/362880,  -504.0f/362880,  -56.0f/362880, 56.0f/362880, 0.0f/362880}, 
    { 70.0f/362880,   490.0f/362880, -1890.0f/362880,  1330.0f/362880,  1330.0f/362880, -1890.0f/362880,  490.0f/362880, 70.0f/362880, 0.0f/362880}, 
    {-56.0f/362880, -1288.0f/362880,   504.0f/362880,  5320.0f/362880, -5320.0f/362880,  -504.0f/362880, 1288.0f/362880, 56.0f/362880, 0.0f/362880}, 
    { 28.0f/362880,  1540.0f/362880,  5292.0f/362880, -6860.0f/362880, -6860.0f/362880,  5292.0f/362880, 1540.0f/362880, 28.0f/362880, 0.0f/362880}, 
    { -8.0f/362880,  -952.0f/362880, -8568.0f/362880, -9800.0f/362880,  9800.0f/362880,  8568.0f/362880,  952.0f/362880,  8.0f/362880, 0.0f/362880}, 
    {  1.0f/362880,   247.0f/362880,  4293.0f/362880, 15619.0f/362880, 15619.0f/362880,  4293.0f/362880,  247.0f/362880,  1.0f/362880, 0.0f/362880}
};

static float bsplineBasis10[10][10] = {
    {  -1.0f/3628800,     9.0f/3628800,    -36.0f/3628800,      84.0f/3628800,   -126.0f/3628800,    126.0f/3628800,   -84.0f/3628800,   36.0f/3628800,  -9.0f/3628800, 1.0f/3628800}, 
    {   9.0f/3628800,   -72.0f/3628800,    252.0f/3628800,    -504.0f/3628800,    630.0f/3628800,   -504.0f/3628800,   252.0f/3628800,  -72.0f/3628800,   9.0f/3628800, 0.0f/3628800}, 
    { -36.0f/3628800,   216.0f/3628800,   -504.0f/3628800,     504.0f/3628800,      0.0f/3628800,   -504.0f/3628800,   504.0f/3628800, -216.0f/3628800,  36.0f/3628800, 0.0f/3628800}, 
    {  84.0f/3628800,  -168.0f/3628800,   -672.0f/3628800,    2856.0f/3628800,  -4200.0f/3628800,   2856.0f/3628800,  -672.0f/3628800, -168.0f/3628800,  84.0f/3628800, 0.0f/3628800}, 
    {-126.0f/3628800,  -756.0f/3628800,   4284.0f/3628800,   -5796.0f/3628800,      0.0f/3628800,   5796.0f/3628800, -4284.0f/3628800,  756.0f/3628800, 126.0f/3628800, 0.0f/3628800}, 
    { 126.0f/3628800,  2772.0f/3628800,  -4032.0f/3628800,  -10836.0f/3628800,  23940.0f/3628800, -10836.0f/3628800, -4032.0f/3628800, 2772.0f/3628800, 126.0f/3628800, 0.0f/3628800}, 
    { -84.0f/3628800, -4536.0f/3628800, -11256.0f/3628800,   36456.0f/3628800,      0.0f/3628800, -36456.0f/3628800, 11256.0f/3628800, 4536.0f/3628800,  84.0f/3628800, 0.0f/3628800}, 
    {  36.0f/3628800,  4248.0f/3628800,  34272.0f/3628800,    5544.0f/3628800, -88200.0f/3628800,   5544.0f/3628800, 34272.0f/3628800, 4248.0f/3628800,  36.0f/3628800, 0.0f/3628800}, 
    {  -9.0f/3628800, -2214.0f/3628800, -36414.0f/3628800, -101934.0f/3628800,      0.0f/3628800, 101934.0f/3628800, 36414.0f/3628800, 2214.0f/3628800,   9.0f/3628800, 0.0f/3628800}, 
    {   1.0f/3628800,   502.0f/3628800,  14608.0f/3628800,   88234.0f/3628800, 156190.0f/3628800,  88234.0f/3628800, 14608.0f/3628800,  502.0f/3628800,   1.0f/3628800, 0.0f/3628800}
};

static float bsplineBasis11[11][11] = {
    {   1.0f/39916800,    -10.0f/39916800,      45.0f/39916800,    -120.0f/39916800,     210.0f/39916800,    -252.0f/39916800,     210.0f/39916800,   -120.0f/39916800,    45.0f/39916800, -10.0f/39916800, 1.0f/39916800}, 
    { -10.0f/39916800,     90.0f/39916800,    -360.0f/39916800,     840.0f/39916800,   -1260.0f/39916800,    1260.0f/39916800,    -840.0f/39916800,    360.0f/39916800,   -90.0f/39916800,  10.0f/39916800, 0.0f/39916800}, 
    {  45.0f/39916800,   -315.0f/39916800,     900.0f/39916800,   -1260.0f/39916800,     630.0f/39916800,     630.0f/39916800,   -1260.0f/39916800,    900.0f/39916800,  -315.0f/39916800,  45.0f/39916800, 0.0f/39916800}, 
    {-120.0f/39916800,    360.0f/39916800,     720.0f/39916800,   -5040.0f/39916800,   10080.0f/39916800,  -10080.0f/39916800,    5040.0f/39916800,   -720.0f/39916800,  -360.0f/39916800, 120.0f/39916800, 0.0f/39916800}, 
    { 210.0f/39916800,   1050.0f/39916800,   -8400.0f/39916800,   16800.0f/39916800,   -9660.0f/39916800,   -9660.0f/39916800,   16800.0f/39916800,  -8400.0f/39916800,  1050.0f/39916800, 210.0f/39916800, 0.0f/39916800}, 
    {-252.0f/39916800,  -5292.0f/39916800,   13608.0f/39916800,   13608.0f/39916800,  -69552.0f/39916800,   69552.0f/39916800,  -13608.0f/39916800, -13608.0f/39916800,  5292.0f/39916800, 252.0f/39916800, 0.0f/39916800}, 
    { 210.0f/39916800,  11130.0f/39916800,   16800.0f/39916800, -119280.0f/39916800,   91140.0f/39916800,   91140.0f/39916800, -119280.0f/39916800,  16800.0f/39916800, 11130.0f/39916800, 210.0f/39916800, 0.0f/39916800}, 
    {-120.0f/39916800, -14040.0f/39916800, -100080.0f/39916800,   95760.0f/39916800,  312480.0f/39916800, -312480.0f/39916800,  -95760.0f/39916800, 100080.0f/39916800, 14040.0f/39916800, 120.0f/39916800, 0.0f/39916800}, 
    {  45.0f/39916800,  11025.0f/39916800,  171000.0f/39916800,  327600.0f/39916800, -509670.0f/39916800, -509670.0f/39916800,  327600.0f/39916800, 171000.0f/39916800, 11025.0f/39916800,  45.0f/39916800, 0.0f/39916800}, 
    { -10.0f/39916800,  -5010.0f/39916800, -141060.0f/39916800, -736260.0f/39916800, -679560.0f/39916800,  679560.0f/39916800,  736260.0f/39916800, 141060.0f/39916800,  5010.0f/39916800,  10.0f/39916800, 0.0f/39916800}, 
    {   1.0f/39916800,   1013.0f/39916800,   47840.0f/39916800,  455192.0f/39916800, 1310354.0f/39916800, 1310354.0f/39916800,  455192.0f/39916800,  47840.0f/39916800,  1013.0f/39916800,   1.0f/39916800, 0.0f/39916800}
};

// Matrices to convert from power basis to FD basis
static float powerToFD1[1][1] = {
    {1},
};

static float powerToFD2[2][2] = {
    {0, 1},
    {1, 0},
};

static float powerToFD3[3][3] = {
    {0, 0, 1},
    {1, 1, 0},
    {2, 0, 0},
};

static float powerToFD4[4][4] = {
    {0, 0, 0, 1},
    {1, 1, 1, 0},
    {6, 2, 0, 0},
    {6, 0, 0, 0},
};

static float powerToFD5[5][5] = {
    {0, 0, 0, 0, 1},
    {1, 1, 1, 1, 0},
    {14, 6, 2, 0, 0},
    {36, 6, 0, 0, 0},
    {24, 0, 0, 0, 0},
};

static float powerToFD6[6][6] = {
    {0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 0},
    {30, 14, 6, 2, 0, 0},
    {150, 36, 6, 0, 0, 0},
    {240, 24, 0, 0, 0, 0},
    {120, 0, 0, 0, 0, 0},
};

static float powerToFD7[7][7] = {
    {0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 0},
    {62, 30, 14, 6, 2, 0, 0},
    {540, 150, 36, 6, 0, 0, 0},
    {1560, 240, 24, 0, 0, 0, 0},
    {1800, 120, 0, 0, 0, 0, 0},
    {720, 0, 0, 0, 0, 0, 0},
};

static float powerToFD8[8][8] = {
    {0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 0},
    {126, 62, 30, 14, 6, 2, 0, 0},
    {1806, 540, 150, 36, 6, 0, 0, 0},
    {8400, 1560, 240, 24, 0, 0, 0, 0},
    {16800, 1800, 120, 0, 0, 0, 0, 0},
    {15120, 720, 0, 0, 0, 0, 0, 0},
    {5040, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD9[9][9] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 0},
    {254, 126, 62, 30, 14, 6, 2, 0, 0},
    {5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {40320, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD10[10][10] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD11[11][11] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {5103000, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {16435440, 1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {29635200, 2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {30240000, 1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {16329600, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {3628800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD12[12][12] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {2046, 1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {171006, 55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {3498000, 818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {29607600, 5103000, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {129230640, 16435440, 1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {322494480, 29635200, 2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {479001600, 30240000, 1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {419126400, 16329600, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {199584000, 3628800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {39916800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD13[13][13] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {4094, 2046, 1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {519156, 171006, 55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {14676024, 3498000, 818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {165528000.0, 29607600, 5103000, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {953029440.0, 129230640, 16435440, 1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {3162075840.0, 322494480, 29635200, 2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {6411968640.0, 479001600, 30240000, 1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {8083152000.0, 419126400, 16329600, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {6187104000.0, 199584000, 3628800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2634508800.0, 39916800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {479001600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD14[14][14] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {8190, 4094, 2046, 1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {1569750, 519156, 171006, 55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {60780720, 14676024, 3498000, 818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {901020120, 165528000.0, 29607600, 5103000, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {6711344640.0, 953029440.0, 129230640, 16435440, 1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {28805736960.0, 3162075840.0, 322494480, 29635200, 2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {76592355840.0, 6411968640.0, 479001600, 30240000, 1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {130456085760.0, 8083152000.0, 419126400, 16329600, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {142702560000.0, 6187104000.0, 199584000, 3628800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {97037740800.0, 2634508800.0, 39916800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {37362124800.0, 479001600.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1932053504.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD15[15][15] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {16382, 8190, 4094, 2046, 1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {4733820, 1569750, 519156, 171006, 55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {249401880.0, 60780720, 14676024, 3498000, 818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {4809004200.0, 901020120.0, 165528000.0, 29607600.0, 5103000, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {45674188560.0, 6711344640.0, 953029440.0, 129230640.0, 16435440.0, 1905120, 191520, 15120, 720, 0, 0, 0, 0, 0, 0},
    {248619571200.0, 28805736960.0, 3162075840.0, 322494480.0, 29635200.0, 2328480, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {843184742400.0, 76592355840.0, 6411968640.0, 479001600.0, 30240000.0, 1451520, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {1863435974400.0, 130456085760.0, 8083152000.0, 419126400.0, 16329600.0, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2731586457600.0, 142702560000.0, 6187104000.0, 199584000.0, 3628800, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2637143308800.0, 97037740800.0, 2634508800.0, 39916800.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1612798387200.0, 37362124800.0, 479001600.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {175816868864.0, 1932053504.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {1278945280.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float powerToFD16[16][16] = {
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0},
    {32766, 16382, 8190, 4094, 2046, 1022, 510, 254, 126, 62, 30, 14, 6, 2, 0, 0},
    {14250606, 4733820, 1569750, 519156, 171006, 55980, 18150, 5796, 1806, 540, 150, 36, 6, 0, 0, 0},
    {1016542800.0, 249401880.0, 60780720.0, 14676024.0, 3498000, 818520, 186480, 40824, 8400, 1560, 240, 24, 0, 0, 0, 0},
    {25292030400.0, 4809004200.0, 901020120.0, 165528000.0, 29607600.0, 5103000.0, 834120, 126000, 16800, 1800, 120, 0, 0, 0, 0, 0},
    {302899156560.0, 45674188560.0, 6711344640.0, 953029440.0, 129230640.0, 16435440.0, 1905120.0, 191520.0, 15120, 720, 0, 0, 0, 0, 0, 0},
    {2060056318320.0, 248619571200.0, 28805736960.0, 3162075840.0, 322494480.0, 29635200.0, 2328480.0, 141120, 5040, 0, 0, 0, 0, 0, 0, 0},
    {8734434508800.0, 843184742400.0, 76592355840.0, 6411968640.0, 479001600.0, 30240000.0, 1451520.0, 40320, 0, 0, 0, 0, 0, 0, 0, 0},
    {24359586451200.0, 1863435974400.0, 130456085760.0, 8083152000.0, 419126400.0, 16329600.0, 362880, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {45950224320000.0, 2731586457600.0, 142702560000.0, 6187104000.0, 199584000.0, 3628800.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {59056027430400.0, 2637143308800.0, 97037740800.0, 2634508800.0, 39916800.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {50999300352000.0, 1612798387200.0, 37362124800.0, 479001600.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {8790843443200.0, 175816868864.0, 1932053504.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {134289254400.0, 1278945280.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    {2004310016.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD1[1][1] = {
 {1},
};

static float inversePowerToFD2[2][2] = {
 {0, 1},
 {1, 0},
};

static float inversePowerToFD3[3][3] = {
 {0, 0, 0.5},
 {0, 1.0, -0.5},
 {1.0, 0, 0},
};

static float inversePowerToFD4[4][4] = {
 {0, 0, 0, 0.1666666666666667},
 {0, 0, 0.5, -0.5},
 {0, 1.0, -0.5, 0.3333333333333334},
 {1.0, 0, 0, 0},
};

static float inversePowerToFD5[5][5] = {
 { 0, 0, 0, 0, 0.04166666666666666},
 { 0, 0, 0, 0.1666666666666667, -0.25},
 { 0, 0, 0.5, -0.5, 0.4583333333333334},
 { 0, 1.0, -0.5, 0.3333333333333333, -0.25},
 { 1.0, 0, 0, 0, 0}, 
};

static float inversePowerToFD6[6][6] = {
 { 0, 0, 0, 0, -8.673617379884036e-019, 8.333333333333335e-003},
 { 0, 0, 0, 0, 4.166666666666666e-002, -8.333333333333333e-002},
 { 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666667e-001},
 { 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333334e-001, -4.166666666666667e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.500000000000000e-001, 2.000000000000001e-001},
 { 1.000000000000000e+000, 0, 0, 0, 0, 0},
};

static float inversePowerToFD7[7][7] = {
 { 0, 0, 0, 0, 1.084202172485504e-019, -2.168404344971009e-019, 1.388888888888889e-003},
 { 0, 0, 0, -1.734723475976807e-018, 2.602085213965211e-018, 8.333333333333332e-003, -2.083333333333333e-002},
 { 0, 0, 0, 0, 4.166666666666667e-002, -8.333333333333334e-002, 1.180555555555556e-001},
 { 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666667e-001, -3.125000000000001e-001},
 { 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333334e-001, -4.166666666666667e-001, 3.805555555555557e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333334e-001, -2.500000000000001e-001, 2.000000000000001e-001, -1.666666666666668e-001},
 {1.000000000000000e+000, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD8[8][8] = {
 { 0, 0, 0, 1.355252715606881e-020, -1.355252715606881e-020, 2.710505431213761e-020, -2.710505431213761e-020, 1.984126984126984e-004},
 { 0, 0, 0, 0, -2.168404344971009e-019, 2.168404344971009e-019, 1.388888888888889e-003, -4.166666666666667e-003},
 { 0, 0, 0, 0, 1.734723475976807e-018, 8.333333333333333e-003, -2.083333333333333e-002, 3.472222222222222e-002},
 { 0, 0, 0, 0, 4.166666666666666e-002, -8.333333333333332e-002, 1.180555555555556e-001, -1.458333333333333e-001},
 { 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666667e-001, -3.125000000000001e-001, 3.222222222222224e-001},
 { 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333334e-001, -4.166666666666669e-001, 3.805555555555558e-001, -3.500000000000003e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.500000000000000e-001, 2.000000000000000e-001, -1.666666666666667e-001, 1.428571428571431e-001},
 { 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD9[9][9] = {
 {0, 0, 0, 3.388131789017201e-021, -3.388131789017201e-021, 8.470329472543003e-021, -9.317362419797304e-021, 6.776263578034403e-021, 2.480158730158730e-005},
 {0, 0, 0, -2.710505431213761e-020, 0, 5.421010862427522e-020, -5.421010862427522e-020, 1.984126984126985e-004, -6.944444444444445e-004},
 {0, 0, 0, -4.336808689942018e-019, 8.673617379884036e-019, -8.673617379884036e-019, 1.388888888888890e-003, -4.166666666666668e-003, 7.986111111111112e-003},
 {0, 0, 0, 0, 0, 8.333333333333335e-003, -2.083333333333333e-002, 3.472222222222222e-002, -4.861111111111112e-002},
 {0, 0, 0, 2.081668171172169e-017, 4.166666666666664e-002, -8.333333333333332e-002, 1.180555555555555e-001, -1.458333333333333e-001, 1.678819444444444e-001},
 {0, 0, 0, 1.666666666666666e-001, -2.499999999999999e-001, 2.916666666666666e-001, -3.124999999999999e-001, 3.222222222222220e-001, -3.256944444444442e-001},
 {0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333332e-001, -4.166666666666664e-001, 3.805555555555553e-001, -3.499999999999995e-001, 3.241071428571424e-001},
 {0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.499999999999999e-001, 1.999999999999999e-001, -1.666666666666665e-001, 1.428571428571426e-001, -1.249999999999997e-001},
 {1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD10[10][10] = {
 { 0, 0, 0, -1.058791184067875e-022, 0, 0, -2.117582368135751e-022, 8.470329472543003e-022, -2.117582368135751e-021, 2.755731922398594e-006}, 
 { 0, 0, 0, 3.388131789017201e-021, 0, -1.355252715606881e-020, 2.032879073410321e-020, -2.371692252312041e-020, 2.480158730158734e-005, -9.920634920634926e-005},
 { 0, 0, 0, -5.421010862427522e-020, 0, 1.084202172485504e-019, -2.710505431213761e-019, 1.984126984126989e-004, -6.944444444444453e-004, 1.504629629629631e-003}, 
 { 0, 0, 0, 0, 0, -8.673617379884036e-019, 1.388888888888891e-003, -4.166666666666669e-003, 7.986111111111116e-003, -1.250000000000001e-002},
 { 0, 0, 0, 0, 0, 8.333333333333338e-003, -2.083333333333335e-002, 3.472222222222225e-002, -4.861111111111115e-002, 6.186342592592600e-002}, 
 { 0, 0, 0, 0, 4.166666666666667e-002, -8.333333333333337e-002, 1.180555555555556e-001, -1.458333333333334e-001, 1.678819444444446e-001, -1.854166666666670e-001},
 { 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666668e-001, -3.125000000000002e-001, 3.222222222222225e-001, -3.256944444444448e-001, 3.255180776014118e-001}, 
 { 0, 0, 5.000000000000000e-001, -4.999999999999999e-001, 4.583333333333333e-001, -4.166666666666669e-001, 3.805555555555559e-001, -3.500000000000004e-001, 3.241071428571435e-001, -3.019841269841282e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.499999999999999e-001, 2.000000000000000e-001, -1.666666666666667e-001, 1.428571428571430e-001, -1.250000000000003e-001, 1.111111111111117e-001}, 
 { 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
};

static float inversePowerToFD11[11][11] = {
{ 0, 0, 0, 0, 0, -1.323488980084844e-023, 1.985233470127266e-023, 0, -2.646977960169689e-023, 2.646977960169689e-023, 2.755731922398589e-007},
{ 0, 0, 0, 0, 0, 6.352747104407253e-022, -1.694065894508601e-021, 3.388131789017201e-021, -6.988021814847978e-021, 2.755731922398603e-006, -1.240079365079368e-005},
{ 0, 0, 0, 2.710505431213761e-020, -1.355252715606881e-020, 0, 1.355252715606881e-020, -2.710505431213761e-020, 2.480158730158737e-005, -9.920634920634938e-005, 2.397486772486777e-004},
{ 0, 0, 0, -2.168404344971009e-019, 1.084202172485504e-019, 2.168404344971009e-019, -5.963111948670274e-019, 1.984126984126994e-004, -6.944444444444463e-004, 1.504629629629633e-003, -2.604166666666673e-003},
{ 0, 0, 0, 0, 8.673617379884036e-019, -2.168404344971009e-018, 1.388888888888893e-003, -4.166666666666673e-003, 7.986111111111123e-003, -1.250000000000002e-002, 1.743634259259262e-002},
{ 0, 0, 0, 0, -3.469446951953614e-018, 8.333333333333344e-003, -2.083333333333335e-002, 3.472222222222225e-002, -4.861111111111115e-002, 6.186342592592597e-002, -7.421875000000003e-002},
{ 0, 0, 0, 1.387778780781446e-017, 4.166666666666666e-002, -8.333333333333334e-002, 1.180555555555556e-001, -1.458333333333335e-001, 1.678819444444446e-001, -1.854166666666667e-001, 1.994268077601409e-001},
{ 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666667e-001, -3.125000000000001e-001, 3.222222222222226e-001, -3.256944444444450e-001, 3.255180776014112e-001, -3.231646825396818e-001},
{ 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333334e-001, -4.166666666666668e-001, 3.805555555555558e-001, -3.500000000000005e-001, 3.241071428571436e-001, -3.019841269841275e-001, 2.828968253968248e-001},
{ 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.500000000000000e-001, 2.000000000000000e-001, -1.666666666666668e-001, 1.428571428571432e-001, -1.250000000000005e-001, 1.111111111111115e-001, -9.999999999999990e-002},
{ 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD12[12][12] = {
 { 0, 0, 0, 0, 0, -4.135903062765138e-025, 1.654361225106055e-024, 0, -4.963083675318166e-024, 1.571643163850753e-023, -3.308722450212111e-023, 2.505210838544177e-008},
 { 0, 0, 0, -1.058791184067875e-022, 1.588186776101813e-022, -1.588186776101813e-022, 1.323488980084844e-022, -2.117582368135751e-022, 4.235164736271502e-022, -8.999725064576941e-022, 2.755731922398606e-007, -1.377865961199297e-006},
 { 0, 0, 0, 0, 1.694065894508601e-021, -8.470329472543003e-022, 0, 3.388131789017201e-021, -1.016439536705160e-020, 2.755731922398615e-006, -1.240079365079371e-005, 3.306878306878317e-005},
 { 0, 0, 0, -2.710505431213761e-020, 0, 3.388131789017201e-020, -8.131516293641283e-020, 1.084202172485504e-019, 2.480158730158719e-005, -9.920634920634925e-005, 2.397486772486777e-004, -4.546957671957683e-004},
 { 0, 0, 0, 0, 2.168404344971009e-019, -3.794707603699266e-019, 5.421010862427522e-019, 1.984126984126981e-004, -6.944444444444450e-004, 1.504629629629632e-003, -2.604166666666673e-003, 3.952546296296310e-003},
 { 0, 0, 0, 0, 0, 1.301042606982605e-018, 1.388888888888886e-003, -4.166666666666662e-003, 7.986111111111107e-003, -1.250000000000000e-002, 1.743634259259261e-002, -2.259837962962969e-002},
 { 0, 0, 0, 6.938893903907228e-018, -6.938893903907228e-018, 8.333333333333338e-003, -2.083333333333333e-002, 3.472222222222222e-002, -4.861111111111111e-002, 6.186342592592592e-002, -7.421875000000003e-002, 8.560130070546752e-002},
 { 0, 0, 0, -1.387778780781446e-017, 4.166666666666668e-002, -8.333333333333334e-002, 1.180555555555555e-001, -1.458333333333333e-001, 1.678819444444442e-001, -1.854166666666664e-001, 1.994268077601408e-001, -2.106757054673722e-001},
 { 0, 0, 0, 1.666666666666667e-001, -2.500000000000000e-001, 2.916666666666667e-001, -3.124999999999999e-001, 3.222222222222221e-001, -3.256944444444441e-001, 3.255180776014103e-001, -3.231646825396818e-001, 3.195039682539682e-001},
 { 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333333e-001, -4.166666666666668e-001, 3.805555555555558e-001, -3.500000000000001e-001, 3.241071428571427e-001, -3.019841269841264e-001, 2.828968253968248e-001, -2.662698412698415e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333334e-001, -2.500000000000001e-001, 2.000000000000002e-001, -1.666666666666669e-001, 1.428571428571430e-001, -1.250000000000001e-001, 1.111111111111111e-001, -9.999999999999995e-002, 9.090909090909122e-002},
 { 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD13[13][13] = {
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.000000000000000e+000},
{1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 1.000000000000000e+000, 0},
{4.094000000000000e+003, 2.046000000000000e+003, 1.022000000000000e+003, 5.100000000000000e+002, 2.540000000000000e+002, 1.260000000000000e+002, 6.200000000000000e+001, 3.000000000000000e+001, 1.400000000000000e+001, 6.000000000000000e+000, 2.000000000000000e+000, 0, 0},
{5.191560000000000e+005, 1.710060000000000e+005, 5.598000000000000e+004, 1.815000000000000e+004, 5.796000000000000e+003, 1.806000000000000e+003, 5.400000000000000e+002, 1.500000000000000e+002, 3.600000000000000e+001, 6.000000000000000e+000, 0, 0, 0},
{1.467602400000000e+007, 3.498000000000000e+006, 8.185200000000000e+005, 1.864800000000000e+005, 4.082400000000000e+004, 8.400000000000000e+003, 1.560000000000000e+003, 2.400000000000000e+002, 2.400000000000000e+001, 0, 0, 0, 0},
{1.655280000000000e+008, 2.960760000000000e+007, 5.103000000000000e+006, 8.341200000000000e+005, 1.260000000000000e+005, 1.680000000000000e+004, 1.800000000000000e+003, 1.200000000000000e+002, 0, 0, 0, 0, 0},
{9.530294400000000e+008, 1.292306400000000e+008, 1.643544000000000e+007, 1.905120000000000e+006, 1.915200000000000e+005, 1.512000000000000e+004, 7.200000000000000e+002, 0, 0, 0, 0, 0, 0},
{3.162075840000000e+009, 3.224944800000000e+008, 2.963520000000000e+007, 2.328480000000000e+006, 1.411200000000000e+005, 5.040000000000000e+003, 0, 0, 0, 0, 0, 0, 0},
{6.411968640000000e+009, 4.790016000000000e+008, 3.024000000000000e+007, 1.451520000000000e+006, 4.032000000000000e+004, 0, 0, 0, 0, 0, 0, 0, 0},
{8.083152000000000e+009, 4.191264000000000e+008, 1.632960000000000e+007, 3.628800000000000e+005, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{6.187104000000000e+009, 1.995840000000000e+008, 3.628800000000000e+006, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{2.634508800000000e+009, 3.991680000000000e+007, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{4.790016000000000e+008, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};
 
static float inversePowerToFD14[14][14] = {
 { 0, 0, 0, 0, 1.292469707114106e-026, -1.938704560671159e-026, 3.231174267785264e-026, -4.523643974899370e-026, 7.270142102516845e-026, -1.292469707114106e-025, 1.898314882323843e-025, -1.809457589959748e-025, -1.292469707114106e-026, 5.175840099301946e-010},
 { 0, 0, 3.308722450212111e-024, -4.135903062765138e-024, 4.135903062765138e-024, -3.308722450212111e-024, 2.067951531382569e-024, -4.135903062765138e-025, -1.033975765691285e-024, 3.308722450212111e-024, -5.480071558163808e-024, 3.722312756488625e-024, 2.087675698786818e-009, -4.037155277455517e-008},
 { 0, 0, 0, 5.293955920339377e-023, -5.293955920339377e-023, 6.617444900424221e-023, -7.940933880509066e-023, 7.940933880509066e-023, -4.632211430296955e-023, -5.293955920339377e-023, 1.753622898612419e-022, 2.505210838544154e-008, -1.377865961199296e-007, 1.406275754980337e-006},
 { 0, 0, 0, -8.470329472543003e-022, 0, 1.058791184067875e-021, -2.117582368135751e-021, 2.964615315390051e-021, -4.658681209898652e-021, 6.776263578034403e-021, 2.755731922398507e-007, -1.377865961199290e-006, 4.018775720164620e-006, -2.886566023380700e-005},
 { 0, 0, 0, -1.355252715606881e-020, 1.355252715606881e-020, -5.082197683525802e-021, 0, 3.388131789017201e-021, 3.388131789017201e-021, 2.755731922398567e-006, -1.240079365079363e-005, 3.306878306878313e-005, -6.820436507936541e-005, 3.879100648343151e-004},
 { 0, 0, 0, -1.084202172485504e-019, 0, 6.776263578034403e-020, -1.084202172485504e-019, 1.626303258728257e-019, 2.480158730158704e-005, -9.920634920634864e-005, 2.397486772486765e-004, -4.546957671957671e-004, 7.461833112874805e-004, -3.585115001038839e-003},
 { 0, 0, 0, 4.336808689942018e-019, 0, -6.505213034913027e-019, 1.301042606982605e-018, 1.984126984126960e-004, -6.944444444444401e-004, 1.504629629629622e-003, -2.604166666666656e-003, 3.952546296296286e-003, -5.506365740740740e-003, 2.328622416866577e-002},
 { 0, 0, 0, 0, -3.469446951953614e-018, 6.071532165918825e-018, 1.388888888888879e-003, -4.166666666666650e-003, 7.986111111111083e-003, -1.249999999999995e-002, 1.743634259259251e-002, -2.259837962962950e-002, 2.784862305261595e-002, -1.066586145639159e-001},
 { 0, 0, 0, -6.938893903907228e-018, 2.081668171172169e-017, 8.333333333333297e-003, -2.083333333333329e-002, 3.472222222222215e-002, -4.861111111111099e-002, 6.186342592592570e-002, -7.421874999999956e-002, 8.560130070546657e-002, -9.602416776895803e-002, 3.401597495304081e-001},
 { 0, 0, 0, -2.775557561562891e-017, 4.166666666666671e-002, -8.333333333333337e-002, 1.180555555555556e-001, -1.458333333333333e-001, 1.678819444444443e-001, -1.854166666666662e-001, 1.994268077601399e-001, -2.106757054673695e-001, 2.197447273662498e-001, -7.318714958320032e-001},
 { 0, 0, 0, 1.666666666666667e-001, -2.499999999999999e-001, 2.916666666666666e-001, -3.125000000000000e-001, 3.222222222222222e-001, -3.256944444444445e-001, 3.255180776014106e-001, -3.231646825396810e-001, 3.195039682539639e-001, -3.150677910052809e-001, 9.997443383430656e-001},
 { 0, 0, 5.000000000000000e-001, -5.000000000000000e-001, 4.583333333333334e-001, -4.166666666666666e-001, 3.805555555555557e-001, -3.500000000000004e-001, 3.241071428571435e-001, -3.019841269841277e-001, 2.828968253968255e-001, -2.662698412698387e-001, 2.516564454064369e-001, -7.693590663625261e-001},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333333e-001, -2.500000000000000e-001, 2.000000000000000e-001, -1.666666666666668e-001, 1.428571428571432e-001, -1.250000000000006e-001, 1.111111111111118e-001, -1.000000000000005e-001, 9.090909090909052e-002, -8.333333333333075e-002, 2.479235688909577e-001},
 { 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD15[15][15] = {
{ 0, 0, 0, -8.077935669463161e-028, -3.231174267785264e-027, -4.846761401677897e-027, 8.885729236409477e-027, -1.130910993724843e-026, 1.262177448353619e-026, -1.292469707114106e-026, 1.231885189593132e-026, -1.050131637030211e-026, 8.279884061199740e-027, -3.231174267785264e-026, 7.818942808874530e-010},
{ 0, -1.654361225106055e-024, 8.271806125530277e-025, -6.203854594147708e-025, 4.135903062765138e-025, -8.788794008375919e-025, 1.654361225106055e-024, -2.584939414228212e-024, 3.405657678245669e-024, -3.929107909626882e-024, 4.148827759836279e-024, -4.135903062765138e-024, 3.877409121342317e-024, 5.175840099301827e-010, -7.115237956075797e-008},
{ 0, 1.058791184067875e-022, -5.293955920339377e-023, 3.639594695233322e-023, -3.970466940254533e-023, 4.632211430296955e-023, -7.610061635487855e-023, 1.091878408569997e-022, -1.302809464771019e-022, 1.323488980084844e-022, -1.162188760637004e-022, 8.271806125530277e-023, 2.087675698786772e-009, -4.037155277455509e-008, 2.917247561991086e-006},
{ 0, 0, 0, -1.058791184067875e-022, 0, -3.176373552203626e-022, 7.411538288475128e-022, -1.111730743271269e-021, 1.164670302474663e-021, -8.470329472543003e-022, 1.654361225106055e-022, 2.505210838544245e-008, -1.377865961199311e-007, 1.406275754980341e-006, -7.122353194031895e-005},
{ 0, 2.710505431213761e-020, -1.355252715606881e-020, 1.016439536705160e-020, -6.776263578034403e-021, 5.082197683525802e-021, -6.776263578034403e-021, 1.101142831430590e-020, -1.641126335305207e-020, 2.032879073410321e-020, 2.755731922398387e-007, -1.377865961199279e-006, 4.018775720164597e-006, -2.886566023380679e-005, 1.152882006022958e-003},
{ 0, 0, 0, 0, 0, -1.355252715606881e-020, 9.486769009248164e-020, -2.371692252312041e-019, 3.642241673193492e-019, 2.755731922398134e-006, -1.240079365079315e-005, 3.306878306878255e-005, -6.820436507936449e-005, 3.879100648343091e-004, -1.303390634507821e-002},
{ 0, 0, -4.336808689942018e-019, 4.336808689942018e-019, -4.336808689942018e-019, 3.252606517456513e-019, -1.084202172485504e-018, 2.168404344971009e-018, 2.480158730158389e-005, -9.920634920634452e-005, 2.397486772486715e-004, -4.546957671957603e-004, 7.461833112874690e-004, -3.585115001038764e-003, 1.055842459499107e-001},
{ 0, 0, 3.469446951953614e-018, -3.469446951953614e-018, 0, -1.734723475976807e-018, 6.071532165918825e-018, 1.984126984126851e-004, -6.944444444444233e-004, 1.504629629629601e-003, -2.604166666666629e-003, 3.952546296296247e-003, -5.506365740740666e-003, 2.328622416866524e-002, -6.184339278377696e-001},
{ 0, 1.110223024625157e-016, -4.163336342344337e-017, 2.081668171172169e-017, -1.387778780781446e-017, 1.040834085586084e-017, 1.388888888888867e-003, -4.166666666666614e-003, 7.986111111111024e-003, -1.249999999999987e-002, 1.743634259259239e-002, -2.259837962962934e-002, 2.784862305261564e-002, -1.066586145639135e-001, 2.608492199134465e+000},
{ 0, 0, 0, 0, 2.775557561562891e-017, 8.333333333333297e-003, -2.083333333333328e-002, 3.472222222222211e-002, -4.861111111111089e-002, 6.186342592592550e-002, -7.421874999999928e-002, 8.560130070546618e-002, -9.602416776895736e-002, 3.401597495304019e-001, -7.785871617587367e+000},
{ 0, 4.440892098500626e-016, -1.110223024625157e-016, 5.551115123125783e-017, 4.166666666666663e-002, -8.333333333333332e-002, 1.180555555555555e-001, -1.458333333333331e-001, 1.678819444444439e-001, -1.854166666666656e-001, 1.994268077601391e-001, -2.106757054673686e-001, 2.197447273662489e-001, -7.318714958319950e-001, 1.588320736912066e+001},
{ 0, 0, 0, 1.666666666666667e-001, -2.500000000000001e-001, 2.916666666666667e-001, -3.124999999999997e-001, 3.222222222222215e-001, -3.256944444444432e-001, 3.255180776014087e-001, -3.231646825396785e-001, 3.195039682539611e-001, -3.150677910052783e-001, 9.997443383430542e-001, -2.079582095646540e+001},
{ 0, 4.440892098500626e-016, 4.999999999999998e-001, -4.999999999999999e-001, 4.583333333333333e-001, -4.166666666666664e-001, 3.805555555555550e-001, -3.499999999999990e-001, 3.241071428571413e-001, -3.019841269841243e-001, 2.828968253968205e-001, -2.662698412698328e-001, 2.516564454064311e-001, -7.693590663625061e-001, 1.548366403916549e+001},
{ 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333334e-001, -2.500000000000000e-001, 1.999999999999998e-001, -1.666666666666664e-001, 1.428571428571424e-001, -1.249999999999993e-001, 1.111111111111098e-001, -9.999999999999774e-002, 9.090909090908705e-002, -8.333333333332699e-002, 2.479235688909449e-001, -4.868871950486066e+000},
{ 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

static float inversePowerToFD16[16][16] = {
 { 0, 1.615587133892632e-027, -8.077935669463161e-028, -1.615587133892632e-027, 2.827277484312106e-027, -3.534096855390133e-027, 3.837019442995001e-027, -4.266159775435232e-027, 4.846761401677897e-027, -5.578824321722996e-027, 6.866245319043687e-027, -9.125542951596665e-027, 1.259653093456912e-026, -5.593970451103239e-026, 1.589737739750350e-024, 4.989248130364881e-010},
 { 0, 0, -2.584939414228212e-026, 2.067951531382569e-025, -3.618915179919496e-025, 4.911384887033602e-025, -5.686866711302065e-025, 6.656218991637645e-025, -7.754818242684635e-025, 9.031132078459814e-025, -1.072749856904708e-024, 1.319732739998544e-024, -1.659207986507733e-024, 6.643294294566504e-024, 7.818942808872849e-010, -5.238710536883159e-008},
 { 0, 0, 0, 0, 1.654361225106055e-024, -5.790264287871194e-024, 8.271806125530277e-024, -1.137373342260413e-023, 1.488925102595450e-023, -1.912855166528877e-023, 2.646977960169689e-023, -3.931692849041110e-023, 5.955700410381799e-023, 5.175840099299126e-010, -7.115237956075005e-008, 2.497118689247629e-006},
 { 0, 0, -5.293955920339377e-023, 4.235164736271502e-022, -6.882142696441190e-022, 8.470329472543003e-022, -8.999725064576941e-022, 9.926167350636332e-022, -1.111730743271269e-021, 1.297019200483147e-021, -1.641126335305207e-021, 2.283018490646356e-021, 2.087675698783468e-009, -4.037155277453942e-008, 2.917247561990624e-006, -7.150839882845188e-005},
 { 0, 0, 0, -1.016439536705160e-020, 1.524659305057741e-020, -1.905824131322176e-020, 2.159934015498466e-020, -2.456395547037471e-020, 2.795208725939191e-020, -3.224019155486681e-020, 3.981054852095212e-020, 2.505210838538786e-008, -1.377865961198519e-007, 1.406275754979971e-006, -7.122353194030805e-005, 1.371917007872563e-003},
 { 0, -5.421010862427522e-020, 2.710505431213761e-020, 5.421010862427522e-020, -1.219727444046193e-019, 1.694065894508601e-019, -2.032879073410321e-019, 2.456395547037471e-019, -2.981555974335137e-019, 3.710004308973836e-019, 2.755731922393627e-007, -1.377865961198568e-006, 4.018775720163491e-006, -2.886566023380136e-005, 1.152882006022794e-003, -1.861601982833958e-002},
 { 0, 0, -1.084202172485504e-019, -8.673617379884036e-019, 1.517883041479706e-018, -1.897353801849633e-018, 2.168404344971009e-018, -2.561427632497004e-018, 3.144186300207963e-018, 2.755731922394627e-006, -1.240079365078829e-005, 3.306878306877514e-005, -6.820436507935272e-005, 3.879100648342507e-004, -1.303390634507643e-002, 1.838096961343281e-001},
 { 0, 3.469446951953614e-018, -8.673617379884036e-019, 1.387778780781446e-017, -1.908195823574488e-017, 2.168404344971009e-017, -2.168404344971009e-017, 2.423191855505102e-017, 2.480158730155859e-005, -9.920634920631432e-005, 2.397486772486312e-004, -4.546957671957010e-004, 7.461833112873777e-004, -3.585115001038322e-003, 1.055842459498977e-001, -1.337843823357720e+000},
 { 0, 0, 3.469446951953614e-018, -2.775557561562891e-017, 5.551115123125783e-017, -7.459310946700271e-017, 8.673617379884036e-017, 1.984126984125923e-004, -6.944444444443101e-004, 1.504629629629458e-003, -2.604166666666432e-003, 3.952546296295948e-003, -5.506365740740204e-003, 2.328622416866305e-002, -6.184339278377090e-001, 7.189168747834084e+000},
 { 0, 0, 1.387778780781446e-017, 1.110223024625157e-016, -2.220446049250313e-016, 3.122502256758253e-016, 1.388888888888530e-003, -4.166666666666218e-003, 7.986111111110555e-003, -1.249999999999931e-002, 1.743634259259168e-002, -2.259837962962829e-002, 2.784862305261406e-002, -1.066586145639066e-001, 2.608492199134309e+000, -2.827075966674896e+001},
 { 0, 2.220446049250313e-016, -1.110223024625157e-016, -6.661338147750939e-016, 9.992007221626409e-016, 8.333333333332138e-003, -2.083333333333204e-002, 3.472222222222073e-002, -4.861111111110933e-002, 6.186342592592379e-002, -7.421874999999725e-002, 8.560130070546350e-002, -9.602416776895391e-002, 3.401597495303908e-001, -7.785871617587300e+000, 7.968907225177995e+001},
 { 0, 0, 0, 8.881784197001252e-016, 4.166666666666519e-002, -8.333333333333143e-002, 1.180555555555534e-001, -1.458333333333307e-001, 1.678819444444413e-001, -1.854166666666630e-001, 1.994268077601365e-001, -2.106757054673658e-001, 2.197447273662466e-001, -7.318714958320010e-001, 1.588320736912164e+001, -1.551602586014341e+002},
 { 0, 0, -1.110223024625157e-016, 1.666666666666661e-001, -2.499999999999987e-001, 2.916666666666647e-001, -3.124999999999974e-001, 3.222222222222189e-001, -3.256944444444407e-001, 3.255180776014069e-001, -3.231646825396781e-001, 3.195039682539627e-001, -3.150677910052848e-001, 9.997443383431157e-001, -2.079582095646863e+001, 1.956567570353576e+002},
 { 0, 0, 5.000000000000000e-001, -4.999999999999996e-001, 4.583333333333323e-001, -4.166666666666651e-001, 3.805555555555534e-001, -3.499999999999973e-001, 3.241071428571400e-001, -3.019841269841246e-001, 2.828968253968234e-001, -2.662698412698396e-001, 2.516564454064454e-001, -7.693590663626030e-001, 1.548366403916965e+001, -1.414280451113939e+002},
 { 0, 1.000000000000000e+000, -5.000000000000000e-001, 3.333333333333328e-001, -2.499999999999993e-001, 1.999999999999992e-001, -1.666666666666656e-001, 1.428571428571416e-001, -1.249999999999988e-001, 1.111111111111102e-001, -9.999999999999960e-002, 9.090909090909112e-002, -8.333333333333474e-002, 2.479235688909923e-001, -4.868871950487935e+000, 4.349541263781754e+001},
 { 1.000000000000000e+000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
};

// Exports
float *bsplineBasis[16] = {
    &bsplineBasis1[0][0],
    &bsplineBasis2[0][0],
    &bsplineBasis3[0][0],
    &bsplineBasis4[0][0],
    &bsplineBasis5[0][0],
    &bsplineBasis6[0][0],
    &bsplineBasis7[0][0],
    &bsplineBasis8[0][0],
    &bsplineBasis9[0][0],
    &bsplineBasis10[0][0],
    &bsplineBasis11[0][0],
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
};

float *catmullRomBasis[16] = {
    NULL,
    NULL,
    NULL,
    &catmullRomBasis4[0][0],
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
};

float *bezBasis[16] = {
    &bezBasis1[0][0],
    &bezBasis2[0][0],
    &bezBasis3[0][0],
    &bezBasis4[0][0],
    &bezBasis5[0][0],
    &bezBasis6[0][0],
    &bezBasis7[0][0],
    &bezBasis8[0][0],
    &bezBasis9[0][0],
    &bezBasis10[0][0],
    &bezBasis11[0][0],
    &bezBasis12[0][0],
    &bezBasis13[0][0],
    &bezBasis14[0][0],
    &bezBasis15[0][0],
    &bezBasis16[0][0],
};

float *powerToFD[16] = {
    &powerToFD1[0][0],
    &powerToFD2[0][0],
    &powerToFD3[0][0],
    &powerToFD4[0][0],
    &powerToFD5[0][0],
    &powerToFD6[0][0],
    &powerToFD7[0][0],
    &powerToFD8[0][0],
    &powerToFD9[0][0],
    &powerToFD10[0][0],
    &powerToFD11[0][0],
    &powerToFD12[0][0],
    &powerToFD13[0][0],
    &powerToFD14[0][0],
    &powerToFD15[0][0],
    &powerToFD16[0][0],
};

float *inversePowerToFD[16] = {
    &inversePowerToFD1[0][0],
    &inversePowerToFD2[0][0],
    &inversePowerToFD3[0][0],
    &inversePowerToFD4[0][0],
    &inversePowerToFD5[0][0],
    &inversePowerToFD6[0][0],
    &inversePowerToFD7[0][0],
    &inversePowerToFD8[0][0],
    &inversePowerToFD9[0][0],
    &inversePowerToFD10[0][0],
    &inversePowerToFD11[0][0],
    &inversePowerToFD12[0][0],
    &inversePowerToFD13[0][0],
    &inversePowerToFD14[0][0],
    &inversePowerToFD15[0][0],
    &inversePowerToFD16[0][0],
};

} // end of namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\PatchUtil.cpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       PatchUtil.cpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/

#include "precomp.hpp"

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#pragma warning (disable:4244)
#pragma warning (disable:4102)

unsigned int RetessFDtag[2][2] = {0x3f800000, 0, 0x3f800000, 0};
int RetessFDMRU = 0;
FDMatrix *RetessFDCache[2] = {NULL,NULL};

extern float *bezBasis[16];
extern float *catmullRomBasis[16];
extern float *bsplineBasis[16];
extern float *invBezBasis[16];
extern float *powerToFD[16];
extern float *inversePowerToFD[16];

const float cachedBinomialCoefficients[11][11] = {
  { 1.000000000000000e+000f, 1.000000000000000e+000f, 5.000000000000000e-001f, 1.666666666666667e-001f, 4.166666666666666e-002f,
    8.333333333333333e-003f, 1.388888888888889e-003f, 1.984126984126984e-004f, 2.480158730158730e-005f, 2.755731922398589e-006f, 2.755731922398589e-007f},
  { 1.000000000000000e+000f, 1.000000000000000e+000f, 5.000000000000000e-001f, 1.666666666666667e-001f, 4.166666666666666e-002f,
    8.333333333333333e-003f, 1.388888888888889e-003f, 1.984126984126984e-004f, 2.480158730158730e-005f, 2.755731922398589e-006f, 2.755731922398589e-007f},
  { 1.000000000000000e+000f, 2.000000000000000e+000f, 1.000000000000000e+000f, 3.333333333333333e-001f, 8.333333333333333e-002f,
    1.666666666666667e-002f, 2.777777777777778e-003f, 3.968253968253968e-004f, 4.960317460317460e-005f, 5.511463844797179e-006f, 5.511463844797179e-007f},
  { 1.000000000000000e+000f, 3.000000000000000e+000f, 3.000000000000000e+000f, 1.000000000000000e+000f, 2.500000000000000e-001f,
    5.000000000000000e-002f, 8.333333333333333e-003f, 1.190476190476190e-003f, 1.488095238095238e-004f, 1.653439153439153e-005f, 1.653439153439153e-006f},
  { 1.000000000000000e+000f, 4.000000000000000e+000f, 6.000000000000000e+000f, 4.000000000000000e+000f, 1.000000000000000e+000f,
    2.000000000000000e-001f, 3.333333333333333e-002f, 4.761904761904762e-003f, 5.952380952380952e-004f, 6.613756613756613e-005f, 6.613756613756613e-006f},
  { 1.000000000000000e+000f, 5.000000000000000e+000f, 1.000000000000000e+001f, 1.000000000000000e+001f, 5.000000000000000e+000f,
    1.000000000000000e+000f, 1.666666666666667e-001f, 2.380952380952381e-002f, 2.976190476190476e-003f, 3.306878306878307e-004f, 3.306878306878306e-005f},
  { 1.000000000000000e+000f, 6.000000000000000e+000f, 1.500000000000000e+001f, 2.000000000000000e+001f, 1.500000000000000e+001f,
    6.000000000000000e+000f, 1.000000000000000e+000f, 1.428571428571429e-001f, 1.785714285714286e-002f, 1.984126984126984e-003f, 1.984126984126984e-004f},
  { 1.000000000000000e+000f, 7.000000000000000e+000f, 2.100000000000000e+001f, 3.500000000000000e+001f, 3.500000000000000e+001f,
    2.100000000000000e+001f, 7.000000000000000e+000f, 1.000000000000000e+000f, 1.250000000000000e-001f, 1.388888888888889e-002f, 1.388888888888889e-003f},
  { 1.000000000000000e+000f, 8.000000000000000e+000f, 2.800000000000000e+001f, 5.600000000000000e+001f, 7.000000000000000e+001f,
    5.600000000000000e+001f, 2.800000000000000e+001f, 8.000000000000000e+000f, 1.000000000000000e+000f, 1.111111111111111e-001f, 1.111111111111111e-002f},
  { 1.000000000000000e+000f, 9.000000000000000e+000f, 3.600000000000000e+001f, 8.400000000000000e+001f, 1.260000000000000e+002f,
    1.260000000000000e+002f, 8.400000000000000e+001f, 3.600000000000000e+001f, 9.000000000000000e+000f, 1.000000000000000e+000f, 1.000000000000000e-001f},
  { 1.000000000000000e+000f, 1.000000000000000e+001f, 4.500000000000000e+001f, 1.200000000000000e+002f, 2.100000000000000e+002f,
    2.520000000000000e+002f, 2.100000000000000e+002f, 1.200000000000000e+002f, 4.500000000000000e+001f, 1.000000000000000e+001f, 1.000000000000000e+000f},
};

#define EV_GUARD_ATTR(index)        (((index) == NV_PATCH_ATTRIB_NORMAL) || ((index) == NV_PATCH_ATTRIB_POSITION))
#define EV_GUARD_BITS               ((1 << NV_PATCH_ATTRIB_NORMAL) | (1 << NV_PATCH_ATTRIB_POSITION))
#define EV_GUARD_BIT_VERTEX         ((1 << NV_PATCH_ATTRIB_POSITION))
#define EV_GUARD_BIT_NORMAL         ((1 << NV_PATCH_ATTRIB_NORMAL))

// Some of the ATTR bit names are used so much, and are so long, they were making line lengths in excess of 140 characters.
// Rather than split the lines, these names have abbreviations
#define ATTR_V  NV_PATCH_ATTRIB_POSITION
#define ATTR_N  NV_PATCH_ATTRIB_NORMAL

// note: conventions for specifying indices.
// For matrices, the ordering is [row][col] or [Vcoord][Ucoord].
// This matches how the control points are specified.
// For function arguments, it's tempting to use (Ucoord, Vcoord) since that
// is similar to (X, Y), but this can be confusing (matrices vs routines).
// Therefore, routines also take arguments in the (V, U) order.

// For the HW interface, integer step patches,
// the curve for the outside determines the direction of drawing the stitch.
// The inside curve may be evaluated in the reverse order. In these cases
// the n points are saved away in order to match the outside direction,
// then the stitch is drawn in the outside direction.

// Normally, matrices and curves are calculated with small step sizes.

// When swathing, the matrices are calculated with big steps, and 
// converted during swathing. The low level routine DrawIntPatchGrid()
// receives matrices with small steps.
// Guard curves are calculated with big steps in nvEvalPatch(), then
// stepped and converted to small steps in DrawIntPatchSwaths()
// DrawIntStitch() receives a set of small step curves.

/*****************************************************************************/
#define EV_SWAP(a, b, t) { t = a; a = b; b = t; }

// Count as maximum patch order of 5 for the inner loop
int CountLoopPushes(NV_PATCH_INFO *info)
{
    int index, pushes = 4;

    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            pushes += 5 * info->maxOrder;
        }
    }

    return pushes;
}

// index into curve*[]. For given attrib, and term of the curve equation, point to the 'X' of the attribute
inline int idxCurve(int attribIndex, int orderTerm)
{
    return (attribIndex*NV_PATCH_MAX_ORDER + orderTerm)*4;
}

inline float *pRawData(NV_PATCH_INFO *info, NV_PATCH_MAP_INFO *map, float *rawData, int vCoord, int uCoord)
{
    if (info->flipV) {
        vCoord = map->vorder - 1 - vCoord;
    }
    if (info->flipU) {
        uCoord = map->uorder - 1 - uCoord;
    }
    return (rawData + vCoord * map->vfStride + uCoord * map->ufStride);
}

inline void getRawData(NV_PATCH_INFO *info, NV_PATCH_MAP_INFO *map, float *rawData, int vCoord, int uCoord, float *pOut)
{
    float *data = pRawData(info, map, rawData, vCoord, uCoord);
    pOut[0] = data[0]; pOut[1] = data[1]; pOut[2] = data[2]; pOut[3] = data[3];

}

inline void CopyPoint(float *dst, float *src)
// This will generate better code if dst and/or src are expressions or fancy structures.
// The reason is that dst and src are evaluated once.
// If done by hand in-line, the compiler may not optimize for the similarity of expressions.
// Looking at a few tests, without the inline function took 4*12=48 instructions,
// vs only 21 using CopyPoint
// Also, and just as important, I think it makes the code easier to read because
// it's more compact, not expanding x4 for each simple copy.
// And, as a bonus, if you are "watching" dst in the debugger, you may optionally
// step into this routine to see the values being copied. Otherwise, it may be a more
// laborious procedure to see what just happened.
{
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
}

inline int PointsEqual(float *src, float *src2)
{
    return(EV_AS_INT(src[0]) == EV_AS_INT(src2[0])
        && EV_AS_INT(src[1]) == EV_AS_INT(src2[1])
        && EV_AS_INT(src[2]) == EV_AS_INT(src2[2])
        && EV_AS_INT(src[3]) == EV_AS_INT(src2[3]));
}

inline void AddPoint(float *dst, float *src)
{
    dst[0] += src[0];
    dst[1] += src[1];
    dst[2] += src[2];
    dst[3] += src[3];
}

inline void CopyCoeffs(NV_PATCH_INFO *info, NV_PATCH_CURVE_COEFFS *dst, NV_PATCH_CURVE_COEFFS *src)
// copy curve coeffs. Does not copy 'order'. May be used to copy matrix rows to curve coeffs.
{
    memcpy(dst, src, 4*info->maxOrder*sizeof(float));
}

void CopyCurve(NV_PATCH_INFO *info, NV_PATCH_CURVE_INFO *dst, NV_PATCH_CURVE_INFO *src)
// copy curve, including order
{
    float *srcptr, *dstptr;
    switch(src->order) {
    case 2:
        dst->order = src->order;
        srcptr = (float*)(&src->coeffs[0][0]); dstptr = (float*)(&dst->coeffs[0][0]);
        dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
        dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
        break;
    case 4:
        dst->order = src->order;
        srcptr = (float*)(&src->coeffs[0][0]); dstptr = (float*)(&dst->coeffs[0][0]);
        dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
        dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
        dstptr[8] = srcptr[8]; dstptr[9] = srcptr[9]; dstptr[10] = srcptr[10]; dstptr[11] = srcptr[11];  //v2-xyzw
        dstptr[12] = srcptr[12]; dstptr[13] = srcptr[13]; dstptr[14] = srcptr[14]; dstptr[15] = srcptr[15];  //v3-xyzw
        break;
    case 6:
        dst->order = src->order;
        srcptr = (float*)(&src->coeffs[0][0]); dstptr = (float*)(&dst->coeffs[0][0]);
        dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
        dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
        dstptr[8] = srcptr[8]; dstptr[9] = srcptr[9]; dstptr[10] = srcptr[10]; dstptr[11] = srcptr[11];  //v2-xyzw
        dstptr[12] = srcptr[12]; dstptr[13] = srcptr[13]; dstptr[14] = srcptr[14]; dstptr[15] = srcptr[15];  //v3-xyzw
        dstptr[16] = srcptr[16]; dstptr[17] = srcptr[17]; dstptr[18] = srcptr[18]; dstptr[19] = srcptr[19];  //v4-xyzw
        dstptr[20] = srcptr[20]; dstptr[21] = srcptr[21]; dstptr[22] = srcptr[22]; dstptr[23] = srcptr[23];  //v5-xyzw
        break;
     default:
        memcpy(dst, src, PATCH_CURVE_HEADER_SIZE + 4*info->maxOrder*sizeof(float));
    }
}

inline void CopyCurveSet(NV_PATCH_INFO *info, int evalEnables, FDCurveAttrSet *dst, FDCurveAttrSet *src)
{
    int index;
    for (index = 0; index < info->maxAttr; index++) {
        if (evalEnables & (1 << index)) {
            CopyCurve(info, (*dst)[index], (*src)[index]);
        }
    }
}


// copy one matrix
inline void CopyMatrix(NV_PATCH_INFO *info, FDMatrix *dst, FDMatrix *src)
{
    int i;
    float *srcptr, *dstptr;
    switch(src->rows) {
    case 2:
        dst->rows = src->rows;
        dst->columns = src->columns;
        srcptr = (float*)(&src->data[0][0][0]);
        dstptr = (float*)(&dst->data[0][0][0]);
        dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
        dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
        dstptr+=16*4; srcptr+=16*4;                                                                  //skip to next row
        dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v2-xyzw
        dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v3-xyzw
        break;
    case 4:
        dst->rows = src->rows;
        dst->columns = src->columns;
        srcptr = (float*)(&src->data[0][0][0]);
        dstptr = (float*)(&dst->data[0][0][0]);
        for(i=0; i < 4; i++) {
            dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
            dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
            dstptr[8] = srcptr[8]; dstptr[9] = srcptr[9]; dstptr[10] = srcptr[10]; dstptr[11] = srcptr[11];  //v2-xyzw
            dstptr[12] = srcptr[12]; dstptr[13] = srcptr[13]; dstptr[14] = srcptr[14]; dstptr[15] = srcptr[15];  //v3-xyzw
            dstptr+=16*4; srcptr+=16*4;                                                                  //skip to next row
        }
        break;
    case 6:
        dst->rows = src->rows;
        dst->columns = src->columns;
        srcptr = (float*)(&src->data[0][0][0]);
        dstptr = (float*)(&dst->data[0][0][0]);
        for(i=0; i < 6; i++) {
            dstptr[0] = srcptr[0]; dstptr[1] = srcptr[1]; dstptr[2] = srcptr[2]; dstptr[3] = srcptr[3];  //v0-xyzw
            dstptr[4] = srcptr[4]; dstptr[5] = srcptr[5]; dstptr[6] = srcptr[6]; dstptr[7] = srcptr[7];  //v1-xyzw
            dstptr[8] = srcptr[8]; dstptr[9] = srcptr[9]; dstptr[10] = srcptr[10]; dstptr[11] = srcptr[11];  //v2-xyzw
            dstptr[12] = srcptr[12]; dstptr[13] = srcptr[13]; dstptr[14] = srcptr[14]; dstptr[15] = srcptr[15];  //v3-xyzw
            dstptr[16] = srcptr[16]; dstptr[17] = srcptr[17]; dstptr[18] = srcptr[18]; dstptr[19] = srcptr[19];  //v4-xyzw
            dstptr[20] = srcptr[20]; dstptr[21] = srcptr[21]; dstptr[22] = srcptr[22]; dstptr[23] = srcptr[23];  //v5-xyzw
            dstptr+=16*4; srcptr+=16*4;                                                                  //skip to next row
        }
        break;
    default:
        memcpy(dst, src, sizeof(FDMatrix));
    }
}

inline void CopyMatrixTranspose(NV_PATCH_INFO *info, FDMatrix *dst, FDMatrix *src)
{
    int i,j;
    //THIS NEEDS TO BE IMPROVED!!!
    dst->rows = src->rows;
    dst->columns = src->columns;
    for(i=0; i < src->rows; i++) {
        for(j = 0; j < src->columns; j++) {
            dst->data[j][i][0] = src->data[i][j][0];
            dst->data[j][i][1] = src->data[i][j][1];
            dst->data[j][i][2] = src->data[i][j][2];
            dst->data[j][i][3] = src->data[i][j][3];
        }
    }
}

inline void CopyMatrixSet(NV_PATCH_INFO *info, int evalEnables, FDMatrixAttrSet *dst, FDMatrixAttrSet *src)
// copy set of matrices
{
    int index;
    for (index = 0; index < info->maxAttr; index++) {
        if (!(evalEnables & (1 << index))) {
            continue;
        }
        CopyMatrix(info, (*dst)[index], (*src)[index]);
    }
}

/*****************************************************************************/
// Compare two vertices and return an edge direction
// a->b is 1, b->a is 0
int CompareVertices(const float *a, const float *b)
{
    // Compare X
    if (a[0] > b[0]) {
        return 0;
    } else if (a[0] < b[0]) {
        return 1;
    }

    // Compare Y
    if (a[1] > b[1]) {
        return 0;
    } else if (a[1] < b[1]) {
        return 1;
    }

    // Compare Z
    if (a[2] > b[2]) {
        return 0;
    } else if (a[2] < b[2]) {
        return 1;
    }

    // Compare W
    if (a[3] > b[3]) {
        return 0;
    } else if (a[3] < b[3]) {
        return 1;
    }

    // actually, if the two points are equal, the "right" thing to do
    // would be to examine the interior control points to determine
    // a sorting.

    // Arbitrary case
    return 1;
}

// Compute the directions of the four edges of a patch
void ComputeEdgeDirections(NV_PATCH_INFO *info, int tri, NV_PATCH_MAP_INFO *map,
                           int *u0Dir, int *u1Dir, int *v0Dir, int *v1Dir)
{
    int uorder = map->uorder;
    int vorder = map->vorder;
    float *rawData = map->rawData;
    const float *p00, *p10, *p01, *p11; //p[x][y]

    if (rawData == NULL) {
        //assuming that unenabled maps have a null pointer
        //if we don't have a position punt for now and assume no reversals
        *u0Dir = *u1Dir = *v0Dir = *v1Dir = 1;
        return;
    }

    p00 = pRawData(info, map, rawData, 0,        0);
    p10 = pRawData(info, map, rawData, 0,        uorder-1);
    p01 = pRawData(info, map, rawData, vorder-1, 0       );
    p11 = pRawData(info, map, rawData, vorder-1, uorder-1);

    if (tri) {
        *u0Dir = *u1Dir = CompareVertices(p00, p10);
        *v0Dir = CompareVertices(p00, p01);
        *v1Dir = CompareVertices(p10, p01);
    } else {
        *u0Dir = CompareVertices(p00, p10);
        *u1Dir = CompareVertices(p01, p11);
        *v0Dir = CompareVertices(p00, p01);
        *v1Dir = CompareVertices(p10, p11);
    }
}

void MatrixMult(NV_PATCH_INFO *info, FDMatrix *c, const FDMatrix *a, const FDMatrix *b)
{
    int row, col, term;

    c->rows    = a->rows;
    c->columns = b->columns;
    
    for (row = 0; row < c->rows; row++) {
        for (col = 0; col < c->columns; col++) {
            c->data[row][col][0] = 0.0f;
            c->data[row][col][1] = 0.0f;
            c->data[row][col][2] = 0.0f;
            c->data[row][col][3] = 0.0f;
            for (term = 0; term < a->columns; term++) {
                c->data[row][col][0] += a->data[row][term][0] * b->data[term][col][0];
                c->data[row][col][1] += a->data[row][term][1] * b->data[term][col][1];
                c->data[row][col][2] += a->data[row][term][2] * b->data[term][col][2];
                c->data[row][col][3] += a->data[row][term][3] * b->data[term][col][3];
            }
        }
    }
}

// Load m with a Bezier basis matrix, or the inverse of a Bezier basis matrix
void ComputeBasis(int order, int inverse, FDMatrix *m)
{
    int row, col;
    float *matrix = NULL;

    // Inverse matrices have been pulled out for now, as the current code does not need them
    nvAssert(inverse == 0);

    // nxn matrix where n = order
    m->rows = m->columns = order;

    // Select the appropriate matrix
    matrix = bezBasis[order-1];

    if (!matrix) {  nvAssert(0); return; }

    // Load matrix
    for (row = 0; row < order; row++) {
        for (col = 0; col < order; col++) {
            float coeff = *matrix++;
            m->data[row][col][0] = coeff;
            m->data[row][col][1] = coeff;
            m->data[row][col][2] = coeff;
            m->data[row][col][3] = coeff;
        }
    }
}

// Compute the matrix to convert from a power basis to an FD basis
void ComputePowerToFD(int order, FDMatrix *m, int inverse)
{
    int row, col;
    float *matrix;

    // nxn matrix where n = order
    m->rows = m->columns = order;

    if (inverse) {
        matrix = inversePowerToFD[order-1];
    } else {
        matrix = powerToFD[order-1];
    }

    // Load matrix
    for (row = 0; row < order; row++) {
        for (col = 0; col < order; col++) {
            float coeff = *matrix++;
            m->data[row][col][0] = coeff;
            m->data[row][col][1] = coeff;
            m->data[row][col][2] = coeff;
            m->data[row][col][3] = coeff;
        }
    }
}

// Compute the matrix 'P' for FD coefficients, as defined by Henry's paper
void ComputeP(int order, float step, FDMatrix *m)
{
    int row, col, i;
    float f;

    // nxn matrix where n = order
    m->rows = m->columns = order;

    // Fill with zeros
    for (row = 0; row < order; row++) {
        for (col = 0; col < order; col++) {
            m->data[row][col][0] = 0.0f;
            m->data[row][col][1] = 0.0f;
            m->data[row][col][2] = 0.0f;
            m->data[row][col][3] = 0.0f;
        }
    }

    // Fill in diagonal
    for (i = order-1, f = 1.0f; i >= 0; i--, f *= step) {
        m->data[i][i][0] = f;
        m->data[i][i][1] = f;
        m->data[i][i][2] = f;
        m->data[i][i][3] = f;
    }
}

/*****************************************************************************/
// Fill in a column vector matrix using a sequence of strided xyzw values
void FillColumnVectorMatrix(int n, int stride, const float *data, FDMatrix *m, int col)
{
    int i;

    // nx1 matrix
    m->rows = n;    
    //this implicitly assumes that  we are filline this one column at a time
    //such that we have the right value when we are done (i.e. the calls are made)
    //col = 1... n whe col=n is the LAST call.
    m->columns = (col+1);       
    for (i = 0; i < n; i++) {
        m->data[i][col][0] = data[0]; m->data[i][col][1] = data[1];
        m->data[i][col][2] = data[2]; m->data[i][col][3] = data[3];
        data = (const float *)((const char *)data + stride);
    }
}

// Empty a column vector matrix into a sequence of strided xyzw values
void EmptyColumnVectorMatrix(int n, const FDMatrix *m, int stride, float *data, int col)
{
    int i;

    // Verify that it is a nx1 matrix
    nvAssert(m->rows == n);
    nvAssert(col < m->columns);

    // Empty data
    for (i = 0; i < n; i++) {
        // Copy data
        data[0] = m->data[i][col][0];
        data[1] = m->data[i][col][1];
        data[2] = m->data[i][col][2];
        data[3] = m->data[i][col][3];

        // Step pointer
        data = (float *)((char *)data + stride);
    }
}

/*****************************************************************************/
// Compare the U curve from a FDMatrix to a curve
void CompareUCurveMatrix(NV_PATCH_CURVE_INFO *dst, FDMatrix *m)
{
    int i, stride = 4*sizeof(float);
    float *data = dst->coeffs[0];

    nvAssert(dst->order == m->columns);
    // Empty data
    for (i = 0; i < dst->order; i++) {
        // Compare data
        nvAssert(EV_AS_INT(data[0]) == EV_AS_INT(m->data[0][i][0]));
        nvAssert(EV_AS_INT(data[1]) == EV_AS_INT(m->data[0][i][1]));
        nvAssert(EV_AS_INT(data[2]) == EV_AS_INT(m->data[0][i][2]));
        nvAssert(EV_AS_INT(data[3]) == EV_AS_INT(m->data[0][i][3]));

        // Step pointer
        data = (float *)((char *)data + stride);
    }
}

// Extract the U curve from a FDMatrix into a curve
void ExtractUCurve(NV_PATCH_INFO *info, NV_PATCH_CURVE_INFO *dst, const FDMatrix *m)
{
    dst->order = m->columns;
    memcpy(dst->coeffs[0], m->data[0][0], 4*m->columns*sizeof(float));
}

void ExtractUCurveSet(NV_PATCH_INFO *info, int evalEnables, FDCurveAttrSet *dst, FDMatrixAttrSet *pSet)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (evalEnables & (1 << index)) {
            ExtractUCurve(info, (*dst)[index], (*pSet)[index]);
        }
    }
}

/*****************************************************************************/
// Compare the V curve from a FDMatrix to a curve
void CompareVCurveMatrix(NV_PATCH_CURVE_INFO *dst, FDMatrix *m)
{
    int i, stride = 4*sizeof(float);
    float *data = dst->coeffs[0];

    nvAssert(dst->order == m->rows);
    // Empty data
    for (i = 0; i < dst->order; i++) {
        // Compare data
        nvAssert(EV_AS_INT(data[0]) == EV_AS_INT(m->data[i][0][0]));
        nvAssert(EV_AS_INT(data[1]) == EV_AS_INT(m->data[i][0][1]));
        nvAssert(EV_AS_INT(data[2]) == EV_AS_INT(m->data[i][0][2]));
        nvAssert(EV_AS_INT(data[3]) == EV_AS_INT(m->data[i][0][3]));

        // Step pointer
        data = (float *)((char *)data + stride);
    }
}

// Extract the V curve from a FDMatrix into a curve
void ExtractVCurve(NV_PATCH_INFO *info, NV_PATCH_CURVE_INFO *dst, FDMatrix *m)
{
    int i, stride = 4*sizeof(float);
    float *data = dst->coeffs[0];

    dst->order = m->rows;
    for (i = 0; i < dst->order; i++) {
        // Copy data
        CopyPoint(data, m->data[i][0]);

        // Step pointer
        data = (float *)((char *)data + stride);
    }
}

void ExtractVCurveSet(NV_PATCH_INFO *info, int evalEnables, FDCurveAttrSet *dst, FDMatrixAttrSet *pSet)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (evalEnables & (1 << index)) {
            ExtractVCurve(info, (*dst)[index], (*pSet)[index]);
        }
    }
}

/*****************************************************************************/
// Check the retessllation cache to see if we've cached some work here
int CheckRetessellationCache(NV_PATCH_INFO *info, unsigned int tag1, unsigned int tag2, FDMatrix **m){
        //m should be null because it will be overwritten here.
        nvAssert(*m==NULL);

        if (RetessFDtag[0][0] == tag1 && RetessFDtag[0][1] == tag2) {
            *m = RetessFDCache[0];
            RetessFDMRU = 0;
        } else if (RetessFDtag[1][0] == tag1 && RetessFDtag[1][1] == tag2){
            *m = RetessFDCache[1];
            RetessFDMRU = 1;
        } else {
            *m = (FDMatrix *)MemAlloc(sizeof(FDMatrix));

            if (!*m)
            {
                DXGRIP("Unable to alloc matrix -- out of memory.");
            }

            //replace cache slot with newly computed value
            RetessFDMRU = (1-RetessFDMRU);
            if (RetessFDCache[RetessFDMRU]) MemFree(RetessFDCache[RetessFDMRU]);
            RetessFDCache[RetessFDMRU] = *m;
            RetessFDtag[RetessFDMRU][0] = tag1;
            RetessFDtag[RetessFDMRU][1] = tag2;
            return 0;
        }
        
        return 1;
}

/*****************************************************************************/
// Compute FD coefficients from curve control points
void ComputeFDCurveCoeffsFlip(NV_PATCH_INFO *info, int order, float step, float *coeffs,
                const float *points, int stride, int dir, int flipped)
{
    FDMatrix *basis, *m, *p;
    FDMatrix *temp[3];
    EV_ALLOC_DECL();
    unsigned int tag1, tag2;

    EV_ALLOC_INIT_WITH_CACHE(info->context, 5 * sizeof(FDMatrix), computeFDCurveCoeffsEnd, info->pCache[EV_CACHE_9FDMATRICES]);
    EV_ALLOC(basis, info->context, sizeof(FDMatrix));
    EV_ALLOC(m, info->context, sizeof(FDMatrix));
    EV_ALLOC(p, info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[0], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[1], info->context, sizeof(FDMatrix));
    EV_ALLOC_FULL(info->context);

    if (flipped) {
        stride = -stride;
    }
    // Reverse direction of points if necessary
    if (!dir) {
        points = (const float *)((const char *)points + (order-1)*stride);
        stride = -stride;
    }

    temp[2] = NULL;
    tag1 = (0xFFFF0000 | order);
    tag2 = *(unsigned int *)(&step);
    if(!CheckRetessellationCache(info, tag1, tag2, &temp[2])){
        // Compute matrices for the calculation
        ComputeBasis(order, 0, basis);
        ComputePowerToFD(order, m, 0);
        ComputeP(order, step, p);
        MatrixMult(info, temp[1], p, basis);
        MatrixMult(info, temp[2], m, temp[1]);

    }
    // Compute FD curve coefficients
    FillColumnVectorMatrix(order, stride, points, temp[0], 0);
    MatrixMult(info, temp[1], temp[2], temp[0]);
    EmptyColumnVectorMatrix(order, temp[1], 4*sizeof(float), coeffs, 0);

computeFDCurveCoeffsEnd:
    EV_FREE(basis, info->context);
    EV_FREE(m, info->context);
    EV_FREE(p, info->context);
    EV_FREE(temp[0], info->context);
    EV_FREE(temp[1], info->context);
}

void ComputeFDCurveCoeffs(NV_PATCH_INFO *info, int order, float step, float *coeffs,
                          const float *points, int stride, int dir)
{
    ComputeFDCurveCoeffsFlip(info, order, step, coeffs, points, stride, dir, 0);
}

/*****************************************************************************/
// Compute FD coefficients from curve control points
void RetessellateFDCurveInOut(NV_PATCH_INFO *info, float stepOld, float stepNew,
                    NV_PATCH_CURVE_INFO *curve, NV_PATCH_CURVE_INFO *curveOut)
{
    FDMatrix *m, *p, *mInv;
    FDMatrix *temp[3];
    EV_ALLOC_DECL();
    float ratio;
    unsigned int tag1, tag2;

    EV_ALLOC_INIT_WITH_CACHE(info->context, 5 * sizeof(FDMatrix), computeFDCurveCoeffsEnd, info->pCache[EV_CACHE_9FDMATRICES]);
    EV_ALLOC(m, info->context, sizeof(FDMatrix));
    EV_ALLOC(p, info->context, sizeof(FDMatrix));
    EV_ALLOC(mInv, info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[0], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[1], info->context, sizeof(FDMatrix));
    EV_ALLOC_FULL(info->context);

    ratio = stepNew / stepOld;
    temp[2] = NULL;
    tag1 = (*(unsigned int*)(&ratio));
    tag2 = (unsigned int)(curve->order);
    if(ratio != 1.0){
        if(!CheckRetessellationCache(info, tag1, tag2, &temp[2])){
            // Compute matrices for the calculation
            ComputePowerToFD(curve->order, m, 0);
            ComputeP(curve->order, ratio, p);
            ComputePowerToFD(curve->order, mInv, 1);
            MatrixMult(info, temp[1], p, mInv);
            MatrixMult(info, temp[2], m, temp[1]);       
        }

        // Compute FD curve coefficients
        FillColumnVectorMatrix(curve->order, 4*sizeof(float), &curve->coeffs[0][0], temp[0], 0);
        MatrixMult(info, temp[1], temp[2], temp[0]);
        EmptyColumnVectorMatrix(curve->order, temp[1], 4*sizeof(float), &curveOut->coeffs[0][0], 0);
        curveOut->order = curve->order;
    }

computeFDCurveCoeffsEnd:
    EV_FREE(m, info->context);
    EV_FREE(p, info->context);
    EV_FREE(mInv, info->context);
    EV_FREE(temp[0], info->context);
    EV_FREE(temp[1], info->context);
}

// Compute FD coefficients from curve control points
unsigned int RetessellateFDCurveSetInOut(NV_PATCH_INFO *info, int evalEnables,
                    float stepOld, float stepNew,
                    FDCurveAttrSet *pIn, FDCurveAttrSet *pOut)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (evalEnables & (1 << index)) {
            RetessellateFDCurveInOut(info, stepOld, stepNew, (*pIn)[index], (*pOut)[index]);
        }
    }
    return 0;
}

void RetessellateFDCurve(NV_PATCH_INFO *info, float stepOld, float stepNew,
                                NV_PATCH_CURVE_INFO *curve)
{
    RetessellateFDCurveInOut(info, stepOld, stepNew, curve, curve);
}

/*****************************************************************************/

void OffsetCurve(NV_PATCH_INFO *info, NV_PATCH_CURVE_INFO *curve, int n)
{
    int i, j;

    for (i = 0; i < n; i++) {
        for (j = 0; j < curve->order-1; j++) {
            AddPoint(curve->coeffs[j], curve->coeffs[j+1]);
        }
    }
}

void OffsetCurveSet(NV_PATCH_INFO *info, int evalEnables, FDCurveAttrSet *pSet, int n)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (evalEnables & (1 << index)) {
            OffsetCurve(info, (*pSet)[index], n);
        }
    }
}

// Offset curve coefficients by n steps
void OffsetCoeffs(float *coeffs, int order, int n)
{
    int i, j;

    for (i = 0; i < n; i++) {
        for (j = 0; j < order-1; j++) {
            coeffs[4*j+0] += coeffs[4*(j+1)+0];
            coeffs[4*j+1] += coeffs[4*(j+1)+1];
            coeffs[4*j+2] += coeffs[4*(j+1)+2];
            coeffs[4*j+3] += coeffs[4*(j+1)+3];
        }
    }
}

/*****************************************************************************/
// Evaluate along a curve
void EvalCurve(const float *curve, int order, int n, float *outputs, int stride, int revIdx)
{
    int i, j;
    float temp[NV_PATCH_MAX_ORDER][4];

    if (revIdx) {
        outputs = (float *)((char *)outputs + (n-1)*stride);
        stride = -stride;
    }

    // Initialize FD
    for (j = 0; j < order; j++) {
        temp[j][0] = curve[4*j + 0];
        temp[j][1] = curve[4*j + 1];
        temp[j][2] = curve[4*j + 2];
        temp[j][3] = curve[4*j + 3];
    }

    for (i = 0; i < n; i++) {
        // Output a vertex
        outputs[0] = temp[0][0];
        outputs[1] = temp[0][1];
        outputs[2] = temp[0][2];
        outputs[3] = temp[0][3];
        outputs = (float *)((char *)outputs + stride);

        // Step FD
        for (j = 0; j < order-1; j++) {
            AddPoint(temp[j], temp[j+1]);
        }
    }
}

// Evaluate all the enabled curves along a strip in either direction
void EvalStrip(NV_PATCH_INFO *info,
                       FDCurveAttrSet *curves,
                       int n, NV_PATCH_EVAL_OUTPUT *pOutput, int revIdx)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            EvalCurve((*curves)[index]->coeffs[0], (*curves)[index]->order,
                n, &pOutput->vertexAttribs[0][index][0],
                4*sizeof(float)*NV_PATCH_NUMBER_OF_ATTRIBS, revIdx);
        }
    }
}

/*****************************************************************************/
#define EVAL_IWRAP(serial) ((serial) % NV_PATCH_MAX_SW_VERTICES)

// Evaluate attr0 along a curve
void EvalCurveIdx(int attr, int order, const float *curve, int n, NV_PATCH_EVAL_OUTPUT *pOutput, int startIdx, int revIdx)
{
    int i, j, sign = 1, idx;
    float temp[NV_PATCH_MAX_ORDER][4];

    if (revIdx) {
        startIdx = startIdx + n - 1;
        sign = -1;
    }

    // Initialize FD
    for (j = 0; j < order; j++) {
        temp[j][0] = curve[4*j + 0];
        temp[j][1] = curve[4*j + 1];
        temp[j][2] = curve[4*j + 2];
        temp[j][3] = curve[4*j + 3];
    }

    for (i = 0; i < n; i++) {
        // Output a vertex
        nvAssert((startIdx + i*sign) >= 0);
        idx = EVAL_IWRAP(startIdx + i*sign);
        CopyPoint(pOutput->vertexAttribs[idx][0], temp[0]);

        // Step FD
        for (j = 0; j < order-1; j++) {
            AddPoint(temp[j], temp[j+1]);
        }
    }
}

// Evaluate all the enabled curves along a strip in either direction
void EvalStripIdx(NV_PATCH_INFO *info,
                       FDCurveAttrSet *curves,
                       int n, NV_PATCH_EVAL_OUTPUT *pOutput, int startIdx,
                       int revIdx)
{
    int index;

    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            // call pretending current attr is attr0
            EvalCurveIdx(index, (*curves)[index]->order, (*curves)[index]->coeffs[0],
                n, (NV_PATCH_EVAL_OUTPUT *)&pOutput->vertexAttribs[0][index], startIdx, revIdx);
        }
    }
}

/*****************************************************************************/
// Compute a FD matrix
void ComputeFDMatrixFlip(NV_PATCH_INFO *info, NV_PATCH_MAP_INFO *map, int uorder, int vorder, float ustep, float vstep,
                     FDMatrix *m,
                     const float *points, int vCoord, int uCoord,
                     int ufStride, int vfStride)
{
    FDMatrix *uCoeffs;
    FDMatrix *basisU, *basisV;
    FDMatrix *mU, *mV, *pU, *pV;
    FDMatrix *temp[3];
    int i, j;
    unsigned int tag1, tag2;
    EV_ALLOC_DECL();

    EV_ALLOC_INIT_WITH_CACHE(info->context, 9 * sizeof(FDMatrix), computeFDMatrixEnd, info->pCache[EV_CACHE_9FDMATRICES]);
    EV_ALLOC(uCoeffs, info->context, sizeof(FDMatrix));
    EV_ALLOC(basisU, info->context, sizeof(FDMatrix));
    EV_ALLOC(basisV, info->context, sizeof(FDMatrix));
    EV_ALLOC(mU, info->context, sizeof(FDMatrix));
    EV_ALLOC(mV, info->context, sizeof(FDMatrix));
    EV_ALLOC(pU, info->context, sizeof(FDMatrix));
    EV_ALLOC(pV, info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[0], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[1], info->context, sizeof(FDMatrix));
    EV_ALLOC_FULL(info->context);

    if (map) {
        if (info->flags & NV_PATCH_FLAG_FLIPPED_U) {
            uCoord = (uorder - 1 - uCoord);
            ufStride = -ufStride;
        }
        if (info->flags & NV_PATCH_FLAG_FLIPPED_V) {
            vCoord = (vorder - 1 - vCoord);
            vfStride = -vfStride;
        }
        points += vCoord * map->vfStride + uCoord * map->ufStride;
    }

    // The matrix will be mxn, where n = uorder and m = vorder
    m->rows = vorder;
    m->columns = uorder;
    uCoeffs->rows = vorder;
    uCoeffs->columns = uorder;
    
        // Compute u-direction FD curve coefficients
    for (j = 0; j < vorder; j++) { FillColumnVectorMatrix(uorder, ufStride * sizeof(float), points + j*vfStride, temp[0], j); }
    temp[2] = NULL;
    tag1 = (0xFFFF0000 | uorder);
    tag2 = *(unsigned int *)(&ustep);
    if(!CheckRetessellationCache(info, tag1, tag2, &temp[2])){
        // Compute matrices in each direction
        ComputeBasis(uorder, 0, basisU);
        ComputePowerToFD(uorder, mU, 0);
        ComputeP(uorder, ustep, pU);

        MatrixMult(info, temp[1], pU, basisU);
        MatrixMult(info, temp[2], mU, temp[1]);
    }
    MatrixMult(info, temp[1], temp[2], temp[0]);
    for (j = 0; j < vorder; j++) { EmptyColumnVectorMatrix(uorder, temp[1], 4*sizeof(float), &uCoeffs->data[j][0][0], j);}

    // Compute v-direction FD curve coefficients
    for (i = 0; i < uorder; i++) { FillColumnVectorMatrix(vorder, 4*sizeof(float)*NV_PATCH_MAX_ORDER, &uCoeffs->data[0][i][0], temp[0], i); }
    temp[2] = NULL;
    tag1 = (0xFFFF0000 | vorder);
    tag2 = *(unsigned int *)(&vstep);
    if(!CheckRetessellationCache(info, tag1, tag2, &temp[2])){
        // Compute matrices in each direction
        ComputePowerToFD(vorder, mV, 0);
        ComputeBasis(vorder, 0, basisV);    
        ComputeP(vorder, vstep, pV);

        MatrixMult(info, temp[1], pV, basisV);
        MatrixMult(info, temp[2], mV, temp[1]);
    }
    MatrixMult(info, temp[1], temp[2], temp[0]);
    for (i = 0; i < uorder; i++) { EmptyColumnVectorMatrix(vorder, temp[1], 4*sizeof(float)*NV_PATCH_MAX_ORDER, &m->data[0][i][0], i); }
    
computeFDMatrixEnd:
    EV_FREE(uCoeffs, info->context);
    EV_FREE(basisU, info->context);
    EV_FREE(basisV, info->context);
    EV_FREE(mU, info->context);
    EV_FREE(mV, info->context);
    EV_FREE(pU, info->context);
    EV_FREE(pV, info->context);
    EV_FREE(temp[0], info->context);
    EV_FREE(temp[1], info->context);
}

void ComputeFDMatrix(NV_PATCH_INFO *info, int uorder, int vorder, float ustep, float vstep,
                             FDMatrix *m, const float *points, int ustride, int vstride)
// wrapper for now, eventually change all calls to be direct
{
    ComputeFDMatrixFlip(info, 0, uorder, vorder, ustep, vstep, m,
                (const float *)points, 0, 0, ustride, vstride);
}

// Offset an FD matrix by a steps in u and b steps in v
// Not particularly fast -- try to step along a curve when possible!
void OffsetFDMatrix(NV_PATCH_INFO *info, FDMatrix *m, int a, int b)
{
    int i, row, col;
    // Step in u
    for (i = 0; i < a; i++) {
        for (row = 0; row < m->rows; row++) {
            for (col = 0; col < m->columns-1; col++) {
                AddPoint(m->data[row][col], m->data[row][col+1]);
            }
        }
    }

    // Step in v
    for (i = 0; i < b; i++) {
        for (row = 0; row < m->rows-1; row++) {
            for (col = 0; col < m->columns; col++) {
                AddPoint(m->data[row][col], m->data[row+1][col]);
            }
        }
    }
}

void OffsetFDMatrix_Extract_Discard(NV_PATCH_INFO *info, NV_PATCH_CURVE_INFO *dst, int dir, FDMatrix *m, int a, int b) {
    CopyMatrix(info, &info->tempMatrix, m);
    OffsetFDMatrix(info, &info->tempMatrix, a, b);
    if (dir) ExtractVCurve(info, dst, &info->tempMatrix);
    else ExtractUCurve(info, dst, &info->tempMatrix);
}

void OffsetFDMatrixSet(NV_PATCH_INFO *info, int evalEnables, FDMatrixAttrSet *pSet, int a, int b)
{
    int attr;

    for (attr = 0;  attr < info->maxAttr;  attr++) {
        if (!(evalEnables & (1 << attr))) {
            continue;
        }
        OffsetFDMatrix(info, (*pSet)[attr], a, b);
    }
}

// Compute FD coefficients from curve control points
void RetessellateFDMatrix(NV_PATCH_INFO *info, float stepOldU, float stepOldV,
                                 float stepNewU, float stepNewV, FDMatrix *matrix)
{
    const int uorder = matrix->columns;
    const int vorder = matrix->rows;
    float ratio;
    FDMatrix *m, *p, *mInv;
    FDMatrix *temp[3];
    int freeTemp2 = 1;

    EV_ALLOC_DECL();

    EV_ALLOC_INIT_WITH_CACHE(info->context, 5 * sizeof(FDMatrix), RetessellateFDMatrixEnd, info->pCache[EV_CACHE_9FDMATRICES]);
    EV_ALLOC(m, info->context, sizeof(FDMatrix));
    EV_ALLOC(p, info->context, sizeof(FDMatrix));
    EV_ALLOC(mInv, info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[0], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[1], info->context, sizeof(FDMatrix));
    EV_ALLOC_FULL(info->context);

    // Compute matrices for the calculation
    ratio = stepNewU / stepOldU;
    if (ratio != 1.0) {
        temp[2] = NULL;
        if(!CheckRetessellationCache(info, (*(unsigned int*)(&ratio)), uorder, &temp[2])){
            //cache miss calculate the step matrix
            ComputePowerToFD(uorder, m, 0);
            ComputeP(uorder, ratio, p);
            ComputePowerToFD(uorder, mInv, 1);
            MatrixMult(info, temp[0], p, mInv);
            MatrixMult(info, temp[2], m, temp[0]);

        }
        CopyMatrixTranspose(info, temp[0], matrix);
        MatrixMult(info, temp[1], temp[2], temp[0]);
        CopyMatrixTranspose(info, matrix, temp[1]);
    }

    ratio = stepNewV / stepOldV;
    if (ratio != 1.0) {
        temp[2] = NULL;
        if(!CheckRetessellationCache(info, *(unsigned int*)(&ratio), vorder, &temp[2])){
            //cache miss calculate the step matrix
            ComputePowerToFD(vorder, m, 0);
            ComputeP(vorder, ratio, p);
            ComputePowerToFD(vorder, mInv, 1);

            MatrixMult(info, temp[0], p, mInv);
            MatrixMult(info, temp[2], m, temp[0]);
        }

        //don't need a copy cause its not a transpose...
        MatrixMult(info, temp[1], temp[2], matrix);
        CopyMatrix(info, matrix, temp[1]);
    }

RetessellateFDMatrixEnd:
    EV_FREE(m, info->context);
    EV_FREE(p, info->context);
    EV_FREE(mInv, info->context);
    EV_FREE(temp[0], info->context);
    EV_FREE(temp[1], info->context);
}
#undef RATIO
#undef ORDER

unsigned int RetessellateFDMatrixSet(NV_PATCH_INFO *info, int evalEnables,
                    float stepOldU, float stepOldV,
                    float stepNewU, float stepNewV, FDMatrixAttrSet *pSet)
{
    int attr;

    for (attr = 0;  attr < info->maxAttr;  attr++) {
        if (!(evalEnables & (1 << attr))) {
            continue;
        }
        RetessellateFDMatrix(info, stepOldU, stepOldV, stepNewU, stepNewV, (*pSet)[attr]);
    }
    return 0;
}

/*****************************************************************************/
// Compute a Bezier curve's midpoint given its control points
// This uses the de Casteljau algorithm.

void ComputeCurvePoint(int order, float *point, const float *points,
                       int stride, float t)
{
    float temp[NV_PATCH_MAX_ORDER][4];
    int i, j;

    // Copy points
    for (i = 0; i < order; i++) {
        temp[i][0] = points[0]; temp[i][1] = points[1];
        temp[i][2] = points[2]; temp[i][3] = points[3];
        points = (const float *)((const char *)points + stride);
    }

    // Compute midpoint
    for (i = order-1; i >= 1; i--) {
        for (j = 0; j < i; j++) {
            temp[j][0] = (1-t) * temp[j][0] + (t)*temp[j+1][0];
            temp[j][1] = (1-t) * temp[j][1] + (t)*temp[j+1][1];
            temp[j][2] = (1-t) * temp[j][2] + (t)*temp[j+1][2];
            temp[j][3] = (1-t) * temp[j][3] + (t)*temp[j+1][3];
        }
    }

    //note that this is 'point' variable and not 'points'
    point[0] = temp[0][0];
    point[1] = temp[0][1];
    point[2] = temp[0][2];
    point[3] = temp[0][3];
}

void ComputePatchPoint(int uorder, int vorder,
                  float *point, const float *points,
                  int ustride, int vstride,
                  float u, float v) {

    int j;
    float curvePoints[NV_PATCH_MAX_ORDER][4];

    //calculate offset curve in v direction.
    for (j = 0; j < uorder; j++) {
        ComputeCurvePoint(vorder, &curvePoints[j][0], points + 4*j, vstride, v);
    }
    ComputeCurvePoint(uorder, point, &curvePoints[0][0], 4*sizeof(float), u);
}

void ComputeTriPatchCenter(int order, float *point, const float *points,
                           int ustride, int vstride)
{
    float temp[NV_PATCH_MAX_ORDER][NV_PATCH_MAX_ORDER][4];
    const float *ptemp;
    int i, j, k;

    // Copy points
    for (j = 0; j < order; j++) {
        ptemp = (const float *)((const char *)points + j*vstride);
        for (i = 0; i < order; i++) {
            temp[j][i][0] = ptemp[0];
            temp[j][i][1] = ptemp[1];
            temp[j][i][2] = ptemp[2];
            temp[j][i][3] = ptemp[3];
            ptemp = (const float *)((const char *)ptemp + ustride);
        }
    }

    // Compute midpoint
    for (i = order-1; i >= 1; i--) {
        for (j = 0; j < i; j++) {
            for (k = 0; k < i-j; k++) {
                temp[k][j][0] = (temp[k][j][0] + temp[k][j+1][0] + temp[k+1][j][0]) / 3.0f;
                temp[k][j][1] = (temp[k][j][1] + temp[k][j+1][1] + temp[k+1][j][1]) / 3.0f;
                temp[k][j][2] = (temp[k][j][2] + temp[k][j+1][2] + temp[k+1][j][2]) / 3.0f;
                temp[k][j][3] = (temp[k][j][3] + temp[k][j+1][3] + temp[k+1][j][3]) / 3.0f;
            }
        }
    }

    //note that this is 'point' variable and not 'points'
    point[0] = temp[0][0][0];
    point[1] = temp[0][0][1];
    point[2] = temp[0][0][2];
    point[3] = temp[0][0][3];
}

const float triTo3QuadDomains[3][4][2] = {
    {
        {0, 0},
        {0.5f, 0},
        {0, 0.5f},
        {1/3.0f, 1/3.0f},
    },
    {
        {1, 0},
        {0.5f, 0},
        {0.5f, 0.5f},
        {1/3.0f, 1/3.0f},
    },
    {
        {0, 1},
        {0.5f, 0.5f},
        {0, 0.5f},
        {1/3.0f, 1/3.0f},
    },
};

const float triTo1QuadDomain[4][2] = {
    {0, 0},
    {1.0f, 0},
    {0, 1.0f},
    {0, 1.0f},
};

FDMatrix *ReduceTriPatch(NV_PATCH_INFO *info, int level, FDMatrix *p, float w0, float w1)
{
    FDMatrix *rp;
    int deg = p->rows-2;
    int i, j, k;
    float w2 = 1.0f - w0 - w1;

    rp = info->reduceTri[level];
    if (!rp) {
        return NULL;
    }
    rp->rows    = deg+1;
    rp->columns = deg+1;

    for (i = 0; i <= deg; i++) {
        for (j = 0; j <= deg-i; j++) {
            for (k = 0; k < 4; k++) {
                rp->data[i][j][k]  = w0*p->data[i+1][j][k];
                rp->data[i][j][k] += w1*p->data[i][j+1][k];
                rp->data[i][j][k] += w2*p->data[i][j][k];
            }
        }
    }
    return rp;
}

unsigned int ComputeTriToQuad(NV_PATCH_INFO *info, int level, FDMatrix *f, FDMatrix *g, FDMatrix *h,
                                    float **weights, int n, int mini,
                                    int si, int sj, float c, int mu)
{
    FDMatrix *fn;
    int indexi, indexj, firsti, i;
    unsigned int retVal;
    float bc[4];

    if (n == 0) {
        for (i = 0; i < 4; i++) {
            h->data[sj][si][i] += c * f->data[0][0][i];
        }
        weights[sj][si] += c;
        return 0;
    }

    firsti = 1;
    for (indexi = mini; indexi <= 1; indexi++) {
        if (firsti) {
            mu++;
            firsti = 0;
        } else {
            mu = 1;
        }
        for (indexj = 0; indexj <= 1; indexj++) {
            bc[0] = g->data[1 - indexi][indexj][0];
            bc[1] = g->data[1 - indexi][indexj][1];
            fn = ReduceTriPatch(info, level, f, bc[1], bc[0]);
            if (!fn) {
                return NV_PATCH_EVAL_ERR_OUT_OF_MEMORY;
            }
            retVal = ComputeTriToQuad(info, level+1, fn, g, h,
                                    weights, n-1, indexi,
                                    si + 1 - indexi,
                                    sj + indexj,
                                    c*n/mu,
                                    mu);
            if (retVal) {
                return retVal;
            }
        }
    }
    return 0;
}

unsigned int ReparameterizeTriPatch(NV_PATCH_INFO *info, FDMatrix *in,
                                           FDMatrix *out, int domain, int frac)
{
    FDMatrix domainMatrix;
    float *weights[NV_PATCH_MAX_ORDER], invWeight;
    int i, j;
    EV_ALLOC_DECL();

    EV_ALLOC_INIT_WITH_CACHE(info->context, NV_PATCH_MAX_ORDER*NV_PATCH_MAX_ORDER*sizeof(float)
                                            + (in->rows-1) * sizeof(FDMatrix),
                        reparameterizeTriPatchOutOfMemory, info->pCache[EV_CACHE_TRI_WEIGHTS]);

    for (i = 0; i < NV_PATCH_MAX_ORDER; i++) {
        EV_ALLOC(weights[i], info->context, NV_PATCH_MAX_ORDER*sizeof(float));
        for (j = 0; j < NV_PATCH_MAX_ORDER; j++) {
            out->data[i][j][0] = 0.0f;
            out->data[i][j][1] = 0.0f;
            out->data[i][j][2] = 0.0f;
            out->data[i][j][3] = 0.0f;
            weights[i][j] = 0.0f;
        }
    }
    for (i = 0;  i < in->rows-1;  i++) {
        EV_ALLOC(info->reduceTri[i], info->context, sizeof(FDMatrix));
    }
    EV_ALLOC_FULL(info->context);

    for (i = 0; i < 2; i++) {
        for (j = 0; j < 2; j++) {
            if (frac) {
                domainMatrix.data[i][j][0] = triTo3QuadDomains[domain][j*2+i][0];
                domainMatrix.data[i][j][1] = triTo3QuadDomains[domain][j*2+i][1];
            } else {
                domainMatrix.data[i][j][0] = triTo1QuadDomain[j*2+i][0];
                domainMatrix.data[i][j][1] = triTo1QuadDomain[j*2+i][1];
            }
        }
    }

    info->retVal |= ComputeTriToQuad(info, 0, in, &domainMatrix, out,
                                    weights, in->rows-1, 0,
                                    0, 0, 1.0f, 0);

    out->rows = in->rows;
    out->columns = in->columns;
    for (i = 0; i < out->rows; i++) {
        for (j = 0; j < out->columns; j++) {
            invWeight = 1.0f / weights[i][j];
            out->data[i][j][0] *= invWeight;
            out->data[i][j][1] *= invWeight;
            out->data[i][j][2] *= invWeight;
            out->data[i][j][3] *= invWeight;
        }
    }

reparameterizeTriPatchOutOfMemory:
    for (i = 0; i < NV_PATCH_MAX_ORDER; i++) {
        if (weights[i]) {
            EV_FREE(weights[i], info->context);
        }
    }

    return info->retVal;
}

void SendTransitionEndPoints(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo,
                    FDCurveAttrSet **ppCurvesInnerList, int revTran, int nCurveIn,
                    int gridIdxV, int gridIdxU, int cornerIdxV, int cornerIdxU, int doFrac, int transitionFlag)
{
    int index;
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    // SEND THE OUTER ENDPOINT
    HOS_NOTE("Send Outer Transition endpoint"); //always send this...
    pPush = pDevice->StartPush(CountLoopPushes(info));
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_OUTER_END_PT);
    pPush += 2;
    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            HOS_NOTE("Set Curve Coefficients");
            PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
            *(pPush + 1) = VIEW_AS_DWORD(quadInfo->pCorners[index][cornerIdxV][cornerIdxU][0]);
            *(pPush + 2) = VIEW_AS_DWORD(quadInfo->pCorners[index][cornerIdxV][cornerIdxU][1]);
            *(pPush + 3) = VIEW_AS_DWORD(quadInfo->pCorners[index][cornerIdxV][cornerIdxU][2]);
            *(pPush + 4) = VIEW_AS_DWORD(quadInfo->pCorners[index][cornerIdxV][cornerIdxU][3]);
            pPush += 5;
        }
    }
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
    pDevice->EndPush(pPush + 2);

    if (!doFrac) {
        // SEND THE INNER ENDPOINT -- integer case
        // this should only happen in degenerate transitions cases
        //ffif (quadInfo->nv0 == 1 && quadInfo->nv1 == 1)
        {
            float *pPoint;

            //HACK HACK HACK  -- just testing out a theory on the degenerate case Fred gave me...
            //Fix this up.
            HOS_NOTE("Send Inner Transition endpoint");
            pPush = pDevice->StartPush();
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_INNER_END_PT);
            pDevice->EndPush(pPush + 2);
            //ffif (transitionFlag == LAST_ROW || transitionFlag == FIRST_ROW)
            {
                for (index = 0; index < info->maxAttr; index++) {
                    if (info->evalEnables & (1 << index)) {
                        //in degenerate case use patch corners not grid corners
                        // XXX gridCorner is not set up for some degen cases. WHY?
                        //ffpPoint = info->gridCorner[index][gridIdxV][gridIdxU];

                        if (transitionFlag == FIRST_ROW) {
                            //ffpPoint = quadInfo->pCorners[index][cornerIdxV][cornerIdxU];
                            pPoint = quadInfo->pCorners[index][quadInfo->vMaxDir][quadInfo->uMaxDir];

                        } else if (transitionFlag == LAST_ROW) {
                            pPoint = quadInfo->pCorners[index][1-quadInfo->vMaxDir][quadInfo->uMaxDir];

                        } else if (transitionFlag == FIRST_COL) {
                            pPoint = quadInfo->pCorners[index][quadInfo->vMaxDir][quadInfo->uMaxDir];

                        } else if (transitionFlag == LAST_COL) {
                            pPoint = quadInfo->pCorners[index][quadInfo->vMaxDir][1-quadInfo->uMaxDir];

                        } else {
                            pPoint = info->gridCorner[index][gridIdxV][gridIdxU];
                        }
                        HOS_NOTE("Set Curve Coefficients");
                        pPush = pDevice->StartPush(5);
                        PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                        *(pPush + 1) = VIEW_AS_DWORD(pPoint[0]);
                        *(pPush + 2) = VIEW_AS_DWORD(pPoint[1]);
                        *(pPush + 3) = VIEW_AS_DWORD(pPoint[2]);
                        *(pPush + 4) = VIEW_AS_DWORD(pPoint[3]);
                        pDevice->EndPush(pPush + 5);
                    }
                }
            }
        }

    } else {
        // SEND THE INNER ENDPOINT -- fractional case
        if (transitionFlag == FIRST_ROW) {
            float *pPoint;
            HOS_NOTE("Send Inner Transition endpoint");
            pPush = pDevice->StartPush(CountLoopPushes(info));
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_INNER_END_PT);
            pPush += 2;
            for (index = 0; index < info->maxAttr; index++) {
                if (info->evalEnables & (1 << index)) {
                    if (quadInfo->uMaxSegs > 1) {
                        //ffpPoint = info->gridCorner[index][0][1];
                        pPoint = info->gridCorner[index][gridIdxV][gridIdxU];
                    } else {
                        //in degenerate case use patch corners not grid corners
                        //ffpPoint = quadInfo->pCorners[index][1][1];
                        //ffpPoint = quadInfo->pCorners[index][cornerIdxV][cornerIdxU];
                        pPoint = quadInfo->pCorners[index][quadInfo->vMaxDir][cornerIdxU];
                    }
                    HOS_NOTE("Set Curve Coefficients");
                    PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                    *(pPush + 1) = VIEW_AS_DWORD(pPoint[0]);
                    *(pPush + 2) = VIEW_AS_DWORD(pPoint[1]);
                    *(pPush + 3) = VIEW_AS_DWORD(pPoint[2]);
                    *(pPush + 4) = VIEW_AS_DWORD(pPoint[3]);
                    pPush += 5;
                }
            }
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
            pDevice->EndPush(pPush + 2);
            HOS_FLUSH();

        } else if (transitionFlag == FIRST_COL) {
            float *pPoint;
            HOS_NOTE("Send Inner Transition endpoint");
            pPush = pDevice->StartPush(CountLoopPushes(info));
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_INNER_END_PT);
            pPush += 2;
            for (index = 0; index < info->maxAttr; index++) {
                if (info->evalEnables & (1 << index)) {
                    if (doFrac && (quadInfo->vMaxSegs == 1)) {
                        CopyCurve(info, &info->tempCurve, (*ppCurvesInnerList[!revTran ? 0 : nCurveIn-1])[index]);
                        OffsetCurve(info, &info->tempCurve,1);
                        pPoint = (float*)&info->tempCurve.coeffs[0];
                    } else if (quadInfo->vMaxSegs > 1) {
                        //ffpPoint = info->gridCorner[index][1][0];
                        pPoint = info->gridCorner[index][gridIdxV][gridIdxU];
                    } else {
                        //in degenerate case use patch corners not grid corners
                        //ffpPoint = quadInfo->pCorners[index][1][1];
                        pPoint = quadInfo->pCorners[index][cornerIdxV][cornerIdxU];
                    }
                    HOS_NOTE("Set Curve Coefficients");
                    PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                    *(pPush + 1) = VIEW_AS_DWORD(pPoint[0]);
                    *(pPush + 2) = VIEW_AS_DWORD(pPoint[1]);
                    *(pPush + 3) = VIEW_AS_DWORD(pPoint[2]);
                    *(pPush + 4) = VIEW_AS_DWORD(pPoint[3]);
                    pPush += 5;
                }
            }
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
            pDevice->EndPush(pPush + 2);
            HOS_FLUSH();
        }
    }
}

/*****************************************************************************/
// where do the transition curves start?
// for INT cases, they all start on the swatch boundary
// for FRAC cases, curves are rooted as follows:
//  TOP:
//      LAST ROW outer, at actual UL corner that starts the stitch
//      LAST ROW inner, at left of swatch, like INT stitch top
//  RIGHT:
//      LAST COL outer, at actual LR corner that starts the stitch
//      LAST COL inner, at bot of swatch, like INT stitch right
//  BOT:
//      FIRST ROW outer, at LL of swatch, like INT stitch bot
//      FIRST ROW inner, at left of swatch, like INT stitch bot
//  LEFT:
//      FIRST COL outer, at LL of swatch, like INT stitch left
//      FIRST COL inner, at bot of swatch, like INT stitch left
//
// so, the normal "exceptions" are the TOP/RIGHT outer curves
// but, for degenerates:
// but, when there is no FRAC TOP stitch,   then the BOT FIRST ROW inner starts at actual UL of stitch (like TOP LAST ROW outer)
// and, when there is no FRAC RIGHT stitch, either nInnerU > nInnerV and there's no FRAC TOP, or transpose to get same case

void SendFirstInnerTransitionCurve(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo,
                    FDCurveAttrSet **ppCurvesInnerList, int revTran, int nCurveIn, int doFrac, int transitionFlag)
{
    int index, i;
    NV_PATCH_CURVE_INFO *pCurve;
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    // SEND THE FIRST INNER TRANSITION CURVE
    HOS_NOTE("Begin Curve: Send Inner Transition");
    pPush = pDevice->StartPush(CountLoopPushes(info));
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_INNER_TRANSITION_CURVE);
    pPush += 2;
    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            pCurve = (*ppCurvesInnerList[!revTran ? 0 : nCurveIn-1])[index];
            if (doFrac && (quadInfo->vMaxSegs == 1) && (transitionFlag == FIRST_ROW)) {
                CopyCurve(info, &info->tempCurve, pCurve);
                OffsetCurve(info, &info->tempCurve,1);
                pCurve = &info->tempCurve;
            }

            // if this is a not a new swath... do we pre adjust that row??? or just not send the last row in the previous patch?
            for (i = 0; i < pCurve->order; i++) {
                HOS_NOTE("Set Curve Coefficients");
                PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                *(pPush + 1) = VIEW_AS_DWORD(pCurve->coeffs[i][0]);
                *(pPush + 2) = VIEW_AS_DWORD(pCurve->coeffs[i][1]);
                *(pPush + 3) = VIEW_AS_DWORD(pCurve->coeffs[i][2]);
                *(pPush + 4) = VIEW_AS_DWORD(pCurve->coeffs[i][3]);
                pPush += 5;
            }
        }
    }
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
    pDevice->EndPush(pPush + 2);
    HOS_FLUSH();
}

void SendFirstOuterTransitionCurve(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDCurveAttrSet *pCurvesOuter,
                    int doFrac, int transitionFlag)
{
    int index, i;
    NV_PATCH_CURVE_INFO *pCurve;
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    // SEND THE FIRST OUTER TRANSITION CURVE
    HOS_NOTE("Send Outer Transition");
    pPush = pDevice->StartPush(CountLoopPushes(info));
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_OUTER_TRANSITION_CURVE);
    pPush += 2;
    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {
            pCurve = (*pCurvesOuter)[index];
            //if this is a not a new swath... do we pre adjust that row??? or just not send the last row in the previous patch?
            if (doFrac && (transitionFlag == LAST_ROW || transitionFlag == LAST_COL)) {
                CopyCurve(info, &info->tempCurve, pCurve);
                OffsetCurve(info, &info->tempCurve,1);
                pCurve = &info->tempCurve;
            }

            for (i = 0; i < pCurve->order; i++) {
                HOS_NOTE("Set Curve Coefficients");
                PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                *(pPush + 1) = VIEW_AS_DWORD(pCurve->coeffs[i][0]);
                *(pPush + 2) = VIEW_AS_DWORD(pCurve->coeffs[i][1]);
                *(pPush + 3) = VIEW_AS_DWORD(pCurve->coeffs[i][2]);
                *(pPush + 4) = VIEW_AS_DWORD(pCurve->coeffs[i][3]);
                pPush += 5;
            }
        }
    }
    Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
    pDevice->EndPush(pPush + 2);
    HOS_FLUSH();
}

/*****************************************************************************/
// Draw stitch for INT or FRAC cases
// gridIdx* are indices for inside endpoint:
//      info->gridCorner[index][gridIdxV][gridIdxU]
// cornerIdx* are indices for outside endpoint:
//      quadInfo->pCorners[index][cornerIdxV][cornerIdxU]

void DrawIntStitch(int stripU, NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo,
                    FDCurveAttrSet **ppCurvesOuter, FDCurveAttrSet **ppCurvesInnerList,
                    int outSegs, int inSegs,
                    NV_PATCH_EVAL_OUTPUT *pDataOut, NV_PATCH_EVAL_OUTPUT *pDataIn,
                    int gridIdxV, int gridIdxU,
                    int cornerIdxV, int cornerIdxU,
                    int stitchLowOut, int stitchHighOut,
                    int stitchLowIn, int stitchHighIn,
                    int qDir, int qOtherDir, int qMaxDir,
                    int reverse, int ifEqualStepInner, int transitionFlag)
{
    // World's messiest state machine.  I wish this was cleaner. -- MJC
    // ... and now perhaps messier, but does swathing. -- FBF
    // and may even match the HW
    int dist, in, out, i, first;
    int inStrip, lastWasIn;
    int fanCenter, fanFirst, fanLast;
    int idxInnerEnd;
    int index;
    FDCurveAttrSet *pCurves;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    //ff// calc swaths WITHOUT including the ending FRAC-only stitches
    //ffint nSwatchU = (quadInfo->uMaxSegs - 1 - doFrac) / info->maxSwatch + 1;
    //ffint nSwatchV = (quadInfo->vMaxSegs - 1 - doFrac) / info->maxSwatch + 1;
    int nCurveOut;
    int nCurveIn; // = stripU ? nSwatchU : nSwatchV;
    int revTran = qDir != qMaxDir;          // qDir is from outerDir
    int revInner = qOtherDir != qMaxDir;    // qOtherDir
    int totalToDoOut, totalToDoIn;
    int onCurveOut = 1, onCurveIn = 1;
    int oneToDoOut, oneToDoIn;
    int onLowIn, onHighIn;
    int innerCurve;         // temp to hold curve number to select from ppCurvesInnerList
    int lastInsideCurve;    // means last in list. Not necessarily last drawn.
    int lastOutsideCurve;   // last drawn
    //ffint lastFracInner = 0;  // for special case where last frac curve actually consumes 2 curves
    int lastFrontFace;

    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    nCurveOut = (outSegs - 1) / info->maxSwatch + 1;
    nCurveIn =  (inSegs - 1 - doFrac) / info->maxSwatch + 1;
    nvAssert(qOtherDir == qMaxDir);
    nvAssert((outSegs <= inSegs)  ||  doFrac);

    ifEqualStepInner ^= info->flipUV;

    out = 0;
    in = 0;
    dist = inSegs - outSegs;
    totalToDoOut = 1+outSegs; totalToDoIn = 1+inSegs;

    if (totalToDoOut > 1+info->maxSwatch) {
        oneToDoOut = info->maxSwatch;   // doesn't fit in one curve
        lastOutsideCurve = 0;
    } else {
        oneToDoOut = totalToDoOut;
        lastOutsideCurve = 1;
    }

    if (totalToDoIn > 1+info->maxSwatch) {
        // doesn't fit in one curve
        if (revTran) {
            // reversed inner curve
            oneToDoIn = inSegs % info->maxSwatch;
            ASSERT(oneToDoIn >= 0);
            if ((oneToDoIn - stitchHighIn) <= 0) {
                if ((oneToDoIn == 1)  &&  stitchHighIn /* && (nCurveIn == 2)*/) {
                    nCurveIn--;
                }
                oneToDoIn += info->maxSwatch; // + stitchHighIn;
            }
            oneToDoIn++;
            lastInsideCurve = 1;
            onLowIn = 0;
            onHighIn = stitchHighIn;
        } else {
            if (doFrac && (nCurveIn == 1) && (totalToDoIn == (2+info->maxSwatch))) {
                oneToDoIn = 2+info->maxSwatch;
                lastInsideCurve = 1;
            } else {
                oneToDoIn = info->maxSwatch;
                lastInsideCurve = 0;
            }
            onLowIn = stitchLowIn;
            onHighIn = 0;
        }

    } else {
        // fits in one curve
        oneToDoIn = totalToDoIn;
        lastInsideCurve = 1;
        onLowIn = stitchLowIn;
        onHighIn = stitchHighIn;
    }

    if (revTran) {
        idxInnerEnd = in;
    } else {
        nvAssert(qDir == qOtherDir);
        idxInnerEnd = oneToDoIn-1;
    }

    //setup transition
    unsigned long TControl[3], order;
    unsigned long numcoeffs = 0x0;
    int hwAttr;
    TControl[0] = TControl[1] = TControl[2] = 0x0;
    for (hwAttr = 0; hwAttr < 7; hwAttr++) {                //TPControl0
        if (info->evalEnables & (1 << hwAttr)) {
            order = (*ppCurvesOuter[0])[hwAttr]->order;
            ASSERT((int)order == (*ppCurvesInnerList[0])[hwAttr]->order);
            TControl[0] |= ((order-1) << (hwAttr<<2));      //hwAttr*4
            numcoeffs += order;
        }
    }
    for (hwAttr = 8; hwAttr < 15; hwAttr++) {               //TPControl1
        if (info->evalEnables & (1 << hwAttr)) {
            order = (*ppCurvesOuter[0])[hwAttr]->order;
            ASSERT((int)order == (*ppCurvesInnerList[0])[hwAttr]->order);
            TControl[1] |= ((order-1) << (hwAttr<<2));
            numcoeffs += order;
        }
    }

    TControl[2] = (numcoeffs << 24) | (outSegs << 10) | inSegs;
    HOS_NOTE("Set Begin Transition");
    pPush = pDevice->StartPush(4);
    PushCount(pPush, NV097_SET_BEGIN_TRANSITION0, 3);
    *(pPush + 1) = TControl[0];
    *(pPush + 2) = TControl[1];
    *(pPush + 3) = TControl[2];
    pDevice->EndPush(pPush + 4);

    //SEND Transition endpoints as necessary
    SendTransitionEndPoints(info, quadInfo, ppCurvesInnerList, revTran, nCurveIn,
                            gridIdxV, gridIdxU, cornerIdxV, cornerIdxU, doFrac, transitionFlag);

    //SEND Beginning Transition Curves
    SendFirstInnerTransitionCurve(info, quadInfo, ppCurvesInnerList, revTran, nCurveIn, doFrac, transitionFlag);
    SendFirstOuterTransitionCurve(info, quadInfo, ppCurvesOuter[0], doFrac, transitionFlag);

    if (inSegs != outSegs) {
        // if we have a reversal, bias the stitching direction so it comes
        // out the same as the non reversed case.
        int lastTrans = (transitionFlag == LAST_ROW  || transitionFlag == LAST_COL) ? 1 : 0;
        int rowTrans =  (transitionFlag == FIRST_ROW || transitionFlag == LAST_ROW) ? 1 : 0;
        int fudge;
        if (rowTrans) {
            fudge = !(revTran ^ (lastTrans)); // row
        } else {
            fudge = !(revTran ^ (!lastTrans)); // col
        }
        dist += fudge;
    } else {
        // when segs equal, initial dist == 0. if dist==0 means to select
        // inner edge first, then adjust 'dist' to step inner edge first.
        if (ifEqualStepInner) {
            dist += 1;
        }
    }

    // The algorithm in the Unit test (and presumably the actual HW) assumes
    // the first outside and inside points have been sent (accounted for), even
    // though the starting 'totalToDoIn' and 'oneToDoIn' do not reflect this.
    // Similarly for 'oneToDoOut' and 'totalToDoOut'. That's why they start out
    // with the total counts.
    // Here we fudge an "extra" loop to avoid duplicating the code to send
    // and inside curve (by setting 'first'). To compensate, adjust the
    // various counts.
    first = 1;
    dist += 2*outSegs;
    in--;
    oneToDoIn++;
    totalToDoIn++;
    inStrip = 1;
    lastWasIn = 0;

    // The FD unit test algorithm does "extra" steps at the end which don't
    // matter for HW, but cause extra lines for SW emulation.
    // That's why this code checks for "> 1" instead of "> 0"

    if (doFrac) {
        // fudge things to get alternating out-in-out-in-out ... out
        // NOTE: first 'out' already sent, so start with 'in' below.
        dist = 1;       // set up to alternate in-out-in-out ...
        outSegs = inSegs = 1;       // from now on, only used by 'dist' adjustment
    }

    //tag:stst
    while (totalToDoOut > 1  ||  totalToDoIn > 1) {
        while (first || ((totalToDoIn > 1) && (dist > 0))) {
            // step and use an inside point
            first = 0;
            dist -= 2*outSegs;
            in++;
            oneToDoIn--;
            totalToDoIn--;

            if (oneToDoIn == 0  &&  totalToDoIn > 1) {
                // need another inside curve
                if (totalToDoIn > (1+info->maxSwatch+doFrac)) {
                    oneToDoIn = info->maxSwatch;
                    onLowIn = 0;
                    onHighIn = 0;
                    lastInsideCurve = 0;
                } else {
                    oneToDoIn = totalToDoIn;
                    onLowIn = stitchLowIn && revTran;
                    onHighIn = stitchHighIn && !revTran;
                    if (!revTran) {
                        lastInsideCurve = 1;
                    } else {
                        lastInsideCurve = 0;
                    }
                    //ffif (doFrac) {
                        //ffif (totalToDoIn == (2+info->maxSwatch)) {
                            //ff// this special case effectively consumes the 2 last curves at once
                            //fflastFracInner = 1;
                        //ff}
                    //ff}
                }

                innerCurve = !revTran ? onCurveIn : nCurveIn-1-onCurveIn;
                pCurves = ppCurvesInnerList[innerCurve];

                // SEND NEXT INNER TRANSITION CURVE
                HOS_NOTE("Send Inner Transition");
                pPush = pDevice->StartPush(CountLoopPushes(info));
                Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_INNER_TRANSITION_CURVE);
                pPush += 2;
                for (index = 0; index < info->maxAttr; index++) {
                    if (info->evalEnables & (1 << index)) {
                        //if this is a not a new swath... do we pre adjust that row??? or just not send the last row in the previous patch?
                        //fffor (i = 0; i < (*ppCurvesInnerList[!revTran ? 0 : nCurveIn-1])[index]->order; i++) { // }
                        for (i = 0; i < (*pCurves)[index]->order; i++) {
                            HOS_NOTE("Set Curve Coefficients");
                            PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                            *(pPush + 1) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][0]);
                            *(pPush + 2) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][1]);
                            *(pPush + 3) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][2]);
                            *(pPush + 4) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][3]);
                            pPush += 5;
                        }
                    }
                }
                Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
                pDevice->EndPush(pPush + 2);
                HOS_FLUSH();

                onCurveIn++;
            }

            if (doFrac) {
                if (totalToDoOut == 1) {
                    dist = 0xDAD;       // complete stitch with fan of inside pts
                }
            }
        }

        if (totalToDoOut > 1) {
            dist += 2*inSegs;
            out++;
            oneToDoOut--;
            totalToDoOut--;

            if (oneToDoOut == 0  &&  totalToDoOut > 1) {
                // need another outside curve
                if (totalToDoOut > 1+info->maxSwatch) {
                    oneToDoOut = info->maxSwatch;   // doesn't fit in one curve
                    lastOutsideCurve = 0;
                } else {
                    oneToDoOut = totalToDoOut;
                    lastOutsideCurve = 1;
                }

                pCurves = ppCurvesOuter[onCurveOut];

                // SEND THE NEXT OUTER TRANSITION CURVE
                HOS_NOTE("Send Outer Transition");
                pPush = pDevice->StartPush(CountLoopPushes(info));
                Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_OUTER_TRANSITION_CURVE);
                pPush += 2;
                for (index = 0; index < info->maxAttr; index++) {
                    if (info->evalEnables & (1 << index)) {
                        // if this is a not a new swath... do we pre adjust that row???
                        // or just not send the last row in the previous patch?
                        for (i = 0; i < (*pCurves)[index]->order; i++) {
                            HOS_NOTE("Set Curve Coefficients");
                            PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                            *(pPush + 1) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][0]);
                            *(pPush + 2) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][1]);
                            *(pPush + 3) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][2]);
                            *(pPush + 4) = VIEW_AS_DWORD((*pCurves)[index]->coeffs[i][3]);
                            pPush += 5;
                        }
                    }
                }
                Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
                pDevice->EndPush(pPush + 2);
                HOS_FLUSH();

                onCurveOut++;
            }

            //ffif (doFrac) {
                if (totalToDoIn == 1) {
                    dist = -0xDAD;      // complete stitch with fan of outside pts
                }
            //ff}
        }
    }
    nvAssert(totalToDoOut == 1);
    nvAssert(totalToDoIn == 1);
    nvAssert(onCurveOut == nCurveOut);
    //ffnvAssert((onCurveIn + lastFracInner) == nCurveIn);
    nvAssert(onCurveIn == nCurveIn);

    HOS_NOTE("END Transition");
    pPush = pDevice->StartPush();
    Push1(pPush, NV097_SET_END_TRANSITION, 0);
    pDevice->EndPush(pPush + 2);
    HOS_FLUSH();
}


/*****************************************************************************/
unsigned int DrawIntPatch(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDMatrix **matrices);
unsigned int DrawIntPatchGrid(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDMatrix **matrices);

unsigned int DrawFracPatch(NV_PATCH_INFO *info,
                           int botOutSegs, int botInSegs,
                           int leftOutSegs, int leftInSegs,
                           int reverse, FDMatrix **matrices)
{
    int index;
    unsigned int retVal;
    NV_PATCH_QUAD_INFO *quadInfo = info->quadInfo;

    // layer on top of DrawIntPatch() cases
    quadInfo->nu0 = botOutSegs;
    quadInfo->nu1 = botInSegs;
    quadInfo->nv0 = leftOutSegs;
    quadInfo->nv1 = leftInSegs;

    quadInfo->uMaxSegs = botInSegs;
    quadInfo->vMaxSegs = leftInSegs;
    quadInfo->uMinSegs = botOutSegs;
    quadInfo->vMinSegs = leftOutSegs;
    quadInfo->needUInner = 1;
    quadInfo->needVInner = 1;

    quadInfo->stitchLeft = 1;
    quadInfo->stitchRight = 0;
    quadInfo->stitchTop = 0;
    quadInfo->stitchBottom = 1;

    quadInfo->stitchUBegin = 1;
    quadInfo->stitchUEnd = 0;
    quadInfo->stitchVBegin = 1;
    quadInfo->stitchVEnd = 0;

    quadInfo->u0Dir = 1;
    quadInfo->v0Dir = 1;
    quadInfo->u1Dir = 1;
    quadInfo->v1Dir = 1;
    quadInfo->uMaxDir = 1;
    quadInfo->vMaxDir = 1;

    quadInfo->du0 = 1.f / quadInfo->nu0;
    quadInfo->du1 = 1.f / quadInfo->nu1;
    quadInfo->dv0 = 1.f / quadInfo->nv0;
    quadInfo->dv1 = 1.f / quadInfo->nv1;
    quadInfo->duMax = 1.f / quadInfo->uMaxSegs;
    quadInfo->dvMax = 1.f / quadInfo->vMaxSegs;

    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1<<index))) {
            continue;
        }
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, matrices[index]);
if (info->swatchFlags & NV_PATCH_SWATCH) {
    RetessellateFDMatrix(info, 1.f, quadInfo->dvMax * info->maxSwatch, 1.f, quadInfo->dvMax, &info->tempMatrix);    // big to small
}
        OffsetFDMatrix_Extract_Discard(info, quadInfo->pUInner[index], 0, &info->tempMatrix, 0, 1);

// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, matrices[index]);
if (info->swatchFlags & NV_PATCH_SWATCH) {
    RetessellateFDMatrix(info, quadInfo->duMax * info->maxSwatch, 1.f, quadInfo->duMax, 1.f, &info->tempMatrix);    // big to small
}
        OffsetFDMatrix_Extract_Discard(info, quadInfo->pVInner[index], 1, &info->tempMatrix, 1, 0);
    }

    //             *-*-*    the set frontface call will adjust for this
    // winding on  |X|O|
    // subpatches  *-*-*
    // X=CW        |O|X|
    // O=CCW       *-*-*

    info->reverse ^= reverse;
    retVal = DrawIntPatch(info, quadInfo, matrices);
    info->reverse ^= reverse;

    return retVal;
}

/*****************************************************************************/
/*****************************************************************************/
unsigned int
FillIntCornerLL(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, NV_PATCH_QUAD_INFO *quadInfoOrig,
            int index, float *pPoint)
{
    NV_PATCH_CURVE_INFO *tempCurve = &info->tempCurve;

    if (quadInfo->stitchVBegin) {
        nvAssert(!quadInfo->stitchVEnd);
        if (quadInfo->vMaxSegs > 1) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchVBegin)[index]);
            OffsetCurve(info, tempCurve, 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        if (quadInfo->stitchUBegin) {
            // must step along ending patch edge
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchUEnd)[index]);
            OffsetCurve(info, tempCurve, 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][  quadInfo->vMaxDir][1-quadInfo->uMaxDir]);
        return 0;

    } else if (quadInfo->stitchUBegin) {
        nvAssert(!quadInfo->stitchUEnd);
        // must step along edge, even though (*quadInfo->pSwatchVBegin)[index]->coeffs[0] is about right
        CopyCurve(info, tempCurve, (*quadInfo->pSwatchUBegin)[index]);
        OffsetCurve(info, tempCurve, 1);
        CopyPoint(pPoint, tempCurve->coeffs[0]);
        // Since the outside edge takes priority, we tweak start of pSwatchVBegin to be on the outside edge
        CopyPoint((*quadInfo->pSwatchVBegin)[index]->coeffs[0], pPoint);

    } else {
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][1-quadInfo->vMaxDir][1-quadInfo->uMaxDir]);
    }

    return 0;
}

/*****************************************************************************/
unsigned int
FillIntCornerLR(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, NV_PATCH_QUAD_INFO *quadInfoOrig,
            int index, float *pPoint)
{
    NV_PATCH_CURVE_INFO *tempCurve = &info->tempCurve;

    if (quadInfo->stitchVBegin) {
        nvAssert(!quadInfo->stitchVEnd);
        if (quadInfo->vMaxSegs > 1) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchVEnd)[index]);
            OffsetCurve(info, tempCurve, 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        if (quadInfo->stitchUEnd) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchUEnd)[index]);
            OffsetCurve(info, tempCurve, quadInfo->uMaxSegs - 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][  quadInfo->vMaxDir][quadInfo->uMaxDir]);
        return 0;

    } else if (quadInfo->stitchUEnd) {
        nvAssert(!quadInfo->stitchUBegin);
        CopyPoint(pPoint, (*quadInfo->pSwatchVEnd)[index]->coeffs[0]);

    } else {
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][1-quadInfo->vMaxDir][quadInfo->uMaxDir]);
    }

    return 0;
}

/*****************************************************************************/
unsigned int
FillIntCornerUL(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, NV_PATCH_QUAD_INFO *quadInfoOrig,
            int index, float *pPoint)
{
    NV_PATCH_CURVE_INFO *tempCurve = &info->tempCurve;

    if (quadInfo->stitchVEnd) {
        nvAssert(!quadInfo->stitchVBegin);
        if (quadInfo->vMaxSegs > 1) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchVBegin)[index]);
            OffsetCurve(info, tempCurve, quadInfo->vMaxSegs - 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        if (quadInfo->stitchUBegin) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchUBegin)[index]);
            OffsetCurve(info, tempCurve, 1);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][1-quadInfo->vMaxDir][1-quadInfo->uMaxDir]);
        return 0;

    } else if (quadInfo->stitchUBegin) {
        nvAssert(!quadInfo->stitchUEnd);
        CopyCurve(info, tempCurve, (*quadInfo->pSwatchUEnd)[index]);
        OffsetCurve(info, tempCurve, 1);
        CopyPoint(pPoint, tempCurve->coeffs[0]);

    } else {
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][quadInfo->vMaxDir][1-quadInfo->uMaxDir]);
    }
    return 0;
}

/*****************************************************************************/
unsigned int
FillIntCornerUR(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, NV_PATCH_QUAD_INFO *quadInfoOrig,
            int index, float *pPoint)
{
    NV_PATCH_CURVE_INFO *tempCurve = &info->tempCurve;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int adjust = doFrac && (info->swatchFlags & NV_PATCH_SWATCH);

    if (quadInfo->stitchVEnd  ||  doFrac) {
        nvAssert(!quadInfo->stitchVBegin  ||  doFrac);
        if ((quadInfo->vMaxSegs > 1)  ||  doFrac) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchVEnd)[index]);
            OffsetCurve(info, tempCurve, quadInfo->vMaxSegs - 1 + adjust);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        if (quadInfo->stitchUEnd  ||  doFrac) {
            CopyCurve(info, tempCurve, (*quadInfo->pSwatchUBegin)[index]);
            OffsetCurve(info, tempCurve, quadInfo->uMaxSegs - 1 + adjust);
            CopyPoint(pPoint, tempCurve->coeffs[0]);
            return 0;
        }
        nvAssert(!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL));
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][1-quadInfo->vMaxDir][quadInfo->uMaxDir]);
        return 0;

    } else if (quadInfo->stitchUEnd) {
        nvAssert(!quadInfo->stitchUBegin);
        CopyCurve(info, tempCurve, (*quadInfo->pSwatchUEnd)[index]);
        OffsetCurve(info, tempCurve, quadInfo->uMaxSegs - 1);
        CopyPoint(pPoint, tempCurve->coeffs[0]);

    } else {
        CopyPoint(pPoint, quadInfoOrig->pCorners[index][quadInfo->vMaxDir][quadInfo->uMaxDir]);
    }

    return 0;
}

/*****************************************************************************/
// routines for integer tessellations
// NOTE: tempVBegin and tempVEnd, are scratch storage.
// This means that the guards may be stepping without a copy.
// The guard setup is handled by the caller, which allows the caller
// to make intelligent choices about the setup and avoid double copies.
// However, the matrix doesn't have any options, so it's better to have
// this routine do the copy from 'matrices' to ppMatrixSetSS0
// since an attr loop is required here anyways.
// So, 'matrices' data must not be altered, and ppMatrixSetSS0[*] are scratch.

// For SW emulation, I tried a strategy of having the formation of the regular
// grid generate curves and guards in preparation for the transitions.
// This can work.
// One of the problems is that a swatch UR guard point is required
// by the HW, so it's not possible to simply write the "top" UInner guard
// from the matrix and just use it, there would still need to be
// a UR guard point to match the swatch to the right.
// In SW, we could save the results from EvalStrip() and feed that into
// the starting point for the next UInner transition (for both the
// FIRST_ROW and LAST_ROW), but not for the inner swatches which naturally get
// guard points and curves from the big step matrices and curves obtained
// while doing swaths.
// In SW, it's required to save all the UInner and VInner curves for later
// doing the transitions, so the storage issue is identical, but with HW it's
// not feasible to store arbitrary amounts of data for later use during the
// transitions.
// So, the "top" UEnd is calculated as a series of guard curves, and the
// guard UR comes from the next curve to the right of the current swatch.
// This could be optimized for SW emulation, but is not done in order to have
// SW emulation more closely match and test requirements for HW drawing.
// Similar reasoning applies to the swatch LR corner guard.
// Also, the VBegin and UBegin inner curves could be totally obtained from
// the matrix at appropriate times, feeding UL and LR to the next
// swatch curve along the outer boundaries of the regular grid.
// Finally, LL could always be obtained from the starting point of the matrix,
// or after one step to the regular grid (as needed for EvalStrip)

unsigned int
DrawIntPatchGrid(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDMatrix **matrices)
{
    int ix, iy, degen, ylimit, ymax, index, useVBegin, useVEnd;
    NV_PATCH_CURVE_INFO **tempVBegin, **tempVEnd, *tempCurve;
    FDMatrix **ppMatrixSetSS0;
    FDCurveAttrSet *pCurvesTop, *pCurvesBot, *pCurvesTemp;
    NV_PATCH_EVAL_OUTPUT *pOut1, *pOut2, *pTemp;
    int fixUL = 0, fixUR = 0;
    int fixLL = 0, fixLR = 0;
    int iEvalRight = quadInfo->uMaxSegs - quadInfo->stitchUEnd;
    unsigned int retVal = NV_PATCH_EVAL_OK;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

    tempVBegin = info->tempVBegin;
    tempVEnd = info->tempVEnd;
    tempCurve = &info->tempCurve;
    ppMatrixSetSS0 = info->ppMatrixSetSS0;
    pCurvesTop = quadInfo->pCurvesTop;
    pCurvesBot = quadInfo->pCurvesBot;
    pOut1 = quadInfo->pOut1;
    pOut2 = quadInfo->pOut2;

    // tag:iii
    // setup the swatch
    degen = 0;//(quadInfo->vMaxSegs == 1); // && (quadInfo->stitchVBegin || quadInfo->stitchVEnd);
    ymax = quadInfo->vMaxSegs - quadInfo->stitchVEnd - quadInfo->stitchVBegin;// + degen;

    // check for degenerate regular grid.
    if (!doFrac) {
        if ((ymax <= 0)  ||  ((iEvalRight - quadInfo->stitchUBegin) <= 0)) {
            return retVal;
        }
    } else {
        // this test is normal against <= 2 but we've already pre-subtracted
        // 1 from each before calling here assuming that the regular grid
        // has 1 less segment due to the additional 2 transitions in frac.
        if ((ymax <= 0)  ||  ((iEvalRight - quadInfo->stitchUBegin) <= 0)) {
            return retVal;
        }
    }

    // Note: the 'use' vars are for non-std-guard attributes
    useVBegin = 0;
    useVEnd = doFrac && (info->swatchFlags & NV_PATCH_SWATCH_LAST_COL);

    for (index = 0; index < info->maxAttr; index++) {
        if (info->evalEnables & (1 << index)) {

            // copy and step the forward differencing matrix to the first row of regular grid (as for HW)
            CopyMatrix(info, ppMatrixSetSS0[index], matrices[index]);

            OffsetFDMatrix(info, ppMatrixSetSS0[index], 0, quadInfo->stitchVBegin);
        }
    }

    //BEGIN_END_SWATCH/SWATH?
    unsigned long dwFormat;
    dwFormat = NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_BEGIN;
    dwFormat |= (((info->swatchFlags  & NV_PATCH_SWATCH_FIRST_ROW) ? NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_NEW : NV097_SET_BEGIN_END_SWATCH_NEW_SWATH_CONTINUE)   << 4);
    dwFormat |= ((quadInfo->stitchVBegin ? NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_TRUE : NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_ROW_FALSE) << 8);
    dwFormat |= ((quadInfo->stitchUBegin ? NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_TRUE : NV097_SET_BEGIN_END_SWATCH_SKIP_FIRST_COL_FALSE) << 12);
    dwFormat |= (((quadInfo->vMaxSegs - quadInfo->stitchVEnd < info->maxSwatch) ?  NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_PARTIAL_HEIGHT : NV097_SET_BEGIN_END_SWATCH_SHORT_SWATCH_FULL_HEIGHT) << 16);
    dwFormat |= (((quadInfo->uMaxSegs - quadInfo->stitchUEnd < info->maxSwatch) ?  NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_PARTIAL_WIDTH : NV097_SET_BEGIN_END_SWATCH_NARROW_SWATCH_FULL_WIDTH) << 20);

    HOS_NOTE("Begin Swatch");
    pPush = pDevice->StartPush();
    Push1(pPush, NV097_SET_BEGIN_END_SWATCH, dwFormat);
    pDevice->EndPush(pPush + 2);

    //send guard curves!!!!
    SendGuardCurve(NV097_SET_BEGIN_END_CURVE_CMD_LEFT_GUARD_CURVE,  info, quadInfo, info->swatchFlags );
    SendGuardCurve(NV097_SET_BEGIN_END_CURVE_CMD_RIGHT_GUARD_CURVE, info, quadInfo, info->swatchFlags );

    // prep INT patch
    if (info->swatchFlags & NV_PATCH_SWATCH_FIRST_ROW) {
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                if (quadInfo->stitchVBegin  &&  quadInfo->needUInner) {
                    // cache off first curve for use in transitions later
                    ExtractUCurve(info, (*quadInfo->pSwatchUBegin)[index], ppMatrixSetSS0[index]);
                }
            }
        }

        int i;
        HOS_NOTE("Begin Curve");
        pPush = pDevice->StartPush(CountLoopPushes(info));
        Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_STRIP_CURVE);
        pPush += 2;
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                //if this is a not a new swath... do we pre adjust that row??? or just not send the last row in the previous patch?
                for (i = 0; i < ppMatrixSetSS0[index]->columns; i++) {
                    HOS_NOTE("Set Curve Coefficients");
                    PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                    *(pPush + 1) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][0]);
                    *(pPush + 2) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][1]);
                    *(pPush + 3) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][2]);
                    *(pPush + 4) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][3]);
                    pPush += 5;
                }
            }
        }
        Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
        pDevice->EndPush(pPush + 2);
    }

    if (doFrac) {
        // for FRAC patches, check after writing UBegin
        if ((ymax <= 0)  ||  ((iEvalRight - quadInfo->stitchUBegin) <= 0)) {
            return retVal;
        }
    }

    // tag:rrr
    // loop thru regular grid, plus 1 for top stitch to init info for "bot" of top stitch
    ylimit = ymax - 1;
    for (iy = 0; iy < ymax; iy++) {
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                OffsetFDMatrix(info, ppMatrixSetSS0[index], 0, 1);
                if (EV_GUARD_ATTR(index)  ||  useVBegin) {
                    OffsetCurve(info, tempVBegin[index], 1);
                }
                if (EV_GUARD_ATTR(index)  ||  useVEnd) {
                    OffsetCurve(info, tempVEnd[index], 1);
                }

                if ((iy == ylimit) && (info->swatchFlags & NV_PATCH_SWATCH_LAST_ROW)) {
                    if (doFrac  ||  (quadInfo->stitchVEnd  &&  quadInfo->needUInner)) {
                        // save UInner curves for doing transition later
                        if (EV_GUARD_ATTR(index) && !quadInfo->stitchUBegin  &&  !doFrac) {
                            // snap to pre-calculated guard points
                            if (index == ATTR_V) {
                                CopyPoint(ppMatrixSetSS0[index]->data[0][0], info->pSwatchCorner[ATTR_V][1][0]);
                            } else {
                                CopyPoint(ppMatrixSetSS0[index]->data[0][0], info->pSwatchCorner[ATTR_N][1][0]);
                            }
                        }
                        ExtractUCurve(info, (*quadInfo->pSwatchUEnd)[index], ppMatrixSetSS0[index]);

                    }
                }
            }
        }

        // avoid strip when degenerate regular grid (have only bottom stitch)
        // and avoid degenerate strip at top of regular grid
        if (!degen) {

            int i;
            HOS_NOTE("Begin Curve");
            pPush = pDevice->StartPush(CountLoopPushes(info));
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_STRIP_CURVE);
            pPush += 2;
            for (index = 0; index < info->maxAttr; index++) {
                if (info->evalEnables & (1 << index)) {
                    //if this is a not a new swath... do we pre adjust that row??? or just not send the last row in the previous patch?
                    for (i = 0; i < ppMatrixSetSS0[index]->columns; i++) {
                        HOS_NOTE("Set Curve Coefficients");
                        PushCount(pPush, NV097_SET_CURVE_COEFFICIENTS(0), 4);
                        *(pPush + 1) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][0]);
                        *(pPush + 2) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][1]);
                        *(pPush + 3) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][2]);
                        *(pPush + 4) = VIEW_AS_DWORD(ppMatrixSetSS0[index]->data[0][i][3]);
                        pPush += 5;
                    }
                }
            }
            Push1(pPush, NV097_SET_BEGIN_END_CURVE, NV097_SET_BEGIN_END_CURVE_CMD_END_CURVE_DATA);
            pDevice->EndPush(pPush + 2);
        }
        pTemp = pOut1;
        pOut1 = pOut2;
        pOut2 = pTemp;
        pCurvesTemp = pCurvesTop;
        pCurvesTop = pCurvesBot;
        pCurvesBot = pCurvesTemp;
    }

    HOS_NOTE("End Swatch");
    pPush = pDevice->StartPush();
    Push1(pPush, NV097_SET_BEGIN_END_SWATCH, NV097_SET_BEGIN_END_SWATCH_SWATCH_CMD_END);
    pDevice->EndPush(pPush + 2);

    quadInfo->pCurvesTop = pCurvesTop;
    quadInfo->pCurvesBot = pCurvesBot;
    quadInfo->pOut1 = pOut1;
    quadInfo->pOut2 = pOut2;

    return retVal;
}


void DrawAllPatchTransitions(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo,
            FDCurveAttrSet **ppSetU0, FDCurveAttrSet **ppSetU1, FDCurveAttrSet **ppSetUInner, FDCurveAttrSet **ppSetUInnerFrac,
            FDCurveAttrSet **ppSetV0, FDCurveAttrSet **ppSetV1, FDCurveAttrSet **ppSetVInner, FDCurveAttrSet **ppSetVInnerFrac)
{
    FDCurveAttrSet **ppCurvesOut, **ppCurvesInner;

    if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
        int index;

        for (index = 0; index < info->maxAttr; index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }

            //These are INNER TRANSITION ENDPOINTS -- we are storing them in the grid corners
            //slot because they are free and the original data there won't be needed anymore
            //ffCopyCurve(info, &info->tempCurve, quadInfo->pU1[index]);
            CopyCurve(info, &info->tempCurve, (*ppSetU1[0])[index]);
            OffsetCurve(info, &info->tempCurve, 1);
            CopyPoint(info->gridCorner[index][1][0], (float*)&info->tempCurve.coeffs[0]);

            //ffCopyCurve(info, &info->tempCurve, quadInfo->pV1[index]);
            CopyCurve(info, &info->tempCurve, (*ppSetV1[0])[index]);
            OffsetCurve(info, &info->tempCurve, 1);
            CopyPoint(info->gridCorner[index][0][1], (float*)&info->tempCurve.coeffs[0]);
        }

        // do initial stitches for FRAC : RIGHT/TOP/LEFT
        nvAssert(quadInfo->v1Dir == quadInfo->vMaxDir);
        nvAssert(quadInfo->u1Dir == quadInfo->uMaxDir);

        // TOP/RIGHT/BOTTOM/LEFT
        // DCR HW must      *---*-----------*
        // render FRAC      |   |    0     /|
        // stitches in      |   *---------* |
        // order TOP /      |   |         | |
        // RIGHT / BOTTOM   | 3 |         |1|
        // LEFT             |   |         | |
        //                  |  _*---------*-*
        //                  |_/      2      |
        //                  *---------------*
        if (quadInfo->nu1 < quadInfo->nv1) {
ASSERT(0);
            // this should not happen because we call MaybeTransposeFlipQuad() to
            // make nu1 >= nv1
            // Mostly this is an optimization, but it may be that
            // HW requires a transpose of the transitions when we are in a degenerate grid case.
        }

        {
            // TOP
            {
                if (quadInfo->uMaxSegs > 1 && quadInfo->vMaxSegs > 1) {
                    ppCurvesOut = ppSetU1;
                    ppCurvesInner = ppSetUInnerFrac;
                    DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner,
                        quadInfo->uMaxSegs, quadInfo->uMaxSegs,
                        quadInfo->pOut1, quadInfo->pOut2,
                        1, quadInfo->uMaxDir,  // for forcing regular grid corners
                        1, quadInfo->u1Dir,    // for guard corners[][]
                        0, 1,                  // stitchLowOut, stitchHighOut,
                        0, 1,                  // stitchLowIn, stitchHighIn,
                        quadInfo->u1Dir, quadInfo->u0Dir, quadInfo->uMaxDir,
                        quadInfo->u1Dir, 1 ^ quadInfo->u1Dir, LAST_ROW);
                }
            }

            // RIGHT
            {
                if (quadInfo->uMaxSegs > 1 && quadInfo->vMaxSegs > 1) {
                    ppCurvesOut = ppSetV1;
                    ppCurvesInner = ppSetVInnerFrac;
                    //don't render a bottom transition if degenerate regular grid

                    DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMaxSegs, quadInfo->vMaxSegs,
                        quadInfo->pOut1, quadInfo->pOut2,
                        quadInfo->vMaxDir, 1,   // for forcing regular grid corners
                        quadInfo->v1Dir, 1,     // for guard corners[][]
                        0, 1,                   // stitchLowOut, stitchHighOut,
                        0, 1,                   // stitchLowIn, stitchHighIn,
                        quadInfo->v1Dir, quadInfo->v0Dir, quadInfo->vMaxDir,
                        1 ^ quadInfo->v1Dir, 1 ^ quadInfo->v1Dir, LAST_COL);
                }
            }

            // BOT
            if (quadInfo->stitchBottom) {
                ppCurvesOut = ppSetU0;
                if (quadInfo->vMaxSegs != 2) {
                    ppCurvesInner = ppSetUInner;
                } else {
                    ppCurvesInner = ppSetUInnerFrac;
                }

                DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->uMinSegs, quadInfo->uMaxSegs,
                    quadInfo->pOut1, quadInfo->pOut2,
                    0, quadInfo->uMaxDir,   // for forcing regular grid corners
                    0, quadInfo->u0Dir,     // for guard corners[][]
                    quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUBegin : quadInfo->stitchUEnd,   // stitchLowOut
                    quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUEnd : quadInfo->stitchUBegin,   // stitchHighOut
                    quadInfo->stitchUBegin, quadInfo->stitchUEnd,   // stitchLowIn, stitchHighIn,
                    quadInfo->u0Dir, quadInfo->u1Dir, quadInfo->uMaxDir,
                    1 ^ quadInfo->u0Dir, quadInfo->u0Dir, FIRST_ROW);
            }

            // LEFT
            //ffif (quadInfo->stitchLeft && ((quadInfo->vMaxSegs > 1) || (quadInfo->uMaxSegs == 1)))
            if (quadInfo->stitchLeft)
            {
                ppCurvesOut = ppSetV0;
                ppCurvesInner = ppSetVInner;

                DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMinSegs, quadInfo->vMaxSegs,
                    quadInfo->pOut1, quadInfo->pOut2,
                    quadInfo->vMaxDir, 0,   // for forcing regular grid corners
                    quadInfo->v0Dir, 0,     // for guard corners[][]
                    quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVBegin : quadInfo->stitchVEnd,   // stitchLowOut
                    quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVEnd : quadInfo->stitchVBegin,   // stitchHighOut
                    quadInfo->stitchVBegin, quadInfo->stitchVEnd,   // stitchLowIn, stitchHighIn,
                    quadInfo->v0Dir, quadInfo->v1Dir, quadInfo->vMaxDir,
                    quadInfo->v0Dir, quadInfo->v0Dir, FIRST_COL );
            }
        }

        return;
    }

    // HW INT Transitions must be rendered in order TOP/RIGHT/BOTTOM/LEFT
    if (quadInfo->stitchVEnd) {
        if (quadInfo->stitchTop) {
            ppCurvesOut = ppSetU1;
            ppCurvesInner = ppSetUInner;
            DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->uMinSegs, quadInfo->uMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                1, quadInfo->uMaxDir,   // for forcing regular grid corners
                1, quadInfo->u1Dir,     // for guard corners[][]
                quadInfo->u1Dir == quadInfo->uMaxDir ? quadInfo->stitchUBegin : quadInfo->stitchUEnd,   // stitchLowOut
                quadInfo->u1Dir == quadInfo->uMaxDir ? quadInfo->stitchUEnd : quadInfo->stitchUBegin,   // stitchHighOut
                quadInfo->stitchUBegin, quadInfo->stitchUEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->u1Dir, quadInfo->u0Dir, quadInfo->uMaxDir,
                quadInfo->u1Dir, 1 ^ quadInfo->u1Dir, LAST_ROW);
        } else {
            ppCurvesOut = ppSetU0;
            ppCurvesInner = ppSetUInner;
            DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->uMinSegs, quadInfo->uMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                0, quadInfo->uMaxDir,   // for forcing regular grid corners
                0, quadInfo->u0Dir,     // for guard corners[][]
                quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUBegin : quadInfo->stitchUEnd,   // stitchLowOut
                quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUEnd : quadInfo->stitchUBegin,   // stitchHighOut
                quadInfo->stitchUBegin, quadInfo->stitchUEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->u0Dir, quadInfo->u1Dir, quadInfo->uMaxDir,
                1 ^ quadInfo->u0Dir, quadInfo->u0Dir, LAST_ROW);
        }
    }

    if (quadInfo->stitchUEnd) {
        if (quadInfo->stitchRight) {
            ppCurvesOut = ppSetV1;
            ppCurvesInner = ppSetVInner;
            DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMinSegs, quadInfo->vMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                quadInfo->vMaxDir, 1,   // for forcing regular grid corners
                quadInfo->v1Dir, 1,     // for guard corners[][]
                quadInfo->v1Dir == quadInfo->vMaxDir ? quadInfo->stitchVBegin : quadInfo->stitchVEnd,   // stitchLowOut
                quadInfo->v1Dir == quadInfo->vMaxDir ? quadInfo->stitchVEnd : quadInfo->stitchVBegin,   // stitchHighOut
                quadInfo->stitchVBegin, quadInfo->stitchVEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->v1Dir, quadInfo->v0Dir, quadInfo->vMaxDir,
                1 ^ quadInfo->v1Dir, 1 ^ quadInfo->v1Dir, LAST_COL);
        } else {
            ppCurvesOut = ppSetV0;
            ppCurvesInner = ppSetVInner;
            DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMinSegs, quadInfo->vMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                quadInfo->vMaxDir, 0,   // for forcing regular grid corners
                quadInfo->v0Dir, 0,     // for guard corners[][]
                quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVBegin : quadInfo->stitchVEnd,   // stitchLowOut
                quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVEnd : quadInfo->stitchVBegin,   // stitchHighOut
                quadInfo->stitchVBegin, quadInfo->stitchVEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->v0Dir, quadInfo->v1Dir, quadInfo->vMaxDir,
                quadInfo->v0Dir, quadInfo->v0Dir, LAST_COL);
        }
    }

    if (quadInfo->stitchVBegin) {
        if (quadInfo->stitchBottom) {
            ppCurvesOut = ppSetU0;
            ppCurvesInner = ppSetUInner;
            DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->uMinSegs, quadInfo->uMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                0, quadInfo->uMaxDir,   // for forcing regular grid corners
                0, quadInfo->u0Dir,     // for guard corners[][]
                quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUBegin : quadInfo->stitchUEnd,   // stitchLowOut
                quadInfo->u0Dir == quadInfo->uMaxDir ? quadInfo->stitchUEnd : quadInfo->stitchUBegin,   // stitchHighOut
                quadInfo->stitchUBegin, quadInfo->stitchUEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->u0Dir, quadInfo->u1Dir, quadInfo->uMaxDir,
                1 ^ quadInfo->u0Dir, quadInfo->u0Dir, FIRST_ROW);
        } else {
            ppCurvesOut = ppSetU1;
            ppCurvesInner = ppSetUInner;
            DrawIntStitch(1, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->uMinSegs, quadInfo->uMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                1, quadInfo->uMaxDir,   // for forcing regular grid corners
                1, quadInfo->u1Dir,     // for guard corners[][]
                quadInfo->u1Dir == quadInfo->uMaxDir ? quadInfo->stitchUBegin : quadInfo->stitchUEnd,   // stitchLowOut
                quadInfo->u1Dir == quadInfo->uMaxDir ? quadInfo->stitchUEnd : quadInfo->stitchUBegin,   // stitchHighOut
                quadInfo->stitchUBegin, quadInfo->stitchUEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->u1Dir, quadInfo->u0Dir, quadInfo->uMaxDir,
                quadInfo->u1Dir, 1 ^ quadInfo->u1Dir, FIRST_ROW);
        }
    }

    if (quadInfo->stitchUBegin) {
        if (quadInfo->stitchLeft) {
            ppCurvesOut = ppSetV0;
            ppCurvesInner = ppSetVInner;
            DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMinSegs, quadInfo->vMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                quadInfo->vMaxDir, 0,   // for forcing regular grid corners
                quadInfo->v0Dir, 0,     // for guard corners[][]
                quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVBegin : quadInfo->stitchVEnd,   // stitchLowOut
                quadInfo->v0Dir == quadInfo->vMaxDir ? quadInfo->stitchVEnd : quadInfo->stitchVBegin,   // stitchHighOut
                quadInfo->stitchVBegin, quadInfo->stitchVEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->v0Dir, quadInfo->v1Dir, quadInfo->vMaxDir,
                quadInfo->v0Dir, quadInfo->v0Dir, FIRST_COL);
        } else {
            ppCurvesOut = ppSetV1;
            ppCurvesInner = ppSetVInner;
            DrawIntStitch(0, info, quadInfo, ppCurvesOut, ppCurvesInner, quadInfo->vMinSegs, quadInfo->vMaxSegs,
                quadInfo->pOut1, quadInfo->pOut2,
                quadInfo->vMaxDir, 1,   // for forcing regular grid corners
                quadInfo->v1Dir, 1,     // for guard corners[][]
                quadInfo->v1Dir == quadInfo->vMaxDir ? quadInfo->stitchVBegin : quadInfo->stitchVEnd,   // stitchLowOut
                quadInfo->v1Dir == quadInfo->vMaxDir ? quadInfo->stitchVEnd : quadInfo->stitchVBegin,   // stitchHighOut
                quadInfo->stitchVBegin, quadInfo->stitchVEnd,   // stitchLowIn, stitchHighIn,
                quadInfo->v1Dir, quadInfo->v0Dir, quadInfo->vMaxDir,
                1 ^ quadInfo->v1Dir, 1 ^ quadInfo->v1Dir, FIRST_COL);
        }
    }
}

/*****************************************************************************/
// For given GuardSet ptr, and attrib, point to the curve for the attribute
inline NV_PATCH_CURVE_INFO *
pGuardSetCurve(NV_PATCH_INFO *info, FDCurveAttrSet *pBase, int attribIndex)
{
    nvAssert(attribIndex < info->maxAttr);
    return (*pBase)[attribIndex];
}

// draw series of sub-patches in swaths.
// General algorithm:
//  1) high level code computes for "normal" step sizes. This is to optimize
//      for smaller cases where swathing is not needed.
//      XXX TODO: have step size be a parameter to high-level setup and
//      XXX prepare directly to required step sizes.
//  2) This routine converts matrices and curves to stepping by 'maxSwatch'
//  3) guard curves and other info is set up stepping around the patch
//      using the larger maxSwatch steps.
//  4) curves and matrices are converted to the smaller step size as needed
//      and passed to DrawIntPatchGrid()
//  5) DrawAllPatchTransitions() is used to draw all transitions
//
// swaths are drawn in col-major order
//
// swatch stepping algorithm:
//          FOR EACH BIG COL
//              horz step BB0 to BB1
//              cvt BB0 to BS0 (in place, BB0 not needed any more)
//              extract BV1 from BB1
//
//              pUL points into BS0 (will be correct when ready for EACH SMALL ROW)
//              pUR points into BV1 (will be correct when ready for EACH SMALL ROW)
//
//              FOR EACH BIG ROW
//                  extract LL from BS0
//                  cvt BS0 to SS0
//                  extract SU0 from SS0
//                  extract SV0 from SS0
//
//                  step BS0 vert (whole matrix, but on last row may just step COL to get UL point)
//                  // note: pUL now points to UL
//
//                  extract LR from BV1
//                  cvt BV1 to SV1
//                  step BV1
//                  // note: pUR now points to UR
//
//                  FOR EACH SMALL ROW
//                      extract SH0 row from SS0 (send to HW, or EvalStrip for SW emulation)
//                      if not last row then step SS0 vert
//

unsigned int DrawIntPatchSwaths(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDMatrix **matrices)
{
    NV_PATCH_QUAD_INFO  sQuadInfo = *quadInfo;      // swatch quad info
    NV_PATCH_QUAD_INFO  *quadInfoOrig = quadInfo;
    unsigned int retVal = NV_PATCH_EVAL_OK;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int onRow, onCol, index;
    int nSwatchU, nSwatchV;
    int stitch_nSwatchU, stitch_nSwatchV;

    // each original guard curve is stepped 'maxSwatch' steps,
    // and intermediate big step curves are stored in a "GuardSet"
    // These get used once while drawing the regular grid,
    // and again when drawing the transition stitches.
    // Each GuardSet is an array of ptrs to info for each big step.
    // pp means ptr to ptr
    FDCurveAttrSet **ppGuardSetU0;  // pp to curves per attribute
    FDCurveAttrSet **ppGuardSetU1;  // [maxAttr][maxOrder][4]
    FDCurveAttrSet **ppGuardSetV0;  // ...
    FDCurveAttrSet **ppGuardSetV1;
    FDCurveAttrSet **ppGuardSetUInner, **ppGuardSetVInner;
    FDCurveAttrSet **ppGuardSetUInnerFrac, **ppGuardSetVInnerFrac;
    FDCurveAttrSet **ppGuardSetUBegin, **ppGuardSetUEnd;    // at begin/end of regular grid
    FDCurveAttrSet **ppGuardSetVBegin, **ppGuardSetVEnd;    // at begin/end of regular grid
    FDCurveAttrSet **ppStitchUInner = NULL, **ppStitchVInner = NULL; // inner curves for stitching
    FDCurveAttrSet **ppStitchUInnerFrac = NULL, **ppStitchVInnerFrac = NULL; // inner curves for stitching FRAC patches

    // for doing one swatch
    FDCurveAttrSet guardSetUBegin, guardSetUEnd;
    FDCurveAttrSet guardSetVBegin, guardSetVEnd;

    // variables for stepping around the regular grid in col-major order
    //      U1-->
    //      UL      UR
    //      +-------+
    //      |       |
    //    ^ |       | ^     <--- one swatch
    //    | |       | |
    //    | |       | |
    //   V0 +-------+ V1
    //      LL      LR
    //      U0-->

    // matrix names have letters B and S to indicate big vs small steps in Vert and Horz directions
    FDMatrixAttrSet *pBB0;          // ptr to FD matrixSet at LL, Big steps Up and Right
    FDMatrixAttrSet *pBB1;          // ptr to FD matrixSet at LR, Big steps Up and Right
    FDMatrixAttrSet *pTempMatrix;   // for ptr swap
    FDMatrixAttrSet matrix0, matrix1;   // actual set of ptrs to matrix set
    FDMatrixAttrSet *pBS0;              // FD matrix at LL, Big steps Up, Small steps Right
    FDMatrixAttrSet SS0;                // ptrs to inner loop FD Matrices, small steps Up and Right

    int needBV0;
    FDCurveAttrSet  BV0;    // curve from LL to UL, for UInner curve list, big steps
    FDCurveAttrSet  SV0;    // curve from LL to UL, for UInner curve list, small steps
    FDCurveAttrSet  BV1;    // curve from LR to UR, for UInner curve list, big steps
    FDCurveAttrSet  SV1;    // curve from LR to UR, for UInner curve list, small steps
    FDCurveAttrSet  *pBV1;  // ptr to current BV1 (maybe really SV1, but only used to get start point)
    FDCurveAttrSet  *pSV1;  // ptr to current SV1

    float LL[4], LR[4];                         // vertex: for extracting from BS0 and BV1
    float *pLL, *pLR, *pUL, *pUR;               // vertex: ptr to swatch corner points
    float LLnor[4], LRnor[4];                   // normal: for extracting from BS0 and BV1
    float *pLLnor, *pLRnor, *pULnor, *pURnor;   // ptr to swatch corner points

    int bytesGuardCurve = EV_ROUND(PATCH_CURVE_HEADER_SIZE + (info->maxOrder * 4) * sizeof(float));   // truncated NV_PATCH_CURVE_INFO
    int bytesGuardCurveAllAttr = info->nAttr * bytesGuardCurve;                 // just the set of curve info

    EV_ALLOC_DECL();
    int nBytes;

    if (doFrac) {
        // The max for nSwatchU/V is not the whole story. The minSegs for the transitions
        // may actually have more steps in the frac case.
        // This is also complicated by the fact that for TRI FRAC, when drawing the 
        // third sub-QUAD-FRAC, the U and V get transposed.
        // So, recalc here according to min/max
        int uMax = MAX(quadInfo->uMinSegs, quadInfo->uMaxSegs);
    
        int vMax = MAX(quadInfo->vMinSegs, quadInfo->vMaxSegs);

        // calc values including end stitch
        stitch_nSwatchU = (uMax - 1) / info->maxSwatch + 1;
        stitch_nSwatchV = (vMax - 1) / info->maxSwatch + 1;
    } else {
        stitch_nSwatchU = info->nSwatchU;
        stitch_nSwatchV = info->nSwatchV;
    }

    // use local quadInfo
    quadInfo = &sQuadInfo;
    quadInfo->needUInner = quadInfoOrig->needUInner;
    quadInfo->needVInner = quadInfoOrig->needVInner;

    // allocating full 16 attr's, 16 order, 1000x1000 steps, 16 maxSwatch, 2 Grid FDMatrix columns --> 9.4 Mbytes
    // 4 order --> 8.3 Mbytes
    // and 2 attr --> 1.0 Mbytes

    nBytes =  EV_ROUND(info->maxAttr * sizeof(NV_PATCH_CURVE_INFO *)); // for ppGuardSet's, for U and V   
    nBytes += bytesGuardCurveAllAttr;                                                   
    nBytes *= (stitch_nSwatchU+1 + stitch_nSwatchV+1);
    nBytes += EV_ROUND((stitch_nSwatchU+1)*sizeof(FDCurveAttrSet *));
    nBytes += EV_ROUND((stitch_nSwatchV+1)*sizeof(FDCurveAttrSet *));
    nBytes *= (doFrac ? 4 : 3);    
    nBytes += 6 * bytesGuardCurveAllAttr;                                                           // guards for current swatch
    nBytes += info->nAttr * sizeof(FDMatrix) * (3);                                                 // matrix0,1 and SS0
    nBytes += info->nAttr * bytesGuardCurve * (4);                                                  // BV0, BV1, SV0, SV1
    
    EV_ALLOC_INIT_WITH_CACHE(info->context, nBytes, drawIntPatchSwathsEnd, info->pCache[EV_CACHE_SWATHING]);

    nBytes = EV_ROUND((stitch_nSwatchU+1) * sizeof(FDCurveAttrSet *));
    EV_ALLOC(ppGuardSetU0,     info->context, nBytes );
    EV_ALLOC(ppGuardSetU1,     info->context, nBytes);
    EV_ALLOC(ppGuardSetUInner, info->context, nBytes);
    if (doFrac) {
        EV_ALLOC(ppGuardSetUInnerFrac, info->context, nBytes);
    }
    
    nBytes = EV_ROUND((stitch_nSwatchV+1) * sizeof(FDCurveAttrSet *));
    EV_ALLOC(ppGuardSetV0,     info->context, nBytes);
    EV_ALLOC(ppGuardSetV1,     info->context, nBytes);
    EV_ALLOC(ppGuardSetVInner, info->context, nBytes);
    if (doFrac) {
        EV_ALLOC(ppGuardSetVInnerFrac, info->context, nBytes);
    }

    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1 << index))) {
            continue;
        }
        EV_ALLOC(quadInfo->pU0[index], info->context, bytesGuardCurve);
        EV_ALLOC(quadInfo->pU1[index], info->context, bytesGuardCurve);
        EV_ALLOC(quadInfo->pV0[index], info->context, bytesGuardCurve);
        EV_ALLOC(quadInfo->pV1[index], info->context, bytesGuardCurve);
        EV_ALLOC(quadInfo->pUInner[index], info->context, bytesGuardCurve);
        EV_ALLOC(quadInfo->pVInner[index], info->context, bytesGuardCurve);

        EV_ALLOC(matrix0[index], info->context, sizeof(FDMatrix));
        EV_ALLOC(matrix1[index], info->context, sizeof(FDMatrix));
        EV_ALLOC(SS0[index], info->context, sizeof(FDMatrix));

        EV_ALLOC(BV0[index], info->context, bytesGuardCurve);
        EV_ALLOC(BV1[index], info->context, bytesGuardCurve);
        EV_ALLOC(SV0[index], info->context, bytesGuardCurve);
        EV_ALLOC(SV1[index], info->context, bytesGuardCurve);
    }
    quadInfo->pSwatchVBegin = &guardSetVBegin;
    quadInfo->pSwatchVEnd = &guardSetVEnd;

    // set up sets of guard curves for each big step
    // init pointers to guard sub-curves for each big step
    nBytes = EV_ROUND(info->maxAttr * sizeof(NV_PATCH_CURVE_INFO *));
    for (onCol = 0;  onCol <= stitch_nSwatchU;  onCol++) {
        EV_ALLOC(ppGuardSetU0[onCol], info->context, nBytes);
        EV_ALLOC(ppGuardSetU1[onCol], info->context, nBytes);
        EV_ALLOC(ppGuardSetUInner[onCol], info->context, nBytes);
        if (doFrac) {
            EV_ALLOC(ppGuardSetUInnerFrac[onCol], info->context, nBytes);
        }

        for (index = 0; index < info->maxAttr; index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }
            EV_ALLOC((*ppGuardSetU0[onCol])[index], info->context, bytesGuardCurve);
            EV_ALLOC((*ppGuardSetU1[onCol])[index], info->context, bytesGuardCurve);
            EV_ALLOC((*ppGuardSetUInner[onCol])[index], info->context, bytesGuardCurve);
            if (doFrac) {
                EV_ALLOC((*ppGuardSetUInnerFrac[onCol])[index], info->context, bytesGuardCurve);
                if (!onCol) {
                    // XXX maybe just point to this
                    CopyCurve(info, (*ppGuardSetUInnerFrac[0])[index], (*info->ppGuardSetUInnerFrac[0])[index]);
                }
            }
        }
    }

    // again for V
    nBytes = EV_ROUND(info->maxAttr * sizeof(NV_PATCH_CURVE_INFO *));
    for (onRow = 0;  onRow <= stitch_nSwatchV;  onRow++) {
        EV_ALLOC(ppGuardSetV0[onRow], info->context, nBytes);
        EV_ALLOC(ppGuardSetV1[onRow], info->context, nBytes);
        EV_ALLOC(ppGuardSetVInner[onRow], info->context, nBytes);
        if (doFrac) {
            EV_ALLOC(ppGuardSetVInnerFrac[onRow], info->context, nBytes);
        }

        for (index = 0; index < info->maxAttr; index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }
            EV_ALLOC((*ppGuardSetV0[onRow])[index], info->context, bytesGuardCurve);
            EV_ALLOC((*ppGuardSetV1[onRow])[index], info->context, bytesGuardCurve);
            EV_ALLOC((*ppGuardSetVInner[onRow])[index], info->context, bytesGuardCurve);
            if (doFrac) {
                EV_ALLOC((*ppGuardSetVInnerFrac[onRow])[index], info->context, bytesGuardCurve);
                if (!onRow) {
                    // XXX maybe just point to this
                    CopyCurve(info, (*ppGuardSetVInnerFrac[0])[index], (*info->ppGuardSetVInnerFrac[0])[index]);
                }
            }
        }
    }
    EV_ALLOC_FULL(info->context);

    /*****************************************************************************/
    // This code is analogous to code in DrawIntPatch() to calc quadInfo->guard[i]->pGuardXXX
    // BEGIN SIMILAR CODE
    if (quadInfo->vMaxDir == 1) {
        if (quadInfo->stitchTop) {
            ppGuardSetUBegin = ppGuardSetU0;
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUEnd = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUEnd = ppGuardSetU0;
                ppStitchUInner = ppGuardSetU0;
            }
        } else if (quadInfo->stitchBottom) {
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUBegin = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUBegin = ppGuardSetU1;
                ppStitchUInner = ppGuardSetU1;
            }
            ppGuardSetUEnd = ppGuardSetU1;
        } else {
            ppGuardSetUBegin = ppGuardSetU0;
            ppStitchUInner = NULL;
            ppGuardSetUEnd = ppGuardSetU1;
        }
    } else {
        if (quadInfo->stitchTop) {
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUBegin = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUBegin = ppGuardSetU0;
                ppStitchUInner = ppGuardSetU0;
            }
            ppGuardSetUEnd = ppGuardSetU0;
        } else if (quadInfo->stitchBottom) {
            ppGuardSetUBegin = ppGuardSetU1;
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUEnd = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUEnd = ppGuardSetU1;
                ppStitchUInner = ppGuardSetU1;
            }
        } else {
            ppGuardSetUBegin = ppGuardSetU1;
            ppStitchUInner = NULL;
            ppGuardSetUEnd = ppGuardSetU0;
        }
    }

    if (quadInfo->uMaxDir == 1) {
        if (quadInfo->stitchRight) {
            ppGuardSetVBegin = ppGuardSetV0;
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVEnd = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVEnd = ppGuardSetV0;
                ppStitchVInner = ppGuardSetV0;
            }
        } else if (quadInfo->stitchLeft) {
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVBegin = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVBegin = ppGuardSetV1;
                ppStitchVInner = ppGuardSetV1;
            }
            ppGuardSetVEnd = ppGuardSetV1;
        } else {
            ppGuardSetVBegin = ppGuardSetV0;
            ppStitchVInner = NULL;
            ppGuardSetVEnd = ppGuardSetV1;
        }
    } else {
        if (quadInfo->stitchRight) {
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVBegin = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVBegin = ppGuardSetV0;
                ppStitchVInner = ppGuardSetV0;
            }
            ppGuardSetVEnd = ppGuardSetV0;
        } else if (quadInfo->stitchLeft) {
            ppGuardSetVBegin = ppGuardSetV1;
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVEnd = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVEnd = ppGuardSetV1;
                ppStitchVInner = ppGuardSetV1;
            }
        } else {
            ppGuardSetVBegin = ppGuardSetV1;
            ppStitchVInner = NULL;
            ppGuardSetVEnd = ppGuardSetV0;
        }
    }
    if (doFrac) {
        ppStitchUInnerFrac = ppGuardSetUEnd = ppGuardSetUInnerFrac;
        ppStitchVInnerFrac = ppGuardSetVEnd = ppGuardSetVInnerFrac;
    }
    // END SIMILAR CODE

    /*****************************************************************************/
    // calc initial big step U guard curves
    // For now, use BV0, BV1, SV0, SV1  for BU0, BU1, BUInner, BUInnerFrac
    // XXX TODO: one of the outside curves may not require as many steps
    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1 << index))) {
            continue;
        }
        CopyCurve(info, BV0[index], quadInfoOrig->pU0[index]);
        RetessellateFDCurveInOut(info, quadInfo->du0 * info->maxSwatch, quadInfo->du0,
                            quadInfoOrig->pU0[index], pGuardSetCurve(info, ppGuardSetU0[0], index));
        CopyCurve(info, BV1[index], quadInfoOrig->pU1[index]);
        RetessellateFDCurveInOut(info, quadInfo->du0 * info->maxSwatch, quadInfo->du0,
                            quadInfoOrig->pU1[index], pGuardSetCurve(info, ppGuardSetU1[0], index));

        if (quadInfo->needUInner) {
            CopyCurve(info, SV0[index], quadInfoOrig->pUInner[index]);
            RetessellateFDCurveInOut(info, quadInfo->du0 * info->maxSwatch, quadInfo->du0,
                            quadInfoOrig->pUInner[index], pGuardSetCurve(info, ppGuardSetUInner[0], index));
        }
        //ffif (doFrac  &&  EV_GUARD_ATTR(index)) { // }
        if (doFrac) {
            CopyCurve(info, SV1[index], pGuardSetCurve(info, ppGuardSetUInnerFrac[0], index));
            RetessellateFDCurveInOut(info, quadInfo->duMax * info->maxSwatch, quadInfo->duMax, SV1[index],
                                        pGuardSetCurve(info, ppGuardSetUInnerFrac[0], index));
        }
    }

    // make big steps and cvt to small for later
    for (onCol = 1;  onCol <= stitch_nSwatchU;  onCol++) {
        // copy all prev attrs
        memcpy(pGuardSetCurve(info, ppGuardSetU0[onCol], info->firstAttr),
                                pGuardSetCurve(info, ppGuardSetU0[onCol-1], info->firstAttr), 3*bytesGuardCurveAllAttr);
        for (index = 0;  index < info->maxAttr;  index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }
            OffsetCurve(info, BV0[index], 1);
            RetessellateFDCurveInOut(info, quadInfo->du0 * info->maxSwatch, quadInfo->du0, BV0[index],
                            pGuardSetCurve(info, ppGuardSetU0[onCol], index));
            OffsetCurve(info, BV1[index], 1);
            RetessellateFDCurveInOut(info, quadInfo->du1 * info->maxSwatch, quadInfo->du1, BV1[index],
                            pGuardSetCurve(info, ppGuardSetU1[onCol], index));
            if (quadInfo->needUInner && quadInfo->stitchVEnd && (EV_GUARD_ATTR(index))) {
                OffsetCurve(info, SV0[index], 1);
                RetessellateFDCurveInOut(info, quadInfo->duMax * info->maxSwatch, quadInfo->duMax, SV0[index],
                            pGuardSetCurve(info, ppGuardSetUInner[onCol], index));
            }
            //ffif (doFrac  &&  EV_GUARD_ATTR(index)) { // }
            if (doFrac) {
                OffsetCurve(info, SV1[index], 1);
                RetessellateFDCurveInOut(info, quadInfo->duMax * info->maxSwatch, quadInfo->duMax, SV1[index],
                            pGuardSetCurve(info, ppGuardSetUInnerFrac[onCol], index));
            }
        }
    }

    /*****************************************************************************/
    /*****************************************************************************/
    // calc initial big step V guard curves
    // For now, use BV0, BV1, SV0, SV1  for BV0, BV1, BVInner, BVInnerFrac
    // XXX TODO: one of the outside curves may not require as many steps
    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1 << index))) {
            continue;
        }
        CopyCurve(info, BV0[index], quadInfoOrig->pV0[index]);
        RetessellateFDCurveInOut(info, quadInfo->dv0 * info->maxSwatch, quadInfo->dv0,
                            quadInfoOrig->pV0[index], pGuardSetCurve(info, ppGuardSetV0[0], index));
        CopyCurve(info, BV1[index], quadInfoOrig->pV1[index]);
        RetessellateFDCurveInOut(info, quadInfo->dv0 * info->maxSwatch, quadInfo->dv0,
                            quadInfoOrig->pV1[index], pGuardSetCurve(info, ppGuardSetV1[0], index));

        if (quadInfo->needVInner && quadInfo->stitchUEnd) {
            CopyCurve(info, SV0[index], quadInfoOrig->pVInner[index]);
            RetessellateFDCurveInOut(info, quadInfo->dv0 * info->maxSwatch, quadInfo->dv0,
                            quadInfoOrig->pVInner[index], pGuardSetCurve(info, ppGuardSetVInner[0], index));
        }
        if (doFrac) {
            CopyCurve(info, SV1[index], pGuardSetCurve(info, ppGuardSetVInnerFrac[0], index));
            RetessellateFDCurveInOut(info, quadInfo->dvMax * info->maxSwatch, quadInfo->dvMax, SV1[index],
                                        pGuardSetCurve(info, ppGuardSetVInnerFrac[0], index));
        }
    }

    // make big steps and cvt to small for later
    for (onRow = 1;  onRow <= stitch_nSwatchV;  onRow++) {
        // copy all prev attrs
        memcpy(pGuardSetCurve(info, ppGuardSetV0[onRow], info->firstAttr),
                                pGuardSetCurve(info, ppGuardSetV0[onRow-1], info->firstAttr), 3*bytesGuardCurveAllAttr);
        for (index = 0;  index < info->maxAttr;  index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }
            OffsetCurve(info, BV0[index], 1);
            RetessellateFDCurveInOut(info, quadInfo->dv0 * info->maxSwatch, quadInfo->dv0, BV0[index],
                            pGuardSetCurve(info, ppGuardSetV0[onRow], index));
            OffsetCurve(info, BV1[index], 1);
            RetessellateFDCurveInOut(info, quadInfo->dv1 * info->maxSwatch, quadInfo->dv1, BV1[index],
                            pGuardSetCurve(info, ppGuardSetV1[onRow], index));
            if (quadInfo->needVInner && quadInfo->stitchUEnd) {
                OffsetCurve(info, SV0[index], 1);
                RetessellateFDCurveInOut(info, quadInfo->dvMax * info->maxSwatch, quadInfo->dvMax, SV0[index],
                            pGuardSetCurve(info, ppGuardSetVInner[onRow], index));
            }
            if (doFrac) {
                OffsetCurve(info, SV1[index], 1);
                RetessellateFDCurveInOut(info, quadInfo->dvMax * info->maxSwatch, quadInfo->dvMax, SV1[index],
                            pGuardSetCurve(info, ppGuardSetVInnerFrac[onRow], index));
            }
        }
    }

    /*****************************************************************************/
    // work on regular grid

    // calc swaths WITHOUT including ending stitch
    index = 1 + doFrac; // temp // adjust to not draw FRAC RIGHT and TOP stitch
    nSwatchU = (quadInfo->uMaxSegs - index - quadInfo->stitchUEnd) / info->maxSwatch + 1;
    nSwatchV = (quadInfo->vMaxSegs - index - quadInfo->stitchVEnd) / info->maxSwatch + 1;
    if (!doFrac) {
        // note: for FRAC cases, the quadInfo->uMaxSegs used at this point can be
        // quite different than the full MAX calculated in evalCommonSetup()
        // Therefore, the following is only generally true for INT cases.
        nvAssert((stitch_nSwatchU - nSwatchU) <= 1);
    }

    // convert small to big steps for starting matrix BB0
    pBB0 = &matrix0;
    pBB1 = &matrix1;

    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1 << index))) {
            continue;
        }
        CopyMatrix(info, (*pBB0)[index], matrices[index]);
    }

    // tag:sss swathing loop
    for (onCol = 0;  onCol < nSwatchU;  onCol++) {
        int rem, makeSV1 = 0;

        pLL = LL;
        pLR = LR;
        pLLnor = LLnor;
        pLRnor = LRnor;

        CopyMatrixSet(info, info->evalEnables, pBB1, pBB0);     // horz step BB0 to BB1
        OffsetFDMatrixSet(info, info->evalEnables, pBB1, 1, 0); // ...

        // cvt BB0 to BS0 (in place)
        pBS0 = pBB0;
        RetessellateFDMatrixSet(info, info->evalEnables,
                                        quadInfo->du0 * info->maxSwatch, 1.f,
                                        quadInfo->du0,                   1.f, pBS0);

        // if no left stitch, then BV0 may be extracted from BS0,
        // otherwise must create and step BV0 and SV0
        needBV0 = !onCol && quadInfoOrig->stitchUBegin;
        if (needBV0) {
            CopyMatrixSet(info, info->evalEnables, (FDMatrixAttrSet *)info->ppMatrixSetSS0, pBS0);
            // XXX: steps of '1'-and-never-more can be done with short-cut
            OffsetFDMatrixSet(info, info->evalEnables, (FDMatrixAttrSet *)info->ppMatrixSetSS0, 1, 0);
            ExtractVCurveSet(info, info->evalEnables, &BV0, (FDMatrixAttrSet *)info->ppMatrixSetSS0);
        }

        if (onCol != (nSwatchU-1)) {
            makeSV1 = 1;
            ExtractVCurveSet(info, info->evalEnables, &BV1, pBB1);  // extract BV1 from BB1
            pBV1 = &BV1;
            pSV1 = &SV1;
        } else {
            makeSV1 = 0;
            pBV1 = pSV1 = ppGuardSetVEnd[0];
        }

        if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
            pUL = (*pBS0)[ATTR_V]->data[0][0];
        }
        if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
            pULnor = (*pBS0)[ATTR_N]->data[0][0];
        }

        for (onRow = 0;  onRow < nSwatchV;  onRow++) {
            int needUL = 0;
            int needLL = 0;

            // prepare matrices and curves for this swatch
            CopyMatrixSet(info, info->evalEnables, &SS0, pBS0);
            RetessellateFDMatrixSet(info, info->evalEnables,
                                        1.f, quadInfo->dv0 * info->maxSwatch,
                                        1.f, quadInfo->dv0,                   &SS0);

            OffsetFDMatrixSet(info, info->evalEnables, pBS0, 0, 1); // up to next row
            // now pUL points to UL

            if (makeSV1) {
                retVal |= RetessellateFDCurveSetInOut(info, info->evalEnables,
                                        quadInfo->dv0 * info->maxSwatch, quadInfo->dv0, &BV1, &SV1);
                OffsetCurveSet(info, info->evalEnables & EV_GUARD_BITS, &BV1, 1);
                // now pUR points to UR

            } else {
                pBV1 = ppGuardSetVEnd[onRow+1];
                pSV1 = ppGuardSetVEnd[onRow];
            }

            if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                pLR = (*pSV1)[ATTR_V]->coeffs[0];
                pUR = (*pBV1)[ATTR_V]->coeffs[0];
            }
            if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                pLRnor = (*pSV1)[ATTR_N]->coeffs[0];
                pURnor = (*pBV1)[ATTR_N]->coeffs[0];
            }

            if (needBV0) {
                // BV0-->SV0 will be saved away for VInner transition curve set
                retVal |= RetessellateFDCurveSetInOut(info, info->evalEnables,
                                        quadInfo->dv0 * info->maxSwatch, quadInfo->dv0, &BV0, &SV0);
                OffsetCurveSet(info, info->evalEnables, &BV0, 1);
                CopyCurveSet(info, info->evalEnables, ppGuardSetVBegin[onRow], &SV0);
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    guardSetVBegin[ATTR_V] = (*ppGuardSetVBegin[onRow])[ATTR_V];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    guardSetVBegin[ATTR_N] = (*ppGuardSetVBegin[onRow])[ATTR_N];
                }
            } else if (onCol) {
                // other columns extract SV0 from SS0
                ExtractVCurveSet(info, info->evalEnables & EV_GUARD_BITS, &SV0, &SS0);
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    guardSetVBegin[ATTR_V] = SV0[ATTR_V];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    guardSetVBegin[ATTR_N] = SV0[ATTR_N];
                }
            } else {
                // first column, no transition, get from original V0 curves
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    guardSetVBegin[ATTR_V] = (*ppGuardSetVBegin[onRow])[ATTR_V];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    guardSetVBegin[ATTR_N] = (*ppGuardSetVBegin[onRow])[ATTR_N];
                }
            }
            if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                pLL = guardSetVBegin[ATTR_V]->coeffs[0];
            }
            if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                pLLnor = guardSetVBegin[ATTR_N]->coeffs[0];
            }

            // ***** prepare guard information
            if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                guardSetUBegin[ATTR_V] = NULL;     // assume not used
                //ffguardSetUEnd[ATTR_V] = NULL;       // assume not used
                //ffguardSetVBegin[ATTR_V] = NULL;     // assume not used
                guardSetVEnd[ATTR_V] = NULL;       // assume not used
            }
            if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                guardSetUBegin[ATTR_N] = NULL;       // assume not used
                //ffguardSetUEnd[ATTR_N] = NULL;         // assume not used
                //ffguardSetVBegin[ATTR_N] = NULL;       // assume not used
                guardSetVEnd[ATTR_N] = NULL;         // assume not used
            }

            info->swatchFlags = NV_PATCH_SWATCH;
            info->setGridCorner = 0;

            if (!onCol) {
                info->swatchFlags |= NV_PATCH_SWATCH_FIRST_COL;
                quadInfo->stitchUBegin = quadInfoOrig->stitchUBegin;
                if (!onRow) {
                    info->setGridCorner |= NV_PATCH_SET_GRID_CORNER00;
                }
            } else {
                quadInfo->stitchUBegin = 0;
            }

            for (index = 0; index < info->maxAttr; index++) {
                if (!(info->evalEnables & (1 << index))) {
                    continue;
                }
                //ffif (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                    //ffcontinue;
                //ff}
                guardSetVEnd[index] = (*pSV1)[index];
            }

            if (onCol == (nSwatchU-1)) {
                info->swatchFlags |= NV_PATCH_SWATCH_LAST_COL;
                quadInfo->stitchUEnd = quadInfoOrig->stitchUEnd;

                if (!onRow) {
                    info->setGridCorner |= NV_PATCH_SET_GRID_CORNER01;
                }
            } else {
                quadInfo->stitchUEnd = 0;
            }
// ...
            quadInfo->pSwatchUBegin = NULL;

            if (!onRow) {
                info->swatchFlags |= NV_PATCH_SWATCH_FIRST_ROW;
                quadInfo->stitchVBegin = quadInfoOrig->stitchVBegin;
                quadInfo->pSwatchUBegin = ppGuardSetUBegin[onCol];

            } else {
                quadInfo->stitchVBegin = 0;
            }

            quadInfo->pSwatchUEnd = NULL;
            if (onRow == (nSwatchV-1)) {
                info->swatchFlags |= NV_PATCH_SWATCH_LAST_ROW;
                quadInfo->stitchVEnd = quadInfoOrig->stitchVEnd;
                quadInfo->pSwatchUEnd = ppGuardSetUEnd[onCol];
                if (!onCol) {
                    info->setGridCorner |= NV_PATCH_SET_GRID_CORNER10;
                    // pUL will be set below
                }

                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    pUL = (*ppGuardSetUEnd[onCol  ])[ATTR_V]->coeffs[0];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    pULnor = (*ppGuardSetUEnd[onCol  ])[ATTR_N]->coeffs[0];
                }

                if (onCol==(nSwatchU-1)) {
                    info->setGridCorner |= NV_PATCH_SET_GRID_CORNER11;
                    // UR is obtained below after computing uMaxSegs and vMaxSegs (for FillIntCornerUR)
                } else {
                    if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                        pUR = (*ppGuardSetUEnd[onCol+1])[ATTR_V]->coeffs[0];
                    }
                    if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                        pURnor = (*ppGuardSetUEnd[onCol+1])[ATTR_N]->coeffs[0];
                    }
                }
            } else {
                quadInfo->stitchVEnd = 0;
                // extract top guard curve for sub-patch UEnd, and point to it
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    ExtractUCurve(info, quadInfo->pUInner[ATTR_V], (*pBS0)[ATTR_V]);
                    guardSetUEnd[ATTR_V] = quadInfo->pUInner[ATTR_V];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    ExtractUCurve(info, quadInfo->pUInner[ATTR_N], (*pBS0)[ATTR_N]);
                    guardSetUEnd[ATTR_N] = quadInfo->pUInner[ATTR_N];
                }
                quadInfo->pSwatchUEnd = &guardSetUEnd;

                if (quadInfo->stitchUBegin) {
                    // UL is not at the swatch corner, calc below when safe to assign info->pSwatchCorner[ATTR_V][1][0]
                    needUL = 1;
                }
            }

            quadInfo->uMaxSegs = info->maxSwatch;
            quadInfo->vMaxSegs = info->maxSwatch;
            rem = quadInfoOrig->uMaxSegs - doFrac - quadInfo->stitchUEnd - (onCol + 1) * info->maxSwatch;
            if (rem < 0) {
                quadInfo->uMaxSegs += rem;
            }
            rem = quadInfoOrig->vMaxSegs - doFrac - quadInfo->stitchVEnd - (onRow + 1) * info->maxSwatch;
            if (rem < 0) {
                quadInfo->vMaxSegs += rem;
            }
            quadInfo->uMaxSegs += quadInfo->stitchUEnd;
            quadInfo->vMaxSegs += quadInfo->stitchVEnd;

            info->pSwatchCorner[ATTR_V][0][0] = pLL;
            info->pSwatchCorner[ATTR_V][0][1] = pLR;
            info->pSwatchCorner[ATTR_V][1][0] = pUL;
            info->pSwatchCorner[ATTR_V][1][1] = pUR;

            info->pSwatchCorner[ATTR_N][0][0] = pLLnor;
            info->pSwatchCorner[ATTR_N][0][1] = pLRnor;
            info->pSwatchCorner[ATTR_N][1][0] = pULnor;
            info->pSwatchCorner[ATTR_N][1][1] = pURnor;

            if (info->setGridCorner & NV_PATCH_SET_GRID_CORNER00) {
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    FillIntCornerLL(info, quadInfo, quadInfoOrig, ATTR_V,
                                    info->gridCorner[ATTR_V][  1-quadInfo->vMaxDir][ 1-quadInfo->uMaxDir]);
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    FillIntCornerLL(info, quadInfo, quadInfoOrig, ATTR_N,
                                    info->gridCorner[ATTR_N][  1-quadInfo->vMaxDir][ 1-quadInfo->uMaxDir]);
                }
            }
            if (info->setGridCorner & NV_PATCH_SET_GRID_CORNER01) {
                for (index = 0; index < info->maxAttr; index++) {
                    if (!(info->evalEnables & (1 << index))) {
                        continue;
                    }
                    if (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                        continue;
                    }
                    FillIntCornerLR(info, quadInfo, quadInfoOrig, index,
                                info->gridCorner[index][  1-quadInfo->vMaxDir][   quadInfo->uMaxDir]);
                }
            }

            if (needUL) {
                if (info->evalEnables & EV_GUARD_BIT_VERTEX) {
                    // extract top guard curve for sub-patch UEnd, and point to it
                    ExtractUCurve(info, quadInfo->pUInner[ATTR_V], (*pBS0)[ATTR_V]);
                    OffsetCurve(info, quadInfo->pUInner[ATTR_V], 1);
                    info->pSwatchCorner[ATTR_V][1][0] = quadInfo->pUInner[ATTR_V]->coeffs[0];
                }
                if (info->evalEnables & EV_GUARD_BIT_NORMAL) {
                    // extract top guard curve for sub-patch UEnd, and point to it
                    ExtractUCurve(info, quadInfo->pUInner[ATTR_N], (*pBS0)[ATTR_N]);
                    OffsetCurve(info, quadInfo->pUInner[ATTR_N], 1);
                    info->pSwatchCorner[ATTR_N][1][0] = quadInfo->pUInner[ATTR_N]->coeffs[0];
                }
            }
            if (info->setGridCorner & NV_PATCH_SET_GRID_CORNER10) {
                for (index = 0; index < info->maxAttr; index++) {
                    if (!(info->evalEnables & (1 << index))) {
                        continue;
                    }
                    if (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                        continue;
                    }
                    if (quadInfo->stitchUBegin) {
                        // UL is not at the swatch corner
                        info->pSwatchCorner[index][1][0] =
                                    info->gridCorner[index][    quadInfo->vMaxDir][ 1-quadInfo->uMaxDir];
                        FillIntCornerUL(info, quadInfo, quadInfoOrig, index, info->pSwatchCorner[index][1][0]);
                    } else {
                        if (index == ATTR_V) {
                            CopyPoint(info->gridCorner[ATTR_V][  quadInfo->vMaxDir][ 1-quadInfo->uMaxDir], pUL);
                        }
                        if (index == ATTR_N) {
                            CopyPoint(info->gridCorner[ATTR_N][  quadInfo->vMaxDir][ 1-quadInfo->uMaxDir], pULnor);
                        }
                    }
                }
            }
            if (info->setGridCorner & NV_PATCH_SET_GRID_CORNER11) {
                // UR may not be swatch corner
                for (index = 0; index < info->maxAttr; index++) {
                    if (!(info->evalEnables & (1 << index))) {
                        continue;
                    }
                    //ffif (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                        //ffcontinue;
                    //ff}
                    info->pSwatchCorner[index][1][1] =
                                    info->gridCorner[index][    quadInfo->vMaxDir][   quadInfo->uMaxDir];
                    FillIntCornerUR(info, quadInfo, quadInfoOrig, index, info->pSwatchCorner[index][1][1]);
                }
            }

            // Copy V guard curves
            // Note: must be done after FillIntCorner*() because the start values for
            // the pSwatch curves may be tweaked to match between the regular grid and stitches.
            for (index = 0; index < info->maxAttr; index++) {
                if (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                    continue;
                }
                if (!(info->evalEnables & (1 << index))) {
                    continue;
                }
                CopyCurve(info, info->tempVEnd[index], (*quadInfo->pSwatchVEnd)[index]);
                if (!EV_GUARD_ATTR(index)) {
                    continue;
                }
                CopyCurve(info, info->tempVBegin[index], (*quadInfo->pSwatchVBegin)[index]);
            }

            // call to draw regular grid for each small row
            {
                //cache a ptr to the global patch data inside the subpatch structure.
                if (/* ff (info->flags & NV_PATCH_FLAG_AUTO_NORMAL)    || */
                        (info->evalEnables & 1<<ATTR_N)) { info->swatchFlags |= NV_PATCH_HAS_NORMAL; };

                if ((info->swatchFlags & NV_PATCH_SWATCH_FIRST_ROW) && (info->swatchFlags & NV_PATCH_SWATCH_FIRST_COL)) {
                    ComputeKelvinHOSControlWords(info, quadInfoOrig, info->swatchFlags);
                }

                retVal |= DrawIntPatchGrid(info, quadInfo, &SS0[0]);
            }
        }

        if (needBV0) {
            // complete generation of any inner curves
            for (onRow = nSwatchV;  onRow < stitch_nSwatchV;  onRow++) {
                retVal |= RetessellateFDCurveSetInOut(info, info->evalEnables,
                                        quadInfo->dv0 * info->maxSwatch, quadInfo->dv0, &BV0, &SV0);
                OffsetCurveSet(info, info->evalEnables, &BV0, 1);
                CopyCurveSet(info, info->evalEnables, ppGuardSetVBegin[onRow], &SV0);
            }
        }

        // swap ptrs for next big column
        pTempMatrix = pBB0; pBB0 = pBB1; pBB1 = pTempMatrix;
    }

    if (quadInfoOrig->stitchVBegin) { // now done in U1 setup || (quadInfo->stitchVEnd && (info->evalEnables & ~EV_GUARD_BITS))) { // }
        // last set of curves from regular grid was not written
        // because the regular grid is multiple of swatch size
        int lEnables = info->evalEnables;

        if (quadInfo->stitchVEnd) {
            lEnables = info->evalEnables & ~EV_GUARD_BITS;
        }
        for (onCol = nSwatchU;  onCol < stitch_nSwatchU;  onCol++) {
            //ffCopyMatrixSet(info, lEnables, pBB1, pBB0);     // horz step BB0 to BB1
            //ffOffsetFDMatrixSet(info, lEnables, pBB1, 1, 0); // ...

            // cvt BB0 to BS0 (in place)
            pBS0 = pBB0;
            RetessellateFDMatrixSet(info, lEnables,
                                        quadInfo->du0 * info->maxSwatch, 1.f,
                                        quadInfo->du0,                   1.f, pBS0);

            // prepare matrices for swatch row 0
            CopyMatrixSet(info, lEnables, &SS0, pBS0);
            RetessellateFDMatrixSet(info, lEnables,
                                        1.f, quadInfo->dv0 * info->maxSwatch,
                                        1.f, quadInfo->dv0,                   &SS0);

            if (quadInfoOrig->stitchVBegin) {
                OffsetFDMatrixSet(info, lEnables, &SS0, 0, 1);
                ExtractUCurveSet(info, lEnables, ppGuardSetUBegin[onCol], &SS0);
            } else {
                OffsetFDMatrixSet(info, lEnables, &SS0, 0, quadInfo->vMaxSegs-1);
                ExtractUCurveSet(info, lEnables, ppGuardSetUEnd[onCol], &SS0);
            }

            // swap ptrs for next big column
            //ffpTempMatrix = pBB0; pBB0 = pBB1; pBB1 = pTempMatrix;
        }
    }

    // but restore everything else
    quadInfo = quadInfoOrig;

    DrawAllPatchTransitions(info, quadInfo,
                                    ppGuardSetU0, ppGuardSetU1, ppStitchUInner, ppStitchUInnerFrac,
                                    ppGuardSetV0, ppGuardSetV1, ppStitchVInner, ppStitchVInnerFrac);

    if ((info->swatchFlags & NV_PATCH_SWATCH_LAST_ROW) && (info->swatchFlags & NV_PATCH_SWATCH_LAST_COL)) {
        HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();

        HOS_NOTE("End Patch");
        pPush = pDevice->StartPush();
        Push1(pPush, NV097_SET_END_PATCH, 0);
        pDevice->EndPush(pPush + 2);
    }

drawIntPatchSwathsEnd:
    EV_FREE(ppGuardSetU0, info->context);
    EV_FREE(ppGuardSetU1, info->context);
    EV_FREE(ppGuardSetUInner, info->context);
    EV_FREE(ppGuardSetV0, info->context);
    EV_FREE(ppGuardSetV1, info->context);
    EV_FREE(ppGuardSetVInner, info->context);

    return retVal;
}

unsigned int
DrawIntPatch(NV_PATCH_INFO *info, NV_PATCH_QUAD_INFO *quadInfo, FDMatrix **matrices)
{
    unsigned int retVal = NV_PATCH_EVAL_OK;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int index;

    FDCurveAttrSet curves1, curves2;
    FDCurveAttrSet guardSetU0, guardSetU1, guardSetUInner;
    FDCurveAttrSet guardSetV0, guardSetV1, guardSetVInner;

    FDCurveAttrSet *ppGuardSetU0[1];  // pp to curves per attribute
    FDCurveAttrSet *ppGuardSetU1[1];  // [maxAttr][maxOrder][4]
    FDCurveAttrSet *ppGuardSetV0[1];  // ...
    FDCurveAttrSet *ppGuardSetV1[1];
    FDCurveAttrSet *ppGuardSetUInner[1];
    FDCurveAttrSet *ppGuardSetVInner[1];

    FDCurveAttrSet **ppGuardSetUBegin, **ppGuardSetUEnd;    // at begin/end of regular grid
    FDCurveAttrSet **ppGuardSetVBegin, **ppGuardSetVEnd;    // at begin/end of regular grid
    FDCurveAttrSet **ppStitchUInner = NULL, **ppStitchVInner = NULL; // inner curves for stitching

    EV_ALLOC_DECL();
    int nBytes;
    int bytesGuardCurve = EV_ROUND(PATCH_CURVE_HEADER_SIZE + (info->maxOrder * 4) * sizeof(float));   // truncated NV_PATCH_CURVE_INFO
    int bytesGuardCurveAllAttr = info->nAttr * bytesGuardCurve;                 // just the set of curve info
    HOS_CREATE_AND_ASSIGN_PUSHBUF_LOCALS();


    ppGuardSetU0[0] = &guardSetU0;  // pp to curves per attribute
    ppGuardSetU1[0] = &guardSetU1;  // [maxAttr][maxOrder][4]
    ppGuardSetV0[0] = &guardSetV0;  // ...
    ppGuardSetV1[0] = &guardSetV1;
    ppGuardSetUInner[0] = &guardSetUInner;
    ppGuardSetVInner[0] = &guardSetVInner;

    if (!doFrac) {
        info->reverse = info->reverse ^ (quadInfo->uMaxDir ^ quadInfo->vMaxDir);
    }
    setFrontFace(info, 1 ^ info->reverse);

    nBytes = 0;
    if (nBytes) {
        EV_ALLOC_INIT_WITH_CACHE(info->context, nBytes, drawIntPatchEnd, info->pCache[EV_CACHE_DRAW_SW]);
    }

    for (index = 0; index < info->maxAttr; index++) {
        if (!(info->evalEnables & (1<<index))) {
            continue;
        }

        if (info->swatchFlags & NV_PATCH_SWATCH) {
            continue;
        }

        guardSetU0[index]     = quadInfo->pU0[index];
        guardSetU1[index]     = quadInfo->pU1[index];
        guardSetUInner[index] = quadInfo->pUInner[index];
        guardSetV0[index]     = quadInfo->pV0[index];
        guardSetV1[index]     = quadInfo->pV1[index];
        guardSetVInner[index] = quadInfo->pVInner[index];
    }
    if (nBytes) {
        EV_ALLOC_FULL(info->context);
    }

    if (doFrac) {
        for (index = 0; index < info->maxAttr; index++) {
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }

            //ffif (EV_GUARD_ATTR(index))
            {
                // Calc UInnerFrac
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, matrices[index]);
if (info->swatchFlags & NV_PATCH_SWATCH) {
    RetessellateFDMatrix(info, 1.f, quadInfo->dvMax * info->maxSwatch, 1.f, quadInfo->dvMax, &info->tempMatrix);    // big to small
}
                OffsetFDMatrix_Extract_Discard(info, info->guardSetUInnerFrac[index], 0, &info->tempMatrix, 0, quadInfo->vMaxSegs-1);
            }

            // Calc VInnerFrac
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, matrices[index]);
if (info->swatchFlags & NV_PATCH_SWATCH) {
    RetessellateFDMatrix(info, quadInfo->duMax * info->maxSwatch, 1.f, quadInfo->duMax, 1.f, &info->tempMatrix);    // big to small
}
            OffsetFDMatrix_Extract_Discard(info, info->guardSetVInnerFrac[index], 1, &info->tempMatrix, quadInfo->uMaxSegs-1, 0);
        }
    }

    /*****************************************************************************/
    // This code is analogous to code in DrawIntPatchSwaths() to calc ppGuardXXX
    // BEGIN SIMILAR CODE
    if (quadInfo->vMaxDir == 1) {
        if (quadInfo->stitchTop) {
            ppGuardSetUBegin = ppGuardSetU0;
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUEnd = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUEnd = ppGuardSetU0;
                ppStitchUInner = ppGuardSetU0;
            }
        } else if (quadInfo->stitchBottom) {
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUBegin = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUBegin = ppGuardSetU1;
                ppStitchUInner = ppGuardSetU1;
            }
            ppGuardSetUEnd = ppGuardSetU1;
        } else {
            ppGuardSetUBegin = ppGuardSetU0;
            ppStitchUInner = NULL;
            ppGuardSetUEnd = ppGuardSetU1;
        }
    } else {
        if (quadInfo->stitchTop) {
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUBegin = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUBegin = ppGuardSetU0;
                ppStitchUInner = ppGuardSetU0;
            }
            ppGuardSetUEnd = ppGuardSetU0;
        } else if (quadInfo->stitchBottom) {
            ppGuardSetUBegin = ppGuardSetU1;
            if (quadInfo->vMaxSegs > 1) {
                ppGuardSetUEnd = ppGuardSetUInner;
                ppStitchUInner = ppGuardSetUInner;
            } else {
                ppGuardSetUEnd = ppGuardSetU1;
                ppStitchUInner = ppGuardSetU1;
            }
        } else {
            ppGuardSetUBegin = ppGuardSetU1;
            ppStitchUInner = NULL;
            ppGuardSetUEnd = ppGuardSetU0;
        }
    }

    if (quadInfo->uMaxDir == 1) {
        if (quadInfo->stitchRight) {
            ppGuardSetVBegin = ppGuardSetV0;
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVEnd = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVEnd = ppGuardSetV0;
                ppStitchVInner = ppGuardSetV0;
            }
        } else if (quadInfo->stitchLeft) {
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVBegin = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVBegin = ppGuardSetV1;
                ppStitchVInner = ppGuardSetV1;
            }
            ppGuardSetVEnd = ppGuardSetV1;
        } else {
            ppGuardSetVBegin = ppGuardSetV0;
            ppStitchVInner = NULL;
            ppGuardSetVEnd = ppGuardSetV1;
        }
    } else {
        if (quadInfo->stitchRight) {
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVBegin = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVBegin = ppGuardSetV0;
                ppStitchVInner = ppGuardSetV0;
            }
            ppGuardSetVEnd = ppGuardSetV0;
        } else if (quadInfo->stitchLeft) {
            ppGuardSetVBegin = ppGuardSetV1;
            if (quadInfo->uMaxSegs > 1) {
                ppGuardSetVEnd = ppGuardSetVInner;
                ppStitchVInner = ppGuardSetVInner;
            } else {
                ppGuardSetVEnd = ppGuardSetV1;
                ppStitchVInner = ppGuardSetV1;
            }
        } else {
            ppGuardSetVBegin = ppGuardSetV1;
            ppStitchVInner = NULL;
            ppGuardSetVEnd = ppGuardSetV0;
        }
    }
    if (doFrac) {
        ppGuardSetUEnd = /*ppGuardSetUInnerFrac =*/ info->ppGuardSetUInnerFrac;
        ppGuardSetVEnd = /*ppGuardSetVInnerFrac =*/ info->ppGuardSetVInnerFrac;
    }
    // END SIMILAR CODE

    quadInfo->pCurvesTop = &curves1;
    quadInfo->pCurvesBot = &curves2;
    quadInfo->pOut1 = NULL;
    quadInfo->pOut2 = NULL;

    info->setGridCorner = NV_PATCH_SET_GRID_CORNER_ALL;

    if (info->swatchFlags & NV_PATCH_SWATCH) {
        retVal |= DrawIntPatchSwaths(info, quadInfo, matrices);

    } else {
        // set up ptrs for writing U curves from matrix
        quadInfo->pSwatchUBegin = ppGuardSetUBegin[0];
        quadInfo->pSwatchUEnd = ppGuardSetUEnd[0];
        quadInfo->pSwatchVBegin = ppGuardSetVBegin[0];
        quadInfo->pSwatchVEnd = ppGuardSetVEnd[0];

        for (index = 0; index < info->maxAttr; index++) {
            if (!EV_GUARD_ATTR(index)  &&  !doFrac) {
                continue;
            }
            if (!(info->evalEnables & (1 << index))) {
                continue;
            }
            info->pSwatchCorner[index][0][0] = info->gridCorner[index][1-quadInfo->vMaxDir][ 1-quadInfo->uMaxDir];
            FillIntCornerLL(info, quadInfo, quadInfo, index, info->pSwatchCorner[index][0][0]);

            info->pSwatchCorner[index][0][1] = info->gridCorner[index][1-quadInfo->vMaxDir][   quadInfo->uMaxDir];
            FillIntCornerLR(info, quadInfo, quadInfo, index, info->pSwatchCorner[index][0][1]);

            info->pSwatchCorner[index][1][0] = info->gridCorner[index][  quadInfo->vMaxDir][ 1-quadInfo->uMaxDir];
            FillIntCornerUL(info, quadInfo, quadInfo, index, info->pSwatchCorner[index][1][0]);

            info->pSwatchCorner[index][1][1] = info->gridCorner[index][  quadInfo->vMaxDir][   quadInfo->uMaxDir];
            FillIntCornerUR(info, quadInfo, quadInfo, index, info->pSwatchCorner[index][1][1]);

            // Copy U and V guard curves
            // note: be sure to do after Fill*() routines in case pSwatchV* curves are tweaked.
            CopyCurve(info, info->tempVBegin[index], (*quadInfo->pSwatchVBegin)[index]);
            CopyCurve(info, info->tempVEnd[index], (*quadInfo->pSwatchVEnd)[index]);
        }

        if (/* ff (info->flags & NV_PATCH_FLAG_AUTO_NORMAL)    || */
            (info->evalEnables & (1 << ATTR_N))) {
                info->swatchFlags |= NV_PATCH_HAS_NORMAL;
        };

        ComputeKelvinHOSControlWords(info, quadInfo, info->swatchFlags);

        quadInfo->uMaxSegs -= doFrac;
        quadInfo->vMaxSegs -= doFrac;
        retVal |= DrawIntPatchGrid(info, quadInfo, matrices);
        quadInfo->uMaxSegs += doFrac;
        quadInfo->vMaxSegs += doFrac;

        DrawAllPatchTransitions(info, quadInfo,
                            ppGuardSetU0, ppGuardSetU1, ppStitchUInner, info->ppGuardSetUInnerFrac,
                            ppGuardSetV0, ppGuardSetV1, ppStitchVInner, info->ppGuardSetVInnerFrac);

        HOS_NOTE("End Patch");
        pPush = pDevice->StartPush();
        Push1(pPush, NV097_SET_END_PATCH, 0);
        pDevice->EndPush(pPush + 2);
    }

drawIntPatchEnd:
    return retVal;
}

// Determine if a patch is rational (i.e. w != 1)
int IsPatchRational(NV_PATCH_INFO *info, int attrib)
{
    NV_PATCH_MAP_INFO *map = &info->maps[attrib];
    unsigned int i, j;

/*    switch(type) {
    case NV_PATCH_VERTEX_FORMAT_FLOAT_4:*/
        if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
            for (j = 0; j < map->vorder; j++) {
                for (i = 0; i < map->uorder - j; i++) {
                    if (map->rawData[4*(j*map->uorder + i) + 3] != 1.0f) {
                        return 1;
                    }
                }
            }
        } else {
            for (j = 0; j < map->vorder; j++) {
                for (i = 0; i < map->uorder; i++) {
                    if (map->rawData[4*(j*map->uorder + i) + 3] != 1.0f) {
                        return 1;
                    }
                }
            }
        }
/*        break;
    case NV_PATCH_VERTEX_FORMAT_FLOAT_1:
    case NV_PATCH_VERTEX_FORMAT_FLOAT_2:
    case NV_PATCH_VERTEX_FORMAT_FLOAT_3:
        break;  // fall through we are guaranteed non-rational by our expansion methods
    default:
        nvAssert(0);
    }
*/
    return 0;
}

float BinomialCoefficient(int n, int r)
{
    float x;
    if(n<=10 && r <= 10){
        x = cachedBinomialCoefficients[n][r];
    }
    else {
        int i;
        x = 1.0f;
        for (i = 2; i <= n; i++) {
            x *= i;
        }
        for (i = 2; i <= r; i++) {
            x /= i;
        }
        for (i = 2; i <= n-r; i++) {
            x /= i;
        }
    }

    return x;
}

float TrinomialCoefficient(int n, int r, float s)
{
    float x = 1.0f;
    int i;

    for (i = 2; i <= n; i++) {
        x *= i;
    }
    for (i = 2; i <= r; i++) {
        x /= i;
    }
    for (i = 2; i <= s; i++) {
        x /= i;
    }
    for (i = 2; i <= n-r-s; i++) {
        x /= i;
    }
    return x;
}

void ComputeNormalPatch(NV_PATCH_INFO *info, float *normalPatch,
                                int uorder, int vorder, int rational)
{
    NV_PATCH_MAP_INFO *map = &info->maps[info->srcNormal];
    float *rawData = map->rawData;
    int pitch = map->pitch;
    int ufStride = 4;
    int vfStride = 4 * map->pitch;
    int i, j;
    FDMatrix *derivU, *derivV, *derivUTemp = NULL, *derivVTemp = NULL;
    FDMatrix *temp[6], *pFDMatrix;
    int normalUOrder, normalVOrder;
    int uRow, uCol, vRow, vCol;
    EV_ALLOC_DECL();

    EV_ALLOC_INIT_WITH_CACHE(info->context, 8 * sizeof(FDMatrix), computeNormalPatchEnd, info->pCache[EV_CACHE_9FDMATRICES]);
    EV_ALLOC(derivU, info->context, sizeof(FDMatrix));
    EV_ALLOC(derivV, info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[0], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[1], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[2], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[3], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[4], info->context, sizeof(FDMatrix));
    EV_ALLOC(temp[5], info->context, sizeof(FDMatrix));
    EV_ALLOC_FULL(info->context);

    if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
        if (rational) {
            normalUOrder = normalVOrder = 4*uorder - 5;
        } else {
            normalUOrder = normalVOrder = 2*uorder - 3;
        }

        // Compute derivatives in u
        derivU->columns = uorder-1;
        derivU->rows = uorder-1;
        for (j = 0; j < uorder-1; j++) {
            FillColumnVectorMatrix(uorder-j, ufStride*sizeof(float), pRawData(info, map, rawData, j, 0), temp[0], 0);
            for (i = 0; i < uorder-1-j; i++) {
                derivU->data[j][i][0] = temp[0]->data[i+1][0][0] - temp[0]->data[i][0][0];
                derivU->data[j][i][1] = temp[0]->data[i+1][0][1] - temp[0]->data[i][0][1];
                derivU->data[j][i][2] = temp[0]->data[i+1][0][2] - temp[0]->data[i][0][2];
                derivU->data[j][i][3] = temp[0]->data[i+1][0][3] - temp[0]->data[i][0][3];
            }
        }

        // Compute derivatives in v
        derivV->columns = uorder-1;
        derivV->rows = uorder-1;
        for (i = 0; i < uorder; i++) {
            FillColumnVectorMatrix(uorder-i, vfStride * sizeof(float), pRawData(info, map, rawData, 0, i), temp[0], 0);
            for (j = 0; j < uorder-1-i; j++) {
                derivV->data[j][i][0] = temp[0]->data[j+1][0][0] - temp[0]->data[j][0][0];
                derivV->data[j][i][1] = temp[0]->data[j+1][0][1] - temp[0]->data[j][0][1];
                derivV->data[j][i][2] = temp[0]->data[j+1][0][2] - temp[0]->data[j][0][2];
                derivV->data[j][i][3] = temp[0]->data[j+1][0][3] - temp[0]->data[j][0][3];
            }
        }

        if (rational) {
            int derivRow, derivCol, vertRow, vertCol;

            // This code makes the assumption that type == NV_PATCH_VERTEX_FORMAT_FLOAT_4.
            // Seeing as the patch is rational, this is probably safe, unless people start
            // using unsigned byte types for rational patches.

            derivUTemp = temp[2];
            derivVTemp = temp[3];

            // Initialize matrices
            derivUTemp->columns = 2*uorder - 2;
            derivUTemp->rows    = 2*uorder - 2;
            derivVTemp->columns = 2*uorder - 2;
            derivVTemp->rows    = 2*uorder - 2;
            for (derivRow = 0; derivRow < derivUTemp->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivUTemp->columns; derivCol++) {
                    derivUTemp->data[derivRow][derivCol][0] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][1] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][2] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][3] = 0.0f;
                }
            }
            for (derivRow = 0; derivRow < derivVTemp->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivVTemp->columns; derivCol++) {
                    derivVTemp->data[derivRow][derivCol][0] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][1] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][2] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][3] = 0.0f;
                }
            }

            // derivU <-- derivU.xyz * vertices.w - derivU.w * vertices.xyz
            for (derivRow = 0; derivRow < derivU->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivU->columns-derivRow; derivCol++) {
                    float derivPoint[4];

                    derivPoint[0] = derivU->data[derivRow][derivCol][0];
                    derivPoint[1] = derivU->data[derivRow][derivCol][1];
                    derivPoint[2] = derivU->data[derivRow][derivCol][2];
                    derivPoint[3] = derivU->data[derivRow][derivCol][3];

                    for (vertRow = 0; vertRow < vorder; vertRow++) {
                        for (vertCol = 0; vertCol < uorder-vertRow; vertCol++) {
                            float vert[4], *result;
                            float factor;

                            vert[0] = rawData[4*(vertRow*pitch + vertCol) + 0];
                            vert[1] = rawData[4*(vertRow*pitch + vertCol) + 1];
                            vert[2] = rawData[4*(vertRow*pitch + vertCol) + 2];
                            vert[3] = rawData[4*(vertRow*pitch + vertCol) + 3];

                            factor  = TrinomialCoefficient(derivU->rows-1, derivRow, derivCol);
                            factor *= TrinomialCoefficient(uorder-1, vertRow, vertCol);
                            factor /= TrinomialCoefficient(derivU->rows+uorder-2, derivRow+vertRow, derivCol+vertCol);

                            result = &derivUTemp->data[derivRow+vertRow][derivCol+vertCol][0];

                            // Accumulate
                            result[0] += factor*(derivPoint[0]*vert[3] - derivPoint[3]*vert[0]);
                            result[1] += factor*(derivPoint[1]*vert[3] - derivPoint[3]*vert[1]);
                            result[2] += factor*(derivPoint[2]*vert[3] - derivPoint[3]*vert[2]);
                        }
                    }
                }
            }

            // derivV <-- derivV.xyz * vertices.w - derivV.w * vertices.xyz
            for (derivRow = 0; derivRow < derivV->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivV->columns-derivRow; derivCol++) {
                    float derivPoint[4];

                    derivPoint[0] = derivV->data[derivRow][derivCol][0];
                    derivPoint[1] = derivV->data[derivRow][derivCol][1];
                    derivPoint[2] = derivV->data[derivRow][derivCol][2];
                    derivPoint[3] = derivV->data[derivRow][derivCol][3];

                    for (vertRow = 0; vertRow < vorder; vertRow++) {
                        for (vertCol = 0; vertCol < uorder-vertRow; vertCol++) {
                            float vert[4], *result;
                            float factor;

                            vert[0] = rawData[4*(vertRow*pitch + vertCol) + 0];
                            vert[1] = rawData[4*(vertRow*pitch + vertCol) + 1];
                            vert[2] = rawData[4*(vertRow*pitch + vertCol) + 2];
                            vert[3] = rawData[4*(vertRow*pitch + vertCol) + 3];

                            factor  = TrinomialCoefficient(derivV->rows-1, derivRow, derivCol);
                            factor *= TrinomialCoefficient(uorder-1, vertRow, vertCol);
                            factor /= TrinomialCoefficient(derivV->rows+uorder-2, derivRow+vertRow, derivCol+vertCol);

                            result = &derivVTemp->data[derivRow+vertRow][derivCol+vertCol][0];

                            // Accumulate
                            result[0] += factor*(derivPoint[0]*vert[3] - derivPoint[3]*vert[0]);
                            result[1] += factor*(derivPoint[1]*vert[3] - derivPoint[3]*vert[1]);
                            result[2] += factor*(derivPoint[2]*vert[3] - derivPoint[3]*vert[2]);
                        }
                    }
                }
            }

            EV_SWAP(derivU, temp[2], pFDMatrix);
            EV_SWAP(derivV, temp[3], pFDMatrix);
        }

        for (uRow = 0; uRow < derivU->rows; uRow++) {
            for (uCol = 0; uCol < derivU->columns-uRow; uCol++) {
                float uPoint[3];

                uPoint[0] = derivU->data[uRow][uCol][0];
                uPoint[1] = derivU->data[uRow][uCol][1];
                uPoint[2] = derivU->data[uRow][uCol][2];

                for (vRow = 0; vRow < derivV->rows; vRow++) {
                    for (vCol = 0; vCol < derivV->columns-vRow; vCol++) {
                        float vPoint[3];
                        int normalIndex = 4*(normalUOrder*(uRow+vRow) + uCol + vCol);
                        float factor;

                        vPoint[0] = derivV->data[vRow][vCol][0];
                        vPoint[1] = derivV->data[vRow][vCol][1];
                        vPoint[2] = derivV->data[vRow][vCol][2];

                        factor  = TrinomialCoefficient(derivU->rows-1, uRow, uCol);
                        factor *= TrinomialCoefficient(derivV->rows-1, vRow, vCol);
                        factor /= TrinomialCoefficient(derivU->rows+derivV->rows-2, uRow+vRow, uCol+vCol);

                        // Accumulate x: uy*vz - uz*vy
                        normalPatch[normalIndex + 0] += factor*(uPoint[1]*vPoint[2] - uPoint[2]*vPoint[1]);
                        // Accumulate y: uz*vx - ux*vz
                        normalPatch[normalIndex + 1] += factor*(uPoint[2]*vPoint[0] - uPoint[0]*vPoint[2]);
                        // Accumulate z: ux*vy - uy*vx
                        normalPatch[normalIndex + 2] += factor*(uPoint[0]*vPoint[1] - uPoint[1]*vPoint[0]);
                    }
                }
            }
        }
    } else {
        if (rational) {
            normalUOrder = 4*uorder - 4;
            normalVOrder = 4*vorder - 4;
        } else {
            normalUOrder = 2*uorder - 2;
            normalVOrder = 2*vorder - 2;
        }

        // Compute derivatives in u
        derivU->columns = uorder-1;
        derivU->rows = vorder;
        for (j = 0; j < vorder; j++) {
            FillColumnVectorMatrix(uorder, ufStride*sizeof(float), pRawData(info, map, rawData, j, 0), temp[0], 0);
            for (i = 0; i < uorder-1; i++) {
                derivU->data[j][i][0] = temp[0]->data[i+1][0][0] - temp[0]->data[i][0][0];
                derivU->data[j][i][1] = temp[0]->data[i+1][0][1] - temp[0]->data[i][0][1];
                derivU->data[j][i][2] = temp[0]->data[i+1][0][2] - temp[0]->data[i][0][2];
                derivU->data[j][i][3] = temp[0]->data[i+1][0][3] - temp[0]->data[i][0][3];
            }
        }

        // Compute derivatives in v
        derivV->columns = uorder;
        derivV->rows = vorder-1;
        for (i = 0; i < uorder; i++) {
            FillColumnVectorMatrix(vorder, vfStride * sizeof(float), pRawData(info, map, rawData, 0, i), temp[0], 0);
            for (j = 0; j < vorder-1; j++) {
                derivV->data[j][i][0] = temp[0]->data[j+1][0][0] - temp[0]->data[j][0][0];
                derivV->data[j][i][1] = temp[0]->data[j+1][0][1] - temp[0]->data[j][0][1];
                derivV->data[j][i][2] = temp[0]->data[j+1][0][2] - temp[0]->data[j][0][2];
                derivV->data[j][i][3] = temp[0]->data[j+1][0][3] - temp[0]->data[j][0][3];
            }
        }

        if (rational) {
            int derivRow, derivCol, vertRow, vertCol;

            // This code makes the assumption that type == NV_PATCH_VERTEX_FORMAT_FLOAT_4.
            // Seeing as the patch is rational, this is probably safe, unless people start
            // using unsigned byte types for rational patches.

            derivUTemp = temp[4];
            derivVTemp = temp[5];

            // Initialize matrices
            derivUTemp->columns = 2*uorder - 2;
            derivUTemp->rows    = 2*vorder - 1;
            derivVTemp->columns = 2*uorder - 1;
            derivVTemp->rows    = 2*vorder - 2;
            for (derivRow = 0; derivRow < derivUTemp->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivUTemp->columns; derivCol++) {
                    derivUTemp->data[derivRow][derivCol][0] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][1] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][2] = 0.0f;
                    derivUTemp->data[derivRow][derivCol][3] = 0.0f;
                }
            }
            for (derivRow = 0; derivRow < derivVTemp->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivVTemp->columns; derivCol++) {
                    derivVTemp->data[derivRow][derivCol][0] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][1] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][2] = 0.0f;
                    derivVTemp->data[derivRow][derivCol][3] = 0.0f;
                }
            }

            // derivU <-- derivU.xyz * vertices.w - derivU.w * vertices.xyz
            for (derivRow = 0; derivRow < derivU->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivU->columns; derivCol++) {
                    float derivPoint[4];

                    derivPoint[0] = derivU->data[derivRow][derivCol][0];
                    derivPoint[1] = derivU->data[derivRow][derivCol][1];
                    derivPoint[2] = derivU->data[derivRow][derivCol][2];
                    derivPoint[3] = derivU->data[derivRow][derivCol][3];

                    for (vertRow = 0; vertRow < vorder; vertRow++) {
                        for (vertCol = 0; vertCol < uorder; vertCol++) {
                            float vert[4], *result;
                            float factor;
                            int idx;
                            idx = 4*(vertRow*pitch + vertCol);
                            vert[0] = rawData[idx + 0];
                            vert[1] = rawData[idx + 1];
                            vert[2] = rawData[idx + 2];
                            vert[3] = rawData[idx + 3];

                            factor  = BinomialCoefficient(derivU->rows-1, derivRow);
                            factor /= BinomialCoefficient(derivU->rows+vorder-2, derivRow+vertRow);
                            factor *= BinomialCoefficient(derivU->columns-1, derivCol);
                            factor *= BinomialCoefficient(vorder-1, vertRow);
                            factor /= BinomialCoefficient(derivU->columns+uorder-2, derivCol+vertCol);
                            factor *= BinomialCoefficient(uorder-1, vertCol);

                            result = &derivUTemp->data[derivRow+vertRow][derivCol+vertCol][0];

                            // Accumulate
                            result[0] += factor*(derivPoint[0]*vert[3] - derivPoint[3]*vert[0]);
                            result[1] += factor*(derivPoint[1]*vert[3] - derivPoint[3]*vert[1]);
                            result[2] += factor*(derivPoint[2]*vert[3] - derivPoint[3]*vert[2]);
                        }
                    }
                }
            }

            // derivV <-- derivV.xyz * vertices.w - derivV.w * vertices.xyz
            for (derivRow = 0; derivRow < derivV->rows; derivRow++) {
                for (derivCol = 0; derivCol < derivV->columns; derivCol++) {
                    float derivPoint[4];

                    derivPoint[0] = derivV->data[derivRow][derivCol][0];
                    derivPoint[1] = derivV->data[derivRow][derivCol][1];
                    derivPoint[2] = derivV->data[derivRow][derivCol][2];
                    derivPoint[3] = derivV->data[derivRow][derivCol][3];

                    for (vertRow = 0; vertRow < vorder; vertRow++) {
                        for (vertCol = 0; vertCol < uorder; vertCol++) {
                            float vert[4], *result;
                            float factor;

                            vert[0] = rawData[4*(vertRow*pitch + vertCol) + 0];
                            vert[1] = rawData[4*(vertRow*pitch + vertCol) + 1];
                            vert[2] = rawData[4*(vertRow*pitch + vertCol) + 2];
                            vert[3] = rawData[4*(vertRow*pitch + vertCol) + 3];

                            factor  = BinomialCoefficient(derivV->rows-1, derivRow);
                            factor *= BinomialCoefficient(derivV->columns-1, derivCol);
                            factor *= BinomialCoefficient(vorder-1, vertRow);
                            factor *= BinomialCoefficient(uorder-1, vertCol);
                            factor /= BinomialCoefficient(derivV->rows+vorder-2, derivRow+vertRow);
                            factor /= BinomialCoefficient(derivV->columns+uorder-2, derivCol+vertCol);

                            result = &derivVTemp->data[derivRow+vertRow][derivCol+vertCol][0];

                            // Accumulate
                            result[0] += factor*(derivPoint[0]*vert[3] - derivPoint[3]*vert[0]);
                            result[1] += factor*(derivPoint[1]*vert[3] - derivPoint[3]*vert[1]);
                            result[2] += factor*(derivPoint[2]*vert[3] - derivPoint[3]*vert[2]);
                        }
                    }
                }
            }

            EV_SWAP(derivU, temp[4], pFDMatrix);
            EV_SWAP(derivV, temp[5], pFDMatrix);
        }

        for (uRow = 0; uRow < derivU->rows; uRow++) {
            for (uCol = 0; uCol < derivU->columns; uCol++) {
                float uPoint[3];

                uPoint[0] = derivU->data[uRow][uCol][0];
                uPoint[1] = derivU->data[uRow][uCol][1];
                uPoint[2] = derivU->data[uRow][uCol][2];

                for (vRow = 0; vRow < derivV->rows; vRow++) {
                    for (vCol = 0; vCol < derivV->columns; vCol++) {
                        float vPoint[3];
                        int normalIndex = 4*(normalUOrder*(uRow+vRow) + uCol+vCol);
                        float factor;

                        vPoint[0] = derivV->data[vRow][vCol][0];
                        vPoint[1] = derivV->data[vRow][vCol][1];
                        vPoint[2] = derivV->data[vRow][vCol][2];

                        factor  = BinomialCoefficient(derivU->rows-1, uRow);
                        factor *= BinomialCoefficient(derivV->rows-1, vRow);
                        factor *= BinomialCoefficient(derivU->columns-1, uCol);
                        factor *= BinomialCoefficient(derivV->columns-1, vCol);
                        factor /= BinomialCoefficient(derivU->rows+derivV->rows-2, uRow+vRow);
                        factor /= BinomialCoefficient(derivU->columns+derivV->columns-2, uCol+vCol);

                        // Accumulate x: uy*vz - uz*vy
                        normalPatch[normalIndex + 0] += factor*(uPoint[1]*vPoint[2] - uPoint[2]*vPoint[1]);

                        // Accumulate y: uz*vx - ux*vz
                        normalPatch[normalIndex + 1] += factor*(uPoint[2]*vPoint[0] - uPoint[0]*vPoint[2]);

                        // Accumulate z: ux*vy - uy*vx
                        normalPatch[normalIndex + 2] += factor*(uPoint[0]*vPoint[1] - uPoint[1]*vPoint[0]);
                    }
                }
            }
        }
    }

computeNormalPatchEnd:
    EV_FREE(derivU, info->context);
    EV_FREE(derivU, info->context);
    EV_FREE(temp[0], info->context);
    EV_FREE(temp[1], info->context);
    EV_FREE(temp[2], info->context);
    EV_FREE(temp[3], info->context);
    EV_FREE(temp[4], info->context);
    EV_FREE(temp[5], info->context);
}

const struct {
    int uSide;
    int vSide;
    int uDir;
    int vDir;
    int reverse;
    int centerCurve;
} TriPatchLayout[3] = {
    { 0, 2, 0, 1, 0, 0 },
    { 0, 1, 1, 0, 1, 1 },
    { 1, 2, 1, 0, 1, 1 },
};

// Compute the step size and number of segments in fractional tessellation
void ComputeFracStepInfo(float steps, float *du, int *segs)
{
    *du = 1.0f / steps;
    if (segs) {
        *segs = (int)(steps/2.0f + 0.999f);
    }
}

/*****************************************************************************/
// needs adjustment for 64-bit machines
#define SIZEOF_NV_PATCH_QUAD_INFO EV_ROUND(sizeof(NV_PATCH_QUAD_INFO))

int nvAllocInfoScratch(NV_PATCH_INFO *info)
{
    unsigned int retVal = NV_PATCH_EVAL_OK;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int attr, bytes;
    EV_ALLOC_DECL();

    bytes = info->nAttr * (sizeof(FDMatrix) + 2*info->bytesGuardCurve);

    if (doFrac) {
        bytes += info->nAttr * (2*info->bytesGuardCurve);
    }

    EV_ALLOC_INIT_WITH_CACHE(info->context, bytes, nvAllocInfoScratchEnd, info->pCache[EV_CACHE_INFO_SCRATCH]);
    info->pScratchBase = evMemory.pBase;

    for (attr = 0; attr < info->maxAttr; attr++){
        if (!(info->evalEnables & (1 << attr))) {
            continue;
        }

        EV_ALLOC(info->ppMatrixSetSS0[attr], info->context, sizeof(FDMatrix));

        // for guard curves at begin or end of matrix stepping
        EV_ALLOC(info->tempVBegin[attr], info->context, info->bytesGuardCurve);
        EV_ALLOC(info->tempVEnd[attr], info->context, info->bytesGuardCurve);

        if (doFrac) {
            EV_ALLOC(info->guardSetUInnerFrac[attr], info->context, info->bytesGuardCurve);
            EV_ALLOC(info->guardSetVInnerFrac[attr], info->context, info->bytesGuardCurve);
            continue;
        }
    }
    EV_ALLOC_FULL(info->context);

    info->ppGuardSetUInnerFrac1[0] = &info->guardSetUInnerFrac;
    info->ppGuardSetVInnerFrac1[0] = &info->guardSetVInnerFrac;

    info->ppGuardSetUInnerFrac = &info->ppGuardSetUInnerFrac1[0];
    info->ppGuardSetVInnerFrac = &info->ppGuardSetVInnerFrac1[0];

nvAllocInfoScratchEnd:
    return retVal;
}

// alloc FDMatrices and other things for imm mode rendering
int nvAllocFDMatricesEtc(NV_PATCH_INFO *info)
{
    unsigned int retVal = NV_PATCH_EVAL_OK;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int attr, matrixBytes, totalBytes;
    NV_PATCH_QUAD_INFO *quadInfo;
    EV_ALLOC_DECL();

    // all styles need quadInfo
    totalBytes = SIZEOF_NV_PATCH_QUAD_INFO;

    if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
        if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
            matrixBytes = 3*sizeof(FDMatrix) + sizeof(NV_PATCH_FRAC_TRI_GUARD_INFO);
        } else {
            matrixBytes = 4*sizeof(FDMatrix) + sizeof(NV_PATCH_FRAC_QUAD_GUARD_INFO);
        }
    } else {
        matrixBytes = 1*sizeof(FDMatrix);
        totalBytes += 4 * info->bytesGuardCurve * info->nAttr;
    }
    matrixBytes = EV_ROUND(matrixBytes);

    // always alloc Inner guard curves
    totalBytes += 2 * info->bytesGuardCurve * info->nAttr;

    // all styles need matrices and guardInfo
    totalBytes += matrixBytes * info->nAttr;

    EV_ALLOC_INIT_WITH_CACHE(info->context, totalBytes, nvAllocFDMatricesEnd, info->pCache[EV_CACHE_QUADINFO_ETC]);

    //THIS MUST ALWAYS BE THE FIRST ALLOCATION FROM THIS GROUP!!!!!!!!!
    EV_ALLOC(info->quadInfo, info->context, SIZEOF_NV_PATCH_QUAD_INFO);
    quadInfo = info->quadInfo;

    for (attr = 0; attr < info->maxAttr; attr++) {
        if (!(info->evalEnables & (1 << attr))) {
            continue;
        }

        quadInfo->m00[attr] = quadInfo->m01[attr] = quadInfo->m10[attr] = quadInfo->m11[attr] = NULL;
        EV_ALLOC(quadInfo->m00[attr], info->context, matrixBytes);

        // alloc Inner for all cases
        EV_ALLOC(quadInfo->pUInner[attr], info->context, info->bytesGuardCurve);
        EV_ALLOC(quadInfo->pVInner[attr], info->context, info->bytesGuardCurve);

        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
            quadInfo->m01[attr] = &quadInfo->m00[attr][1];
            quadInfo->m10[attr] = &quadInfo->m00[attr][2];
            if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
                quadInfo->guardTF[attr] = (NV_PATCH_FRAC_TRI_GUARD_INFO *)&quadInfo->m00[attr][3];
            } else {
                quadInfo->m11[attr] = &quadInfo->m00[attr][3];
                quadInfo->guardQF[attr] = (NV_PATCH_FRAC_QUAD_GUARD_INFO *)&quadInfo->m00[attr][4];
            }
            continue;
        }

        // INT cases
        EV_ALLOC(quadInfo->pU0[attr], info->context, info->bytesGuardCurve);
        EV_ALLOC(quadInfo->pU1[attr], info->context, info->bytesGuardCurve);
        EV_ALLOC(quadInfo->pV0[attr], info->context, info->bytesGuardCurve);
        EV_ALLOC(quadInfo->pV1[attr], info->context, info->bytesGuardCurve);

        quadInfo->pCorners[attr][0][0] = quadInfo->cornAttr[attr].corners[0][0];
        quadInfo->pCorners[attr][0][1] = quadInfo->cornAttr[attr].corners[0][1];
        quadInfo->pCorners[attr][1][0] = quadInfo->cornAttr[attr].corners[1][0];
        quadInfo->pCorners[attr][1][1] = quadInfo->cornAttr[attr].corners[1][1];
    }
    EV_ALLOC_FULL(info->context);

nvAllocFDMatricesEnd:
    return retVal;
}

/*****************************************************************************/
int bFirstTimeInit = 0x1;              //global value to indicate if we've built dynamic inner loops yet or not.
float fracFudge = .01f;
unsigned int nvEvalPatchSetup(NV_PATCH_INFO *info)
{
    int ii;
    unsigned int retVal = NV_PATCH_EVAL_OK;
    float *normalPatch = NULL;
    float *UVPatch = NULL;
    float segmin = 1.f;
    EV_ALLOC_DECL();

    info->reverse = 0;

    //INITIALIZE HERE BECAUSE Compute Normal Patch will read these.
    info->flipT = 0;
    info->flipU = 0;
    info->flipV = 0;
    info->flipTUV = 0;
    info->flipUV = 0;
    info->nAttr = 0;
    info->maxAttr = -1;
    info->maxOrder = 0;
    info->firstAttr = -1;

    if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
        // enforce minimums as required
        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) { segmin = 2.f + fracFudge; }
        info->tess.tri.n1 = MAX(info->tess.tri.n1, segmin);
        info->tess.tri.n2 = MAX(info->tess.tri.n2, segmin);
        info->tess.tri.n3 = MAX(info->tess.tri.n3, segmin);

    } else {
        // enforce minimums as required
        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
            segmin = 2.f;
            if ((info->tess.tensor.nu0 == 2.f  &&  info->tess.tensor.nu1 == 2.f)
                    ||  (info->tess.tensor.nv0 == 2.f  &&  info->tess.tensor.nv1 == 2.f)) {
                segmin += fracFudge;
            }
        }
        info->tess.tensor.nu0 = MAX(info->tess.tensor.nu0, segmin);
        info->tess.tensor.nu1 = MAX(info->tess.tensor.nu1, segmin);
        info->tess.tensor.nv0 = MAX(info->tess.tensor.nv0, segmin);
        info->tess.tensor.nv1 = MAX(info->tess.tensor.nv1, segmin);
    }

    nvAssert(16 == NV_PATCH_NUMBER_OF_ATTRIBS); // fix all 16's if we hit this... fundamental assumption has changed

    if (info->flags & NV_PATCH_FLAG_AUTO_NORMAL) {
        NV_PATCH_MAP_INFO *map;
        int uorder, vorder;
        int normalUOrder, normalVOrder;

        // init for ComputeNormalPatch
        map = &info->maps[info->srcNormal];
        uorder = map->uorder;
        vorder = map->vorder;
        map->ufStride = 4;
        map->vfStride = 4 * map->pitch;

        nvAssert(info->srcNormal >= 0 && info->srcNormal <= NV_PATCH_NUMBER_OF_ATTRIBS);
        nvAssert(info->dstNormal >= 0 && info->dstNormal <= NV_PATCH_NUMBER_OF_ATTRIBS);
        if (info->maps[info->srcNormal].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
            info->rational = IsPatchRational(info, info->srcNormal);
        }

        if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
            if (info->rational) {
                normalUOrder = normalVOrder = 4*uorder - 5;
            } else {
                normalUOrder = normalVOrder = 2*uorder - 3;
            }
        } else {
            if (info->rational) {
                normalUOrder = 4*uorder - 4;
                normalVOrder = 4*vorder - 4;
            } else {
                normalUOrder = 2*uorder - 2;
                normalVOrder = 2*vorder - 2;
            }
        }

        // If control points are dirty, recalculate the actual normal patch
        if (info->maps[info->srcNormal].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
            int bytes;

            //init some storage
            if (normalUOrder == 1) {
                //degree lifting -- HW doesn't allow for a order1/degree0/constant function in the FD unit,
                //so allocate extra space here so I can lift it to linear later
                bytes = 4*(normalUOrder+1)*(normalVOrder+1)*sizeof(float);
            } else {
                bytes = 4*normalUOrder*normalVOrder*sizeof(float);
            }
            EV_ALLOC_INIT_WITH_CACHE(info->context, bytes, nvPatchSetupEnd, info->pCache[EV_CACHE_AUTO_NORMAL_SETUP]);
            EV_ALLOC(info->normalPatch, info->context, bytes);
            normalPatch = info->normalPatch;
            for (ii = 0; ii < 4*normalUOrder*normalVOrder; ii++) {
                if ((ii & 3) != 3) {
                    normalPatch[ii] = 0.0f;
                } else {
                    normalPatch[ii] = 1.0f;
                }
            }

            // XXXmjc We aren't handling constant position in one direction properly yet
            nvAssert(uorder > 1);
            nvAssert(vorder > 1);
            ComputeNormalPatch(info, normalPatch, uorder, vorder, info->rational); //type passed here is the data src type
            if (normalUOrder == 1) {
                float pt[4];
                //degree lifting -- HW doesn't allow for a order1/degree0/constant function in the FD unit,
                //expand the normal patch data here.
                pt[0] = normalPatch[0]; pt[1] = normalPatch[1]; pt[2] = normalPatch[2];
                for (ii=4; ii < 12; ii+=4) {
                    normalPatch[ii+0] = pt[0];
                    normalPatch[ii+1] = pt[1];
                    normalPatch[ii+2] = pt[2];
                    normalPatch[ii+3] = 1.f;
                }
            }
        }

        if (normalUOrder == 1) {
            //if the order is actually 1 then bump it up one because I lifted the degree
            //when the control pts were dirty.
            normalUOrder++;
            normalVOrder++;
        }

        // Force evaluation of the normal
        info->evalEnables |= (1 << info->dstNormal);
        info->maps[info->dstNormal].uorder = normalUOrder;
        info->maps[info->dstNormal].vorder = normalVOrder;
        info->maps[info->dstNormal].rawData = normalPatch;
        //ffinfo->maps[info->dstNormal].stride = 4*sizeof(float);
        info->maps[info->dstNormal].pitch  = normalUOrder;
    }

    if (info->flags & NV_PATCH_FLAG_AUTO_UV) {
        int order = 2;
        int bytes = 0;
        for (ii=0; ii < 8; ii++) {
            if (info->dstUV[ii] != 0xFFFFffff) {
                if (info->maps[info->dstUV[ii]].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                    if(bytes == 0){
                        //if this is the first UV coord build patch data for it
                        bytes = 4*order*order*sizeof(float);
                        EV_ALLOC_INIT_WITH_CACHE2(info->context, bytes, nvPatchSetupEnd, info->pCache[EV_CACHE_UV_SETUP]);
                        EV_ALLOC(UVPatch , info->context, bytes);
                        if (info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR) {
                            // DO THIS BECAUSE THERE IS AN IMPLICIT MIRROR IN THE
                            // FORMATS OF D3D/OGL        D3D= 0      OGL=2
                            //                                |\         |\
                            //                                1-2        0-1
                            // texture coordinates need to be mirrored in y.
                            // likewise winding needs to be inverted
                            UVPatch[0] = info->endu;   UVPatch[1] = info->endv;     UVPatch[2] = 0.f;   UVPatch[3] = 1.f;
                            UVPatch[4] = info->startu; UVPatch[5] = info->endv;     UVPatch[6] = 0.f;   UVPatch[7] = 1.f;
                            UVPatch[8] = info->startu; UVPatch[9] = info->startv;   UVPatch[10] = 0.f;  UVPatch[11] = 1.f;
                            UVPatch[12] = 0x0;         UVPatch[13] = 0x0;           UVPatch[14] = 0.f;  UVPatch[15] = 1.f;
                        } else {
                            UVPatch[0] = info->startu; UVPatch[1] = info->startv;   UVPatch[2] = 0.f;   UVPatch[3] = 1.f;
                            UVPatch[4] = info->endu;   UVPatch[5] = info->startv;   UVPatch[6] = 0.f;   UVPatch[7] = 1.f;
                            UVPatch[8] = info->startu; UVPatch[9] = info->endv;     UVPatch[10] = 0.f;  UVPatch[11] = 1.f;
                            UVPatch[12] = info->endu;   UVPatch[13] = info->endv;   UVPatch[14] = 0.f;  UVPatch[15] = 1.f;
                        }
                    }
                    info->UVPatch = UVPatch;
                }

                // Force evaluation of the texturecoord
                info->evalEnables |= (1 << info->dstUV[ii]);
                info->maps[info->dstUV[ii]].uorder = info->maps[info->dstUV[ii]].vorder = order;
                info->maps[info->dstUV[ii]].rawData = UVPatch;
                //ffinfo->maps[info->dstUV[ii]].stride = 4*sizeof(float);
                info->maps[info->dstUV[ii]].pitch = order;
            }
        }
    }

    // ensure some flags are initialized
    info->flags &= ~(NV_PATCH_FLAG_SOME_DIRTY_TESS | NV_PATCH_FLAG_TRANSPOSE
                        | NV_PATCH_FLAG_FLIPPED_U | NV_PATCH_FLAG_FLIPPED_V);
    for (ii = 0;  ii < NV_PATCH_NUMBER_OF_ATTRIBS;  ii++) {
        if (info->evalEnables & (1 << ii)) {
            if (!(info->maps[ii].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS)) {
                if (info->maps[ii].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                    info->flags |= NV_PATCH_FLAG_SOME_DIRTY_TESS;
                }
            }

            info->maps[ii].ufStride = 4;
            info->maps[ii].vfStride = 4 * info->maps[ii].pitch;

            // calc MAX values
            info->nAttr++;
            if (info->firstAttr == -1) {
                info->firstAttr = ii;
            }
            if (ii > info->maxAttr) {
                info->maxAttr = ii;
            }
            if (info->maps[ii].uorder > info->maxOrder) {
                info->maxOrder = info->maps[ii].uorder;
            }
            if (info->maps[ii].vorder > info->maxOrder) {
                info->maxOrder = info->maps[ii].vorder;
            }
        }
    }
    info->maxAttr = info->maxAttr + 1;

    info->bytesGuardCurve = EV_ROUND(PATCH_CURVE_HEADER_SIZE + (info->maxOrder * 4) * sizeof(float)); // truncated NV_PATCH_CURVE_INFO
    info->bytesGuardCurveAllAttr = info->nAttr * info->bytesGuardCurve;                   // just the set of curve info

    if (!(info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR)) {
        // setup QUADRILATERAL PATCH

        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
        } else {    // setup QUADRILATERAL INTEGER TESSELLATION
        }

    } else {
        // setup TRIANGULAR PATCH
        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
        } else {    // setup TRIANGULAR INTEGER TESSELLATION
        }
    }

    return retVal;

nvPatchSetupEnd:
    nvEvalPatchCleanup(info);
    return retVal;
}

unsigned int nvEvalPatchCleanup(NV_PATCH_INFO *info)
{
    int ii;

    if (info->normalPatch && !info->pCache[EV_CACHE_AUTO_NORMAL_SETUP]) {
        MemFree(info->normalPatch);
        info->normalPatch = NULL;
    }
    if (info->UVPatch && !info->pCache[EV_CACHE_UV_SETUP]) {
        MemFree(info->UVPatch);
        info->UVPatch = NULL;
    }

    // indicate that all cache's are not in use
    for (ii = 0;  ii < MAX_EV_CACHE;  ii++) {
        if (info->pCache[ii]) {
            info->pCache[ii]->inUse = 0;
        }
    }

    setFrontFace(info, 0);
    return info->retVal;
}

/*****************************************************************************/
int noflip = 0;

int MaybeTransposeFlipQuad(NV_PATCH_INFO *info)
{
    NV_PATCH_QUAD_INFO *quadInfo = info->quadInfo;
    int doFrac = !!(info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL);
    int index, ii;
    int stitchLeft;
    int stitchBottom;
    float fnuMax, fnvMax, ftemp;

    quadInfo->nu0 = (int)(info->tess.tensor.nu0 + 0.999f);
    quadInfo->nu1 = (int)(info->tess.tensor.nu1 + 0.999f);
    quadInfo->nv0 = (int)(info->tess.tensor.nv0 + 0.999f);
    quadInfo->nv1 = (int)(info->tess.tensor.nv1 + 0.999f);
    if (!doFrac) {
        fnuMax = MAX(quadInfo->nu0, quadInfo->nu1);
        fnvMax = MAX(quadInfo->nv0, quadInfo->nv1);
    } else {
        fnuMax = (info->tess.tensor.nu0 + info->tess.tensor.nu1) / 2.0f;
        fnvMax = (info->tess.tensor.nv0 + info->tess.tensor.nv1) / 2.0f;
    }

if (noflip) {
    quadInfo->uMaxSegs = MAX(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMaxSegs = MAX(quadInfo->nv0, quadInfo->nv1);
    quadInfo->uMinSegs = MIN(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMinSegs = MIN(quadInfo->nv0, quadInfo->nv1);

    return 1;
}
    if (fnvMax > fnuMax) {
        info->flipT = 1;
        info->flags |= NV_PATCH_FLAG_TRANSPOSE;
        EV_SWAP(quadInfo->nu0, quadInfo->nv0, ii);
        EV_SWAP(quadInfo->nu1, quadInfo->nv1, ii);
        EV_SWAP(info->tess.tensor.nu0, info->tess.tensor.nv0, ftemp);
        EV_SWAP(info->tess.tensor.nu1, info->tess.tensor.nv1, ftemp);
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                EV_SWAP(info->maps[index].uorder, info->maps[index].vorder, ii);
                EV_SWAP(info->maps[index].vfStride, info->maps[index].ufStride, ii);
            }
        }
    }

    stitchLeft = (quadInfo->nv0 < quadInfo->nv1);
    if (stitchLeft  &&  !doFrac) {
        info->flags |= NV_PATCH_FLAG_FLIPPED_U;
        info->flipU = 1;
        EV_SWAP(quadInfo->nv0, quadInfo->nv1, ii);
        EV_SWAP(info->tess.tensor.nv0, info->tess.tensor.nv1, ftemp);
    }

    stitchBottom = (quadInfo->nu0 < quadInfo->nu1);
    if (stitchBottom  &&  !doFrac) {
        info->flags |= NV_PATCH_FLAG_FLIPPED_V;
        info->flipV = 1;
        EV_SWAP(quadInfo->nu0, quadInfo->nu1, ii);
        EV_SWAP(info->tess.tensor.nu0, info->tess.tensor.nu1, ftemp);
    }

    info->flipUV = info->flipU ^ info->flipV;
    info->flipTUV = info->flipU ^ info->flipV ^ !!(info->flags & NV_PATCH_FLAG_TRANSPOSE);

    info->reverse ^= info->flipTUV;

    quadInfo->uMaxSegs = MAX(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMaxSegs = MAX(quadInfo->nv0, quadInfo->nv1);
    quadInfo->uMinSegs = MIN(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMinSegs = MIN(quadInfo->nv0, quadInfo->nv1);

    return 1;
}


int MaybeTransposeFlipTri(NV_PATCH_INFO *info)
{
    NV_PATCH_QUAD_INFO *quadInfo = info->quadInfo;
    int index, ii;
    int stitchLeft;
    float ftemp;

    quadInfo->nu0 = (int)(info->tess.tri.n1 + 0.999f);
    quadInfo->nu1 = 1;
    quadInfo->nv0 = (int)(info->tess.tri.n3 + 0.999f);
    quadInfo->nv1 = (int)(info->tess.tri.n2 + 0.999f);

    quadInfo->uMaxSegs = MAX(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMaxSegs = MAX(quadInfo->nv0, quadInfo->nv1);
    quadInfo->uMinSegs = MIN(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMinSegs = MIN(quadInfo->nv0, quadInfo->nv1);

return 1;
    if (quadInfo->nv0 > quadInfo->nu0) {
        info->flipT = 1;
        info->flags |= NV_PATCH_FLAG_TRANSPOSE;
        EV_SWAP(quadInfo->nv0, quadInfo->nu0, ii);
        EV_SWAP(info->tess.tri.n3, info->tess.tri.n1, ftemp);
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                ASSERT(info->maps[index].uorder == info->maps[index].vorder);
                EV_SWAP(info->maps[index].uorder, info->maps[index].vorder, ii);
                EV_SWAP(info->maps[index].vfStride, info->maps[index].ufStride, ii);
            }
        }
    }

    stitchLeft = (quadInfo->nv0 < quadInfo->nv1);
    if (stitchLeft) {
        //ffinfo->flags |= NV_PATCH_FLAG_FLIPPED_U;
        //ffinfo->flipU = 1;
        EV_SWAP(quadInfo->nv0, quadInfo->nu0, ii);
        EV_SWAP(info->tess.tri.n3, info->tess.tri.n1, ftemp);
        for (index = 0; index < info->maxAttr; index++) {
            if (info->evalEnables & (1 << index)) {
                NV_PATCH_MAP_INFO *map = &info->maps[index];
                float *rawData = map->rawData, *dst, *src;
                int uorder = map->uorder;
                int vorder = map->vorder;
                int row, col;
                float diag[4];

                ASSERT(info->maps[index].uorder == info->maps[index].vorder);
                for (row = 0; row < vorder; row++) {
                    src = rawData + row*uorder*4;
                    dst = rawData + ((vorder-1)*uorder + (uorder-1-row)) * 4;
                    for (col = 0; col < uorder - row - 1; col++) {
                        CopyPoint(dst, src);
                        src += 4;
                        dst -= uorder;
                    }
                    CopyPoint(diag, src);
                    CopyPoint(src, dst);
                    CopyPoint(dst, diag);
                }

                map->rawData = rawData + (vorder*uorder - 1) * 4;
                info->maps[index].ufStride = -info->maps[index].ufStride;
                info->maps[index].vfStride = -info->maps[index].vfStride;
            }
        }
    }

    info->flipUV = info->flipU ^ info->flipV;
    info->flipTUV = info->flipU ^ info->flipV ^ !!(info->flags & NV_PATCH_FLAG_TRANSPOSE);

    if (info->flipT) {
        info->reverse ^= 1;
    }

    quadInfo->uMaxSegs = MAX(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMaxSegs = MAX(quadInfo->nv0, quadInfo->nv1);
    quadInfo->uMinSegs = MIN(quadInfo->nu0, quadInfo->nu1);
    quadInfo->vMinSegs = MIN(quadInfo->nv0, quadInfo->nv1);

    return 1;
}

/*****************************************************************************/
// common setup code for patches
void evalCommonSetup(NV_PATCH_INFO *info, float uMaxSegs, float  vMaxSegs)
{
    // determine if swathing is required

    if ((uMaxSegs > info->maxSwatch)  ||  (vMaxSegs > info->maxSwatch)) {
        info->swatchFlags = NV_PATCH_SWATCH;    // for lower level routine to know "swatch mode"
        // calc swatches including the Begin and End stitches
        info->nSwatchU = (uMaxSegs - 1) / info->maxSwatch + 1;
        info->nSwatchV = (vMaxSegs - 1) / info->maxSwatch + 1;

    } else {
        info->swatchFlags = (NV_PATCH_SWATCH_FIRST_ROW | NV_PATCH_SWATCH_LAST_ROW | NV_PATCH_SWATCH_FIRST_COL | NV_PATCH_SWATCH_LAST_COL);
        info->nSwatchU = 1;
        info->nSwatchV = 1;
    }
}

/*****************************************************************************/
unsigned int nvEvalPatch(NV_PATCH_INFO *info)
{
    int i, j;
    unsigned int retVal = NV_PATCH_EVAL_OK;
    NV_PATCH_QUAD_INFO *quadInfo = info->quadInfo;

    if ((info->evalEnables & EV_GUARD_BIT_VERTEX) != EV_GUARD_BIT_VERTEX) {
        nvAssert(0);    //HW absolutely requires position 0 to be active -- if we don't have one bail.
        return NV_PATCH_EVAL_ERR_NOT_HANDLED;

    }

    if (!(info->flags & NV_PATCH_FLAG_TYPE_TRIANGULAR)) {
        // QUAD FRACTIONAL TESSELLATION

        // Tensor product patch
        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
            int transpose = MaybeTransposeFlipQuad(info);
            float nu0 = info->tess.tensor.nu0;
            float nv0 = info->tess.tensor.nv0;
            float nu1 = info->tess.tensor.nu1;
            float nv1 = info->tess.tensor.nv1;
            float nuMid = (nu0 + nu1) / 2.0f;
            float nvMid = (nv0 + nv1) / 2.0f;
            float nu0Old = info->originaltess.tensor.nu0;
            float nv0Old = info->originaltess.tensor.nv0;
            float nu1Old = info->originaltess.tensor.nu1;
            float nv1Old = info->originaltess.tensor.nv1;
            float nuMidOld = (nu0Old + nu1Old) / 2.0f;
            float nvMidOld = (nv0Old + nv1Old) / 2.0f;
            float du0, du1, dv0, dv1, duMid, dvMid;
            float du0Old, du1Old, dv0Old, dv1Old, duMidOld, dvMidOld;
            int u0Segs, u1Segs, v0Segs, v1Segs, uMidSegs, vMidSegs;
            float curvePoints[NV_PATCH_MAX_ORDER][4];

            ComputeFracStepInfo(nu0, &du0, &u0Segs);
            ComputeFracStepInfo(nu1, &du1, &u1Segs);
            ComputeFracStepInfo(nv0, &dv0, &v0Segs);
            ComputeFracStepInfo(nv1, &dv1, &v1Segs);

            ComputeFracStepInfo(nuMid, &duMid, &uMidSegs);
            ComputeFracStepInfo(nvMid, &dvMid, &vMidSegs);

            ComputeFracStepInfo(nu0Old, &du0Old, NULL);
            ComputeFracStepInfo(nu1Old, &du1Old, NULL);
            ComputeFracStepInfo(nv0Old, &dv0Old, NULL);
            ComputeFracStepInfo(nv1Old, &dv1Old, NULL);

            ComputeFracStepInfo(nuMidOld, &duMidOld, NULL);
            ComputeFracStepInfo(nvMidOld, &dvMidOld, NULL);

            evalCommonSetup(info, MAX(u0Segs, u1Segs), MAX(v0Segs, v1Segs));      // various common init for patches

            if (info->swatchFlags & NV_PATCH_SWATCH) {
                // scale to init all matrices and curves to big steps
                du0 *= info->maxSwatch;
                du1 *= info->maxSwatch;
                dv0 *= info->maxSwatch;
                dv1 *= info->maxSwatch;
                duMid *= info->maxSwatch;
                dvMid *= info->maxSwatch;
            }
            if (MAX(u0Segs,u1Segs) > info->maxSwatch || MAX(v0Segs,v1Segs) > info->maxSwatch){
                du0Old *= info->maxSwatch;
                du1Old *= info->maxSwatch;
                dv0Old *= info->maxSwatch;
                dv1Old *= info->maxSwatch;
                duMidOld *= info->maxSwatch;
                dvMidOld *= info->maxSwatch;
            }   

            // Compute FD matrices in each of the 4 orientations
            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int uorder = map->uorder;
                    int vorder = map->vorder;
                    int ufStride = map->ufStride;
                    int vfStride = map->vfStride;

                    nvAssert(quadInfo->m00[i]);
                    nvAssert(quadInfo->m10[i]);
                    nvAssert(quadInfo->m01[i]);
                    nvAssert(quadInfo->m11[i]);
                    nvAssert(quadInfo->guardQF[i]);

                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        // Compute FD matrix for each subpatch
                        ComputeFDMatrixFlip(info, map, uorder, vorder, duMid, dvMid, quadInfo->m00[i],
                                                rawData, 0, 0, info->maps[i].ufStride, info->maps[i].vfStride);
                        ComputeFDMatrixFlip(info, map, uorder, vorder, duMid, dvMid, quadInfo->m10[i],
                                                rawData, 0, uorder-1, -info->maps[i].ufStride, info->maps[i].vfStride);
                        ComputeFDMatrixFlip(info, map, uorder, vorder, duMid, dvMid, quadInfo->m01[i],
                                                rawData, vorder-1, 0, info->maps[i].ufStride, -info->maps[i].vfStride);
                        ComputeFDMatrixFlip(info, map, uorder, vorder, duMid, dvMid, quadInfo->m11[i],
                                                rawData, vorder-1, uorder-1, -info->maps[i].ufStride, -info->maps[i].vfStride);

                        // Compute guard curves /

                        //  |-u10-->|<--u11-|
                        //  |       |       |
                        // v01 m01  |  m11 v11
                        //  |       |       |
                        // \|/      |      \|/
                        //  --------+--------
                        // /|\      |      /|\
                        //  |       |       |
                        // v00 m00  |  m10 v10
                        //  |       |       |
                        //  |-u00-->|<--u01-|
                        //

                        // u00, u01
                        quadInfo->guardQF[i]->guardU00.order = uorder;
                        quadInfo->guardQF[i]->guardU01.order = uorder;
                        ComputeFDCurveCoeffsFlip(info, uorder, du0, &quadInfo->guardQF[i]->guardU00.coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0), info->maps[i].ufStride * sizeof(float), 1, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, uorder, du0, &quadInfo->guardQF[i]->guardU01.coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0), info->maps[i].ufStride * sizeof(float), 0, info->flipU);

                        // u10, u11
                        quadInfo->guardQF[i]->guardU10.order = uorder;
                        quadInfo->guardQF[i]->guardU11.order = uorder;
                        ComputeFDCurveCoeffsFlip(info, uorder, du1, &quadInfo->guardQF[i]->guardU10.coeffs[0][0],
                            pRawData(info, map, rawData, vorder-1, 0), info->maps[i].ufStride * sizeof(float), 1, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, uorder, du1, &quadInfo->guardQF[i]->guardU11.coeffs[0][0],
                            pRawData(info, map, rawData, vorder-1, 0), info->maps[i].ufStride * sizeof(float), 0, info->flipU);

                        // v00, v01
                        quadInfo->guardQF[i]->guardV00.order = vorder;
                        quadInfo->guardQF[i]->guardV01.order = vorder;
                        ComputeFDCurveCoeffsFlip(info, vorder, dv0, &quadInfo->guardQF[i]->guardV00.coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0), info->maps[i].vfStride * sizeof(float), 1, info->flipV);
                        ComputeFDCurveCoeffsFlip(info, vorder, dv0, &quadInfo->guardQF[i]->guardV01.coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0), info->maps[i].vfStride * sizeof(float), 0, info->flipV);

                        // v10, v11
                        quadInfo->guardQF[i]->guardV10.order = vorder;
                        quadInfo->guardQF[i]->guardV11.order = vorder;
                        ComputeFDCurveCoeffsFlip(info, vorder, dv1, &quadInfo->guardQF[i]->guardV10.coeffs[0][0],
                            pRawData(info, map, rawData, 0, uorder-1), info->maps[i].vfStride * sizeof(float), 1, info->flipV);
                        ComputeFDCurveCoeffsFlip(info, vorder, dv1, &quadInfo->guardQF[i]->guardV11.coeffs[0][0],
                            pRawData(info, map, rawData, 0, uorder-1), info->maps[i].vfStride * sizeof(float), 0, info->flipV);

                        // uCenter0, uCenter1
                        quadInfo->guardQF[i]->guardUCenter0.order = uorder;
                        quadInfo->guardQF[i]->guardUCenter1.order = uorder;
                        for (j = 0; j < uorder; j++) {
                            ComputeCurvePoint(vorder, &curvePoints[j][0], pRawData(info, map, rawData, 0, j), vfStride * sizeof(float), .5);
                        }
                        ComputeFDCurveCoeffsFlip(info, uorder, duMid, &quadInfo->guardQF[i]->guardUCenter0.coeffs[0][0],
                            &curvePoints[0][0], 4 * sizeof(float), 1, 0);
                        ComputeFDCurveCoeffsFlip(info, uorder, duMid, &quadInfo->guardQF[i]->guardUCenter1.coeffs[0][0],
                            &curvePoints[0][0], 4 * sizeof(float), 0, 0);

                        // vCenter0, vCenter1
                        quadInfo->guardQF[i]->guardVCenter0.order = vorder;
                        quadInfo->guardQF[i]->guardVCenter1.order = vorder;
                        for (j = 0; j < vorder; j++) {
                            ComputeCurvePoint(uorder, &curvePoints[j][0], pRawData(info, map, rawData, j, 0),
                                                ufStride*sizeof(float),.5);
                        }
                        ComputeFDCurveCoeffsFlip(info, vorder, dvMid, &quadInfo->guardQF[i]->guardVCenter0.coeffs[0][0],
                            &curvePoints[0][0], 4 * sizeof(float), 1, 0);
                        ComputeFDCurveCoeffsFlip(info, vorder, dvMid, &quadInfo->guardQF[i]->guardVCenter1.coeffs[0][0],
                            &curvePoints[0][0], 4 * sizeof(float), 0, 0);

                        // Compute points
                        // DCR seems to me we computed these already above!!! why duplicate it here?
                        // u0Mid
                        ComputeCurvePoint(uorder, quadInfo->guardQF[i]->u0Mid, pRawData(info, map, rawData, 0, 0),
                                                ufStride * sizeof(float), .5);

                        // u1Mid
                        ComputeCurvePoint(uorder, quadInfo->guardQF[i]->u1Mid, pRawData(info, map, rawData, vorder-1, 0),
                                                ufStride * sizeof(float), .5);

                        // v0Mid
                        ComputeCurvePoint(vorder, quadInfo->guardQF[i]->v0Mid, pRawData(info, map, rawData, 0, 0),
                                                vfStride * sizeof(float), .5);

                        // v1Mid
                        ComputeCurvePoint(vorder, quadInfo->guardQF[i]->v1Mid, pRawData(info, map, rawData, 0, uorder-1),
                                                vfStride * sizeof(float), .5);

                        // center
                        for (j = 0; j < uorder; j++) {
                            ComputeCurvePoint(vorder, &curvePoints[j][0], pRawData(info, map, rawData, 0, j),
                                                vfStride * sizeof(float), .5);
                        }
                        ComputeCurvePoint(uorder, quadInfo->guardQF[i]->center, &curvePoints[0][0],
                                                4*sizeof(float), .5);

                        info->originaltess = info->tess;
                        info->maps[i].dirtyFlags = 0;

                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        RetessellateFDMatrix(info, duMidOld, dvMidOld, duMid, dvMid, quadInfo->m00[i]);
                        RetessellateFDMatrix(info, duMidOld, dvMidOld, duMid, dvMid, quadInfo->m10[i]);
                        RetessellateFDMatrix(info, duMidOld, dvMidOld, duMid, dvMid, quadInfo->m01[i]);
                        RetessellateFDMatrix(info, duMidOld, dvMidOld, duMid, dvMid, quadInfo->m11[i]);

                        RetessellateFDCurve(info, du0Old, du0, &quadInfo->guardQF[i]->guardU00);
                        RetessellateFDCurve(info, du0Old, du0, &quadInfo->guardQF[i]->guardU01);
                        RetessellateFDCurve(info, du1Old, du1, &quadInfo->guardQF[i]->guardU10);
                        RetessellateFDCurve(info, du1Old, du1, &quadInfo->guardQF[i]->guardU11);
                        RetessellateFDCurve(info, dv0Old, dv0, &quadInfo->guardQF[i]->guardV00);
                        RetessellateFDCurve(info, dv0Old, dv0, &quadInfo->guardQF[i]->guardV01);
                        RetessellateFDCurve(info, dv1Old, dv1, &quadInfo->guardQF[i]->guardV10);
                        RetessellateFDCurve(info, dv1Old, dv1, &quadInfo->guardQF[i]->guardV11);

                        RetessellateFDCurve(info, duMidOld, duMid, &quadInfo->guardQF[i]->guardUCenter0);
                        RetessellateFDCurve(info, duMidOld, duMid, &quadInfo->guardQF[i]->guardUCenter1);
                        RetessellateFDCurve(info, dvMidOld, dvMid, &quadInfo->guardQF[i]->guardVCenter0);
                        RetessellateFDCurve(info, dvMidOld, dvMid, &quadInfo->guardQF[i]->guardVCenter1);

                        info->originaltess = info->tess;
                        info->maps[i].dirtyFlags &= ~NV_PATCH_DIRTY_TESSELLATION;
                    }
                }
            }

            // DCR: should we be guard curving ALL attributes?  HW doesn't.
            // FBF: the names are mis-leading. They are actually full attribute curves
            // used when doing the regular grid and transitions. But, they are also "guards"
            // in the sense that they are used to provide a consistent set of values
            // for position and normal along the various sub-patch directions.
            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    // Curves
                    quadInfo->pU0[i] = &quadInfo->guardQF[i]->guardU00;
                    quadInfo->pV0[i] = &quadInfo->guardQF[i]->guardV00;
                    quadInfo->pU1[i] = &quadInfo->guardQF[i]->guardUCenter0;
                    quadInfo->pV1[i] = &quadInfo->guardQF[i]->guardVCenter0;

                    // Points
                    quadInfo->pCorners[i][0][0] = quadInfo->m00[i]->data[0][0];
                    quadInfo->pCorners[i][0][1] = quadInfo->guardQF[i]->u0Mid;
                    quadInfo->pCorners[i][1][0] = quadInfo->guardQF[i]->v0Mid;
                    quadInfo->pCorners[i][1][1] = quadInfo->guardQF[i]->center;
                }
            }

            retVal |= DrawFracPatch(info, u0Segs, uMidSegs, v0Segs, vMidSegs, 0, quadInfo->m00);

            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    // Curves
                    quadInfo->pU0[i] = &quadInfo->guardQF[i]->guardU01;
                    quadInfo->pV0[i] = &quadInfo->guardQF[i]->guardV10;
                    quadInfo->pU1[i] = &quadInfo->guardQF[i]->guardUCenter1;
                    quadInfo->pV1[i] = &quadInfo->guardQF[i]->guardVCenter0;

                    // Points
                    quadInfo->pCorners[i][0][0] = quadInfo->m10[i]->data[0][0];
                    quadInfo->pCorners[i][0][1] = quadInfo->guardQF[i]->u0Mid;
                    quadInfo->pCorners[i][1][0] = quadInfo->guardQF[i]->v1Mid;
                    quadInfo->pCorners[i][1][1] = quadInfo->guardQF[i]->center;
                }
            }

            retVal |= DrawFracPatch(info, u0Segs, uMidSegs, v1Segs, vMidSegs, 1, quadInfo->m10);

            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    // Curves
                    quadInfo->pU0[i] = &quadInfo->guardQF[i]->guardU10;
                    quadInfo->pV0[i] = &quadInfo->guardQF[i]->guardV01;
                    quadInfo->pU1[i] = &quadInfo->guardQF[i]->guardUCenter0;
                    quadInfo->pV1[i] = &quadInfo->guardQF[i]->guardVCenter1;

                    // Points
                    quadInfo->pCorners[i][0][0] = quadInfo->m01[i]->data[0][0];
                    quadInfo->pCorners[i][0][1] = quadInfo->guardQF[i]->u1Mid;
                    quadInfo->pCorners[i][1][0] = quadInfo->guardQF[i]->v0Mid;
                    quadInfo->pCorners[i][1][1] = quadInfo->guardQF[i]->center;
                }
            }

            retVal |= DrawFracPatch(info, u1Segs, uMidSegs, v0Segs, vMidSegs, 1, quadInfo->m01);

            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    // Curves
                    quadInfo->pU0[i] = &quadInfo->guardQF[i]->guardU11;
                    quadInfo->pV0[i] = &quadInfo->guardQF[i]->guardV11;
                    quadInfo->pU1[i] = &quadInfo->guardQF[i]->guardUCenter1;
                    quadInfo->pV1[i] = &quadInfo->guardQF[i]->guardVCenter1;

                    // Points
                    quadInfo->pCorners[i][0][0] = quadInfo->m11[i]->data[0][0];
                    quadInfo->pCorners[i][0][1] = quadInfo->guardQF[i]->u1Mid;
                    quadInfo->pCorners[i][1][0] = quadInfo->guardQF[i]->v1Mid;
                    quadInfo->pCorners[i][1][1] = quadInfo->guardQF[i]->center;
                }
            }

            retVal |= DrawFracPatch(info, u1Segs, uMidSegs, v1Segs, vMidSegs, 0, quadInfo->m11);

        /*****************************************************************************/
        } else {    // QUAD INTEGER TESSELLATION
            int transpose = MaybeTransposeFlipQuad(info);
            int stitchBottom = (quadInfo->nu0 < quadInfo->nu1);
            int stitchTop = (quadInfo->nu0 > quadInfo->nu1);
            int stitchLeft = (quadInfo->nv0 < quadInfo->nv1);
            int stitchRight = (quadInfo->nv0 > quadInfo->nv1);

            float du0 = 1.0f / quadInfo->nu0;
            float du1 = 1.0f / quadInfo->nu1;
            float dv0 = 1.0f / quadInfo->nv0;
            float dv1 = 1.0f / quadInfo->nv1;

            float duMax = 1.0f / quadInfo->uMaxSegs;
            float dvMax = 1.0f / quadInfo->vMaxSegs;

            int nu0Old;
            int nv0Old;
            int nu1Old;
            int nv1Old;
            int nuMaxOld;
            int nvMaxOld;
            float du0Old;
            float du1Old;
            float dv0Old;
            float dv1Old;
            float duMaxOld;
            float dvMaxOld;
            int uMaxDir, vMaxDir;
            int stitchUBegin, stitchUEnd, stitchVBegin, stitchVEnd;

            if (info->maps[ATTR_V].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                ComputeEdgeDirections(info, 0, &info->maps[ATTR_V],
                            &quadInfo->u0Dir, &quadInfo->u1Dir, &quadInfo->v0Dir, &quadInfo->v1Dir);
                if (quadInfo->uMaxSegs == 1) {
                    // then reverse transitions in U do not matter
                    quadInfo->u0Dir = quadInfo->u1Dir = 1;
                }
                if (quadInfo->vMaxSegs == 1) {
                    // then reverse transitions in V do not matter
                    quadInfo->v0Dir = quadInfo->v1Dir = 1;
                }
            }

            // Fill in directions of max and min edges
            if (quadInfo->nu0 >= quadInfo->nu1) {
                uMaxDir = quadInfo->u0Dir;
            } else {
                uMaxDir = quadInfo->u1Dir;
            }
            if (quadInfo->nv0 >= quadInfo->nv1) {
                vMaxDir = quadInfo->v0Dir;
            } else {
                vMaxDir = quadInfo->v1Dir;
            }

            if (info->flags & NV_PATCH_FLAG_SOME_DIRTY_TESS) {
                // compute the du/dvMaxOld for retessellations
                nu0Old = (int)(info->originaltess.tensor.nu0 + 0.999f);
                nv0Old = (int)(info->originaltess.tensor.nv0 + 0.999f);
                nu1Old = (int)(info->originaltess.tensor.nu1 + 0.999f);
                nv1Old = (int)(info->originaltess.tensor.nv1 + 0.999f);
                nuMaxOld = MAX(nu0Old,nu1Old);
                nvMaxOld = MAX(nv0Old,nv1Old);
                du0Old = 1.0f / nu0Old;
                du1Old = 1.0f / nu1Old;
                dv0Old = 1.0f / nv0Old;
                dv1Old = 1.0f / nv1Old;
                duMaxOld = 1.0f / nuMaxOld;
                dvMaxOld = 1.0f / nvMaxOld;
            }

            info->originaltess = info->tess;
            quadInfo->uMaxDir = uMaxDir;
            quadInfo->vMaxDir = vMaxDir;
            quadInfo->du0 = du0;
            quadInfo->du1 = du1;
            quadInfo->dv0 = dv0;
            quadInfo->dv1 = dv1;
            quadInfo->duMax = duMax;
            quadInfo->dvMax = dvMax;

            evalCommonSetup(info, quadInfo->uMaxSegs, quadInfo->vMaxSegs);      // various common init for patches

            if (info->swatchFlags & NV_PATCH_SWATCH) {
                // scale to init all matrices and curves to big steps
                du0 *= info->maxSwatch;
                du1 *= info->maxSwatch;
                dv0 *= info->maxSwatch;
                dv1 *= info->maxSwatch;
                duMax *= info->maxSwatch;
                dvMax *= info->maxSwatch;
            }
            if(nuMaxOld > info->maxSwatch || nvMaxOld > info->maxSwatch){
                du0Old *= info->maxSwatch;
                du1Old *= info->maxSwatch;
                dv0Old *= info->maxSwatch;
                dv1Old *= info->maxSwatch;
                duMaxOld *= info->maxSwatch;
                dvMaxOld *= info->maxSwatch;
            }

            // We always tessellate in the "MaxDir" direction
            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int uorder = map->uorder;
                    int vorder = map->vorder;

                    nvAssert(quadInfo->m00[i]);
                    nvAssert(quadInfo->pU0[i]);
                    nvAssert(quadInfo->pU1[i]);
                    nvAssert(quadInfo->pV0[i]);
                    nvAssert(quadInfo->pV1[i]);
                    nvAssert(quadInfo->pVInner[i]);
                    nvAssert(quadInfo->pVInner[i]);

                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        // compute FDMatrix given the modified origin according to u/vDir
                        if (vMaxDir == 1) {
                            if (uMaxDir == 1) {
                                ComputeFDMatrixFlip(info, map, uorder, vorder, duMax, dvMax, quadInfo->m00[i],
                                    rawData, 0, 0, info->maps[i].ufStride, info->maps[i].vfStride);
                            } else {
                                ComputeFDMatrixFlip(info, map, uorder, vorder, duMax, dvMax, quadInfo->m00[i],
                                    rawData, 0, uorder-1, -info->maps[i].ufStride, info->maps[i].vfStride);
                            }
                        } else {
                            if (uMaxDir == 1) {
                                ComputeFDMatrixFlip(info, map, uorder, vorder, duMax, dvMax, quadInfo->m00[i],
                                    rawData, vorder-1, 0, info->maps[i].ufStride, -info->maps[i].vfStride);
                            } else {
                                ComputeFDMatrixFlip(info, map, uorder, vorder, duMax, dvMax, quadInfo->m00[i],
                                    rawData, vorder-1, uorder-1, -info->maps[i].ufStride, -info->maps[i].vfStride);
                            }
                        }

                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        RetessellateFDMatrix(info, duMaxOld, dvMaxOld, duMax, dvMax, quadInfo->m00[i]);
                    }
                }
            }

            // Reverse transitions may cause stitches
            // If dir's are not equal, AND there are no stitches for other reasons,
            // AND it's not degenerate in this direction, then ...
            if ((quadInfo->u0Dir != quadInfo->u1Dir) && !stitchBottom && !stitchTop && (quadInfo->nu0 > 1)) {
                nvAssert(quadInfo->nu0 == quadInfo->nu1);
                stitchTop = 1;          // make a stitch for the reversal
            }
            if ((quadInfo->v0Dir != quadInfo->v1Dir) && !stitchLeft && !stitchRight && (quadInfo->nv0 > 1)) {
                nvAssert(quadInfo->nv0 == quadInfo->nv1);
                stitchRight = 1;        // make a stitch for the reversal
            }

            // Decide where the stitching occurs w.r.t. the regular region
            if (uMaxDir == 1) {
                stitchUBegin = stitchLeft;
                stitchUEnd = stitchRight;
            } else {
                stitchUBegin = stitchRight;
                stitchUEnd = stitchLeft;
            }
            if (vMaxDir == 1) {
                stitchVBegin = stitchBottom;
                stitchVEnd = stitchTop;
            } else {
                stitchVBegin = stitchTop;
                stitchVEnd = stitchBottom;
            }

            quadInfo->stitchLeft   = stitchLeft;
            quadInfo->stitchRight  = stitchRight;
            quadInfo->stitchBottom = stitchBottom;
            quadInfo->stitchTop    = stitchTop;
            quadInfo->stitchUBegin = stitchUBegin;
            quadInfo->stitchUEnd   = stitchUEnd;
            quadInfo->stitchVBegin = stitchVBegin;
            quadInfo->stitchVEnd   = stitchVEnd;

            // calc if U/V inner guards required
            quadInfo->needUInner = (quadInfo->vMaxSegs > 1) && (stitchBottom || stitchTop);
            quadInfo->needVInner = (quadInfo->uMaxSegs > 1) && (stitchLeft || stitchRight);

            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int uorder = map->uorder;
                    int vorder = map->vorder;

                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        // Store the corner points
                        getRawData(info, &info->maps[i], rawData, 0,               0, quadInfo->pCorners[i][0][0]);
                        getRawData(info, &info->maps[i], rawData, 0,        uorder-1, quadInfo->pCorners[i][0][1]);
                        getRawData(info, &info->maps[i], rawData, vorder-1, 0,        quadInfo->pCorners[i][1][0]);
                        getRawData(info, &info->maps[i], rawData, vorder-1, uorder-1, quadInfo->pCorners[i][1][1]);

                        // Compute U boundary curves
                        quadInfo->pU0[i]->order = uorder;
                        quadInfo->pU1[i]->order = uorder;
                        ComputeFDCurveCoeffsFlip(info, uorder, du0, &quadInfo->pU0[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            info->maps[i].ufStride * sizeof(float), quadInfo->u0Dir, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, uorder, du1, &quadInfo->pU1[i]->coeffs[0][0],
                            pRawData(info, map, rawData, vorder-1, 0),
                            info->maps[i].ufStride * sizeof(float), quadInfo->u1Dir, info->flipU);

                        // Compute V boundary curves
                        quadInfo->pV0[i]->order = vorder;
                        quadInfo->pV1[i]->order = vorder;
                        ComputeFDCurveCoeffsFlip(info, vorder, dv0, &quadInfo->pV0[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            info->maps[i].vfStride * sizeof(float), quadInfo->v0Dir, info->flipV);
                        ComputeFDCurveCoeffsFlip(info, vorder, dv1, &quadInfo->pV1[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, uorder-1),
                            info->maps[i].vfStride * sizeof(float), quadInfo->v1Dir, info->flipV);

                        info->maps[i].dirtyFlags = 0;

                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        // Recompute U boundary curves
                        RetessellateFDCurve(info, du0Old, du0, quadInfo->pU0[i]);
                        RetessellateFDCurve(info, du1Old, du1, quadInfo->pU1[i]);

                        // Recompute V boundary curves
                        RetessellateFDCurve(info, dv0Old, dv0, quadInfo->pV0[i]);
                        RetessellateFDCurve(info, dv1Old, dv1, quadInfo->pV1[i]);

                        info->maps[i].dirtyFlags &= ~NV_PATCH_DIRTY_TESSELLATION;
                    }

                    // If we're stitching on the top or bottom, do a U inner guard
                    if (quadInfo->needUInner) {
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, quadInfo->m00[i]);
RetessellateFDMatrix(info, 1.f, dvMax, 1.f, quadInfo->dvMax, &info->tempMatrix);    // big to small
                        if (stitchVBegin) {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pUInner[i], 0,  &info->tempMatrix, 0, 1);
                        } else {
                            nvAssert(stitchVEnd);
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pUInner[i], 0,  &info->tempMatrix, 0, quadInfo->vMaxSegs-1);
                        }
                    }

                    // If we're stitching on the left or right, do a V inner guard
                    if (quadInfo->needVInner) {
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, quadInfo->m00[i]);
RetessellateFDMatrix(info, duMax, 1.f, quadInfo->duMax, 1.f, &info->tempMatrix);    // big to small
                        if (stitchUBegin) {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pVInner[i], 1,  &info->tempMatrix, 1, 0);
                        } else {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pVInner[i], 1,  &info->tempMatrix, quadInfo->uMaxSegs-1, 0);
                        }
                    }
                }
            }

            retVal |= DrawIntPatch(info, quadInfo, quadInfo->m00);
        }

    /*****************************************************************************/
    } else {
        // TRI FRAC TESSELLATION
        if (info->flags & NV_PATCH_FLAG_TESS_FRACTIONAL) {
            int transpose = MaybeTransposeFlipTri(info);
            float n1 = info->tess.tri.n1;
            float n2 = info->tess.tri.n2;
            float n3 = info->tess.tri.n3;
            float nMid = (n1 + n2 + n3)/3.0f;
            float n1Old = info->originaltess.tri.n1;
            float n2Old = info->originaltess.tri.n2;
            float n3Old = info->originaltess.tri.n3;
            float nMidOld = (n1 + n2 + n3)/3.0f;
            float duv[3], duvMid, duvOld[3], duvMidOld;
            int segs[3], midSegs, vMax;
            FDMatrix *m[3][NV_PATCH_NUMBER_OF_ATTRIBS];

            //guard = NULL;
            for (i = 0; i < info->maxAttr; i++) {
                m[0][i] = quadInfo->m00[i];
                m[1][i] = quadInfo->m10[i];
                m[2][i] = quadInfo->m01[i];
            }

            ComputeFracStepInfo(n1, &duv[0], &segs[0]);
            ComputeFracStepInfo(n2, &duv[1], &segs[1]);
            ComputeFracStepInfo(n3, &duv[2], &segs[2]);

            ComputeFracStepInfo(nMid, &duvMid, &midSegs);
            duvMid *= 2;

            ComputeFracStepInfo(n1Old, &duvOld[0], NULL);
            ComputeFracStepInfo(n2Old, &duvOld[1], NULL);
            ComputeFracStepInfo(n3Old, &duvOld[2], NULL);

            ComputeFracStepInfo(nMidOld, &duvMidOld, NULL);
            duvMidOld *= 2;

            vMax = MAX(segs[1], segs[2]);
            evalCommonSetup(info, MAX(segs[0], midSegs), MAX(vMax, midSegs));        // various common init for patches

            if (info->swatchFlags & NV_PATCH_SWATCH) {
                // scale to init all matrices and curves to big steps
                duv[0] *= info->maxSwatch;
                duv[1] *= info->maxSwatch;
                duv[2] *= info->maxSwatch;
                duvMid *= info->maxSwatch;
            }

            // Compute FD matrices in each of the 3 orientations
            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int order = map->uorder;
                    int ufStride = map->ufStride;
                    int vfStride = map->vfStride;
                    int k, l;

                    nvAssert(info->maps[i].uorder == info->maps[i].vorder);

                    // Compute FD matrix for each subpatch
                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        for (j = 0; j < 3; j++) {
                            info->reparam.rows = info->reparam.columns = order;
                            for (l = 0; l < order; l++) {       // V order
                                for (k = 0; k < order-l; k++) { // U order
                                    getRawData(info, &info->maps[i], rawData, l, k, info->reparam.data[l][k]);
                                }
                            }
                            ReparameterizeTriPatch(info, &info->reparam, m[j][i], j, 1);

                            quadInfo->guardTF[i]->guardCenter[j].order = order;
                            if (TriPatchLayout[j].centerCurve) {
                                ComputeFDCurveCoeffsFlip(info, order, duvMid, &quadInfo->guardTF[i]->guardCenter[j].coeffs[0][0],
                                    &m[j][i]->data[order-1][0][0],
                                    4 * sizeof(float), 1, 0);
                            } else {
                                ComputeFDCurveCoeffsFlip(info, order, duvMid, &quadInfo->guardTF[i]->guardCenter[j].coeffs[0][0],
                                    &m[j][i]->data[0][order-1][0],
                                    4*NV_PATCH_MAX_ORDER*sizeof(float), 1, 0);
                            }

                            ComputeFDMatrixFlip(info, 0, order, order, duvMid, duvMid, m[j][i],
                                &m[j][i]->data[0][0][0], 0, 0, 4, 4*NV_PATCH_MAX_ORDER);
                        }

                        // Compute guard curves /

                        //  |\
                        //  | \
                        //  |  \
                        // 20   11
                        //  |     \
                        //  |      \|
                        // \|/     -\
                        //  +        +
                        // /|\-    _/ \-
                        //  |  \-+/   |\
                        //  |     \     \
                        // 21      |    10
                        //  |      \      \
                        //  |       |      \
                        //  |--00-->|<---01-|
                        //
                        // 00, 01
                        quadInfo->guardTF[i]->guard[0][0].order = order;
                        quadInfo->guardTF[i]->guard[0][1].order = order;

                        ComputeFDCurveCoeffsFlip(info, order, duv[0], &quadInfo->guardTF[i]->guard[0][0].coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            ufStride * sizeof(float), 1, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, order, duv[0], &quadInfo->guardTF[i]->guard[0][1].coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            ufStride * sizeof(float), 0, info->flipU);

                        // 10, 11
                        quadInfo->guardTF[i]->guard[1][0].order = order;
                        quadInfo->guardTF[i]->guard[1][1].order = order;
                        ComputeFDCurveCoeffsFlip(info, order, duv[1], &quadInfo->guardTF[i]->guard[1][0].coeffs[0][0],
                            pRawData(info, map, rawData, 0, order-1),
                            (vfStride-4) * sizeof(float), 1, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, order, duv[1], &quadInfo->guardTF[i]->guard[1][1].coeffs[0][0],
                            pRawData(info, map, rawData, 0, order-1),
                            (vfStride-4) * sizeof(float), 0, info->flipU);

                        // 20, 21
                        quadInfo->guardTF[i]->guard[2][0].order = order;
                        quadInfo->guardTF[i]->guard[2][1].order = order;
                        ComputeFDCurveCoeffsFlip(info, order, duv[2], &quadInfo->guardTF[i]->guard[2][0].coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            vfStride * sizeof(float), 0, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, order, duv[2], &quadInfo->guardTF[i]->guard[2][1].coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            vfStride * sizeof(float), 1, info->flipU);

                        // Compute points
                        // mid0,1,2
                        ComputeCurvePoint(order, quadInfo->guardTF[i]->mid[0],
                                            pRawData(info, map, rawData, 0, 0),
                                            ufStride * sizeof(float), .5);
                        ComputeCurvePoint(order, quadInfo->guardTF[i]->mid[1],
                                            pRawData(info, map, rawData, 0, order-1),
                                            (vfStride-4) * sizeof(float), .5);
                        ComputeCurvePoint(order, quadInfo->guardTF[i]->mid[2],
                                            pRawData(info, map, rawData, 0, 0),
                                            vfStride * sizeof(float), .5);

                        // center
                        ComputeTriPatchCenter(order, quadInfo->guardTF[i]->center, pRawData(info, map, rawData, 0, 0),
                            ufStride * sizeof(float), vfStride * sizeof(float));

                        info->maps[i].dirtyFlags = 0;
                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        for (j = 0; j < 3; j++) {
                            RetessellateFDMatrix(info, duvMidOld, duvMidOld, duvMid, duvMid, m[j][i]);

                            RetessellateFDCurve(info, duvOld[j], duv[j], &quadInfo->guardTF[i]->guard[j][0]);
                            RetessellateFDCurve(info, duvOld[j], duv[j], &quadInfo->guardTF[i]->guard[j][1]);

                            RetessellateFDCurve(info, duvMidOld, duvMid, &quadInfo->guardTF[i]->guardCenter[j]);
                        }

                        info->maps[i].dirtyFlags &= ~NV_PATCH_DIRTY_TESSELLATION;
                    }
                }
            }
            info->originaltess = info->tess;

            for (j = 0; j < 3; j++) {
                int uSide   = TriPatchLayout[j].uSide;
                int vSide   = TriPatchLayout[j].vSide;
                int uDir    = TriPatchLayout[j].uDir;
                int vDir    = TriPatchLayout[j].vDir;
                int reverse = TriPatchLayout[j].reverse;

                for (i = 0; i < info->maxAttr; i++) {
                    if (info->evalEnables & (1 << i)) {
                        // Curves
                        quadInfo->pU0[i] = &quadInfo->guardTF[i]->guard[uSide][uDir];
                        quadInfo->pV0[i] = &quadInfo->guardTF[i]->guard[vSide][vDir];
                        quadInfo->pU1[i] = &quadInfo->guardTF[i]->guardCenter[vSide];
                        quadInfo->pV1[i] = &quadInfo->guardTF[i]->guardCenter[uSide];

                        // Points
                        quadInfo->pCorners[i][0][0] = m[j][i]->data[0][0];
                        quadInfo->pCorners[i][0][1] = quadInfo->guardTF[i]->mid[uSide];
                        quadInfo->pCorners[i][1][0] = quadInfo->guardTF[i]->mid[vSide];
                        quadInfo->pCorners[i][1][1] = quadInfo->guardTF[i]->center;
                    }
                }

                retVal |= DrawFracPatch(info, segs[uSide], midSegs, segs[vSide], midSegs, reverse, m[j]);
            }

        /*****************************************************************************/
        } else {    // TRI INTEGER TESSELLATION
            int transpose = MaybeTransposeFlipTri(info);

            float du0 = 1.0f / quadInfo->nu0;
            float du1 = 1.0f;
            float dv0 = 1.0f / quadInfo->nv0;
            float dv1 = 1.0f / quadInfo->nv1;
            float duMax = 1.0f / quadInfo->uMaxSegs;
            float dvMax = 1.0f / quadInfo->vMaxSegs;

            int n1Old = (int)(info->originaltess.tri.n1 + 0.999f);
            int n2Old = (int)(info->originaltess.tri.n2 + 0.999f);
            int n3Old = (int)(info->originaltess.tri.n3 + 0.999f);
            int nuMaxOld = n1Old;
            int nvMaxOld = MAX(n2Old,n3Old);

            float du0Old = 1.0f / n1Old;
            float du1Old = 1.0f;
            float dv0Old = 1.0f / n3Old;
            float dv1Old = 1.0f / n2Old;
            float duMaxOld = 1.0f / nuMaxOld;
            float dvMaxOld = 1.0f / nvMaxOld;

            int uMaxDir, vMaxDir;
            int stitchBottom = 0;
            int stitchTop = (quadInfo->nu0 > 1);
            int stitchLeft = (quadInfo->nv0 < quadInfo->nv1);
            int stitchRight = (quadInfo->nv0 > quadInfo->nv1);
            int stitchUBegin, stitchUEnd, stitchVBegin, stitchVEnd;

            if (info->maps[ATTR_V].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                //only compute edge directions when I have some map info around
                ComputeEdgeDirections(info, 1, &info->maps[ATTR_V],
                        &quadInfo->u0Dir, &quadInfo->u1Dir, &quadInfo->v0Dir, &quadInfo->v1Dir);
                if (quadInfo->uMaxSegs == 1) {
                    // then reverse transitions in U do not matter
                    quadInfo->u0Dir = quadInfo->u1Dir = 1;
                }
                if (quadInfo->vMaxSegs == 1) {
                    // then reverse transitions in V do not matter
                    quadInfo->v0Dir = quadInfo->v1Dir = 1;
                }
            }

            // Fill in directions of max and min edges
            uMaxDir = quadInfo->u0Dir;
            if (quadInfo->nv0 >= quadInfo->nv1) {
                vMaxDir = quadInfo->v0Dir;
            } else {
                vMaxDir = quadInfo->v1Dir;
            }

            info->originaltess = info->tess;
            quadInfo->uMaxDir = uMaxDir;
            quadInfo->vMaxDir = vMaxDir;
            quadInfo->du0 = du0;
            quadInfo->du1 = du1;
            quadInfo->dv0 = dv0;
            quadInfo->dv1 = dv1;
            quadInfo->duMax = duMax;
            quadInfo->dvMax = dvMax;

            evalCommonSetup(info, quadInfo->uMaxSegs, quadInfo->vMaxSegs);      // various common init for patches

            if (info->swatchFlags & NV_PATCH_SWATCH) {
                // scale to init all matrices and curves to big steps
                du0 *= info->maxSwatch;
                du1 *= info->maxSwatch;
                dv0 *= info->maxSwatch;
                dv1 *= info->maxSwatch;
                duMax *= info->maxSwatch;
                dvMax *= info->maxSwatch;
            }
            if(nuMaxOld > info->maxSwatch || nvMaxOld > info->maxSwatch){      // various common init for patches
                du0Old *= info->maxSwatch;
                du1Old *= info->maxSwatch;
                dv0Old *= info->maxSwatch;
                dv1Old *= info->maxSwatch;
                duMaxOld *= info->maxSwatch;
                dvMaxOld *= info->maxSwatch;
            }

            // Compute FD matrices in each of the 3 orientations
            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int order = map->uorder;
                    int ufStride = map->ufStride;
                    int vfStride = map->vfStride;
                    int k, l;

                    nvAssert(info->maps[i].uorder == info->maps[i].vorder);

                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        // Compute FD matrix for each subpatch
                        info->reparam.rows = info->reparam.columns = order;
                        for (l = 0; l < order; l++) {
                            for (k = 0; k < order-l; k++) {
                                getRawData(info, &info->maps[i], rawData, l, k, info->reparam.data[l][k]);
                            }
                        }

                        ReparameterizeTriPatch(info, &info->reparam, quadInfo->m00[i], 0, 0);

                        if (vMaxDir == 1) {
                            if (uMaxDir == 1) {
                                ComputeFDMatrixFlip(info, 0, order, order, duMax, dvMax, quadInfo->m00[i],
                                    &quadInfo->m00[i]->data[0][0][0], 0, 0, 4, 4 * NV_PATCH_MAX_ORDER);
                            } else {
                                ComputeFDMatrixFlip(info, 0, order, order, duMax, dvMax, quadInfo->m00[i],
                                    &quadInfo->m00[i]->data[0][order-1][0], 0, 0, -4, 4 * NV_PATCH_MAX_ORDER);
                            }
                        } else {
                            if (uMaxDir == 1) {
                                ComputeFDMatrixFlip(info, 0, order, order, duMax, dvMax, quadInfo->m00[i],
                                    &quadInfo->m00[i]->data[order-1][0][0], 0, 0, 4, -4 * NV_PATCH_MAX_ORDER);
                            } else {
                                ComputeFDMatrixFlip(info, 0, order, order, duMax, dvMax, quadInfo->m00[i],
                                    &quadInfo->m00[i]->data[order-1][order-1][0], 0, 0, -4, -4 * NV_PATCH_MAX_ORDER);
                            }
                        }

                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        RetessellateFDMatrix(info, duMaxOld, dvMaxOld, duMax, dvMax, quadInfo->m00[i]);
                    }

                }
            }

            // Reverse transitions may cause stitches
            // If dir's are not equal, AND there are no stitches for other reasons,
            // AND it's not degenerate in this direction, then ...
            if ((quadInfo->u0Dir != quadInfo->u1Dir) && !stitchBottom && !stitchTop && (quadInfo->nu0 > 1)) {
                stitchTop = 1;          // make a stitch for the reversal
            }
            if ((quadInfo->v0Dir != quadInfo->v1Dir) && !stitchLeft && !stitchRight && (quadInfo->nv1 > 1)) {
                nvAssert(quadInfo->nv1 == quadInfo->nv0);
                stitchRight = 1;        // make a stitch for the reversal
            }

            // Decide where the stitching occurs w.r.t. the regular region
            if (uMaxDir == 1) {
                stitchUBegin = stitchLeft;
                stitchUEnd = stitchRight;
            } else {
                stitchUBegin = stitchRight;
                stitchUEnd = stitchLeft;
            }
            if (vMaxDir == 1) {
                stitchVBegin = stitchBottom;
                stitchVEnd = stitchTop;
            } else {
                stitchVBegin = stitchTop;
                stitchVEnd = stitchBottom;
            }

            quadInfo->stitchLeft   = stitchLeft;
            quadInfo->stitchRight  = stitchRight;
            quadInfo->stitchBottom = stitchBottom;
            quadInfo->stitchTop    = stitchTop;
            quadInfo->stitchUBegin = stitchUBegin;
            quadInfo->stitchUEnd   = stitchUEnd;
            quadInfo->stitchVBegin = stitchVBegin;
            quadInfo->stitchVEnd   = stitchVEnd;

            // calc if U/V inner guards required
            quadInfo->needUInner = (quadInfo->vMaxSegs > 1) && (stitchBottom || stitchTop);
            quadInfo->needVInner = (quadInfo->uMaxSegs > 1) && (stitchLeft || stitchRight);

            for (i = 0; i < info->maxAttr; i++) {
                if (info->evalEnables & (1 << i)) {
                    NV_PATCH_MAP_INFO *map = &info->maps[i];
                    float *rawData = map->rawData;
                    int uorder = map->uorder;
                    int vorder = map->vorder;

                    if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_CONTROL_POINTS) {
                        // Store the corner points
                        getRawData(info, &info->maps[i], rawData, 0,        0,        quadInfo->pCorners[i][0][0]);
                        getRawData(info, &info->maps[i], rawData, 0,        uorder-1, quadInfo->pCorners[i][0][1]);
                        getRawData(info, &info->maps[i], rawData, vorder-1, 0,        quadInfo->pCorners[i][1][0]);

                        CopyPoint(quadInfo->pCorners[i][1][1], quadInfo->pCorners[i][1][0]);

                        // Compute U boundary curves
                        quadInfo->pU0[i]->order = uorder;
                        quadInfo->pU1[i]->order = uorder;
                        ComputeFDCurveCoeffsFlip(info, uorder, du0, &quadInfo->pU0[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            info->maps[i].ufStride * sizeof(float),quadInfo->u0Dir, info->flipU);
                        ComputeFDCurveCoeffsFlip(info, uorder, du1, &quadInfo->pU1[i]->coeffs[0][0],
                            pRawData(info, map, rawData, vorder-1, 0),
                            0 /* stride at top */, quadInfo->u1Dir, info->flipU);

                        // Compute V boundary curves
                        quadInfo->pV0[i]->order = vorder;
                        quadInfo->pV1[i]->order = vorder;
                        ComputeFDCurveCoeffsFlip(info, vorder, dv0, &quadInfo->pV0[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, 0),
                            info->maps[i].vfStride * sizeof(float), quadInfo->v0Dir, info->flipV);
                        ComputeFDCurveCoeffsFlip(info, vorder, dv1, &quadInfo->pV1[i]->coeffs[0][0],
                            pRawData(info, map, rawData, 0, uorder-1),
                            (info->maps[i].vfStride-4) * sizeof(float), quadInfo->v1Dir, info->flipV);

                        info->maps[i].dirtyFlags = 0;

                    } else if (info->maps[i].dirtyFlags & NV_PATCH_DIRTY_TESSELLATION) {
                        // Compute U boundary curves
                        RetessellateFDCurve(info, du0Old, du0, quadInfo->pU0[i]);
                        RetessellateFDCurve(info, du1Old, du1, quadInfo->pU1[i]);
                        // Compute V boundary curves
                        RetessellateFDCurve(info, dv0Old, dv0, quadInfo->pV0[i]);
                        RetessellateFDCurve(info, dv1Old, dv1, quadInfo->pV1[i]);

                        info->maps[i].dirtyFlags &= ~NV_PATCH_DIRTY_TESSELLATION;
                    }

                    // If we're stitching on the top or bottom, do a U inner guard
                    if (quadInfo->needUInner) {
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, quadInfo->m00[i]);
RetessellateFDMatrix(info, 1.f, dvMax, 1.f, quadInfo->dvMax, &info->tempMatrix);    // big to small
                        if (stitchVBegin) {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pUInner[i], 0,  &info->tempMatrix, 0, 1);
                        } else {
                            nvAssert(stitchVEnd);
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pUInner[i], 0,  &info->tempMatrix, 0, quadInfo->vMaxSegs-1);
                        }
                    }

                    // If we're stitching on the left or right, do a V inner guard
                    if (quadInfo->needVInner) {
// XXX maybe do this in lower routine ?
CopyMatrix(info, &info->tempMatrix, quadInfo->m00[i]);
RetessellateFDMatrix(info, duMax, 1.f, quadInfo->duMax, 1.f, &info->tempMatrix);    // big to small
                        if (stitchUBegin) {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pVInner[i], 1,  &info->tempMatrix, 1, 0);
                        } else {
                            OffsetFDMatrix_Extract_Discard(info, quadInfo->pVInner[i], 1,  &info->tempMatrix, quadInfo->uMaxSegs-1, 0);
                        }
                    }
                }
            }

            retVal |= DrawIntPatch(info, quadInfo, quadInfo->m00);
        }
    }

    return retVal;
}

/*****************************************************************************/
int evAllocInitWithCache(NV_PATCH_INFO *info, void *context, NV_PATCH_ALLOC_CONTROL *pevMemory,
                            int tBytes, NV_PATCH_ALLOC_CACHE *pCache)
{
    nvAssert(!(tBytes & (sizeof(void *) - 1)));
    if (pCache && pCache->pBaseCache) {
        if (pCache->bytesAllocCache >= tBytes) {
            // requested allocation fit in cached allocation
            nvAssert(!pCache->inUse);
            nvAssert(pCache->contextCache == context);
            pCache->inUse = 1;
            pCache->countFreeCheck = 0;
            pevMemory->context = context;
            pevMemory->pBase = pevMemory->pAvail = pCache->pBaseCache;
            pevMemory->bytesAlloc = tBytes;
            pevMemory->bytesUsed = 0;
            pevMemory->pCache = pCache;
            return 0;
        }
        // need new alloc, free up the old
        MemFree(pCache->pBaseCache);
    }

    // must do new alloc
    pevMemory->context = context;
    pevMemory->pBase = MemAlloc(tBytes);
    pevMemory->pAvail = pevMemory->pBase;
    pevMemory->bytesAlloc = tBytes;
    pevMemory->bytesUsed = 0;
    pevMemory->pCache = pCache;

    if (pCache) {
        pCache->contextCache = context;
        pCache->pBaseCache = pevMemory->pBase;
        pCache->bytesAllocCache = tBytes;
        pCache->inUse = 1;
        pCache->countFreeCheck = 0;
    }
    if (pevMemory->pBase) {
        return 0;
    }
    return 1;
}

const int attrHwToSw[NV_PATCH_NUMBER_OF_ATTRIBS] = {
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15,
    };

const int attrSwToHw[NV_PATCH_NUMBER_OF_ATTRIBS] = {
        0, 1, 2, 3, 4, 5, 6, 7,
        8, 9, 10, 11, 12, 13, 14, 15,
    };

} // end of namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\pixeljar.cpp ===
/*==========================================================================;
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       pixeljar.cpp
 *  Content:    Implementation for all D3D classes that contain pixels.
 *
 ***************************************************************************/

#include "precomp.hpp"      

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

//
// Public helper methods
//

//---------------------------------------------------------------------------- 
// Calculates the log2 of a number that is a power-of-two.
//
DWORD __fastcall Log2(
    DWORD Value
    )
{
    ASSERT(Value);
    ASSERT((Value & (Value - 1)) == 0);

    // The asserts force the parameter out of ecx, reload it manually.
    __asm 
    {
        mov ecx, [Value]
        bsf eax,ecx 
    }
}

//----------------------------------------------------------------------------
// Maps a swizzled D3DFORMAT to its linear counterpart.  This should
// only be used from CDevice::InitializeFrameBuffers as we want to keep
// our lies and gibberish to a minimum.
//
D3DFORMAT MapToLinearD3DFORMAT(
    D3DFORMAT Format
    )
{
    switch (Format)
    {
    case D3DFMT_A8R8G8B8:
        Format = D3DFMT_LIN_A8R8G8B8;
        break;

    case D3DFMT_X8R8G8B8:
        Format = D3DFMT_LIN_X8R8G8B8;
        break;

    case D3DFMT_R5G6B5:
        Format = D3DFMT_LIN_R5G6B5;
        break;

    case D3DFMT_X1R5G5B5:
        Format = D3DFMT_LIN_X1R5G5B5;
        break;

    case D3DFMT_A1R5G5B5:
        Format = D3DFMT_LIN_A1R5G5B5;
        break;

    case D3DFMT_D16:
        Format = D3DFMT_LIN_D16;
        break;

    case D3DFMT_D24S8:
        Format = D3DFMT_LIN_D24S8;
        break;

    case D3DFMT_F16:
        Format = D3DFMT_LIN_F16;
        break;

    case D3DFMT_F24S8:
        Format = D3DFMT_LIN_F24S8;
        break;
    }

    return Format;
}

//------------------------------------------------------------------------
// Determine the number of bits per pixel required for this format for
// video mode changes.
//
DWORD VideoBitsPerPixelOfD3DFORMAT(
    DWORD Format
    )
{
    DWORD bitsPerPixel;

    if ((Format == D3DFMT_X1R5G5B5) || (Format == D3DFMT_LIN_X1R5G5B5))
    {
        bitsPerPixel = 15;
    }
    else
    {
        bitsPerPixel = BitsPerPixelOfD3DFORMAT(Format);
    }

    return bitsPerPixel;
}

//
// Private helpers
//

//----------------------------------------------------------------------------
// Determine if this is a compressed format.
//
bool IsCompressedD3DFORMAT(
    DWORD Format
    )
{
    bool retval = false;

    switch(Format)
    {
    case D3DFMT_DXT1:
    case D3DFMT_DXT2:  // DXT3
    case D3DFMT_DXT4:  // DXT4
        retval = true;
        break;
    }

    return retval;
}

//----------------------------------------------------------------------------
// Calculate pitch taking tiling pitch values into account
//
DWORD CalcTilePitch(
    DWORD Width,
    D3DFORMAT D3DFormat
    )
{
    DWORD Pitch, i;

    Pitch = CalcPitch(Width, BitsPerPixelOfD3DFORMAT(D3DFormat));

    for (i = 0; i < ARRAYSIZE(g_TilePitches); i++)
    {
        if (Pitch <= g_TilePitches[i])
        {
            Pitch = g_TilePitches[i];
            break;
        }
    }

    return Pitch;
}

//
// PixelContainer implementation
//

namespace PixelJar
{

    //------------------------------------------------------------------------
    // Get the surface format value from a render target and its Zbuffer
    //
    DWORD GetSurfaceFormat(
        D3DPixelContainer *pRenderTarget,
        D3DPixelContainer *pZBuffer // Can be NULL
        )
    {
        DWORD Format;
        bool Swizzled;

        switch(GetFormat(pRenderTarget))
        {
        case D3DFMT_A8R8G8B8: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8; 
            Swizzled = TRUE;
            break;

        case D3DFMT_LIN_A8R8G8B8: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_A8R8G8B8; 
            Swizzled = FALSE;
            break;

        case D3DFMT_X8R8G8B8: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8; 
            Swizzled = TRUE;
            break;

        case D3DFMT_LIN_X8R8G8B8: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_X8R8G8B8_Z8R8G8B8; 
            Swizzled = FALSE;
            break;

        case D3DFMT_R5G6B5:   
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5; 
            Swizzled = TRUE;
            break;

        case D3DFMT_LIN_R5G6B5:   
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_R5G6B5; 
            Swizzled = FALSE;
            break;

        case D3DFMT_X1R5G5B5: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5; 
            Swizzled = TRUE;
            break;

        case D3DFMT_LIN_X1R5G5B5: 
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_X1R5G5B5_Z1R5G5B5; 
            Swizzled = FALSE;
            break;

        case D3DFMT_LIN_L8:
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_B8; 
            Swizzled = FALSE;
            break;

        case D3DFMT_LIN_G8B8:
            Format = NV097_SET_SURFACE_FORMAT_COLOR_LE_G8B8;
            Swizzled = FALSE;
            break;

        default: 
            NODEFAULT("Unexpected format\n"); 
            break;
        }

        if (Swizzled)
        {
            Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _TYPE, _SWIZZLE)
                    | DRF_NUM(097, _SET_SURFACE_FORMAT, _WIDTH, 
                              PixelJar::GetLogWidth(pRenderTarget))
                    | DRF_NUM(097, _SET_SURFACE_FORMAT, _HEIGHT, 
                              PixelJar::GetLogHeight(pRenderTarget));
        }
        else
        {
            Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _TYPE, _PITCH);
        }

        if (pZBuffer)
        {
            switch(GetFormat(pZBuffer))
            {
            case D3DFMT_D16:
            case D3DFMT_F16:
            case D3DFMT_LIN_D16:
            case D3DFMT_LIN_F16:
                Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _ZETA, _Z16);
                break;

            case D3DFMT_D24S8:
            case D3DFMT_F24S8:
            case D3DFMT_LIN_D24S8:
            case D3DFMT_LIN_F24S8:
                Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _ZETA, _Z24S8);
                break;
            }
        }

        // If the ZBuffer is not set then the bpp of the zbuffer must be
        // set to be the same as the render target, even though this value
        // will never be used.
        //
        else if (GetBitsPerPixel(pRenderTarget) == 32)
        {
            Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _ZETA, _Z24S8);
        }
        else
        {
            Format |= DRF_DEF(097, _SET_SURFACE_FORMAT, _ZETA, _Z16);
        }

        return Format;
    }

    //------------------------------------------------------------------------
    // Calculates the scaling factor for a given depth buffer format.
    //
    void GetDepthBufferScale(
        D3DPixelContainer *pPixels,
        float *pScale
        )
    {
        ASSERT(IsValidDepthBufferD3DFORMAT(GetFormat(pPixels)));

        switch(GetFormat(pPixels))
        {
        case D3DFMT_D16:
        case D3DFMT_LIN_D16:
            *pScale = (float)D3DZ_MAX_D16;
            break;

        case D3DFMT_D24S8:
        case D3DFMT_LIN_D24S8:
            *pScale = (float)D3DZ_MAX_D24S8;
            break;
            
        case D3DFMT_F16:
        case D3DFMT_LIN_F16:
            *pScale = (float)D3DZ_MAX_F16;
            break;

        case D3DFMT_F24S8:
        case D3DFMT_LIN_F24S8:
            *pScale = (float)D3DZ_MAX_F24S8;
            break;

        default:
            NODEFAULT("PixelJar::GetDepthBufferScale - unknown depth buffer format\n");
        }
    }

    //------------------------------------------------------------------------
    // Figures out the width/height of both power-of-2 and non-power-of-2 
    // surfaces, in pixels.
    //
    void GetSize(
        D3DPixelContainer *pPixels,
        DWORD Level,
        DWORD *pWidth,
        DWORD *pHeight,
        DWORD *pDepth,
        DWORD *pPitch,
        DWORD *pSlice
        )
    {
        DWORD Size = pPixels->Size;

        if (DBG_CHECK(Level >= PixelJar::GetMipmapLevelCount(pPixels)))
        {
            DXGRIP("PixelJar::GetSize - invalid mipmap level.");
        }

        if (!Size)
        {
            long LogWidth = GetLogWidth(pPixels) - Level;
            long LogHeight = GetLogHeight(pPixels) - Level;
            long LogDepth = GetLogDepth(pPixels) - Level;

            DWORD BitsPerPixel = GetBitsPerPixel(pPixels);

            *pHeight = 1 << (LogHeight > 0 ? LogHeight : 0);
            *pDepth = 1 << (LogDepth > 0 ? LogDepth : 0);
            *pWidth = 1 << (LogWidth > 0 ? LogWidth : 0);

            long LogMin = (long)MinimumTextureSizeOfD3DFORMAT(GetFormat(pPixels));

            DWORD Width = 1 << (max(LogMin, LogWidth));
            DWORD Height = 1 << (max(LogMin, LogHeight));

            switch(GetFormat(pPixels))
            {
            case D3DFMT_DXT1:
                *pPitch = Width * 2;
                break;

            case D3DFMT_DXT2:
            case D3DFMT_DXT4:
                *pPitch = Width * 4;
                break;

            default:
                *pPitch = Width * BitsPerPixel / 8;
            }

            *pSlice = Width * Height * BitsPerPixel / 8;
        }
        else
        {
            *pWidth = (Size & D3DSIZE_WIDTH_MASK) + 1;
            *pHeight = ((Size & D3DSIZE_HEIGHT_MASK) >> D3DSIZE_HEIGHT_SHIFT) + 1;
            *pDepth = 1;
            *pPitch = PitchFromSize(Size);
            *pSlice = *pPitch * *pHeight;
        }
    }

    //------------------------------------------------------------------------------
    // Gets the surface desc information for a mipmap level.  This does not
    // set the type.
    //
    void Get2DSurfaceDesc(
        D3DPixelContainer *pPixels,
        UINT Level, 
        D3DSURFACE_DESC *pDesc
        )
    {
        if (DBG_CHECK(Level >= GetMipmapLevelCount(pPixels)))
        {
            DXGRIP("PixelJar::Get2DSurfaceDesc - invalid mipmap level.");
        }

        pDesc->Format = GetFormat(pPixels);
        pDesc->Type = pPixels->GetType();
        pDesc->Usage = 0;

        if (Level == 0)
        {
            if (IsValidRenderTarget(pPixels))
            {
                pDesc->Usage = D3DUSAGE_RENDERTARGET;
            }
            else if (IsValidDepthBuffer(pPixels))
            {
                pDesc->Usage = D3DUSAGE_DEPTHSTENCIL;
            }
        }

        // We don't store any multisampling attribute with the surface.
        // On the other hand, the only multisampling surface we allow is
        // the active back-buffer, so this is easy to check.
        //
        if (pPixels->Data == g_pDevice->m_pFrameBuffer[0]->Data)
        {
            pDesc->MultiSampleType = g_pDevice->m_MultiSampleType;
        }
        else
        {
            pDesc->MultiSampleType = D3DMULTISAMPLE_NONE;
        }

        DWORD Width, Height, Depth, Pitch, Slice;

        GetSize(pPixels, Level, &Width, &Height, &Depth, &Pitch, &Slice);

        pDesc->Width = Width;
        pDesc->Height = Height;
        pDesc->Size = Slice;
    }

    //------------------------------------------------------------------------------
    // Gets the surface desc information for a mipmap level.  This does not
    // set the type.
    //
    void Get3DSurfaceDesc(
        D3DPixelContainer *pPixels,
        UINT Level, 
        D3DVOLUME_DESC *pDesc
        )
    {
        if (DBG_CHECK(Level >= GetMipmapLevelCount(pPixels)))
        {
            DXGRIP("PixelJar::Get3DSurfaceDesc - invalid mipmap level.");
        }

        pDesc->Format = GetFormat(pPixels);
        pDesc->Type = pPixels->GetType();;
        pDesc->Usage = 0;

        DWORD Width, Height, Depth, Pitch, Slice;

        GetSize(pPixels, Level, &Width, &Height, &Depth, &Pitch, &Slice);

        pDesc->Width = Width;
        pDesc->Height = Height;
        pDesc->Depth = Depth;
        pDesc->Size = Slice * Depth;
    }

    //------------------------------------------------------------------------------
    // Finds the location of a surface within a texture.
    //
    // The Log sizes will return 0 for a non power-of-2 texture.
    //
    void FindSurfaceWithinTexture(
        D3DPixelContainer *pPixels,
        D3DCUBEMAP_FACES FaceType, 
        UINT Level, 
        BYTE **ppbData,
        DWORD *pRowPitch,
        DWORD *pSlicePitch,
        DWORD *pFormat,
        DWORD *pSize
        )
    {
        BYTE *pbData = (BYTE *)GetDataFromResource(pPixels);

        // Figure out exactly the data we want to lock.
        DWORD TexelSize = GetBitsPerPixel(pPixels);
        DWORD RowPitch, SlicePitch;

        DWORD Size = pPixels->Size;

        // Power-of-2
        if (!Size)
        {
            DWORD TextureLogWidth = GetLogWidth(pPixels);
            DWORD TextureLogHeight = GetLogHeight(pPixels);
            DWORD TextureLogDepth = GetLogDepth(pPixels);

            DWORD LogMin = MinimumTextureSizeOfD3DFORMAT(GetFormat(pPixels));

            // Map to the right face.
            if (FaceType != D3DCUBEMAP_FACE_POSITIVE_X)
            {
                // Decode the size of each face.
                DWORD cLevels = GetMipmapLevelCount(pPixels);
                DWORD LogWidth = TextureLogWidth;
                DWORD LogHeight = TextureLogHeight;
                DWORD LogDepth = TextureLogDepth;

                DWORD FaceSize = 0;

                for (; cLevels; cLevels--)
                {
                    FaceSize += (1 << (max(LogWidth, LogMin) + max(LogHeight, LogMin))) * TexelSize / 8;

                    if (LogWidth > 0)
                    {
                        LogWidth--;
                    }

                    if (LogHeight > 0)
                    {
                        LogHeight--;
                    }

                    if (LogDepth > 0)
                    {
                        LogDepth--;
                    }
                }

                // Align the size.
                FaceSize = (FaceSize + D3DTEXTURE_CUBEFACE_ALIGNMENT - 1) & ~(D3DTEXTURE_CUBEFACE_ALIGNMENT - 1);

                // Move to the correct face.
                pbData += FaceSize * FaceType;
            }

            // Map to the right level.
            if (Level)
            {
                DWORD cLevels = Level;
                DWORD LogSize;

                for (; cLevels; cLevels--)
                {
                    LogSize = max(TextureLogWidth, LogMin) + max(TextureLogHeight, LogMin) + TextureLogDepth;

                    pbData += (1 << LogSize) * TexelSize / 8;

                    if (TextureLogWidth > 0)
                    {
                        TextureLogWidth--;
                    }

                    if (TextureLogHeight > 0)
                    {
                        TextureLogHeight--;
                    }

                    if (TextureLogDepth > 0)
                    {
                        TextureLogDepth--;
                    }
                }
            }

            // Munge the format to reflect the new size.
            DWORD Format = pPixels->Format & ~(D3DFORMAT_USIZE_MASK | D3DFORMAT_VSIZE_MASK | D3DFORMAT_PSIZE_MASK);

            Format |= TextureLogWidth << D3DFORMAT_USIZE_SHIFT;
            Format |= TextureLogHeight << D3DFORMAT_VSIZE_SHIFT;
            Format |= TextureLogDepth << D3DFORMAT_PSIZE_SHIFT;

            TextureLogWidth = max(TextureLogWidth, LogMin);
            TextureLogHeight = max(TextureLogHeight, LogMin);

            switch(GetFormat(pPixels))
            {
            case D3DFMT_DXT1:
                RowPitch = (1 << TextureLogWidth) * 2;
                break;

            case D3DFMT_DXT2:
            case D3DFMT_DXT4:
                RowPitch = (1 << TextureLogWidth) * 4;
                break;

            default:
                RowPitch = (1 << TextureLogWidth) * TexelSize / 8;
            }

            SlicePitch = (1 << (TextureLogWidth + TextureLogHeight)) * TexelSize / 8;

            *pFormat = Format;
            *pSize = pPixels->Size;
        }

        // Non power-of-2.
        else
        {
            DWORD TextureWidth = (Size & D3DSIZE_WIDTH_MASK) + 1;
            DWORD TextureHeight = ((Size & D3DSIZE_HEIGHT_MASK) >> D3DSIZE_HEIGHT_SHIFT) + 1;
            DWORD Pitch = PitchFromSize(Size);

            RowPitch = Pitch;
            SlicePitch = RowPitch * TextureHeight;

            *pFormat = pPixels->Format;
            *pSize = pPixels->Size;
        }

        //
        // Return the results.
        //

        *ppbData = pbData;
        *pRowPitch = RowPitch;
        *pSlicePitch = SlicePitch;
    }

    //------------------------------------------------------------------------
    // Do all of the locking goo for a chunk of data.  The caller must ensure
    // that we are free to party on the memory.
    // 
    static void LockSurface(
        D3DPixelContainer *pPixels,
        D3DCUBEMAP_FACES FaceType, 
        UINT Level, 
        DWORD Flags,
        BYTE **ppbData,
        DWORD *pRowPitch,
        DWORD *pSlicePitch
        )
    {
        // Validate parameters.
        if (DBG_CHECK(TRUE))
        {
            if (Level >= GetMipmapLevelCount(pPixels))
            {
                DXGRIP("PixelJar::LockSurface - invalid mipmap level.");
            }
            if (Flags & ~(D3DLOCK_TILED | D3DLOCK_NOOVERWRITE | D3DLOCK_READONLY))
            {
                DXGRIP("PixelJar::LockSurface - invalid flag.");
            }
        }

        // Make sure the GPU isn't using this texture if we don't already have it
        // locked.
        if (!(Flags & D3DLOCK_NOOVERWRITE))
        {
            BlockOnResource(pPixels);
        }

        DWORD Format, Size;

        // Get a pointer to the actual surface.
        FindSurfaceWithinTexture(pPixels,
                                 FaceType, 
                                 Level, 
                                 ppbData,
                                 pRowPitch,
                                 pSlicePitch,
                                 &Format,
                                 &Size);

        // On DVT systems, give a pointer to the slower, but tiling-coherent,
        // mapping if requested:
        if (Flags & D3DLOCK_TILED)
        {
            *ppbData = (BYTE*) (((DWORD) *ppbData & ~0xF0000000) 
                                 | AGP_FRAME_BUFFER_HIGH_NIBBLE);
        }
    }

    //------------------------------------------------------------------------------
    // Lock a 2D surface.
    //
    void Lock2DSurface(
        D3DPixelContainer *pPixels,
        D3DCUBEMAP_FACES FaceType, 
        UINT Level, 
        D3DLOCKED_RECT *pLockedRect, 
        CONST RECT *pRect, 
        DWORD Flags
        )
    {
        DWORD RowPitch;
        DWORD SlicePitch;

        BYTE *pbData;

        if (DBG_CHECK(pRect))
        {
            DWORD Width, Height, Depth, Pitch, Slice;
            GetSize(pPixels, Level, &Width, &Height, &Depth, &Pitch, &Slice);

            // This exclusive check doesn't seem right but D3DX causes use to hit
            // this parameter check if we look for the inclusive ranges.  
            //
            if ((pRect->bottom > (long)Height) || (pRect->right > (long)Width))
            {
                DXGRIP("PixelJar::Lock2DSurface - Lock rectangle is beyond the bounds of the texture level.");
            }
            if ((pRect->top < 0) || (pRect->left < 0))
            {
                DXGRIP("PixelJar::Lock2DSurface - Lock rectangle is negative.");
            }
        }

        LockSurface(pPixels,
                    FaceType,
                    Level,
                    Flags,
                    &pbData,
                    &RowPitch,
                    &SlicePitch);

        // Move to the actual rectangle being locked.
        if (pRect)
        {
            DWORD TexelSize = GetBitsPerPixel(pPixels);

            pbData += pRect->top * RowPitch + pRect->left * TexelSize / 8;
        }

        // Prep it to be returned.
        pLockedRect->Pitch = RowPitch;
        pLockedRect->pBits = pbData;
    }

    //------------------------------------------------------------------------------
    // Lock a 3D surface.
    //
    void Lock3DSurface(
        D3DPixelContainer *pPixels,
        UINT Level, 
        D3DLOCKED_BOX *pLockedVolume, 
        CONST D3DBOX *pBox, 
        DWORD Flags
        )
    {
        DWORD RowPitch;
        DWORD SlicePitch;

        BYTE *pbData;

        if (DBG_CHECK(pBox))
        {
            DWORD Width, Height, Depth, Pitch, Slice;
            GetSize(pPixels, Level, &Width, &Height, &Depth, &Pitch, &Slice);

            if (   pBox->Bottom > Height
                || pBox->Right > Width
                || pBox->Back > Depth)
            {
                DXGRIP("PixelJar::Lock3DSurface - lock box is beyond the bounds of the texture level.");
            }
        }

        LockSurface(pPixels,
                    D3DCUBEMAP_FACE_POSITIVE_X,
                    Level, 
                    Flags,
                    &pbData,
                    &RowPitch,
                    &SlicePitch);

        // Move to the actual rectangle being locked.
        if (pBox)
        {
            DWORD TexelSize = GetBitsPerPixel(pPixels);

            pbData += pBox->Front * SlicePitch + pBox->Top * RowPitch + pBox->Left * TexelSize / 8;
        }

        // Prep it to be returned.
        pLockedVolume->RowPitch = RowPitch;
        pLockedVolume->SlicePitch = SlicePitch;
        pLockedVolume->pBits = pbData;
    }

    //------------------------------------------------------------------------------
    // Encodes the Format and Size parameters for a surface and returns the number
    // of bytes required to the data for the surface.
    //
    DWORD EncodeFormat(
        DWORD Width,
        DWORD Height,
        DWORD Depth,
        DWORD Levels,
        D3DFORMAT D3DFormat,
        DWORD Pitch,
        bool isCubeMap,
        bool isVolume,
        DWORD *pFormat,
        DWORD *pSize
        )
    {
        if (DBG_CHECK(TRUE))
        {
            if (!Width || !Height || !Depth)
            {
                DXGRIP("PixelJar::EncodeFormat - All texture dimensions must be at least 1 texel.");
            }

            if (IsSwizzledD3DFORMAT(D3DFormat) || IsCompressedD3DFORMAT(D3DFormat))
            {
                if (Depth > 1)
                {
                    if (Width > 512)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Volume texture width is larger than the 512 texel maximum.");
                    }

                    if (Height > 512)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Volume texture height is larger than the 512 texel maximum.");
                    }

                    if (Depth > 512)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Volume texture depth is larger than the 512 texel maximum.");
                    }

                    if (isCubeMap)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Volume textures cannot be cube mapped.");
                    }

                    if (IsValidDepthBufferD3DFORMAT(D3DFormat))
                    {
                        DXGRIP("PixelJar::EncodeFormat - Volume textures cannot have a depth format.");
                    }
                }
                else
                {
                    if (Width > 4096)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Texture width is larger than the 4096 texel maximum.");
                    }

                    if (Height > 4096)
                    {
                        DXGRIP("PixelJar::EncodeFormat - Texture height is larger than the 4096 texel maximum.");
                    }
                }

                if ((Width & (Width - 1)) || (Height & (Height - 1)) || (Depth & (Depth - 1)))
                {
                    DXGRIP("PixelJar::EncodeFormat - Each dimension of a swizzled texture must be a power of 2.");
                }

                if (Levels > 16)
                {
                    DXGRIP("PixelJar::EncodeFormat - Texture mipmap level count is larger than the 16 level maximum.");
                }

                if (isCubeMap && IsValidDepthBufferD3DFORMAT(D3DFormat))
                {
                    DXGRIP("PixelJar::EncodeFormat - Depth format textures cannot be cube mapped.");
                }

                if (isCubeMap && Width != Height)
                {
                    DXGRIP("PixelJar::EncodeFormat - Cube maps must be square (width == height).");
                }
            }
            else
            {
                if (Depth != 1)
                {
                    DXGRIP("PixelJar::EncodeFormat - Non swizzled and non compressed textures cannot be a volume texture.");
                }

                if (Width > 4096)
                {
                    DXGRIP("PixelJar::EncodeFormat - Texture width is larger than the 4096 texel maximum.");
                }

                if (Height > 4096)
                {
                    DXGRIP("PixelJar::EncodeFormat - Texture height is larger than the 4096 texel maximum.");
                }

                if (Levels > 1)
                {
                    DXGRIP("PixelJar::EncodeFormat - Non swizzled and non compressed textures cannot be mip mapped.");
                }

                if (isCubeMap)
                {
                    DXGRIP("PixelJar::EncodeFormat - Non swizzled and non compressed textures cannot be cube mapped.");
                }
            }
        }

        DWORD Size = 0;
        DWORD TexelSize = BitsPerPixelOfD3DFORMAT(D3DFormat);

        DWORD LogWidth;
        DWORD LogHeight;
        DWORD LogDepth;
        DWORD SizeWidth;
        DWORD SizeHeight;

        // Swizzed and compressed textures are always power-of-2.  Linear textures are always
        // treated a non power-of-2.
        //
        if (IsSwizzledD3DFORMAT(D3DFormat) || IsCompressedD3DFORMAT(D3DFormat))
        {
            LogWidth = Log2(Width);
            LogHeight = Log2(Height);
            LogDepth = Log2(Depth);
            SizeWidth = 0;
            SizeHeight = 0;

            DWORD LogMin = MinimumTextureSizeOfD3DFORMAT(D3DFormat);

            if (Levels == 0)
            {
                Levels = max(LogWidth, max(LogHeight, LogDepth)) + 1;
            }
            else if (DBG_CHECK(Levels > max(LogWidth, max(LogHeight, LogDepth)) + 1))
            {
                DXGRIP("PixelJar::EncodeFormat - too many mip levels were specified for this texture.");
            }

            // Figure out the total size of the texture.
            DWORD CurrentLevel;
            DWORD CurrentWidth = LogWidth;
            DWORD CurrentHeight = LogHeight;
            DWORD CurrentDepth = LogDepth;
            DWORD LogSize;

            for (CurrentLevel = Levels; CurrentLevel; CurrentLevel--)
            {
                LogSize = max(CurrentWidth, LogMin) + max(CurrentHeight, LogMin) + CurrentDepth;

                Size += (1 << LogSize) * TexelSize / 8;
        
                if (CurrentWidth > 0)
                {
                    CurrentWidth--;
                }

                if (CurrentHeight > 0)
                {
                    CurrentHeight--;
                }

                if (CurrentDepth > 0)
                {
                    CurrentDepth--;
                }
            }

            if (isCubeMap)
            {
                Size = (Size + D3DTEXTURE_CUBEFACE_ALIGNMENT - 1) 
                         & ~(D3DTEXTURE_CUBEFACE_ALIGNMENT - 1);

                Size *= 6;
            }
        }

        // Non Power-of-2 texture.
        else
        {
            // What should these be set to for one of these?
            LogWidth = LogHeight = LogDepth = 0;

            // Just set the level appropriately.  We don't support mipmaps on non-swizzled
            // textures so just set it to 1.
            //
            if (Levels == 0)
            {
                Levels = 1;
            }

            if (Pitch == 0)
            {
                Pitch = CalcPitch(Width, TexelSize);
            }

            SizeWidth = Width;
            SizeHeight = Height;

            Size = Pitch * Height;
        }

        // Build the format.
        *pFormat =    (isCubeMap ? 0x00000004 : 0)
                    | (isVolume ? 3 : 2) << D3DFORMAT_DIMENSION_SHIFT /* UNDONE: verify */
                    | D3DFormat << D3DFORMAT_FORMAT_SHIFT
                    | Levels << D3DFORMAT_MIPMAP_SHIFT
                    | LogWidth << D3DFORMAT_USIZE_SHIFT
                    | LogHeight << D3DFORMAT_VSIZE_SHIFT
                    | LogDepth << D3DFORMAT_PSIZE_SHIFT
                    | D3DFORMAT_DMACHANNEL_A
                    | D3DFORMAT_BORDERSOURCE_COLOR;

        if (SizeWidth)
        {
            *pSize   =    (SizeWidth - 1)
                        | (SizeHeight - 1) << D3DSIZE_HEIGHT_SHIFT
                        | ((Pitch  / D3DTEXTURE_PITCH_ALIGNMENT) - 1) << D3DSIZE_PITCH_SHIFT;

            // Make sure we didn't overflow/underflow.
            ASSERT((*pSize & D3DSIZE_WIDTH_MASK) + 1 == SizeWidth);
            ASSERT(((*pSize & D3DSIZE_HEIGHT_MASK) >> D3DSIZE_HEIGHT_SHIFT) + 1 == SizeHeight);

            if (PitchFromSize(*pSize) != Pitch)
            {
                DXGRIP("PixelJar::EncodeFormat - The surface pitch is too large, possibly caused by using antialiasing with a large surface.");
            }
        }
        else 
        {
            *pSize = 0;
        }

        return Size;
    }
}

} // end of namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\windows\directx\dxg\d3d8\se\PatchUtil.hpp ===
/*============================================================================
 *
 *  Copyright (C) Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       PatchUtil.hpp
 *  Content:    High order surface implementation.
 *
 ****************************************************************************/

#ifdef STARTUPANIMATION
namespace D3DK
#else
namespace D3D
#endif
{

#ifndef __PATCH_UTIL_H__
#define __PATCH_UTIL_H__

#define nvAssert ASSERT

typedef int            intptr_t;
typedef unsigned int   uintptr_t;

/*****************************************************************************/
// Eval memory allocation. Avoid seperate malloc for each section of memory.
// allocate a big chunk with EV_ALLOC_INIT
// and dole it out efficiently with EV_ALLOC
// free it with EV_FREE
// Only one DECL per routine.
// Use EV_ALLOC_INIT/EV_FREE to alloc/free within a routine.

// To alloc something that will persist to parallel or higher routines,
// use EV_ALLOC_INIT_WITH_CACHE with a NV_PATCH_ALLOC_CACHE
// The higher level routines must free with EV_FREE_CACHE

// Use EV_ALLOC_RESET to use memory chunk allocated by higher level routine.
//
// Use EV_ROUND if necessary to ensure allocations have pointer sized
// granularity to avoid address exceptions on the IA64.

// used by cached-alloc algorithm to avoid allocs on each imm mode call
// Each call to EV_ALLOC_INIT_WITH_CACHE can specify a cache to use.
// The coder must be careful that a cache is not used twice at a time.

typedef struct {
        void *pBaseCache;
        int bytesAllocCache;
        int countFreeCheck;     // count times past a potential free point
        int inUse;              // for debug check
        void *contextCache;     // for debug check
} NV_PATCH_ALLOC_CACHE;

#define MAX_EV_CACHE                        10

typedef struct {
        void *context;
        void *pBase;
        void *pAvail;
        void *pAllocatedBase;
        int bytesAlloc;
        int bytesUsed;
        NV_PATCH_ALLOC_CACHE *pCache; // ptr to higher level cache structure
} NV_PATCH_ALLOC_CONTROL;

#define EV_ALLOC_BYTE_ALIGN              0x10
#define EV_CACHE_INFO_SCRATCH               0
#define EV_CACHE_QUADINFO_ETC               1
#define EV_CACHE_9FDMATRICES                2
#define EV_CACHE_AUTO_NORMAL_SETUP          3
#define EV_CACHE_UV_SETUP                   4
#define EV_CACHE_TRI_WEIGHTS                5
#define	EV_CACHE_DRAW_SW					8
#define	EV_CACHE_SWATHING					9
// if you add more after '9', you must change MAX_EV_CACHE


#define EV_ALLOC_DECL() NV_PATCH_ALLOC_CONTROL evMemory = {NULL, 0}

#define EV_ALLOC_INIT_WITH_CACHE(CONTEXT, TBYTES, errorLabel, PCACHE) \
        if (evAllocInitWithCache(info, CONTEXT, &evMemory, TBYTES, PCACHE)) { \
evAllocError: \
            nvAssert(("EV_ALLOC_INIT FAILURE",0)); \
            info->retVal |= NV_PATCH_EVAL_ERR_OUT_OF_MEMORY; \
            goto errorLabel; \
        } \

#define EV_ALLOC_INIT_WITH_CACHE2(CONTEXT, TBYTES, errorLabel, PCACHE) \
        if (evAllocInitWithCache(info, CONTEXT, &evMemory, TBYTES, PCACHE)) { \
            nvAssert(("EV_ALLOC_INIT FAILURE",0)); \
            info->retVal |= NV_PATCH_EVAL_ERR_OUT_OF_MEMORY; \
            goto errorLabel; \
        } \

#define EV_ALLOC_INIT(CONTEXT, TBYTES, errorLabel) \
        EV_ALLOC_INIT_WITH_CACHE(CONTEXT, TBYTES, errorLabel, NULL)

#define EV_ALLOC(VAR, CONTEXT, BYTES) {                             \
        int __nBytes;                                               \
        nvAssert(CONTEXT == evMemory.context);                      \
        nvAssert(!((BYTES) & (EV_ALLOC_BYTE_ALIGN - 1)));           \
        evMemory.bytesUsed += (__nBytes = (BYTES));                 \
        nvAssert(evMemory.bytesUsed <= evMemory.bytesAlloc);        \
        if (evMemory.bytesUsed <= evMemory.bytesAlloc) {            \
            *(void **)(&(VAR)) = evMemory.pAvail;                   \
            evMemory.pAvail = (char *)evMemory.pAvail + __nBytes;   \
            nvAssert(!((uintptr_t)evMemory.pAvail & ((sizeof(void *) - 1)))); \
        } else {                                                    \
            VAR = NULL;                                             \
        }                                                           \
        if (!VAR) goto evAllocError;                                \
    }

#define EV_ALLOC_FULL(CONTEXT) \
        /* expect equal if pre-calc was accurate */ \
        nvAssert(evMemory.bytesUsed == evMemory.bytesAlloc);

#define EV_FREE(VAR, CONTEXT) { \
        nvAssert(CONTEXT == evMemory.context); \
        if (evMemory.pBase && (VAR)) { \
            if (!evMemory.pCache) { \
                MemFree(evMemory.pAllocatedBase); \
            } else { \
                evMemory.pCache->inUse = 0; \
            } \
            evMemory.pBase = NULL; \
            evMemory.pAllocatedBase = NULL; \
        } \
        VAR = NULL; \
    }

#define EV_FREE_CACHE(PCACHE, CONTEXT) { \
        if ((PCACHE)->pBaseCache) { \
            MemFree((PCACHE)->pBaseCache); \
            (PCACHE)->pBaseCache = NULL; \
        } \
        (PCACHE)->inUse = 0; \
    } \

//#define EV_ROUND(BYTES) \
//    (((BYTES) + (sizeof(void *) - 1)) & ~(sizeof(void *) - 1))

//force 16 byte alignment...
#define EV_ROUND(BYTES) \
    (((BYTES) + (EV_ALLOC_BYTE_ALIGN - 1)) & ~(EV_ALLOC_BYTE_ALIGN - 1))

/*****************************************************************************/
#define NV_PATCH_ATTRIB_POSITION            0
#define NV_PATCH_ATTRIB_VERTEX_WEIGHT       1
#define NV_PATCH_ATTRIB_NORMAL              2
#define NV_PATCH_ATTRIB_COLOR               3
#define NV_PATCH_ATTRIB_SECONDARY_COLOR     4
#define NV_PATCH_ATTRIB_FOG_COORD           5
#define NV_PATCH_ATTRIB_UNUSED0             6
#define NV_PATCH_ATTRIB_UNUSED1             7
#define NV_PATCH_ATTRIB_TEXCOORD0           8
#define NV_PATCH_ATTRIB_TEXCOORD1           9
#define NV_PATCH_ATTRIB_TEXCOORD2           10
#define NV_PATCH_ATTRIB_TEXCOORD3           11
#define NV_PATCH_ATTRIB_TEXCOORD4           12
#define NV_PATCH_ATTRIB_TEXCOORD5           13
#define NV_PATCH_ATTRIB_TEXCOORD6           14
#define NV_PATCH_ATTRIB_TEXCOORD7           15

//return codes for EvalPatch
#define NV_PATCH_EVAL_OK                 0x1
#define NV_PATCH_EVAL_ERR_OUT_OF_MEMORY  0x10
#define NV_PATCH_EVAL_ERR_NOT_HANDLED    0x20

// D3D, OGL, and Kelvin all use 16 separate vertex attributes.
#define NV_PATCH_NUMBER_OF_ATTRIBS      16

// D3D supports up to 5, OGL supports up to 8, and Kelvin supports up to 16.
// Note that when computing normal patches, an 8th-order nonrational patch
// becomes a 14th-order rational patch, and an 8th-order rational patch
// exceeds the Kelvin limit easily.
#define NV_PATCH_MAX_ORDER              16

// The maximum size of a swatch is determined by the size of the vertex
// file.   Henry says this is the magic number.  16 might work better, but
// it's not clear.
#define NV_PATCH_KELVIN_SWATCH_SIZE     17


#define NV_PATCH_MAX_TOTAL_STEP 1000    // total steps allowed
#define NV_PATCH_MAX_SWATCH_STEP 40     // max steps within a sub-patch

// When drawing stitch in SW modes, the buffer is this many vertices.
//  +1 because n steps means (n+1) vertices
//  +2 because may need to share 2 vertices between groups of n steps
#define NV_PATCH_MAX_SW_VERTICES (NV_PATCH_MAX_SWATCH_STEP+1+2)

#define EV_AS_INT(x)     (*((int *) &(x)))

// Matrix structure for matrix math
typedef struct {
    int rows, columns;
    int pad[2];
    float data[NV_PATCH_MAX_ORDER][NV_PATCH_MAX_ORDER][4]; // [row][col][xyzw]
} FDMatrix;
#define FDMATRIX_HEADER_SIZE    (4*sizeof(int))

// For swathing, an array of ptrs to FDMatrices is used to
// find a pointer to a particular FDMatrix given an attribute number
typedef FDMatrix *FDMatrixAttrSet[NV_PATCH_NUMBER_OF_ATTRIBS];

// Evaluated vertex attributes
typedef struct {
   float vertexAttribs[NV_PATCH_MAX_SW_VERTICES][NV_PATCH_NUMBER_OF_ATTRIBS][4];
} NV_PATCH_EVAL_OUTPUT;


// This is given to beginPrimitive to indicate what type of primitive to draw.
typedef enum {
    NV_PATCH_PRIMITIVE_TSTRIP = 1,
    NV_PATCH_PRIMITIVE_TFAN   = 2,
} NV_PATCH_PRIMITIVE_TYPE;

// Information for forward differencing one curve
typedef float NV_PATCH_CURVE_COEFFS[NV_PATCH_MAX_ORDER][4];
typedef struct {
    int order;
    int pad[3];
    NV_PATCH_CURVE_COEFFS coeffs;
} NV_PATCH_CURVE_INFO;
#define PATCH_CURVE_HEADER_SIZE     (4*sizeof(int))

// For swathing, an array of ptrs to NV_PATCH_CURVE_INFOs is used to
// find a pointer to a particular guard curve given an attribute number
typedef NV_PATCH_CURVE_INFO *FDCurveAttrSet[NV_PATCH_NUMBER_OF_ATTRIBS];

// Enumerant for what basis the patch is defined on
typedef enum {
    NV_PATCH_BASIS_BEZIER      = 0,
    NV_PATCH_BASIS_BSPLINE     = 1,
    NV_PATCH_BASIS_CATMULL_ROM = 2,
} NV_PATCH_BASIS_TYPE;

// Enumerant for the format of the control points
typedef enum {
    NV_PATCH_VERTEX_FORMAT_FLOAT_1 = 0, // Expand to (value,   0.0,   0.0, 1.0)
    NV_PATCH_VERTEX_FORMAT_FLOAT_2 = 1, // Expand to (value, value,   0.0, 1.0);
    NV_PATCH_VERTEX_FORMAT_FLOAT_3 = 2, // Expand to (value, value, value, 1.0);
    NV_PATCH_VERTEX_FORMAT_FLOAT_4 = 3, // No expansion required
    NV_PATCH_VERTEX_FORMAT_D3DCOLOR= 4, // Unpack bytes and remap to [0,1.0]
    NV_PATCH_VERTEX_FORMAT_UBYTE   = 5, // Unpack bytes and remap to [0,1.0]
    NV_PATCH_VERTEX_FORMAT_SHORT_2 = 5, // 2D signed short expanded to (value, value, 0., 1.)
    NV_PATCH_VERTEX_FORMAT_SHORT_4 = 7  // 4D signed short
} NV_PATCH_VERTEX_FORMAT_TYPE;

// Dirty flags for each map
#define NV_PATCH_DIRTY_NONE             0x00000000
#define NV_PATCH_DIRTY_CONTROL_POINTS   0x00000001
#define NV_PATCH_DIRTY_TESSELLATION     0x00000002

// Enumerant for the type of backend
typedef enum {
    NV_PATCH_BACKEND_IMMEDIATE = 1, // call immediately into a NV_PATCH_BACKEND
    NV_PATCH_BACKEND_CELSIUS   = 2, // write a Celsius pushbuffer
    NV_PATCH_BACKEND_KELVIN    = 3, // write a Kelvin pushbuffer
    NV_PATCH_BACKEND_DP2       = 4, // write a DP2 command stream
} NV_PATCH_BACKEND_TYPE;

// Guard information for a single subquad within a fractional tesselation
typedef struct {                                //     |              |
    NV_PATCH_CURVE_INFO *guardU0;               //     |              |center
    NV_PATCH_CURVE_INFO *guardV0;               // Vmid*---UCenter----*-----
    NV_PATCH_CURVE_INFO *guardUCenter;          //     |              |
    NV_PATCH_CURVE_INFO *guardVCenter;          //     |    _         |
    float *uMid;                                //     |   _/|      VCenter
    float *vMid;                                //    V0 _/           |
    float *center;                              //     |/             |
} NV_PATCH_FRAC_GUARD_INFO;                     //     +------U0------*------
                                                //                  Umid

// Guard information for a single attribute for a fractionally tesselated
// tensor product patch
typedef struct {                            //                    u1Mid
    NV_PATCH_CURVE_INFO guardU00;           //       *------U01---->*<-----U11-----*
    NV_PATCH_CURVE_INFO guardU01;           //       |\_            |            _/|
    NV_PATCH_CURVE_INFO guardU10;           //       |  \_          |          _/  |
    NV_PATCH_CURVE_INFO guardU11;           //      V01  _\| 01    VC1    11 |/_  V11
    NV_PATCH_CURVE_INFO guardV00;           //       |              |              |
    NV_PATCH_CURVE_INFO guardV01;           //       v              vcenter        v
    NV_PATCH_CURVE_INFO guardV10;           //  v0Mid*------UC0---->*<-----UC1-----* v1Mid
    NV_PATCH_CURVE_INFO guardV11;           //       ^              ^              ^
    NV_PATCH_CURVE_INFO guardUCenter0;      //       |    _         |         _    |
    NV_PATCH_CURVE_INFO guardUCenter1;      //      V00  _/|  00   VC0    10 |\_  V10
    NV_PATCH_CURVE_INFO guardVCenter0;      //       | _/           |           \_ |
    NV_PATCH_CURVE_INFO guardVCenter1;      //       |/             |             \|
    float u0Mid[4], v0Mid[4], u1Mid[4];     //       *------U00---->*<-----U10-----*
    float v1Mid[4], center[4];              //                    u0Mid
} NV_PATCH_FRAC_QUAD_GUARD_INFO;


// Guard information for a single attribute for a fractionally tesselated
// triangular patch
typedef struct {                            //                +                -
    NV_PATCH_CURVE_INFO guard[3][2];        //               / \               -
    NV_PATCH_CURVE_INFO guardCenter[3];     //              /   \              -
    float mid[3][4];                        //             /     \             -
    float center[4];                        //           g20     g11           -
} NV_PATCH_FRAC_TRI_GUARD_INFO;             //           /         \           -
                                            //          /           \          -
                                            //    mid? +             + mid?    -
                                            //        / \_         _/ \        -
                                            //       /    gc?    gc?   \       -
                                            //      /       \_ _/       \      -
                                            //    g21         + center  g10    -
                                            //    /           |           \    -
                                            //   /           gc?           \   -
                                            //  /             |             \  -
                                            // +------g00-----+------g01-----+ -
                                            //               mid?



// Illustration of quadInfo information.
// Used by all patch styles at the low level swathing and drawing routines
// This is a connonical view assuming that uDir=1 and vDir=1
// The U coordinates are reversed if uDir=0
// The V coordinates are reversed if vDir=0
// Also, pUInner and pVInner may be on the other side of the quad.
//
//     c01                     c11
//      *--------pU1------------*
//      |                    __/|
//      |                   /   |
//      +-----pUInner-------+   |
//      |                   |   |
//      |                   |   |
//      |                   |   |
//     pV0             pVInner pV1
//      |                   |   |
//      |                   |   |
//      |                   |   |
//      |                   |   |
//      |                   |   |
//      +--------pU0--------+---*
//     c00                 pVB c10



// This fake picture of quadInfo below shows transitions on all sides.
// This can never happen, but serves to illustrate the meaning of the
// stitchUBegin/End and stitchVBegin/End values.
// These may be slightly counterintuitive, but that depends on who you are.
// The thing to note is that the regions specified by quadInfo->stitchU* 
// are between curves specified with V. U regions and V curves mix.
// Again, like above, the coordinates of U and V may be reversed if
// the u/vDir is flipped.

//                                 __ quadInfo->stitchVEnd
//                                /
//               c01             /       c11
//                *--------pU1--/---------*  <-- ppGuardSetUEnd at top of regular grid
//                |\__         o       __/|
//                |   \               /   |
// quadInfo->     |   +-pUInnerT------+   |  <-- ppGuardSetUEnd is here if top stitch, quadInfo->pSwatchUEnd for "top" of swatch
//   stitchUBegin---o |               |   |
//                |   pVInnerL        | o---- quadInfo->stitchUEnd
//                |   |               |   |
//               pV0  |        pVInnerR  pV1
//                |   |               |   |
//                |   |               |   |
//                |   +-pUInnerB------+   |  <-- ppGuardSetUBegin is here if bot stitch, quadInfo->pSwatchUBegin for "bot" of swatch
//                | __/         o     \__ |
//                |/             \       \|
//                +--------pU0----\-------*  <-- ppGuardSetUBegin at bot of regular grid
//               c00               \     c10
//                                  \
//                                   -- quadInfo->stitchVBegin

// Following statements use U, but analogously apply equally to V
// ppGuardSetUBegin/UEnd are for the boundaries of the regular grid.
// ppGuardSetUBegin/UEnd may be either pU0, pUInnerL, pUInnerR, or pU1
// see "BEGIN SIMILAR CODE" in nvpatchutil.c
// Some cases are not so obvious, like when the height of the quad
// is only one segment, and there's a top stitch, then
// both ppGuardSetUBegin and UEnd are set to pU0.
// If height is 1, and bot stitch, then both are set to pU1.
// This simplifies other code which must pick off values at the edges of the regular grid.
// Also, ppStitchUInner may be either pU0 or pU1 in degenerate cases.

//
typedef struct {
    // corners of the original control points
    float corners[2][2][4]; // [v][u][xyzw]
} NV_PATCH_CORNER_INFO;

// Common information for any quad drawn by the lower level swathing and drawing code.
// This is for INT/FRAC and QUAD/TRI patches.
typedef struct {
    FDCurveAttrSet pU0;
    FDCurveAttrSet pU1;
    FDCurveAttrSet pV0;
    FDCurveAttrSet pV1;
    FDCurveAttrSet pUInner;
    FDCurveAttrSet pVInner;

    NV_PATCH_CORNER_INFO cornAttr[NV_PATCH_NUMBER_OF_ATTRIBS];      // general guard info
    float *pCorners[NV_PATCH_NUMBER_OF_ATTRIBS][2][2];

    int nu0, nu1, nv0, nv1;                     // actual number of segments along each edge
    int uMaxSegs, vMaxSegs, uMinSegs, vMinSegs; // MIN and MAX comparing nu0:nu1 and nv0:nv1
    int needUInner, needVInner;                 // set if U/V Inner guards required

    // flags for transitions required.
    // Names refer to original LRTB, not flipped versions or anything
    // HW must render INT and FRAC stitches in order TOP/RIGHT/BOTTOM/LEFT
    int stitchTop, stitchRight, stitchBottom, stitchLeft;

    // These begin/end's mean in the direction of U (L/R) and V (B/T)
    // note: you may find these names confusing, since they don't correspond
    // to U0, U1. In other words, stitchVBegin means U0/UInner create a stitch
    // (in the canonical view).
    // But, we decided to leave things well enough alone.
    int stitchUBegin, stitchUEnd, stitchVBegin, stitchVEnd;

    int u0Dir, v0Dir, u1Dir, v1Dir; // '1' means normal direction (For u this is L-->R, for v this is B-->T)

    // MaxDir are directions of regular grid
    int uMaxDir, vMaxDir;

    float du0, du1, dv0, dv1, duMax, dvMax; // small step size along edges, and for regular grid

    // ptrs to set of edge curves for a given swatch
    FDCurveAttrSet *pSwatchUBegin, *pSwatchUEnd;
    FDCurveAttrSet *pSwatchVBegin, *pSwatchVEnd;

    FDCurveAttrSet *pCurvesTop, *pCurvesBot;
    NV_PATCH_EVAL_OUTPUT *pOut1, *pOut2;

    // CACHED DATA
    // the driver should allocate memory for these data members BEFORE
    // calling into the shared code.  Shared code should not be responsible
    // for the life time of these data members.
    FDMatrix *m00[NV_PATCH_NUMBER_OF_ATTRIBS], *m01[NV_PATCH_NUMBER_OF_ATTRIBS],
             *m10[NV_PATCH_NUMBER_OF_ATTRIBS], *m11[NV_PATCH_NUMBER_OF_ATTRIBS];    //[attribute]  (sub-patch index = 0 for bezier types)

    //we should probably union these....
    NV_PATCH_FRAC_QUAD_GUARD_INFO *guardQF[NV_PATCH_NUMBER_OF_ATTRIBS];             //[attribute]  (sub-patch index = 0 bezier types)
    NV_PATCH_FRAC_TRI_GUARD_INFO  *guardTF[NV_PATCH_NUMBER_OF_ATTRIBS];
} NV_PATCH_QUAD_INFO;

// for quadInfo->setGridCorner
#define NV_PATCH_SET_GRID_CORNER00      0x1
#define NV_PATCH_SET_GRID_CORNER10      0x2
#define NV_PATCH_SET_GRID_CORNER01      0x4
#define NV_PATCH_SET_GRID_CORNER11      0x8
#define NV_PATCH_SET_GRID_CORNER_ALL    0xf

// Information for one map within the current patch
typedef struct {
    unsigned int uorder, vorder;
    float *rawData;
    int stride;         // OGL: stride == typesize*sizeof(float)
    int pitch;          // OGL: pitch == uorder, number of coords
    int ufStride;       // u stride in floats (i.e. 4 floats is 4, not 16)
    int vfStride;       // v stride in floats
    NV_PATCH_VERTEX_FORMAT_TYPE maptype;
    NV_PATCH_VERTEX_FORMAT_TYPE Originaltype;
    unsigned int dirtyFlags;          // Currently ignored
} NV_PATCH_MAP_INFO;

/*****************************************************************************/

// ***** bits for info->swatchFlags
#define NV_PATCH_SWATCH                 0x00000001      // set when swathing
#define NV_PATCH_SWATCH_FLIPUV          0x00000002      // for tri frac

#define NV_PATCH_SWATCH_FIRST_ROW       0x00000100
#define NV_PATCH_SWATCH_LAST_ROW        0x00000200
#define NV_PATCH_SWATCH_FIRST_COL       0x00000400
#define NV_PATCH_SWATCH_LAST_COL        0x00000800

#define NV_PATCH_SWATCH_SAVE_FIRST_ROW  0x00001000
#define NV_PATCH_SWATCH_SAVE_LAST_ROW   0x00002000
#define NV_PATCH_SWATCH_SAVE_FIRST_COL  0x00004000
#define NV_PATCH_SWATCH_SAVE_LAST_COL   0x00008000

#define NV_PATCH_HAS_NORMAL             0x00010000      // indicates to emit normal guard curves
#define NV_PATCH_NO_REGULAR_GRID        0x00020000      // indicates there is no regular grid -- only transitions

// ***** bits for info->flags
#define NV_PATCH_FLAG_TYPE_MASK         0x00000001
#define NV_PATCH_FLAG_TYPE_TRIANGULAR   0x00000001
#define NV_PATCH_FLAG_TYPE_PATCH        0x00000000

#define NV_PATCH_FLAG_TESS_MASK         0x00000002
#define NV_PATCH_FLAG_TESS_FRACTIONAL   0x00000002
#define NV_PATCH_FLAG_TESS_INTEGER      0x00000000

#define NV_PATCH_FLAG_AUTO_MASK         0x0000000C
#define NV_PATCH_FLAG_AUTO_NORMAL       0x00000004
#define NV_PATCH_FLAG_AUTO_UV           0x00000008
#define NV_PATCH_FLAG_AUTO_NONE         0x00000000

#define NV_PATCH_FLAG_CACHE_MASK        0x00000010
#define NV_PATCH_FLAG_DO_NOT_CACHE      0x00000010
#define NV_PATCH_FLAG_SOME_DIRTY_TESS   0x00000100

#define NV_PATCH_FLAG_TRANSPOSE         0x00001000
#define NV_PATCH_FLAG_FLIPPED_U         0x00002000
#define NV_PATCH_FLAG_FLIPPED_V         0x00004000

// bits for transition flag 
#define FIRST_ROW 0x1   //first row transition
#define LAST_ROW  0x2   //last row transition
#define FIRST_COL 0x4   //first column transition
#define LAST_COL  0x8   //last column transition
#define USE_ITE   0x10  //send an inner transition endpoint

// Information about the current patch
typedef struct {
    // Bitmask of which attributes to evaluate (bits 0..15)
    unsigned int evalEnables;   // as specified to the HW interface
    unsigned int swEnables;     // as presented by the SW interface
    // currently, all attributes handled in the shared code are processed
    // and passed to the back-end without any remapping.
    // For D3D, this is totally handeled in higher level code.
    // So, for D3D, all indices in the shared code are HW indices.
    // For OpenGL, when calling the immediate mode interface, the imm mode
    // calls remap from SW to HW indices.
    // For OpenGL, when calling the Kelvin HW, the remap occurs in
    // __