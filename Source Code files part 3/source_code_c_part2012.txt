Kind.Return, 
				    actions[0] as MethodBase, 
					StateS85Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS85Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS87
		
		void StateS87()
		{		
			Manager.LogState("S87");

			bool observed = ObservablesS87();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS87Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S87 -> return SavePricingRule/ArgumentException -> S88");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 94;
	
				Manager.LogTransition("S87", "S88", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS87()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS87Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS87Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS89
		
		void StateS89()
		{		
			Manager.LogState("S89");

			bool observed = ObservablesS89();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS89Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S89 -> return SavePricingRule/ArgumentException -> S90");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 95;
	
				Manager.LogTransition("S89", "S90", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS89()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS89Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS89Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS91
		
		void StateS91()
		{		
			Manager.LogState("S91");

			bool observed = ObservablesS91();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS91Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S91 -> return SavePricingRule/ArgumentException -> S92");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 96;
	
				Manager.LogTransition("S91", "S92", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS91()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS91Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS91Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS93
		
		void StateS93()
		{		
			Manager.LogState("S93");

			bool observed = ObservablesS93();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS93Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S93 -> return SavePricingRule/ArgumentException -> S94");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 97;
	
				Manager.LogTransition("S93", "S94", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS93()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS93Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS93Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS95
		
		void StateS95()
		{		
			Manager.LogState("S95");

			bool observed = ObservablesS95();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS95Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S95 -> return SavePricingRule/ArgumentException -> S96");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 98;
	
				Manager.LogTransition("S95", "S96", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS95()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS95Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS95Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS97
		
		void StateS97()
		{		
			Manager.LogState("S97");

			bool observed = ObservablesS97();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS97Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S97 -> return SavePricingRule/ArgumentException -> S98");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 99;
	
				Manager.LogTransition("S97", "S98", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS97()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS97Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS97Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS99
		
		void StateS99()
		{		
			Manager.LogState("S99");

			bool observed = ObservablesS99();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS99Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S99 -> return SavePricingRule/ArgumentException -> S100");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 100;
	
				Manager.LogTransition("S99", "S100", "return SavePricingRule/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS99()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS99Pattern0, 
					"return SavePricingRule/ArgumentException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS99Pattern0, 
					"return SavePricingRule/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS2
		
		void StateS2()
		{		
			Manager.LogState("S2");

			Manager.LogRepresentation("S2","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS4
		
		void StateS4()
		{		
			Manager.LogState("S4");

			Manager.LogRepresentation("S4","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS6
		
		void StateS6()
		{		
			Manager.LogState("S6");

			Manager.LogRepresentation("S6","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS8
		
		void StateS8()
		{		
			Manager.LogState("S8");

			Manager.LogRepresentation("S8","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS10
		
		void StateS10()
		{		
			Manager.LogState("S10");

			Manager.LogRepresentation("S10","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS12
		
		void StateS12()
		{		
			Manager.LogState("S12");

			Manager.LogRepresentation("S12","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS14
		
		void StateS14()
		{		
			Manager.LogState("S14");

			Manager.LogRepresentation("S14","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS16
		
		void StateS16()
		{		
			Manager.LogState("S16");

			Manager.LogRepresentation("S16","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS18
		
		void StateS18()
		{		
			Manager.LogState("S18");

			Manager.LogRepresentation("S18","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS20
		
		void StateS20()
		{		
			Manager.LogState("S20");

			Manager.LogRepresentation("S20","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS22
		
		void StateS22()
		{		
			Manager.LogState("S22");

			Manager.LogRepresentation("S22","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS24
		
		void StateS24()
		{		
			Manager.LogState("S24");

			Manager.LogRepresentation("S24","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS26
		
		void StateS26()
		{		
			Manager.LogState("S26");

			Manager.LogRepresentation("S26","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS28
		
		void StateS28()
		{		
			Manager.LogState("S28");

			Manager.LogRepresentation("S28","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS30
		
		void StateS30()
		{		
			Manager.LogState("S30");

			Manager.LogRepresentation("S30","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS32
		
		void StateS32()
		{		
			Manager.LogState("S32");

			Manager.LogRepresentation("S32","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS34
		
		void StateS34()
		{		
			Manager.LogState("S34");

			Manager.LogRepresentation("S34","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS36
		
		void StateS36()
		{		
			Manager.LogState("S36");

			Manager.LogRepresentation("S36","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS38
		
		void StateS38()
		{		
			Manager.LogState("S38");

			Manager.LogRepresentation("S38","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS40
		
		void StateS40()
		{		
			Manager.LogState("S40");

			Manager.LogRepresentation("S40","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS42
		
		void StateS42()
		{		
			Manager.LogState("S42");

			Manager.LogRepresentation("S42","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS44
		
		void StateS44()
		{		
			Manager.LogState("S44");

			Manager.LogRepresentation("S44","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS46
		
		void StateS46()
		{		
			Manager.LogState("S46");

			Manager.LogRepresentation("S46","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS48
		
		void StateS48()
		{		
			Manager.LogState("S48");

			Manager.LogRepresentation("S48","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS50
		
		void StateS50()
		{		
			Manager.LogState("S50");

			Manager.LogRepresentation("S50","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS52
		
		void StateS52()
		{		
			Manager.LogState("S52");

			Manager.LogRepresentation("S52","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS54
		
		void StateS54()
		{		
			Manager.LogState("S54");

			Manager.LogRepresentation("S54","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS56
		
		void StateS56()
		{		
			Manager.LogState("S56");

			Manager.LogRepresentation("S56","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS58
		
		void StateS58()
		{		
			Manager.LogState("S58");

			Manager.LogRepresentation("S58","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS60
		
		void StateS60()
		{		
			Manager.LogState("S60");

			Manager.LogRepresentation("S60","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS62
		
		void StateS62()
		{		
			Manager.LogState("S62");

			Manager.LogRepresentation("S62","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS64
		
		void StateS64()
		{		
			Manager.LogState("S64");

			Manager.LogRepresentation("S64","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS66
		
		void StateS66()
		{		
			Manager.LogState("S66");

			Manager.LogRepresentation("S66","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS68
		
		void StateS68()
		{		
			Manager.LogState("S68");

			Manager.LogRepresentation("S68","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS70
		
		void StateS70()
		{		
			Manager.LogState("S70");

			Manager.LogRepresentation("S70","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS72
		
		void StateS72()
		{		
			Manager.LogState("S72");

			Manager.LogRepresentation("S72","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS74
		
		void StateS74()
		{		
			Manager.LogState("S74");

			Manager.LogRepresentation("S74","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS76
		
		void StateS76()
		{		
			Manager.LogState("S76");

			Manager.LogRepresentation("S76","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS78
		
		void StateS78()
		{		
			Manager.LogState("S78");

			Manager.LogRepresentation("S78","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS80
		
		void StateS80()
		{		
			Manager.LogState("S80");

			Manager.LogRepresentation("S80","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS82
		
		void StateS82()
		{		
			Manager.LogState("S82");

			Manager.LogRepresentation("S82","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS84
		
		void StateS84()
		{		
			Manager.LogState("S84");

			Manager.LogRepresentation("S84","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS86
		
		void StateS86()
		{		
			Manager.LogState("S86");

			Manager.LogRepresentation("S86","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS88
		
		void StateS88()
		{		
			Manager.LogState("S88");

			Manager.LogRepresentation("S88","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS90
		
		void StateS90()
		{		
			Manager.LogState("S90");

			Manager.LogRepresentation("S90","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS92
		
		void StateS92()
		{		
			Manager.LogState("S92");

			Manager.LogRepresentation("S92","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS94
		
		void StateS94()
		{		
			Manager.LogState("S94");

			Manager.LogRepresentation("S94","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS96
		
		void StateS96()
		{		
			Manager.LogState("S96");

			Manager.LogRepresentation("S96","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS98
		
		void StateS98()
		{		
			Manager.LogState("S98");

			Manager.LogRepresentation("S98","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS100
		
		void StateS100()
		{		
			Manager.LogState("S100");

			Manager.LogRepresentation("S100","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\BoundedModelProgram.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using Microsoft.SpecExplorer.Runtime;
using Microsoft.SpecExplorer.Runtime.Infrastructure;
using System.Reflection;
using Microsoft.SpecExplorer;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Protocols.TestTools;

[assembly:
	LoadAssembly(typeof(Adapter.ICatalogWebServiceAdapter)),
	LoadAssembly(typeof(InputTypes.ChangeType)),
	LoadAssembly(typeof(InputTypes.IdType)),
	LoadAssembly(typeof(InputTypes.StringType)),
	LoadAssembly(typeof(ReturnTypes.ExceptionType)),
	LoadAssembly(typeof(InputTypes.ItemTypeId)),
	LoadAssembly(typeof(InputTypes.DateTimeType)),
	LoadAssembly(typeof(InputTypes.ArrayType)),
]

namespace GeneratedTests
{
	[TestClass]
	public partial class BoundedModelProgram : SpecExplorerTestClass
	{

		#region Variables            
		#endregion
		
		#region Adapters
		private static Adapter.ICatalogWebServiceAdapter icatalogwebserviceadapterInstance;
		#endregion
		
		bool finished;
		bool failed;
		bool nonAcceptingEnd;
		bool firstTime; // The flag for checking if it is the first initialization
        static bool needResetManager = false; // The flag for checking if need to reset the manager.
   
		public BoundedModelProgram() :
			base(
				new string[] { "S0", "S1", "S3", "S5", "S7", "S9", "S11", "S13", "S15", "S17", "S19", "S21", "S23", "S25", "S27", "S29", "S31", "S33", "S35", "S37", "S39", "S41", "S43", "S45", "S47", "S49", "S51", "S53", "S55", "S57", "S59", "S61", "S63", "S65", "S67", "S69", "S71", "S73", "S75", "S77", "S79", "S81", "S83", "S85", "S87", "S89", "S2", "S4", "S6", "S8", "S10", "S12", "S14", "S16", "S18", "S20", "S22", "S24", "S26", "S28", "S30", "S32", "S34", "S36", "S38", "S40", "S42", "S44", "S46", "S48", "S50", "S52", "S54", "S56", "S58", "S60", "S62", "S64", "S66", "S68", "S70", "S72", "S74", "S76", "S78", "S80", "S82", "S84", "S86", "S88", "S90" },
				new int[] { 0 }
			)
		{
			QuiescenceTimeout = TimeSpan.FromMilliseconds(5000);
			ProceedControlTimeout = TimeSpan.FromMilliseconds(20);
			firstTime = true;
		}
	

		static ITestManager NewManager(ITestSite testSite)
		{
			ITestManager newManager = new StandaloneTestManager(testSite);
			newManager.ReRuns = 1;
			newManager.DepthBound = 5;
			return newManager;	
		}       
	
        #region Initializing methods
	    
        [ClassInitialize()]
        public static void InitializeBeforeAllTests(TestContext context)
        {
            // Create the test site instance.
            TestClassBase.Initialize(context);
            ITestSite testSite = TestClassBase.BaseTestSite;

            // Initialize adapters
            testSite.Log.Add(LogEntryKind.Debug, "Found {0} adapter(s).", 1);
			             
            testSite.Log.Add(LogEntryKind.Debug, "Initializing adapter: {0}", "Adapter.ICatalogWebServiceAdapter");
            icatalogwebserviceadapterInstance= testSite.GetAdapter<Adapter.ICatalogWebServiceAdapter>();
            

            testSite.Log.Add(LogEntryKind.Debug, "Initializing the test manager.");
            
            // Loads necessary assemblies. 
            Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(LoadAssemblyAttribute), false);
            
            manager = NewManager(testSite);
            
            #region initialize actions
            
			actions = new MemberInfo[3];
			
			actions[0] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.ICatalogWebServiceAdapter.SaveProvider(InputTypes.ChangeType change_p1, InputTypes.IdType id_p2, InputTypes.StringType name_p3, InputTypes.StringType contactInfo_p4, InputTypes.StringType accountNumber_p5)");
			
			actions[1] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.ICatalogWebServiceAdapter.SaveEditorialItem(InputTypes.ChangeType change_p1, InputTypes.ItemTypeId itemType_p2, InputTypes.DateTimeType startDate_p3, InputTypes.DateTimeType endDate_p4)");
			
			actions[2] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.ICatalogWebServiceAdapter.SaveEditorialCollection(InputTypes.ChangeType change_p1, InputTypes.IdType id_p2, InputTypes.ItemTypeId type_p3, InputTypes.DateTimeType startDate_p4, InputTypes.DateTimeType endDate_p5, InputTypes.ArrayType items_p6)");
			
	        #endregion
	}//InitializeBeforeAllTests
		
		/// <summary>
		/// Override <see cref="TestClassBase.TestInitialize()"/>
		/// </summary>
		protected override void TestInitialize()
		{
		    base.TestInitialize();
		    
		    // add your test initialize code here
		}
		
        /// <summary>
        /// Many objects need to be reset in this method after the first test, since they have been initialized during 
        /// their creation time.
        /// </summary>
        private void InitializeExceptFirstTime()
        {
            OfflineObservation.Initialize();

            // Reset all adapters.
            icatalogwebserviceadapterInstance.Reset();
		}
		
        /// <summary>
        /// Don't intent to use the [TestInitialize] attribute, since multi-test may be run in a same test case method.
        /// </summary>
        private void InitializeBeforeEachTest()
        {
            if (!firstTime)
            {
                InitializeExceptFirstTime();
            }
            else
            {
                // Sets the flag to false after the first time.
                firstTime = false;
            }
         
            #region Initialize variables
 
            #endregion
        }

        /// <summary>
        /// Resets instances before each rerunning tests in a test case method.
        /// </summary>
        private void InitializeBeforeEachRerun()
        {
            // Reset the test manager except the first time.
            if (needResetManager)
            {
                Manager = NewManager(testSite);
            }
            needResetManager = true;          
        }
        
        #endregion

		
		[ClassCleanup()]
		public static new void Cleanup()
		{
            // Invoke base class Cleanup
            TestClassBase.Cleanup();
		}
		
		public void CheckAndResetObservation()
		{
			bool isError = OfflineObservation.CheckForErrors();
			if(isError)
			{
				string errorMessage = OfflineObservation.DumpQueues(false);
				testSite.Assert.Fail("Error observations have been found in queue:\r\n{0}", errorMessage);
			}
			OfflineObservation.Initialize();
		}		

		[TestMethod]
		public void TestCase0()
		{
			//initial state = S0

			int runs = 0;
			do
			{
				testSite.Log.Add(LogEntryKind.Debug, "Rerunning: {0} time(s).", runs + 1);
				InitializeBeforeEachRerun();
				do
				{	
					InitializeBeforeEachTest();
					Test(0);
				} while (!Manager.BoundReached && Manager.KeepRunning());
				CheckAndResetObservation();
				runs++;
			} while (runs < Manager.ReRuns);
		}
		
		public void Test(int initial)
		{
			currentState = initial;

			finished = false;
			failed = false;
			nonAcceptingEnd = false;
			
			while (!finished)
			{
				switch (currentState)
				{
					case 0: StateS0();   
						break;    
					case 1: StateS1();   
						break;    
					case 2: StateS3();   
						break;    
					case 3: StateS5();   
						break;    
					case 4: StateS7();   
						break;    
					case 5: StateS9();   
						break;    
					case 6: StateS11();   
						break;    
					case 7: StateS13();   
						break;    
					case 8: StateS15();   
						break;    
					case 9: StateS17();   
						break;    
					case 10: StateS19();   
						break;    
					case 11: StateS21();   
						break;    
					case 12: StateS23();   
						break;    
					case 13: StateS25();   
						break;    
					case 14: StateS27();   
						break;    
					case 15: StateS29();   
						break;    
					case 16: StateS31();   
						break;    
					case 17: StateS33();   
						break;    
					case 18: StateS35();   
						break;    
					case 19: StateS37();   
						break;    
					case 20: StateS39();   
						break;    
					case 21: StateS41();   
						break;    
					case 22: StateS43();   
						break;    
					case 23: StateS45();   
						break;    
					case 24: StateS47();   
						break;    
					case 25: StateS49();   
						break;    
					case 26: StateS51();   
						break;    
					case 27: StateS53();   
						break;    
					case 28: StateS55();   
						break;    
					case 29: StateS57();   
						break;    
					case 30: StateS59();   
						break;    
					case 31: StateS61();   
						break;    
					case 32: StateS63();   
						break;    
					case 33: StateS65();   
						break;    
					case 34: StateS67();   
						break;    
					case 35: StateS69();   
						break;    
					case 36: StateS71();   
						break;    
					case 37: StateS73();   
						break;    
					case 38: StateS75();   
						break;    
					case 39: StateS77();   
						break;    
					case 40: StateS79();   
						break;    
					case 41: StateS81();   
						break;    
					case 42: StateS83();   
						break;    
					case 43: StateS85();   
						break;    
					case 44: StateS87();   
						break;    
					case 45: StateS89();   
						break;    
					case 46: StateS2();   
						break;    
					case 47: StateS4();   
						break;    
					case 48: StateS6();   
						break;    
					case 49: StateS8();   
						break;    
					case 50: StateS10();   
						break;    
					case 51: StateS12();   
						break;    
					case 52: StateS14();   
						break;    
					case 53: StateS16();   
						break;    
					case 54: StateS18();   
						break;    
					case 55: StateS20();   
						break;    
					case 56: StateS22();   
						break;    
					case 57: StateS24();   
						break;    
					case 58: StateS26();   
						break;    
					case 59: StateS28();   
						break;    
					case 60: StateS30();   
						break;    
					case 61: StateS32();   
						break;    
					case 62: StateS34();   
						break;    
					case 63: StateS36();   
						break;    
					case 64: StateS38();   
						break;    
					case 65: StateS40();   
						break;    
					case 66: StateS42();   
						break;    
					case 67: StateS44();   
						break;    
					case 68: StateS46();   
						break;    
					case 69: StateS48();   
						break;    
					case 70: StateS50();   
						break;    
					case 71: StateS52();   
						break;    
					case 72: StateS54();   
						break;    
					case 73: StateS56();   
						break;    
					case 74: StateS58();   
						break;    
					case 75: StateS60();   
						break;    
					case 76: StateS62();   
						break;    
					case 77: StateS64();   
						break;    
					case 78: StateS66();   
						break;    
					case 79: StateS68();   
						break;    
					case 80: StateS70();   
						break;    
					case 81: StateS72();   
						break;    
					case 82: StateS74();   
						break;    
					case 83: StateS76();   
						break;    
					case 84: StateS78();   
						break;    
					case 85: StateS80();   
						break;    
					case 86: StateS82();   
						break;    
					case 87: StateS84();   
						break;    
					case 88: StateS86();   
						break;    
					case 89: StateS88();   
						break;    
					case 90: StateS90();   
						break;    
				}
			}                               

			if(failed)
			{
			    StringBuilder errMsg = new StringBuilder();
			    
			    errMsg.AppendFormat("Conformance error in state {0}. ", states[currentState]);

                if (nonAcceptingEnd)
                {
                    errMsg.AppendFormat("Non-accepting end state.");
                }
                else if (Manager.BoundReached)
                {
                    errMsg.AppendFormat("Exploration bound reached in non-accepting state.");
                }
                else
                {
                    errMsg.AppendFormat("Observed action queue is incorrect. ");
                    errMsg.AppendFormat("Actual action: {0}. ", OfflineObservation.DumpQueues());
                    errMsg.AppendFormat("Expected action: {0}", OfflineObservation.DumpPatterns());
                    
                    Manager.DumpFailedTransitions();
                }
                Manager.LogConformanceError(errMsg.ToString());
			}
            else
	        {
                testSite.Assert.Pass("The test passed.");
	        }
        }    

		#region StateS0
		
		void StateS0()
		{		
			Manager.LogState("S0");

			ControllablesS0();
		}	


		#region ControllableTransitions
		
		void StateS0Controllable0()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Length501) -> S1");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 1;
				Manager.LogTransition("S0", "S1", "call SaveProvider(Add,New,Null,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable1()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Empty,Length501,Length501) -> S3");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 2;
				Manager.LogTransition("S0", "S3", "call SaveProvider(Add,New,Empty,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable2()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Length50,Length501,Length501) -> S5");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 3;
				Manager.LogTransition("S0", "S5", "call SaveProvider(Add,New,Length50,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable3()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Length51,Length501,Length501) -> S7");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 4;
				Manager.LogTransition("S0", "S7", "call SaveProvider(Add,New,Length51,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable4()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Length500,Length501,Length501) -> S9");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 5;
				Manager.LogTransition("S0", "S9", "call SaveProvider(Add,New,Length500,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable5()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Length501,Length501,Length501) -> S11");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 6;
				Manager.LogTransition("S0", "S11", "call SaveProvider(Add,New,Length501,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable6()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Null,Length501,Length501) -> S13");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 7;
				Manager.LogTransition("S0", "S13", "call SaveProvider(Update,New,Null,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable7()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Empty,Length501,Length501) -> S15");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 8;
				Manager.LogTransition("S0", "S15", "call SaveProvider(Update,New,Empty,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable8()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Length50,Length501,Length501) -> S17");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 9;
				Manager.LogTransition("S0", "S17", "call SaveProvider(Update,New,Length50,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable9()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Length51,Length501,Length501) -> S19");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 10;
				Manager.LogTransition("S0", "S19", "call SaveProvider(Update,New,Length51,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable10()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Length500,Length501,Length501) -> S21");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 11;
				Manager.LogTransition("S0", "S21", "call SaveProvider(Update,New,Length500,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable11()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Update,New,Length501,Length501,Length501) -> S23");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Update, InputTypes.IdType.New, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 12;
				Manager.LogTransition("S0", "S23", "call SaveProvider(Update,New,Length501,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable12()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Null,Length501,Length501) -> S25");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 13;
				Manager.LogTransition("S0", "S25", "call SaveProvider(Delete,New,Null,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable13()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Empty,Length501,Length501) -> S27");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 14;
				Manager.LogTransition("S0", "S27", "call SaveProvider(Delete,New,Empty,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable14()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Length50,Length501,Length501) -> S29");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 15;
				Manager.LogTransition("S0", "S29", "call SaveProvider(Delete,New,Length50,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable15()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Length51,Length501,Length501) -> S31");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 16;
				Manager.LogTransition("S0", "S31", "call SaveProvider(Delete,New,Length51,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable16()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Length500,Length501,Length501) -> S33");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 17;
				Manager.LogTransition("S0", "S33", "call SaveProvider(Delete,New,Length500,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable17()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Delete,New,Length501,Length501,Length501) -> S35");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 18;
				Manager.LogTransition("S0", "S35", "call SaveProvider(Delete,New,Length501,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable18()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Past,Past) -> S37");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 19;
				Manager.LogTransition("S0", "S37", "call SaveEditorialItem(Add,NotSpecified,Past,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable19()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Past,Today) -> S39");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 20;
				Manager.LogTransition("S0", "S39", "call SaveEditorialItem(Add,NotSpecified,Past,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable20()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Past,Future) -> S41");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 21;
				Manager.LogTransition("S0", "S41", "call SaveEditorialItem(Add,NotSpecified,Past,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable21()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Today,Past) -> S43");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 22;
				Manager.LogTransition("S0", "S43", "call SaveEditorialItem(Add,NotSpecified,Today,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable22()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Today,Today) -> S45");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 23;
				Manager.LogTransition("S0", "S45", "call SaveEditorialItem(Add,NotSpecified,Today,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable23()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Today,Future) -> S47");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 24;
				Manager.LogTransition("S0", "S47", "call SaveEditorialItem(Add,NotSpecified,Today,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable24()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Future,Past) -> S49");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 25;
				Manager.LogTransition("S0", "S49", "call SaveEditorialItem(Add,NotSpecified,Future,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable25()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Future,Today) -> S51");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 26;
				Manager.LogTransition("S0", "S51", "call SaveEditorialItem(Add,NotSpecified,Future,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable26()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Add,NotSpecified,Future,Future) -> S53");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Add, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 27;
				Manager.LogTransition("S0", "S53", "call SaveEditorialItem(Add,NotSpecified,Future,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable27()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Past,Past) -> S55");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 28;
				Manager.LogTransition("S0", "S55", "call SaveEditorialItem(Update,NotSpecified,Past,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable28()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Past,Today) -> S57");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 29;
				Manager.LogTransition("S0", "S57", "call SaveEditorialItem(Update,NotSpecified,Past,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable29()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Past,Future) -> S59");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 30;
				Manager.LogTransition("S0", "S59", "call SaveEditorialItem(Update,NotSpecified,Past,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable30()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Today,Past) -> S61");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 31;
				Manager.LogTransition("S0", "S61", "call SaveEditorialItem(Update,NotSpecified,Today,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable31()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Today,Today) -> S63");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 32;
				Manager.LogTransition("S0", "S63", "call SaveEditorialItem(Update,NotSpecified,Today,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable32()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Today,Future) -> S65");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 33;
				Manager.LogTransition("S0", "S65", "call SaveEditorialItem(Update,NotSpecified,Today,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable33()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Future,Past) -> S67");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 34;
				Manager.LogTransition("S0", "S67", "call SaveEditorialItem(Update,NotSpecified,Future,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable34()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Future,Today) -> S69");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 35;
				Manager.LogTransition("S0", "S69", "call SaveEditorialItem(Update,NotSpecified,Future,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable35()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Update,NotSpecified,Future,Future) -> S71");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Update, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 36;
				Manager.LogTransition("S0", "S71", "call SaveEditorialItem(Update,NotSpecified,Future,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable36()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Past,Past) -> S73");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 37;
				Manager.LogTransition("S0", "S73", "call SaveEditorialItem(Delete,NotSpecified,Past,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable37()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Past,Today) -> S75");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 38;
				Manager.LogTransition("S0", "S75", "call SaveEditorialItem(Delete,NotSpecified,Past,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable38()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Past,Future) -> S77");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Past, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 39;
				Manager.LogTransition("S0", "S77", "call SaveEditorialItem(Delete,NotSpecified,Past,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable39()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Today,Past) -> S79");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 40;
				Manager.LogTransition("S0", "S79", "call SaveEditorialItem(Delete,NotSpecified,Today,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable40()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Today,Today) -> S81");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 41;
				Manager.LogTransition("S0", "S81", "call SaveEditorialItem(Delete,NotSpecified,Today,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable41()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Today,Future) -> S83");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 42;
				Manager.LogTransition("S0", "S83", "call SaveEditorialItem(Delete,NotSpecified,Today,Future)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable42()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Future,Past) -> S85");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 43;
				Manager.LogTransition("S0", "S85", "call SaveEditorialItem(Delete,NotSpecified,Future,Past)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable43()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Future,Today) -> S87");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 44;
				Manager.LogTransition("S0", "S87", "call SaveEditorialItem(Delete,NotSpecified,Future,Today)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable44()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveEditorialItem(Delete,NotSpecified,Future,Future) -> S89");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					icatalogwebserviceadapterInstance.SaveEditorialItem(InputTypes.ChangeType.Delete, InputTypes.ItemTypeId.NotSpecified, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[1] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[1] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 45;
				Manager.LogTransition("S0", "S89", "call SaveEditorialItem(Delete,NotSpecified,Future,Future)");
			}
			else
				finished = failed = true;
		}
		

		void ControllablesS0()
		{
			int choice = Manager.ChooseStep(45);
			if (Manager.BoundReached)
			{
				finished = true;
				failed = false;							
				return;
			}
			switch (choice)
			{
				case 0: StateS0Controllable0();
					break;
				case 1: StateS0Controllable1();
					break;
				case 2: StateS0Controllable2();
					break;
				case 3: StateS0Controllable3();
					break;
				case 4: StateS0Controllable4();
					break;
				case 5: StateS0Controllable5();
					break;
				case 6: StateS0Controllable6();
					break;
				case 7: StateS0Controllable7();
					break;
				case 8: StateS0Controllable8();
					break;
				case 9: StateS0Controllable9();
					break;
				case 10: StateS0Controllable10();
					break;
				case 11: StateS0Controllable11();
					break;
				case 12: StateS0Controllable12();
					break;
				case 13: StateS0Controllable13();
					break;
				case 14: StateS0Controllable14();
					break;
				case 15: StateS0Controllable15();
					break;
				case 16: StateS0Controllable16();
					break;
				case 17: StateS0Controllable17();
					break;
				case 18: StateS0Controllable18();
					break;
				case 19: StateS0Controllable19();
					break;
				case 20: StateS0Controllable20();
					break;
				case 21: StateS0Controllable21();
					break;
				case 22: StateS0Controllable22();
					break;
				case 23: StateS0Controllable23();
					break;
				case 24: StateS0Controllable24();
					break;
				case 25: StateS0Controllable25();
					break;
				case 26: StateS0Controllable26();
					break;
				case 27: StateS0Controllable27();
					break;
				case 28: StateS0Controllable28();
					break;
				case 29: StateS0Controllable29();
					break;
				case 30: StateS0Controllable30();
					break;
				case 31: StateS0Controllable31();
					break;
				case 32: StateS0Controllable32();
					break;
				case 33: StateS0Controllable33();
					break;
				case 34: StateS0Controllable34();
					break;
				case 35: StateS0Controllable35();
					break;
				case 36: StateS0Controllable36();
					break;
				case 37: StateS0Controllable37();
					break;
				case 38: StateS0Controllable38();
					break;
				case 39: StateS0Controllable39();
					break;
				case 40: StateS0Controllable40();
					break;
				case 41: StateS0Controllable41();
					break;
				case 42: StateS0Controllable42();
					break;
				case 43: StateS0Controllable43();
					break;
				case 44: StateS0Controllable44();
					break;
			}
		}
		
		#endregion


		#endregion

		#region StateS1
		
		void StateS1()
		{		
			Manager.LogState("S1");

			bool observed = ObservablesS1();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS1Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S1 -> return SaveProvider/SqlParameterMissingException -> S2");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.SqlParameterMissingException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.SqlParameterMissingException)");


			if(Manager.EndTransaction())
			{
				currentState = 46;
	
				Manager.LogTransition("S1", "S2", "return SaveProvider/SqlParameterMissingException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS1()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS1Pattern0, 
					"return SaveProvider/SqlParameterMissingException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS1Pattern0, 
					"return SaveProvider/SqlParameterMissingException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS3
		
		void StateS3()
		{		
			Manager.LogState("S3");

			bool observed = ObservablesS3();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS3Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S3 -> return SaveProvider/ArgumentNullException -> S4");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException)");


			if(Manager.EndTransaction())
			{
				currentState = 47;
	
				Manager.LogTransition("S3", "S4", "return SaveProvider/ArgumentNullException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS3()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS3Pattern0, 
					"return SaveProvider/ArgumentNullException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS3Pattern0, 
					"return SaveProvider/ArgumentNullException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS5
		
		void StateS5()
		{		
			Manager.LogState("S5");

			bool observed = ObservablesS5();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS5Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S5 -> return SaveProvider/NoError -> S6");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 48;
	
				Manager.LogTransition("S5", "S6", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS5()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS5Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS5Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS7
		
		void StateS7()
		{		
			Manager.LogState("S7");

			bool observed = ObservablesS7();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS7Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S7 -> return SaveProvider/NoError -> S8");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 49;
	
				Manager.LogTransition("S7", "S8", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS7()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS7Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS7Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS9
		
		void StateS9()
		{		
			Manager.LogState("S9");

			bool observed = ObservablesS9();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS9Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S9 -> return SaveProvider/NoError -> S10");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 50;
	
				Manager.LogTransition("S9", "S10", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS9()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS9Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS9Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS11
		
		void StateS11()
		{		
			Manager.LogState("S11");

			bool observed = ObservablesS11();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS11Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S11 -> return SaveProvider/NoError -> S12");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 51;
	
				Manager.LogTransition("S11", "S12", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS11()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS11Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS11Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS13
		
		void StateS13()
		{		
			Manager.LogState("S13");

			bool observed = ObservablesS13();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS13Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S13 -> return SaveProvider/SqlParameterMissingException -> S14");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.SqlParameterMissingException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.SqlParameterMissingException)");


			if(Manager.EndTransaction())
			{
				currentState = 52;
	
				Manager.LogTransition("S13", "S14", "return SaveProvider/SqlParameterMissingException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS13()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS13Pattern0, 
					"return SaveProvider/SqlParameterMissingException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS13Pattern0, 
					"return SaveProvider/SqlParameterMissingException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS15
		
		void StateS15()
		{		
			Manager.LogState("S15");

			bool observed = ObservablesS15();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS15Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S15 -> return SaveProvider/ArgumentNullException -> S16");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException)");


			if(Manager.EndTransaction())
			{
				currentState = 53;
	
				Manager.LogTransition("S15", "S16", "return SaveProvider/ArgumentNullException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS15()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS15Pattern0, 
					"return SaveProvider/ArgumentNullException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS15Pattern0, 
					"return SaveProvider/ArgumentNullException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS17
		
		void StateS17()
		{		
			Manager.LogState("S17");

			bool observed = ObservablesS17();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS17Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S17 -> return SaveProvider/NoError -> S18");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 54;
	
				Manager.LogTransition("S17", "S18", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS17()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS17Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS17Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS19
		
		void StateS19()
		{		
			Manager.LogState("S19");

			bool observed = ObservablesS19();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS19Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S19 -> return SaveProvider/NoError -> S20");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 55;
	
				Manager.LogTransition("S19", "S20", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS19()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS19Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS19Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS21
		
		void StateS21()
		{		
			Manager.LogState("S21");

			bool observed = ObservablesS21();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS21Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S21 -> return SaveProvider/NoError -> S22");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 56;
	
				Manager.LogTransition("S21", "S22", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS21()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS21Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS21Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS23
		
		void StateS23()
		{		
			Manager.LogState("S23");

			bool observed = ObservablesS23();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS23Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S23 -> return SaveProvider/NoError -> S24");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NoError)");


			if(Manager.EndTransaction())
			{
				currentState = 57;
	
				Manager.LogTransition("S23", "S24", "return SaveProvider/NoError");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS23()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS23Pattern0, 
					"return SaveProvider/NoError")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS23Pattern0, 
					"return SaveProvider/NoError")
			);
		}			
		
		#endregion



		#endregion

		#region StateS25
		
		void StateS25()
		{		
			Manager.LogState("S25");

			bool observed = ObservablesS25();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS25Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S25 -> return SaveProvider/NotSupportedException -> S26");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException)");


			if(Manager.EndTransaction())
			{
				currentState = 58;
	
				Manager.LogTransition("S25", "S26", "return SaveProvider/NotSupportedException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS25()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS25Pattern0, 
					"return SaveProvider/NotSupportedException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS25Pattern0, 
					"return SaveProvider/NotSupportedException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS27
		
		void StateS27()
		{		
			Manager.LogState("S27");

			bool observed = ObservablesS27();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS27Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S27 -> return SaveProvider/ArgumentNullException -> S28");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentNullException)");


			if(Manager.EndTransaction())
			{
				currentState = 59;
	
				Manager.LogTransition("S27", "S28", "return SaveProvider/ArgumentNullException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS27()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS27Pattern0, 
					"return SaveProvider/ArgumentNullException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS27Pattern0, 
					"return SaveProvider/ArgumentNullException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS29
		
		void StateS29()
		{		
			Manager.LogState("S29");

			bool observed = ObservablesS29();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS29Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S29 -> return SaveProvider/NotSupportedException -> S30");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException)");


			if(Manager.EndTransaction())
			{
				currentState = 60;
	
				Manager.LogTransition("S29", "S30", "return SaveProvider/NotSupportedException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS29()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS29Pattern0, 
					"return SaveProvider/NotSupportedException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS29Pattern0, 
					"return SaveProvider/NotSupportedException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS31
		
		void StateS31()
		{		
			Manager.LogState("S31");

			bool observed = ObservablesS31();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS31Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S31 -> return SaveProvider/NotSupportedException -> S32");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException)");


			if(Manager.EndTransaction())
			{
				currentState = 61;
	
				Manager.LogTransition("S31", "S32", "return SaveProvider/NotSupportedException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS31()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS31Pattern0, 
					"return SaveProvider/NotSupportedException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS31Pattern0, 
					"return SaveProvider/NotSupportedException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS33
		
		void StateS33()
		{		
			Manager.LogState("S33");

			bool observed = ObservablesS33();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS33Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S33 -> return SaveProvider/NotSupportedException -> S34");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException)");


			if(Manager.EndTransaction())
			{
				currentState = 62;
	
				Manager.LogTransition("S33", "S34", "return SaveProvider/NotSupportedException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS33()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS33Pattern0, 
					"return SaveProvider/NotSupportedException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS33Pattern0, 
					"return SaveProvider/NotSupportedException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS35
		
		void StateS35()
		{		
			Manager.LogState("S35");

			bool observed = ObservablesS35();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS35Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S35 -> return SaveProvider/NotSupportedException -> S36");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.NotSupportedException)");


			if(Manager.EndTransaction())
			{
				currentState = 63;
	
				Manager.LogTransition("S35", "S36", "return SaveProvider/NotSupportedException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS35()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[0] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[0] as MethodBase, 
					StateS35Pattern0, 
					"return SaveProvider/NotSupportedException")					
                :
                new ObservationPattern(actions[0] as EventInfo, 
					StateS35Pattern0, 
					"return SaveProvider/NotSupportedException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS37
		
		void StateS37()
		{		
			Manager.LogState("S37");

			bool observed = ObservablesS37();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS37Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S37 -> return SaveEditorialItem/ArgumentException -> S38");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 64;
	
				Manager.LogTransition("S37", "S38", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS37()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS37Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS37Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS39
		
		void StateS39()
		{		
			Manager.LogState("S39");

			bool observed = ObservablesS39();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS39Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S39 -> return SaveEditorialItem/ArgumentException -> S40");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 65;
	
				Manager.LogTransition("S39", "S40", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS39()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS39Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS39Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS41
		
		void StateS41()
		{		
			Manager.LogState("S41");

			bool observed = ObservablesS41();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS41Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S41 -> return SaveEditorialItem/ArgumentException -> S42");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 66;
	
				Manager.LogTransition("S41", "S42", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS41()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS41Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS41Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS43
		
		void StateS43()
		{		
			Manager.LogState("S43");

			bool observed = ObservablesS43();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS43Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S43 -> return SaveEditorialItem/ArgumentException -> S44");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 67;
	
				Manager.LogTransition("S43", "S44", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS43()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS43Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS43Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS45
		
		void StateS45()
		{		
			Manager.LogState("S45");

			bool observed = ObservablesS45();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS45Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S45 -> return SaveEditorialItem/ArgumentException -> S46");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 68;
	
				Manager.LogTransition("S45", "S46", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS45()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS45Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS45Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS47
		
		void StateS47()
		{		
			Manager.LogState("S47");

			bool observed = ObservablesS47();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS47Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S47 -> return SaveEditorialItem/ArgumentException -> S48");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 69;
	
				Manager.LogTransition("S47", "S48", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS47()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS47Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS47Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS49
		
		void StateS49()
		{		
			Manager.LogState("S49");

			bool observed = ObservablesS49();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS49Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S49 -> return SaveEditorialItem/ArgumentException -> S50");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 70;
	
				Manager.LogTransition("S49", "S50", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS49()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS49Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS49Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS51
		
		void StateS51()
		{		
			Manager.LogState("S51");

			bool observed = ObservablesS51();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS51Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S51 -> return SaveEditorialItem/ArgumentException -> S52");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 71;
	
				Manager.LogTransition("S51", "S52", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS51()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS51Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS51Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS53
		
		void StateS53()
		{		
			Manager.LogState("S53");

			bool observed = ObservablesS53();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS53Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S53 -> return SaveEditorialItem/ArgumentException -> S54");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 72;
	
				Manager.LogTransition("S53", "S54", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS53()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS53Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS53Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS55
		
		void StateS55()
		{		
			Manager.LogState("S55");

			bool observed = ObservablesS55();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS55Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S55 -> return SaveEditorialItem/ArgumentException -> S56");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 73;
	
				Manager.LogTransition("S55", "S56", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS55()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS55Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS55Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS57
		
		void StateS57()
		{		
			Manager.LogState("S57");

			bool observed = ObservablesS57();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS57Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S57 -> return SaveEditorialItem/ArgumentException -> S58");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 74;
	
				Manager.LogTransition("S57", "S58", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS57()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS57Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS57Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS59
		
		void StateS59()
		{		
			Manager.LogState("S59");

			bool observed = ObservablesS59();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS59Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S59 -> return SaveEditorialItem/ArgumentException -> S60");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 75;
	
				Manager.LogTransition("S59", "S60", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS59()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS59Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS59Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS61
		
		void StateS61()
		{		
			Manager.LogState("S61");

			bool observed = ObservablesS61();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS61Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S61 -> return SaveEditorialItem/ArgumentException -> S62");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 76;
	
				Manager.LogTransition("S61", "S62", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS61()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS61Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS61Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS63
		
		void StateS63()
		{		
			Manager.LogState("S63");

			bool observed = ObservablesS63();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS63Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S63 -> return SaveEditorialItem/ArgumentException -> S64");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 77;
	
				Manager.LogTransition("S63", "S64", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS63()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS63Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS63Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS65
		
		void StateS65()
		{		
			Manager.LogState("S65");

			bool observed = ObservablesS65();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS65Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S65 -> return SaveEditorialItem/ArgumentException -> S66");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 78;
	
				Manager.LogTransition("S65", "S66", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS65()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS65Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS65Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS67
		
		void StateS67()
		{		
			Manager.LogState("S67");

			bool observed = ObservablesS67();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS67Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S67 -> return SaveEditorialItem/ArgumentException -> S68");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 79;
	
				Manager.LogTransition("S67", "S68", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS67()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS67Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS67Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS69
		
		void StateS69()
		{		
			Manager.LogState("S69");

			bool observed = ObservablesS69();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS69Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S69 -> return SaveEditorialItem/ArgumentException -> S70");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 80;
	
				Manager.LogTransition("S69", "S70", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS69()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS69Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS69Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS71
		
		void StateS71()
		{		
			Manager.LogState("S71");

			bool observed = ObservablesS71();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS71Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S71 -> return SaveEditorialItem/ArgumentException -> S72");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 81;
	
				Manager.LogTransition("S71", "S72", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS71()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS71Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS71Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS73
		
		void StateS73()
		{		
			Manager.LogState("S73");

			bool observed = ObservablesS73();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS73Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S73 -> return SaveEditorialItem/ArgumentException -> S74");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 82;
	
				Manager.LogTransition("S73", "S74", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS73()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS73Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS73Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS75
		
		void StateS75()
		{		
			Manager.LogState("S75");

			bool observed = ObservablesS75();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS75Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S75 -> return SaveEditorialItem/ArgumentException -> S76");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 83;
	
				Manager.LogTransition("S75", "S76", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS75()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS75Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS75Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS77
		
		void StateS77()
		{		
			Manager.LogState("S77");

			bool observed = ObservablesS77();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS77Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S77 -> return SaveEditorialItem/ArgumentException -> S78");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 84;
	
				Manager.LogTransition("S77", "S78", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS77()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS77Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS77Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS79
		
		void StateS79()
		{		
			Manager.LogState("S79");

			bool observed = ObservablesS79();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS79Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S79 -> return SaveEditorialItem/ArgumentException -> S80");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 85;
	
				Manager.LogTransition("S79", "S80", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS79()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS79Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS79Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS81
		
		void StateS81()
		{		
			Manager.LogState("S81");

			bool observed = ObservablesS81();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS81Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S81 -> return SaveEditorialItem/ArgumentException -> S82");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 86;
	
				Manager.LogTransition("S81", "S82", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS81()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS81Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS81Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS83
		
		void StateS83()
		{		
			Manager.LogState("S83");

			bool observed = ObservablesS83();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS83Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S83 -> return SaveEditorialItem/ArgumentException -> S84");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 87;
	
				Manager.LogTransition("S83", "S84", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS83()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS83Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS83Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS85
		
		void StateS85()
		{		
			Manager.LogState("S85");

			bool observed = ObservablesS85();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS85Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S85 -> return SaveEditorialItem/ArgumentException -> S86");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 88;
	
				Manager.LogTransition("S85", "S86", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS85()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS85Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS85Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS87
		
		void StateS87()
		{		
			Manager.LogState("S87");

			bool observed = ObservablesS87();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS87Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S87 -> return SaveEditorialItem/ArgumentException -> S88");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 89;
	
				Manager.LogTransition("S87", "S88", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS87()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS87Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS87Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS89
		
		void StateS89()
		{		
			Manager.LogState("S89");

			bool observed = ObservablesS89();
			
			finished = failed = !observed;
		}	

		#region ObservableTransition
		
		bool StateS89Pattern0(OfflineObservation observation)
		{
			Manager.BeginTransaction("S89 -> return SaveEditorialItem/ArgumentException -> S90");

			UntypedObservation uObs = (UntypedObservation) observation;                                    
			Manager.Assert((ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException), "(ReturnTypes.ExceptionType)uObs.Arguments[0] == (ReturnTypes.ExceptionType)(ReturnTypes.ExceptionType.ArgumentException)");


			if(Manager.EndTransaction())
			{
				currentState = 90;
	
				Manager.LogTransition("S89", "S90", "return SaveEditorialItem/ArgumentException");
				
				return true;
			}
			else
				return false;
		}
	
		bool ObservablesS89()
		{
						
			
			return OfflineObservation.Observe(QuiescenceTimeout,
	
				actions[1] is MethodBase?				
				new ObservationPattern(ObservationKind.Return, 
				    actions[1] as MethodBase, 
					StateS89Pattern0, 
					"return SaveEditorialItem/ArgumentException")					
                :
                new ObservationPattern(actions[1] as EventInfo, 
					StateS89Pattern0, 
					"return SaveEditorialItem/ArgumentException")
			);
		}			
		
		#endregion



		#endregion

		#region StateS2
		
		void StateS2()
		{		
			Manager.LogState("S2");

			Manager.LogRepresentation("S2","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS4
		
		void StateS4()
		{		
			Manager.LogState("S4");

			Manager.LogRepresentation("S4","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS6
		
		void StateS6()
		{		
			Manager.LogState("S6");

			Manager.LogRepresentation("S6","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS8
		
		void StateS8()
		{		
			Manager.LogState("S8");

			Manager.LogRepresentation("S8","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS10
		
		void StateS10()
		{		
			Manager.LogState("S10");

			Manager.LogRepresentation("S10","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS12
		
		void StateS12()
		{		
			Manager.LogState("S12");

			Manager.LogRepresentation("S12","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS14
		
		void StateS14()
		{		
			Manager.LogState("S14");

			Manager.LogRepresentation("S14","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS16
		
		void StateS16()
		{		
			Manager.LogState("S16");

			Manager.LogRepresentation("S16","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS18
		
		void StateS18()
		{		
			Manager.LogState("S18");

			Manager.LogRepresentation("S18","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS20
		
		void StateS20()
		{		
			Manager.LogState("S20");

			Manager.LogRepresentation("S20","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS22
		
		void StateS22()
		{		
			Manager.LogState("S22");

			Manager.LogRepresentation("S22","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS24
		
		void StateS24()
		{		
			Manager.LogState("S24");

			Manager.LogRepresentation("S24","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS26
		
		void StateS26()
		{		
			Manager.LogState("S26");

			Manager.LogRepresentation("S26","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS28
		
		void StateS28()
		{		
			Manager.LogState("S28");

			Manager.LogRepresentation("S28","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS30
		
		void StateS30()
		{		
			Manager.LogState("S30");

			Manager.LogRepresentation("S30","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS32
		
		void StateS32()
		{		
			Manager.LogState("S32");

			Manager.LogRepresentation("S32","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS34
		
		void StateS34()
		{		
			Manager.LogState("S34");

			Manager.LogRepresentation("S34","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS36
		
		void StateS36()
		{		
			Manager.LogState("S36");

			Manager.LogRepresentation("S36","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS38
		
		void StateS38()
		{		
			Manager.LogState("S38");

			Manager.LogRepresentation("S38","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS40
		
		void StateS40()
		{		
			Manager.LogState("S40");

			Manager.LogRepresentation("S40","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS42
		
		void StateS42()
		{		
			Manager.LogState("S42");

			Manager.LogRepresentation("S42","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS44
		
		void StateS44()
		{		
			Manager.LogState("S44");

			Manager.LogRepresentation("S44","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS46
		
		void StateS46()
		{		
			Manager.LogState("S46");

			Manager.LogRepresentation("S46","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS48
		
		void StateS48()
		{		
			Manager.LogState("S48");

			Manager.LogRepresentation("S48","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS50
		
		void StateS50()
		{		
			Manager.LogState("S50");

			Manager.LogRepresentation("S50","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS52
		
		void StateS52()
		{		
			Manager.LogState("S52");

			Manager.LogRepresentation("S52","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS54
		
		void StateS54()
		{		
			Manager.LogState("S54");

			Manager.LogRepresentation("S54","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS56
		
		void StateS56()
		{		
			Manager.LogState("S56");

			Manager.LogRepresentation("S56","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS58
		
		void StateS58()
		{		
			Manager.LogState("S58");

			Manager.LogRepresentation("S58","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS60
		
		void StateS60()
		{		
			Manager.LogState("S60");

			Manager.LogRepresentation("S60","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS62
		
		void StateS62()
		{		
			Manager.LogState("S62");

			Manager.LogRepresentation("S62","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS64
		
		void StateS64()
		{		
			Manager.LogState("S64");

			Manager.LogRepresentation("S64","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS66
		
		void StateS66()
		{		
			Manager.LogState("S66");

			Manager.LogRepresentation("S66","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS68
		
		void StateS68()
		{		
			Manager.LogState("S68");

			Manager.LogRepresentation("S68","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS70
		
		void StateS70()
		{		
			Manager.LogState("S70");

			Manager.LogRepresentation("S70","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS72
		
		void StateS72()
		{		
			Manager.LogState("S72");

			Manager.LogRepresentation("S72","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS74
		
		void StateS74()
		{		
			Manager.LogState("S74");

			Manager.LogRepresentation("S74","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS76
		
		void StateS76()
		{		
			Manager.LogState("S76");

			Manager.LogRepresentation("S76","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS78
		
		void StateS78()
		{		
			Manager.LogState("S78");

			Manager.LogRepresentation("S78","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS80
		
		void StateS80()
		{		
			Manager.LogState("S80");

			Manager.LogRepresentation("S80","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS82
		
		void StateS82()
		{		
			Manager.LogState("S82");

			Manager.LogRepresentation("S82","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS84
		
		void StateS84()
		{		
			Manager.LogState("S84");

			Manager.LogRepresentation("S84","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS86
		
		void StateS86()
		{		
			Manager.LogState("S86");

			Manager.LogRepresentation("S86","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS88
		
		void StateS88()
		{		
			Manager.LogState("S88");

			Manager.LogRepresentation("S88","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		#region StateS90
		
		void StateS90()
		{		
			Manager.LogState("S90");

			Manager.LogRepresentation("S90","S0","Equivalent");
			currentState = 0;
		}	



		#endregion

		
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_catalogwebservice-4999-functional_none_12.4.56.0_none_b5ca8cd1b94065dc
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=catalogwebservice-4999-functional
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.manifest
XP_MANIFEST_PATH=manifests\x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.cat
XP_CATALOG_PATH=manifests\x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.cat
XP_PAYLOAD_PATH=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=catalogwebservice-4999-functional,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_catalogwebservice-4999-functional_none_12.4.56.0_none_b5ca8cd1b94065dc
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=catalogwebservice-4999-functional
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.manifest
XP_MANIFEST_PATH=manifests\x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.cat
XP_CATALOG_PATH=manifests\x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce.cat
XP_PAYLOAD_PATH=x86_catalogwebservice-4999-functional_no-public-key_12.4.56.0_x-ww_04a599ce
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=catalogwebservice-4999-functional,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\Adapter\Utilities.cs ===
﻿using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Configuration;
using System.Reflection;
using System.Xml;
using System.Collections.Generic;

using ContentIngestionService;
using Microsoft.Modeling;

using InputTypes;
using ReturnTypes;

using System.Data.Sql;
using System.Data.SqlTypes;
using System.Data;
using System.Globalization;

namespace Adapter
{
    public class Configuration
    {
        public static bool EnableErrors = true;
    }

    internal class Utilities
    {
        static Random random = new Random();

        static Utilities()
        {
            string connectionString = String.Format("Data Source={0};Initial Catalog=RawCatalogDB;Integrated Security=True;Pooling=False", Properties.Settings.Default.DatabaseServer);
            connection = new SqlConnection(connectionString); 
            connection.Open();
        }
        private static string DateTimeFormatString = "MM/dd/yyyy HH:mm:ss";

        /// <summary>
        /// A class that can be used to generate random strings that meet specific criteria
        /// </summary>
        internal static class RandomStringGenerator
        {
            private static Random rnd;

            /// <summary>
            /// Constructs a new RandomStringGenerator class.
            /// </summary>
            static RandomStringGenerator()
            {
                rnd = new Random();
            }
            /// <summary>
            /// Creates a randoms string given a set of criteria.
            /// </summary>
            public static string GetString(int length, bool includeNonPrintable, bool includeControlChars, bool makeUnicode, string excludeList)
            {
                if(excludeList == null)
                    excludeList = "'\"";

                string excludedCharacters = (null != excludeList ? excludeList : string.Empty);

                StringBuilder sb = new StringBuilder(length);
                char ch;

                // unicode is not supported 
                if (!includeNonPrintable)
                {
                    for (int i = 0; i < length; i++)
                    {
                        ch = GetCharWithNonPrintable(includeControlChars, excludedCharacters);

                        sb.Append(ch);
                    }
                }
                else
                {
                    for (int i = 0; i < length; i++)
                    {
                        ch = GetCharWithoutNonPrintable(includeControlChars, excludedCharacters);

                        sb.Append(ch);
                    }
                }

                if (sb.Length > 5)
                {
                    sb[0] = 'C';
                    sb[1] = 'W';
                    sb[2] = 'S';
                }

                return sb.ToString();
            }
            private static char GetCharWithoutNonPrintable(bool includeControlChars, string excludeList)
            {
                char ch;
                do
                {
                    ch = (char)rnd.Next(256);
                }
                while (((!includeControlChars) && (((ch == 8) || (ch == 9) || (ch == 10) || (ch == 13)))) || (excludeList.IndexOf(ch) != -1));
                return ch;
            }
            private static char GetCharWithNonPrintable(bool includeControlChars, string excludeList)
            {
                char ch;
                do
                {
                    ch = (char)(rnd.Next(95) + 32);
                }
                while (((!includeControlChars) && (((ch == 8) || (ch == 9) || (ch == 10) || (ch == 13)))) || (excludeList.IndexOf(ch) != -1));
                return ch;
            }
        }

        private static SqlConnection connection;

        private static int GetNextId(string table, string column)
        {
            string query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2} >= 4500 AND {3} <= 4999 ORDER BY {4}", column, table, column, column, column);

            object result1 = ExecuteQueryScalar(query);

            if (result1 != null)
            {
                int result = ((int)result1) - 1;
                if (result < 4000)
                    throw new System.Data.DataException(String.Format("Unable to generate a new ID - the ID would be out of the range of valid values (4000-4999) for this test suite.  The value would have been {0}", result));

                Trace.WriteLine(String.Format("GetNextId() for table '{0}', column '{1}' is returning '{2}'", table, column, result));
                return result;
            }
            else
                throw new System.Data.DataException(String.Format("The table {0} has no entry for column {1}.Please check that the database is populated with test data.",table,column));
        }

        private static T GetExistingValue<T>(string table, string column)
        {
            string query = String.Format("SELECT {0} FROM {1}", column, table);
            string countQuery = String.Format("SELECT COUNT({0}) FROM {1}", column, table);
            string rangeLimiter = null;

            Type returnType = typeof(T);

            if (returnType == typeof(int))
            {
                rangeLimiter = String.Format("WHERE {0} >= 4000 AND {1} <= 4999", column, column);
            }
            else if (returnType == typeof(Guid))
            {
                rangeLimiter = String.Format("WHERE LEFT({0}, 8) = '00010099'", column);
            }
            else if (returnType == typeof(String))
            {
                rangeLimiter = String.Format("WHERE LEFT({0}, 2) = 'CW'", column);
            }
            else if (returnType == typeof(Decimal))
            {
                rangeLimiter = String.Format("WHERE {0} >= 4000 AND {1} <= 4999", column, column);
            }
            else if (returnType == typeof(ContentBitFilterType))
            {
                rangeLimiter = "";
            }
            else if (returnType == typeof(object))
            {
                rangeLimiter = String.Format("WHERE LEFT({0}, 8) = '00010099' OR (LEN({1}) >= 4 AND LEFT({2},4) = '4999') OR LEFT({3}, 2) = 'CW'", column, column, column, column);
            }
            else
                throw new ArgumentOutOfRangeException("<T>");

            query = String.Format("{0} {1}", query, rangeLimiter);
            countQuery = String.Format("{0} {1}", countQuery, rangeLimiter);

            Trace.WriteLine(String.Format("GetExistingValue(): SQL query is \"{0}\"", query));

            object result = null;
            int rowsAffected = (int)ExecuteQueryScalar(countQuery);

            if (rowsAffected == 0)
                throw new System.Data.DataException(String.Format("The table '{0}' has no entries so an existing value cannot be retrieved from column '{1}' for this test case.  Please check that the database is populated with test data.", table, column));

            using (SqlDataReader reader = ExecuteQueryReader(query))
            {
                int targetRow = random.Next(rowsAffected - 1);      //index sensitivity solution
                //TODO: fix index sensitivity                                                                   

                Trace.WriteLine(String.Format("Record #{0}/{1} will be used.", targetRow + 1, rowsAffected));      //index sensitivity solution
                int nextRow = 0;

                do
                {
                    reader.Read();
                }
                while (nextRow++ < targetRow);

                result = reader[0];
                //should be closing the reader here
            }

            Trace.WriteLine(String.Format("GetExistingValue() for table '{0}', column '{1}' is returning '{2}'", table, column, result));

            return (T) result;
        }

        private static object ExecuteQueryScalar(string query)
        {
            SqlCommand command = connection.CreateCommand();
            command.CommandText = query;
            return command.ExecuteScalar();
        }

        private static SqlDataReader ExecuteQueryReader(string query)
        {
            SqlCommand command = connection.CreateCommand();
            command.CommandText = query;
            return command.ExecuteReader();
        }

        public static void CompareWithDatabase(Type returnType, object result, object id)
        {
            CompareWithDatabase(returnType, result, id, null);
        }

        public static void CompareWithDatabase(Type returnType, object result, object id, string identityColumn)
        {
            CompareWithDatabase(returnType, result, id, identityColumn, null, null);
        }

        public static void CompareWithDatabase(Type returnType, object result, object id, string identityColumn, Array subset, Type subsetItemType)
        {
            CompareWithDatabase(returnType, result, id, identityColumn, subset, subsetItemType, null);
        }

        public static void CompareWithDatabase(Type returnType, object result, object id, string identityColumn, Array subset, Type subsetItemType, string subsetItemPropertyName)
        {
            Trace.WriteLine("+ Utilities.CompareWithDatabase()");
            Trace.WriteLine(String.Format("CompareWithDatabase: Comparing items in '{0}' with rows in table '{1}'", result, returnType.Name));

            try
            {
                bool isArray = false;
                string tableName = string.Empty;
                if (returnType.Name.Equals("DRMTask") || returnType.Name.Equals("Task"))
                {
                    tableName = "TaskQueue";
                }
                else
                {
                    tableName = returnType.Name;
                }
                if (null != (result as System.Array))
                {
                    isArray = true;
                    Trace.WriteLine(String.Format("The returned value is an array that contains {0} items to be checked against the database.", (result as Array).Length));
                }

                string idString = BuildQueryFragmentForSpecificRecord(id, ref identityColumn, tableName);

                if (null != subset)
                {
                    if (null != result && result is Array &&
                        subset.Length == 0 && (result as Array).Length == 0)
                        return;

                    BuildQueryIdList(identityColumn, subset, subsetItemType, ref subsetItemPropertyName, ref idString);
                }

                string optionalJoin = CheckForJoin(tableName, identityColumn, id);

                string query = (isArray && null == subset) ?
                    String.Format("select * from {0}{1}", tableName, optionalJoin)
                    :
                    String.Format("select * from {0}{1} where {2}", tableName, optionalJoin, idString);

                SqlCommand command = connection.CreateCommand();
                command.CommandText = query;
                Trace.WriteLine(String.Format("SQL query is: '{0}'", query));

                PropertyInfo[] returnedProperties = returnType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

                using (SqlDataReader baseline = command.ExecuteReader())
                {
                    if (result is Array)
                    {
                        CheckArrayLengthAgainstRowCount(result, subset, baseline);
                    }
                    else if (result == null && baseline.HasRows)
                    {
                        throw new System.Data.DataException("No object was returned from the web method, but the database table contains a record for the specified id.");
                    }
                    else if (result != null && !baseline.HasRows)
                    {
                        throw new System.Data.DataException("An object was returned from the web method, but the database table does not contain a record for the object with this id.");
                    }

                    try
                    {
                        ComparePropertyValuesToDatabaseColumns(returnType, result, isArray, tableName, returnedProperties, baseline);
                    }
                    finally
                    {
                        baseline.Close();
                    }
                }
            }
            finally
            {
                Trace.WriteLine("- Utilities.CompareWithDatabase()");
            }
        }

        private static void CheckArrayLengthAgainstRowCount(object result, Array subset, SqlDataReader baseline)
        {
            if (null != subset)
            {
                if ((subset.Length == 0 && baseline.HasRows) ||
                    (subset.Length != 0 && !baseline.HasRows))
                {
                    throw new System.Data.DataException("The number of items in the returned collection does not match the number of rows in the database table.");
                }
            }
            else if (((result as Array).Length == 0 && baseline.HasRows) ||
            ((result as Array).Length != 0 && !baseline.HasRows))
            {
                throw new System.Data.DataException("The number of items in the returned collection does not match the number of rows in the database table.");
            }
        }

        private static string BuildQueryFragmentForSpecificRecord(object id, ref string identityColumn, string tableName)
        {
            string idString = null;

            if (null != id)
                idString = (id is int ? id.ToString() : String.Format("'{0}'", id.ToString()));

            if (null == identityColumn)
                identityColumn = tableName + "Id";

            idString = String.Format("{0}={1}", identityColumn, idString);
            return idString;
        }

        private static void ComparePropertyValuesToDatabaseColumns(Type returnType, object result, bool isArray, string tableName, PropertyInfo[] returnedProperties, SqlDataReader baseline)
        {
            try
            {
                int nextItem = 0;

                string exceptionMessage = null;
                StringBuilder sb = new StringBuilder();

                while (baseline.Read())
                {
                    //object val = null;
                    //sb = new StringBuilder();

                    //foreach (PropertyInfo property in returnedProperties)
                    //{
                    //    if (isArray)
                    //        val = property.GetValue((result as Array).GetValue(nextItem), new object[] { });
                    //    else
                    //        val = property.GetValue(result, null);
                    //    sb.Append(val + "\t");
                    //    //Trace.WriteLine(String.Format("Property: '{0}'\r\nActual value: '{1}'\r\nDatabase value: '{2}'\r\n\r\n", property.Name, actual, expected));
                    //}
                    //Trace.WriteLine(sb.ToString());

                    foreach (PropertyInfo property in returnedProperties)
                    {
                        string databaseColumn = property.Name;

                        if (databaseColumn == "Modified")
                            continue;

                        databaseColumn = BuildColumnName(tableName, databaseColumn);

                        object expected = null;
                        try
                        {
                            expected = baseline[databaseColumn];
                        }
                        catch (IndexOutOfRangeException)
                        {
                            Trace.WriteLine(String.Format("CompareWithDatabase: Column '{0}' does not exist in table '{1}'", databaseColumn, tableName));
                            continue;
                        }

                        object actual = null;

                        if (isArray)
                            actual = property.GetValue((result as Array).GetValue(nextItem), new object[] { });
                        else
                            actual = property.GetValue(result, null);

//                        if (property.Name == "Id")
//                            Trace.WriteLine(String.Format("Property: '{0}'\r\nActual value: '{1}'\r\nDatabase value: '{2}'\r\n\r\n", property.Name, actual, expected)); 
                        
                        
                        if (Convert.IsDBNull(expected))
                        {
                            if (property.PropertyType.IsValueType)
                            {
                                Trace.WriteLine(String.Format("Skipping comparison of the value of property '{0}' (value: '{1}') to a NULL value returned from the database since {2} is a value type.", property.Name, actual, property.PropertyType));
                                continue;
                            }
                            if (property.PropertyType == typeof(string) && (string)actual == String.Empty)
                            {
                                Trace.WriteLine(String.Format("Skipping comparison of String.Empty to a NULL value returned from the database for property '{0}'.", property.Name));
                                continue;
                            }
                        }
                        else if (property.PropertyType.IsGenericType && property.PropertyType.GetGenericTypeDefinition() == typeof(Nullable<>))
                        {
                                Trace.WriteLine(String.Format("Type of property '{0}' is {1} so no conversion will be done.", property.Name, property.PropertyType));
                        }
                        else if (databaseColumn.ToLower().Contains("xml") ||
                            baseline.GetFieldType(baseline.GetOrdinal(databaseColumn)) == typeof(System.Data.SqlTypes.SqlXml))
                        {
                            DoXmlComparison(ref expected, ref actual);
                        }
                        else
                        {
                            if (property.PropertyType.IsEnum)
                                expected = Enum.Parse(property.PropertyType, expected.ToString());
                            else
                                expected = Convert.ChangeType(expected, property.PropertyType);
                        }

                        if ((actual == null && expected != null) || !actual.Equals(expected))
                        {
//                            Trace.WriteLine(String.Format("Actual value (from the '{0}' property of the product class '{1}'):\r\n'{2}'\r\nis different from the expected value (from a direct query of the '{3}' table):\r\n'{4}'", property.Name, returnType, actual, tableName, expected));

                            if (null == exceptionMessage)
                                exceptionMessage = String.Format("Actual value (from the '{0}' property of the product class '{1}'):\r\n'{2}'\r\nis different from the expected value (from a direct query of the '{3}' table):\r\n'{4}'", property.Name, returnType, actual, tableName, expected);
                        }
                    }

                    nextItem++;
                }

                if (null != exceptionMessage)
                    throw new System.Data.DataException(exceptionMessage);
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.ToString());
                throw;
            }
        }

        private static void DoXmlComparison(ref object expected, ref object actual)
        {
            try
            {
                XmlDocument xmlDocument = new XmlDocument();

                xmlDocument.LoadXml((string)expected);
                expected = xmlDocument.OuterXml;

                if (null != actual)
                {
                    xmlDocument.LoadXml((string)actual);
                    actual = xmlDocument.OuterXml;
                }
            }
            catch
            {
                Trace.WriteLine("Comparison was attempted on a column that is supposed to contain Xml content but the content could not be parsed as Xml. The content will be compared as string");
            }
        }

        public static void DoAvailableIdComparison(int AvailableID, string table, string column)
        {
            try
            {
                //query db for value at given available ID

                string query = string.Format("SELECT {0} FROM {1} WHERE {0} = {2}", column, table, AvailableID);
                SqlCommand command = connection.CreateCommand();
                command.CommandText = query;
                Trace.WriteLine(String.Format("SQL query is: '{0}'", query));

                using (SqlDataReader baseline = command.ExecuteReader())
                {
                    try
                    {
                        //reader should have zero rows returned if the ID was actually available
                        if (baseline.HasRows == true)
                            throw new System.Data.DataException("Table already has that ID, it is not available");
                    }
                    finally
                    {
                        baseline.Close();
                    }
                }
            }
            catch
            {
                Trace.WriteLine("Comparison was attempted but failed, error unknown");
            }
        }

        private static string BuildColumnName(string tableName, string databaseColumn)
        {
            if (databaseColumn == "Id")
                databaseColumn = tableName + "Id";

            if (databaseColumn == "Code")
                databaseColumn = tableName + databaseColumn;

            if (databaseColumn == "EditorialItemTypeId")
                databaseColumn = "itemTypeId";

            if (databaseColumn == "ImageId")
                databaseColumn = "imageMediaId";
            return databaseColumn;
        }

        private static void BuildQueryIdList(string identityColumn, Array subset, Type subsetItemType, ref string subsetItemPropertyName, ref string idString)
        {
            StringBuilder idList = new StringBuilder();
            int next = 0;

            if (null == subsetItemPropertyName)
                subsetItemPropertyName = "Id";

            PropertyInfo property = subsetItemType.GetProperty(subsetItemPropertyName);

            idList.AppendFormat("{0} IN (", identityColumn);
            foreach (object item in subset)
            {
                object value = (null != property ? property.GetValue(item, null) : item.ToString());
                idList.AppendFormat("'{0}'", value);

                if (next++ < subset.Length - 1)
                    idList.Append(", ");
            }

            idList.Append(")");

            idString = idList.ToString();
        }

        private static string CheckForJoin(string tableName, string identityColumn, object id)
        {
            switch (tableName)
            {
                case "DRMLicenseIssuer":
                case "MetadataProvider":
                case "Provider":
                    if (null != id)
                        return String.Format(" JOIN Entity on {0} = entityId", identityColumn);
                    else
                        return String.Format(" JOIN Entity on {0} = entityId ORDER BY Entity.Name", identityColumn);
                case "Entity":
                    if (null == id)
                        return " ORDER BY Name";
                    break;
                case "Locale":
                    if (null == id)
                        return " ORDER BY ( CASE locale WHEN 'en-US' THEN 'AAA' else locale END)";
                    break;
                case "Role":
                    if (null == id)
                        return " ORDER BY sortOrder";
                    break;
                case "TaskQueue":
                    if (null != id)
                    {
                        return String.Format(" WHERE taskInstanceId={0} Order by startDate DESC,taskInstanceId", id.ToString());
                    }
                    else
                    {
                        return " Order by startDate DESC,taskInstanceId";
                    }
                default:
                    return null;
            }

            return null;
        }

        private static string CreateDatabaseName(string databaseTypeName)
        {
            if (databaseTypeName.EndsWith("y"))
                return databaseTypeName.TrimEnd('y') + "ies";
            else if (databaseTypeName.EndsWith("s"))
                return databaseTypeName;

            return databaseTypeName + "s";
        }

        public static string GetString(ShortStringType type)
        {
            string exclude = " ";
            switch (type)
            {
                case ShortStringType.Empty:
                    return String.Empty;
                case ShortStringType.Length50:
                    return Utilities.RandomStringGenerator.GetString(50, false, false, false, exclude);
                case ShortStringType.Length51:
                    return Utilities.RandomStringGenerator.GetString(51, false, false, false, null);
                case ShortStringType.Null:
                    return null;
            }

            throw new ArgumentException("Unsupported StringType " + type.ToString());
        }

        public static string GetString(MediumStringType type)
        {
            string exclude = " ";
            switch (type)
            {
                case MediumStringType.Empty:
                    return String.Empty;
                case MediumStringType.Length255:
                    return Utilities.RandomStringGenerator.GetString(255, false, false, false, exclude);
                case MediumStringType.Length256:
                    return Utilities.RandomStringGenerator.GetString(256, false, false, false, null);
                case MediumStringType.Length500:
                    return Utilities.RandomStringGenerator.GetString(500, false, false, false, null);
                case MediumStringType.Length501:
                    return Utilities.RandomStringGenerator.GetString(501, false, false, false, null);
                case MediumStringType.Null:
                    return null;
            }

            throw new ArgumentException("Unsupported StringType " + type.ToString());
        }

        public static string GetString(LongStringType type)
        {
            switch (type)
            {
                case LongStringType.Empty:
                    return String.Empty;
                case LongStringType.Length2000:
                    return Utilities.RandomStringGenerator.GetString(2000, false, false, false, null);
                case LongStringType.Length2001:
                    return Utilities.RandomStringGenerator.GetString(2001, false, false, false, null);
                case LongStringType.Null:
                    return null;
            }

            throw new ArgumentException("Unsupported StringType " + type.ToString());
        }

        public static string GetXml(XmlType type)
        {
            switch (type)
            {
                case XmlType.Empty:
                    return String.Empty;
                case XmlType.Null:
                    return null;
                case XmlType.Valid:
                    return "<root><child>value</child></root>";
                case XmlType.Invalid:
                    return "<root>";
            }

            throw new ArgumentException("Unsupported XmlType " + type.ToString());
        }

        public static T[] GetArray<T>(ArrayType type, string tableName, string columnName, string methodName)
        {
            return GetArray<T>(type, tableName, columnName, methodName, null, null, null);
        }

        public static T[] GetArray<T>(ArrayType type, string tableName, string columnName, string methodName, object instance, string propertyName, string sourcePropertyName)
        {
            List<T> list = new List<T>();
            string query;
            object singleItem;

            switch (type)
            {
                case ArrayType.Empty:
                    return list.ToArray();
                case ArrayType.Null:
                    return null;
                case ArrayType.OnlyOneElement:
                    if (null != methodName)
                    {
                        GetExistingObjectsFromMethod<T>(methodName, tableName, columnName, sourcePropertyName, list, 1);
                    }
                    else
                    {
                        singleItem = GetExistingValue<object>(tableName, columnName);

                        if (null == singleItem)
                            throw new System.Data.DataException(String.Format("The table '{0}' has no entries so an existing value cannot be retrieved from column '{1}' for this test case.  Please check that the database is populated with test data.", tableName, columnName));

                        CreateObjectForArray<T>(instance, propertyName, list, singleItem);
                    }

                    return list.ToArray();
                case ArrayType.TwoElementsOneEmpty:
                    if (null != methodName)
                    {
                        GetExistingObjectsFromMethod<T>(methodName, tableName, columnName, sourcePropertyName, list, 1);
                    }
                    else
                    {
                        singleItem = GetExistingValue<object>(tableName, columnName);

                        if (null == singleItem)
                            throw new System.Data.DataException(String.Format("The table '{0}' has no entries so an existing value cannot be retrieved from column '{1}' for this test case.  Please check that the database is populated with test data.", tableName, columnName));

                        CreateObjectForArray<T>(instance, propertyName, list, singleItem);

                        T[] tArray = new T[1];
                        list.Add(tArray[0]);
                    }

                    return list.ToArray();
                case ArrayType.Full:
                    if (null != methodName)
                    {
                        GetExistingObjectsFromMethod<T>(methodName, tableName, columnName, sourcePropertyName, list, 0);
                    }
                    else
                    {
                        query = String.Format("SELECT * FROM {0}", tableName);
                        SqlDataReader reader = null;
                        try
                        {
                            reader = ExecuteQueryReader(query);
                            while (reader.Read())
                            {
                                CreateObjectForArray<T>(instance, propertyName, list, reader[columnName]);
                            }
                        }
                        finally
                        {
                            if (null != reader)
                                reader.Close();
                        }
                    }
                    return list.ToArray();
                default:
                    throw new ArgumentOutOfRangeException("type");
            }
        }

        private static void GetExistingObjectsFromMethod<T>(string methodName, string tableName, string columnName, string propertyName, List<T> list, int count)
        {
            MethodInfo method = null;

            try
            {
                method = typeof(CatalogServices).GetMethod(methodName);
            }
            catch (AmbiguousMatchException)
            {
                method = typeof(CatalogServices).GetMethod(methodName, new Type[] { typeof(Guid) });
            }

            if (null == method)
            {
                method = typeof(CatalogServices).GetMethod(methodName, new Type[] { typeof(int) });
            }

            if (null == method)
                throw new ArgumentOutOfRangeException("methodName");

            object result = null;

            ParameterInfo[] parameters = method.GetParameters();

            if (parameters.Length > 0)
            {
                object parameter = GetExistingValue<object>(tableName, columnName);
                result = method.Invoke(Adapter.CatalogWebServiceAdapter.ServiceInstanceHeader, new object[1] { parameter });
            }
            else
            {
                result = method.Invoke(Adapter.CatalogWebServiceAdapter.ServiceInstanceHeader, null);
            }

            int nextItem = 0;
            PropertyInfo property = null;

            if (null != result)
            {
                if (null != propertyName)
                {
                    property = result.GetType().GetProperty(propertyName);
                    result = property.GetValue(result, null);
                }

                foreach (object item in (result as Array))
                {
                    list.Add((T)item);

                    if (count > 0 && ++nextItem >= count)
                        return;
                }
            }
        }

        private static void CreateObjectForArray<T>(object instance, string propertyName, List<T> list, object singleItem)
        {
            if (null != instance)
            {
                if (null == propertyName)
                    propertyName = "Id";

                Type objectType = instance.GetType();

                if (objectType.IsClass)
                {
                    object newInstance = objectType.GetConstructor(Type.EmptyTypes).Invoke(null);
                    PropertyInfo property = objectType.GetProperty(propertyName);
                    if (property.PropertyType.IsArray)
                    {
                        throw new NotImplementedException("Support for properties of type Array is not yet implemented.");
                    }
                    else
                    {
                        property.SetValue(newInstance, singleItem, null);
                    }
                }
                else
                {
                    objectType.GetProperty(propertyName).SetValue(instance, singleItem, null);
                }
                list.Add((T)instance);
            }
            else
            {
                list.Add((T)singleItem);
            }
        }

        public static int GetInteger(IntegerType type, string table, string column)
        {
            switch (type)
            {
                case IntegerType.MaxValue:
                    return int.MaxValue;
                case IntegerType.MinValue:
                    return int.MinValue;
                case IntegerType.Negative:
                    return -1;
                case IntegerType.Existing:
                    return GetExistingValue<int>(table, column);
            }

            throw new ArgumentException("Unsupported IntegerType " + type.ToString());
        }

        public static ContentBitFilterType GetContentBitFilter(ContentBitFilterType type, string table, string column)
        {
            if (type != ContentBitFilterType.Existing)              //only supporting existing contentBitFilter right now
            {
                throw new ArgumentException("Unsupported ContentBitFilterType " + type.ToString());
            }
            else
            {
                return GetExistingValue<ContentBitFilterType>(table, column);
            }
        }

        public static decimal GetDecimal(DecimalType type, string table, string column)
        {
            switch(type)
            {
                case DecimalType.MaxValue:
                    return decimal.MaxValue;
                case DecimalType.MinValue:
                    return decimal.MinValue;
                case DecimalType.Negative:
                    return decimal.MinusOne;
                case DecimalType.Existing:
                    return GetExistingValue<decimal>(table, column);
            }

            throw new ArgumentException("Unsupported DecimalType " + type.ToString());
        }

        public static string GetExceptionType(Exception e)
        {
            if (null == e)
                return ExceptionType.NoError;

            Type exceptionType = (null != e.InnerException ? e.InnerException.GetType() : e.GetType());

            Trace.WriteLine(e.Message);

            if (exceptionType == typeof(System.Web.Services.Protocols.SoapException))
            {
                if (Regex.IsMatch(e.Message, "System.Web.Services.Protocols.SoapException: Server was unable to process request. ---> System.ArgumentException: Error: no qualified media instance to generate offer"))
                    return ExceptionType.NoQualifiedMediaInstanceException;

                if (Regex.IsMatch(e.Message, "System.Data.SqlClient.SqlException: Procedure or function '\\w*' expects parameter '@\\w*', which was not supplied."))
                    return ExceptionType.SqlParameterMissingException;

                if (Regex.IsMatch(e.Message, "System.ArgumentNullException: Value cannot be null.\nParameter name: \\w*"))
                    return ExceptionType.ArgumentNullException;

                if (Regex.IsMatch(e.Message, "System.NotSupportedException: \\w* function is not supported in \\w* class"))
                    return ExceptionType.NotSupportedException;

                if (e.Message.Contains("System.ArgumentException: "))
                    return ExceptionType.ArgumentException;

                if (Regex.IsMatch(e.Message, "System.Data.SqlClient.SqlException: Violation of PRIMARY KEY constraint '\\w*'. Cannot insert duplicate key in object '\\w*'.\nThe statement has been terminated."))
                    return ExceptionType.SqlPrimaryKeyViolationException;

                if (Regex.IsMatch(e.Message, "Microsoft.Ems.Common.Catalog.InvalidPodcastUriException: The supplied podcast address"))
                    return ExceptionType.InvalidPodcastUriException;

                if (Regex.IsMatch(e.Message, "System.Xml.XmlException: Xml error: System.Xml.Schema.XmlSchemaValidationException:"))
                    return ExceptionType.XmlSchemaValidationException;

                if (Regex.IsMatch(e.Message, "Server was unable to process request. ---> xonline.server.webcache.common.WebSGErrorException: The web service encountered an internal error."))
                    return ExceptionType.WebSGErrorException;
            }

            throw e;
        }

        public static DataChangeType ConvertChangeType(ChangeType type)
        {
            switch (type)
            {
                case ChangeType.Add:
                    return DataChangeType.Add;
                case ChangeType.Delete:
                    return DataChangeType.Delete;
                case ChangeType.Update:
                    return DataChangeType.Update;
            }

            throw new ArgumentException("Unsupported ChangeType " + type.ToString());
        }


        public static InsertDataChangeType ConvertInsertChangeType(InsertChangeType type)
        {
            switch (type)
            {
                case InsertChangeType.Add:
                    return InsertDataChangeType.Add;
                case InsertChangeType.Update:
                    return InsertDataChangeType.Update;
            }

            throw new ArgumentException("Unsupported InsertChangeType " + type.ToString());
        }

        public static OfferMode ConvertOfferMode(OfferType type)
        {
            return (OfferMode) Enum.Parse(typeof(OfferMode), type.ToString());
        }

        public static PublishingVisiblityStatus ConvertPublishingVisibilityStatus(PublishingVisibilityStatusType type)
        {
            return (PublishingVisiblityStatus)Enum.Parse(typeof(PublishingVisiblityStatus), type.ToString());
        }

        public static int GetId(IdType type, string table, string column)
        {
            switch (type)
            {
                case IdType.Existing:
                    return GetExistingValue<int>(table, column);
                case IdType.New:
                    return GetNextId(table, column);
            }

            throw new ArgumentException("Unsupported IdType " + type.ToString());
        }

        public static ExternalMappingTableItem GetMappingTableEntry()
        {
            string query = "SELECT catalogId, externalId, externalFeedSourceId, externalFeedmappingObjectId FROM ExternalFeedMapping";
            string countQuery = "SELECT COUNT(*) FROM ExternalFeedMapping";

            Trace.WriteLine(String.Format("GetMappingTableEntry(): SQL query is \"{0}\"", query));

            ExternalMappingTableItem result = new ExternalMappingTableItem();

            Array reader = GetRandomRow(query, countQuery);

            result.catalogId = (int)reader.GetValue(0);
            result.externalId = (string)reader.GetValue(1);
            result.feedSourceId = (int)reader.GetValue(2);
            result.externalmappingObjectId = (int)reader.GetValue(3);

            Trace.WriteLine(String.Format(
                "GetMappingTableEntry() Returns: CatalogId '{0}', ExternalId '{1}', FeedSourceId '{2}', ExternalmappingObjectId '{3}'", 
                result.catalogId, result.externalId, result.feedSourceId, result.externalmappingObjectId));

            return result;
        }

        public static ExternalFeedSource GetRandomExternalFeedSource()
        {
            string query = "SELECT externalFeedSourceId, Name FROM ExternalFeedSource";
            string countQuery = "SELECT COUNT(*) FROM ExternalFeedSource";

            Trace.WriteLine(String.Format("GetMappingTableEntry(): SQL query is \"{0}\"", query));

            ExternalFeedSource result = new ExternalFeedSource();

            Array reader = GetRandomRow(query, countQuery);

            result.Id = (int)reader.GetValue(0);
            result.Name = (string)reader.GetValue(1);

            Trace.WriteLine(String.Format(
                "GetMappingTableEntry() Returns: externalFeedSourceId '{0}', Name '{1}'", result.Id, result.Name));

            return result;
        }

        public static ExternalFeedMappingObject GetRandomExternalFeedMappingObject()
        {
            string query = "SELECT externalFeedMappingObjectId, Name FROM ExternalFeedMappingObject";
            string countQuery = "SELECT COUNT(*) FROM ExternalFeedMappingObject";

            Trace.WriteLine(String.Format("GetMappingTableEntry(): SQL query is \"{0}\"", query));

            ExternalFeedMappingObject result = new ExternalFeedMappingObject();

            Array reader = GetRandomRow(query, countQuery);

            result.Id = (int)reader.GetValue(0);
            result.Name = (string)reader.GetValue(1);

            Trace.WriteLine(String.Format(
                "GetMappingTableEntry() Returns: externalFeedSourceId '{0}', Name '{1}'", result.Id, result.Name));

            return result;
        }

        public static int GetUnmappedEntityId()
        {
            string query = "Select distinct entityId from Entity Where Entity.entityId not in (Select distinct catalogId from ExternalFeedMapping)";
            string countQuery = "Select distinct count(entityId) from Entity Where Entity.entityId not in (Select distinct catalogId from ExternalFeedMapping)";

            Array reader = GetRandomRow(query, countQuery);

            return (int)reader.GetValue(0);

        }

        public static int GetPaymentId()
        {
            string query = "select paymentTypeId from PaymentType";
            string countQuery = "Select count(paymentTypeId) from PaymentType";

            Array reader = GetRandomRow(query, countQuery);

            return (int)reader.GetValue(0);

        }
       
        private static Array GetRandomRow(string query, string countQuery)
        {
            int rowsAffected = (int)ExecuteQueryScalar(countQuery);

            if (rowsAffected == 0)
                throw new System.Data.DataException(String.Format("The table has no entries so an existing value cannot be retrieved"));

            SqlDataReader reader = ExecuteQueryReader(query);
            int targetRow = random.Next(rowsAffected - 1);      //index sensitivity solution
            //TODO: fix index sensitivity

            Trace.WriteLine(String.Format("Record #{0}/{1} will be used.", targetRow +1, rowsAffected));      //index sensitivity solution
            int nextRow = 0;

            do
            {
                reader.Read();
            }
            while (nextRow++ < targetRow);

            object [] localArray = new object [reader.FieldCount];
            for (int i=0; i < reader.FieldCount; i++)
            {
                localArray[i] = reader[i];
            }
            reader.Close();
            return localArray;
        }

        public static int? GetParentId(TreeParentIdType type, string table, string column, int existingValue)
        {
            switch (type)
            {
                case TreeParentIdType.ExistingNotSelf:
                    {
                        int retries = 5;
                        int existing = existingValue;
                        while (existing == existingValue && retries > 0)
                        {
                            existing = GetExistingValue<int>(table, column);
                            if (existing == existingValue)
                            {
                                retries--;
                            }
                        }

                        if (retries == 0 && existing == existingValue)
                        {
                            throw new System.Data.DataException("Unable to find an existing value that is not the passed in value.");
                        }
                        else
                        {
                            return existing;
                        }
                    }
                case TreeParentIdType.NonExisting:
                    {
                        int newValue = GetNextId(table, column);
                        if (newValue == existingValue)
                            newValue--;

                        return newValue;
                    }
                case TreeParentIdType.Self:
                    return existingValue;
                case TreeParentIdType.None:
                    return null;
            }

            throw new ArgumentException("Unsupported IdType " + type.ToString());
        }

        public static Guid GetGuid(IdType type, string table, string column)
        {
            switch (type)
            {
                case IdType.Existing:
                    return GetExistingValue<Guid>(table, column);
                case IdType.New:
                    {
                        Guid temporaryGuid = Guid.NewGuid();
                        return new Guid(String.Format("{{00010099-001D-0001-0311-{0}}}", temporaryGuid.ToString().Split('-')[4]));
                    }
            }

            throw new ArgumentException("Unsupported IdType " + type.ToString());
        }

        public static string GetString(IdType type, string table, string column)
        {
            switch (type)
            {
                case IdType.Existing:
                    return GetExistingValue<string>(table, column);
                    //return (returnValue is System.DBNull ? null : (string) returnValue);
                case IdType.New:
                    {
                        string newString = RandomStringGenerator.GetString(2, false, false, false, null);
                        string query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        int retries = 5;

                        while (ExecuteQueryScalar(query) != null)
                        {
                            if (retries-- == 0)
                                throw new System.Data.DataException("Unable to find a new unique value.");

                            Trace.WriteLine(String.Format("RandomStringGenerator generated a string ('{0}') that already exists in the specified database table.  Retrying.", newString));

                            newString = RandomStringGenerator.GetString(2, false, false, false, null);
                            query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        }

                        return newString;
                    }
            }

            throw new ArgumentException("Unsupported IdType " + type.ToString());
        }

        public static DateTime GetDateTime(DateTimeType type)
        {
            switch (type)
            {
                case DateTimeType.Today:
                    return Convert.ToDateTime(DateTime.Now.ToString(DateTimeFormatString, CultureInfo.InvariantCulture));

                case DateTimeType.Past:
                    return Convert.ToDateTime(SqlDateTime.MinValue.Value);

                case DateTimeType.Future:
                    return Convert.ToDateTime(DateTime.Now.AddDays(30).ToString(DateTimeFormatString, CultureInfo.InvariantCulture));

                case DateTimeType.Max:
                    return Convert.ToDateTime(DateTime.MaxValue.ToString(DateTimeFormatString, CultureInfo.InvariantCulture));
            }

            throw new ArgumentException("Unsupported DateTimeType " + type.ToString());
        }

        public static int GetRelatedItemId(RelatedItemIdType typeId, string table, string column)
        {
            switch (typeId)
            {
                case RelatedItemIdType.NotSpecified:
                    return 0;
                case RelatedItemIdType.Existing:
                    return GetExistingValue<int>(table, column);
            }

            throw new ArgumentException("Unsupported RelatedItemIdType " + typeId.ToString());
        }

        public static Guid GetRelatedItemIdGuid(RelatedItemIdType type, string table, string column)
        {
            switch (type)
            {
                case RelatedItemIdType.Existing:
                    return GetExistingValue<Guid>(table, column);
                case RelatedItemIdType.NotSpecified:
                    return new Guid("{00000000-0000-0000-0000-000000000000}");
            }

            throw new ArgumentException("Unsupported RelatedItemIdType " + type.ToString());
        }

        public static string GetRelatedItemString(RelatedItemIdType type, string table, string column)
        {
            switch (type)
            {
                case RelatedItemIdType.Existing:
                    return GetExistingValue<string>(table, column);
                case RelatedItemIdType.NotSpecified:
                    return String.Empty;
            }

            throw new ArgumentException("Unsupported RelatedItemIdType " + type.ToString());
        }

        /// <summary>
        /// Fetching the actual data from database into a dataset.
        /// </summary>     
        public static DataSet ActualDataset(string ClassType, object Id, ref DataSet dataset)
        {
            string query = null;
            switch (ClassType)
            {
                case "Image":
                    query = String.Format("Select creator,issuer,M.mediaId,mediaTypeId,metadataProviderId,visibilityDate,originalReleaseDate,displayOriginalReleaseDate,geoCheckPolicy,visibilityStatusId FROM [Image] I inner join Media M on M.mediaId = I.imageMediaId WHERE M.mediaId = '{0}'", Id);
                    SqlDataAdapter sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Image");
                    sqlDA1.Fill(dataset, "Image");

                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,II.lcid,II.fileUrl,II.imageFormatId,II.imageSizeId,II.fileSize FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN ImageInstance II ON II.imageMediaInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}' ", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ImageInstance");
                    sqlDA1.Fill(dataset, "ImageInstance");

                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,GI.installSize,GI.packageSize,GI.liveContentId FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN GameContentInstance GI ON GI.gameContentInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ImageGameContentInstance");
                    sqlDA1.Fill(dataset, "ImageGameContentInstance");

                    query = String.Format("SELECT GIF.gameContentInstanceFileId,GIF.fileUrl,GIF.sortOrder FROM GameContentInstanceFile GIF inner join GameContentInstance GI ON GI.gameContentInstanceId = GIF.gameContentInstanceId inner join MediaInstance MI on MI.mediaInstanceId = GI.gameContentInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ImageGameContentInstanceFile");
                    sqlDA1.Fill(dataset, "ImageGameContentInstanceFile");
                    break;

                case "AudioEncoding":
                    query = String.Format("SELECT a.audioEncodingId,a.name FROM AudioEncoding a WHERE a.audioEncodingId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("AudioEncoding");
                    sqlDA1.Fill(dataset, "AudioEncoding");
                    break;

                case "VideoEncoding":
                    query = String.Format("SELECT v.videoEncodingId,v.name FROM VideoEncoding v WHERE v.videoEncodingId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoEncoding");
                    sqlDA1.Fill(dataset, "VideoEncoding");
                    break;

                case "PricingRule":
                    query = String.Format("SELECT pr.pricingRuleId,pr.[name],pr.startDatetime,pr.providerId,pr.countryCode,pr.mediaTypeId,pr.margin,pr.rate FROM PricingRule pr WHERE pr.pricingRuleId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("PricingRule");
                    sqlDA1.Fill(dataset, "PricingRule");

                    query = String.Format("SELECT pri.pricingRuleInstanceId, pri.pricingRuleId,pri.priceWholesaleFrom,pri.priceWholesaleTo,pri.pointsRetail,pri.priceRetail FROM PricingRuleInstance pri WHERE pri.pricingRuleId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("pricingRuleInstance");
                    sqlDA1.Fill(dataset, "pricingRuleInstance");
                    break;

                case "Entity":
                    query = String.Format("SELECT e.entityId,  e.[name], e.contactInfo,e.accountNumber,e.externalEntityId ,CASE WHEN  P.providerId IS NULL THEN 0 ELSE 1 END AS IsProvider, CASE WHEN  MP.metadataProviderId IS NULL THEN 0 ELSE 1 END AS IsMetadataProvider,CASE WHEN  DRM.drmLicenseIssuerId IS NULL THEN 0 ELSE 1 END AS IsDrmLicenseIssuer FROM Entity e LEFT JOIN Provider P ON P.providerId=E.entityId LEFT JOIN MetaDataProvider MP ON MP.metadataProviderId=E.entityId LEFT JOIN DRMLicenseIssuer DRM ON DRM.drmLicenseIssuerId=E.entityId WHERE e.entityId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Entity");
                    sqlDA1.Fill(dataset, "Entity");
                    break;

                case "Contributor":
                    query = String.Format("SELECT c.contributorId,c.metadataProviderId,c.birthDate,c.displayBirthDate,c.birthPlace,c.deathDate,c.displayDeathDate,c.deathPlace,c.isGroup FROM Contributor c where c.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Contributor");
                    sqlDA1.Fill(dataset, "Contributor");


                    query = String.Format("SELECT cart.contributorId,cart.articleId,cart.sortOrder FROM ContributorArticle cart where cart.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ContributorArticle");
                    sqlDA1.Fill(dataset, "ContributorArticle");

                    query = String.Format("SELECT ca.contributorId,ca.contributorAliasId,ca.alias FROM ContributorAlias ca where ca.contributorId = '{0}' ", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ContributorAlias");
                    sqlDA1.Fill(dataset, "ContributorAlias");

                    query = String.Format("SELECT cc.contributorId,cc.categoryId,cc.sortOrder FROM ContributorCategory cc where cc.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ContributorCategory");
                    sqlDA1.Fill(dataset, "ContributorCategory");

                    query = String.Format("SELECT cl.contributorId,cl.lcid,cl.displayName,cl.sortName FROM ContributorLocale cl where cl.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ContributorLocale");
                    sqlDA1.Fill(dataset, "ContributorLocale");

                    query = String.Format("SELECT clm.contributorId,clm.lcid,clm.lcidMap FROM ContributorLocaleMap clm where clm.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("ContributorLocaleMap");
                    sqlDA1.Fill(dataset, "ContributorLocaleMap");

                    query = String.Format("SELECT cr.contributorId,cr.relatedContributorId,cr.contributorRelationshipTypeId,cr.roleId,cr.isPrimary,cr.sortOrder FROM ContributorRelationship cr where cr.contributorId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("contributorRelationship");
                    sqlDA1.Fill(dataset, "contributorRelationship");

                    break;

                case "LicenseType":
                    query = String.Format("SELECT licenseTypeId,[name],licenseClassId,licenseXML FROM LicenseType WHERE licenseTypeId = {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("LicenseType");
                    sqlDA1.Fill(dataset, "LicenseType");

                    query = String.Format("SELECT llt.licenseTypeId,llt.legalLcid,llt.[text],l.locale FROM [LicenseTypeLegalTextLocale] llt JOIN [Locale] l on l. lcid=llt.legallcid WHERE licenseTypeId= {0}", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("LicenseTypeLocale");
                    sqlDA1.Fill(dataset, "LicenseTypeLocale");
                    break;

                case "Category":
                    query = String.Format("select categoryId,categorySystemId,parentCategoryId from category where categoryId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Category");
                    sqlDA1.Fill(dataset, "Category");

                    query = String.Format("select categoryId, lcid,[name] from CategoryLocale where categoryId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("CategoryLocale");
                    sqlDA1.Fill(dataset, "CategoryLocale");

                    query = String.Format("select S.categoryId,S.categorySystemId,S.parentCategoryId from Category as S, Category as P where S.parentCategoryId = P.categoryId and P.categoryId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Categories");
                    sqlDA1.Fill(dataset, "Categories");

                    query = String.Format("SELECT ccl.description,ccl.htmlDescription,ccl.website,ccl.rssFeatures,ccl.rssAnnouncements,ccl.rssNews,ccl.logoImageId,ccl.backgroundImageId FROM CategoryCorporationLocale AS ccl inner join CategoryLocale cl ON  ccl.categoryId = cl.categoryId AND ccl.lcid = cl.lcid where cl.categoryId  = '{0}'order by cl.lcid", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("CategoryCorporationLocale");
                    sqlDA1.Fill(dataset, "CategoryCorporationLocale");

                    break;

                case "Game":
                    query = String.Format("SELECT liveTitleId,M.mediaId,mediaTypeId,metadataProviderId,visibilityDate,originalReleaseDate,displayOriginalReleaseDate,geoCheckPolicy,visibilityStatusId from Media M inner join Game on M.mediaId = gameMediaId where gameMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Game");
                    sqlDA1.Fill(dataset, "Game");

                    query = String.Format("SELECT gameMediaId,lcid,customGenre,developer FROM	GameLocale WHERE gameMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameLocale");
                    sqlDA1.Fill(dataset, "GameLocale");

                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,II.lcid,II.fileUrl,II.imageFormatId,II.imageSizeId,II.fileSize FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN ImageInstance II ON II.imageMediaInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}' ", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameImageInstance");
                    sqlDA1.Fill(dataset, "GameImageInstance");

                    query = String.Format("SELECT GameCapabilityCountry.[gameMediaId],[countryCode],[offlinePlayersMin],[offlinePlayersMax],[offlineCoopPlayersMin],[offlineCoopPlayersMax],[offlineCoopHardDriveRequired],[offlineCoopHardDriveStorageAmount],[offlineCoopHardDriveStorageAmountUnitId],[offlineSaveStorageAmount],[offlineSaveStorageAmountUnitId],[offlineSystemLinkMin],[offlineSystemLinkMax],[offlineMaxHDTVModeId],[offlineVoiceCommands],[offlinePeripheralWheel],[offlinePeripheralGamePad],[offlinePeripheralArcadeStick],[offlinePeripheralFlightStick],[offlinePeripheralDancePad],[offlinePeripheralForceFeedbackWheel],[offlinePeripheralCamera],[offlineCustomSoundtracks],[offlineDolbyDigital],[onlineMultiplayerMin],[onlineMultiplayerMax],[onlineMultiplayerHardDriveRequired],[onlineCoopPlayersMin],[onlineCoopPlayersMax],[onlineCoopHardDriveRequired],[onlineCoopHardDriveStorageAmount],[onlineCoopHardDriveStorageAmountUnitId], [onlineHardDriveRequired],[onlinePlayStorageAmount],[onlinePlayStorageAmountUnitId],[onlineContentDownload],[onlineLeaderboards],[onlineSpectatorMode],[onlineVoice],[onlineOnly] from GameCapabilityCountry where GameCapabilityCountry.gameMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameCountry");
                    sqlDA1.Fill(dataset, "GameCountry");

                    query = String.Format("SELECT GCM.[gameMediaId],GCM.[countryCode],GCM.[countryCodeMap]FROM GameCapabilityCountryMap GCM inner join GameCapabilityCountry GC on GCM.countryCodeMap = GC.countryCode and GCM.gameMediaId = GC.gameMediaId where GCM.gameMediaId = '{0}' ", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameCountryMap");
                    sqlDA1.Fill(dataset, "GameCountryMap");


                    break;

                case "GameContent":
                    query = String.Format("SELECT GameContent.gameMediaId,contentBitFilter,effectiveLiveTitleId,liveTitleAssetId,GameContent.inheritRating,GameContent.gameContentMediaId,M.mediaTypeId,M.metadataProviderId,M.visibilityDate,M.originalReleaseDate,M.displayOriginalReleaseDate,M.geoCheckPolicy,M.visibilityStatusId FROM GameContent LEFT OUTER JOIN GameConsumable ON GameContent.gameContentMediaId = GameConsumable.gameAssetMediaId inner join Media M on M.mediaId = GameContent.gameContentMediaId WHERE gameContentMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameContent");
                    sqlDA1.Fill(dataset, "GameContent");

                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,II.lcid,II.fileUrl,II.imageFormatId,II.imageSizeId,II.fileSize FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN ImageInstance II ON II.imageMediaInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}' ", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameImageInstance");
                    sqlDA1.Fill(dataset, "GameImageInstance");
                    break;

                case "Video":
                    query = String.Format("SELECT crid, isan,upc,subTitle,durationSecs,productionCompany,spokenLanguage,episodeNumber,productionId,V.videoMediaId,M.mediaTypeId,M.metadataProviderId,M.visibilityDate,M.originalReleaseDate,M.displayOriginalReleaseDate,M.geoCheckPolicy,M.visibilityStatusId FROM Video V LEFT JOIN VideoEpisode VE ON V.videoMediaId = VE.videoMediaId inner join Media M on M.mediaId = V.videoMediaId WHERE V.videoMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Video");
                    sqlDA1.Fill(dataset, "Video");
                    break;

                case "VideoSeason":
                    query = String.Format("SELECT VS.isComplete,VS.seasonNumber,VS.videoSeasonMediaId,M.mediaTypeId,M.metadataProviderId,M.visibilityDate,M.originalReleaseDate,M.displayOriginalReleaseDate,M.geoCheckPolicy,M.visibilityStatusId	FROM VideoSeason VS inner join Media M on M.mediaId = VS.videoSeasonMediaId WHERE VS.videoSeasonMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoSeason");
                    sqlDA1.Fill(dataset, "VideoSeason");
                    break;

                case "VideoSeries":
                    query = String.Format("SELECT productionCompany,isOrderBySeason,videoSeriesMediaId,M.mediaTypeId,M.metadataProviderId,M.visibilityDate,M.originalReleaseDate,M.displayOriginalReleaseDate,M.geoCheckPolicy,M.visibilityStatusId FROM VideoSeries inner join Media M on M.mediaId = VideoSeries.videoSeriesMediaId WHERE VideoSeries.videoSeriesMediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoSeries");
                    sqlDA1.Fill(dataset, "VideoSeries");
                    break;

                case "Offer":
                    query = String.Format("SELECT offerId,mediaId,name FROM Offer WHERE offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("Offer");
                    sqlDA1.Fill(dataset, "Offer");

                    query = String.Format("SELECT storeId FROM OfferStore WHERE offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferStore");
                    sqlDA1.Fill(dataset, "OfferStore");

                    query = String.Format("SELECT OI.offerInstanceId,offerId,sku,pricingRuleId,price,reportingRetailValue,startDateTime,endDateTime,countryCode,visibilityLevelId,visibilityStatusId,paymentTypeId,externalOfferInstanceId FROM OfferInstance OI JOIN OfferInstanceProviderTerm OIPT ON OIPT.offerInstanceId = OI.offerInstanceId WHERE OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferInstance");
                    sqlDA1.Fill(dataset, "OfferInstance");

                    query = String.Format("SELECT OIUT.userTypeId FROM OfferInstanceUserType  OIUT inner join OfferInstance OI on OI.offerInstanceId = OIUT.offerInstanceId WHERE OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferInstanceUserType");
                    sqlDA1.Fill(dataset, "OfferInstanceUserType");

                    query = String.Format("SELECT p.promotionId,p.[name],p.startDateTime,p.endDateTime,p.price,p.reportingRetailValue,p.priority,p.promotionalWholesalePrice FROM Promotion p inner join OfferInstance OI on OI.offerInstanceId = p.offerInstanceId WHERE OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferPromotion");
                    sqlDA1.Fill(dataset, "OfferPromotion");

                    query = String.Format("SELECT PT.providerTermId,PT.mediaId,PT.wholesalePrice,PT.startDateTime,PT.endDateTime,PT.countryCode,PT.providerId,PT.externalProviderContentId,PT.DRMLicenseIssuerId,PT.externalDRMLicenseIssuerContentId,PT.automaticallyGenerateOffer,PT.modifiedBy FROM ProviderTerm PT JOIN OfferInstanceProviderTerm OIPT ON OIPT.providerTermId = PT.providerTermId join OfferInstance OI ON OIPT.offerInstanceId = OI.offerInstanceId WHERE OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferProviderTerm");
                    sqlDA1.Fill(dataset, "OfferProviderTerm");

                    query = String.Format("SELECT PTMI.providerTermId,PTMI.mediaInstanceId,PTMI.licenseTypeId,PTMI.expirationDate FROM ProviderTermMediaInstance PTMI JOIN OfferInstanceProviderTerm OIPT ON OIPT.providerTermId = PTMI.providerTermId join OfferInstance OI ON OIPT.offerInstanceId = OI.offerInstanceId WHERE OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferProviderTermMediaInstance");
                    sqlDA1.Fill(dataset, "OfferProviderTermMediaInstance");

                    query = String.Format("SELECT clientTypeId FROM OfferInstance OI join OfferInstanceProviderTerm OIPT on OI.offerInstanceId = OIPT.offerInstanceId join dbo.ProviderTerm PT on PT.providerTermId = OIPT.providerTermId join dbo.ProviderTermMediaInstance ptm on ptm.providerTermId = pt.providerTermId join dbo.ProviderTermMediaInstanceClientType pc on PT.providerTermId = pc.providerTermId and pc.mediaInstanceId = ptm.mediaInstanceId where OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferProviderTermMediaInstanceClientType");
                    sqlDA1.Fill(dataset, "OfferProviderTermMediaInstanceClientType");

                    query = String.Format("SELECT licenseExtensionBits FROM OfferInstance OI join OfferInstanceProviderTerm OIPT on OI.offerInstanceId = OIPT.offerInstanceId join dbo.ProviderTerm PT on PT.providerTermId = OIPT.providerTermId join dbo.ProviderTermMediaInstance ptm on ptm.providerTermId = pt.providerTermId join ProviderTermGameContentInstance pg on PT.providerTermId = pg.providerTermId and pg.mediaInstanceId = ptm.mediaInstanceId where OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferProviderTermGameContentInstance");
                    sqlDA1.Fill(dataset, "OfferProviderTermGameContentInstance");

                    query = String.Format("SELECT assetId,quantity FROM OfferInstance OI join OfferInstanceProviderTerm OIPT on OI.offerInstanceId = OIPT.offerInstanceId join dbo.ProviderTerm PT on PT.providerTermId = OIPT.providerTermId join dbo.ProviderTermMediaInstance ptm on ptm.providerTermId = pt.providerTermId join ProviderTermGameContentInstanceAsset PTI on PT.providerTermId = PTI.providerTermId and PTI.mediaInstanceId = ptm.mediaInstanceId where OI.offerId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("OfferProviderTermGameContentInstanceAsset");
                    sqlDA1.Fill(dataset, "OfferProviderTermGameContentInstanceAsset");

                    break;
            }

            if (ClassType == "Image" || ClassType == "Game" || ClassType == "GameContent" || ClassType == "Video" || ClassType == "VideoSeason" || ClassType == "VideoSeries")
            {
                query = String.Format("SELECT articleId,sortOrder FROM MediaArticle WHERE mediaId = '{0}' ORDER BY sortOrder", Id);
                SqlDataAdapter sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("MediaArticle");
                sqlDA1.Fill(dataset, "MediaArticle");

                query = String.Format("SELECT categoryId FROM MediaCategory WHERE mediaId = '{0}'", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("MediaCategory");
                sqlDA1.Fill(dataset, "MediaCategory");

                query = String.Format("SELECT contributorId, roleId,[character],sortOrder,isPrimary,contributorAliasId,(SELECT TOP 1 displayName FROM ContributorLocale cl JOIN ContributorLocaleMap clm ON clm.contributorId = cl.contributorId WHERE cl.contributorId = mc.contributorId AND (cl.lcid=1033 OR clm.lcidMap=1033))as 'contributorName' FROM MediaContributor mc WHERE mediaId = '{0}' order by sortOrder", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("MediaContributor");
                sqlDA1.Fill(dataset, "MediaContributor");


                query = String.Format("SELECT ML.lcid,ML.title, ML.titleSort, ML.reducedTitle,ML.[description],ML.reducedDescription,ML.copyright FROM MediaLocale ML WHERE ML.mediaId = '{0}'", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("MediaLocale");
                sqlDA1.Fill(dataset, "MediaLocale");

                query = String.Format("SELECT MLM.lcid FROM MediaLocaleMap MLM inner join MediaLocale ML on MLM.lcidMap = ML.lcid and ML.mediaId = MLM.mediaId WHERE MLM.mediaId = '{0}' order by ML.lcid", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("MediaLocaleMap");
                sqlDA1.Fill(dataset, "MediaLocaleMap");

                query = String.Format("SELECT relatedMediaId,ISNULL(ML.title, '(none)') as 'relatedMediaTitle',mediaRelationshipTypeId,sortOrder, null AS 'data' FROM MediaRelationship MR JOIN MediaLocaleMap MLM on MLM.mediaId = MR.relatedMediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON ML.mediaId = MR.relatedMediaId AND ML.lcid = MLM.lcidMap WHERE MR.mediaId = '{0}'AND mediaRelationshipTypeId <> '6' AND mediaRelationshipTypeId <> '7'AND mediaRelationshipTypeId <> '8' UNION SELECT relatedMediaId, ISNULL(ML.title, '(none)') as 'relatedMediaTitle', mediaRelationshipTypeId, sortOrder,'Season ' + CAST(VS.seasonNumber AS varchar) AS 'data' FROM MediaRelationship MR JOIN MediaLocaleMap MLM on MLM.mediaId = MR.relatedMediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON ML.mediaId = MR.relatedMediaId AND ML.lcid = MLM.lcidMap LEFT JOIN VideoSeason VS on VS.videoSeasonMediaId = relatedMediaId WHERE MR.mediaId = '{0}' AND MR.mediaRelationshipTypeId = 6 UNION SELECT relatedMediaId, ISNULL(ML.title, '(none)') as 'relatedMediaTitle',mediaRelationshipTypeId,sortOrder,'Episode ' + CAST(VE.episodeNumber AS varchar) AS 'data' FROM MediaRelationship MR JOIN MediaLocaleMap MLM on MLM.mediaId = MR.relatedMediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON ML.mediaId = MR.relatedMediaId AND ML.lcid = MLM.lcidMap LEFT JOIN VideoEpisode VE on VE.videoMediaId = relatedMediaId WHERE MR.mediaId = '{0}' AND (MR.mediaRelationshipTypeId = 7 or MR.mediaRelationshipTypeId = 8) ORDER BY mediaRelationshipTypeId, sortOrder", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("mediaRelationship");
                sqlDA1.Fill(dataset, "mediaRelationship");

                query = String.Format("SELECT ratingValueId FROM MediaRating WHERE mediaId = '{0}'", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("ratingValue");
                sqlDA1.Fill(dataset, "ratingValue");

                query = String.Format("SELECT ratingDescriptorId,[level] FROM MediaRatingDescriptor WHERE mediaId = '{0}'", Id);
                sqlDA1 = new SqlDataAdapter(query, connection);
                dataset.Tables.Add("ratingDescriptor");
                sqlDA1.Fill(dataset, "ratingDescriptor");


                if (ClassType != "Image")
                {
                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,VI.isDRM,VI.audioEncodingId,VI.audioChannel, VI.audioSamplingRate,VI.audioCC,VI.burntInSubtitleLcid,VI.audioBitRate,VI.videoDefinitionId,VI.videoAspectRatio,VI.videoResolution,VI.videoEncodingId,VI.videoBitRate,VI.videoFrame,VI.enabled FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN VideoInstance VI ON VI.videoMediaInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoInstance");
                    sqlDA1.Fill(dataset, "VideoInstance");

                    query = String.Format("SELECT MI.mediaId,MI.mediaInstanceId,MI.isAcquirable,MI.isAdSupported,MI.isPreview,PMI.previewMediaInstanceTypeId,PMI.requiredUserTypeId,PMI.startDate,PMI.endDate,PMI.countryCode,PMI.providerId,PMI.externalLicenserContentId,PMI.DRMLicenseIssuerId,GI.installSize,GI.packageSize,GI.liveContentId FROM MediaInstance MI LEFT JOIN PreviewMediaInstance PMI ON PMI.previewMediaInstanceId = MI.mediaInstanceId INNER JOIN GameContentInstance GI ON GI.gameContentInstanceId = MI.mediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("MediaGameContentInstance");
                    sqlDA1.Fill(dataset, "MediaGameContentInstance");

                    query = String.Format("SELECT GIF.gameContentInstanceFileId,GIF.fileUrl,GIF.sortOrder FROM GameContentInstanceFile GIF inner join GameContentInstance GI ON GI.gameContentInstanceId = GIF.gameContentInstanceId inner join MediaInstance MI on MI.mediaInstanceId = GI.gameContentInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("GameContentInstanceFile");
                    sqlDA1.Fill(dataset, "GameContentInstanceFile");

                    query = String.Format("SELECT VAT.lcid FROM VideoAudioTrackLanguage VAT inner join VideoInstance VI on VAT.videoMediaInstanceId = VI.videoMediaInstanceId inner join MediaInstance MI on MI.mediaInstanceId = VI.videoMediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoAudioTrackLanguage");
                    sqlDA1.Fill(dataset, "VideoAudioTrackLanguage");

                    query = String.Format("SELECT VF.videoFileId,VF.fileUrl,VF.[size],VF.durationSecs,VF.fileIndex FROM VideoFile VF inner join VideoInstance VI on VF.videoMediaInstanceId = VI.videoMediaInstanceId inner join MediaInstance MI on MI.mediaInstanceId = VI.videoMediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoFile");
                    sqlDA1.Fill(dataset, "VideoFile");

                    query = String.Format("SELECT VS.languageCode,VS.fileUrl FROM VideoSubtitle VS inner join VideoInstance VI on VS.videoMediaInstanceId = VI.videoMediaInstanceId inner join MediaInstance MI on MI.mediaInstanceId = VI.videoMediaInstanceId WHERE MI.mediaId = '{0}'", Id);
                    sqlDA1 = new SqlDataAdapter(query, connection);
                    dataset.Tables.Add("VideoSubtitle");
                    sqlDA1.Fill(dataset, "VideoSubtitle");
                }
            }

            return dataset.Clone();
        }

        /// <summary>
        /// Fetching the expected data from Image object into a dataset.
        /// </summary>    
        public static void ExpectedDatasetImage(Image image, ref DataSet ExpectedDataset, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;

            objDataRow = ExpectedDataset.Tables["Image"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(image, null);
                }
            }
            ExpectedDataset.Tables["Image"].Rows.Add(objDataRow);
            //Filling ImageInstances Data
            if (image.Instances != null)
            {
                for (int j = 0; j < image.Instances.Length; j++)
                {
                    Type t = image.Instances[j].GetType();
                    if (t == typeof(ImageInstance))
                    {
                        objDataRow = ExpectedDataset.Tables["ImageInstance"].NewRow();
                        objDataRow[0] = image.Id;
                        objDataRow[1] = image.Instances[j].Id;
                        objDataRow[2] = image.Instances[j].IsAcquirable;
                        objDataRow[3] = image.Instances[j].IsAdSupported;
                        objDataRow[4] = image.Instances[j].IsPreview;
                        if (image.Instances[j].Preview != null)
                        {
                            objDataRow[5] = image.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = image.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = image.Instances[j].Preview.StartDate;
                            objDataRow[8] = image.Instances[j].Preview.EndDate;
                            objDataRow[9] = image.Instances[j].Preview.CountryCode;
                            objDataRow[10] = image.Instances[j].Preview.ProviderId;
                            objDataRow[11] = image.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = image.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((ImageInstance)image.Instances[j]).Lcid;
                        objDataRow[14] = ((ImageInstance)image.Instances[j]).FileUrl;
                        objDataRow[15] = ((ImageInstance)image.Instances[j]).ImageFormatId;
                        objDataRow[16] = ((ImageInstance)image.Instances[j]).ImageSizeId;
                        objDataRow[17] = ((ImageInstance)image.Instances[j]).FileSize;
                        ExpectedDataset.Tables["ImageInstance"].Rows.Add(objDataRow);
                    }

                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = ExpectedDataset.Tables["ImageGameContentInstance"].NewRow();
                        objDataRow[0] = image.Id;
                        objDataRow[1] = image.Instances[j].Id;
                        objDataRow[2] = image.Instances[j].IsAcquirable;
                        objDataRow[3] = image.Instances[j].IsAdSupported;
                        objDataRow[4] = image.Instances[j].IsPreview;
                        if (image.Instances[j].Preview != null)
                        {
                            objDataRow[5] = image.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = image.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = image.Instances[j].Preview.StartDate;
                            objDataRow[8] = image.Instances[j].Preview.EndDate;
                            objDataRow[9] = image.Instances[j].Preview.CountryCode;
                            objDataRow[10] = image.Instances[j].Preview.ProviderId;
                            objDataRow[11] = image.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = image.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((GameContentInstance)image.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)image.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)image.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)image.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)image.Instances[j]).LiveContentId;

                        ExpectedDataset.Tables["ImageGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)image.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = ExpectedDataset.Tables["ImageGameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)image.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)image.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)image.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            ExpectedDataset.Tables["ImageGameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            //Filling ImageArticles Data
            if (image.Articles != null)
            {
                for (int j = 0; j < image.Articles.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["MediaArticle"].NewRow();
                    objDataRow[0] = image.Articles[j].ArticleId;
                    objDataRow[1] = image.Articles[j].SortOrder;
                    ExpectedDataset.Tables["MediaArticle"].Rows.Add(objDataRow);
                }
            }
            //Filling ImageCategories Data
            if (image.Categories != null)
            {
                for (int j = 0; j < image.Categories.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["MediaCategory"].NewRow();
                    objDataRow[0] = image.Categories[j].CategoryId;
                    ExpectedDataset.Tables["MediaCategory"].Rows.Add(objDataRow);
                }
            }
            //Filling ImageContributors Data
            if (image.Contributors != null)
            {
                for (int j = 0; j < image.Contributors.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["MediaContributor"].NewRow();
                    objDataRow[0] = image.Contributors[j].ContributorId;
                    objDataRow[1] = image.Contributors[j].RoleId;
                    objDataRow[2] = image.Contributors[j].Character;
                    objDataRow[3] = image.Contributors[j].SortOrder;
                    objDataRow[4] = image.Contributors[j].IsPrimary;
                    objDataRow[5] = image.Contributors[j].ContributorAliasId;
                    objDataRow[6] = image.Contributors[j].ContributorName;

                    ExpectedDataset.Tables["MediaContributor"].Rows.Add(objDataRow);
                }
            }
            //Filling ImageLocales Data
            if (image.Locales != null)
            {
                for (int j = 0; j < image.Locales.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["MediaLocale"].NewRow();
                    objDataRow[0] = image.Locales[j].Lcid;
                    objDataRow[1] = image.Locales[j].Title;
                    objDataRow[2] = image.Locales[j].TitleSort;
                    objDataRow[3] = image.Locales[j].ReducedTitle;
                    objDataRow[4] = image.Locales[j].Description;
                    objDataRow[5] = image.Locales[j].ReducedDescription;
                    objDataRow[6] = image.Locales[j].Copyright;
                    ExpectedDataset.Tables["MediaLocale"].Rows.Add(objDataRow);
                    if (image.Locales[j].MappedLcids != null)
                    {
                        for (int k = 0; k < image.Locales[j].MappedLcids.Length; k++)
                        {
                            objDataRow = ExpectedDataset.Tables["MediaLocaleMap"].NewRow();
                            objDataRow[0] = image.Locales[j].MappedLcids[k].Lcid;
                            ExpectedDataset.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }

            //Filling ImageRelationships Data
            if (image.Relationships != null)
            {
                for (int j = 0; j < image.Relationships.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["mediaRelationship"].NewRow();
                    objDataRow[0] = image.Relationships[j].RelatedMediaId;
                    objDataRow[1] = image.Relationships[j].RelatedMediaTitle;
                    objDataRow[2] = image.Relationships[j].MediaRelationshipTypeId;
                    objDataRow[3] = image.Relationships[j].SortOrder;
                    objDataRow[4] = image.Relationships[j].Data;
                    ExpectedDataset.Tables["mediaRelationship"].Rows.Add(objDataRow);
                }
            }
            //Filling ImageRatingValues Data
            if (image.RatingValues != null)
            {
                for (int j = 0; j < image.RatingValues.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["ratingValue"].NewRow();
                    objDataRow[0] = image.RatingValues[j].RatingValueId;
                    ExpectedDataset.Tables["ratingValue"].Rows.Add(objDataRow);
                }
            }
            //Filling ImageRatingDescriptors Data
            if (image.RatingDescriptors != null)
            {
                for (int j = 0; j < image.RatingDescriptors.Length; j++)
                {
                    objDataRow = ExpectedDataset.Tables["ratingDescriptor"].NewRow();
                    objDataRow[0] = image.RatingDescriptors[j].RatingDescriptorId;
                    objDataRow[1] = image.RatingDescriptors[j].Level;
                    ExpectedDataset.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from LicenseType object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetLicenseType(LicenseType licenseType, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["LicenseType"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(licenseType, null);
                }
            }
            Expected.Tables["LicenseType"].Rows.Add(objDataRow);
            if (licenseType.LegalTextLocales != null)
            {
                for (int j = 0; j < licenseType.LegalTextLocales.Length; j++)
                {
                    if (licenseType.LegalTextLocales[j] != null)
                    {
                        if (licenseType.LegalTextLocales[j].LicenseTypeId != 0)
                        {
                            objDataRow = Expected.Tables["LicenseTypeLocale"].NewRow();
                            objDataRow[0] = licenseType.LegalTextLocales[j].LicenseTypeId;
                            objDataRow[1] = licenseType.LegalTextLocales[j].Legaltextlcid;
                            objDataRow[2] = licenseType.LegalTextLocales[j].Text;
                            objDataRow[3] = licenseType.LegalTextLocales[j].Locale;
                            Expected.Tables["LicenseTypeLocale"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from Category object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetCategory(Category category, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["Category"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(category, null);
                }
            }
            Expected.Tables["Category"].Rows.Add(objDataRow);
            if (category.Locales != null)
            {
                for (int j = 0; j < category.Locales.Length; j++)
                {
                    if (category.Locales[j].CategoryId != 0)
                    {
                        objDataRow = Expected.Tables["CategoryLocale"].NewRow();
                        objDataRow[0] = category.Locales[j].CategoryId;
                        objDataRow[1] = category.Locales[j].Lcid;
                        objDataRow[2] = category.Locales[j].Name;
                        Expected.Tables["CategoryLocale"].Rows.Add(objDataRow);

                        if (((CategoryCorporationLocale)category.Locales[j]) != null)
                        {
                            objDataRow = Expected.Tables["CategoryCorporationLocale"].NewRow();
                            objDataRow[0] = ((CategoryCorporationLocale)category.Locales[j]).Description;
                            objDataRow[1] = ((CategoryCorporationLocale)category.Locales[j]).HtmlDescription;
                            objDataRow[2] = ((CategoryCorporationLocale)category.Locales[j]).WebSite;
                            objDataRow[3] = ((CategoryCorporationLocale)category.Locales[j]).RssFeatures;
                            objDataRow[4] = ((CategoryCorporationLocale)category.Locales[j]).RssAnnouncement;
                            objDataRow[5] = ((CategoryCorporationLocale)category.Locales[j]).RssNews;
                            objDataRow[6] = ((CategoryCorporationLocale)category.Locales[j]).LogoImageId;
                            objDataRow[7] = ((CategoryCorporationLocale)category.Locales[j]).BackgroundImageId;
                            objDataRow = Expected.Tables["CategoryCorporationLocale"].NewRow();
                        }
                    }
                }
            }
            if (category.Categories != null)
            {
                foreach (Category c in category.Categories)
                {
                    objDataRow = Expected.Tables["Categories"].NewRow();
                    objDataRow[0] = c.Id;
                    objDataRow[1] = c.CategorySystemId;
                    if (c.ParentCategoryId == null)
                        objDataRow[2] = System.DBNull.Value;
                    else
                        objDataRow[2] = c.ParentCategoryId;
                    Expected.Tables["Categories"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from Contributor object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetContributor(Contributor contributor, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["Contributor"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(contributor, null);
                }
            }
            Expected.Tables["Contributor"].Rows.Add(objDataRow);
            if (contributor.Articles != null)
            {
                for (int j = 0; j < contributor.Articles.Length; j++)
                {
                    objDataRow = Expected.Tables["ContributorArticle"].NewRow();
                    objDataRow[0] = contributor.Id;
                    objDataRow[1] = contributor.Articles[j].ArticleId;
                    objDataRow[2] = contributor.Articles[j].SortOrder;
                    Expected.Tables["ContributorArticle"].Rows.Add(objDataRow);
                }
            }

            if (contributor.Aliases != null)
            {
                for (int j = 0; j < contributor.Aliases.Length; j++)
                {
                    objDataRow = Expected.Tables["ContributorAlias"].NewRow();
                    objDataRow[0] = contributor.Id;
                    objDataRow[1] = contributor.Aliases[j].Id;
                    objDataRow[2] = contributor.Aliases[j].Alias;
                    Expected.Tables["ContributorAlias"].Rows.Add(objDataRow);
                }
            }

            if (contributor.Categories != null)
            {
                for (int j = 0; j < contributor.Categories.Length; j++)
                {
                    objDataRow = Expected.Tables["ContributorCategory"].NewRow();
                    objDataRow[0] = contributor.Id;
                    objDataRow[1] = contributor.Categories[j].CategoryId;
                    objDataRow[2] = contributor.Categories[j].SortOrder;
                    Expected.Tables["ContributorCategory"].Rows.Add(objDataRow);
                }
            }

            if (contributor.Locales != null)
            {
                for (int j = 0; j < contributor.Locales.Length; j++)
                {
                    objDataRow = Expected.Tables["ContributorLocale"].NewRow();
                    objDataRow[0] = contributor.Id;
                    objDataRow[1] = contributor.Locales[j].Lcid;
                    objDataRow[2] = contributor.Locales[j].DisplayName;
                    objDataRow[3] = contributor.Locales[j].SortName;
                    Expected.Tables["ContributorLocale"].Rows.Add(objDataRow);

                    if (contributor.Locales[j].TargetingLocales != null)
                    {
                        for (int k = 0; k < contributor.Locales[j].TargetingLocales.Length; k++)
                        {
                            objDataRow = Expected.Tables["ContributorLocaleMap"].NewRow();
                            objDataRow[0] = contributor.Id;
                            objDataRow[1] = contributor.Locales[j].TargetingLocales[k].Lcid;
                            objDataRow[2] = contributor.Locales[j].Lcid;
                            Expected.Tables["ContributorLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }

            if (contributor.Relationships != null)
            {
                for (int j = 0; j < contributor.Relationships.Length; j++)
                {
                    objDataRow = Expected.Tables["contributorRelationship"].NewRow();
                    objDataRow[0] = contributor.Id;
                    objDataRow[1] = contributor.Relationships[j].RelatedContributorId;
                    objDataRow[2] = contributor.Relationships[j].ContributorRelationshipTypeId;
                    objDataRow[3] = contributor.Relationships[j].RoleId;
                    objDataRow[4] = contributor.Relationships[j].IsPrimary;
                    objDataRow[5] = contributor.Relationships[j].SortOrder;
                    Expected.Tables["contributorRelationship"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from AudioEncoding object into a dataset.
        /// </summary>  
        public static void ExpectedDatasetAudioEncoding(AudioEncoding audioEncoding, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["AudioEncoding"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.Name != "Modified")

                    objDataRow[i++] = property1.GetValue(audioEncoding, null);

            }
            Expected.Tables["AudioEncoding"].Rows.Add(objDataRow);
        }

        /// <summary>
        /// Fetching the expected data from Entity object into a dataset.
        /// </summary>  
        public static void ExpectedDatasetEntity(Entity entity, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["Entity"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.Name != "Modified")

                    objDataRow[i++] = property1.GetValue(entity, null);

            }
            Expected.Tables["Entity"].Rows.Add(objDataRow);
        }

        /// <summary>
        /// Fetching the expected data from VideoEncoding object into a dataset.
        /// </summary>  
        public static void ExpectedDatasetVideoEncoding(VideoEncoding videoEncoding, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["VideoEncoding"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.Name != "Modified")

                    objDataRow[i++] = property1.GetValue(videoEncoding, null);

            }
            Expected.Tables["VideoEncoding"].Rows.Add(objDataRow);
        }

        /// <summary>
        /// Fetching the expected data from PricingRule object into a dataset.
        /// </summary>  
        public static void ExpectedDatasetPricingRule(PricingRule pricingRule, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["PricingRule"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "SecondaryId")
                    continue;
                else
                    objDataRow[i++] = property1.GetValue(pricingRule, null);
            }
            Expected.Tables["PricingRule"].Rows.Add(objDataRow);

            //Filling Pricing Rule Instance Data
            if (pricingRule.PricingRuleInstances != null)
            {
                for (int j = 0; j < pricingRule.PricingRuleInstances.Length; j++)
                {
                    objDataRow = Expected.Tables["pricingRuleInstance"].NewRow();
                    if (pricingRule.PricingRuleInstances[j] != null)
                    {
                        if (pricingRule.PricingRuleInstances[j].Id != 0)
                        {
                            objDataRow[0] = pricingRule.PricingRuleInstances[j].Id;
                            objDataRow[1] = pricingRule.PricingRuleInstances[j].PricingRuleId;
                            objDataRow[2] = pricingRule.PricingRuleInstances[j].PriceWholesaleFrom;
                            objDataRow[3] = pricingRule.PricingRuleInstances[j].PriceWholesaleTo;
                            objDataRow[4] = pricingRule.PricingRuleInstances[j].PointsRetail;
                            objDataRow[5] = pricingRule.PricingRuleInstances[j].PriceRetail;
                            Expected.Tables["pricingRuleInstance"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from game object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetGame(Game game, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["Game"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(game, null);
                }
            }
            Expected.Tables["Game"].Rows.Add(objDataRow);

            // Filling GameLocale Data
            if (game.GameLocales != null)
            {
                for (int j = 0; j < game.GameLocales.Length; j++)
                {
                    objDataRow = Expected.Tables["GameLocale"].NewRow();
                    objDataRow[0] = game.Id;
                    objDataRow[1] = game.GameLocales[j].Lcid;
                    objDataRow[2] = game.GameLocales[j].CustomGenre;
                    objDataRow[3] = game.GameLocales[j].Developer;
                    Expected.Tables["GameLocale"].Rows.Add(objDataRow);
                }
            }

            //Filling GameCountries Data
            if (game.GameCountries != null)
            {
                for (int j = 0; j < game.GameCountries.Length; j++)
                {
                    objDataRow = Expected.Tables["GameCountry"].NewRow();
                    objDataRow[0] = game.Id;
                    objDataRow[1] = game.GameCountries[j].CountryCode;
                    objDataRow[2] = game.GameCountries[j].OfflinePlayersMin;
                    objDataRow[3] = game.GameCountries[j].OfflinePlayersMax;
                    objDataRow[4] = game.GameCountries[j].OnlineCoopPlayersMin;
                    objDataRow[5] = game.GameCountries[j].OnlineCoopPlayersMax;
                    objDataRow[6] = game.GameCountries[j].OnlineCoopHardDriveRequired;
                    objDataRow[7] = game.GameCountries[j].OnlineCoopHardDriveStorageAmount;
                    objDataRow[8] = game.GameCountries[j].OnlineCoopHardDriveStorageAmountUnitId;
                    objDataRow[9] = game.GameCountries[j].OfflineSystemLinkMin;
                    objDataRow[10] = game.GameCountries[j].OfflineSystemLinkMax;
                    objDataRow[11] = game.GameCountries[j].OfflineMaxHDTVModeId;
                    objDataRow[12] = game.GameCountries[j].OfflineVoiceCommands;
                    objDataRow[13] = game.GameCountries[j].OfflinePeripheralWheel;
                    objDataRow[14] = game.GameCountries[j].OfflinePeripheralGamePad;
                    objDataRow[15] = game.GameCountries[j].OfflinePeripheralArcadeStick;
                    objDataRow[16] = game.GameCountries[j].OfflinePeripheralFlightStick;
                    objDataRow[17] = game.GameCountries[j].OfflinePeripheralDancePad;
                    objDataRow[18] = game.GameCountries[j].OfflinePeripheralForceFeedbackWheel;
                    objDataRow[19] = game.GameCountries[j].OfflinePeripheralCamera;
                    objDataRow[20] = game.GameCountries[j].OfflineCustomSoundtracks;
                    objDataRow[21] = game.GameCountries[j].OfflineDolbyDigital;
                    objDataRow[22] = game.GameCountries[j].OnlineMultiplayerMin;
                    objDataRow[23] = game.GameCountries[j].OnlineMultiplayerMax;
                    objDataRow[24] = game.GameCountries[j].OnlineMultiplayerHardDriveRequired;
                    objDataRow[25] = game.GameCountries[j].OnlineCoopPlayersMin;
                    objDataRow[26] = game.GameCountries[j].OnlineCoopPlayersMax;
                    objDataRow[27] = game.GameCountries[j].OnlineCoopHardDriveRequired;
                    objDataRow[28] = game.GameCountries[j].OnlineCoopHardDriveStorageAmount;
                    objDataRow[29] = game.GameCountries[j].OnlineCoopHardDriveStorageAmountUnitId;
                    objDataRow[30] = game.GameCountries[j].OnlineHardDriveRequired;
                    objDataRow[31] = game.GameCountries[j].OnlinePlayStorageAmount;
                    objDataRow[32] = game.GameCountries[j].OnlinePlayStorageAmountUnitId;
                    objDataRow[33] = game.GameCountries[j].OnlineContentDownload;
                    objDataRow[34] = game.GameCountries[j].OnlineLeaderboards;
                    objDataRow[35] = game.GameCountries[j].OnlineSpectatorMode;
                    objDataRow[36] = game.GameCountries[j].OnlineVoice;
                    objDataRow[37] = game.GameCountries[j].OnlineOnly;

                    Expected.Tables["GameCountry"].Rows.Add(objDataRow);
                    //Filling GameCapabilityCountryMaps Data
                    for (int k = 0; k < game.GameCountries[j].GameCapabilityCountryMaps.Length; k++)
                    {
                        objDataRow = Expected.Tables["GameCountryMap"].NewRow();
                        objDataRow[0] = game.Id;
                        objDataRow[1] = game.GameCountries[j].GameCapabilityCountryMaps[k].CountryCode;
                        objDataRow[2] = game.GameCountries[j].GameCapabilityCountryMaps[k].CountryCodeMap;
                        Expected.Tables["GameCountryMap"].Rows.Add(objDataRow);
                    }
                }
            }
            // Filling GameInstances Data
            if (game.Instances != null)
            {
                for (int j = 0; j < game.Instances.Length; j++)
                {
                    Type t = game.Instances[j].GetType();
                    if (t == typeof(VideoInstance))
                    {
                        objDataRow = Expected.Tables["VideoInstance"].NewRow();
                        objDataRow[0] = game.Id;
                        objDataRow[1] = game.Instances[j].Id;
                        objDataRow[2] = game.Instances[j].IsAcquirable;
                        objDataRow[3] = game.Instances[j].IsAdSupported;
                        objDataRow[4] = game.Instances[j].IsPreview;
                        if (game.Instances[j].Preview != null)
                        {
                            objDataRow[5] = game.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = game.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = game.Instances[j].Preview.StartDate;
                            objDataRow[8] = game.Instances[j].Preview.EndDate;
                            objDataRow[9] = game.Instances[j].Preview.CountryCode;
                            objDataRow[10] = game.Instances[j].Preview.ProviderId;
                            objDataRow[11] = game.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = game.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((VideoInstance)game.Instances[j]).IsDRM;
                        objDataRow[14] = ((VideoInstance)game.Instances[j]).AudioEncodingId;
                        objDataRow[15] = ((VideoInstance)game.Instances[j]).AudioChannel;
                        objDataRow[16] = ((VideoInstance)game.Instances[j]).AudioSamplingRate;
                        objDataRow[17] = ((VideoInstance)game.Instances[j]).AudioCC;
                        objDataRow[18] = ((VideoInstance)game.Instances[j]).BurntInSubtitleLcid;
                        objDataRow[19] = ((VideoInstance)game.Instances[j]).AudioBitRate;
                        objDataRow[20] = ((VideoInstance)game.Instances[j]).VideoDefinitionId;
                        objDataRow[21] = ((VideoInstance)game.Instances[j]).VideoAspectRatio;
                        objDataRow[22] = ((VideoInstance)game.Instances[j]).VideoResolution;
                        objDataRow[23] = ((VideoInstance)game.Instances[j]).VideoEncodingId;
                        objDataRow[24] = ((VideoInstance)game.Instances[j]).VideoBitRate;
                        objDataRow[25] = ((VideoInstance)game.Instances[j]).VideoFrame;
                        objDataRow[26] = ((VideoInstance)game.Instances[j]).Enabled;

                        Expected.Tables["VideoInstance"].Rows.Add(objDataRow);

                        // Filling GameVideoAudioTrackLanguages Data
                        for (int k = 0; k < ((VideoInstance)game.Instances[j]).AudioTrackLanguages.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoAudioTrackLanguage"].NewRow();
                            objDataRow[0] = ((VideoInstance)game.Instances[j]).AudioTrackLanguages[k].Lcid;
                            Expected.Tables["VideoAudioTrackLanguage"].Rows.Add(objDataRow);
                        }

                        // Filling GameVideoFiles Data
                        for (int k = 0; k < ((VideoInstance)game.Instances[j]).VideoFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoFile"].NewRow();
                            objDataRow[0] = ((VideoInstance)game.Instances[j]).VideoFiles[k].Id;
                            objDataRow[1] = ((VideoInstance)game.Instances[j]).VideoFiles[k].FileUrl;
                            objDataRow[2] = ((VideoInstance)game.Instances[j]).VideoFiles[k].Size;
                            objDataRow[3] = ((VideoInstance)game.Instances[j]).VideoFiles[k].Duration;
                            objDataRow[4] = ((VideoInstance)game.Instances[j]).VideoFiles[k].Index;
                            Expected.Tables["VideoFile"].Rows.Add(objDataRow);
                        }

                        // Filling GameVideoSubtitles Data
                        if (((VideoInstance)game.Instances[j]).Subtitles != null)
                        {
                            for (int k = 0; k < ((VideoInstance)game.Instances[j]).Subtitles.Length; k++)
                            {

                                objDataRow = Expected.Tables["VideoSubtitle"].NewRow();
                                objDataRow[0] = ((VideoInstance)game.Instances[j]).Subtitles[k].LanguageCode;
                                objDataRow[1] = ((VideoInstance)game.Instances[j]).Subtitles[k].FileUrl;
                                Expected.Tables["VideoSubtitle"].Rows.Add(objDataRow);
                            }
                        }
                    }

                    if (t == typeof(ImageInstance))
                    {
                        objDataRow = Expected.Tables["GameImageInstance"].NewRow();
                        objDataRow[0] = game.Id;
                        objDataRow[1] = game.Instances[j].Id;
                        objDataRow[2] = game.Instances[j].IsAcquirable;
                        objDataRow[3] = game.Instances[j].IsAdSupported;
                        objDataRow[4] = game.Instances[j].IsPreview;
                        if (game.Instances[j].Preview != null)
                        {
                            objDataRow[5] = game.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = game.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = game.Instances[j].Preview.StartDate;
                            objDataRow[8] = game.Instances[j].Preview.EndDate;
                            objDataRow[9] = game.Instances[j].Preview.CountryCode;
                            objDataRow[10] = game.Instances[j].Preview.ProviderId;
                            objDataRow[11] = game.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = game.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((ImageInstance)game.Instances[j]).Lcid;
                        objDataRow[14] = ((ImageInstance)game.Instances[j]).FileUrl;
                        objDataRow[15] = ((ImageInstance)game.Instances[j]).ImageFormatId;
                        objDataRow[16] = ((ImageInstance)game.Instances[j]).ImageSizeId;
                        objDataRow[17] = ((ImageInstance)game.Instances[j]).FileSize;
                        Expected.Tables["GameImageInstance"].Rows.Add(objDataRow);
                    }

                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = Expected.Tables["MediaGameContentInstance"].NewRow();
                        objDataRow[0] = game.Id;
                        objDataRow[1] = game.Instances[j].Id;
                        objDataRow[2] = game.Instances[j].IsAcquirable;
                        objDataRow[3] = game.Instances[j].IsAdSupported;
                        objDataRow[4] = game.Instances[j].IsPreview;
                        if (game.Instances[j].Preview != null)
                        {
                            objDataRow[5] = game.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = game.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = game.Instances[j].Preview.StartDate;
                            objDataRow[8] = game.Instances[j].Preview.EndDate;
                            objDataRow[9] = game.Instances[j].Preview.CountryCode;
                            objDataRow[10] = game.Instances[j].Preview.ProviderId;
                            objDataRow[11] = game.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = game.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((GameContentInstance)game.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)game.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)game.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)game.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)game.Instances[j]).LiveContentId;

                        Expected.Tables["MediaGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)game.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["GameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)game.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)game.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)game.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            Expected.Tables["GameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }

                // Filling GameArticles Data
                if (game.Articles != null)
                {
                    for (int j = 0; j < game.Articles.Length; j++)
                    {
                        objDataRow = Expected.Tables["MediaArticle"].NewRow();
                        objDataRow[0] = game.Articles[j].ArticleId;
                        objDataRow[1] = game.Articles[j].SortOrder;
                        Expected.Tables["MediaArticle"].Rows.Add(objDataRow);
                    }
                }

                // Filling GameCategories Data
                if (game.Categories != null)
                {
                    for (int j = 0; j < game.Categories.Length; j++)
                    {
                        objDataRow = Expected.Tables["MediaCategory"].NewRow();
                        objDataRow[0] = game.Categories[j].CategoryId;
                        Expected.Tables["MediaCategory"].Rows.Add(objDataRow);
                    }
                }

                // Filling GameContributors Data
                if (game.Contributors != null)
                {
                    for (int j = 0; j < game.Contributors.Length; j++)
                    {
                        objDataRow = Expected.Tables["MediaContributor"].NewRow();
                        objDataRow[0] = game.Contributors[j].ContributorId;
                        objDataRow[1] = game.Contributors[j].RoleId;
                        objDataRow[2] = game.Contributors[j].Character;
                        objDataRow[3] = game.Contributors[j].SortOrder;
                        objDataRow[4] = game.Contributors[j].IsPrimary;
                        objDataRow[5] = game.Contributors[j].ContributorAliasId;
                        objDataRow[6] = game.Contributors[j].ContributorName;

                        Expected.Tables["MediaContributor"].Rows.Add(objDataRow);
                    }
                }
                // Filling GameMediaLocales Data
                if (game.Locales != null)
                {
                    for (int j = 0; j < game.Locales.Length; j++)
                    {
                        objDataRow = Expected.Tables["MediaLocale"].NewRow();
                        objDataRow[0] = game.Locales[j].Lcid;
                        objDataRow[1] = game.Locales[j].Title;
                        objDataRow[2] = game.Locales[j].TitleSort;
                        objDataRow[3] = game.Locales[j].ReducedTitle;
                        objDataRow[4] = game.Locales[j].Description;
                        objDataRow[5] = game.Locales[j].ReducedDescription;
                        objDataRow[6] = game.Locales[j].Copyright;

                        Expected.Tables["MediaLocale"].Rows.Add(objDataRow);
                        //Filling GameMediaLocaleMap Data
                        if (game.Locales[j].MappedLcids != null)
                        {
                            for (int k = 0; k < game.Locales[j].MappedLcids.Length; k++)
                            {
                                objDataRow = Expected.Tables["MediaLocaleMap"].NewRow();
                                objDataRow[0] = game.Locales[j].MappedLcids[k].Lcid;
                                Expected.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                            }
                        }
                    }
                }

                // Filling GameRelationships Data
                if (game.Relationships != null)
                {
                    for (int j = 0; j < game.Relationships.Length; j++)
                    {
                        objDataRow = Expected.Tables["mediaRelationship"].NewRow();
                        objDataRow[0] = game.Relationships[j].RelatedMediaId;
                        objDataRow[1] = game.Relationships[j].RelatedMediaTitle;
                        objDataRow[2] = game.Relationships[j].MediaRelationshipTypeId;
                        objDataRow[3] = game.Relationships[j].SortOrder;
                        objDataRow[4] = game.Relationships[j].Data;
                        Expected.Tables["mediaRelationship"].Rows.Add(objDataRow);
                    }
                }
                // Filling GameRatingValues Data
                if (game.RatingValues != null)
                {
                    for (int j = 0; j < game.RatingValues.Length; j++)
                    {
                        objDataRow = Expected.Tables["ratingValue"].NewRow();
                        objDataRow[0] = game.RatingValues[j].RatingValueId;
                        Expected.Tables["ratingValue"].Rows.Add(objDataRow);
                    }
                }
                // Filling GameRatingDescriptors Data
                if (game.RatingDescriptors != null)
                {
                    for (int j = 0; j < game.RatingDescriptors.Length; j++)
                    {
                        objDataRow = Expected.Tables["ratingDescriptor"].NewRow();
                        objDataRow[0] = game.RatingDescriptors[j].RatingDescriptorId;
                        objDataRow[1] = game.RatingDescriptors[j].Level;
                        Expected.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                    }
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from GameContent object into a dataset.
        /// </summary>  
        public static void ExpectedDatasetGameContent(GameContent gameContent, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["GameContent"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle" || property1.Name == "Consumable" || property1.Name == "AvatarItem")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(gameContent, null);
                }
            }
            Expected.Tables["GameContent"].Rows.Add(objDataRow);

            //Filling Game Content Instance Data
            if (gameContent.Instances != null)
            {
                for (int j = 0; j < gameContent.Instances.Length; j++)
                {
                    Type t = gameContent.Instances[j].GetType();
                    if (t == typeof(VideoInstance))
                    {
                        objDataRow = Expected.Tables["VideoInstance"].NewRow();
                        objDataRow[0] = gameContent.Id;
                        objDataRow[1] = gameContent.Instances[j].Id;
                        objDataRow[2] = gameContent.Instances[j].IsAcquirable;
                        objDataRow[3] = gameContent.Instances[j].IsAdSupported;
                        objDataRow[4] = gameContent.Instances[j].IsPreview;
                        if (gameContent.Instances[j].Preview != null)
                        {
                            objDataRow[5] = gameContent.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = gameContent.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = gameContent.Instances[j].Preview.StartDate;
                            objDataRow[8] = gameContent.Instances[j].Preview.EndDate;
                            objDataRow[9] = gameContent.Instances[j].Preview.CountryCode;
                            objDataRow[10] = gameContent.Instances[j].Preview.ProviderId;
                            objDataRow[11] = gameContent.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = gameContent.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((VideoInstance)gameContent.Instances[j]).IsDRM;
                        objDataRow[14] = ((VideoInstance)gameContent.Instances[j]).AudioEncodingId;
                        objDataRow[15] = ((VideoInstance)gameContent.Instances[j]).AudioChannel;
                        objDataRow[16] = ((VideoInstance)gameContent.Instances[j]).AudioSamplingRate;
                        objDataRow[17] = ((VideoInstance)gameContent.Instances[j]).AudioCC;
                        objDataRow[18] = ((VideoInstance)gameContent.Instances[j]).BurntInSubtitleLcid;
                        objDataRow[19] = ((VideoInstance)gameContent.Instances[j]).AudioBitRate;
                        objDataRow[20] = ((VideoInstance)gameContent.Instances[j]).VideoDefinitionId;
                        objDataRow[21] = ((VideoInstance)gameContent.Instances[j]).VideoAspectRatio;
                        objDataRow[22] = ((VideoInstance)gameContent.Instances[j]).VideoResolution;
                        objDataRow[23] = ((VideoInstance)gameContent.Instances[j]).VideoEncodingId;
                        objDataRow[24] = ((VideoInstance)gameContent.Instances[j]).VideoBitRate;
                        objDataRow[25] = ((VideoInstance)gameContent.Instances[j]).VideoFrame;
                        objDataRow[26] = ((VideoInstance)gameContent.Instances[j]).Enabled;

                        Expected.Tables["VideoInstance"].Rows.Add(objDataRow);

                        // Filling VideoAudioTrackLanguages Data
                        for (int k = 0; k < ((VideoInstance)gameContent.Instances[j]).AudioTrackLanguages.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoAudioTrackLanguage"].NewRow();
                            objDataRow[0] = ((VideoInstance)gameContent.Instances[j]).AudioTrackLanguages[k].Lcid;
                            Expected.Tables["VideoAudioTrackLanguage"].Rows.Add(objDataRow);
                        }

                        // Filling VideoFiles Data
                        for (int k = 0; k < ((VideoInstance)gameContent.Instances[j]).VideoFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoFile"].NewRow();
                            objDataRow[0] = ((VideoInstance)gameContent.Instances[j]).VideoFiles[k].Id;
                            objDataRow[1] = ((VideoInstance)gameContent.Instances[j]).VideoFiles[k].FileUrl;
                            objDataRow[2] = ((VideoInstance)gameContent.Instances[j]).VideoFiles[k].Size;
                            objDataRow[3] = ((VideoInstance)gameContent.Instances[j]).VideoFiles[k].Duration;
                            objDataRow[4] = ((VideoInstance)gameContent.Instances[j]).VideoFiles[k].Index;
                            Expected.Tables["VideoFile"].Rows.Add(objDataRow);
                        }

                        // Filling VideoSubtitles Data
                        if (((VideoInstance)gameContent.Instances[j]).Subtitles != null)
                        {
                            for (int k = 0; k < ((VideoInstance)gameContent.Instances[j]).Subtitles.Length; k++)
                            {

                                objDataRow = Expected.Tables["VideoSubtitle"].NewRow();
                                objDataRow[0] = ((VideoInstance)gameContent.Instances[j]).Subtitles[k].LanguageCode;
                                objDataRow[1] = ((VideoInstance)gameContent.Instances[j]).Subtitles[k].FileUrl;
                                Expected.Tables["VideoSubtitle"].Rows.Add(objDataRow);
                            }
                        }

                    }
                    //Filling Image Instance Data
                    if (t == typeof(ImageInstance))
                    {
                        objDataRow = Expected.Tables["GameImageInstance"].NewRow();
                        objDataRow[0] = gameContent.Id;
                        objDataRow[1] = gameContent.Instances[j].Id;
                        objDataRow[2] = gameContent.Instances[j].IsAcquirable;
                        objDataRow[3] = gameContent.Instances[j].IsAdSupported;
                        objDataRow[4] = gameContent.Instances[j].IsPreview;
                        if (gameContent.Instances[j].Preview != null)
                        {
                            objDataRow[5] = gameContent.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = gameContent.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = gameContent.Instances[j].Preview.StartDate;
                            objDataRow[8] = gameContent.Instances[j].Preview.EndDate;
                            objDataRow[9] = gameContent.Instances[j].Preview.CountryCode;
                            objDataRow[10] = gameContent.Instances[j].Preview.ProviderId;
                            objDataRow[11] = gameContent.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = gameContent.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((ImageInstance)gameContent.Instances[j]).Lcid;
                        objDataRow[14] = ((ImageInstance)gameContent.Instances[j]).FileUrl;
                        objDataRow[15] = ((ImageInstance)gameContent.Instances[j]).ImageFormatId;
                        objDataRow[16] = ((ImageInstance)gameContent.Instances[j]).ImageSizeId;
                        objDataRow[17] = ((ImageInstance)gameContent.Instances[j]).FileSize;
                        Expected.Tables["GameImageInstance"].Rows.Add(objDataRow);
                    }

                    //Filling Game Content Instance data
                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = Expected.Tables["MediaGameContentInstance"].NewRow();
                        objDataRow[0] = gameContent.Id;
                        objDataRow[1] = gameContent.Instances[j].Id;
                        objDataRow[2] = gameContent.Instances[j].IsAcquirable;
                        objDataRow[3] = gameContent.Instances[j].IsAdSupported;
                        objDataRow[4] = gameContent.Instances[j].IsPreview;
                        if (gameContent.Instances[j].Preview != null)
                        {
                            objDataRow[5] = gameContent.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = gameContent.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = gameContent.Instances[j].Preview.StartDate;
                            objDataRow[8] = gameContent.Instances[j].Preview.EndDate;
                            objDataRow[9] = gameContent.Instances[j].Preview.CountryCode;
                            objDataRow[10] = gameContent.Instances[j].Preview.ProviderId;
                            objDataRow[11] = gameContent.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = gameContent.Instances[j].Preview.DRMLicenseIssuerId;
                        }

                        objDataRow[13] = ((GameContentInstance)gameContent.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)gameContent.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)gameContent.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)gameContent.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)gameContent.Instances[j]).LiveContentId;

                        Expected.Tables["MediaGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)gameContent.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["GameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)gameContent.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)gameContent.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)gameContent.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            Expected.Tables["GameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Articles Data
            if (gameContent.Articles != null)
            {
                for (int j = 0; j < gameContent.Articles.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaArticle"].NewRow();
                    objDataRow[0] = gameContent.Articles[j].ArticleId;
                    objDataRow[1] = gameContent.Articles[j].SortOrder;
                    Expected.Tables["MediaArticle"].Rows.Add(objDataRow);
                }
            }

            // Filling Categories Data
            if (gameContent.Categories != null)
            {
                for (int j = 0; j < gameContent.Categories.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaCategory"].NewRow();
                    objDataRow[0] = gameContent.Categories[j].CategoryId;
                    Expected.Tables["MediaCategory"].Rows.Add(objDataRow);
                }
            }

            // Filling Contributors Data
            if (gameContent.Contributors != null)
            {
                for (int j = 0; j < gameContent.Contributors.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaContributor"].NewRow();
                    objDataRow[0] = gameContent.Contributors[j].ContributorId;
                    objDataRow[1] = gameContent.Contributors[j].RoleId;
                    objDataRow[2] = gameContent.Contributors[j].Character;
                    objDataRow[3] = gameContent.Contributors[j].SortOrder;
                    objDataRow[4] = gameContent.Contributors[j].IsPrimary;
                    objDataRow[5] = gameContent.Contributors[j].ContributorAliasId;
                    objDataRow[6] = gameContent.Contributors[j].ContributorName;

                    Expected.Tables["MediaContributor"].Rows.Add(objDataRow);
                }
            }
            // Filling MediaLocales Data
            if (gameContent.Locales != null)
            {
                for (int j = 0; j < gameContent.Locales.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaLocale"].NewRow();
                    objDataRow[0] = gameContent.Locales[j].Lcid;
                    objDataRow[1] = gameContent.Locales[j].Title;
                    objDataRow[2] = gameContent.Locales[j].TitleSort;
                    objDataRow[3] = gameContent.Locales[j].ReducedTitle;
                    objDataRow[4] = gameContent.Locales[j].Description;
                    objDataRow[5] = gameContent.Locales[j].ReducedDescription;
                    objDataRow[6] = gameContent.Locales[j].Copyright;

                    Expected.Tables["MediaLocale"].Rows.Add(objDataRow);
                    //Filling MediaLocaleMap Data
                    if (gameContent.Locales[j].MappedLcids != null)
                    {
                        for (int k = 0; k < gameContent.Locales[j].MappedLcids.Length; k++)
                        {
                            objDataRow = Expected.Tables["MediaLocaleMap"].NewRow();
                            objDataRow[0] = gameContent.Locales[j].MappedLcids[k].Lcid;
                            Expected.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Relationships Data
            if (gameContent.Relationships != null)
            {
                for (int j = 0; j < gameContent.Relationships.Length; j++)
                {
                    objDataRow = Expected.Tables["mediaRelationship"].NewRow();
                    objDataRow[0] = gameContent.Relationships[j].RelatedMediaId;
                    objDataRow[1] = gameContent.Relationships[j].RelatedMediaTitle;
                    objDataRow[2] = gameContent.Relationships[j].MediaRelationshipTypeId;
                    objDataRow[3] = gameContent.Relationships[j].SortOrder;
                    objDataRow[4] = gameContent.Relationships[j].Data;
                    Expected.Tables["mediaRelationship"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingValues Data
            if (gameContent.RatingValues != null)
            {
                for (int j = 0; j < gameContent.RatingValues.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingValue"].NewRow();
                    objDataRow[0] = gameContent.RatingValues[j].RatingValueId;
                    Expected.Tables["ratingValue"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingDescriptors Data
            if (gameContent.RatingDescriptors != null)
            {
                for (int j = 0; j < gameContent.RatingDescriptors.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingDescriptor"].NewRow();
                    objDataRow[0] = gameContent.RatingDescriptors[j].RatingDescriptorId;
                    objDataRow[1] = gameContent.RatingDescriptors[j].Level;
                    Expected.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from Video object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetVideo(Video video, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["Video"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(video, null);
                }
            }
            Expected.Tables["Video"].Rows.Add(objDataRow);

            if (video.Instances != null)
            {
                for (int j = 0; j < video.Instances.Length; j++)
                {
                    Type t = video.Instances[j].GetType();
                    //Filing Video Instance Data
                    if (t == typeof(VideoInstance))
                    {
                        objDataRow = Expected.Tables["VideoInstance"].NewRow();
                        objDataRow[0] = video.Id;
                        objDataRow[1] = video.Instances[j].Id;
                        objDataRow[2] = video.Instances[j].IsAcquirable;
                        objDataRow[3] = video.Instances[j].IsAdSupported;
                        objDataRow[4] = video.Instances[j].IsPreview;
                        if (video.Instances[j].Preview != null)
                        {
                            objDataRow[5] = video.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = video.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = video.Instances[j].Preview.StartDate;
                            objDataRow[8] = video.Instances[j].Preview.EndDate;
                            objDataRow[9] = video.Instances[j].Preview.CountryCode;
                            objDataRow[10] = video.Instances[j].Preview.ProviderId;
                            objDataRow[11] = video.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = video.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((VideoInstance)video.Instances[j]).IsDRM;
                        objDataRow[14] = ((VideoInstance)video.Instances[j]).AudioEncodingId;
                        objDataRow[15] = ((VideoInstance)video.Instances[j]).AudioChannel;
                        objDataRow[16] = ((VideoInstance)video.Instances[j]).AudioSamplingRate;
                        objDataRow[17] = ((VideoInstance)video.Instances[j]).AudioCC;
                        objDataRow[18] = ((VideoInstance)video.Instances[j]).BurntInSubtitleLcid;
                        objDataRow[19] = ((VideoInstance)video.Instances[j]).AudioBitRate;
                        objDataRow[20] = ((VideoInstance)video.Instances[j]).VideoDefinitionId;
                        objDataRow[21] = ((VideoInstance)video.Instances[j]).VideoAspectRatio;
                        objDataRow[22] = ((VideoInstance)video.Instances[j]).VideoResolution;
                        objDataRow[23] = ((VideoInstance)video.Instances[j]).VideoEncodingId;
                        objDataRow[24] = ((VideoInstance)video.Instances[j]).VideoBitRate;
                        objDataRow[25] = ((VideoInstance)video.Instances[j]).VideoFrame;
                        objDataRow[26] = ((VideoInstance)video.Instances[j]).Enabled;

                        Expected.Tables["VideoInstance"].Rows.Add(objDataRow);

                        // Filling VideoAudioTrackLanguages Data
                        for (int k = 0; k < ((VideoInstance)video.Instances[j]).AudioTrackLanguages.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoAudioTrackLanguage"].NewRow();
                            objDataRow[0] = ((VideoInstance)video.Instances[j]).AudioTrackLanguages[k].Lcid;
                            Expected.Tables["VideoAudioTrackLanguage"].Rows.Add(objDataRow);
                        }

                        // Filling VideoFiles Data
                        for (int k = 0; k < ((VideoInstance)video.Instances[j]).VideoFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoFile"].NewRow();
                            objDataRow[0] = ((VideoInstance)video.Instances[j]).VideoFiles[k].Id;
                            objDataRow[1] = ((VideoInstance)video.Instances[j]).VideoFiles[k].FileUrl;
                            objDataRow[2] = ((VideoInstance)video.Instances[j]).VideoFiles[k].Size;
                            objDataRow[3] = ((VideoInstance)video.Instances[j]).VideoFiles[k].Duration;
                            objDataRow[4] = ((VideoInstance)video.Instances[j]).VideoFiles[k].Index;
                            Expected.Tables["VideoFile"].Rows.Add(objDataRow);
                        }

                        // Filling VideoSubtitles Data
                        if (((VideoInstance)video.Instances[j]).Subtitles != null)
                        {
                            for (int k = 0; k < ((VideoInstance)video.Instances[j]).Subtitles.Length; k++)
                            {

                                objDataRow = Expected.Tables["VideoSubtitle"].NewRow();
                                objDataRow[0] = ((VideoInstance)video.Instances[j]).Subtitles[k].LanguageCode;
                                objDataRow[1] = ((VideoInstance)video.Instances[j]).Subtitles[k].FileUrl;
                                Expected.Tables["VideoSubtitle"].Rows.Add(objDataRow);
                            }
                        }
                    }
                    //Filing Game Content Instance Data
                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = Expected.Tables["MediaGameContentInstance"].NewRow();
                        objDataRow[0] = video.Id;
                        objDataRow[1] = video.Instances[j].Id;
                        objDataRow[2] = video.Instances[j].IsAcquirable;
                        objDataRow[3] = video.Instances[j].IsAdSupported;
                        objDataRow[4] = video.Instances[j].IsPreview;
                        if (video.Instances[j].Preview != null)
                        {
                            objDataRow[5] = video.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = video.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = video.Instances[j].Preview.StartDate;
                            objDataRow[8] = video.Instances[j].Preview.EndDate;
                            objDataRow[9] = video.Instances[j].Preview.CountryCode;
                            objDataRow[10] = video.Instances[j].Preview.ProviderId;
                            objDataRow[11] = video.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = video.Instances[j].Preview.DRMLicenseIssuerId;
                        }

                        objDataRow[13] = ((GameContentInstance)video.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)video.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)video.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)video.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)video.Instances[j]).LiveContentId;

                        Expected.Tables["MediaGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)video.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["GameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)video.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)video.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)video.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            Expected.Tables["GameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Articles Data
            if (video.Articles != null)
            {
                for (int j = 0; j < video.Articles.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaArticle"].NewRow();
                    objDataRow[0] = video.Articles[j].ArticleId;
                    objDataRow[1] = video.Articles[j].SortOrder;
                    Expected.Tables["MediaArticle"].Rows.Add(objDataRow);
                }
            }

            // Filling Categories Data
            if (video.Categories != null)
            {
                for (int j = 0; j < video.Categories.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaCategory"].NewRow();
                    objDataRow[0] = video.Categories[j].CategoryId;
                    Expected.Tables["MediaCategory"].Rows.Add(objDataRow);
                }
            }
            // Filling Contributors Data
            if (video.Contributors != null)
            {
                for (int j = 0; j < video.Contributors.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaContributor"].NewRow();
                    objDataRow[0] = video.Contributors[j].ContributorId;
                    objDataRow[1] = video.Contributors[j].RoleId;
                    objDataRow[2] = video.Contributors[j].Character;
                    objDataRow[3] = video.Contributors[j].SortOrder;
                    objDataRow[4] = video.Contributors[j].IsPrimary;
                    objDataRow[5] = video.Contributors[j].ContributorAliasId;
                    objDataRow[6] = video.Contributors[j].ContributorName;

                    Expected.Tables["MediaContributor"].Rows.Add(objDataRow);
                }
            }
            // Filling MediaLocales Data
            if (video.Locales != null)
            {
                for (int j = 0; j < video.Locales.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaLocale"].NewRow();
                    objDataRow[0] = video.Locales[j].Lcid;
                    objDataRow[1] = video.Locales[j].Title;
                    objDataRow[2] = video.Locales[j].TitleSort;
                    objDataRow[3] = video.Locales[j].ReducedTitle;
                    objDataRow[4] = video.Locales[j].Description;
                    objDataRow[5] = video.Locales[j].ReducedDescription;
                    objDataRow[6] = video.Locales[j].Copyright;

                    Expected.Tables["MediaLocale"].Rows.Add(objDataRow);
                    //Filling MediaLocaleMap Data
                    if (video.Locales[j].MappedLcids != null)
                    {
                        for (int k = 0; k < video.Locales[j].MappedLcids.Length; k++)
                        {
                            objDataRow = Expected.Tables["MediaLocaleMap"].NewRow();
                            objDataRow[0] = video.Locales[j].MappedLcids[k].Lcid;
                            Expected.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Relationships Data
            if (video.Relationships != null)
            {
                for (int j = 0; j < video.Relationships.Length; j++)
                {
                    objDataRow = Expected.Tables["mediaRelationship"].NewRow();
                    objDataRow[0] = video.Relationships[j].RelatedMediaId;
                    objDataRow[1] = video.Relationships[j].RelatedMediaTitle;
                    objDataRow[2] = video.Relationships[j].MediaRelationshipTypeId;
                    objDataRow[3] = video.Relationships[j].SortOrder;
                    objDataRow[4] = video.Relationships[j].Data;
                    Expected.Tables["mediaRelationship"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingValues Data
            if (video.RatingValues != null)
            {
                for (int j = 0; j < video.RatingValues.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingValue"].NewRow();
                    objDataRow[0] = video.RatingValues[j].RatingValueId;
                    Expected.Tables["ratingValue"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingDescriptors Data
            if (video.RatingDescriptors != null)
            {
                for (int j = 0; j < video.RatingDescriptors.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingDescriptor"].NewRow();
                    objDataRow[0] = video.RatingDescriptors[j].RatingDescriptorId;
                    objDataRow[1] = video.RatingDescriptors[j].Level;
                    Expected.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from VideoSeason object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetVideoSeason(VideoSeason videoSeason, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["VideoSeason"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(videoSeason, null);
                }
            }
            Expected.Tables["VideoSeason"].Rows.Add(objDataRow);

            if (videoSeason.Instances != null)
            {
                for (int j = 0; j < videoSeason.Instances.Length; j++)
                {
                    Type t = videoSeason.Instances[j].GetType();
                    if (t == typeof(VideoInstance))
                    {
                        objDataRow = Expected.Tables["VideoInstance"].NewRow();
                        objDataRow[0] = videoSeason.Id;
                        objDataRow[1] = videoSeason.Instances[j].Id;
                        objDataRow[2] = videoSeason.Instances[j].IsAcquirable;
                        objDataRow[3] = videoSeason.Instances[j].IsAdSupported;
                        objDataRow[4] = videoSeason.Instances[j].IsPreview;
                        if (videoSeason.Instances[j].Preview != null)
                        {
                            objDataRow[5] = videoSeason.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = videoSeason.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = videoSeason.Instances[j].Preview.StartDate;
                            objDataRow[8] = videoSeason.Instances[j].Preview.EndDate;
                            objDataRow[9] = videoSeason.Instances[j].Preview.CountryCode;
                            objDataRow[10] = videoSeason.Instances[j].Preview.ProviderId;
                            objDataRow[11] = videoSeason.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = videoSeason.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((VideoInstance)videoSeason.Instances[j]).IsDRM;
                        objDataRow[14] = ((VideoInstance)videoSeason.Instances[j]).AudioEncodingId;
                        objDataRow[15] = ((VideoInstance)videoSeason.Instances[j]).AudioChannel;
                        objDataRow[16] = ((VideoInstance)videoSeason.Instances[j]).AudioSamplingRate;
                        objDataRow[17] = ((VideoInstance)videoSeason.Instances[j]).AudioCC;
                        objDataRow[18] = ((VideoInstance)videoSeason.Instances[j]).BurntInSubtitleLcid;
                        objDataRow[19] = ((VideoInstance)videoSeason.Instances[j]).AudioBitRate;
                        objDataRow[20] = ((VideoInstance)videoSeason.Instances[j]).VideoDefinitionId;
                        objDataRow[21] = ((VideoInstance)videoSeason.Instances[j]).VideoAspectRatio;
                        objDataRow[22] = ((VideoInstance)videoSeason.Instances[j]).VideoResolution;
                        objDataRow[23] = ((VideoInstance)videoSeason.Instances[j]).VideoEncodingId;
                        objDataRow[24] = ((VideoInstance)videoSeason.Instances[j]).VideoBitRate;
                        objDataRow[25] = ((VideoInstance)videoSeason.Instances[j]).VideoFrame;
                        objDataRow[26] = ((VideoInstance)videoSeason.Instances[j]).Enabled;

                        Expected.Tables["VideoInstance"].Rows.Add(objDataRow);

                        // Filling VideoAudioTrackLanguages Data
                        for (int k = 0; k < ((VideoInstance)videoSeason.Instances[j]).AudioTrackLanguages.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoAudioTrackLanguage"].NewRow();
                            objDataRow[0] = ((VideoInstance)videoSeason.Instances[j]).AudioTrackLanguages[k].Lcid;
                            Expected.Tables["VideoAudioTrackLanguage"].Rows.Add(objDataRow);
                        }

                        // Filling VideoFiles Data
                        for (int k = 0; k < ((VideoInstance)videoSeason.Instances[j]).VideoFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoFile"].NewRow();
                            objDataRow[0] = ((VideoInstance)videoSeason.Instances[j]).VideoFiles[k].Id;
                            objDataRow[1] = ((VideoInstance)videoSeason.Instances[j]).VideoFiles[k].FileUrl;
                            objDataRow[2] = ((VideoInstance)videoSeason.Instances[j]).VideoFiles[k].Size;
                            objDataRow[3] = ((VideoInstance)videoSeason.Instances[j]).VideoFiles[k].Duration;
                            objDataRow[4] = ((VideoInstance)videoSeason.Instances[j]).VideoFiles[k].Index;
                            Expected.Tables["VideoFile"].Rows.Add(objDataRow);
                        }

                        // Filling VideoSubtitles Data
                        if (((VideoInstance)videoSeason.Instances[j]).Subtitles != null)
                        {
                            for (int k = 0; k < ((VideoInstance)videoSeason.Instances[j]).Subtitles.Length; k++)
                            {

                                objDataRow = Expected.Tables["VideoSubtitle"].NewRow();
                                objDataRow[0] = ((VideoInstance)videoSeason.Instances[j]).Subtitles[k].LanguageCode;
                                objDataRow[1] = ((VideoInstance)videoSeason.Instances[j]).Subtitles[k].FileUrl;
                                Expected.Tables["VideoSubtitle"].Rows.Add(objDataRow);
                            }
                        }
                    }

                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = Expected.Tables["MediaGameContentInstance"].NewRow();
                        objDataRow[0] = videoSeason.Id;
                        objDataRow[1] = videoSeason.Instances[j].Id;
                        objDataRow[2] = videoSeason.Instances[j].IsAcquirable;
                        objDataRow[3] = videoSeason.Instances[j].IsAdSupported;
                        objDataRow[4] = videoSeason.Instances[j].IsPreview;
                        if (videoSeason.Instances[j].Preview != null)
                        {
                            objDataRow[5] = videoSeason.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = videoSeason.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = videoSeason.Instances[j].Preview.StartDate;
                            objDataRow[8] = videoSeason.Instances[j].Preview.EndDate;
                            objDataRow[9] = videoSeason.Instances[j].Preview.CountryCode;
                            objDataRow[10] = videoSeason.Instances[j].Preview.ProviderId;
                            objDataRow[11] = videoSeason.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = videoSeason.Instances[j].Preview.DRMLicenseIssuerId;
                        }

                        objDataRow[13] = ((GameContentInstance)videoSeason.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)videoSeason.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)videoSeason.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)videoSeason.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)videoSeason.Instances[j]).LiveContentId;

                        Expected.Tables["MediaGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)videoSeason.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["GameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)videoSeason.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)videoSeason.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)videoSeason.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            Expected.Tables["GameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Articles Data
            if (videoSeason.Articles != null)
            {
                for (int j = 0; j < videoSeason.Articles.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaArticle"].NewRow();
                    objDataRow[0] = videoSeason.Articles[j].ArticleId;
                    objDataRow[1] = videoSeason.Articles[j].SortOrder;
                    Expected.Tables["MediaArticle"].Rows.Add(objDataRow);
                }
            }

            // Filling Categories Data
            if (videoSeason.Categories != null)
            {
                for (int j = 0; j < videoSeason.Categories.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaCategory"].NewRow();
                    objDataRow[0] = videoSeason.Categories[j].CategoryId;
                    Expected.Tables["MediaCategory"].Rows.Add(objDataRow);
                }
            }
            // Filling Contributors Data
            if (videoSeason.Contributors != null)
            {
                for (int j = 0; j < videoSeason.Contributors.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaContributor"].NewRow();
                    objDataRow[0] = videoSeason.Contributors[j].ContributorId;
                    objDataRow[1] = videoSeason.Contributors[j].RoleId;
                    objDataRow[2] = videoSeason.Contributors[j].Character;
                    objDataRow[3] = videoSeason.Contributors[j].SortOrder;
                    objDataRow[4] = videoSeason.Contributors[j].IsPrimary;
                    objDataRow[5] = videoSeason.Contributors[j].ContributorAliasId;
                    objDataRow[6] = videoSeason.Contributors[j].ContributorName;

                    Expected.Tables["MediaContributor"].Rows.Add(objDataRow);
                }
            }
            // Filling MediaLocales Data
            if (videoSeason.Locales != null)
            {
                for (int j = 0; j < videoSeason.Locales.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaLocale"].NewRow();
                    objDataRow[0] = videoSeason.Locales[j].Lcid;
                    objDataRow[1] = videoSeason.Locales[j].Title;
                    objDataRow[2] = videoSeason.Locales[j].TitleSort;
                    objDataRow[3] = videoSeason.Locales[j].ReducedTitle;
                    objDataRow[4] = videoSeason.Locales[j].Description;
                    objDataRow[5] = videoSeason.Locales[j].ReducedDescription;
                    objDataRow[6] = videoSeason.Locales[j].Copyright;

                    Expected.Tables["MediaLocale"].Rows.Add(objDataRow);
                    //Filling MediaLocaleMap Data
                    if (videoSeason.Locales[j].MappedLcids != null)
                    {
                        for (int k = 0; k < videoSeason.Locales[j].MappedLcids.Length; k++)
                        {
                            objDataRow = Expected.Tables["MediaLocaleMap"].NewRow();
                            objDataRow[0] = videoSeason.Locales[j].MappedLcids[k].Lcid;
                            Expected.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Relationships Data
            if (videoSeason.Relationships != null)
            {
                for (int j = 0; j < videoSeason.Relationships.Length; j++)
                {
                    objDataRow = Expected.Tables["mediaRelationship"].NewRow();
                    objDataRow[0] = videoSeason.Relationships[j].RelatedMediaId;
                    objDataRow[1] = videoSeason.Relationships[j].RelatedMediaTitle;
                    objDataRow[2] = videoSeason.Relationships[j].MediaRelationshipTypeId;
                    objDataRow[3] = videoSeason.Relationships[j].SortOrder;
                    objDataRow[4] = videoSeason.Relationships[j].Data;
                    Expected.Tables["mediaRelationship"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingValues Data
            if (videoSeason.RatingValues != null)
            {
                for (int j = 0; j < videoSeason.RatingValues.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingValue"].NewRow();
                    objDataRow[0] = videoSeason.RatingValues[j].RatingValueId;
                    Expected.Tables["ratingValue"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingDescriptors Data
            if (videoSeason.RatingDescriptors != null)
            {
                for (int j = 0; j < videoSeason.RatingDescriptors.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingDescriptor"].NewRow();
                    objDataRow[0] = videoSeason.RatingDescriptors[j].RatingDescriptorId;
                    objDataRow[1] = videoSeason.RatingDescriptors[j].Level;
                    Expected.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from VideoSeries object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetVideoSeries(VideoSeries videoSeries, ref DataSet Expected, Type type1)
        {
            PropertyInfo[] property = type1.GetProperties(BindingFlags.Public | BindingFlags.Instance);
            DataRow objDataRow;
            int i = 0;
            objDataRow = Expected.Tables["VideoSeries"].NewRow();
            foreach (PropertyInfo property1 in property)
            {
                if (property1.PropertyType.IsArray || property1.Name == "Modified" || property1.Name == "MediaTitle")
                    continue;
                else
                {
                    objDataRow[i++] = property1.GetValue(videoSeries, null);
                }
            }
            Expected.Tables["VideoSeries"].Rows.Add(objDataRow);

            if (videoSeries.Instances != null)
            {
                for (int j = 0; j < videoSeries.Instances.Length; j++)
                {
                    Type t = videoSeries.Instances[j].GetType();
                    if (t == typeof(VideoInstance))
                    {
                        objDataRow = Expected.Tables["VideoInstance"].NewRow();
                        objDataRow[0] = videoSeries.Id;
                        objDataRow[1] = videoSeries.Instances[j].Id;
                        objDataRow[2] = videoSeries.Instances[j].IsAcquirable;
                        objDataRow[3] = videoSeries.Instances[j].IsAdSupported;
                        objDataRow[4] = videoSeries.Instances[j].IsPreview;
                        if (videoSeries.Instances[j].Preview != null)
                        {
                            objDataRow[5] = videoSeries.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = videoSeries.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = videoSeries.Instances[j].Preview.StartDate;
                            objDataRow[8] = videoSeries.Instances[j].Preview.EndDate;
                            objDataRow[9] = videoSeries.Instances[j].Preview.CountryCode;
                            objDataRow[10] = videoSeries.Instances[j].Preview.ProviderId;
                            objDataRow[11] = videoSeries.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = videoSeries.Instances[j].Preview.DRMLicenseIssuerId;
                        }
                        objDataRow[13] = ((VideoInstance)videoSeries.Instances[j]).IsDRM;
                        objDataRow[14] = ((VideoInstance)videoSeries.Instances[j]).AudioEncodingId;
                        objDataRow[15] = ((VideoInstance)videoSeries.Instances[j]).AudioChannel;
                        objDataRow[16] = ((VideoInstance)videoSeries.Instances[j]).AudioSamplingRate;
                        objDataRow[17] = ((VideoInstance)videoSeries.Instances[j]).AudioCC;
                        objDataRow[18] = ((VideoInstance)videoSeries.Instances[j]).BurntInSubtitleLcid;
                        objDataRow[19] = ((VideoInstance)videoSeries.Instances[j]).AudioBitRate;
                        objDataRow[20] = ((VideoInstance)videoSeries.Instances[j]).VideoDefinitionId;
                        objDataRow[21] = ((VideoInstance)videoSeries.Instances[j]).VideoAspectRatio;
                        objDataRow[22] = ((VideoInstance)videoSeries.Instances[j]).VideoResolution;
                        objDataRow[23] = ((VideoInstance)videoSeries.Instances[j]).VideoEncodingId;
                        objDataRow[24] = ((VideoInstance)videoSeries.Instances[j]).VideoBitRate;
                        objDataRow[25] = ((VideoInstance)videoSeries.Instances[j]).VideoFrame;
                        objDataRow[26] = ((VideoInstance)videoSeries.Instances[j]).Enabled;

                        Expected.Tables["VideoInstance"].Rows.Add(objDataRow);

                        // Filling VideoAudioTrackLanguages Data
                        for (int k = 0; k < ((VideoInstance)videoSeries.Instances[j]).AudioTrackLanguages.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoAudioTrackLanguage"].NewRow();
                            objDataRow[0] = ((VideoInstance)videoSeries.Instances[j]).AudioTrackLanguages[k].Lcid;
                            Expected.Tables["VideoAudioTrackLanguage"].Rows.Add(objDataRow);
                        }

                        // Filling VideoFiles Data
                        for (int k = 0; k < ((VideoInstance)videoSeries.Instances[j]).VideoFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["VideoFile"].NewRow();
                            objDataRow[0] = ((VideoInstance)videoSeries.Instances[j]).VideoFiles[k].Id;
                            objDataRow[1] = ((VideoInstance)videoSeries.Instances[j]).VideoFiles[k].FileUrl;
                            objDataRow[2] = ((VideoInstance)videoSeries.Instances[j]).VideoFiles[k].Size;
                            objDataRow[3] = ((VideoInstance)videoSeries.Instances[j]).VideoFiles[k].Duration;
                            objDataRow[4] = ((VideoInstance)videoSeries.Instances[j]).VideoFiles[k].Index;
                            Expected.Tables["VideoFile"].Rows.Add(objDataRow);
                        }

                        // Filling VideoSubtitles Data
                        if (((VideoInstance)videoSeries.Instances[j]).Subtitles != null)
                        {
                            for (int k = 0; k < ((VideoInstance)videoSeries.Instances[j]).Subtitles.Length; k++)
                            {

                                objDataRow = Expected.Tables["VideoSubtitle"].NewRow();
                                objDataRow[0] = ((VideoInstance)videoSeries.Instances[j]).Subtitles[k].LanguageCode;
                                objDataRow[1] = ((VideoInstance)videoSeries.Instances[j]).Subtitles[k].FileUrl;
                                Expected.Tables["VideoSubtitle"].Rows.Add(objDataRow);
                            }
                        }
                    }

                    if (t == typeof(GameContentInstance))
                    {
                        objDataRow = Expected.Tables["MediaGameContentInstance"].NewRow();
                        objDataRow[0] = videoSeries.Id;
                        objDataRow[1] = videoSeries.Instances[j].Id;
                        objDataRow[2] = videoSeries.Instances[j].IsAcquirable;
                        objDataRow[3] = videoSeries.Instances[j].IsAdSupported;
                        objDataRow[4] = videoSeries.Instances[j].IsPreview;
                        if (videoSeries.Instances[j].Preview != null)
                        {
                            objDataRow[5] = videoSeries.Instances[j].Preview.PreviewMediaInstanceTypeId;
                            objDataRow[6] = videoSeries.Instances[j].Preview.RequiredUserTypeId;
                            objDataRow[7] = videoSeries.Instances[j].Preview.StartDate;
                            objDataRow[8] = videoSeries.Instances[j].Preview.EndDate;
                            objDataRow[9] = videoSeries.Instances[j].Preview.CountryCode;
                            objDataRow[10] = videoSeries.Instances[j].Preview.ProviderId;
                            objDataRow[11] = videoSeries.Instances[j].Preview.LicenserContentId;
                            objDataRow[12] = videoSeries.Instances[j].Preview.DRMLicenseIssuerId;
                        }

                        objDataRow[13] = ((GameContentInstance)videoSeries.Instances[j]).InstallSize;
                        objDataRow[14] = ((GameContentInstance)videoSeries.Instances[j]).PackageSize;
                        //objDataRow[15] = ((GameContentInstance)videoSeries.Instances[j]).EncryptedSymKey;
                        //objDataRow[16] = ((GameContentInstance)videoSeries.Instances[j]).EncryptedPublicKey;
                        objDataRow[15] = ((GameContentInstance)videoSeries.Instances[j]).LiveContentId;

                        Expected.Tables["MediaGameContentInstance"].Rows.Add(objDataRow);

                        // Filling GameContentInstanceFiles Data
                        for (int k = 0; k < ((GameContentInstance)videoSeries.Instances[j]).GameContentInstanceFiles.Length; k++)
                        {
                            objDataRow = Expected.Tables["GameContentInstanceFile"].NewRow();
                            objDataRow[0] = ((GameContentInstance)videoSeries.Instances[j]).GameContentInstanceFiles[k].Id;
                            objDataRow[1] = ((GameContentInstance)videoSeries.Instances[j]).GameContentInstanceFiles[k].FileUrl;
                            objDataRow[2] = ((GameContentInstance)videoSeries.Instances[j]).GameContentInstanceFiles[k].SortOrder;
                            Expected.Tables["GameContentInstanceFile"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Articles Data
            if (videoSeries.Articles != null)
            {
                for (int j = 0; j < videoSeries.Articles.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaArticle"].NewRow();
                    objDataRow[0] = videoSeries.Articles[j].ArticleId;
                    objDataRow[1] = videoSeries.Articles[j].SortOrder;
                    Expected.Tables["MediaArticle"].Rows.Add(objDataRow);
                }
            }

            // Filling Categories Data
            if (videoSeries.Categories != null)
            {
                for (int j = 0; j < videoSeries.Categories.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaCategory"].NewRow();
                    objDataRow[0] = videoSeries.Categories[j].CategoryId;
                    Expected.Tables["MediaCategory"].Rows.Add(objDataRow);
                }
            }
            // Filling Contributors Data
            if (videoSeries.Contributors != null)
            {
                for (int j = 0; j < videoSeries.Contributors.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaContributor"].NewRow();
                    objDataRow[0] = videoSeries.Contributors[j].ContributorId;
                    objDataRow[1] = videoSeries.Contributors[j].RoleId;
                    objDataRow[2] = videoSeries.Contributors[j].Character;
                    objDataRow[3] = videoSeries.Contributors[j].SortOrder;
                    objDataRow[4] = videoSeries.Contributors[j].IsPrimary;
                    objDataRow[5] = videoSeries.Contributors[j].ContributorAliasId;
                    objDataRow[6] = videoSeries.Contributors[j].ContributorName;

                    Expected.Tables["MediaContributor"].Rows.Add(objDataRow);
                }
            }
            // Filling MediaLocales Data
            if (videoSeries.Locales != null)
            {
                for (int j = 0; j < videoSeries.Locales.Length; j++)
                {
                    objDataRow = Expected.Tables["MediaLocale"].NewRow();
                    objDataRow[0] = videoSeries.Locales[j].Lcid;
                    objDataRow[1] = videoSeries.Locales[j].Title;
                    objDataRow[2] = videoSeries.Locales[j].TitleSort;
                    objDataRow[3] = videoSeries.Locales[j].ReducedTitle;
                    objDataRow[4] = videoSeries.Locales[j].Description;
                    objDataRow[5] = videoSeries.Locales[j].ReducedDescription;
                    objDataRow[6] = videoSeries.Locales[j].Copyright;

                    Expected.Tables["MediaLocale"].Rows.Add(objDataRow);
                    //Filling MediaLocaleMap Data
                    if (videoSeries.Locales[j].MappedLcids != null)
                    {
                        for (int k = 0; k < videoSeries.Locales[j].MappedLcids.Length; k++)
                        {
                            objDataRow = Expected.Tables["MediaLocaleMap"].NewRow();
                            objDataRow[0] = videoSeries.Locales[j].MappedLcids[k].Lcid;
                            Expected.Tables["MediaLocaleMap"].Rows.Add(objDataRow);
                        }
                    }
                }
            }
            // Filling Relationships Data
            if (videoSeries.Relationships != null)
            {
                for (int j = 0; j < videoSeries.Relationships.Length; j++)
                {
                    objDataRow = Expected.Tables["mediaRelationship"].NewRow();
                    objDataRow[0] = videoSeries.Relationships[j].RelatedMediaId;
                    objDataRow[1] = videoSeries.Relationships[j].RelatedMediaTitle;
                    objDataRow[2] = videoSeries.Relationships[j].MediaRelationshipTypeId;
                    objDataRow[3] = videoSeries.Relationships[j].SortOrder;
                    objDataRow[4] = videoSeries.Relationships[j].Data;
                    Expected.Tables["mediaRelationship"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingValues Data
            if (videoSeries.RatingValues != null)
            {
                for (int j = 0; j < videoSeries.RatingValues.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingValue"].NewRow();
                    objDataRow[0] = videoSeries.RatingValues[j].RatingValueId;
                    Expected.Tables["ratingValue"].Rows.Add(objDataRow);
                }
            }
            // Filling RatingDescriptors Data
            if (videoSeries.RatingDescriptors != null)
            {
                for (int j = 0; j < videoSeries.RatingDescriptors.Length; j++)
                {
                    objDataRow = Expected.Tables["ratingDescriptor"].NewRow();
                    objDataRow[0] = videoSeries.RatingDescriptors[j].RatingDescriptorId;
                    objDataRow[1] = videoSeries.RatingDescriptors[j].Level;
                    Expected.Tables["ratingDescriptor"].Rows.Add(objDataRow);
                }
            }
        }

        /// <summary>
        /// Fetching the expected data from Offer object into a dataset.
        /// </summary>  
        public static void ExpectedDataSetOffer(Offer offer, ref DataSet Expected, Type type1)
        {
            DataRow objDataRow;
            if (offer != null)
            {
                objDataRow = Expected.Tables["Offer"].NewRow();
                objDataRow[0] = offer.Id;
                objDataRow[1] = offer.MediaId;
                objDataRow[2] = offer.Name;
                Expected.Tables["Offer"].Rows.Add(objDataRow);

                //Filling Offer Stores Data
                if (offer.Stores != null)
                {
                    for (int i = 0; i < offer.Stores.Length; i++)
                    {
                        objDataRow = Expected.Tables["OfferStore"].NewRow();
                        objDataRow[0] = offer.Stores[i].StoreId;
                        Expected.Tables["OfferStore"].Rows.Add(objDataRow);
                    }
                }

                //Filling OfferInstances Data
                if (offer.Instances != null)
                {
                    for (int i = 0; i < offer.Instances.Length; i++)
                    {
                        objDataRow = Expected.Tables["OfferInstance"].NewRow();
                        objDataRow[0] = offer.Instances[i].Id;
                        objDataRow[1] = offer.Id;
                        objDataRow[2] = offer.Instances[i].Sku;
                        objDataRow[3] = offer.Instances[i].PricingRuleId;
                        objDataRow[4] = offer.Instances[i].Price;
                        objDataRow[5] = offer.Instances[i].ReportingRetailValue;
                        objDataRow[7] = offer.Instances[i].StartDateTime;
                        objDataRow[8] = offer.Instances[i].EndDateTime;
                        objDataRow[9] = offer.Instances[i].CountryCode;
                        objDataRow[10] = offer.Instances[i].VisibilityLevelId;
                        objDataRow[11] = offer.Instances[i].VisibilityStatusId;
                        objDataRow[12] = offer.Instances[i].PaymentTypeId;
                        objDataRow[14] = offer.Instances[i].ExternalOfferInstanceId;
                        Expected.Tables["OfferInstance"].Rows.Add(objDataRow);

                        //Filling OfferInstanceUserType Data
                        if (offer.Instances[i].UserTypes != null)
                        {
                            for (int j = 0; j < offer.Instances[i].UserTypes.Length; j++)
                            {
                                objDataRow = Expected.Tables["OfferInstanceUserType"].NewRow();
                                objDataRow[0] = offer.Instances[i].UserTypes[j].UserTypeId;
                                Expected.Tables["OfferInstanceUserType"].Rows.Add(objDataRow);
                            }
                        }
                        //Filling OfferPromotion Data
                        if (offer.Instances[i].Promotions != null)
                        {
                            for (int j = 0; j < offer.Instances[i].Promotions.Length; j++)
                            {
                                objDataRow = Expected.Tables["OfferPromotion"].NewRow();
                                objDataRow[0] = offer.Instances[i].Promotions[j].Id;
                                objDataRow[1] = offer.Instances[i].Promotions[j].Name;
                                objDataRow[2] = offer.Instances[i].Promotions[j].StartDateTime;
                                objDataRow[3] = offer.Instances[i].Promotions[j].EndDateTime;
                                objDataRow[4] = offer.Instances[i].Promotions[j].Price;
                                objDataRow[5] = offer.Instances[i].Promotions[j].ReportingRetailValue;
                                objDataRow[6] = offer.Instances[i].Promotions[j].Priority;
                                objDataRow[7] = offer.Instances[i].Promotions[j].PromotionalWholesalePrice;
                                Expected.Tables["OfferPromotion"].Rows.Add(objDataRow);
                            }
                        }
                        //Filling OfferProviderTerm Data
                        if (offer.Instances[i].ProviderTerms != null)
                        {
                            for (int j = 0; j < offer.Instances[i].ProviderTerms.Length; j++)
                            {
                                objDataRow = Expected.Tables["OfferProviderTerm"].NewRow();
                                objDataRow[0] = offer.Instances[i].ProviderTerms[j].Id;
                                objDataRow[1] = offer.Instances[i].ProviderTerms[j].MediaId;
                                objDataRow[2] = offer.Instances[i].ProviderTerms[j].WholesalePrice;
                                objDataRow[4] = offer.Instances[i].ProviderTerms[j].StartDateTime;
                                objDataRow[5] = offer.Instances[i].ProviderTerms[j].EndDateTime;
                                objDataRow[6] = offer.Instances[i].ProviderTerms[j].CountryCode;
                                objDataRow[7] = offer.Instances[i].ProviderTerms[j].ProviderId;
                                objDataRow[8] = offer.Instances[i].ProviderTerms[j].ExternalProviderContentId;
                                objDataRow[9] = offer.Instances[i].ProviderTerms[j].DRMLicenseIssuerId;
                                objDataRow[10] = offer.Instances[i].ProviderTerms[j].ExternalDRMLicenseIssuerContentId;
                                objDataRow[11] = offer.Instances[i].ProviderTerms[j].AutomaticallyGenerateOffer;
                                objDataRow[12] = offer.Instances[i].ProviderTerms[j].ModifiedBy;
                                Expected.Tables["OfferProviderTerm"].Rows.Add(objDataRow);

                                if (offer.Instances[i].ProviderTerms[j].MediaInstances != null)
                                {
                                    //Filling OfferProviderTermMediaInstance Data
                                    for (int k = 0; k < offer.Instances[i].ProviderTerms[j].MediaInstances.Length; k++)
                                    {
                                        objDataRow = Expected.Tables["OfferProviderTermMediaInstance"].NewRow();
                                        objDataRow[0] = offer.Instances[i].ProviderTerms[j].Id;
                                        objDataRow[1] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].MediaInstanceId;
                                        objDataRow[2] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].LicenseTypeId;
                                        if (offer.Instances[i].ProviderTerms[j].MediaInstances[k].ExpirationDate != null)
                                            objDataRow[3] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].ExpirationDate;
                                        Expected.Tables["OfferProviderTermMediaInstance"].Rows.Add(objDataRow);

                                        if (offer.Instances[i].ProviderTerms[j].MediaInstances[k].ClientTypes != null)
                                        {
                                            //Filling OfferProviderTermMediaInstanceClientType Data
                                            for (int l = 0; l < offer.Instances[i].ProviderTerms[j].MediaInstances[k].ClientTypes.Length; l++)
                                            {
                                                objDataRow = Expected.Tables["OfferProviderTermMediaInstanceClientType"].NewRow();
                                                objDataRow[0] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].ClientTypes[l].ClientTypeId;
                                                Expected.Tables["OfferProviderTermMediaInstanceClientType"].Rows.Add(objDataRow);
                                            }
                                        }

                                        if (offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentInstances != null)
                                        {
                                            //Filling OfferProviderTermGameContentInstance Data
                                            for (int l = 0; l < offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentInstances.Length; l++)
                                            {
                                                objDataRow = Expected.Tables["OfferProviderTermGameContentInstance"].NewRow();
                                                objDataRow[0] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentInstances[l].LicenseExtensionBits;
                                                Expected.Tables["OfferProviderTermGameContentInstance"].Rows.Add(objDataRow);
                                            }
                                        }
                                        if (offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentAssetInstances != null)
                                        {
                                            //Filling OfferProviderTermGameContentInstanceAsset Data
                                            for (int l = 0; l < offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentAssetInstances.Length; l++)
                                            {
                                                objDataRow = Expected.Tables["OfferProviderTermGameContentInstanceAsset"].NewRow();
                                                objDataRow[0] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentAssetInstances[l].AssetId;
                                                objDataRow[1] = offer.Instances[i].ProviderTerms[j].MediaInstances[k].GameContentAssetInstances[l].Quantity;
                                                Expected.Tables["OfferProviderTermGameContentInstanceAsset"].Rows.Add(objDataRow);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Compare the Database Output and the data passed to Save API of Web Service.
        /// </summary> 
        /// <param name="Actual">Database Output Dataset.</param>
        /// <param name="Expected">Dataset containing data passed to Save API.</param>

        public static void CompareDataset(DataSet Actual, DataSet Expected)
        {
            string strDiffList = string.Empty;

            if (Actual.Tables.Count != Expected.Tables.Count)
            {
                throw new System.Data.DataException("Both the datasets are not same");
            }

            for (int intTables = 0; intTables < Actual.Tables.Count; intTables++)
            {
                if (Actual.Tables[intTables].Columns.Count != Expected.Tables[intTables].Columns.Count)
                {
                    throw new System.Data.DataException("Structure of the datsets are not same");
                }
                if (Actual.Tables[intTables].Rows.Count == 0 && Expected.Tables[intTables].Rows.Count != 0)
                {
                    throw new System.Data.DataException(String.Format("Expected data is not being saved as database returns no data from the table:- {0}", Actual.Tables[intTables].TableName));
                }
                if (Actual.Tables[intTables].Rows.Count != 0 && Expected.Tables[intTables].Rows.Count == 0)
                {
                    throw new System.Data.DataException(String.Format("Database has returned some value but expected data is null for the table :- {0}", Actual.Tables[intTables].TableName));
                }
                if (Actual.Tables[intTables].Rows.Count != Expected.Tables[intTables].Rows.Count)
                {
                    throw new System.Data.DataException(String.Format("Expected number of rows of data is not same as Actual Data for the table :- {0}", Actual.Tables[intTables].TableName));
                }

                for (int intRows = 0; intRows < Actual.Tables[intTables].Rows.Count; intRows++)
                {
                    for (int intcolumn = 0; intcolumn < Actual.Tables[intTables].Columns.Count; intcolumn++)
                    {
                        object actual = Actual.Tables[intTables].Rows[intRows][intcolumn];
                        object expected = Expected.Tables[intTables].Rows[intRows][intcolumn];
                        Type Objecttype = actual.GetType();

                        if ((Convert.IsDBNull(actual)) && Convert.IsDBNull(expected))
                        {
                            Trace.Write("Skipping comparison as both values are null");
                            continue;
                        }

                        if ((Convert.IsDBNull(actual)))
                        {
                            if (expected.GetType() == typeof(String) && ((String)expected == String.Empty || (String)expected == "(None)"))
                            {
                                Trace.WriteLine(String.Format("Skiping the Comparison of string.Empty  to a null value returned from the database. "));
                                continue;
                            }
                            else if (Convert.ToInt32(expected) == -1 || Convert.ToInt32(expected) == 0)
                            {
                                Trace.WriteLine(String.Format("Skipping comparison as expected value is {0} but actual value is null", expected));
                                continue;
                            }
                        }
                        else if (Actual.Tables[intTables].Columns[intcolumn].ColumnName.Contains("XML") || Actual.Tables[intTables].Rows[intRows][intcolumn].GetType() == typeof(System.Data.SqlTypes.SqlXml))
                        {
                            DoXmlComparison(ref expected, ref actual);
                        }
                        if ((actual == null && expected != null) || (actual != null && expected == null) || !expected.Equals(actual))
                        {
                            throw new System.Data.DataException(String.Format("Actual Value is different from Expected value for the column :- {0} Expected :- {1} and Actual From DB is :- {2}", Actual.Tables[intTables].Columns[intcolumn].ColumnName, expected, actual));
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Compare the Web Service Output and the Database Output for Search API.
        /// </summary> 
        public static void CompareWithDatabase2(Type returnType, object result, string query, string tableName)
        {
            Trace.WriteLine("+ Utilities.CompareWithDatabase()");
            Trace.WriteLine(String.Format("CompareWithDatabase: Comparing items in '{0}' with rows in table '{1}'", result, returnType.Name));

            try
            {
                bool isArray = false;
                if (null != (result as System.Array))
                {
                    isArray = true;
                    Trace.WriteLine(String.Format("The returned value is an array that contains {0} items to be checked against the database.", (result as Array).Length));
                }

                SqlCommand command = connection.CreateCommand();
                command.CommandText = query;
                Trace.WriteLine(String.Format("SQL query is: '{0}'", query));

                PropertyInfo[] returnedProperties = returnType.GetProperties(BindingFlags.Public | BindingFlags.Instance);

                using (SqlDataReader baseline = command.ExecuteReader())
                {
                    if (result is Array)
                    {
                        CheckArrayLengthAgainstRowCount(result, null, baseline);
                    }
                    else if (result == null && baseline.HasRows)
                    {
                        throw new System.Data.DataException("No object was returned from the web method, but the database table contains a record for the specified id.");
                    }
                    else if (result != null && !baseline.HasRows)
                    {
                        throw new System.Data.DataException("An object was returned from the web method, but the database table does not contain a record for the object with this id.");
                    }

                    try
                    {
                        ComparePropertyValuesToDatabaseColumns(returnType, result, isArray, tableName, returnedProperties, baseline);

                    }
                    finally
                    {
                        baseline.Close();
                    }
                }
            }
            finally
            {
                Trace.WriteLine("- Utilities.CompareWithDatabase()");
            }
        }

        /// <summary>
        /// Building the query for GameOfferSearch.
        /// </summary> 
        public static string QueryBuilderGameOfferSearch(int maxRows, string Title)
        {
            string finalTitle = Title;
   
            string query = String.Format("SELECT DISTINCT TOP {0} O.offerId, M.mediaTypeId, PTMICT.clientTypeId, O.name AS offerTitle, ML.title AS mediaTitle FROM Offer O JOIN Media M ON O.mediaId = M.mediaID JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI ON M.mediaId = MI.mediaId JOIN ProviderTermMediaInstanceClientType PTMICT ON MI.mediaInstanceId = PTMICT.mediaInstanceId", maxRows);
            string where = " ";

            if (finalTitle != null && finalTitle.Length > 0)
            {
                if (finalTitle.Contains("'"))
                {
                    finalTitle = Title.Substring(0, Title.IndexOf("'")) + "'" + Title.Substring(Title.IndexOf("'"), Title.Length - Title.IndexOf("'"));
                }
                where = String.Format(" WHERE O.[name] LIKE '%{0}%'", finalTitle);
            }
            query = query + where;
            return query;
        }

        /// <summary>
        /// Building the query for GamePublisherSearch.
        /// </summary> 
        public static string QueryBuilderGamePublisherSearch(int maxRows, string Id, bool isNew)
        {
            string query = null;
            int publisherId = 0;
            if (Id != null && !isNew)
            {
                query = String.Format("SELECT catalogId FROM ExternalFeedmapping WHERE externalId = RIGHT('{0}',4)AND externalFeedSourceId = 1  AND externalFeedMappingObjectId = 1 ", Id);
                string countquery = String.Format("SELECT count(catalogId) FROM ExternalFeedmapping WHERE externalId = RIGHT('{0}',4)AND externalFeedSourceId = 1  AND externalFeedMappingObjectId = 1 ", Id);

                Array reader = GetRandomRow(query, countquery);
                publisherId = (int)reader.GetValue(0);
            }

            query = String.Format("SELECT DISTINCT TOP {0} G.liveTitleId AS decimalTitleId, PTMICT.clientTypeId, ML.title as mediaTitle FROM Game G JOIN Media M ON G.gameMediaId = M.mediaId JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI on MI.mediaId = M.mediaId LEFT JOIN ProviderTermMediaInstanceClientType PTMICT ON PTMICT.mediaInstanceId = MI.mediaInstanceId", maxRows);
            string where = " ";

            if (publisherId != 0 && Id != null)
            {
                where = String.Format(" WHERE M.metadataProviderId = {0}", publisherId);
            }
            query = query + where;
            return query;
        }

        /// <summary>
        /// Building the query for GameTitleSearch.
        /// </summary> 
        public static string QueryBuilderGameTitleSearch(int maxRows, string Title, int lcid)
        {
            string finalTitle = Title;
            string query = String.Format("SELECT DISTINCT TOP {0} G.gameMediaId, PTMICT.clientTypeId, ML.title as mediaTitle FROM Game G JOIN Media M ON G.gameMediaId = M.mediaId JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId AND MLM.lcid = {1} JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI on MI.mediaId = M.mediaId LEFT JOIN ProviderTermMediaInstanceClientType PTMICT ON PTMICT.mediaInstanceId = MI.mediaInstanceId", maxRows, lcid);
            string where = " ";

            if (finalTitle != null && finalTitle.Length > 0)
            {
                if (finalTitle.Contains("'"))
                {
                    finalTitle = Title.Substring(0, Title.IndexOf("'")) + "'" + Title.Substring(Title.IndexOf("'"), Title.Length - Title.IndexOf("'"));
                }
                where = String.Format(" WHERE ML.title LIKE '%{0}%'", finalTitle);
            }
            query = query + where;
            return query;
        }
        public static string GetString(StringType type, string column, int length, string table, string input)
        {
            string selectQuery = null;
            string whereQuery = null;
            string query = null;
            switch (type)
            {
                case StringType.New:
                    {
                        string newString = RandomStringGenerator.GetString(length, false, false, false, null);
                        query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        int retries = 5;

                        while (ExecuteQueryScalar(query) != null)
                        {
                            if (retries-- == 0)
                                throw new System.Data.DataException("Unable to find a new unique value.");

                            Trace.WriteLine(String.Format("RandomStringGenerator generated a string ('{0}') that already exists in the specified database table.  Retrying.", newString));

                            newString = RandomStringGenerator.GetString(length, false, false, false, null);
                            query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        }

                        return newString;
                    }
                case StringType.Null:
                    return null;

                case StringType.ExistingFirst:
                    selectQuery = String.Format("ISNULL(left({0},10),'none')", column);
                    whereQuery = String.Format("where len({0}) > 20", column);
                    break;

                case StringType.ExistingMiddle:
                    selectQuery = String.Format("ISNULL(substring({0},5,10),'none')", column);
                    whereQuery = String.Format("where len({0}) > 20", column);
                    break;
                case StringType.ExistingLast:
                    selectQuery = String.Format("ISNULL(right({0},10),'none')", column);
                    whereQuery = String.Format("where len({0}) > 20", column);
                    break;

                case StringType.ExistingFull:
                    selectQuery = String.Format("ISNULL({0},'none')", column);
                    break;
            }

            return GetExistingValue<string>(selectQuery, whereQuery, input);
        }
        public static string GetExternalId(FindType type, string column, string table, string input, int length)
        {
            string query = null;
            switch (type)
            {
                case FindType.Existing:
                    return GetExistingValue<string>(column, null, input);

                case FindType.New:
                    {
                        string newString = RandomStringGenerator.GetString(length, false, false, false, null);
                        query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        int retries = 5;

                        while (ExecuteQueryScalar(query) != null)
                        {
                            if (retries-- == 0)
                                throw new System.Data.DataException("Unable to find a new unique value.");

                            Trace.WriteLine(String.Format("RandomStringGenerator generated a string ('{0}') that already exists in the specified database table.  Retrying.", newString));

                            newString = RandomStringGenerator.GetString(length, false, false, false, null);
                            query = String.Format("SELECT TOP 1 {0} FROM {1} WHERE {2}='{3}'", column, table, column, newString);
                        }

                        return newString;
                    }
                case FindType.Null:
                    return null;
            }
            throw new ArgumentException("Unsupported IdType " + type.ToString());
        }

        public static int GetRows(MaxRows maxRows)
        {
            switch (maxRows)
            {
                case MaxRows.Length0:
                    return 0;
                case MaxRows.Length1:
                    return 1;
                case MaxRows.Length250:
                    return 250;
                case MaxRows.Length251:
                    return 251;
                case MaxRows.Length500:
                    return 500;
            }
            throw new ArgumentException("Unsupported Type " + maxRows.ToString());
        }

        private static T GetExistingValue<T>(string selectQuery, string whereQuery, string input)
        {
            string query = null;
            string countQuery = null;
            switch (input)
            {
                case "GameOfferSearch":
                    query = String.Format("Select {0} from Offer O JOIN Media M ON O.mediaId = M.mediaID JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI ON M.mediaId = MI.mediaId JOIN ProviderTermMediaInstanceClientType PTMICT ON MI.mediaInstanceId = PTMICT.mediaInstanceId {1}", selectQuery, whereQuery);
                    countQuery = String.Format("Select count({0}) from Offer O JOIN Media M ON O.mediaId = M.mediaID JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId AND MLM.lcid = 1033 JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI ON M.mediaId = MI.mediaId JOIN ProviderTermMediaInstanceClientType PTMICT ON MI.mediaInstanceId = PTMICT.mediaInstanceId {1}", selectQuery, whereQuery);
                    break;

                case "GameTitleSearch":
                    query = String.Format("SELECT {0} FROM Game G JOIN Media M ON G.gameMediaId = M.mediaId JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI on MI.mediaId = M.mediaId LEFT JOIN ProviderTermMediaInstanceClientType PTMICT ON PTMICT.mediaInstanceId = MI.mediaInstanceId {1}", selectQuery, whereQuery);
                    countQuery = String.Format("SELECT count({0})FROM Game G JOIN Media M ON G.gameMediaId = M.mediaId JOIN MediaLocaleMap MLM ON M.mediaId = MLM.mediaId JOIN MediaLocale ML ON M.mediaId = ML.mediaId AND ML.lcid = MLM.lcidMap LEFT JOIN MediaInstance MI on MI.mediaId = M.mediaId LEFT JOIN ProviderTermMediaInstanceClientType PTMICT ON PTMICT.mediaInstanceId = MI.mediaInstanceId {1}", selectQuery, whereQuery);
                    break;

                case "GamePublisherSearch":
                    query = String.Format("select {0} from dbo.ExternalFeedMapping where externalFeedSourceId = 1 AND externalFeedMappingObjectId = 1 {1}", selectQuery, whereQuery);
                    countQuery = String.Format("select count({0}) from dbo.ExternalFeedMapping where externalFeedSourceId = 1 AND externalFeedMappingObjectId = 1", selectQuery, whereQuery);
                    break;
            }

            Array reader = GetRandomRow(query, countQuery);
            Type t = reader.GetValue(0).GetType();
            return (T)reader.GetValue(0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\IDocumentResult.cs ===
using System;

namespace xonline.server.marketplace.test
{

    public interface IDocumentResult
    {
        String Id { get; }
        String Document { get;}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\PositiveCaseModel.cs ===
using System;
using System.Collections.Generic;
using System.Text;

using Microsoft.SpecExplorer.Runtime;
using Microsoft.SpecExplorer.Runtime.Infrastructure;
using System.Reflection;
using Microsoft.SpecExplorer;

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Protocols.TestTools;

[assembly:
	LoadAssembly(typeof(Adapter.CatalogWebServiceAdapter)),
	LoadAssembly(typeof(InputTypes.ChangeType)),
	LoadAssembly(typeof(InputTypes.IdType)),
	LoadAssembly(typeof(InputTypes.StringType)),
	LoadAssembly(typeof(ReturnTypes.ExceptionType)),
	LoadAssembly(typeof(InputTypes.ItemTypeId)),
	LoadAssembly(typeof(InputTypes.DateTimeType)),
	LoadAssembly(typeof(InputTypes.ArrayType)),
]

namespace GeneratedTests
{
	[TestClass]
	public partial class PositiveCaseModel : SpecExplorerTestClass
	{

		#region Variables            
		#endregion
		
		#region Adapters
		private static Adapter.CatalogWebServiceAdapter catalogwebserviceadapterInstance;
		#endregion
		
		bool finished;
		bool failed;
		bool nonAcceptingEnd;
		bool firstTime; // The flag for checking if it is the first initialization
        static bool needResetManager = false; // The flag for checking if need to reset the manager.
   
		public PositiveCaseModel() :
			base(
				new string[] { "S0", "S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10", "S11", "S12", "S13", "S14", "S15", "S16", "S17", "S18", "S19", "S20", "S21", "S22", "S23", "S24", "S25", "S26", "S27", "S28", "S29", "S30", "S31", "S32", "S33", "S34", "S35", "S36", "S37", "S38", "S39", "S40", "S41", "S42", "S43", "S44", "S45", "S46", "S47", "S48", "S49", "S50", "S51", "S52", "S53", "S54", "S55", "S56", "S57", "S58", "S59", "S60", "S61", "S62", "S63", "S64", "S65", "S66", "S67", "S68", "S69", "S70", "S71", "S72", "S73", "S74", "S75", "S76", "S77", "S78", "S79", "S80", "S81", "S82", "S83", "S84", "S85", "S86", "S87", "S88", "S89", "S90", "S91", "S92", "S93", "S94", "S95", "S96", "S97", "S98", "S99", "S100", "S101", "S102", "S103", "S104", "S105", "S106", "S107", "S108", "S109", "S110", "S111", "S112", "S113", "S114", "S115", "S116", "S117", "S118", "S119", "S120", "S121", "S122", "S123", "S124", "S125", "S126", "S127", "S128", "S129", "S130", "S131", "S132", "S133", "S134", "S135", "S136", "S137", "S138", "S139", "S140", "S141", "S142", "S143", "S144", "S145", "S146", "S147", "S148", "S149", "S150", "S151", "S152", "S153", "S154", "S155", "S156", "S157", "S158", "S159", "S160", "S161", "S162", "S163", "S164", "S165", "S166", "S167", "S168", "S169", "S170", "S171", "S172", "S173", "S174", "S175", "S176", "S177", "S178", "S179", "S180", "S181", "S182", "S183", "S184", "S185", "S186", "S187", "S188", "S189", "S190", "S191", "S192", "S193", "S194", "S195", "S196", "S197", "S198", "S199", "S200", "S201", "S202", "S203", "S204", "S205", "S206", "S207", "S208", "S209", "S210", "S211", "S212", "S213", "S214", "S215", "S216", "S217", "S218", "S219", "S220", "S221", "S222", "S223", "S224", "S225", "S226", "S227", "S228", "S229", "S230", "S231", "S232", "S233", "S234", "S235", "S236", "S237", "S238", "S239", "S240", "S241", "S242", "S243", "S244", "S245", "S246", "S247", "S248", "S249", "S250", "S251", "S252", "S253", "S254", "S255", "S256" },
				new int[] { 0 }
			)
		{
			QuiescenceTimeout = TimeSpan.FromMilliseconds(5000);
			ProceedControlTimeout = TimeSpan.FromMilliseconds(20);
			firstTime = true;
		}
	

		static ITestManager NewManager(ITestSite testSite)
		{
			ITestManager newManager = new StandaloneTestManager(testSite);
			newManager.ReRuns = 1;
			newManager.DepthBound = 5;
			return newManager;	
		}       
	
        #region Initializing methods
	    
        [ClassInitialize()]
        public static void InitializeBeforeAllTests(TestContext context)
        {
            // Create the test site instance.
            TestClassBase.Initialize(context);
            ITestSite testSite = TestClassBase.BaseTestSite;

            // Initialize adapters
            testSite.Log.Add(LogEntryKind.Debug, "Found {0} adapter(s).", 1);
			             
            testSite.Log.Add(LogEntryKind.Debug, "Initializing adapter: {0}", "Adapter.CatalogWebServiceAdapter");
            catalogwebserviceadapterInstance= testSite.GetAdapter<Adapter.CatalogWebServiceAdapter>();
            

            testSite.Log.Add(LogEntryKind.Debug, "Initializing the test manager.");
            
            // Loads necessary assemblies. 
            Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(LoadAssemblyAttribute), false);
            
            manager = NewManager(testSite);
            
            #region initialize actions
            
			actions = new MemberInfo[6];
			
			actions[0] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.CatalogWebServiceAdapter.SaveProvider(InputTypes.ChangeType change_p1, InputTypes.IdType id_p2, InputTypes.StringType name_p3, InputTypes.StringType contactInfo_p4, InputTypes.StringType accountNumber_p5)");
			
			actions[1] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.CatalogWebServiceAdapter.SaveContributor()");
			
			actions[2] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.CatalogWebServiceAdapter.SaveEditorialCollection(InputTypes.ChangeType change_p1, InputTypes.IdType id_p2, InputTypes.ItemTypeId type_p3, InputTypes.DateTimeType startDate_p4, InputTypes.DateTimeType endDate_p5, InputTypes.ArrayType items_p6)");
			
			actions[3] = manager.GetMetadata("ReturnTypes.ExceptionType Adapter.CatalogWebServiceAdapter.SaveEditorialItem(InputTypes.ChangeType change_p1, InputTypes.ItemTypeId itemType_p2, InputTypes.DateTimeType startDate_p3, InputTypes.DateTimeType endDate_p4)");
			
			actions[4] = manager.GetMetadata("Adapter.CatalogWebServiceAdapter()");
			
			actions[5] = manager.GetMetadata("static System.Void Adapter.CatalogWebServiceAdapter..cctor()");
			
	        #endregion
	}//InitializeBeforeAllTests
		
		/// <summary>
		/// Override <see cref="TestClassBase.TestInitialize()"/>
		/// </summary>
		protected override void TestInitialize()
		{
		    base.TestInitialize();
		    
		    // add your test initialize code here
		}
		
        /// <summary>
        /// Many objects need to be reset in this method after the first test, since they have been initialized during 
        /// their creation time.
        /// </summary>
        private void InitializeExceptFirstTime()
        {
            OfflineObservation.Initialize();

            // Reset all adapters.
            catalogwebserviceadapterInstance.Reset();
		}
		
        /// <summary>
        /// Don't intent to use the [TestInitialize] attribute, since multi-test may be run in a same test case method.
        /// </summary>
        private void InitializeBeforeEachTest()
        {
            if (!firstTime)
            {
                InitializeExceptFirstTime();
            }
            else
            {
                // Sets the flag to false after the first time.
                firstTime = false;
            }
         
            #region Initialize variables
 
            #endregion
        }

        /// <summary>
        /// Resets instances before each rerunning tests in a test case method.
        /// </summary>
        private void InitializeBeforeEachRerun()
        {
            // Reset the test manager except the first time.
            if (needResetManager)
            {
                Manager = NewManager(testSite);
            }
            needResetManager = true;          
        }
        
        #endregion

		
		[ClassCleanup()]
		public static new void Cleanup()
		{
            // Invoke base class Cleanup
            TestClassBase.Cleanup();
		}
		
		public void CheckAndResetObservation()
		{
			bool isError = OfflineObservation.CheckForErrors();
			if(isError)
			{
				string errorMessage = OfflineObservation.DumpQueues(false);
				testSite.Assert.Fail("Error observations have been found in queue:\r\n{0}", errorMessage);
			}
			OfflineObservation.Initialize();
        }
		public void TestCase0()
		{
			//initial state = S0

			int runs = 0;
			do
			{
				testSite.Log.Add(LogEntryKind.Debug, "Rerunning: {0} time(s).", runs + 1);
				InitializeBeforeEachRerun();
				do
				{	
					InitializeBeforeEachTest();
					Test(0);
				} while (!Manager.BoundReached && Manager.KeepRunning());
				CheckAndResetObservation();
				runs++;
			} while (runs < Manager.ReRuns);
		}
		
		public void Test(int initial)
		{
			currentState = initial;

			finished = false;
			failed = false;
			nonAcceptingEnd = false;
			
			while (!finished)
			{
				switch (currentState)
				{
					case 0: StateS0();   
						break;    
					case 1: StateS1();   
						break;    
					case 2: StateS2();   
						break;    
					case 3: StateS3();   
						break;    
					case 4: StateS4();   
						break;    
					case 5: StateS5();   
						break;    
					case 6: StateS6();   
						break;    
					case 7: StateS7();   
						break;    
					case 8: StateS8();   
						break;    
					case 9: StateS9();   
						break;    
					case 10: StateS10();   
						break;    
					case 11: StateS11();   
						break;    
					case 12: StateS12();   
						break;    
					case 13: StateS13();   
						break;    
					case 14: StateS14();   
						break;    
					case 15: StateS15();   
						break;    
					case 16: StateS16();   
						break;    
					case 17: StateS17();   
						break;    
					case 18: StateS18();   
						break;    
					case 19: StateS19();   
						break;    
					case 20: StateS20();   
						break;    
					case 21: StateS21();   
						break;    
					case 22: StateS22();   
						break;    
					case 23: StateS23();   
						break;    
					case 24: StateS24();   
						break;    
					case 25: StateS25();   
						break;    
					case 26: StateS26();   
						break;    
					case 27: StateS27();   
						break;    
					case 28: StateS28();   
						break;    
					case 29: StateS29();   
						break;    
					case 30: StateS30();   
						break;    
					case 31: StateS31();   
						break;    
					case 32: StateS32();   
						break;    
					case 33: StateS33();   
						break;    
					case 34: StateS34();   
						break;    
					case 35: StateS35();   
						break;    
					case 36: StateS36();   
						break;    
					case 37: StateS37();   
						break;    
					case 38: StateS38();   
						break;    
					case 39: StateS39();   
						break;    
					case 40: StateS40();   
						break;    
					case 41: StateS41();   
						break;    
					case 42: StateS42();   
						break;    
					case 43: StateS43();   
						break;    
					case 44: StateS44();   
						break;    
					case 45: StateS45();   
						break;    
					case 46: StateS46();   
						break;    
					case 47: StateS47();   
						break;    
					case 48: StateS48();   
						break;    
					case 49: StateS49();   
						break;    
					case 50: StateS50();   
						break;    
					case 51: StateS51();   
						break;    
					case 52: StateS52();   
						break;    
					case 53: StateS53();   
						break;    
					case 54: StateS54();   
						break;    
					case 55: StateS55();   
						break;    
					case 56: StateS56();   
						break;    
					case 57: StateS57();   
						break;    
					case 58: StateS58();   
						break;    
					case 59: StateS59();   
						break;    
					case 60: StateS60();   
						break;    
					case 61: StateS61();   
						break;    
					case 62: StateS62();   
						break;    
					case 63: StateS63();   
						break;    
					case 64: StateS64();   
						break;    
					case 65: StateS65();   
						break;    
					case 66: StateS66();   
						break;    
					case 67: StateS67();   
						break;    
					case 68: StateS68();   
						break;    
					case 69: StateS69();   
						break;    
					case 70: StateS70();   
						break;    
					case 71: StateS71();   
						break;    
					case 72: StateS72();   
						break;    
					case 73: StateS73();   
						break;    
					case 74: StateS74();   
						break;    
					case 75: StateS75();   
						break;    
					case 76: StateS76();   
						break;    
					case 77: StateS77();   
						break;    
					case 78: StateS78();   
						break;    
					case 79: StateS79();   
						break;    
					case 80: StateS80();   
						break;    
					case 81: StateS81();   
						break;    
					case 82: StateS82();   
						break;    
					case 83: StateS83();   
						break;    
					case 84: StateS84();   
						break;    
					case 85: StateS85();   
						break;    
					case 86: StateS86();   
						break;    
					case 87: StateS87();   
						break;    
					case 88: StateS88();   
						break;    
					case 89: StateS89();   
						break;    
					case 90: StateS90();   
						break;    
					case 91: StateS91();   
						break;    
					case 92: StateS92();   
						break;    
					case 93: StateS93();   
						break;    
					case 94: StateS94();   
						break;    
					case 95: StateS95();   
						break;    
					case 96: StateS96();   
						break;    
					case 97: StateS97();   
						break;    
					case 98: StateS98();   
						break;    
					case 99: StateS99();   
						break;    
					case 100: StateS100();   
						break;    
					case 101: StateS101();   
						break;    
					case 102: StateS102();   
						break;    
					case 103: StateS103();   
						break;    
					case 104: StateS104();   
						break;    
					case 105: StateS105();   
						break;    
					case 106: StateS106();   
						break;    
					case 107: StateS107();   
						break;    
					case 108: StateS108();   
						break;    
					case 109: StateS109();   
						break;    
					case 110: StateS110();   
						break;    
					case 111: StateS111();   
						break;    
					case 112: StateS112();   
						break;    
					case 113: StateS113();   
						break;    
					case 114: StateS114();   
						break;    
					case 115: StateS115();   
						break;    
					case 116: StateS116();   
						break;    
					case 117: StateS117();   
						break;    
					case 118: StateS118();   
						break;    
					case 119: StateS119();   
						break;    
					case 120: StateS120();   
						break;    
					case 121: StateS121();   
						break;    
					case 122: StateS122();   
						break;    
					case 123: StateS123();   
						break;    
					case 124: StateS124();   
						break;    
					case 125: StateS125();   
						break;    
					case 126: StateS126();   
						break;    
					case 127: StateS127();   
						break;    
					case 128: StateS128();   
						break;    
					case 129: StateS129();   
						break;    
					case 130: StateS130();   
						break;    
					case 131: StateS131();   
						break;    
					case 132: StateS132();   
						break;    
					case 133: StateS133();   
						break;    
					case 134: StateS134();   
						break;    
					case 135: StateS135();   
						break;    
					case 136: StateS136();   
						break;    
					case 137: StateS137();   
						break;    
					case 138: StateS138();   
						break;    
					case 139: StateS139();   
						break;    
					case 140: StateS140();   
						break;    
					case 141: StateS141();   
						break;    
					case 142: StateS142();   
						break;    
					case 143: StateS143();   
						break;    
					case 144: StateS144();   
						break;    
					case 145: StateS145();   
						break;    
					case 146: StateS146();   
						break;    
					case 147: StateS147();   
						break;    
					case 148: StateS148();   
						break;    
					case 149: StateS149();   
						break;    
					case 150: StateS150();   
						break;    
					case 151: StateS151();   
						break;    
					case 152: StateS152();   
						break;    
					case 153: StateS153();   
						break;    
					case 154: StateS154();   
						break;    
					case 155: StateS155();   
						break;    
					case 156: StateS156();   
						break;    
					case 157: StateS157();   
						break;    
					case 158: StateS158();   
						break;    
					case 159: StateS159();   
						break;    
					case 160: StateS160();   
						break;    
					case 161: StateS161();   
						break;    
					case 162: StateS162();   
						break;    
					case 163: StateS163();   
						break;    
					case 164: StateS164();   
						break;    
					case 165: StateS165();   
						break;    
					case 166: StateS166();   
						break;    
					case 167: StateS167();   
						break;    
					case 168: StateS168();   
						break;    
					case 169: StateS169();   
						break;    
					case 170: StateS170();   
						break;    
					case 171: StateS171();   
						break;    
					case 172: StateS172();   
						break;    
					case 173: StateS173();   
						break;    
					case 174: StateS174();   
						break;    
					case 175: StateS175();   
						break;    
					case 176: StateS176();   
						break;    
					case 177: StateS177();   
						break;    
					case 178: StateS178();   
						break;    
					case 179: StateS179();   
						break;    
					case 180: StateS180();   
						break;    
					case 181: StateS181();   
						break;    
					case 182: StateS182();   
						break;    
					case 183: StateS183();   
						break;    
					case 184: StateS184();   
						break;    
					case 185: StateS185();   
						break;    
					case 186: StateS186();   
						break;    
					case 187: StateS187();   
						break;    
					case 188: StateS188();   
						break;    
					case 189: StateS189();   
						break;    
					case 190: StateS190();   
						break;    
					case 191: StateS191();   
						break;    
					case 192: StateS192();   
						break;    
					case 193: StateS193();   
						break;    
					case 194: StateS194();   
						break;    
					case 195: StateS195();   
						break;    
					case 196: StateS196();   
						break;    
					case 197: StateS197();   
						break;    
					case 198: StateS198();   
						break;    
					case 199: StateS199();   
						break;    
					case 200: StateS200();   
						break;    
					case 201: StateS201();   
						break;    
					case 202: StateS202();   
						break;    
					case 203: StateS203();   
						break;    
					case 204: StateS204();   
						break;    
					case 205: StateS205();   
						break;    
					case 206: StateS206();   
						break;    
					case 207: StateS207();   
						break;    
					case 208: StateS208();   
						break;    
					case 209: StateS209();   
						break;    
					case 210: StateS210();   
						break;    
					case 211: StateS211();   
						break;    
					case 212: StateS212();   
						break;    
					case 213: StateS213();   
						break;    
					case 214: StateS214();   
						break;    
					case 215: StateS215();   
						break;    
					case 216: StateS216();   
						break;    
					case 217: StateS217();   
						break;    
					case 218: StateS218();   
						break;    
					case 219: StateS219();   
						break;    
					case 220: StateS220();   
						break;    
					case 221: StateS221();   
						break;    
					case 222: StateS222();   
						break;    
					case 223: StateS223();   
						break;    
					case 224: StateS224();   
						break;    
					case 225: StateS225();   
						break;    
					case 226: StateS226();   
						break;    
					case 227: StateS227();   
						break;    
					case 228: StateS228();   
						break;    
					case 229: StateS229();   
						break;    
					case 230: StateS230();   
						break;    
					case 231: StateS231();   
						break;    
					case 232: StateS232();   
						break;    
					case 233: StateS233();   
						break;    
					case 234: StateS234();   
						break;    
					case 235: StateS235();   
						break;    
					case 236: StateS236();   
						break;    
					case 237: StateS237();   
						break;    
					case 238: StateS238();   
						break;    
					case 239: StateS239();   
						break;    
					case 240: StateS240();   
						break;    
					case 241: StateS241();   
						break;    
					case 242: StateS242();   
						break;    
					case 243: StateS243();   
						break;    
					case 244: StateS244();   
						break;    
					case 245: StateS245();   
						break;    
					case 246: StateS246();   
						break;    
					case 247: StateS247();   
						break;    
					case 248: StateS248();   
						break;    
					case 249: StateS249();   
						break;    
					case 250: StateS250();   
						break;    
					case 251: StateS251();   
						break;    
					case 252: StateS252();   
						break;    
					case 253: StateS253();   
						break;    
					case 254: StateS254();   
						break;    
					case 255: StateS255();   
						break;    
					case 256: StateS256();   
						break;    
				}
			}                               

			if(failed)
			{
			    StringBuilder errMsg = new StringBuilder();
			    
			    errMsg.AppendFormat("Conformance error in state {0}. ", states[currentState]);

                if (nonAcceptingEnd)
                {
                    errMsg.AppendFormat("Non-accepting end state.");
                }
                else if (Manager.BoundReached)
                {
                    errMsg.AppendFormat("Exploration bound reached in non-accepting state.");
                }
                else
                {
                    errMsg.AppendFormat("Observed action queue is incorrect. ");
                    errMsg.AppendFormat("Actual action: {0}. ", OfflineObservation.DumpQueues());
                    errMsg.AppendFormat("Expected action: {0}", OfflineObservation.DumpPatterns());
                    
                    Manager.DumpFailedTransitions();
                }
                Manager.LogConformanceError(errMsg.ToString());
			}
            else
	        {
                testSite.Assert.Pass("The test passed.");
	        }
        }    

		#region StateS0
		
		void StateS0()
		{		
			Manager.LogState("S0");

			ControllablesS0();
		}	


		#region ControllableTransitions
		
		void StateS0Controllable0()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Null) -> S1");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 1;
				Manager.LogTransition("S0", "S1", "call SaveProvider(Add,Existing,Null,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable1()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Empty) -> S2");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 2;
				Manager.LogTransition("S0", "S2", "call SaveProvider(Add,Existing,Null,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable2()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Length50) -> S3");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 3;
				Manager.LogTransition("S0", "S3", "call SaveProvider(Add,Existing,Null,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable3()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Length51) -> S4");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 4;
				Manager.LogTransition("S0", "S4", "call SaveProvider(Add,Existing,Null,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable4()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Length500) -> S5");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 5;
				Manager.LogTransition("S0", "S5", "call SaveProvider(Add,Existing,Null,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable5()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Null,Length501) -> S6");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 6;
				Manager.LogTransition("S0", "S6", "call SaveProvider(Add,Existing,Null,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable6()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Null) -> S7");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 7;
				Manager.LogTransition("S0", "S7", "call SaveProvider(Add,Existing,Null,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable7()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Empty) -> S8");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 8;
				Manager.LogTransition("S0", "S8", "call SaveProvider(Add,Existing,Null,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable8()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Length50) -> S9");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 9;
				Manager.LogTransition("S0", "S9", "call SaveProvider(Add,Existing,Null,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable9()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Length51) -> S10");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 10;
				Manager.LogTransition("S0", "S10", "call SaveProvider(Add,Existing,Null,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable10()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Length500) -> S11");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 11;
				Manager.LogTransition("S0", "S11", "call SaveProvider(Add,Existing,Null,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable11()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Empty,Length501) -> S12");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 12;
				Manager.LogTransition("S0", "S12", "call SaveProvider(Add,Existing,Null,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable12()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Null) -> S13");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 13;
				Manager.LogTransition("S0", "S13", "call SaveProvider(Add,Existing,Null,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable13()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Empty) -> S14");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 14;
				Manager.LogTransition("S0", "S14", "call SaveProvider(Add,Existing,Null,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable14()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Length50) -> S15");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 15;
				Manager.LogTransition("S0", "S15", "call SaveProvider(Add,Existing,Null,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable15()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Length51) -> S16");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 16;
				Manager.LogTransition("S0", "S16", "call SaveProvider(Add,Existing,Null,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable16()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Length500) -> S17");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 17;
				Manager.LogTransition("S0", "S17", "call SaveProvider(Add,Existing,Null,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable17()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length50,Length501) -> S18");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 18;
				Manager.LogTransition("S0", "S18", "call SaveProvider(Add,Existing,Null,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable18()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Null) -> S19");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 19;
				Manager.LogTransition("S0", "S19", "call SaveProvider(Add,Existing,Null,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable19()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Empty) -> S20");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 20;
				Manager.LogTransition("S0", "S20", "call SaveProvider(Add,Existing,Null,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable20()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Length50) -> S21");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 21;
				Manager.LogTransition("S0", "S21", "call SaveProvider(Add,Existing,Null,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable21()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Length51) -> S22");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 22;
				Manager.LogTransition("S0", "S22", "call SaveProvider(Add,Existing,Null,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable22()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Length500) -> S23");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 23;
				Manager.LogTransition("S0", "S23", "call SaveProvider(Add,Existing,Null,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable23()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length51,Length501) -> S24");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 24;
				Manager.LogTransition("S0", "S24", "call SaveProvider(Add,Existing,Null,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable24()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Null) -> S25");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 25;
				Manager.LogTransition("S0", "S25", "call SaveProvider(Add,Existing,Null,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable25()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Empty) -> S26");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 26;
				Manager.LogTransition("S0", "S26", "call SaveProvider(Add,Existing,Null,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable26()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Length50) -> S27");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 27;
				Manager.LogTransition("S0", "S27", "call SaveProvider(Add,Existing,Null,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable27()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Length51) -> S28");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 28;
				Manager.LogTransition("S0", "S28", "call SaveProvider(Add,Existing,Null,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable28()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Length500) -> S29");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 29;
				Manager.LogTransition("S0", "S29", "call SaveProvider(Add,Existing,Null,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable29()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length500,Length501) -> S30");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 30;
				Manager.LogTransition("S0", "S30", "call SaveProvider(Add,Existing,Null,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable30()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Null) -> S31");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 31;
				Manager.LogTransition("S0", "S31", "call SaveProvider(Add,Existing,Null,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable31()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Empty) -> S32");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 32;
				Manager.LogTransition("S0", "S32", "call SaveProvider(Add,Existing,Null,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable32()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Length50) -> S33");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 33;
				Manager.LogTransition("S0", "S33", "call SaveProvider(Add,Existing,Null,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable33()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Length51) -> S34");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 34;
				Manager.LogTransition("S0", "S34", "call SaveProvider(Add,Existing,Null,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable34()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Length500) -> S35");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 35;
				Manager.LogTransition("S0", "S35", "call SaveProvider(Add,Existing,Null,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable35()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Null,Length501,Length501) -> S36");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 36;
				Manager.LogTransition("S0", "S36", "call SaveProvider(Add,Existing,Null,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable36()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Null) -> S37");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 37;
				Manager.LogTransition("S0", "S37", "call SaveProvider(Add,Existing,Empty,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable37()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Empty) -> S38");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 38;
				Manager.LogTransition("S0", "S38", "call SaveProvider(Add,Existing,Empty,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable38()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Length50) -> S39");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 39;
				Manager.LogTransition("S0", "S39", "call SaveProvider(Add,Existing,Empty,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable39()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Length51) -> S40");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 40;
				Manager.LogTransition("S0", "S40", "call SaveProvider(Add,Existing,Empty,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable40()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Length500) -> S41");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 41;
				Manager.LogTransition("S0", "S41", "call SaveProvider(Add,Existing,Empty,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable41()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Null,Length501) -> S42");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 42;
				Manager.LogTransition("S0", "S42", "call SaveProvider(Add,Existing,Empty,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable42()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Null) -> S43");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 43;
				Manager.LogTransition("S0", "S43", "call SaveProvider(Add,Existing,Empty,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable43()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Empty) -> S44");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 44;
				Manager.LogTransition("S0", "S44", "call SaveProvider(Add,Existing,Empty,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable44()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Length50) -> S45");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 45;
				Manager.LogTransition("S0", "S45", "call SaveProvider(Add,Existing,Empty,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable45()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Length51) -> S46");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 46;
				Manager.LogTransition("S0", "S46", "call SaveProvider(Add,Existing,Empty,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable46()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Length500) -> S47");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 47;
				Manager.LogTransition("S0", "S47", "call SaveProvider(Add,Existing,Empty,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable47()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Empty,Length501) -> S48");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 48;
				Manager.LogTransition("S0", "S48", "call SaveProvider(Add,Existing,Empty,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable48()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Null) -> S49");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 49;
				Manager.LogTransition("S0", "S49", "call SaveProvider(Add,Existing,Empty,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable49()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Empty) -> S50");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 50;
				Manager.LogTransition("S0", "S50", "call SaveProvider(Add,Existing,Empty,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable50()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Length50) -> S51");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 51;
				Manager.LogTransition("S0", "S51", "call SaveProvider(Add,Existing,Empty,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable51()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Length51) -> S52");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 52;
				Manager.LogTransition("S0", "S52", "call SaveProvider(Add,Existing,Empty,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable52()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Length500) -> S53");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 53;
				Manager.LogTransition("S0", "S53", "call SaveProvider(Add,Existing,Empty,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable53()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length50,Length501) -> S54");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 54;
				Manager.LogTransition("S0", "S54", "call SaveProvider(Add,Existing,Empty,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable54()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Null) -> S55");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 55;
				Manager.LogTransition("S0", "S55", "call SaveProvider(Add,Existing,Empty,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable55()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Empty) -> S56");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 56;
				Manager.LogTransition("S0", "S56", "call SaveProvider(Add,Existing,Empty,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable56()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Length50) -> S57");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 57;
				Manager.LogTransition("S0", "S57", "call SaveProvider(Add,Existing,Empty,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable57()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Length51) -> S58");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 58;
				Manager.LogTransition("S0", "S58", "call SaveProvider(Add,Existing,Empty,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable58()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Length500) -> S59");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 59;
				Manager.LogTransition("S0", "S59", "call SaveProvider(Add,Existing,Empty,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable59()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length51,Length501) -> S60");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 60;
				Manager.LogTransition("S0", "S60", "call SaveProvider(Add,Existing,Empty,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable60()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Null) -> S61");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 61;
				Manager.LogTransition("S0", "S61", "call SaveProvider(Add,Existing,Empty,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable61()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Empty) -> S62");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 62;
				Manager.LogTransition("S0", "S62", "call SaveProvider(Add,Existing,Empty,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable62()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Length50) -> S63");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 63;
				Manager.LogTransition("S0", "S63", "call SaveProvider(Add,Existing,Empty,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable63()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Length51) -> S64");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 64;
				Manager.LogTransition("S0", "S64", "call SaveProvider(Add,Existing,Empty,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable64()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Length500) -> S65");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 65;
				Manager.LogTransition("S0", "S65", "call SaveProvider(Add,Existing,Empty,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable65()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length500,Length501) -> S66");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 66;
				Manager.LogTransition("S0", "S66", "call SaveProvider(Add,Existing,Empty,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable66()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Null) -> S67");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 67;
				Manager.LogTransition("S0", "S67", "call SaveProvider(Add,Existing,Empty,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable67()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Empty) -> S68");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 68;
				Manager.LogTransition("S0", "S68", "call SaveProvider(Add,Existing,Empty,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable68()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Length50) -> S69");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 69;
				Manager.LogTransition("S0", "S69", "call SaveProvider(Add,Existing,Empty,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable69()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Length51) -> S70");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 70;
				Manager.LogTransition("S0", "S70", "call SaveProvider(Add,Existing,Empty,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable70()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Length500) -> S71");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 71;
				Manager.LogTransition("S0", "S71", "call SaveProvider(Add,Existing,Empty,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable71()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Empty,Length501,Length501) -> S72");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Empty, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 72;
				Manager.LogTransition("S0", "S72", "call SaveProvider(Add,Existing,Empty,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable72()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Null) -> S73");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 73;
				Manager.LogTransition("S0", "S73", "call SaveProvider(Add,Existing,Length50,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable73()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Empty) -> S74");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 74;
				Manager.LogTransition("S0", "S74", "call SaveProvider(Add,Existing,Length50,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable74()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Length50) -> S75");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 75;
				Manager.LogTransition("S0", "S75", "call SaveProvider(Add,Existing,Length50,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable75()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Length51) -> S76");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 76;
				Manager.LogTransition("S0", "S76", "call SaveProvider(Add,Existing,Length50,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable76()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Length500) -> S77");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 77;
				Manager.LogTransition("S0", "S77", "call SaveProvider(Add,Existing,Length50,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable77()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Null,Length501) -> S78");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 78;
				Manager.LogTransition("S0", "S78", "call SaveProvider(Add,Existing,Length50,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable78()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Null) -> S79");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 79;
				Manager.LogTransition("S0", "S79", "call SaveProvider(Add,Existing,Length50,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable79()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Empty) -> S80");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 80;
				Manager.LogTransition("S0", "S80", "call SaveProvider(Add,Existing,Length50,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable80()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Length50) -> S81");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 81;
				Manager.LogTransition("S0", "S81", "call SaveProvider(Add,Existing,Length50,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable81()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Length51) -> S82");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 82;
				Manager.LogTransition("S0", "S82", "call SaveProvider(Add,Existing,Length50,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable82()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Length500) -> S83");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 83;
				Manager.LogTransition("S0", "S83", "call SaveProvider(Add,Existing,Length50,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable83()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Empty,Length501) -> S84");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 84;
				Manager.LogTransition("S0", "S84", "call SaveProvider(Add,Existing,Length50,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable84()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Null) -> S85");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 85;
				Manager.LogTransition("S0", "S85", "call SaveProvider(Add,Existing,Length50,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable85()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Empty) -> S86");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 86;
				Manager.LogTransition("S0", "S86", "call SaveProvider(Add,Existing,Length50,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable86()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Length50) -> S87");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 87;
				Manager.LogTransition("S0", "S87", "call SaveProvider(Add,Existing,Length50,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable87()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Length51) -> S88");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 88;
				Manager.LogTransition("S0", "S88", "call SaveProvider(Add,Existing,Length50,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable88()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Length500) -> S89");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 89;
				Manager.LogTransition("S0", "S89", "call SaveProvider(Add,Existing,Length50,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable89()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length50,Length501) -> S90");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 90;
				Manager.LogTransition("S0", "S90", "call SaveProvider(Add,Existing,Length50,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable90()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Null) -> S91");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 91;
				Manager.LogTransition("S0", "S91", "call SaveProvider(Add,Existing,Length50,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable91()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Empty) -> S92");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 92;
				Manager.LogTransition("S0", "S92", "call SaveProvider(Add,Existing,Length50,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable92()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Length50) -> S93");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 93;
				Manager.LogTransition("S0", "S93", "call SaveProvider(Add,Existing,Length50,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable93()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Length51) -> S94");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 94;
				Manager.LogTransition("S0", "S94", "call SaveProvider(Add,Existing,Length50,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable94()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Length500) -> S95");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 95;
				Manager.LogTransition("S0", "S95", "call SaveProvider(Add,Existing,Length50,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable95()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length51,Length501) -> S96");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 96;
				Manager.LogTransition("S0", "S96", "call SaveProvider(Add,Existing,Length50,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable96()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Null) -> S97");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 97;
				Manager.LogTransition("S0", "S97", "call SaveProvider(Add,Existing,Length50,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable97()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Empty) -> S98");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 98;
				Manager.LogTransition("S0", "S98", "call SaveProvider(Add,Existing,Length50,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable98()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Length50) -> S99");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 99;
				Manager.LogTransition("S0", "S99", "call SaveProvider(Add,Existing,Length50,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable99()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Length51) -> S100");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 100;
				Manager.LogTransition("S0", "S100", "call SaveProvider(Add,Existing,Length50,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable100()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Length500) -> S101");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 101;
				Manager.LogTransition("S0", "S101", "call SaveProvider(Add,Existing,Length50,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable101()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length500,Length501) -> S102");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 102;
				Manager.LogTransition("S0", "S102", "call SaveProvider(Add,Existing,Length50,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable102()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Null) -> S103");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 103;
				Manager.LogTransition("S0", "S103", "call SaveProvider(Add,Existing,Length50,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable103()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Empty) -> S104");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 104;
				Manager.LogTransition("S0", "S104", "call SaveProvider(Add,Existing,Length50,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable104()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Length50) -> S105");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 105;
				Manager.LogTransition("S0", "S105", "call SaveProvider(Add,Existing,Length50,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable105()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Length51) -> S106");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 106;
				Manager.LogTransition("S0", "S106", "call SaveProvider(Add,Existing,Length50,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable106()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Length500) -> S107");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 107;
				Manager.LogTransition("S0", "S107", "call SaveProvider(Add,Existing,Length50,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable107()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length50,Length501,Length501) -> S108");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length50, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 108;
				Manager.LogTransition("S0", "S108", "call SaveProvider(Add,Existing,Length50,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable108()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Null) -> S109");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 109;
				Manager.LogTransition("S0", "S109", "call SaveProvider(Add,Existing,Length51,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable109()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Empty) -> S110");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 110;
				Manager.LogTransition("S0", "S110", "call SaveProvider(Add,Existing,Length51,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable110()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Length50) -> S111");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 111;
				Manager.LogTransition("S0", "S111", "call SaveProvider(Add,Existing,Length51,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable111()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Length51) -> S112");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 112;
				Manager.LogTransition("S0", "S112", "call SaveProvider(Add,Existing,Length51,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable112()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Length500) -> S113");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 113;
				Manager.LogTransition("S0", "S113", "call SaveProvider(Add,Existing,Length51,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable113()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Null,Length501) -> S114");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 114;
				Manager.LogTransition("S0", "S114", "call SaveProvider(Add,Existing,Length51,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable114()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Null) -> S115");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 115;
				Manager.LogTransition("S0", "S115", "call SaveProvider(Add,Existing,Length51,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable115()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Empty) -> S116");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 116;
				Manager.LogTransition("S0", "S116", "call SaveProvider(Add,Existing,Length51,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable116()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Length50) -> S117");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 117;
				Manager.LogTransition("S0", "S117", "call SaveProvider(Add,Existing,Length51,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable117()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Length51) -> S118");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 118;
				Manager.LogTransition("S0", "S118", "call SaveProvider(Add,Existing,Length51,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable118()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Length500) -> S119");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 119;
				Manager.LogTransition("S0", "S119", "call SaveProvider(Add,Existing,Length51,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable119()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Empty,Length501) -> S120");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 120;
				Manager.LogTransition("S0", "S120", "call SaveProvider(Add,Existing,Length51,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable120()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Null) -> S121");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 121;
				Manager.LogTransition("S0", "S121", "call SaveProvider(Add,Existing,Length51,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable121()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Empty) -> S122");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 122;
				Manager.LogTransition("S0", "S122", "call SaveProvider(Add,Existing,Length51,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable122()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Length50) -> S123");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 123;
				Manager.LogTransition("S0", "S123", "call SaveProvider(Add,Existing,Length51,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable123()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Length51) -> S124");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 124;
				Manager.LogTransition("S0", "S124", "call SaveProvider(Add,Existing,Length51,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable124()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Length500) -> S125");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 125;
				Manager.LogTransition("S0", "S125", "call SaveProvider(Add,Existing,Length51,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable125()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length50,Length501) -> S126");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 126;
				Manager.LogTransition("S0", "S126", "call SaveProvider(Add,Existing,Length51,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable126()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Null) -> S127");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 127;
				Manager.LogTransition("S0", "S127", "call SaveProvider(Add,Existing,Length51,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable127()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Empty) -> S128");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 128;
				Manager.LogTransition("S0", "S128", "call SaveProvider(Add,Existing,Length51,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable128()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Length50) -> S129");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 129;
				Manager.LogTransition("S0", "S129", "call SaveProvider(Add,Existing,Length51,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable129()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Length51) -> S130");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 130;
				Manager.LogTransition("S0", "S130", "call SaveProvider(Add,Existing,Length51,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable130()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Length500) -> S131");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 131;
				Manager.LogTransition("S0", "S131", "call SaveProvider(Add,Existing,Length51,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable131()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length51,Length501) -> S132");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 132;
				Manager.LogTransition("S0", "S132", "call SaveProvider(Add,Existing,Length51,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable132()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Null) -> S133");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 133;
				Manager.LogTransition("S0", "S133", "call SaveProvider(Add,Existing,Length51,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable133()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Empty) -> S134");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 134;
				Manager.LogTransition("S0", "S134", "call SaveProvider(Add,Existing,Length51,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable134()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Length50) -> S135");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 135;
				Manager.LogTransition("S0", "S135", "call SaveProvider(Add,Existing,Length51,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable135()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Length51) -> S136");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 136;
				Manager.LogTransition("S0", "S136", "call SaveProvider(Add,Existing,Length51,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable136()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Length500) -> S137");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 137;
				Manager.LogTransition("S0", "S137", "call SaveProvider(Add,Existing,Length51,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable137()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length500,Length501) -> S138");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 138;
				Manager.LogTransition("S0", "S138", "call SaveProvider(Add,Existing,Length51,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable138()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Null) -> S139");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 139;
				Manager.LogTransition("S0", "S139", "call SaveProvider(Add,Existing,Length51,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable139()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Empty) -> S140");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 140;
				Manager.LogTransition("S0", "S140", "call SaveProvider(Add,Existing,Length51,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable140()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Length50) -> S141");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 141;
				Manager.LogTransition("S0", "S141", "call SaveProvider(Add,Existing,Length51,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable141()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Length51) -> S142");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 142;
				Manager.LogTransition("S0", "S142", "call SaveProvider(Add,Existing,Length51,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable142()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Length500) -> S143");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 143;
				Manager.LogTransition("S0", "S143", "call SaveProvider(Add,Existing,Length51,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable143()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length51,Length501,Length501) -> S144");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length51, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 144;
				Manager.LogTransition("S0", "S144", "call SaveProvider(Add,Existing,Length51,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable144()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Null) -> S145");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 145;
				Manager.LogTransition("S0", "S145", "call SaveProvider(Add,Existing,Length500,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable145()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Empty) -> S146");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 146;
				Manager.LogTransition("S0", "S146", "call SaveProvider(Add,Existing,Length500,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable146()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Length50) -> S147");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 147;
				Manager.LogTransition("S0", "S147", "call SaveProvider(Add,Existing,Length500,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable147()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Length51) -> S148");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 148;
				Manager.LogTransition("S0", "S148", "call SaveProvider(Add,Existing,Length500,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable148()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Length500) -> S149");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 149;
				Manager.LogTransition("S0", "S149", "call SaveProvider(Add,Existing,Length500,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable149()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Null,Length501) -> S150");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 150;
				Manager.LogTransition("S0", "S150", "call SaveProvider(Add,Existing,Length500,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable150()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Null) -> S151");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 151;
				Manager.LogTransition("S0", "S151", "call SaveProvider(Add,Existing,Length500,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable151()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Empty) -> S152");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 152;
				Manager.LogTransition("S0", "S152", "call SaveProvider(Add,Existing,Length500,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable152()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Length50) -> S153");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 153;
				Manager.LogTransition("S0", "S153", "call SaveProvider(Add,Existing,Length500,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable153()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Length51) -> S154");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 154;
				Manager.LogTransition("S0", "S154", "call SaveProvider(Add,Existing,Length500,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable154()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Length500) -> S155");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 155;
				Manager.LogTransition("S0", "S155", "call SaveProvider(Add,Existing,Length500,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable155()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Empty,Length501) -> S156");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 156;
				Manager.LogTransition("S0", "S156", "call SaveProvider(Add,Existing,Length500,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable156()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Null) -> S157");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 157;
				Manager.LogTransition("S0", "S157", "call SaveProvider(Add,Existing,Length500,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable157()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Empty) -> S158");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 158;
				Manager.LogTransition("S0", "S158", "call SaveProvider(Add,Existing,Length500,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable158()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Length50) -> S159");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 159;
				Manager.LogTransition("S0", "S159", "call SaveProvider(Add,Existing,Length500,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable159()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Length51) -> S160");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 160;
				Manager.LogTransition("S0", "S160", "call SaveProvider(Add,Existing,Length500,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable160()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Length500) -> S161");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 161;
				Manager.LogTransition("S0", "S161", "call SaveProvider(Add,Existing,Length500,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable161()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length50,Length501) -> S162");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 162;
				Manager.LogTransition("S0", "S162", "call SaveProvider(Add,Existing,Length500,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable162()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Null) -> S163");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 163;
				Manager.LogTransition("S0", "S163", "call SaveProvider(Add,Existing,Length500,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable163()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Empty) -> S164");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 164;
				Manager.LogTransition("S0", "S164", "call SaveProvider(Add,Existing,Length500,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable164()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Length50) -> S165");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 165;
				Manager.LogTransition("S0", "S165", "call SaveProvider(Add,Existing,Length500,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable165()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Length51) -> S166");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 166;
				Manager.LogTransition("S0", "S166", "call SaveProvider(Add,Existing,Length500,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable166()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Length500) -> S167");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 167;
				Manager.LogTransition("S0", "S167", "call SaveProvider(Add,Existing,Length500,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable167()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length51,Length501) -> S168");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 168;
				Manager.LogTransition("S0", "S168", "call SaveProvider(Add,Existing,Length500,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable168()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Null) -> S169");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 169;
				Manager.LogTransition("S0", "S169", "call SaveProvider(Add,Existing,Length500,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable169()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Empty) -> S170");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 170;
				Manager.LogTransition("S0", "S170", "call SaveProvider(Add,Existing,Length500,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable170()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Length50) -> S171");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 171;
				Manager.LogTransition("S0", "S171", "call SaveProvider(Add,Existing,Length500,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable171()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Length51) -> S172");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 172;
				Manager.LogTransition("S0", "S172", "call SaveProvider(Add,Existing,Length500,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable172()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Length500) -> S173");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 173;
				Manager.LogTransition("S0", "S173", "call SaveProvider(Add,Existing,Length500,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable173()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length500,Length501) -> S174");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 174;
				Manager.LogTransition("S0", "S174", "call SaveProvider(Add,Existing,Length500,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable174()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Null) -> S175");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 175;
				Manager.LogTransition("S0", "S175", "call SaveProvider(Add,Existing,Length500,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable175()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Empty) -> S176");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 176;
				Manager.LogTransition("S0", "S176", "call SaveProvider(Add,Existing,Length500,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable176()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Length50) -> S177");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 177;
				Manager.LogTransition("S0", "S177", "call SaveProvider(Add,Existing,Length500,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable177()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Length51) -> S178");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 178;
				Manager.LogTransition("S0", "S178", "call SaveProvider(Add,Existing,Length500,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable178()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Length500) -> S179");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 179;
				Manager.LogTransition("S0", "S179", "call SaveProvider(Add,Existing,Length500,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable179()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length500,Length501,Length501) -> S180");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length500, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 180;
				Manager.LogTransition("S0", "S180", "call SaveProvider(Add,Existing,Length500,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable180()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Null) -> S181");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 181;
				Manager.LogTransition("S0", "S181", "call SaveProvider(Add,Existing,Length501,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable181()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Empty) -> S182");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 182;
				Manager.LogTransition("S0", "S182", "call SaveProvider(Add,Existing,Length501,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable182()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Length50) -> S183");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 183;
				Manager.LogTransition("S0", "S183", "call SaveProvider(Add,Existing,Length501,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable183()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Length51) -> S184");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 184;
				Manager.LogTransition("S0", "S184", "call SaveProvider(Add,Existing,Length501,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable184()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Length500) -> S185");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 185;
				Manager.LogTransition("S0", "S185", "call SaveProvider(Add,Existing,Length501,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable185()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Null,Length501) -> S186");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 186;
				Manager.LogTransition("S0", "S186", "call SaveProvider(Add,Existing,Length501,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable186()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Null) -> S187");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 187;
				Manager.LogTransition("S0", "S187", "call SaveProvider(Add,Existing,Length501,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable187()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Empty) -> S188");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 188;
				Manager.LogTransition("S0", "S188", "call SaveProvider(Add,Existing,Length501,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable188()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Length50) -> S189");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 189;
				Manager.LogTransition("S0", "S189", "call SaveProvider(Add,Existing,Length501,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable189()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Length51) -> S190");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 190;
				Manager.LogTransition("S0", "S190", "call SaveProvider(Add,Existing,Length501,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable190()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Length500) -> S191");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 191;
				Manager.LogTransition("S0", "S191", "call SaveProvider(Add,Existing,Length501,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable191()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Empty,Length501) -> S192");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 192;
				Manager.LogTransition("S0", "S192", "call SaveProvider(Add,Existing,Length501,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable192()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Null) -> S193");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 193;
				Manager.LogTransition("S0", "S193", "call SaveProvider(Add,Existing,Length501,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable193()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Empty) -> S194");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 194;
				Manager.LogTransition("S0", "S194", "call SaveProvider(Add,Existing,Length501,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable194()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Length50) -> S195");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 195;
				Manager.LogTransition("S0", "S195", "call SaveProvider(Add,Existing,Length501,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable195()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Length51) -> S196");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 196;
				Manager.LogTransition("S0", "S196", "call SaveProvider(Add,Existing,Length501,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable196()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Length500) -> S197");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 197;
				Manager.LogTransition("S0", "S197", "call SaveProvider(Add,Existing,Length501,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable197()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length50,Length501) -> S198");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 198;
				Manager.LogTransition("S0", "S198", "call SaveProvider(Add,Existing,Length501,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable198()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Null) -> S199");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 199;
				Manager.LogTransition("S0", "S199", "call SaveProvider(Add,Existing,Length501,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable199()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Empty) -> S200");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 200;
				Manager.LogTransition("S0", "S200", "call SaveProvider(Add,Existing,Length501,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable200()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Length50) -> S201");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 201;
				Manager.LogTransition("S0", "S201", "call SaveProvider(Add,Existing,Length501,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable201()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Length51) -> S202");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 202;
				Manager.LogTransition("S0", "S202", "call SaveProvider(Add,Existing,Length501,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable202()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Length500) -> S203");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 203;
				Manager.LogTransition("S0", "S203", "call SaveProvider(Add,Existing,Length501,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable203()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length51,Length501) -> S204");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 204;
				Manager.LogTransition("S0", "S204", "call SaveProvider(Add,Existing,Length501,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable204()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Null) -> S205");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 205;
				Manager.LogTransition("S0", "S205", "call SaveProvider(Add,Existing,Length501,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable205()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Empty) -> S206");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 206;
				Manager.LogTransition("S0", "S206", "call SaveProvider(Add,Existing,Length501,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable206()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Length50) -> S207");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 207;
				Manager.LogTransition("S0", "S207", "call SaveProvider(Add,Existing,Length501,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable207()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Length51) -> S208");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 208;
				Manager.LogTransition("S0", "S208", "call SaveProvider(Add,Existing,Length501,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable208()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Length500) -> S209");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 209;
				Manager.LogTransition("S0", "S209", "call SaveProvider(Add,Existing,Length501,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable209()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length500,Length501) -> S210");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 210;
				Manager.LogTransition("S0", "S210", "call SaveProvider(Add,Existing,Length501,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable210()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Null) -> S211");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 211;
				Manager.LogTransition("S0", "S211", "call SaveProvider(Add,Existing,Length501,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable211()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Empty) -> S212");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 212;
				Manager.LogTransition("S0", "S212", "call SaveProvider(Add,Existing,Length501,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable212()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Length50) -> S213");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 213;
				Manager.LogTransition("S0", "S213", "call SaveProvider(Add,Existing,Length501,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable213()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Length51) -> S214");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 214;
				Manager.LogTransition("S0", "S214", "call SaveProvider(Add,Existing,Length501,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable214()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Length500) -> S215");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 215;
				Manager.LogTransition("S0", "S215", "call SaveProvider(Add,Existing,Length501,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable215()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,Existing,Length501,Length501,Length501) -> S216");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.StringType.Length501, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 216;
				Manager.LogTransition("S0", "S216", "call SaveProvider(Add,Existing,Length501,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable216()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Null) -> S217");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 217;
				Manager.LogTransition("S0", "S217", "call SaveProvider(Add,New,Null,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable217()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Empty) -> S218");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 218;
				Manager.LogTransition("S0", "S218", "call SaveProvider(Add,New,Null,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable218()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Length50) -> S219");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 219;
				Manager.LogTransition("S0", "S219", "call SaveProvider(Add,New,Null,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable219()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Length51) -> S220");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 220;
				Manager.LogTransition("S0", "S220", "call SaveProvider(Add,New,Null,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable220()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Length500) -> S221");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 221;
				Manager.LogTransition("S0", "S221", "call SaveProvider(Add,New,Null,Null,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable221()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Null,Length501) -> S222");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Null, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 222;
				Manager.LogTransition("S0", "S222", "call SaveProvider(Add,New,Null,Null,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable222()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Null) -> S223");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 223;
				Manager.LogTransition("S0", "S223", "call SaveProvider(Add,New,Null,Empty,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable223()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Empty) -> S224");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 224;
				Manager.LogTransition("S0", "S224", "call SaveProvider(Add,New,Null,Empty,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable224()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Length50) -> S225");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 225;
				Manager.LogTransition("S0", "S225", "call SaveProvider(Add,New,Null,Empty,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable225()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Length51) -> S226");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 226;
				Manager.LogTransition("S0", "S226", "call SaveProvider(Add,New,Null,Empty,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable226()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Length500) -> S227");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 227;
				Manager.LogTransition("S0", "S227", "call SaveProvider(Add,New,Null,Empty,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable227()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Empty,Length501) -> S228");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Empty, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 228;
				Manager.LogTransition("S0", "S228", "call SaveProvider(Add,New,Null,Empty,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable228()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Null) -> S229");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 229;
				Manager.LogTransition("S0", "S229", "call SaveProvider(Add,New,Null,Length50,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable229()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Empty) -> S230");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 230;
				Manager.LogTransition("S0", "S230", "call SaveProvider(Add,New,Null,Length50,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable230()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Length50) -> S231");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 231;
				Manager.LogTransition("S0", "S231", "call SaveProvider(Add,New,Null,Length50,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable231()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Length51) -> S232");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 232;
				Manager.LogTransition("S0", "S232", "call SaveProvider(Add,New,Null,Length50,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable232()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Length500) -> S233");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 233;
				Manager.LogTransition("S0", "S233", "call SaveProvider(Add,New,Null,Length50,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable233()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length50,Length501) -> S234");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length50, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 234;
				Manager.LogTransition("S0", "S234", "call SaveProvider(Add,New,Null,Length50,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable234()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Null) -> S235");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 235;
				Manager.LogTransition("S0", "S235", "call SaveProvider(Add,New,Null,Length51,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable235()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Empty) -> S236");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 236;
				Manager.LogTransition("S0", "S236", "call SaveProvider(Add,New,Null,Length51,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable236()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Length50) -> S237");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 237;
				Manager.LogTransition("S0", "S237", "call SaveProvider(Add,New,Null,Length51,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable237()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Length51) -> S238");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 238;
				Manager.LogTransition("S0", "S238", "call SaveProvider(Add,New,Null,Length51,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable238()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Length500) -> S239");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 239;
				Manager.LogTransition("S0", "S239", "call SaveProvider(Add,New,Null,Length51,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable239()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length51,Length501) -> S240");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length51, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 240;
				Manager.LogTransition("S0", "S240", "call SaveProvider(Add,New,Null,Length51,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable240()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Null) -> S241");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 241;
				Manager.LogTransition("S0", "S241", "call SaveProvider(Add,New,Null,Length500,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable241()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Empty) -> S242");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 242;
				Manager.LogTransition("S0", "S242", "call SaveProvider(Add,New,Null,Length500,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable242()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Length50) -> S243");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 243;
				Manager.LogTransition("S0", "S243", "call SaveProvider(Add,New,Null,Length500,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable243()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Length51) -> S244");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 244;
				Manager.LogTransition("S0", "S244", "call SaveProvider(Add,New,Null,Length500,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable244()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Length500) -> S245");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 245;
				Manager.LogTransition("S0", "S245", "call SaveProvider(Add,New,Null,Length500,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable245()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length500,Length501) -> S246");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length500, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 246;
				Manager.LogTransition("S0", "S246", "call SaveProvider(Add,New,Null,Length500,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable246()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Null) -> S247");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 247;
				Manager.LogTransition("S0", "S247", "call SaveProvider(Add,New,Null,Length501,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable247()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Empty) -> S248");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 248;
				Manager.LogTransition("S0", "S248", "call SaveProvider(Add,New,Null,Length501,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable248()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Length50) -> S249");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 249;
				Manager.LogTransition("S0", "S249", "call SaveProvider(Add,New,Null,Length501,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable249()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Length51) -> S250");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 250;
				Manager.LogTransition("S0", "S250", "call SaveProvider(Add,New,Null,Length501,Length51)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable250()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Length500) -> S251");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length500);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 251;
				Manager.LogTransition("S0", "S251", "call SaveProvider(Add,New,Null,Length501,Length500)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable251()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Null,Length501,Length501) -> S252");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Null, InputTypes.StringType.Length501, InputTypes.StringType.Length501);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 252;
				Manager.LogTransition("S0", "S252", "call SaveProvider(Add,New,Null,Length501,Length501)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable252()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Empty,Null,Null) -> S253");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Null);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 253;
				Manager.LogTransition("S0", "S253", "call SaveProvider(Add,New,Empty,Null,Null)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable253()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Empty,Null,Empty) -> S254");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Empty);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 254;
				Manager.LogTransition("S0", "S254", "call SaveProvider(Add,New,Empty,Null,Empty)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable254()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Empty,Null,Length50) -> S255");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length50);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 255;
				Manager.LogTransition("S0", "S255", "call SaveProvider(Add,New,Empty,Null,Length50)");
			}
			else
				finished = failed = true;
		}
		
		void StateS0Controllable255()
		{
			object[] outputs = null;
			
			Manager.BeginTransaction("S0 -> call SaveProvider(Add,New,Empty,Null,Length51) -> S256");


			try
			{
				ReturnTypes.ExceptionType arg0 =
							
					catalogwebserviceadapterInstance.SaveProvider(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.StringType.Empty, InputTypes.StringType.Null, InputTypes.StringType.Length51);
					
				outputs = new object[] {arg0};
				Manager.ObservationHandler.LogReturn(actions[0] as MethodBase, outputs);
			}
			catch(Exception e)
			{
				Manager.ObservationHandler.LogThrow(actions[0] as MethodBase, e);
			}

			if(Manager.EndTransaction())
			{
				currentState = 256;
				Manager.LogTransition("S0", "S256", "call SaveProvider(Add,New,Empty,Null,Length51)");
			}
			else
				finished = failed = true;
		}
		

		void ControllablesS0()
		{
			int choice = Manager.ChooseStep(256);
			if (Manager.BoundReached)
			{
				finished = true;
				failed = false;							
				return;
			}
			switch (choice)
			{
				case 0: StateS0Controllable0();
					break;
				case 1: StateS0Controllable1();
					break;
				case 2: StateS0Controllable2();
					break;
				case 3: StateS0Controllable3();
					break;
				case 4: StateS0Controllable4();
					break;
				case 5: StateS0Controllable5();
					break;
				case 6: StateS0Controllable6();
					break;
				case 7: StateS0Controllable7();
					break;
				case 8: StateS0Controllable8();
					break;
				case 9: StateS0Controllable9();
					break;
				case 10: StateS0Controllable10();
					break;
				case 11: StateS0Controllable11();
					break;
				case 12: StateS0Controllable12();
					break;
				case 13: StateS0Controllable13();
					break;
				case 14: StateS0Controllable14();
					break;
				case 15: StateS0Controllable15();
					break;
				case 16: StateS0Controllable16();
					break;
				case 17: StateS0Controllable17();
					break;
				case 18: StateS0Controllable18();
					break;
				case 19: StateS0Controllable19();
					break;
				case 20: StateS0Controllable20();
					break;
				case 21: StateS0Controllable21();
					break;
				case 22: StateS0Controllable22();
					break;
				case 23: StateS0Controllable23();
					break;
				case 24: StateS0Controllable24();
					break;
				case 25: StateS0Controllable25();
					break;
				case 26: StateS0Controllable26();
					break;
				case 27: StateS0Controllable27();
					break;
				case 28: StateS0Controllable28();
					break;
				case 29: StateS0Controllable29();
					break;
				case 30: StateS0Controllable30();
					break;
				case 31: StateS0Controllable31();
					break;
				case 32: StateS0Controllable32();
					break;
				case 33: StateS0Controllable33();
					break;
				case 34: StateS0Controllable34();
					break;
				case 35: StateS0Controllable35();
					break;
				case 36: StateS0Controllable36();
					break;
				case 37: StateS0Controllable37();
					break;
				case 38: StateS0Controllable38();
					break;
				case 39: StateS0Controllable39();
					break;
				case 40: StateS0Controllable40();
					break;
				case 41: StateS0Controllable41();
					break;
				case 42: StateS0Controllable42();
					break;
				case 43: StateS0Controllable43();
					break;
				case 44: StateS0Controllable44();
					break;
				case 45: StateS0Controllable45();
					break;
				case 46: StateS0Controllable46();
					break;
				case 47: StateS0Controllable47();
					break;
				case 48: StateS0Controllable48();
					break;
				case 49: StateS0Controllable49();
					break;
				case 50: StateS0Controllable50();
					break;
				case 51: StateS0Controllable51();
					break;
				case 52: StateS0Controllable52();
					break;
				case 53: StateS0Controllable53();
					break;
				case 54: StateS0Controllable54();
					break;
				case 55: StateS0Controllable55();
					break;
				case 56: StateS0Controllable56();
					break;
				case 57: StateS0Controllable57();
					break;
				case 58: StateS0Controllable58();
					break;
				case 59: StateS0Controllable59();
					break;
				case 60: StateS0Controllable60();
					break;
				case 61: StateS0Controllable61();
					break;
				case 62: StateS0Controllable62();
					break;
				case 63: StateS0Controllable63();
					break;
				case 64: StateS0Controllable64();
					break;
				case 65: StateS0Controllable65();
					break;
				case 66: StateS0Controllable66();
					break;
				case 67: StateS0Controllable67();
					break;
				case 68: StateS0Controllable68();
					break;
				case 69: StateS0Controllable69();
					break;
				case 70: StateS0Controllable70();
					break;
				case 71: StateS0Controllable71();
					break;
				case 72: StateS0Controllable72();
					break;
				case 73: StateS0Controllable73();
					break;
				case 74: StateS0Controllable74();
					break;
				case 75: StateS0Controllable75();
					break;
				case 76: StateS0Controllable76();
					break;
				case 77: StateS0Controllable77();
					break;
				case 78: StateS0Controllable78();
					break;
				case 79: StateS0Controllable79();
					break;
				case 80: StateS0Controllable80();
					break;
				case 81: StateS0Controllable81();
					break;
				case 82: StateS0Controllable82();
					break;
				case 83: StateS0Controllable83();
					break;
				case 84: StateS0Controllable84();
					break;
				case 85: StateS0Controllable85();
					break;
				case 86: StateS0Controllable86();
					break;
				case 87: StateS0Controllable87();
					break;
				case 88: StateS0Controllable88();
					break;
				case 89: StateS0Controllable89();
					break;
				case 90: StateS0Controllable90();
					break;
				case 91: StateS0Controllable91();
					break;
				case 92: StateS0Controllable92();
					break;
				case 93: StateS0Controllable93();
					break;
				case 94: StateS0Controllable94();
					break;
				case 95: StateS0Controllable95();
					break;
				case 96: StateS0Controllable96();
					break;
				case 97: StateS0Controllable97();
					break;
				case 98: StateS0Controllable98();
					break;
				case 99: StateS0Controllable99();
					break;
				case 100: StateS0Controllable100();
					break;
				case 101: StateS0Controllable101();
					break;
				case 102: StateS0Controllable102();
					break;
				case 103: StateS0Controllable103();
					break;
				case 104: StateS0Controllable104();
					break;
				case 105: StateS0Controllable105();
					break;
				case 106: StateS0Controllable106();
					break;
				case 107: StateS0Controllable107();
					break;
				case 108: StateS0Controllable108();
					break;
				case 109: StateS0Controllable109();
					break;
				case 110: StateS0Controllable110();
					break;
				case 111: StateS0Controllable111();
					break;
				case 112: StateS0Controllable112();
					break;
				case 113: StateS0Controllable113();
					break;
				case 114: StateS0Controllable114();
					break;
				case 115: StateS0Controllable115();
					break;
				case 116: StateS0Controllable116();
					break;
				case 117: StateS0Controllable117();
					break;
				case 118: StateS0Controllable118();
					break;
				case 119: StateS0Controllable119();
					break;
				case 120: StateS0Controllable120();
					break;
				case 121: StateS0Controllable121();
					break;
				case 122: StateS0Controllable122();
					break;
				case 123: StateS0Controllable123();
					break;
				case 124: StateS0Controllable124();
					break;
				case 125: StateS0Controllable125();
					break;
				case 126: StateS0Controllable126();
					break;
				case 127: StateS0Controllable127();
					break;
				case 128: StateS0Controllable128();
					break;
				case 129: StateS0Controllable129();
					break;
				case 130: StateS0Controllable130();
					break;
				case 131: StateS0Controllable131();
					break;
				case 132: StateS0Controllable132();
					break;
				case 133: StateS0Controllable133();
					break;
				case 134: StateS0Controllable134();
					break;
				case 135: StateS0Controllable135();
					break;
				case 136: StateS0Controllable136();
					break;
				case 137: StateS0Controllable137();
					break;
				case 138: StateS0Controllable138();
					break;
				case 139: StateS0Controllable139();
					break;
				case 140: StateS0Controllable140();
					break;
				case 141: StateS0Controllable141();
					break;
				case 142: StateS0Controllable142();
					break;
				case 143: StateS0Controllable143();
					break;
				case 144: StateS0Controllable144();
					break;
				case 145: StateS0Controllable145();
					break;
				case 146: StateS0Controllable146();
					break;
				case 147: StateS0Controllable147();
					break;
				case 148: StateS0Controllable148();
					break;
				case 149: StateS0Controllable149();
					break;
				case 150: StateS0Controllable150();
					break;
				case 151: StateS0Controllable151();
					break;
				case 152: StateS0Controllable152();
					break;
				case 153: StateS0Controllable153();
					break;
				case 154: StateS0Controllable154();
					break;
				case 155: StateS0Controllable155();
					break;
				case 156: StateS0Controllable156();
					break;
				case 157: StateS0Controllable157();
					break;
				case 158: StateS0Controllable158();
					break;
				case 159: StateS0Controllable159();
					break;
				case 160: StateS0Controllable160();
					break;
				case 161: StateS0Controllable161();
					break;
				case 162: StateS0Controllable162();
					break;
				case 163: StateS0Controllable163();
					break;
				case 164: StateS0Controllable164();
					break;
				case 165: StateS0Controllable165();
					break;
				case 166: StateS0Controllable166();
					break;
				case 167: StateS0Controllable167();
					break;
				case 168: StateS0Controllable168();
					break;
				case 169: StateS0Controllable169();
					break;
				case 170: StateS0Controllable170();
					break;
				case 171: StateS0Controllable171();
					break;
				case 172: StateS0Controllable172();
					break;
				case 173: StateS0Controllable173();
					break;
				case 174: StateS0Controllable174();
					break;
				case 175: StateS0Controllable175();
					break;
				case 176: StateS0Controllable176();
					break;
				case 177: StateS0Controllable177();
					break;
				case 178: StateS0Controllable178();
					break;
				case 179: StateS0Controllable179();
					break;
				case 180: StateS0Controllable180();
					break;
				case 181: StateS0Controllable181();
					break;
				case 182: StateS0Controllable182();
					break;
				case 183: StateS0Controllable183();
					break;
				case 184: StateS0Controllable184();
					break;
				case 185: StateS0Controllable185();
					break;
				case 186: StateS0Controllable186();
					break;
				case 187: StateS0Controllable187();
					break;
				case 188: StateS0Controllable188();
					break;
				case 189: StateS0Controllable189();
					break;
				case 190: StateS0Controllable190();
					break;
				case 191: StateS0Controllable191();
					break;
				case 192: StateS0Controllable192();
					break;
				case 193: StateS0Controllable193();
					break;
				case 194: StateS0Controllable194();
					break;
				case 195: StateS0Controllable195();
					break;
				case 196: StateS0Controllable196();
					break;
				case 197: StateS0Controllable197();
					break;
				case 198: StateS0Controllable198();
					break;
				case 199: StateS0Controllable199();
					break;
				case 200: StateS0Controllable200();
					break;
				case 201: StateS0Controllable201();
					break;
				case 202: StateS0Controllable202();
					break;
				case 203: StateS0Controllable203();
					break;
				case 204: StateS0Controllable204();
					break;
				case 205: StateS0Controllable205();
					break;
				case 206: StateS0Controllable206();
					break;
				case 207: StateS0Controllable207();
					break;
				case 208: StateS0Controllable208();
					break;
				case 209: StateS0Controllable209();
					break;
				case 210: StateS0Controllable210();
					break;
				case 211: StateS0Controllable211();
					break;
				case 212: StateS0Controllable212();
					break;
				case 213: StateS0Controllable213();
					break;
				case 214: StateS0Controllable214();
					break;
				case 215: StateS0Controllable215();
					break;
				case 216: StateS0Controllable216();
					break;
				case 217: StateS0Controllable217();
					break;
				case 218: StateS0Controllable218();
					break;
				case 219: StateS0Controllable219();
					break;
				case 220: StateS0Controllable220();
					break;
				case 221: StateS0Controllable221();
					break;
				case 222: StateS0Controllable222();
					break;
				case 223: StateS0Controllable223();
					break;
				case 224: StateS0Controllable224();
					break;
				case 225: StateS0Controllable225();
					break;
				case 226: StateS0Controllable226();
					break;
				case 227: StateS0Controllable227();
					break;
				case 228: StateS0Controllable228();
					break;
				case 229: StateS0Controllable229();
					break;
				case 230: StateS0Controllable230();
					break;
				case 231: StateS0Controllable231();
					break;
				case 232: StateS0Controllable232();
					break;
				case 233: StateS0Controllable233();
					break;
				case 234: StateS0Controllable234();
					break;
				case 235: StateS0Controllable235();
					break;
				case 236: StateS0Controllable236();
					break;
				case 237: StateS0Controllable237();
					break;
				case 238: StateS0Controllable238();
					break;
				case 239: StateS0Controllable239();
					break;
				case 240: StateS0Controllable240();
					break;
				case 241: StateS0Controllable241();
					break;
				case 242: StateS0Controllable242();
					break;
				case 243: StateS0Controllable243();
					break;
				case 244: StateS0Controllable244();
					break;
				case 245: StateS0Controllable245();
					break;
				case 246: StateS0Controllable246();
					break;
				case 247: StateS0Controllable247();
					break;
				case 248: StateS0Controllable248();
					break;
				case 249: StateS0Controllable249();
					break;
				case 250: StateS0Controllable250();
					break;
				case 251: StateS0Controllable251();
					break;
				case 252: StateS0Controllable252();
					break;
				case 253: StateS0Controllable253();
					break;
				case 254: StateS0Controllable254();
					break;
				case 255: StateS0Controllable255();
					break;
			}
		}
		
		#endregion


		#endregion

		#region StateS1
		
		void StateS1()
		{		
			Manager.LogState("S1");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS2
		
		void StateS2()
		{		
			Manager.LogState("S2");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS3
		
		void StateS3()
		{		
			Manager.LogState("S3");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS4
		
		void StateS4()
		{		
			Manager.LogState("S4");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS5
		
		void StateS5()
		{		
			Manager.LogState("S5");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS6
		
		void StateS6()
		{		
			Manager.LogState("S6");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS7
		
		void StateS7()
		{		
			Manager.LogState("S7");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS8
		
		void StateS8()
		{		
			Manager.LogState("S8");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS9
		
		void StateS9()
		{		
			Manager.LogState("S9");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS10
		
		void StateS10()
		{		
			Manager.LogState("S10");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS11
		
		void StateS11()
		{		
			Manager.LogState("S11");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS12
		
		void StateS12()
		{		
			Manager.LogState("S12");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS13
		
		void StateS13()
		{		
			Manager.LogState("S13");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS14
		
		void StateS14()
		{		
			Manager.LogState("S14");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS15
		
		void StateS15()
		{		
			Manager.LogState("S15");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS16
		
		void StateS16()
		{		
			Manager.LogState("S16");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS17
		
		void StateS17()
		{		
			Manager.LogState("S17");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS18
		
		void StateS18()
		{		
			Manager.LogState("S18");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS19
		
		void StateS19()
		{		
			Manager.LogState("S19");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS20
		
		void StateS20()
		{		
			Manager.LogState("S20");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS21
		
		void StateS21()
		{		
			Manager.LogState("S21");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS22
		
		void StateS22()
		{		
			Manager.LogState("S22");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS23
		
		void StateS23()
		{		
			Manager.LogState("S23");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS24
		
		void StateS24()
		{		
			Manager.LogState("S24");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS25
		
		void StateS25()
		{		
			Manager.LogState("S25");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS26
		
		void StateS26()
		{		
			Manager.LogState("S26");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS27
		
		void StateS27()
		{		
			Manager.LogState("S27");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS28
		
		void StateS28()
		{		
			Manager.LogState("S28");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS29
		
		void StateS29()
		{		
			Manager.LogState("S29");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS30
		
		void StateS30()
		{		
			Manager.LogState("S30");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS31
		
		void StateS31()
		{		
			Manager.LogState("S31");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS32
		
		void StateS32()
		{		
			Manager.LogState("S32");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS33
		
		void StateS33()
		{		
			Manager.LogState("S33");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS34
		
		void StateS34()
		{		
			Manager.LogState("S34");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS35
		
		void StateS35()
		{		
			Manager.LogState("S35");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS36
		
		void StateS36()
		{		
			Manager.LogState("S36");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS37
		
		void StateS37()
		{		
			Manager.LogState("S37");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS38
		
		void StateS38()
		{		
			Manager.LogState("S38");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS39
		
		void StateS39()
		{		
			Manager.LogState("S39");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS40
		
		void StateS40()
		{		
			Manager.LogState("S40");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS41
		
		void StateS41()
		{		
			Manager.LogState("S41");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS42
		
		void StateS42()
		{		
			Manager.LogState("S42");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS43
		
		void StateS43()
		{		
			Manager.LogState("S43");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS44
		
		void StateS44()
		{		
			Manager.LogState("S44");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS45
		
		void StateS45()
		{		
			Manager.LogState("S45");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS46
		
		void StateS46()
		{		
			Manager.LogState("S46");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS47
		
		void StateS47()
		{		
			Manager.LogState("S47");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS48
		
		void StateS48()
		{		
			Manager.LogState("S48");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS49
		
		void StateS49()
		{		
			Manager.LogState("S49");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS50
		
		void StateS50()
		{		
			Manager.LogState("S50");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS51
		
		void StateS51()
		{		
			Manager.LogState("S51");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS52
		
		void StateS52()
		{		
			Manager.LogState("S52");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS53
		
		void StateS53()
		{		
			Manager.LogState("S53");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS54
		
		void StateS54()
		{		
			Manager.LogState("S54");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS55
		
		void StateS55()
		{		
			Manager.LogState("S55");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS56
		
		void StateS56()
		{		
			Manager.LogState("S56");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS57
		
		void StateS57()
		{		
			Manager.LogState("S57");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS58
		
		void StateS58()
		{		
			Manager.LogState("S58");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS59
		
		void StateS59()
		{		
			Manager.LogState("S59");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS60
		
		void StateS60()
		{		
			Manager.LogState("S60");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS61
		
		void StateS61()
		{		
			Manager.LogState("S61");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS62
		
		void StateS62()
		{		
			Manager.LogState("S62");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS63
		
		void StateS63()
		{		
			Manager.LogState("S63");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS64
		
		void StateS64()
		{		
			Manager.LogState("S64");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS65
		
		void StateS65()
		{		
			Manager.LogState("S65");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS66
		
		void StateS66()
		{		
			Manager.LogState("S66");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS67
		
		void StateS67()
		{		
			Manager.LogState("S67");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS68
		
		void StateS68()
		{		
			Manager.LogState("S68");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS69
		
		void StateS69()
		{		
			Manager.LogState("S69");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS70
		
		void StateS70()
		{		
			Manager.LogState("S70");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS71
		
		void StateS71()
		{		
			Manager.LogState("S71");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS72
		
		void StateS72()
		{		
			Manager.LogState("S72");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS73
		
		void StateS73()
		{		
			Manager.LogState("S73");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS74
		
		void StateS74()
		{		
			Manager.LogState("S74");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS75
		
		void StateS75()
		{		
			Manager.LogState("S75");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS76
		
		void StateS76()
		{		
			Manager.LogState("S76");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS77
		
		void StateS77()
		{		
			Manager.LogState("S77");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS78
		
		void StateS78()
		{		
			Manager.LogState("S78");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS79
		
		void StateS79()
		{		
			Manager.LogState("S79");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS80
		
		void StateS80()
		{		
			Manager.LogState("S80");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS81
		
		void StateS81()
		{		
			Manager.LogState("S81");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS82
		
		void StateS82()
		{		
			Manager.LogState("S82");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS83
		
		void StateS83()
		{		
			Manager.LogState("S83");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS84
		
		void StateS84()
		{		
			Manager.LogState("S84");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS85
		
		void StateS85()
		{		
			Manager.LogState("S85");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS86
		
		void StateS86()
		{		
			Manager.LogState("S86");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS87
		
		void StateS87()
		{		
			Manager.LogState("S87");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS88
		
		void StateS88()
		{		
			Manager.LogState("S88");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS89
		
		void StateS89()
		{		
			Manager.LogState("S89");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS90
		
		void StateS90()
		{		
			Manager.LogState("S90");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS91
		
		void StateS91()
		{		
			Manager.LogState("S91");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS92
		
		void StateS92()
		{		
			Manager.LogState("S92");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS93
		
		void StateS93()
		{		
			Manager.LogState("S93");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS94
		
		void StateS94()
		{		
			Manager.LogState("S94");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS95
		
		void StateS95()
		{		
			Manager.LogState("S95");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS96
		
		void StateS96()
		{		
			Manager.LogState("S96");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS97
		
		void StateS97()
		{		
			Manager.LogState("S97");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS98
		
		void StateS98()
		{		
			Manager.LogState("S98");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS99
		
		void StateS99()
		{		
			Manager.LogState("S99");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS100
		
		void StateS100()
		{		
			Manager.LogState("S100");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS101
		
		void StateS101()
		{		
			Manager.LogState("S101");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS102
		
		void StateS102()
		{		
			Manager.LogState("S102");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS103
		
		void StateS103()
		{		
			Manager.LogState("S103");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS104
		
		void StateS104()
		{		
			Manager.LogState("S104");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS105
		
		void StateS105()
		{		
			Manager.LogState("S105");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS106
		
		void StateS106()
		{		
			Manager.LogState("S106");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS107
		
		void StateS107()
		{		
			Manager.LogState("S107");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS108
		
		void StateS108()
		{		
			Manager.LogState("S108");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS109
		
		void StateS109()
		{		
			Manager.LogState("S109");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS110
		
		void StateS110()
		{		
			Manager.LogState("S110");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS111
		
		void StateS111()
		{		
			Manager.LogState("S111");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS112
		
		void StateS112()
		{		
			Manager.LogState("S112");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS113
		
		void StateS113()
		{		
			Manager.LogState("S113");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS114
		
		void StateS114()
		{		
			Manager.LogState("S114");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS115
		
		void StateS115()
		{		
			Manager.LogState("S115");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS116
		
		void StateS116()
		{		
			Manager.LogState("S116");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS117
		
		void StateS117()
		{		
			Manager.LogState("S117");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS118
		
		void StateS118()
		{		
			Manager.LogState("S118");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS119
		
		void StateS119()
		{		
			Manager.LogState("S119");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS120
		
		void StateS120()
		{		
			Manager.LogState("S120");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS121
		
		void StateS121()
		{		
			Manager.LogState("S121");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS122
		
		void StateS122()
		{		
			Manager.LogState("S122");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS123
		
		void StateS123()
		{		
			Manager.LogState("S123");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS124
		
		void StateS124()
		{		
			Manager.LogState("S124");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS125
		
		void StateS125()
		{		
			Manager.LogState("S125");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS126
		
		void StateS126()
		{		
			Manager.LogState("S126");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS127
		
		void StateS127()
		{		
			Manager.LogState("S127");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS128
		
		void StateS128()
		{		
			Manager.LogState("S128");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS129
		
		void StateS129()
		{		
			Manager.LogState("S129");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS130
		
		void StateS130()
		{		
			Manager.LogState("S130");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS131
		
		void StateS131()
		{		
			Manager.LogState("S131");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS132
		
		void StateS132()
		{		
			Manager.LogState("S132");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS133
		
		void StateS133()
		{		
			Manager.LogState("S133");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS134
		
		void StateS134()
		{		
			Manager.LogState("S134");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS135
		
		void StateS135()
		{		
			Manager.LogState("S135");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS136
		
		void StateS136()
		{		
			Manager.LogState("S136");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS137
		
		void StateS137()
		{		
			Manager.LogState("S137");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS138
		
		void StateS138()
		{		
			Manager.LogState("S138");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS139
		
		void StateS139()
		{		
			Manager.LogState("S139");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS140
		
		void StateS140()
		{		
			Manager.LogState("S140");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS141
		
		void StateS141()
		{		
			Manager.LogState("S141");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS142
		
		void StateS142()
		{		
			Manager.LogState("S142");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS143
		
		void StateS143()
		{		
			Manager.LogState("S143");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS144
		
		void StateS144()
		{		
			Manager.LogState("S144");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS145
		
		void StateS145()
		{		
			Manager.LogState("S145");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS146
		
		void StateS146()
		{		
			Manager.LogState("S146");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS147
		
		void StateS147()
		{		
			Manager.LogState("S147");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS148
		
		void StateS148()
		{		
			Manager.LogState("S148");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS149
		
		void StateS149()
		{		
			Manager.LogState("S149");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS150
		
		void StateS150()
		{		
			Manager.LogState("S150");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS151
		
		void StateS151()
		{		
			Manager.LogState("S151");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS152
		
		void StateS152()
		{		
			Manager.LogState("S152");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS153
		
		void StateS153()
		{		
			Manager.LogState("S153");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS154
		
		void StateS154()
		{		
			Manager.LogState("S154");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS155
		
		void StateS155()
		{		
			Manager.LogState("S155");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS156
		
		void StateS156()
		{		
			Manager.LogState("S156");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS157
		
		void StateS157()
		{		
			Manager.LogState("S157");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS158
		
		void StateS158()
		{		
			Manager.LogState("S158");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS159
		
		void StateS159()
		{		
			Manager.LogState("S159");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS160
		
		void StateS160()
		{		
			Manager.LogState("S160");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS161
		
		void StateS161()
		{		
			Manager.LogState("S161");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS162
		
		void StateS162()
		{		
			Manager.LogState("S162");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS163
		
		void StateS163()
		{		
			Manager.LogState("S163");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS164
		
		void StateS164()
		{		
			Manager.LogState("S164");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS165
		
		void StateS165()
		{		
			Manager.LogState("S165");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS166
		
		void StateS166()
		{		
			Manager.LogState("S166");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS167
		
		void StateS167()
		{		
			Manager.LogState("S167");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS168
		
		void StateS168()
		{		
			Manager.LogState("S168");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS169
		
		void StateS169()
		{		
			Manager.LogState("S169");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS170
		
		void StateS170()
		{		
			Manager.LogState("S170");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS171
		
		void StateS171()
		{		
			Manager.LogState("S171");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS172
		
		void StateS172()
		{		
			Manager.LogState("S172");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS173
		
		void StateS173()
		{		
			Manager.LogState("S173");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS174
		
		void StateS174()
		{		
			Manager.LogState("S174");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS175
		
		void StateS175()
		{		
			Manager.LogState("S175");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS176
		
		void StateS176()
		{		
			Manager.LogState("S176");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS177
		
		void StateS177()
		{		
			Manager.LogState("S177");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS178
		
		void StateS178()
		{		
			Manager.LogState("S178");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS179
		
		void StateS179()
		{		
			Manager.LogState("S179");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS180
		
		void StateS180()
		{		
			Manager.LogState("S180");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS181
		
		void StateS181()
		{		
			Manager.LogState("S181");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS182
		
		void StateS182()
		{		
			Manager.LogState("S182");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS183
		
		void StateS183()
		{		
			Manager.LogState("S183");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS184
		
		void StateS184()
		{		
			Manager.LogState("S184");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS185
		
		void StateS185()
		{		
			Manager.LogState("S185");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS186
		
		void StateS186()
		{		
			Manager.LogState("S186");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS187
		
		void StateS187()
		{		
			Manager.LogState("S187");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS188
		
		void StateS188()
		{		
			Manager.LogState("S188");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS189
		
		void StateS189()
		{		
			Manager.LogState("S189");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS190
		
		void StateS190()
		{		
			Manager.LogState("S190");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS191
		
		void StateS191()
		{		
			Manager.LogState("S191");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS192
		
		void StateS192()
		{		
			Manager.LogState("S192");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS193
		
		void StateS193()
		{		
			Manager.LogState("S193");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS194
		
		void StateS194()
		{		
			Manager.LogState("S194");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS195
		
		void StateS195()
		{		
			Manager.LogState("S195");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS196
		
		void StateS196()
		{		
			Manager.LogState("S196");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS197
		
		void StateS197()
		{		
			Manager.LogState("S197");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS198
		
		void StateS198()
		{		
			Manager.LogState("S198");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS199
		
		void StateS199()
		{		
			Manager.LogState("S199");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS200
		
		void StateS200()
		{		
			Manager.LogState("S200");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS201
		
		void StateS201()
		{		
			Manager.LogState("S201");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS202
		
		void StateS202()
		{		
			Manager.LogState("S202");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS203
		
		void StateS203()
		{		
			Manager.LogState("S203");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS204
		
		void StateS204()
		{		
			Manager.LogState("S204");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS205
		
		void StateS205()
		{		
			Manager.LogState("S205");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS206
		
		void StateS206()
		{		
			Manager.LogState("S206");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS207
		
		void StateS207()
		{		
			Manager.LogState("S207");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS208
		
		void StateS208()
		{		
			Manager.LogState("S208");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS209
		
		void StateS209()
		{		
			Manager.LogState("S209");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS210
		
		void StateS210()
		{		
			Manager.LogState("S210");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS211
		
		void StateS211()
		{		
			Manager.LogState("S211");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS212
		
		void StateS212()
		{		
			Manager.LogState("S212");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS213
		
		void StateS213()
		{		
			Manager.LogState("S213");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS214
		
		void StateS214()
		{		
			Manager.LogState("S214");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS215
		
		void StateS215()
		{		
			Manager.LogState("S215");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS216
		
		void StateS216()
		{		
			Manager.LogState("S216");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS217
		
		void StateS217()
		{		
			Manager.LogState("S217");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS218
		
		void StateS218()
		{		
			Manager.LogState("S218");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS219
		
		void StateS219()
		{		
			Manager.LogState("S219");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS220
		
		void StateS220()
		{		
			Manager.LogState("S220");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS221
		
		void StateS221()
		{		
			Manager.LogState("S221");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS222
		
		void StateS222()
		{		
			Manager.LogState("S222");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS223
		
		void StateS223()
		{		
			Manager.LogState("S223");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS224
		
		void StateS224()
		{		
			Manager.LogState("S224");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS225
		
		void StateS225()
		{		
			Manager.LogState("S225");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS226
		
		void StateS226()
		{		
			Manager.LogState("S226");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS227
		
		void StateS227()
		{		
			Manager.LogState("S227");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS228
		
		void StateS228()
		{		
			Manager.LogState("S228");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS229
		
		void StateS229()
		{		
			Manager.LogState("S229");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS230
		
		void StateS230()
		{		
			Manager.LogState("S230");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS231
		
		void StateS231()
		{		
			Manager.LogState("S231");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS232
		
		void StateS232()
		{		
			Manager.LogState("S232");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS233
		
		void StateS233()
		{		
			Manager.LogState("S233");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS234
		
		void StateS234()
		{		
			Manager.LogState("S234");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS235
		
		void StateS235()
		{		
			Manager.LogState("S235");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS236
		
		void StateS236()
		{		
			Manager.LogState("S236");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS237
		
		void StateS237()
		{		
			Manager.LogState("S237");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS238
		
		void StateS238()
		{		
			Manager.LogState("S238");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS239
		
		void StateS239()
		{		
			Manager.LogState("S239");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS240
		
		void StateS240()
		{		
			Manager.LogState("S240");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS241
		
		void StateS241()
		{		
			Manager.LogState("S241");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS242
		
		void StateS242()
		{		
			Manager.LogState("S242");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS243
		
		void StateS243()
		{		
			Manager.LogState("S243");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS244
		
		void StateS244()
		{		
			Manager.LogState("S244");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS245
		
		void StateS245()
		{		
			Manager.LogState("S245");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS246
		
		void StateS246()
		{		
			Manager.LogState("S246");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS247
		
		void StateS247()
		{		
			Manager.LogState("S247");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS248
		
		void StateS248()
		{		
			Manager.LogState("S248");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS249
		
		void StateS249()
		{		
			Manager.LogState("S249");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS250
		
		void StateS250()
		{		
			Manager.LogState("S250");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS251
		
		void StateS251()
		{		
			Manager.LogState("S251");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS252
		
		void StateS252()
		{		
			Manager.LogState("S252");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS253
		
		void StateS253()
		{		
			Manager.LogState("S253");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS254
		
		void StateS254()
		{		
			Manager.LogState("S254");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS255
		
		void StateS255()
		{		
			Manager.LogState("S255");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		#region StateS256
		
		void StateS256()
		{		
			Manager.LogState("S256");

   
			Manager.LogConformanceError("Non-accepting end state reached.");
			nonAcceptingEnd = true;
			finished = true;
			failed = true;
		}	



		#endregion

		
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\XmlUtil.cs ===
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Text;
using System.Threading;
using System.Xml;
using System.Xml.XPath;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Data.SqlClient;

namespace xonline.server.marketplace.test
{
    public static class XmlUtil
    {
        /// <summary>
        /// Validates that the node described by the XPath experession exists
        /// </summary>
        /// <param name="result">The result to validate</param>
        /// <param name="path">The XPAth to the node to check for</param>
        /// <returns>If a node does exist, returns the first one</returns>
        public static String ValidateNodeExists(IDocumentResult result, String path)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XPathNodeIterator iterator = navigator.Select(path);
            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }
            return iterator.Current.Value;
        }

        public static String ValidateNodeExists(IDocumentResult result, String path, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);


            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }
            return iterator.Current.Value;
        }

        public static String ValidateNodeExists(XPathNavigator navigator, String path, NameValueCollection namespaces)
        {
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);


            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document", path));
            }
            return iterator.Current.Value;
        }

        public static String ValidateNodeDoesNotExist(IDocumentResult result, String path, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);

            if (iterator.MoveNext())
            {
                throw new Exception(String.Format("Found node [{0}] in document [{1}] when it was not expected", path, result.Id));
            }
            return iterator.Current.Value;
        }

        public static void ValidateNodeDoesNotExist(XPathNavigator navigator, string path, NameValueCollection namespaces)
        {
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);

            if (iterator.MoveNext())
            {
                throw new Exception(String.Format("Found node [{0}] in document when it was not expected", path));
            }            
        }

        public static void ValidateNodeDoesNotExist(IDocumentResult result, String path)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XPathNodeIterator iterator = navigator.Select(path);
            if (iterator.MoveNext())
            {
                throw new Exception(String.Format("Found node [{0}] in document [{1}] when it was not expected", path, result.Id));
            }
        }

        /// <summary>
        /// Validayes that a node described by the xpath exists and that the first one has the given value
        /// </summary>
        /// <param name="result">The result to validate</param>
        /// <param name="path">The XPath to the node to check for</param>
        /// <param name="expectedValue">The expected value for the first instance of this node</param>
        public static void ValidateNodeExistsWithValue(IDocumentResult result, String path, String expectedValue)
        {
            String actualValue = ValidateNodeExists(result, path);
            if (actualValue != expectedValue)
            {
                throw new Exception(String.Format("For node [{0}] expected [{1}] but received [{2}]", path, expectedValue, actualValue));
            }
        }

        public static void ValidateNodeExistsWithValue(IDocumentResult result, String path, String expectedValue, NameValueCollection nameSpaces)
        {
            String actualValue = ValidateNodeExists(result, path, nameSpaces);
            if (actualValue != expectedValue)
            {
                throw new Exception(String.Format("For node [{0}] expected [{1}] but received [{2}]", path, expectedValue, actualValue));
            }
        }

        public static void ValidateNodeExistsWithValue(XPathNavigator nav, String path, String expectedValue, NameValueCollection nameSpaces)
        {
            String actualValue = ValidateNodeExists(nav, path, nameSpaces);
            if (actualValue != expectedValue)
            {
                throw new Exception(String.Format("For node [{0}] expected [{1}] but received [{2}]", path, expectedValue, actualValue));
            }
        }

        public static void ValidateNodeExistsWithAttributes(IDocumentResult result, String path, NameValueCollection attributes, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);

            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }

            if (attributes != null)
            {
                foreach (String attributeName in attributes.AllKeys)
                {
                    string attributeValue = iterator.Current.GetAttribute(attributeName, "");
                    if (attributeValue != attributes[attributeName])
                    {
                        throw new Exception(String.Format("For node [{0}] expected attribute [{1}] but received [{2}]", path, attributes[attributeName], attributeValue));
                    }
                }
            }
        }

        public static void ValidateNodeExistsWithAttributesAndValue(IDocumentResult result, String path, NameValueCollection attributes, String expectedValue, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);

            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }

            if (attributes != null)
            {
                foreach (String attributeName in attributes.AllKeys)
                {
                    string attributeValue = iterator.Current.GetAttribute(attributeName, "");
                    if (attributeValue != attributes[attributeName])
                    {
                        throw new Exception(String.Format("For node [{0}] expected attribute [{1}] but received [{2}]", path, attributes[attributeName], attributeValue));
                    }
                }
            }
            String actualValue = iterator.Current.Value;
            if (actualValue != expectedValue)
            {
                throw new Exception(String.Format("For node [{0}] expected [{1}] but received [{2}]", path, expectedValue, actualValue));
            }
        }

        /// <summary>
        /// Validates that a node described by the xpath exists with the given attributes and that the first one has the given value
        /// </summary>
        /// <param name="result">The result to validate</param>
        /// <param name="path">The XPath to the node to check for</param>
        /// <param name="attributes">The list of attributes/values for the given node</param>
        /// <param name="expectedValue">The expected value for the first instance of this node</param>
        public static void ValidateNodeExistsWithAttributesAndValue(IDocumentResult result, String path, NameValueCollection attributes, String expectedValue)
        {
            ValidateNodeExistsWithAttributesAndValue(result, path, attributes, expectedValue, null);
        }

        /// <summary>
        /// Get the xml path iterator for the node with the given path and the node that has the given value
        /// This method should be used when there is an array of nodes rather than a single node (for example, offerInstances)
        /// </summary>
        /// <param name="result">document</param>
        /// <param name="path">the xml path to the node</param>
        /// <param name="nodeValue">The value of the node</param>
        /// <returns></returns>
        public static XPathNodeIterator GetXmlIteratorWithValue(IDocumentResult result, String path, String nodeValue, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);
            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }
            while (true)
            {
                String value = iterator.Current.Value;
                if (value == nodeValue)
                {
                    break;
                }
                if (!iterator.MoveNext())
                {
                    throw new Exception(String.Format("Could not find [{0}] with value [{1}] in document [{2}]", path, nodeValue, result.Id));
                }
            }
            iterator.Current.MoveToParent();
            return iterator;
        }

        /// <summary>
        /// Get the xml path iterator for the node with the given path and the node that has the given value
        /// This method should be used when there is an array of nodes rather than a single node (for example, offerInstances)
        /// </summary>
        /// <param name="result">document</param>
        /// <param name="path">the xml path to the node</param>
        /// <param name="nodeValue">The value of the node</param>
        /// <returns></returns>
        public static XPathNodeIterator GetXmlIteratorWithAttributes(IDocumentResult result, String path, NameValueCollection attributes)
        {
            return GetXmlIteratorWithAttributes(result, path, attributes, null);
        }

        /// <summary>
        /// Get the xml path iterator for the node with the given path and the node that has the given value
        /// This method should be used when there is an array of nodes rather than a single node (for example, offerInstances)
        /// </summary>
        /// <param name="result">document</param>
        /// <param name="path">the xml path to the node</param>
        /// <param name="attributes">List of the attributes</param>
        /// <returns></returns>
        public static XPathNodeIterator GetXmlIteratorWithAttributes(IDocumentResult result, String path, NameValueCollection attributes, NameValueCollection namespaces)
        {
            if (String.IsNullOrEmpty(result.Document))
            {
                throw new Exception(String.Format("Expected to get xml document but got [{0}] for id {1}", result.Document, result.Id));
            }

            XPathDocument document = new XPathDocument(new StringReader(result.Document));
            XPathNavigator navigator = document.CreateNavigator();
            XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());
            if (namespaces != null)
            {
                foreach (String prefix in namespaces.AllKeys)
                {
                    mngr.AddNamespace(prefix, namespaces[prefix]);
                }
            }
            XPathNodeIterator iterator = navigator.Select(path, mngr);
            if (!iterator.MoveNext())
            {
                throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, result.Id));
            }

            while (true && attributes != null)
            {
                bool allAttributesMatched = true;
                foreach (String attributeName in attributes.AllKeys)
                {
                    string attributeValue = iterator.Current.GetAttribute(attributeName, "");
                    if (attributeValue != attributes[attributeName])
                    {
                        allAttributesMatched = false;
                        break;
                    }
                }
                if (!allAttributesMatched)
                {
                    if (!iterator.MoveNext())
                    {
                        throw new Exception(String.Format("No node found with name[{0}] with attributes [{1}]", path, attributes));
                    }
                }
                else
                {
                    break;
                }
            }
            return iterator;
        }



        /// <summary>
        /// Check if the node exists at the given path and has the given attributes and node value
        /// This method along with GetXmlIteratorWithValue facilitates locating and verifying element arrays (like offerInstances)
        /// </summary>
        /// <param name="iterator">The xml path iterator</param>
        /// <param name="documentId">document Id for debugging purposes</param>
        /// <param name="path">the path of the xml node</param>
        /// <param name="attributes">attributes of the node</param>
        /// <param name="expectedValue">the expected value</param>       
        public static void ValidateNodeExistsWithValue(XPathNodeIterator iterator, String documentId, String path, NameValueCollection attributes, String expectedValue)
        {
            ValidateNodeExistsWithValue(iterator, documentId, path, attributes, expectedValue, null, true);
        }

        public static void ValidateNodeExistsWithValue(XPathNodeIterator iterator, String documentId, String path, NameValueCollection attributes, String expectedValue, String namespaceUri)
        {
            ValidateNodeExistsWithValue(iterator, documentId, path, attributes, expectedValue, namespaceUri, true);
        }

        private static void ValidateNodeExistsWithValue(XPathNodeIterator iterator, String documentId, String path, NameValueCollection attributes, String expectedValue, String namespaceUri, bool rootLevel)
        {
            int index = path.IndexOf('/');
            String remainingPath = (index == -1) ? String.Empty : path.Substring(index + 1, path.Length - index - 1);
            path = (index == -1) ? path : path.Substring(0, index);
            if (rootLevel)
            {
                // if we are the top most level in the query path, then reset the iterator to the parent and then to the child
                if (!iterator.Current.MoveToChild(path, namespaceUri))
                {
                    throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, documentId));
                }
            }
            if (remainingPath != String.Empty)  // There is still a subpath; so continue processing recursively
            {
                XPathNodeIterator childIter = iterator.Clone(); // Make a copy
                if (!childIter.Current.MoveToChild(XPathNodeType.All))  // Move the iterator to the child elements
                {
                    throw new Exception(String.Format("Could not find [{0}] in document [{1}]", remainingPath, documentId));
                }
                // Recursively find the child
                ValidateNodeExistsWithValue(childIter, documentId, remainingPath, attributes, expectedValue, namespaceUri, false);
                return;
            }
            // We have reached the leaf; lets check for the value
            while (true)
            {
                String actualValue = iterator.Current.Value;
                if (actualValue == expectedValue)
                {
                    break;
                }
                // Since this could be an array of nodes rather than a single node, continue looking for the node among other siblings
                if (!iterator.Current.MoveToNext(path, namespaceUri))
                {
                    throw new Exception(String.Format("For node [{0}] in document[{1}] no node found with value [{2}]", path, documentId, expectedValue));
                }
            }

            // We have found the node; lets check for the attributes
            if (attributes != null)
            {
                foreach (String attributeName in attributes.AllKeys)
                {
                    string attributeValue = iterator.Current.GetAttribute(attributeName, "");
                    if (attributeValue != attributes[attributeName])
                    {
                        throw new Exception(String.Format("For node [{0}] expected attribute [{1}] but received [{2}]", path, attributes[attributeName], attributeValue));
                    }
                }
            }
            iterator.Current.MoveToParent();
        }


        /// <param name="rootLevel">This indicates whether we are the root node of the path tree</param>       
        private static void ValidateNodeExistsWithValue(XPathNodeIterator iterator, String documentId, String path, NameValueCollection attributes, String expectedValue, bool rootLevel)
        {
            int index = path.IndexOf('/');
            String remainingPath = (index == -1) ? String.Empty : path.Substring(index + 1, path.Length - index - 1);
            path = (index == -1) ? path : path.Substring(0, index);
            if (rootLevel)
            {
                // if we are the top most level in the query path, then reset the iterator to the parent and then to the child                
                if (!iterator.Current.MoveToChild(path, ""))
                {
                    throw new Exception(String.Format("Could not find [{0}] in document [{1}]", path, documentId));
                }
            }
            if (remainingPath != String.Empty)  // There is still a subpath; so continue processing recursively
            {
                XPathNodeIterator childIter = iterator.Clone(); // Make a copy
                if (!childIter.Current.MoveToChild(XPathNodeType.All))  // Move the iterator to the child elements
                {
                    throw new Exception(String.Format("Could not find [{0}] in document [{1}]", remainingPath, documentId));
                }
                // Recursively find the child
                ValidateNodeExistsWithValue(childIter, documentId, remainingPath, attributes, expectedValue, false);
                return;
            }
            // We have reached the leaf; lets check for the value
            while (true)
            {
                String actualValue = iterator.Current.Value;
                if (actualValue == expectedValue)
                {
                    break;
                }
                // Since this could be an array of nodes rather than a single node, continue looking for the node among other siblings
                if (!iterator.Current.MoveToNext(path, ""))
                {
                    throw new Exception(String.Format("For node [{0}] in document[{1}] no node found with value [{2}]", path, documentId, expectedValue));
                }
            }

            // We have found the node; lets check for the attributes
            if (attributes != null)
            {
                foreach (String attributeName in attributes.AllKeys)
                {
                    string attributeValue = iterator.Current.GetAttribute(attributeName, "");
                    if (attributeValue != attributes[attributeName])
                    {
                        throw new Exception(String.Format("For node [{0}] expected attribute [{1}] but received [{2}]", path, attributes[attributeName], attributeValue));
                    }
                }
            }
        }

        public static void ValidateNodeDoesNotExistWithValue(XPathNavigator nav, String path, String value, NameValueCollection namespaces)
        {
            bool bException = false;
            try
            {
                ValidateNodeExistsWithValue(nav, path, value, namespaces);
            }
            catch(Exception)
            {
                bException = true;
            }
            if (!bException)
            {
                throw new Exception(String.Format("Found [{0}] in document", path));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.Common\Interfaces.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.EMS.Tools.Common
{
    /// <summary>
    /// Defines the Parameter class
    /// </summary>
    public class Parameter
    {
        #region Fields 

        string parentMethod;
        string parameterName;
        string parameterType;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the name of the parameter's parent method
        /// </summary>
        public string ParentMethod
        {
            get { return parentMethod; }
        }

        /// <summary>
        /// Get the name of the parameters
        /// </summary>
        public string ParameterName
        {
            get { return parameterName; }
        }

        /// <summary>
        /// Get the type of the parameter
        /// </summary>
        public string ParameterType
        {
            get { return parameterType; }
        }

        #endregion

        #region Constructor 

        /// <summary>
        /// Constructs a new Parameter object
        /// </summary>
        /// <param name="parentMethod">The name of the parameter's parent method</param>
        /// <param name="parameterType">The type fo the parameter</param>
        /// <param name="parameterName">The name of the parameter</param>
        public Parameter(string parentMethod, string parameterType, string parameterName)
        {
            if (string.IsNullOrEmpty(parentMethod) ||
                string.IsNullOrEmpty(parameterType) ||
                string.IsNullOrEmpty(parameterName))
                throw new ArgumentNullException("One of the required constructor arguments was null or empty!");
            this.parentMethod = parentMethod;
            this.parameterType = parameterType;
            this.parameterName = parameterName;
        }

        #endregion
    }

    /// <summary>
    /// Defines the DataInterface interface
    /// </summary>
    public interface IDataInterface
    {
        string TopBoilerPlateCode { get; }
        string BottomBoilerPlateCode { get; }
        string TestcaseBoilerPlateCode { get; }

        /// <summary>
        /// Load the interface and do any specific processing required to extract a list
        /// of API and parameter names.
        /// </summary>
        /// <param name="requiredData">
        /// An object array which can contain any necessary data to properly load the interface
        /// </param>
        void LoadInterface(string serverName, object[] interfaceSpecificData);

        /// <summary>
        /// Retrieve a list of API names for the interface which has been loaded
        /// </summary>
        /// <returns>A list of API names</returns>
        List<string> GetListOfAPINames();
        
        /// <summary>
        /// Retrieve a list of parameter names for an API on the interface which has been loaded
        /// </summary>
        /// <param name="apiName">The API whose parameters are being retrieved</param>
        /// <returns>A list of parameters for the specified API</returns>
        List<Parameter> GetListOfParameters(string apiName);

        /// <summary>
        /// Execute the specified API with the parameters provided
        /// </summary>
        /// <param name="apiName">The API to execute</param>
        /// <param name="parameters">The parameters required for the API</param>
        /// <returns>The results of the executed APIf</returns>
        string ExecuteAPI(string apiName, string parameters, object[] interfaceSpecificData);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.Common\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Microsoft.EMS.Tools.Common")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MSIT")]
[assembly: AssemblyProduct("Microsoft.EMS.Tools.Common")]
[assembly: AssemblyCopyright("Copyright © MSIT 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("5345aa95-8bd8-4335-98ad-5ecf63cc96ba")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.FrontDoor\FrontDoorAPIs.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using System.Xml;
using System.Xml.XPath;

namespace Microsoft.EMS.Tools
{
    public class CatalogAPI
    {
        #region Fields

        private Dictionary<string, List<string>> parameterValues;
        private string[] parameters;
        private string catalogAPIBase;
        private string catalogAPIName;

        private static Dictionary<string, List<string>> availableParameters = new Dictionary<string,List<string>>();
        private static Dictionary<string, string> methodBase = new Dictionary<string,string>();
        private static Dictionary<string, Dictionary<string, string>> parameterMappings = new Dictionary<string,Dictionary<string,string>>();

        #endregion

        #region Properties

        /// <summary>
        /// Gets the collection of available parameters for all methods
        /// </summary>
        public static Dictionary<string, List<string>> AvailableParameters
        {
            get
            {
                return availableParameters;
            }
        }

        /// <summary>
        /// Gets the base strings for all of the avaialble methods
        /// </summary>
        public static Dictionary<string, string> MethodBase
        {
            get
            {
                return methodBase;
            }
        }

        /// <summary>
        /// Gets the mappings for any parameters which have different names than what the underlying stored procedure uses
        /// </summary>
        public static Dictionary<string, Dictionary<string, string>> ParameterMappings
        {
            get
            {
                return parameterMappings;
            }
        }

        #endregion
        
        #region Constructor and Initialization

        /// <summary>
        /// Constructs the catalog API object which stores information regarding the method that will be invoked
        /// </summary>
        public CatalogAPI()
        {
            parameterValues = new Dictionary<string, List<string>>();
            parameters = null;
            catalogAPIBase = String.Empty;
            catalogAPIName = String.Empty;
        }

        /// <summary>
        /// Initialized the Catalog API with required information
        /// </summary>
        /// <param name="apiName">The name of the method to invoke</param>
        /// <param name="specifiedParameters">The parameters to be used when calling the method</param>
        public void Initialize(string apiName, string specifiedParameters)
        {
            catalogAPIName = apiName;
            catalogAPIBase = methodBase[apiName];
            parameters = new string[availableParameters[apiName].Count];
            availableParameters[apiName].CopyTo(parameters);
            
            ProcessParameters(apiName, specifiedParameters);            
        }

        private void ProcessParameters(string pathBase, string specifiedParameters)
        {
            int xmlnsIndex = specifiedParameters.IndexOf("xmlns");
            int endXmlnsIndex = specifiedParameters.IndexOf('\"', xmlnsIndex);
            endXmlnsIndex = specifiedParameters.IndexOf('\"', endXmlnsIndex + 1);

            specifiedParameters = specifiedParameters.Remove(
                specifiedParameters.IndexOf("xmlns"),
                endXmlnsIndex - xmlnsIndex + 1);

            TextReader textReader = new StringReader(specifiedParameters);            
            XPathDocument document = new XPathDocument(textReader);
            XPathNavigator navigator = document.CreateNavigator();                    
            string targetPath = String.Empty;

            foreach (string parameter in parameters)
            {
                targetPath = String.Format("//{0}/{1}", pathBase, parameter);
                XPathExpression expression = navigator.Compile(targetPath);                
                XPathNodeIterator nodes = navigator.Select(expression);

                while (nodes.MoveNext())
                {
                    if (!parameterValues.ContainsKey(parameter))
                        parameterValues.Add(parameter, new List<string>());

                    if (!nodes.Current.InnerXml.Contains("a b="))
                        parameterValues[parameter].Add(nodes.Current.Value);
                    else
                    {
                        targetPath += "/a";
                        expression = navigator.Compile(targetPath);  
                        XPathNodeIterator arrayNodes = navigator.Select(expression);
                        while (arrayNodes.MoveNext())
                        {
                            parameterValues[parameter].Add(arrayNodes.Current.GetAttribute("b", ""));
                        }
                    }
                }
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Output the catalog API in string form.
        /// </summary>
        /// <returns>The method call in string form</returns>
        public override string ToString()
        {
            StringBuilder parametersBuilder = new StringBuilder();
            string parameterName = String.Empty;

            //iterate through each parameter name
            foreach (string key in parameterValues.Keys)
            {
                //iterate through the values to be used for the current parameter
                foreach (string value in parameterValues[key])
                {
                    parameterName = key;

                    //if the parameter name differs when calling the front door, use the front door's parameter name
                    if (parameterMappings.ContainsKey(catalogAPIName) &&
                        parameterMappings[catalogAPIName].ContainsKey(parameterName))
                        parameterName = parameterMappings[catalogAPIName][parameterName];

                    //append the parameter and its value to the final string
                    parametersBuilder.Append(
                        String.Format("&Names={0}&Values={1}", parameterName, value));
                }
            }

            return catalogAPIBase + parametersBuilder.ToString();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.FrontDoor\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

copyConfigToTarget:
    copy $(TARGETNAME).dll.config $(TARGETPATH)\$(BUILDTARGET)\$(TARGETNAME).dll.config
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.StoredProcedures\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

copyConfigToTarget:
    copy $(TARGETNAME).dll.config $(TARGETPATH)\$(BUILDTARGET)\$(TARGETNAME).dll.config
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.FrontDoor\FrontDoorLoader.cs ===
using System;
using System.Configuration;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.XPath;

using Microsoft.EMS.Tools.Common;
using System.Net;
using System.IO.Compression;

namespace Microsoft.EMS.Tools
{
    public class FrontDoorLoader : IDataInterface
    {
        #region Fields

        private static bool useGzip = false;
        private static string gzipHeader = String.Empty;
        private static string frontDoorAddress = String.Empty;

        private List<string> retrievedProcedures;
        private Dictionary<string, List<Parameter>> retrievedParameters;
        private string generatedSchema = String.Empty;
        
        #endregion

        #region Properties
               

        #endregion

        #region Constructor

        /// <summary>
        /// Constructs the FrontDoorLoader
        /// </summary>
        public FrontDoorLoader()
        {
            retrievedProcedures = new List<string>();
            retrievedParameters = new Dictionary<string, List<Parameter>>();            
        }

        #endregion

        #region DataInterfaceLoader Members

        /// <summary>
        /// Load the APIs for the specified interface
        /// </summary>
        /// <param name="requiredData">Required data to load the interface</param>        
        public void LoadInterface(string serverName, object[] interfaceSpecificData)
        {
            LoadConfiguration();
            LoadAvailableParameters();

            retrievedProcedures.Clear();
            retrievedParameters.Clear();
            frontDoorAddress = String.Format("http://{0}", serverName);            

            foreach (string method in CatalogAPI.AvailableParameters.Keys)
            {
                retrievedProcedures.Add(method);
                retrievedParameters.Add(method, new List<Parameter>());

                foreach (string parameter in CatalogAPI.AvailableParameters[method])
                {
                    retrievedParameters[method].Add(
                        new Parameter(method, "unknown", parameter));
                }
            }
        }

        private void LoadConfiguration()
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(
                System.Reflection.Assembly.GetExecutingAssembly().Location);

            gzipHeader = config.AppSettings.Settings["Gzip"].Value;

            if (gzipHeader != String.Empty)
            {
                //The header will be specified, but no compression will be used
                if (gzipHeader == "gzip off" ||
                    gzipHeader == "gzip; q=0")
                    useGzip = false;

                else
                    useGzip = true;
            }
        }
                
        private void LoadAvailableParameters()
        {
            StreamReader reader = new StreamReader("AvailableMethods.xml");
            string content = reader.ReadToEnd();
            reader.Close();

            TextReader textReader = new StringReader(content);
            XPathDocument document = new XPathDocument(textReader);
            XPathNavigator navigator = document.CreateNavigator();
            XPathNodeIterator nodes = navigator.Select("/FrontDoorAPIs/Method");

            ReadMethods(nodes);
        }

        #region LoadAvailableParameters Helpers

        private static void ReadMethods(XPathNodeIterator nodes)
        {
            while (nodes.MoveNext())
            {

                string methodName = nodes.Current.GetAttribute("methodName", String.Empty);
                if (!CatalogAPI.MethodBase.ContainsKey(methodName))
                    CatalogAPI.MethodBase.Add(
                        methodName,
                        nodes.Current.GetAttribute("methodBase", String.Empty));

                if (!CatalogAPI.AvailableParameters.ContainsKey(methodName))
                    CatalogAPI.AvailableParameters.Add(methodName, new List<string>());

                ReadMethodParameters(nodes, methodName);
            }
        }

        private static void ReadMethodParameters(XPathNodeIterator nodes, string methodName)
        {
            nodes.Current.MoveToChild(XPathNodeType.Element);
            do
            {
                if (nodes.Current.HasAttributes)
                {
                    if (!CatalogAPI.ParameterMappings.ContainsKey(methodName))
                        CatalogAPI.ParameterMappings.Add(methodName, new Dictionary<string, string>());

                    string parameterMapping = nodes.Current.GetAttribute("FrontDoorParameterName", String.Empty);
                    if (!CatalogAPI.ParameterMappings[methodName].ContainsKey(parameterMapping))
                        CatalogAPI.ParameterMappings[methodName].Add(nodes.Current.Name, parameterMapping);
                }

                CatalogAPI.AvailableParameters[methodName].Add(nodes.Current.Name);
            } while (nodes.Current.MoveToNext());
        }

        #endregion

        /// <summary>
        /// Retrieves a list of the available APIs for the loaded interface
        /// </summary>
        /// <returns>A list of available APIs</returns>
        public List<string> GetListOfAPINames()
        {
            return retrievedProcedures;
        }

        /// <summary>
        /// Retrieves a list of the available parameters for a given API
        /// </summary>
        /// <param name="apiName">The name of the API</param>
        /// <returns>A list of the available parameters for the API</returns>
        public List<Parameter> GetListOfParameters(string apiName)
        {
            if (retrievedParameters.ContainsKey(apiName))
                return retrievedParameters[apiName];

            return null;
        }
                       
        public string ExecuteAPI(string apiName, string parameters, object[] interfaceSpecificData)
        {
            //Create a new web client and call the specified method with the parameters given
            WebClient client = new WebClient();
            CatalogAPI catalogAPI = new CatalogAPI();
            catalogAPI.Initialize(apiName, parameters);
            
            //Add GZip header if required
            AddRequiredHeaders(client);

            //Issue the method call
            Stream stream = client.OpenRead(frontDoorAddress + catalogAPI.ToString());
            
            //Process the results - includes decompressing any Gzipped response that may come back
            string results = ProcessResults(
                ReceiveResults(stream));

            //Write the results to the supplied output stream.
            XmlTextWriter writer = (XmlTextWriter)interfaceSpecificData[3];
            XmlDocument document = new XmlDocument();

            //simply verifies the results are valid XML.
            try
            {
                document.LoadXml(results);
            }
            catch (XmlException exception)
            {
                return exception.ToString();
            }
            
            document.WriteTo(writer);

            return Environment.NewLine;
        }

        private byte[] ReceiveResults(Stream stream)
        {
            int bytesRead = 0;
            int totalBytesRead = 0;
            byte[] buffer = new byte[1024];
            Queue<byte[]> buffers = new Queue<byte[]>();
            Queue<int> bufferSizes = new Queue<int>();
            
            //the gzip stream is picky about the data it is passed, and any back
            //and forth conversions via strings seems to corrupt the bytes which 
            //renders the compressed results invalid.  As a result, raw byte buffers
            //are used.
            while ((bytesRead = stream.Read(buffer, 0, 1024)) > 0)
            {
                totalBytesRead += bytesRead;
                buffers.Enqueue(buffer);
                bufferSizes.Enqueue(bytesRead);
                buffer = new byte[1024];
            }

            //merge all received buffers
            buffer = new byte[totalBytesRead];
            totalBytesRead = 0;
            while (buffers.Count > 0)
            {
                byte[] bufferFragment = buffers.Dequeue();
                int bufferSize = bufferSizes.Dequeue();

                Array.Copy(bufferFragment, 0, buffer, totalBytesRead, bufferSize);
                totalBytesRead += bufferFragment.Length;
            }

            return buffer;
        }

        private string ProcessResults(byte[] data)
        {
            string results = String.Empty;

            //decompress if compression is expected
            if (useGzip)
            {
                results = DecompressGzipResponse(data);
            }
            else
            {
                results = Encoding.UTF8.GetString(data);
            }

            //remove header xml element to enable storage of results
            results = results.Replace("<?xml version=\"1.0\" encoding=\"utf-8\"?>", "");
            return results;
        }

        private string DecompressGzipResponse(byte[] compressedData)
        {
            Stream compressedStream = new MemoryStream(compressedData);
            compressedStream = new GZipStream(compressedStream, CompressionMode.Decompress);
            StreamReader decompressionReader = new StreamReader(compressedStream, Encoding.Default);
            string decompressedData = String.Empty;

            try
            {
                decompressedData = decompressionReader.ReadToEnd();
            }
            catch
            {
                if (useGzip)
                    throw;

                return decompressedData;
            }

            return decompressedData;
        }

        private void AddRequiredHeaders(WebClient client)
        {
            if (useGzip)
            {
                client.Headers.Add("Accept-Encoding",gzipHeader);
            }
        }



        #endregion

        #region IDataInterface Members

        public string TopBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("TopBoilerPlateCode.txt");
            }
        }

        public string BottomBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("BottomBoilerPlateCode.txt");
            }
        }

        public string TestcaseBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("TestCaseBoilerPlateCode.txt");
            }
        }

        private static string RetrieveBoilerPlate(string resourceName)
        {
            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
            if (null == stream)
                stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(
                    Assembly.GetExecutingAssembly().GetName().Name +
                    ".Resources." +
                    resourceName);

            TextReader reader = new StreamReader(stream);

            string boilerPlate = reader.ReadToEnd();
            reader.Close();

            return boilerPlate;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.FrontDoor\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Microsoft.EMS.Tools.DITGen.StoredProcedures")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MSIT")]
[assembly: AssemblyProduct("Microsoft.EMS.Tools.DITGen.StoredProcedures")]
[assembly: AssemblyCopyright("Copyright © MSIT 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("afe7a925-b848-4eec-a598-cbac0b05a9e3")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.StoredProcedures\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Microsoft.EMS.Tools.DITGen.StoredProcedures")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MSIT")]
[assembly: AssemblyProduct("Microsoft.EMS.Tools.DITGen.StoredProcedures")]
[assembly: AssemblyCopyright("Copyright © MSIT 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("afe7a925-b848-4eec-a598-cbac0b05a9e3")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.DITGen.StoredProcedures\StoredProcedureLoader.cs ===
using System;
using System.Configuration;
using System.Collections.Generic;
using System.IO;
using System.Data;
using System.Reflection;
using System.Text;
using System.Xml;

using DBSchema;
using Microsoft.EMS.Tools.Common;

namespace Microsoft.EMS.Tools
{
    public class StoredProcedureLoader : IDataInterface
    {
        #region Fields

        private static DBSchemaConfig schemaConfig = null;
        private static DBSchemaSet schemaSet = null;
        private static DBSchemaTransaction schemaTransaction = null;

        private List<string> retrievedProcedures;
        private Dictionary<string, List<Parameter>> retrievedParameters;
        private string generatedSchema = String.Empty;

        #endregion

        #region Properties

        /// <summary>
        /// Gets the SchemaConfig used to load the config
        /// </summary>
        public static DBSchemaConfig SchemaConfig
        {
            get { return schemaConfig; }
        }

        /// <summary>
        /// Gets the schema set used to load the schema
        /// </summary>
        public static DBSchemaSet SchemaSet
        {
            get { return schemaSet; }
        }

        /// <summary>
        /// Gets the schema transaction used to execute a given command against the database
        /// </summary>
        public static DBSchemaTransaction SchemaTransaction
        {
            get { return schemaTransaction; }
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Constructs the StoreProcedureLoader
        /// </summary>
        public StoredProcedureLoader()
        {
            retrievedProcedures = new List<string>();
            retrievedParameters = new Dictionary<string, List<Parameter>>();
        }

        #endregion

        #region DataInterfaceLoader Members

        /// <summary>
        /// Load the APIs for the specified interface
        /// </summary>
        /// <param name="requiredData">Required data to load the interface</param>        
        public void LoadInterface(string serverName, object[] interfaceSpecificData)
        {
            if (null == interfaceSpecificData ||
                interfaceSpecificData.Length != 3)
            {
                throw new ArgumentException(
                    "The StoredProcedureLoader requires 4 parameters to load the interface: " + 
                    "sqlServerName, databaseName, sqlAuthName, sqlAuthPassword");
            }

            string sqlServerName = serverName as string;
            string databaseName = interfaceSpecificData[0] as string;
            string sqlAuthName = interfaceSpecificData[1] as string;
            string sqlAuthPassword = interfaceSpecificData[2] as string;

            Configuration config = ConfigurationManager.OpenExeConfiguration(
                System.Reflection.Assembly.GetExecutingAssembly().Location);
            string configPath = config.AppSettings.Settings["SchemaConfigFile"].Value;

            schemaConfig = new DBSchemaConfig();
            schemaConfig.LoadConfig(configPath, new System.Xml.Schema.ValidationEventHandler(Validator));

            schemaSet = new DBSchemaSet();
            schemaSet.LoadSchema(schemaConfig, sqlServerName, databaseName, sqlAuthName, sqlAuthPassword);
            
            generatedSchema = schemaSet.Schema;            
            MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(generatedSchema));

            retrievedProcedures.Clear();
            retrievedParameters.Clear();
            PopulateProcedures(XmlReader.Create(stream));

            stream.Close();
        }

        private void Validator(object sender, System.Xml.Schema.ValidationEventArgs eventArgs)
        {

        }

        /// <summary>
        /// Retrieves a list of the available APIs for the loaded interface
        /// </summary>
        /// <returns>A list of available APIs</returns>
        public List<string> GetListOfAPINames()
        {
            return retrievedProcedures;
        }

        /// <summary>
        /// Retrieves a list of the available parameters for a given API
        /// </summary>
        /// <param name="apiName">The name of the API</param>
        /// <returns>A list of the available parameters for the API</returns>
        public List<Parameter> GetListOfParameters(string apiName)
        {
            if (retrievedParameters.ContainsKey(apiName))
                return retrievedParameters[apiName];

            return null;
        }


        private void PopulateProcedures(XmlReader reader)
        {
            string currentProcedure = String.Empty;

            while (reader.Read())
            {
                if (0 == reader.Name.CompareTo("xs:complexType") &&
                    reader.NodeType == XmlNodeType.Element)
                {
                    if (reader.AttributeCount > 0)
                    {
                        currentProcedure = reader["name"];
                        
                        if (schemaSet.GetSchemaType(currentProcedure) == DBSchemaType.StoredProcedure)
                        {
                            retrievedProcedures.Add(currentProcedure);
                            retrievedParameters.Add(currentProcedure, new List<Parameter>());

                            PopulateParameters(reader, currentProcedure);
                        }
                    }
                }

            }

            reader.Close();
        }

        private void PopulateParameters(XmlReader reader, string currentProcedure)
        {
            while (reader.Read() &&
                   0 != reader.Name.CompareTo("xs:complexType"))
            {
                if (reader.NodeType != XmlNodeType.EndElement &&
                    0 == reader.Name.CompareTo("xs:element"))
                {
                    string parameterName = reader["name"];
                    string parameterType = reader["type"];
                    if (string.IsNullOrEmpty(parameterType))
                        parameterType = "unknown";

                    if (parameterName != "RETURN_VALUE")
                    {
                        if (!retrievedParameters.ContainsKey(currentProcedure))
                            retrievedParameters.Add(currentProcedure, new List<Parameter>());

                        bool containsParameter = false;
                        foreach (Parameter parameter in retrievedParameters[currentProcedure])
                            if (parameterName == parameter.ParameterName)
                                containsParameter = true;

                        if (!containsParameter)
                            retrievedParameters[currentProcedure].Add(
                                new Parameter(currentProcedure, parameterType, parameterName));
                    }
                }
            }
        }
                       
        public string ExecuteAPI(string apiName, string parameters, object[] interfaceSpecificData)
        {
            if (null == parameters ||
                parameters.Length < 2)
            {
                throw new Exception("An incorrect number of parameters was passed to ExecuteAPI in StoredProcedureLoader.");
            }

            // validate the xml
            //XmlDocument xmlDocument = this.ValidateElement(parameters, ignoreRestrictions, veh);
            XmlDocument xmlDocument = new XmlDocument();
            xmlDocument.LoadXml(parameters);

            XmlElement xmlElement = xmlDocument.CreateElement(
                "DBSchema",
                xmlDocument.DocumentElement.NamespaceURI);
            xmlElement.AppendChild(xmlDocument.DocumentElement);
            ((XmlElement)xmlElement.ChildNodes[0]).RemoveAllAttributes();
            xmlDocument.AppendChild(xmlElement);

            // check the element
            xmlElement = (XmlElement)xmlDocument.DocumentElement.FirstChild;

            schemaTransaction = schemaSet.CreateTransaction(
                xmlElement.CreateNavigator(),
                (bool)interfaceSpecificData[0],
                (System.Xml.Schema.ValidationEventHandler)interfaceSpecificData[1]);

            schemaTransaction.Execute(null, null);

            XmlTextWriter writer = (XmlTextWriter)interfaceSpecificData[2];

            if (null != schemaTransaction.Results[0].Exception)
            {
                return schemaTransaction.Results[0].Exception.ToString();
            }
            else
            {
                XmlDocument document = new XmlDocument();

                try
                {
                    if(schemaTransaction.Results[0].DataSet != null)
                        document.LoadXml((string)schemaTransaction.Results[0].DataSet.Tables[0].Rows[0][0]);
                    //document.LoadXml((string)results.Tables["ResultSet1"].Rows[0][0]);
                }
                catch (XmlException exception)
                {
                    return exception.ToString();
                }
                
                document.WriteTo(writer);

                return Environment.NewLine;
            }
        }



        #endregion

        #region IDataInterface Members

        public string TopBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("TopBoilerPlateCode.txt");
            }
        }

        public string BottomBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("BottomBoilerPlateCode.txt");
            }
        }

        public string TestcaseBoilerPlateCode
        {
            get
            {
                return RetrieveBoilerPlate("TestCaseBoilerPlateCode.txt");
            }
        }

        private static string RetrieveBoilerPlate(string resourceName)
        {
            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
            if (null == stream)
                stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(
                    Assembly.GetExecutingAssembly().GetName().Name +
                    ".Resources." +
                    resourceName);

            TextReader reader = new StreamReader(stream);

            string boilerPlate = reader.ReadToEnd();
            reader.Close();

            return boilerPlate;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\wsdl\Parameter.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.EMS.Test.Common.Wsdl
{
    public class Parameter
    {
        private string type, name;

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public string Type
        {
            get { return type; }
            set { type = value; }
        }

        public Parameter(string type, string name)
        {
            this.type = type;
            this.name = name;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\wsdl\Method.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.EMS.Test.Common.Wsdl
{
    public class Method
    {
        private string name, documentation;

        public string Documentation
        {
            get { return documentation; }
            set { documentation = value; }
        }

        public string Name
        {
            get { return name; }
            set { name = value; }
        }

        public Method(string name)
        {
            this.name = name;
        }




        public override int GetHashCode()
        {
            return this.Name.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj is Method)
            {
                Method method = obj as Method;
		if( method == null )
		    return false;
                if( method.Name != null )
                    return method.Name.Equals(this.Name);
                return method.Name == this.Name;
            }
            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\Microsoft.EMS.Tools.WebServiceReflect\WebServiceReflect.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Microsoft.EMS.Tools.WebServiceReflect
{
    /// <summary>
    /// reflects over a web service to get list of web methods, generate xml schema of objects
    /// </summary>
    public class WebServiceReflect : Microsoft.EMS.Tools.Common.IDataInterface
    {
        private static Dictionary<Type, string> xsdTypes;
        static WebServiceReflect()
        {
            LoadXsdTypes();
        }

        /// <summary>
        /// hard coded mapping of .net types to xsd types
        /// </summary>
        private static void LoadXsdTypes()
        {
            //type Guid purposely not included
            //it is added as a simple type

            xsdTypes = new Dictionary<Type, string>();
            xsdTypes.Add(typeof(string), "string");

            xsdTypes.Add(typeof(bool), "boolean");
            xsdTypes.Add(typeof(Nullable<bool>), "boolean");

            xsdTypes.Add(typeof(DateTime), "dateTime");
            xsdTypes.Add(typeof(Nullable<DateTime>), "dateTime");

            xsdTypes.Add(typeof(Int32), "int");
            xsdTypes.Add(typeof(Nullable<Int32>), "int");
        }

        //binding flags to use to get web methods and properies
        private const BindingFlags bindingFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy;

        //the web service proxy class
        private System.Web.Services.Protocols.SoapHttpClientProtocol soapHttpClientProtocol;

        //list of web methods
        private List<MethodInfo> webMethods;

        //assembly containing web service and related objects
        private Assembly assembly;

        //the namespace of the web service, populated during LoadMethods
        private string webServiceNamespace= string.Empty;
        private readonly string xmlSchemaNamcespace = "http://www.w3.org/2001/XMLSchema";


        public WebServiceReflect()
        {
        }
        public WebServiceReflect(string proxyPath) : this()
        {
            assembly = Assembly.LoadFile(proxyPath);
            LoadMethods();
        }

        /// <summary>
        /// returns list of web methods
        /// </summary>
        /// <returns>list of web methods</returns>
        public List<MethodInfo> GetWebMethods()
        {
            return webMethods;
        }

        private MethodInfo GetWebMethod(string webMethodName)
        {
            foreach (MethodInfo methodInfo in this.GetWebMethods())
                if (methodInfo.Name.Equals(webMethodName))
                    return methodInfo;
            return null;
        }

        /// <summary>
        /// reflects over asssembly looking for web methods, storing into methods data structure
        /// </summary>
        private void LoadMethods()
        {
            webMethods = new List<MethodInfo>();
        
            string webMethodAttributeType = "System.Web.Services.Protocols.SoapDocumentMethodAttribute";

            bool loaded = false; //verifies only one web service is loaded
            foreach (Type type in assembly.GetTypes())
            {
                //web service inherit from this class
                if (!type.IsSubclassOf(typeof(System.Web.Services.Protocols.SoapHttpClientProtocol)))
                    continue;

                if (loaded)
                    throw new ArgumentException("the assembly contains more than one web service; this code only supports one");
                loaded = true;


                soapHttpClientProtocol = assembly.CreateInstance(type.FullName) as System.Web.Services.Protocols.SoapHttpClientProtocol;


                //load namespace
                string bindingAttribute = "System.Web.Services.WebServiceBindingAttribute";
                foreach (object attributeObject in type.GetCustomAttributes(true))
                {
                    if (attributeObject.GetType().FullName.Equals(bindingAttribute))
                    {
                        System.Web.Services.WebServiceBindingAttribute attribute = attributeObject as System.Web.Services.WebServiceBindingAttribute;
                        webServiceNamespace = attribute.Namespace;
                    }
                }

                //load web methods
                foreach (MethodInfo methodInfo in type.GetMethods(bindingFlags))
                {
                    foreach (object attribute in methodInfo.GetCustomAttributes(true))
                    {
                        if (attribute.GetType().ToString().Equals(webMethodAttributeType))
                            webMethods.Add(methodInfo);
                    }
                }
            }
        }


        /// <summary>
        /// returns names of the web methods
        /// </summary>
        /// <returns>names of the web methods</returns>
        public List<string> GetWebMethodNames()
        {
            List<string> list = new List<string>();
            foreach (MethodInfo methodInfo in this.GetWebMethods())
                list.Add(methodInfo.Name);
            list.Sort();
            return list;
        }

        /// <summary>
        /// untested method to execute a web method
        /// </summary>
        /// <param name="type"></param>
        /// <param name="methodInfo"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        private object Execute(MethodInfo methodInfo, object[] parameters)
        {
            return methodInfo.Invoke(soapHttpClientProtocol, parameters);
        }

        /// <summary>
        /// deserialize an xml string to the specifed type
        /// </summary>
        /// <param name="type">type of object</param>
        /// <param name="xmlString">xml string of object</param>
        /// <returns>object of the specified type</returns>
        private object XmlToObject(Type type, string xmlString)
        {
            XmlSerializer serializer = new XmlSerializer(type);
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(System.Text.Encoding.ASCII.GetBytes(xmlString));
            Object obj = serializer.Deserialize(memoryStream);
            memoryStream.Dispose();
            return obj;
        }

        /// <summary>
        /// serialize an object to xml
        /// </summary>
        /// <param name="obj">object to serialize</param>
        /// <returns>xml string</returns>
        private string ObjectToXml(object obj)
        {
            if (obj == null)
                throw new ArgumentNullException("obj cannot be null");

            XmlSerializerNamespaces namespaces = new XmlSerializerNamespaces();
            namespaces.Add("xs", xmlSchemaNamcespace);
            namespaces.Add("", this.webServiceNamespace);

            XmlSerializer serializer = new XmlSerializer(obj.GetType());
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            serializer.Serialize(memoryStream, obj,namespaces);
            string str = System.Text.Encoding.ASCII.GetString(memoryStream.ToArray());
            memoryStream.Dispose();
            return str;
        }

        /// <summary>
        /// adds the specified type to the schema, and any dependent types
        /// </summary>
        /// <remarks>will not add a type that already exists</remarks>
        /// <param name="schema">schema to add the type to</param>
        /// <param name="type">the type to add to the schema</param>
        private void AddSchemaType(XmlSchema schema, Type type)
        {
            //xsd type name
            string typeName = this.GetXsdTypeName(type);

            //check to see if this type already exists, if it does, just return
            foreach (XmlSchemaObject schemaObject in schema.Items)
            {
                if (schemaObject is XmlSchemaType)
                {
                    XmlSchemaType schemaType = schemaObject as XmlSchemaType;
                    if( schemaType.Name.Equals( typeName ) )
                        return;
                }
            }


            //treat guids special
            if (type.Equals(typeof(Guid)))
            {
                // set the restriction
                XmlSchemaSimpleTypeRestriction xmlSchemaSimpleTypeRestrictionUniqueIdentifier = new XmlSchemaSimpleTypeRestriction();
                xmlSchemaSimpleTypeRestrictionUniqueIdentifier.BaseTypeName = this.GetXmlQualifiedName(typeof(string));

                // set the pattern
                XmlSchemaPatternFacet xmlSchemaPatternFacetUniqueIdentifier = new XmlSchemaPatternFacet();
                xmlSchemaPatternFacetUniqueIdentifier.Value = "\\{?[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}?";
                xmlSchemaSimpleTypeRestrictionUniqueIdentifier.Facets.Add(xmlSchemaPatternFacetUniqueIdentifier);

                // set the simple type (restriction and pattern)
                XmlSchemaSimpleType xmlSchemaSimpleTypeUniqueIdentifier = new XmlSchemaSimpleType();
                xmlSchemaSimpleTypeUniqueIdentifier.Name = typeName;
                xmlSchemaSimpleTypeUniqueIdentifier.Content = xmlSchemaSimpleTypeRestrictionUniqueIdentifier;

                schema.Items.Insert(0,xmlSchemaSimpleTypeUniqueIdentifier);

                return;
            }


            //create type element
            XmlSchemaComplexType xmlSchemaType = new XmlSchemaComplexType();
            xmlSchemaType.Name = typeName;
            schema.Items.Insert(0, xmlSchemaType);

            //use all since we don't care the order of the elements
            XmlSchemaGroupBase groupBase = new XmlSchemaAll();
            if (type.IsArray)
                groupBase = new XmlSchemaSequence();
            xmlSchemaType.Particle = groupBase;


            if (type.IsArray)
            {
                //Add element to sequence
                XmlSchemaElement propertyElement = new XmlSchemaElement();
                groupBase.Items.Add(propertyElement);

                //add name of elment type
                propertyElement.Name = this.GetXsdTypeName(type.GetElementType());

                //set array properties
                propertyElement.MinOccurs = 0;
                propertyElement.MaxOccursString = "unbounded";
                propertyElement.IsNillable = true;

                //determine element type
                if (type.GetElementType().IsArray || !xsdTypes.ContainsKey(type.GetElementType()))
                    AddSchemaType(schema, type.GetElementType());
                propertyElement.SchemaTypeName = GetXmlQualifiedName(type.GetElementType());
            }
            else
            {
                foreach (PropertyInfo propertyInfo in type.GetProperties(bindingFlags))
                {
                    //Add element to sequence
                    XmlSchemaElement propertyElement = new XmlSchemaElement();
                    groupBase.Items.Add(propertyElement);

                    //add name of property
                    propertyElement.Name = propertyInfo.Name;

                    //determine if property is required
                    int minOccurs = 1;
                    string nullAttributeType = "System.Xml.Serialization.XmlElementAttribute";
                    foreach (object attributeObject in propertyInfo.GetCustomAttributes(true))
                    {
                        if (attributeObject.GetType().ToString().Equals(nullAttributeType))
                        {
                            System.Xml.Serialization.XmlElementAttribute attribute = attributeObject as System.Xml.Serialization.XmlElementAttribute;
                            if (attribute.IsNullable)
                                minOccurs = 0;
                        }
                    }
                    propertyElement.MinOccurs = minOccurs;
                    propertyElement.MaxOccurs = 1;


                    //determine element type and make call to add to the schema
                    if (propertyInfo.PropertyType.IsArray || !xsdTypes.ContainsKey(propertyInfo.PropertyType))
                        AddSchemaType(schema, propertyInfo.PropertyType);
                    propertyElement.SchemaTypeName = GetXmlQualifiedName(propertyInfo.PropertyType);

                }//ends foreach
            }//ends if

        }

        /// <summary>
        /// returns an xsd friendly string to represent the specified type
        /// </summary>
        /// <param name="type"></param>
        /// <returns>an xsd friendly string to represent the specified type</returns>
        private string GetXsdTypeName(Type type)
        {
            //if array, call recursively until a nonarray is found
            if (type.IsArray)
                return "ArrayOf" + GetXsdTypeName(type.GetElementType());

            //if known xsd type
            if (xsdTypes.ContainsKey(type))
                return xsdTypes[type];

            return type.Name;
        }

        /// <summary>
        /// creates XmlQualifiedName object for the specified type
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        private System.Xml.XmlQualifiedName GetXmlQualifiedName(Type type)
        {
            string name = GetXsdTypeName(type);
            string ns = xsdTypes.ContainsKey(type) ? xmlSchemaNamcespace : webServiceNamespace;
            if (type.Equals(typeof(Guid)))
                ns = null;

            return new System.Xml.XmlQualifiedName(name, ns);
        }

        /// <summary>
        /// returns xml schema for the specified type
        /// </summary>
        /// <param name="typeString">string name of the type</param>
        /// <returns>xml schema for the specified type</returns>
        public string ObjectToXmlSchema(string typeString)
        {
            Type type = assembly.GetType(typeString);
            
            //create schema and add namespaces
            XmlSchema schema = new XmlSchema();
            schema.TargetNamespace = webServiceNamespace;
            schema.Namespaces.Add("", webServiceNamespace);
            schema.Namespaces.Add("xs", xmlSchemaNamcespace);

            //create the only element type and add to the schema
            XmlSchemaElement typeSchemaElement = new XmlSchemaElement();
            typeSchemaElement.Name = this.GetXsdTypeName(type);
            schema.Items.Insert(0, typeSchemaElement);
            
            //add the complex or simple types to schema
            AddSchemaType(schema, type);
            

            //convert XmlSchema object to string
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();
            schema.Write(memoryStream);
            string schemaString = System.Text.Encoding.ASCII.GetString(memoryStream.ToArray());
            memoryStream.Dispose();

            return schemaString;
        }

        #region IDataInterface Members

        /// <summary>
        /// Initializes the object
        /// </summary>
        /// <remarks>
        /// first element is required and is a string to the path of the assembly to load
        /// second element is optional, but required for execution, and is a string of the url of the web service
        /// </remarks>
        /// <param name="requiredData"></param>
        public void LoadInterface(object[] requiredData)
        {
            if (requiredData == null)
                throw new ArgumentNullException("requiredData cannot be null");
            if (requiredData.Length != 1 && requiredData.Length != 2)
                throw new ArgumentException("expecting only one or two elements");
            for (int i = 0; i < requiredData.Length; i++)
                if (!(requiredData[0] is string))
                    throw new ArgumentException("expecting element at " + i + " to be of type string");

            string proxyPath = requiredData[0] as string;
            assembly = Assembly.LoadFile(proxyPath);
            LoadMethods();

            if( requiredData.Length > 1)
                soapHttpClientProtocol.Url = requiredData[1] as string;
        }

        public List<string> GetListOfAPINames()
        {
            return GetWebMethodNames();
        }
        public List<string> GetListOfParameterNames(string apiName)
        {
            List<string> list = new List<string>();
            MethodInfo methodInfo = this.GetWebMethod(apiName);
            if (methodInfo != null)
            {
                foreach (ParameterInfo parameterInfo in methodInfo.GetParameters())
                    list.Add(parameterInfo.Name);
            }

            return list;
        }

        /// <summary>
        /// executes the specified api with the given parameters
        /// </summary>
        /// <param name="apiName">the name of the api to execute</param>
        /// <param name="parameters">the xml string representation of the parameters</param>
        /// <returns>xml string of the returned object</returns>
        public string ExecuteAPI(string apiName, object[] parameters)
        {
            if (apiName == null)
                throw new NullReferenceException("apiName cannot be null");
            if (parameters == null)
                throw new NullReferenceException("parameters cannot be null");

            MethodInfo methodInfo = this.GetWebMethod(apiName);
            if (methodInfo == null)
                throw new ArgumentException("the specified apiName, " + apiName + ", cannot be found");

            ParameterInfo[] parameterInfos = methodInfo.GetParameters();
            if (parameterInfos.Length != parameters.Length)
                throw new ArgumentException("the number of parameters provided (" + parameters.Length + ") does not match the method's parameter count (" + parameterInfos.Length + ")");

            //parameters is an array of xml strings of complex objects
            //this following code converts the xml strings to complex objects
            object[] serializedObjects = new object[parameters.Length];
            for (int i = 0; i < parameters.Length; i++)
            {
                if (!(parameters[i] is string))
                    throw new ArgumentException("expecting element at " + i + " in parameters to be type string");
                serializedObjects[i] = this.XmlToObject(parameterInfos[i].ParameterType, parameters[i] as string);
            }

            //execute the method
            object returnObject = this.Execute(methodInfo, serializedObjects);
            string serializedReturnObject = this.ObjectToXml(returnObject);

            return serializedReturnObject;
        }

        #endregion
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\common\wsdl\WsdlReader.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Net;
using System.IO;

namespace Microsoft.EMS.Test.Common.Wsdl
{
    /// <summary>
    /// reads a wsdl file to determine the name of methods and names of parameters
    /// </summary>
    /// <remarks>wsdl: http://www.w3.org/TR/wsdl</remarks>
    public class WsdlReader //: Microsoft.EMS.Test.Tools.DataInterfaceLoader
    {
        //this data structure will hold the name's of the apis, and the list of the names of it's parameters
        //this will need to be changed in order to handle overloaded methods
        private Dictionary<Method, List<Parameter>> apiParameters;

        public WsdlReader()
        {
            apiParameters = new Dictionary<Method, List<Parameter>>();
        }


        private XmlDocument LoadWsdl(string wsdlLocation)
        {
            XmlDocument xmlDocument = new XmlDocument();

            bool locationIsHttp = wsdlLocation.ToLower().StartsWith("http://");
            if (locationIsHttp)
            {
                HttpWebRequest request = HttpWebRequest.Create(wsdlLocation) as HttpWebRequest;
                HttpWebResponse response = request.GetResponse() as HttpWebResponse;
                Stream stream = response.GetResponseStream();

                System.Text.StringBuilder stringBuilder = new StringBuilder();
                byte[] buffer = new byte[2000];
                int bytesRead = 0;
                while ((bytesRead = stream.Read(buffer, 0, buffer.Length)) != 0)
                {
                    stringBuilder.Append(System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead));
                }
                stream.Close();
                response.Close();

                xmlDocument.LoadXml(stringBuilder.ToString());
            }
            else //location not http
            {
                xmlDocument.Load(wsdlLocation);
            }

            return xmlDocument;
        }
        private void LoadMethods(XmlDocument xmlDocument)
        {
            //wsdl:definitions/wsdl:binding/wsdl:operation

            //replace this code with xpath navigator
            //XmlNodeList operationsNodeList = xmlDocument.SelectNodes(@".//wsdl::operation");
            foreach (XmlNode definitionsChildNode in xmlDocument.DocumentElement.ChildNodes)
            {
                if (definitionsChildNode.Name.Equals("wsdl:portType") || definitionsChildNode.Name.Equals("portType"))
                {
                    foreach (XmlNode bindingChildNode in definitionsChildNode.ChildNodes)
                    {
                        if (bindingChildNode.Name.Equals("wsdl:operation") || bindingChildNode.Name.Equals("operation"))
                        {
                            XmlAttribute nameAttribute = bindingChildNode.Attributes["name"];
                            if (nameAttribute == null)
                                continue;

                            Method method = new Method(nameAttribute.Value);

                            foreach (XmlNode methodChildNode in bindingChildNode.ChildNodes)
                            {
                                switch (methodChildNode.Name.ToLower())
                                {
                                    case "documentation":
                                        method.Documentation = methodChildNode.InnerText;
                                        break;
                                    case "wsdl:input":
                                        break;
                                    case "wsdl:output":
                                        break;
                                }
                            }

                            //if the method name already exists, we will overwrite
                            apiParameters[method] = new List<Parameter>();
                        }
                    }
                }
            }
        }

        /// <summary>
        /// assumes method names have already been loaded
        /// </summary>
        /// <param name="xmlDocument"></param>
        private void LoadParameters(XmlDocument xmlDocument)
        {
            //wsdl:definitions/wsdl:types/s:schema/s:element name="SearchGamesByPlatformAndTitle"/s:complexType/s:sequence/s:element name="request"

            //replace this code with xpath navigator
            //XmlNodeList nodeList = xmlDocument.SelectNodes(@"");
            foreach (XmlNode definitionsChildNode in xmlDocument.DocumentElement.ChildNodes)
            {
                if (definitionsChildNode.Name.Equals("wsdl:types"))
                {
                    foreach (XmlNode typeChildNode in definitionsChildNode.ChildNodes)
                    {
                        if (typeChildNode.Name.Equals("s:schema"))
                        {
                            foreach (XmlNode schemaChildNode in typeChildNode.ChildNodes)
                            {
                                if (schemaChildNode.Name.Equals("s:element"))
                                {
                                    XmlAttribute nameAttribute = schemaChildNode.Attributes["name"];
                                    if (nameAttribute == null)
                                        continue;

                                    Method method = new Method(nameAttribute.Value);
                                    if (!apiParameters.ContainsKey(method))
                                        continue;

                                    List<Parameter> parameters = apiParameters[method];
                                    foreach (XmlNode elementChildNode in schemaChildNode.ChildNodes)
                                    {
                                        if (elementChildNode.Name.Equals("s:complexType"))
                                        {
                                            foreach (XmlNode complexTypeChildNode in elementChildNode.ChildNodes)
                                            {
                                                if (complexTypeChildNode.Name.Equals("s:sequence"))
                                                {
                                                    foreach (XmlNode sequenceChildNode in complexTypeChildNode.ChildNodes)
                                                    {
                                                        if (sequenceChildNode.Name.Equals("s:element"))
                                                        {
                                                            parameters.Add(new Parameter(sequenceChildNode.Attributes["type"].Value, sequenceChildNode.Attributes["name"].Value));
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }//ends elementChildNode loop
                                }
                            }//ends schemaChildNode loop
                        }
                    }//ends typeChildNode loop
                }
            }//ends definitionsChildNode loop

        }//ends method


        public List<Method> GetMethods()
        {
            List<Method> list = new List<Method>();
            foreach (Method method in apiParameters.Keys)
                list.Add(method);
            return list;
        }
        public List<Parameter> GetParameters(Method method)
        {
            return apiParameters[method];
        }


        #region DataInterfaceLoader Members

        /// <summary>
        /// initializes the reader
        /// </summary>
        /// <param name="requiredData">one element which is a path to a wsdl</param>
        public void LoadInterface(object[] requiredData)
        {
            if (requiredData.Length != 1)
                throw new ArgumentException("expecting one element which is a path to a wsdl");

            string wsdlLocation = requiredData[0] as string;

            XmlDocument xmlDocument = LoadWsdl(wsdlLocation);
            LoadMethods(xmlDocument);
            LoadParameters(xmlDocument);
        }

        /// <summary>
        /// returns list of methods
        /// </summary>
        /// <returns>list of methods</returns>
        public List<string> GetListOfAPIs()
        {
            //convert KeyCollection to List<string>
            List<string> list = new List<string>();
            foreach (Method method in this.GetMethods())
                list.Add(method.Name);

            return list;
        }

        /// <summary>
        /// returns list of names of the parameters for the specified api
        /// </summary>
        /// <param name="apiName">the name of the api</param>
        /// <returns>list of names of the parameters</returns>
        public List<string> GetListOfParameters(string apiName)
        {
            //just return names
            List<string> list = new List<string>();
            foreach (Parameter parameter in this.GetParameters(new Method(apiName)))
                list.Add(parameter.Name);

            return list;
        }

        #endregion
    }





}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\DITGen.Designer.cs ===
namespace Microsoft.EMS.Test.Tools
{
    partial class DITGen
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();
            System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
            this.procedureTree = new System.Windows.Forms.TreeView();
            this.label1 = new System.Windows.Forms.Label();
            this.label2 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.button3 = new System.Windows.Forms.Button();
            this.button4 = new System.Windows.Forms.Button();
            this.panel1 = new System.Windows.Forms.Panel();
            this.negativeValueList = new System.Windows.Forms.CheckedListBox();
            this.positiveValueList = new System.Windows.Forms.CheckedListBox();
            this.checkBox2 = new System.Windows.Forms.CheckBox();
            this.checkBox1 = new System.Windows.Forms.CheckBox();
            this.textBox3 = new System.Windows.Forms.TextBox();
            this.label6 = new System.Windows.Forms.Label();
            this.textBox4 = new System.Windows.Forms.TextBox();
            this.label7 = new System.Windows.Forms.Label();
            this.button6 = new System.Windows.Forms.Button();
            this.textBox2 = new System.Windows.Forms.TextBox();
            this.label5 = new System.Windows.Forms.Label();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.label4 = new System.Windows.Forms.Label();
            this.statusStrip1 = new System.Windows.Forms.StatusStrip();
            this.toolStripStatusLabel1 = new System.Windows.Forms.ToolStripStatusLabel();
            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
            this.fileToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadTestOptionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveTestOptionsToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.exitToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateCasesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.sourcesToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripTextBox1 = new System.Windows.Forms.ToolStripTextBox();
            this.toolStripMenuItem2 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem3 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem4 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem5 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripMenuItem6 = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator1 = new System.Windows.Forms.ToolStripSeparator();
            this.generateToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateFromExistingToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.testDataToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.generateToolStripMenuItem1 = new System.Windows.Forms.ToolStripMenuItem();
            this.testCaseMatcherToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadGeneratedCasesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.loadDetailedCasesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
            this.loadExistingMatchesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.saveTestCaseMatchesToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
            this.applyMatchesToVSMDIToolStripMenuItem = new System.Windows.Forms.ToolStripMenuItem();
            this.tabControl1 = new System.Windows.Forms.TabControl();
            this.tabPage1 = new System.Windows.Forms.TabPage();
            this.tabPage2 = new System.Windows.Forms.TabPage();
            this.outputFileTextBox = new System.Windows.Forms.TextBox();
            this.label8 = new System.Windows.Forms.Label();
            this.groupBox1 = new System.Windows.Forms.GroupBox();
            this.baseXMLTextBox = new System.Windows.Forms.RichTextBox();
            this.groupBox2 = new System.Windows.Forms.GroupBox();
            this.radioButton1 = new System.Windows.Forms.RadioButton();
            this.radioButton2 = new System.Windows.Forms.RadioButton();
            this.insertionXMLTextBox = new System.Windows.Forms.RichTextBox();
            this.textBox5 = new System.Windows.Forms.TextBox();
            this.replacementGrid = new System.Windows.Forms.DataGridView();
            this.tabPage3 = new System.Windows.Forms.TabPage();
            this.testcaseGroupTextBox = new System.Windows.Forms.TextBox();
            this.groupBox5 = new System.Windows.Forms.GroupBox();
            this.textBox6 = new System.Windows.Forms.TextBox();
            this.generatedCaseDetails = new System.Windows.Forms.RichTextBox();
            this.generatedCasesList = new System.Windows.Forms.ListBox();
            this.clearGeneratedButton = new System.Windows.Forms.Button();
            this.label9 = new System.Windows.Forms.Label();
            this.groupBox4 = new System.Windows.Forms.GroupBox();
            this.matchesGrid = new System.Windows.Forms.DataGridView();
            this.DetailedCase = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.GeneratedCase = new System.Windows.Forms.DataGridViewTextBoxColumn();
            this.clearDetailedCasesButton = new System.Windows.Forms.Button();
            this.makeMatchButton = new System.Windows.Forms.Button();
            this.groupBox3 = new System.Windows.Forms.GroupBox();
            this.detailedDescriptionLabel = new System.Windows.Forms.Label();
            this.xmlNodeRadio = new System.Windows.Forms.RadioButton();
            this.wildcardRadio = new System.Windows.Forms.RadioButton();
            this.insertionWildcardTextBox = new System.Windows.Forms.TextBox();
            this.panel1.SuspendLayout();
            this.statusStrip1.SuspendLayout();
            this.menuStrip1.SuspendLayout();
            this.tabControl1.SuspendLayout();
            this.tabPage1.SuspendLayout();
            this.tabPage2.SuspendLayout();
            this.groupBox1.SuspendLayout();
            this.groupBox2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.replacementGrid)).BeginInit();
            this.tabPage3.SuspendLayout();
            this.groupBox5.SuspendLayout();
            this.groupBox4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.matchesGrid)).BeginInit();
            this.groupBox3.SuspendLayout();
            this.SuspendLayout();
            // 
            // procedureTree
            // 
            this.procedureTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.procedureTree.CheckBoxes = true;
            this.procedureTree.Location = new System.Drawing.Point(18, 29);
            this.procedureTree.Name = "procedureTree";
            this.procedureTree.Size = new System.Drawing.Size(345, 483);
            this.procedureTree.TabIndex = 4;
            // 
            // label1
            // 
            this.label1.AutoSize = true;
            this.label1.Location = new System.Drawing.Point(15, 13);
            this.label1.Name = "label1";
            this.label1.Size = new System.Drawing.Size(98, 13);
            this.label1.TabIndex = 9;
            this.label1.Text = "Stored Procedures:";
            // 
            // label2
            // 
            this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.label2.AutoSize = true;
            this.label2.Location = new System.Drawing.Point(378, 13);
            this.label2.Name = "label2";
            this.label2.Size = new System.Drawing.Size(82, 13);
            this.label2.TabIndex = 10;
            this.label2.Text = "Positive Values:";
            // 
            // label3
            // 
            this.label3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.label3.AutoSize = true;
            this.label3.Location = new System.Drawing.Point(378, 232);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(88, 13);
            this.label3.TabIndex = 11;
            this.label3.Text = "Negative Values:";
            // 
            // button3
            // 
            this.button3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.button3.Location = new System.Drawing.Point(18, 518);
            this.button3.Name = "button3";
            this.button3.Size = new System.Drawing.Size(83, 24);
            this.button3.TabIndex = 14;
            this.button3.Text = "All Procedures";
            this.button3.UseVisualStyleBackColor = true;
            this.button3.Click += new System.EventHandler(this.allProceduresButton_Click);
            // 
            // button4
            // 
            this.button4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.button4.Location = new System.Drawing.Point(107, 518);
            this.button4.Name = "button4";
            this.button4.Size = new System.Drawing.Size(82, 24);
            this.button4.TabIndex = 15;
            this.button4.Text = "All Parameters";
            this.button4.UseVisualStyleBackColor = true;
            this.button4.Click += new System.EventHandler(this.allParametersButton_Click);
            // 
            // panel1
            // 
            this.panel1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.panel1.Controls.Add(this.negativeValueList);
            this.panel1.Controls.Add(this.positiveValueList);
            this.panel1.Controls.Add(this.checkBox2);
            this.panel1.Controls.Add(this.checkBox1);
            this.panel1.Controls.Add(this.textBox3);
            this.panel1.Controls.Add(this.label6);
            this.panel1.Controls.Add(this.textBox4);
            this.panel1.Controls.Add(this.label7);
            this.panel1.Controls.Add(this.button6);
            this.panel1.Controls.Add(this.label1);
            this.panel1.Controls.Add(this.procedureTree);
            this.panel1.Controls.Add(this.textBox2);
            this.panel1.Controls.Add(this.button4);
            this.panel1.Controls.Add(this.label5);
            this.panel1.Controls.Add(this.button3);
            this.panel1.Controls.Add(this.textBox1);
            this.panel1.Controls.Add(this.label2);
            this.panel1.Controls.Add(this.label4);
            this.panel1.Controls.Add(this.label3);
            this.panel1.Location = new System.Drawing.Point(6, 6);
            this.panel1.Name = "panel1";
            this.panel1.Size = new System.Drawing.Size(823, 556);
            this.panel1.TabIndex = 17;
            // 
            // negativeValueList
            // 
            this.negativeValueList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.negativeValueList.FormattingEnabled = true;
            this.negativeValueList.Location = new System.Drawing.Point(383, 249);
            this.negativeValueList.Name = "negativeValueList";
            this.negativeValueList.Size = new System.Drawing.Size(422, 184);
            this.negativeValueList.TabIndex = 34;
            this.negativeValueList.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.checkedValueList_ItemCheck);
            // 
            // positiveValueList
            // 
            this.positiveValueList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.positiveValueList.FormattingEnabled = true;
            this.positiveValueList.Location = new System.Drawing.Point(383, 30);
            this.positiveValueList.Name = "positiveValueList";
            this.positiveValueList.Size = new System.Drawing.Size(422, 199);
            this.positiveValueList.TabIndex = 33;
            this.positiveValueList.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.checkedValueList_ItemCheck);
            // 
            // checkBox2
            // 
            this.checkBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.checkBox2.AutoSize = true;
            this.checkBox2.Checked = true;
            this.checkBox2.CheckState = System.Windows.Forms.CheckState.Checked;
            this.checkBox2.Location = new System.Drawing.Point(616, 490);
            this.checkBox2.Name = "checkBox2";
            this.checkBox2.Size = new System.Drawing.Size(154, 17);
            this.checkBox2.TabIndex = 32;
            this.checkBox2.Text = "Retrieve Results For Cases";
            this.checkBox2.UseVisualStyleBackColor = true;
            // 
            // checkBox1
            // 
            this.checkBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.checkBox1.AutoSize = true;
            this.checkBox1.Checked = true;
            this.checkBox1.CheckState = System.Windows.Forms.CheckState.Checked;
            this.checkBox1.Location = new System.Drawing.Point(616, 467);
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.Size = new System.Drawing.Size(98, 17);
            this.checkBox1.TabIndex = 31;
            this.checkBox1.Text = "Generate Code";
            this.checkBox1.UseVisualStyleBackColor = true;
            // 
            // textBox3
            // 
            this.textBox3.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.textBox3.Location = new System.Drawing.Point(480, 465);
            this.textBox3.Name = "textBox3";
            this.textBox3.Size = new System.Drawing.Size(116, 20);
            this.textBox3.TabIndex = 30;
            // 
            // label6
            // 
            this.label6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.label6.AutoSize = true;
            this.label6.Location = new System.Drawing.Point(418, 490);
            this.label6.Name = "label6";
            this.label6.Size = new System.Drawing.Size(56, 13);
            this.label6.TabIndex = 29;
            this.label6.Text = "Password:";
            // 
            // textBox4
            // 
            this.textBox4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.textBox4.Location = new System.Drawing.Point(480, 491);
            this.textBox4.Name = "textBox4";
            this.textBox4.Size = new System.Drawing.Size(116, 20);
            this.textBox4.TabIndex = 28;
            // 
            // label7
            // 
            this.label7.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.label7.AutoSize = true;
            this.label7.Location = new System.Drawing.Point(442, 467);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(32, 13);
            this.label7.TabIndex = 27;
            this.label7.Text = "User:";
            // 
            // button6
            // 
            this.button6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
            this.button6.Location = new System.Drawing.Point(195, 518);
            this.button6.Name = "button6";
            this.button6.Size = new System.Drawing.Size(83, 24);
            this.button6.TabIndex = 26;
            this.button6.Text = "Clear";
            this.button6.UseVisualStyleBackColor = true;
            this.button6.Click += new System.EventHandler(this.clearButton_Click);
            // 
            // textBox2
            // 
            this.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.textBox2.Location = new System.Drawing.Point(688, 439);
            this.textBox2.Name = "textBox2";
            this.textBox2.Size = new System.Drawing.Size(117, 20);
            this.textBox2.TabIndex = 21;
            this.textBox2.Text = "c:\\testcases";
            // 
            // label5
            // 
            this.label5.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.label5.AutoSize = true;
            this.label5.Location = new System.Drawing.Point(608, 442);
            this.label5.Name = "label5";
            this.label5.Size = new System.Drawing.Size(74, 13);
            this.label5.TabIndex = 20;
            this.label5.Text = "Output Folder:";
            // 
            // textBox1
            // 
            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.textBox1.Location = new System.Drawing.Point(480, 439);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(116, 20);
            this.textBox1.TabIndex = 19;
            this.textBox1.Text = "alexappa64";
            // 
            // label4
            // 
            this.label4.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
            this.label4.AutoSize = true;
            this.label4.Location = new System.Drawing.Point(402, 442);
            this.label4.Name = "label4";
            this.label4.Size = new System.Drawing.Size(72, 13);
            this.label4.TabIndex = 18;
            this.label4.Text = "Server Name:";
            // 
            // statusStrip1
            // 
            this.statusStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripStatusLabel1});
            this.statusStrip1.Location = new System.Drawing.Point(0, 631);
            this.statusStrip1.Name = "statusStrip1";
            this.statusStrip1.Size = new System.Drawing.Size(862, 22);
            this.statusStrip1.TabIndex = 22;
            this.statusStrip1.Text = "statusStrip1";
            // 
            // toolStripStatusLabel1
            // 
            this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
            this.toolStripStatusLabel1.Size = new System.Drawing.Size(162, 17);
            this.toolStripStatusLabel1.Text = "Test Case Generation Status...";
            // 
            // menuStrip1
            // 
            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.fileToolStripMenuItem,
            this.generateCasesToolStripMenuItem,
            this.testDataToolStripMenuItem,
            this.testCaseMatcherToolStripMenuItem});
            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
            this.menuStrip1.Name = "menuStrip1";
            this.menuStrip1.Size = new System.Drawing.Size(862, 24);
            this.menuStrip1.TabIndex = 23;
            this.menuStrip1.Text = "menuStrip1";
            // 
            // fileToolStripMenuItem
            // 
            this.fileToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.loadTestOptionsToolStripMenuItem,
            this.saveTestOptionsToolStripMenuItem,
            this.exitToolStripMenuItem});
            this.fileToolStripMenuItem.Name = "fileToolStripMenuItem";
            this.fileToolStripMenuItem.Size = new System.Drawing.Size(37, 20);
            this.fileToolStripMenuItem.Text = "&File";
            // 
            // loadTestOptionsToolStripMenuItem
            // 
            this.loadTestOptionsToolStripMenuItem.Name = "loadTestOptionsToolStripMenuItem";
            this.loadTestOptionsToolStripMenuItem.Size = new System.Drawing.Size(170, 22);
            this.loadTestOptionsToolStripMenuItem.Text = "&Load Test Options";
            this.loadTestOptionsToolStripMenuItem.Click += new System.EventHandler(this.loadTestOptionsToolStripMenuItem_Click);
            // 
            // saveTestOptionsToolStripMenuItem
            // 
            this.saveTestOptionsToolStripMenuItem.Name = "saveTestOptionsToolStripMenuItem";
            this.saveTestOptionsToolStripMenuItem.Size = new System.Drawing.Size(170, 22);
            this.saveTestOptionsToolStripMenuItem.Text = "&Save Test Options";
            this.saveTestOptionsToolStripMenuItem.Click += new System.EventHandler(this.saveTestOptionsToolStripMenuItem_Click);
            // 
            // exitToolStripMenuItem
            // 
            this.exitToolStripMenuItem.Name = "exitToolStripMenuItem";
            this.exitToolStripMenuItem.Size = new System.Drawing.Size(170, 22);
            this.exitToolStripMenuItem.Text = "E&xit";
            this.exitToolStripMenuItem.Click += new System.EventHandler(this.exitToolStripMenuItem_Click);
            // 
            // generateCasesToolStripMenuItem
            // 
            this.generateCasesToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.sourcesToolStripMenuItem1,
            this.toolStripMenuItem3,
            this.toolStripSeparator1,
            this.generateToolStripMenuItem,
            this.generateFromExistingToolStripMenuItem});
            this.generateCasesToolStripMenuItem.Name = "generateCasesToolStripMenuItem";
            this.generateCasesToolStripMenuItem.Size = new System.Drawing.Size(99, 20);
            this.generateCasesToolStripMenuItem.Text = "&Generate Cases";
            // 
            // sourcesToolStripMenuItem1
            // 
            this.sourcesToolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItem1,
            this.toolStripMenuItem2});
            this.sourcesToolStripMenuItem1.Name = "sourcesToolStripMenuItem1";
            this.sourcesToolStripMenuItem1.Size = new System.Drawing.Size(198, 22);
            this.sourcesToolStripMenuItem1.Text = "&Sources";
            // 
            // toolStripMenuItem1
            // 
            this.toolStripMenuItem1.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripTextBox1});
            this.toolStripMenuItem1.Name = "toolStripMenuItem1";
            this.toolStripMenuItem1.Size = new System.Drawing.Size(185, 22);
            this.toolStripMenuItem1.Text = "Custom DB";
            // 
            // toolStripTextBox1
            // 
            this.toolStripTextBox1.Name = "toolStripTextBox1";
            this.toolStripTextBox1.Size = new System.Drawing.Size(135, 23);
            this.toolStripTextBox1.Text = "Enter Custom DB Name";
            this.toolStripTextBox1.Click += new System.EventHandler(this.toolStripTextBox1_Click);
            // 
            // toolStripMenuItem2
            // 
            this.toolStripMenuItem2.Name = "toolStripMenuItem2";
            this.toolStripMenuItem2.Size = new System.Drawing.Size(185, 22);
            this.toolStripMenuItem2.Text = "Save Loaded Schema";
            this.toolStripMenuItem2.Click += new System.EventHandler(this.toolStripMenuItem2_Click);
            // 
            // toolStripMenuItem3
            // 
            this.toolStripMenuItem3.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripMenuItem4,
            this.toolStripMenuItem5,
            this.toolStripMenuItem6});
            this.toolStripMenuItem3.Name = "toolStripMenuItem3";
            this.toolStripMenuItem3.Size = new System.Drawing.Size(198, 22);
            this.toolStripMenuItem3.Text = "&Parameters";
            // 
            // toolStripMenuItem4
            // 
            this.toolStripMenuItem4.Name = "toolStripMenuItem4";
            this.toolStripMenuItem4.Size = new System.Drawing.Size(164, 22);
            this.toolStripMenuItem4.Text = "&Load Parameters";
            this.toolStripMenuItem4.Click += new System.EventHandler(this.toolStripMenuItem4_Click);
            // 
            // toolStripMenuItem5
            // 
            this.toolStripMenuItem5.Name = "toolStripMenuItem5";
            this.toolStripMenuItem5.Size = new System.Drawing.Size(164, 22);
            this.toolStripMenuItem5.Text = "&Flush Parameters";
            this.toolStripMenuItem5.Click += new System.EventHandler(this.toolStripMenuItem5_Click);
            // 
            // toolStripMenuItem6
            // 
            this.toolStripMenuItem6.Name = "toolStripMenuItem6";
            this.toolStripMenuItem6.Size = new System.Drawing.Size(164, 22);
            this.toolStripMenuItem6.Text = "Apply Filter";
            // 
            // toolStripSeparator1
            // 
            this.toolStripSeparator1.Name = "toolStripSeparator1";
            this.toolStripSeparator1.Size = new System.Drawing.Size(195, 6);
            // 
            // generateToolStripMenuItem
            // 
            this.generateToolStripMenuItem.Name = "generateToolStripMenuItem";
            this.generateToolStripMenuItem.ShortcutKeys = System.Windows.Forms.Keys.F5;
            this.generateToolStripMenuItem.Size = new System.Drawing.Size(198, 22);
            this.generateToolStripMenuItem.Text = "&Generate Test Cases";
            this.generateToolStripMenuItem.Click += new System.EventHandler(this.generateToolStripMenuItem_Click);
            // 
            // generateFromExistingToolStripMenuItem
            // 
            this.generateFromExistingToolStripMenuItem.Name = "generateFromExistingToolStripMenuItem";
            this.generateFromExistingToolStripMenuItem.Size = new System.Drawing.Size(198, 22);
            this.generateFromExistingToolStripMenuItem.Text = "Generate &From Existing";
            this.generateFromExistingToolStripMenuItem.Click += new System.EventHandler(this.generateFromExistingToolStripMenuItem_Click);
            // 
            // testDataToolStripMenuItem
            // 
            this.testDataToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.generateToolStripMenuItem1});
            this.testDataToolStripMenuItem.Name = "testDataToolStripMenuItem";
            this.testDataToolStripMenuItem.Size = new System.Drawing.Size(68, 20);
            this.testDataToolStripMenuItem.Text = "&Test Data";
            // 
            // generateToolStripMenuItem1
            // 
            this.generateToolStripMenuItem1.Name = "generateToolStripMenuItem1";
            this.generateToolStripMenuItem1.Size = new System.Drawing.Size(121, 22);
            this.generateToolStripMenuItem1.Text = "&Generate";
            this.generateToolStripMenuItem1.Click += new System.EventHandler(this.generateToolStripMenuItem1_Click);
            // 
            // testCaseMatcherToolStripMenuItem
            // 
            this.testCaseMatcherToolStripMenuItem.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.loadGeneratedCasesToolStripMenuItem,
            this.loadDetailedCasesToolStripMenuItem,
            this.toolStripSeparator4,
            this.loadExistingMatchesToolStripMenuItem,
            this.saveTestCaseMatchesToolStripMenuItem,
            this.toolStripSeparator3,
            this.applyMatchesToVSMDIToolStripMenuItem});
            this.testCaseMatcherToolStripMenuItem.Name = "testCaseMatcherToolStripMenuItem";
            this.testCaseMatcherToolStripMenuItem.Size = new System.Drawing.Size(116, 20);
            this.testCaseMatcherToolStripMenuItem.Text = "Test &Case Matcher";
            // 
            // loadGeneratedCasesToolStripMenuItem
            // 
            this.loadGeneratedCasesToolStripMenuItem.Name = "loadGeneratedCasesToolStripMenuItem";
            this.loadGeneratedCasesToolStripMenuItem.Size = new System.Drawing.Size(208, 22);
            this.loadGeneratedCasesToolStripMenuItem.Text = "Load &Generated Cases";
            this.loadGeneratedCasesToolStripMenuItem.Click += new System.EventHandler(this.loadGeneratedCasesToolStripMenuItem_Click);
            // 
            // loadDetailedCasesToolStripMenuItem
            // 
            this.loadDetailedCasesToolStripMenuItem.Name = "loadDetailedCasesToolStripMenuItem";
            this.loadDetailedCasesToolStripMenuItem.Size = new System.Drawing.Size(208, 22);
            this.loadDetailedCasesToolStripMenuItem.Text = "Load &Detailed Cases";
            this.loadDetailedCasesToolStripMenuItem.Click += new System.EventHandler(this.loadDetailedCasesToolStripMenuItem_Click);
            // 
            // toolStripSeparator4
            // 
            this.toolStripSeparator4.Name = "toolStripSeparator4";
            this.toolStripSeparator4.Size = new System.Drawing.Size(205, 6);
            // 
            // loadExistingMatchesToolStripMenuItem
            // 
            this.loadExistingMatchesToolStripMenuItem.Name = "loadExistingMatchesToolStripMenuItem";
            this.loadExistingMatchesToolStripMenuItem.Size = new System.Drawing.Size(208, 22);
            this.loadExistingMatchesToolStripMenuItem.Text = "Load &Existing Matches";
            this.loadExistingMatchesToolStripMenuItem.Click += new System.EventHandler(this.loadExistingMatchesToolStripMenuItem_Click);
            // 
            // saveTestCaseMatchesToolStripMenuItem
            // 
            this.saveTestCaseMatchesToolStripMenuItem.Name = "saveTestCaseMatchesToolStripMenuItem";
            this.saveTestCaseMatchesToolStripMenuItem.Size = new System.Drawing.Size(208, 22);
            this.saveTestCaseMatchesToolStripMenuItem.Text = "&Save Test Case Matches";
            this.saveTestCaseMatchesToolStripMenuItem.Click += new System.EventHandler(this.saveTestCaseMatchesToolStripMenuItem_Click);
            // 
            // toolStripSeparator3
            // 
            this.toolStripSeparator3.Name = "toolStripSeparator3";
            this.toolStripSeparator3.Size = new System.Drawing.Size(205, 6);
            // 
            // applyMatchesToVSMDIToolStripMenuItem
            // 
            this.applyMatchesToVSMDIToolStripMenuItem.Name = "applyMatchesToVSMDIToolStripMenuItem";
            this.applyMatchesToVSMDIToolStripMenuItem.Size = new System.Drawing.Size(208, 22);
            this.applyMatchesToVSMDIToolStripMenuItem.Text = "&Apply Matches To VSMDI";
            this.applyMatchesToVSMDIToolStripMenuItem.Click += new System.EventHandler(this.applyMatchesToVSMDIToolStripMenuItem_Click);
            // 
            // tabControl1
            // 
            this.tabControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.tabControl1.Controls.Add(this.tabPage1);
            this.tabControl1.Controls.Add(this.tabPage2);
            this.tabControl1.Controls.Add(this.tabPage3);
            this.tabControl1.Location = new System.Drawing.Point(11, 28);
            this.tabControl1.Name = "tabControl1";
            this.tabControl1.SelectedIndex = 0;
            this.tabControl1.Size = new System.Drawing.Size(843, 594);
            this.tabControl1.TabIndex = 24;
            // 
            // tabPage1
            // 
            this.tabPage1.Controls.Add(this.panel1);
            this.tabPage1.Location = new System.Drawing.Point(4, 22);
            this.tabPage1.Name = "tabPage1";
            this.tabPage1.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage1.Size = new System.Drawing.Size(835, 568);
            this.tabPage1.TabIndex = 0;
            this.tabPage1.Text = "tabPage1";
            this.tabPage1.UseVisualStyleBackColor = true;
            // 
            // tabPage2
            // 
            this.tabPage2.Controls.Add(this.outputFileTextBox);
            this.tabPage2.Controls.Add(this.label8);
            this.tabPage2.Controls.Add(this.groupBox1);
            this.tabPage2.Controls.Add(this.groupBox2);
            this.tabPage2.Controls.Add(this.replacementGrid);
            this.tabPage2.Location = new System.Drawing.Point(4, 22);
            this.tabPage2.Name = "tabPage2";
            this.tabPage2.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage2.Size = new System.Drawing.Size(835, 568);
            this.tabPage2.TabIndex = 1;
            this.tabPage2.Text = "tabPage2";
            this.tabPage2.UseVisualStyleBackColor = true;
            // 
            // outputFileTextBox
            // 
            this.outputFileTextBox.Location = new System.Drawing.Point(79, 539);
            this.outputFileTextBox.Name = "outputFileTextBox";
            this.outputFileTextBox.Size = new System.Drawing.Size(750, 20);
            this.outputFileTextBox.TabIndex = 30;
            this.outputFileTextBox.Text = "c:\\results.txt";
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.Location = new System.Drawing.Point(12, 542);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(61, 13);
            this.label8.TabIndex = 29;
            this.label8.Text = "Output File:";
            // 
            // groupBox1
            // 
            this.groupBox1.Controls.Add(this.baseXMLTextBox);
            this.groupBox1.Location = new System.Drawing.Point(6, 6);
            this.groupBox1.Name = "groupBox1";
            this.groupBox1.Size = new System.Drawing.Size(823, 198);
            this.groupBox1.TabIndex = 27;
            this.groupBox1.TabStop = false;
            this.groupBox1.Text = "Base XML";
            // 
            // baseXMLTextBox
            // 
            this.baseXMLTextBox.Location = new System.Drawing.Point(6, 19);
            this.baseXMLTextBox.Name = "baseXMLTextBox";
            this.baseXMLTextBox.Size = new System.Drawing.Size(811, 173);
            this.baseXMLTextBox.TabIndex = 0;
            this.baseXMLTextBox.Text = "";
            // 
            // groupBox2
            // 
            this.groupBox2.Controls.Add(this.radioButton1);
            this.groupBox2.Controls.Add(this.radioButton2);
            this.groupBox2.Controls.Add(this.insertionXMLTextBox);
            this.groupBox2.Controls.Add(this.textBox5);
            this.groupBox2.Location = new System.Drawing.Point(6, 204);
            this.groupBox2.Name = "groupBox2";
            this.groupBox2.Size = new System.Drawing.Size(823, 194);
            this.groupBox2.TabIndex = 28;
            this.groupBox2.TabStop = false;
            this.groupBox2.Text = "Insertion XML";
            // 
            // radioButton1
            // 
            this.radioButton1.AutoSize = true;
            this.radioButton1.Location = new System.Drawing.Point(121, 173);
            this.radioButton1.Name = "radioButton1";
            this.radioButton1.Size = new System.Drawing.Size(130, 17);
            this.radioButton1.TabIndex = 7;
            this.radioButton1.Text = "Insert After XML Node";
            this.radioButton1.UseVisualStyleBackColor = true;
            // 
            // radioButton2
            // 
            this.radioButton2.AutoSize = true;
            this.radioButton2.Checked = true;
            this.radioButton2.Location = new System.Drawing.Point(6, 173);
            this.radioButton2.Name = "radioButton2";
            this.radioButton2.Size = new System.Drawing.Size(109, 17);
            this.radioButton2.TabIndex = 6;
            this.radioButton2.TabStop = true;
            this.radioButton2.Text = "Insert At Wildcard";
            this.radioButton2.UseVisualStyleBackColor = true;
            // 
            // insertionXMLTextBox
            // 
            this.insertionXMLTextBox.Location = new System.Drawing.Point(6, 19);
            this.insertionXMLTextBox.Name = "insertionXMLTextBox";
            this.insertionXMLTextBox.Size = new System.Drawing.Size(811, 148);
            this.insertionXMLTextBox.TabIndex = 0;
            this.insertionXMLTextBox.Text = "";
            // 
            // textBox5
            // 
            this.textBox5.Location = new System.Drawing.Point(257, 170);
            this.textBox5.Name = "textBox5";
            this.textBox5.Size = new System.Drawing.Size(100, 20);
            this.textBox5.TabIndex = 5;
            this.textBox5.Text = "%Insert%";
            // 
            // replacementGrid
            // 
            this.replacementGrid.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            this.replacementGrid.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.replacementGrid.Location = new System.Drawing.Point(6, 404);
            this.replacementGrid.Name = "replacementGrid";
            this.replacementGrid.Size = new System.Drawing.Size(823, 124);
            this.replacementGrid.TabIndex = 26;
            // 
            // tabPage3
            // 
            this.tabPage3.Controls.Add(this.testcaseGroupTextBox);
            this.tabPage3.Controls.Add(this.groupBox5);
            this.tabPage3.Controls.Add(this.label9);
            this.tabPage3.Controls.Add(this.groupBox4);
            this.tabPage3.Controls.Add(this.groupBox3);
            this.tabPage3.Location = new System.Drawing.Point(4, 22);
            this.tabPage3.Name = "tabPage3";
            this.tabPage3.Padding = new System.Windows.Forms.Padding(3);
            this.tabPage3.Size = new System.Drawing.Size(835, 568);
            this.tabPage3.TabIndex = 2;
            this.tabPage3.Text = "tabPage3";
            this.tabPage3.UseVisualStyleBackColor = true;
            // 
            // testcaseGroupTextBox
            // 
            this.testcaseGroupTextBox.Location = new System.Drawing.Point(133, 536);
            this.testcaseGroupTextBox.Name = "testcaseGroupTextBox";
            this.testcaseGroupTextBox.Size = new System.Drawing.Size(696, 20);
            this.testcaseGroupTextBox.TabIndex = 30;
            this.testcaseGroupTextBox.Text = "BVTs";
            // 
            // groupBox5
            // 
            this.groupBox5.Controls.Add(this.textBox6);
            this.groupBox5.Controls.Add(this.generatedCaseDetails);
            this.groupBox5.Controls.Add(this.generatedCasesList);
            this.groupBox5.Controls.Add(this.clearGeneratedButton);
            this.groupBox5.Location = new System.Drawing.Point(6, 6);
            this.groupBox5.Name = "groupBox5";
            this.groupBox5.Size = new System.Drawing.Size(823, 278);
            this.groupBox5.TabIndex = 25;
            this.groupBox5.TabStop = false;
            this.groupBox5.Text = "Generated Testcase Files";
            // 
            // textBox6
            // 
            this.textBox6.Location = new System.Drawing.Point(6, 22);
            this.textBox6.Name = "textBox6";
            this.textBox6.Size = new System.Drawing.Size(144, 20);
            this.textBox6.TabIndex = 4;
            this.textBox6.TextChanged += new System.EventHandler(this.textBox6_TextChanged);
            // 
            // generatedCaseDetails
            // 
            this.generatedCaseDetails.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.generatedCaseDetails.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.generatedCaseDetails.Location = new System.Drawing.Point(260, 19);
            this.generatedCaseDetails.Name = "generatedCaseDetails";
            this.generatedCaseDetails.Size = new System.Drawing.Size(556, 242);
            this.generatedCaseDetails.TabIndex = 3;
            this.generatedCaseDetails.Text = "";
            // 
            // generatedCasesList
            // 
            this.generatedCasesList.FormattingEnabled = true;
            this.generatedCasesList.Location = new System.Drawing.Point(6, 49);
            this.generatedCasesList.Name = "generatedCasesList";
            this.generatedCasesList.Size = new System.Drawing.Size(248, 212);
            this.generatedCasesList.TabIndex = 2;
            this.generatedCasesList.SelectedIndexChanged += new System.EventHandler(this.generatedCasesList_SelectedIndexChanged);
            // 
            // clearGeneratedButton
            // 
            this.clearGeneratedButton.Location = new System.Drawing.Point(156, 19);
            this.clearGeneratedButton.Name = "clearGeneratedButton";
            this.clearGeneratedButton.Size = new System.Drawing.Size(98, 24);
            this.clearGeneratedButton.TabIndex = 1;
            this.clearGeneratedButton.Text = "Clear";
            this.clearGeneratedButton.UseVisualStyleBackColor = true;
            this.clearGeneratedButton.Click += new System.EventHandler(this.clearGeneratedButton_Click);
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.Location = new System.Drawing.Point(9, 539);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(127, 13);
            this.label9.TabIndex = 29;
            this.label9.Text = "Testcase Group To Filter:";
            // 
            // groupBox4
            // 
            this.groupBox4.Controls.Add(this.matchesGrid);
            this.groupBox4.Controls.Add(this.clearDetailedCasesButton);
            this.groupBox4.Controls.Add(this.makeMatchButton);
            this.groupBox4.Location = new System.Drawing.Point(7, 290);
            this.groupBox4.Name = "groupBox4";
            this.groupBox4.Size = new System.Drawing.Size(822, 179);
            this.groupBox4.TabIndex = 26;
            this.groupBox4.TabStop = false;
            this.groupBox4.Text = "Detailed Testcase File";
            // 
            // matchesGrid
            // 
            this.matchesGrid.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)
                        | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.matchesGrid.AutoSizeColumnsMode = System.Windows.Forms.DataGridViewAutoSizeColumnsMode.Fill;
            dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle1.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            dataGridViewCellStyle1.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.matchesGrid.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
            this.matchesGrid.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.matchesGrid.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
            this.DetailedCase,
            this.GeneratedCase});
            dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle2.BackColor = System.Drawing.SystemColors.Window;
            dataGridViewCellStyle2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            dataGridViewCellStyle2.ForeColor = System.Drawing.SystemColors.ControlText;
            dataGridViewCellStyle2.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle2.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle2.WrapMode = System.Windows.Forms.DataGridViewTriState.False;
            this.matchesGrid.DefaultCellStyle = dataGridViewCellStyle2;
            this.matchesGrid.Location = new System.Drawing.Point(155, 19);
            this.matchesGrid.MultiSelect = false;
            this.matchesGrid.Name = "matchesGrid";
            dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
            dataGridViewCellStyle3.BackColor = System.Drawing.SystemColors.Control;
            dataGridViewCellStyle3.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            dataGridViewCellStyle3.ForeColor = System.Drawing.SystemColors.WindowText;
            dataGridViewCellStyle3.SelectionBackColor = System.Drawing.SystemColors.Highlight;
            dataGridViewCellStyle3.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
            dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
            this.matchesGrid.RowHeadersDefaultCellStyle = dataGridViewCellStyle3;
            this.matchesGrid.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.CellSelect;
            this.matchesGrid.Size = new System.Drawing.Size(661, 146);
            this.matchesGrid.TabIndex = 4;
            this.matchesGrid.CellContentClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.matchesGrid_CellContentClick);
            // 
            // DetailedCase
            // 
            this.DetailedCase.HeaderText = "Detailed Case";
            this.DetailedCase.Name = "DetailedCase";
            this.DetailedCase.ReadOnly = true;
            // 
            // GeneratedCase
            // 
            this.GeneratedCase.HeaderText = "Generated Case";
            this.GeneratedCase.Name = "GeneratedCase";
            this.GeneratedCase.ReadOnly = true;
            // 
            // clearDetailedCasesButton
            // 
            this.clearDetailedCasesButton.Location = new System.Drawing.Point(11, 19);
            this.clearDetailedCasesButton.Name = "clearDetailedCasesButton";
            this.clearDetailedCasesButton.Size = new System.Drawing.Size(138, 24);
            this.clearDetailedCasesButton.TabIndex = 3;
            this.clearDetailedCasesButton.Text = "Clear List";
            this.clearDetailedCasesButton.UseVisualStyleBackColor = true;
            this.clearDetailedCasesButton.Click += new System.EventHandler(this.clearDetailedCasesButton_Click);
            // 
            // makeMatchButton
            // 
            this.makeMatchButton.Location = new System.Drawing.Point(11, 49);
            this.makeMatchButton.Name = "makeMatchButton";
            this.makeMatchButton.Size = new System.Drawing.Size(138, 24);
            this.makeMatchButton.TabIndex = 1;
            this.makeMatchButton.Text = "Match With Generated";
            this.makeMatchButton.UseVisualStyleBackColor = true;
            this.makeMatchButton.Click += new System.EventHandler(this.makeMatchButton_Click);
            // 
            // groupBox3
            // 
            this.groupBox3.Controls.Add(this.detailedDescriptionLabel);
            this.groupBox3.Location = new System.Drawing.Point(7, 475);
            this.groupBox3.Name = "groupBox3";
            this.groupBox3.Size = new System.Drawing.Size(822, 47);
            this.groupBox3.TabIndex = 27;
            this.groupBox3.TabStop = false;
            this.groupBox3.Text = "Detailed Testcase Description";
            // 
            // detailedDescriptionLabel
            // 
            this.detailedDescriptionLabel.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                        | System.Windows.Forms.AnchorStyles.Right)));
            this.detailedDescriptionLabel.AutoSize = true;
            this.detailedDescriptionLabel.Location = new System.Drawing.Point(8, 18);
            this.detailedDescriptionLabel.Name = "detailedDescriptionLabel";
            this.detailedDescriptionLabel.Size = new System.Drawing.Size(0, 13);
            this.detailedDescriptionLabel.TabIndex = 0;
            // 
            // xmlNodeRadio
            // 
            this.xmlNodeRadio.AutoSize = true;
            this.xmlNodeRadio.Location = new System.Drawing.Point(127, 188);
            this.xmlNodeRadio.Name = "xmlNodeRadio";
            this.xmlNodeRadio.Size = new System.Drawing.Size(130, 17);
            this.xmlNodeRadio.TabIndex = 7;
            this.xmlNodeRadio.Text = "Insert After XML Node";
            this.xmlNodeRadio.UseVisualStyleBackColor = true;
            // 
            // wildcardRadio
            // 
            this.wildcardRadio.AutoSize = true;
            this.wildcardRadio.Checked = true;
            this.wildcardRadio.Location = new System.Drawing.Point(12, 188);
            this.wildcardRadio.Name = "wildcardRadio";
            this.wildcardRadio.Size = new System.Drawing.Size(109, 17);
            this.wildcardRadio.TabIndex = 6;
            this.wildcardRadio.TabStop = true;
            this.wildcardRadio.Text = "Insert At Wildcard";
            this.wildcardRadio.UseVisualStyleBackColor = true;
            // 
            // insertionWildcardTextBox
            // 
            this.insertionWildcardTextBox.Location = new System.Drawing.Point(263, 185);
            this.insertionWildcardTextBox.Name = "insertionWildcardTextBox";
            this.insertionWildcardTextBox.Size = new System.Drawing.Size(100, 20);
            this.insertionWildcardTextBox.TabIndex = 5;
            this.insertionWildcardTextBox.Text = "%Insert%";
            // 
            // DITGen
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(862, 653);
            this.Controls.Add(this.tabControl1);
            this.Controls.Add(this.statusStrip1);
            this.Controls.Add(this.menuStrip1);
            this.MainMenuStrip = this.menuStrip1;
            this.Name = "DITGen";
            this.Text = "DITGen - Data Interface Test Generator";
            this.Load += new System.EventHandler(this.Form1_Load);
            this.panel1.ResumeLayout(false);
            this.panel1.PerformLayout();
            this.statusStrip1.ResumeLayout(false);
            this.statusStrip1.PerformLayout();
            this.menuStrip1.ResumeLayout(false);
            this.menuStrip1.PerformLayout();
            this.tabControl1.ResumeLayout(false);
            this.tabPage1.ResumeLayout(false);
            this.tabPage2.ResumeLayout(false);
            this.tabPage2.PerformLayout();
            this.groupBox1.ResumeLayout(false);
            this.groupBox2.ResumeLayout(false);
            this.groupBox2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.replacementGrid)).EndInit();
            this.tabPage3.ResumeLayout(false);
            this.tabPage3.PerformLayout();
            this.groupBox5.ResumeLayout(false);
            this.groupBox5.PerformLayout();
            this.groupBox4.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.matchesGrid)).EndInit();
            this.groupBox3.ResumeLayout(false);
            this.groupBox3.PerformLayout();
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        

        #endregion

        private System.Windows.Forms.TreeView procedureTree;
        private System.Windows.Forms.Label label1;
        private System.Windows.Forms.Label label2;
        private System.Windows.Forms.Label label3;
        private System.Windows.Forms.Button button3;
        private System.Windows.Forms.Button button4;
        private System.Windows.Forms.Panel panel1;
        private System.Windows.Forms.Label label4;
        private System.Windows.Forms.TextBox textBox1;
        private System.Windows.Forms.TextBox textBox2;
        private System.Windows.Forms.Label label5;
        internal System.Windows.Forms.StatusStrip statusStrip1;
        private System.Windows.Forms.ToolStripStatusLabel toolStripStatusLabel1;
        private System.Windows.Forms.Button button6;
        private System.Windows.Forms.MenuStrip menuStrip1;
        private System.Windows.Forms.ToolStripMenuItem fileToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem exitToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadTestOptionsToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem saveTestOptionsToolStripMenuItem;
        private System.Windows.Forms.TextBox textBox3;
        private System.Windows.Forms.Label label6;
        private System.Windows.Forms.TextBox textBox4;
        private System.Windows.Forms.Label label7;
        internal System.Windows.Forms.CheckBox checkBox2;
        private System.Windows.Forms.CheckBox checkBox1;
        private System.Windows.Forms.CheckedListBox negativeValueList;
        private System.Windows.Forms.CheckedListBox positiveValueList;
        private System.Windows.Forms.TabControl tabControl1;
        private System.Windows.Forms.TabPage tabPage1;
        private System.Windows.Forms.TabPage tabPage2;
        private System.Windows.Forms.TabPage tabPage3;
        private System.Windows.Forms.GroupBox groupBox2;
        private System.Windows.Forms.RadioButton radioButton1;
        private System.Windows.Forms.RadioButton radioButton2;
        private System.Windows.Forms.RichTextBox insertionXMLTextBox;
        private System.Windows.Forms.TextBox textBox5;
        private System.Windows.Forms.DataGridView replacementGrid;
        private System.Windows.Forms.RadioButton xmlNodeRadio;
        private System.Windows.Forms.RadioButton wildcardRadio;
        private System.Windows.Forms.TextBox insertionWildcardTextBox;
        private System.Windows.Forms.GroupBox groupBox1;
        private System.Windows.Forms.RichTextBox baseXMLTextBox;
        private System.Windows.Forms.TextBox outputFileTextBox;
        private System.Windows.Forms.Label label8;
        private System.Windows.Forms.TextBox testcaseGroupTextBox;
        private System.Windows.Forms.GroupBox groupBox5;
        private System.Windows.Forms.RichTextBox generatedCaseDetails;
        private System.Windows.Forms.ListBox generatedCasesList;
        private System.Windows.Forms.Button clearGeneratedButton;
        private System.Windows.Forms.Label label9;
        private System.Windows.Forms.GroupBox groupBox4;
        private System.Windows.Forms.DataGridView matchesGrid;
        private System.Windows.Forms.DataGridViewTextBoxColumn DetailedCase;
        private System.Windows.Forms.DataGridViewTextBoxColumn GeneratedCase;
        private System.Windows.Forms.Button clearDetailedCasesButton;
        private System.Windows.Forms.Button makeMatchButton;
        private System.Windows.Forms.GroupBox groupBox3;
        private System.Windows.Forms.Label detailedDescriptionLabel;
        private System.Windows.Forms.ToolStripMenuItem generateCasesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem sourcesToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem1;
        private System.Windows.Forms.ToolStripTextBox toolStripTextBox1;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem2;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem3;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem4;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem5;
        private System.Windows.Forms.ToolStripMenuItem toolStripMenuItem6;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator1;
        private System.Windows.Forms.ToolStripMenuItem generateToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem testDataToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem testCaseMatcherToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem generateToolStripMenuItem1;
        private System.Windows.Forms.ToolStripMenuItem loadGeneratedCasesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadDetailedCasesToolStripMenuItem;
        private System.Windows.Forms.ToolStripMenuItem loadExistingMatchesToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator4;
        private System.Windows.Forms.ToolStripMenuItem saveTestCaseMatchesToolStripMenuItem;
        private System.Windows.Forms.ToolStripSeparator toolStripSeparator3;
        private System.Windows.Forms.ToolStripMenuItem applyMatchesToVSMDIToolStripMenuItem;
        private System.Windows.Forms.TextBox textBox6;
        private System.Windows.Forms.ToolStripMenuItem generateFromExistingToolStripMenuItem;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\CodeWriter.cs ===
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Text;
using System.Xml;
using Microsoft.CSharp;

namespace Microsoft.EMS.Test.Tools
{
    public class CodeWriter
    {
        #region Fields

        private static DITGen form;
        private static TextWriter writer = null;
        private static string outputPath = String.Empty;

        #endregion

        #region Properties

        /// <summary>
        /// Gets and sets the output path to be used when generating and outputting code
        /// </summary>
        public static string OutputPath
        {
            get { return outputPath; }
            set 
            { 
                if(!string.IsNullOrEmpty(value))
                    outputPath = value; 
            }
        }

        #endregion

        #region Constructor and Initialization

        private CodeWriter() { }

        public static void Initialize(DITGen ditGen)
        {
            if(null != ditGen)
                form = ditGen;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Write the beginning of the test code using the top boiler plate code
        /// </summary>
        /// <param name="serverName">The server name the test code will use</param>
        /// <param name="databaseName">The database name the test code will use</param>
        public static void WriteBeginningOfTestFile(string serverName, string databaseName)
        {            
            writer = new StreamWriter(outputPath + @"\test.cs");

            string boilerPlate = form.dataInterface.TopBoilerPlateCode;

            boilerPlate = boilerPlate.Replace("{0}", serverName); 
            boilerPlate = boilerPlate.Replace("{1}", databaseName);
            boilerPlate = boilerPlate.Replace("{2}", form.currentInterfaceModule);
            WriteBoilerPlate(boilerPlate);        
        }


        /// <summary>
        /// Write a test case to the generated code file
        /// </summary>
        /// <param name="methodName">The name to give the test case method</param>
        public static void WriteTestcase(string methodName)
        {
            string boilerPlate = form.dataInterface.TestcaseBoilerPlateCode;            
            boilerPlate = boilerPlate.Replace("{0}", methodName); 
            WriteBoilerPlate(boilerPlate);        
        }

        /// <summary>
        /// Write the end of the test code using the bottom boiler plate code
        /// </summary>
        public static void WriteEndOfTestFile()
        {
            string boilerPlate = form.dataInterface.BottomBoilerPlateCode;
            WriteBoilerPlate(boilerPlate);
            writer.Close();
        }

        
        private static void WriteBoilerPlate(string boilerPlate)
        {
            writer.WriteLine(boilerPlate);            
            writer.WriteLine();
            writer.WriteLine();
        }

        /// <summary>
        /// Write the necessary build files: sources and makefile.inc
        /// </summary>
        /// <param name="generatedProcedures">The list of procedures the test cases cover</param>
        public static void WriteBuildFiles(List<string> generatedProcedures)
        {
            if (null == generatedProcedures)
                return;

            string resources = String.Empty;
            string compressFiles = String.Empty;

            foreach (string procedure in generatedProcedures)
            {
                resources += "/resource:" + procedure + "Tests.def \\" + Environment.NewLine;
                compressFiles += "\tdeflate.exe " + procedure + "Tests.xml " + procedure + "Tests.def" + Environment.NewLine;
            }

            TextReader reader = null;
            string resourceNamespace = Assembly.GetExecutingAssembly().GetName().Name;
            resourceNamespace += ".Resources";

            reader = RetrieveResource(resourceNamespace, "sources");
            writer = new StreamWriter(outputPath + @"\sources");
            writer.WriteLine(
                String.Format(reader.ReadToEnd(), resources));
            writer.Close(); 
            reader.Close();

            reader = RetrieveResource(resourceNamespace, "makefile.inc");
            writer = new StreamWriter(outputPath + @"\makefile.inc");
            writer.WriteLine(
                String.Format(reader.ReadToEnd(), compressFiles));
            writer.Close();
            reader.Close();

            reader = RetrieveResource(resourceNamespace, "placefile");
            writer = new StreamWriter(outputPath + @"\placefile");
            writer.WriteLine(
                String.Format(reader.ReadToEnd(), compressFiles));
            writer.Close();
            reader.Close();

            reader = RetrieveResource(resourceNamespace, "App.config");           
            writer = new StreamWriter(outputPath + @"\App.config");
            writer.WriteLine(
                String.Format(reader.ReadToEnd(), form.currentInterfaceModule));
            writer.Close();
            reader.Close();

            File.Copy(
                System.IO.Path.GetDirectoryName(
                    System.Reflection.Assembly.GetExecutingAssembly().GetModules()[0].FullyQualifiedName)
                    + "\\DBSchema.dll",
                outputPath + @"\DBSchema.dll", true);
        }

        private static TextReader RetrieveResource(string resourceNamespace, string resource)
        {
            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resource);
            if (null == stream)
                stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(
                    String.Format("{0}.{1}", resourceNamespace, resource));

            return new StreamReader(stream);;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\Program.cs ===
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace Microsoft.EMS.Test.Tools
{
    static class Program
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new DITGen());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\ParameterStack.cs ===
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Xml;
using System.Windows.Forms;

//using Microsoft.EMS.Schema.Catalog;
using Microsoft.EMS.Tools;
using Microsoft.EMS.Tools.Common;

namespace Microsoft.EMS.Test.Tools
{
    #region Helper Classes

    internal class Node
    {
        #region Fields

        private string parameter;
        private string nodeValue;
        private  List<Node> nodes;

        #endregion

        #region Properties

        /// <summary>
        /// Gets and sets the parameter value for the node
        /// </summary>
        public string Parameter
        {
            get { return parameter; }
            set
            {
                if (!string.IsNullOrEmpty(value))
                    parameter = value;
            }
        }

        /// <summary>
        /// Gets and sets the Value for the node
        /// </summary>
        public string Value
        {
            get { return nodeValue; }
            set
            {
                if (!string.IsNullOrEmpty(value))
                    nodeValue = value;
            }
        }

        /// <summary>
        /// Gets the leaves for the node
        /// </summary>
        public List<Node> Nodes
        {
            get { return nodes; }
        }

        #endregion

        #region Constructor 

        public Node(string newParameter, string newValue)
        {
            nodes = new List<Node>();
            parameter = newParameter;
            nodeValue = newValue;
        }

        #endregion
    }

    internal class ParameterStack : IDisposable
    {
        #region Fields

        private DITGen mainForm = null;
        private Node root;  
        private IDataInterface dataInterface;
        private static List<KeyValuePair<string, string>[]> duplicateCaseList;

        #endregion

        #region Properties

        /// <summary>
        /// Gets and sets the list of previously generated cases
        /// </summary>
        public static List<KeyValuePair<string, string>[]> CaseList
        {
            get { return duplicateCaseList; }
            set { duplicateCaseList = value; }
        }

        /// <summary>
        /// Gets the root node for the parameter tree
        /// </summary>
        public Node Root
        {
            get { return root; }
        }

        #endregion

        #region Constructor

        /// <summary>
        /// Construct the Parameter tree
        /// </summary>
        /// <param name="form">The parent for creating this parameter tree</param>
        /// <param name="defaultParametervalues">The default parameter values</param>
        /// <param name="parameter">The main parameter to vary on with this parameter tree</param>
        /// <param name="parameterValue">The value to use for the main parameter</param>
        /// <param name="availableParameters">The list of parameters to use</param>
        /// <param name="parameterOrder">The ordered collection of parameters (from the procedure tree control)</param>
        public ParameterStack(
            DITGen form,
            Dictionary<string, Dictionary<string, IParameter>> parameters,
            string parameter,
            string parameterValue,
            string currentMethod,
            List<Parameter> availableParameters,
            TreeNodeCollection parameterOrder)
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            string executionPath = System.Reflection.Assembly.GetEntryAssembly().Location;
            executionPath = executionPath.Substring(0, executionPath.LastIndexOf('\\')+1);

            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(
                executionPath + 
                config.AppSettings.Settings["DataInterfaceModule"].Value);

            dataInterface = (IDataInterface)assembly.CreateInstance(
                config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value,
                true);
            
            List<Node> currentLeaves = null;
            List<Node> leavesToProcess = new List<Node>();
            Node currentNode = root = null;
            mainForm = form;

            //construct the parameter tree
            foreach (TreeNode parameterNode in parameterOrder)
            {
                string name = parameterNode.Text;
                List<string> values = null;
                
                if(parameters.ContainsKey(currentMethod))
                    values = ((ParameterValue)parameters[currentMethod][name]).DefaultValues;
                else
                    values = ((ParameterValue)parameters["all"][name]).DefaultValues;
                                
                //defaultParameterValues[name];
                bool containsParameter = false;
                foreach (Parameter availableParameter in availableParameters)
                {
                    if (availableParameter.ParameterName == name)
                    {
                        containsParameter = true;
                        break;
                    }
                }

                if (!containsParameter)
                    continue;

                //iterate through all possible parameter combinations
                else if (null == root)
                {
                    root = new Node("root", "root");
                    foreach (string value in values)
                    {
                        Node newNode = new Node(name, value);
                        leavesToProcess.Add(newNode);
                        root.Nodes.Add(newNode);
                    }
                }
                else
                {
                    while (currentLeaves.Count > 0)
                    {
                        currentNode = currentLeaves[0];
                        currentLeaves.RemoveAt(0);

                        //if the current parameter is the main parameter for this tree
                        if (name == parameter)
                        {
                            Node newNode = new Node(parameter, parameterValue);
                            leavesToProcess.Add(newNode);
                            currentNode.Nodes.Add(newNode);
                        }

                        //add the appropriate leaves to the tree using the default values
                        //for the current parameter.
                        else
                        {
                            foreach (string value in values)
                            {
                                Node newNode = new Node(name, value);
                                leavesToProcess.Add(newNode);
                                currentNode.Nodes.Add(newNode);
                            }
                        }
                    }
                }

                currentLeaves = new List<Node>(leavesToProcess);
                leavesToProcess.Clear();
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Work through the parameter tree and output the resulting test cases
        /// </summary>
        /// <param name="writer">The XmlTextWriter to use when outputting the test cases</param>
        /// <param name="currentNode">The current node to be processed - initial call provides the root node of the tree</param>
        /// <param name="parameter">The name of the parameter being focused on</param>
        /// <param name="parameterValue">The value being used for the parameter</param>
        /// <param name="procedureName">The name of the procedure being processed</param>
        /// <param name="testcaseWriter">The XmlTextWriter specific to the test case being written</param>
        /// <param name="caseNumber">The current test case number</param>
        /// <param name="testCase">The stack of parameters to be processed - initial call provides an empty stack</param>
        public void ProcessStack(
            XmlTextWriter testcaseFileWriter,
            Node currentNode,
            string parameter,
            string parameterValue,
            string procedureName,
            XmlTextWriter testcaseWriter,
            ref int caseNumber,
            ref Stack<KeyValuePair<string, string>> testCase)
        {
            //if the parameter being worked on is not the parameter
            //that is being iterated over, only use the parameter's default values
            if (currentNode.Parameter != parameter)
            {
                testCase.Push(new KeyValuePair<string, string>(currentNode.Parameter, currentNode.Value.Replace(" - Default Value", "")));
            }

            //if the parameter being iterated over has been reached, iterate through
            //every possible value defined for it
            else
            {
                testCase.Push(new KeyValuePair<string, string>(parameter, parameterValue));
            }
                        
            //continue generating possible test case combinations if there are more
            //possible values for the parameter we are currently at
            while (currentNode.Nodes.Count > 0)
            {
                ProcessStack(testcaseFileWriter, currentNode.Nodes[0], parameter, parameterValue, procedureName, testcaseWriter, ref caseNumber, ref testCase);

                testCase.Pop();

                currentNode.Nodes.RemoveAt(0);

                if (currentNode.Nodes.Count == 0)
                    return;
            }

            //if all combinations down this path have been generated, check for duplicates and store the combination
            if (currentNode.Nodes.Count == 0)
            {
                KeyValuePair<string, string>[] caseArray = new KeyValuePair<string, string>[testCase.Count];                
                testCase.CopyTo(caseArray, 0);

                bool caseMatch = false;

                //check to see if this combination has already been generated
                foreach (KeyValuePair<string, string>[] existingCase in duplicateCaseList)
                {
                    caseMatch = true;
                    foreach (KeyValuePair<string, string> caseInput in caseArray)
                    {
                        foreach (KeyValuePair<string, string> existingInput in existingCase)
                        {
                            if (caseInput.Key == existingInput.Key)
                            {

                                if (caseInput.Value != existingInput.Value)
                                {
                                    caseMatch = false;
                                    break;
                                }
                                else
                                {
                                    break;
                                }
                            }
                        }
                    }

                    if (caseMatch == true)
                    {
                        break;
                    }
                }

                //if this is not a duplicate, output the testcase to the test case file
                if (caseMatch == false)
                {
                    duplicateCaseList.Add(caseArray);
                        
                    Stack<KeyValuePair<string, string>> writableTestCase = new Stack<KeyValuePair<string, string>>(testCase);
                    mainForm.testcaseStream = new System.IO.StringWriter();
                    testcaseWriter = new XmlTextWriter(mainForm.testcaseStream);
                    testcaseWriter.WriteStartElement(procedureName);
                    testcaseWriter.WriteAttributeString("xmlns", "urn:dbschema-config");

                    testcaseFileWriter.WriteStartElement("testCase");
                    testcaseFileWriter.WriteAttributeString("Number", caseNumber.ToString());
                    testcaseFileWriter.WriteAttributeString("Description", procedureName + "_" + parameter + "_" + caseNumber);
                    testcaseFileWriter.WriteStartElement("input");

                    WriteToFile(testcaseFileWriter, caseNumber++, writableTestCase.Pop(), writableTestCase, testcaseWriter);

                    testcaseFileWriter.WriteEndElement();
                    testcaseWriter.WriteEndElement();

                    testcaseFileWriter.WriteStartElement("RESULTS_NODE");
                    WriteCommandResults(procedureName, testcaseFileWriter);
                    testcaseFileWriter.WriteEndElement();

                    //mainForm.statusStrip1.Invoke(mainForm.updateProgressBar,
                    //    new object[] { 1, false });
                    
                    mainForm.statusStrip1.Invoke(mainForm.updateStatusLabel,
                        new object[] { "Generating test case " + caseNumber + " - " + procedureName, Color.Black });
                }
            }
        }


        private void WriteCommandResults(string methodName, XmlTextWriter writer)
        {
            try
            {
                //if results should be retrieved
                if (mainForm.checkBox2.Checked)
                {
                    string results = String.Empty;

                    //use the interface to execute the specified API
                    results = dataInterface.ExecuteAPI(
                        methodName,
                        mainForm.testcaseStream.GetStringBuilder().ToString(),
                            new object[] {
                            true,
                            new System.Xml.Schema.ValidationEventHandler(validationHandler),
                            writer});
                                        
                    writer.WriteRaw(results);                  
                }
            }
            catch (XmlException ex)
            {
                writer.WriteString(ex.Message);
            }
            finally
            {
                writer.WriteEndElement();
            }
        }
        

        private void validationHandler(object sender, System.Xml.Schema.ValidationEventArgs e)
        {
            throw new Exception(e.Message);
        }
        

        private void WriteToFile(XmlTextWriter writer, int caseNumber, KeyValuePair<string, string> parameter, Stack<KeyValuePair<string, string>> testCase, XmlTextWriter testcaseWriter)
        {
            //store the parameter if a value is specified for this test case
            if (parameter.Value != "NULL")
            {
                testcaseWriter.WriteRaw(
                    String.Format("<{0}>{1}</{0}>", parameter.Key, parameter.Value));
            }
        
            //store each parameter/value pair for this test case
            writer.WriteElementString(parameter.Key, parameter.Value);

            //continue writing test cases
            if (testCase.Count > 0)
                WriteToFile(writer, caseNumber, testCase.Pop(), testCase, testcaseWriter);
            else
                writer.WriteRaw(Environment.NewLine + "    ");
        }

        #endregion

        #region IDisposable Members

        public void Dispose() { }

        #endregion
    }

    #endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\DITGen.cs ===
using System;
using System.CodeDom;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Schema;

using DBSchema;
using Microsoft.EMS.Tools.Common;

namespace Microsoft.EMS.Test.Tools
{
    public partial class DITGen : Form
    {
        #region DITGen Tab

        #region Fields

        internal string currentInterfaceModule = String.Empty;
        internal IDataInterface dataInterface;
        internal StringWriter testcaseStream = null;

        private const string connectionString = "server=tcp:{0};Initial Catalog={1};Integrated Security=true";
        private const string numberOfCasesString = "The current selection will generate {0} test cases...";

        private string databaseName = String.Empty;
        private Dictionary<string, bool> filteredParameterValues;
        private string generatedSchema = String.Empty;
        private Dictionary<string, Dictionary<string, IParameter>> parameters;
        private Dictionary<string, List<string>> procedures;
        private List<string> proceduresToGenerate;
        private Thread schemaGenerationThread;
        private DateTime startTime = DateTime.MinValue;
        private double testCaseCount = 0;
        private Thread workerThread;

        #region Case Matcher Fields

        private static Dictionary<string, TestcaseInfo> testcaseTable;
        private static Dictionary<string, TestcaseInfo> loadedMatchTable;
        private static Dictionary<string, string> caseMatches;
        private static Dictionary<string, string> descriptions;

        #endregion

        private delegate void UpdateProcedureTree(TreeNode newNode);
        private UpdateProcedureTree updateProcedureTreeDelegate;
        private delegate void ToggleExecuteMenuItem(bool toggleValue);
        private ToggleExecuteMenuItem toggleExecuteDelegate;
        private delegate void ToggleSourcesMenuItem(bool toggleValue);
        private ToggleSourcesMenuItem toggleSourcesDelegate;

        internal delegate void UpdateStatus(string text, Color color);
        internal UpdateStatus updateStatusLabel;

        #endregion

        #region Form

        public DITGen()
        {
            InitializeComponent();

            //Initialize fields
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            System.Reflection.Assembly assembly = System.Reflection.Assembly.LoadFrom(config.AppSettings.Settings["DataInterfaceModule"].Value);
            currentInterfaceModule = config.AppSettings.Settings["DataInterfaceModuleNamespace"].Value + "." +
                config.AppSettings.Settings["DataInterfaceModuleClassName"].Value;
            dataInterface = (IDataInterface)assembly.CreateInstance(currentInterfaceModule);

            proceduresToGenerate = new List<string>();
            procedures = new Dictionary<string, List<string>>();
            parameters = new Dictionary<string, Dictionary<string, IParameter>>();
            filteredParameterValues = new Dictionary<string, bool>();
            toggleSourcesDelegate = new ToggleSourcesMenuItem(ToggleSources);
            toggleExecuteDelegate = new ToggleExecuteMenuItem(ToggleExecute);
            updateProcedureTreeDelegate = new UpdateProcedureTree(AddItemToProcedureTree);
            updateStatusLabel = new UpdateStatus(UpdateStatusLabel);
            procedureTree.AfterSelect += new TreeViewEventHandler(procedureTree_AfterSelect);
            procedureTree.NodeMouseClick += new TreeNodeMouseClickEventHandler(procedureTree_NodeMouseClick);
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            this.FormClosed += new FormClosedEventHandler(Form1_FormClosed);
            toolStripTextBox1.KeyDown += new KeyEventHandler(customDatabaseToolStripMenuItem_KeyDown);

            //Initialize settings from config file
            Configuration config = ConfigurationManager.OpenExeConfiguration(Application.ExecutablePath);
            textBox1.Text = config.AppSettings.Settings["SQLServerName"].Value;
            textBox2.Text = config.AppSettings.Settings["OutputPath"].Value;
            textBox3.Text = config.AppSettings.Settings["SQLAuthUser"].Value;
            textBox4.Text = config.AppSettings.Settings["SQLAuthPassword"].Value;

            //Add custom databases to the menu list
            sourcesToolStripMenuItem1.DropDownItems.Add(new ToolStripSeparator());
            string[] databases = config.AppSettings.Settings["Databases"].Value.Split(",".ToCharArray());
            foreach (string database in databases)
            {
                sourcesToolStripMenuItem1.DropDownItems.Add(database.Trim(), null, newMenuItem_Click);
            }

            CodeWriter.Initialize(this);
            CodeWriter.OutputPath = textBox2.Text;

            tabControl1.TabPages[0].Text = "Generate Cases";
            tabControl1.TabPages[1].Text = "Create Test Data";
            tabControl1.TabPages[2].Text = "Map Test Cases";

            replacementGrid.Columns.Add("rangeName", "Range Name");
            replacementGrid.Columns.Add("rangeStart", "Starting Value");
            replacementGrid.Columns.Add("rangeEnd", "Ending Value");
            replacementGrid.Columns.Add("rangeValues", "Range Values");
            replacementGrid.Columns.Add("prependZeros", "Prepend Zeros");

            replacementGrid.Rows.Add("GenericRange", "0", "252", String.Empty, "true");
            replacementGrid.Rows.Add("GenericRange2", "1", "253", String.Empty, "false");

            testcaseTable = new Dictionary<string, TestcaseInfo>();
            loadedMatchTable = new Dictionary<string, TestcaseInfo>();
            caseMatches = new Dictionary<string, string>();
            descriptions = new Dictionary<string, string>();
        }

        void Form1_FormClosed(object sender, FormClosedEventArgs e)
        {
            Application.Exit();
        }

        #endregion

        #region Invoke Methods

        //Add an item to the procedure tree from another thread
        private void AddItemToProcedureTree(TreeNode newNode)
        {
            procedureTree.Nodes.Add(newNode);
        }

        //Toggle the sources menu from another thread
        private void ToggleSources(bool toggleValue)
        {
            sourcesToolStripMenuItem1.Enabled = toggleValue;
        }

        //Toggle the execute menu from another thread
        private void ToggleExecute(bool toggleValue)
        {
            generateToolStripMenuItem.Enabled = toggleValue;
        }

        //Update the status label from another thread
        private void UpdateStatusLabel(string status, Color color)
        {
            toolStripStatusLabel1.ForeColor = color;
            toolStripStatusLabel1.Text = status;
        }


        #endregion

        #region Event Handlers

        #region Procedure Tree

        void procedureTree_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
        {
            ValidateProceduresAgainstParameters();
        }

        void procedureTree_AfterSelect(object sender, TreeViewEventArgs e)
        {
            //if a parameter is selected
            if (procedureTree.SelectedNode.Level == 1)
            {
                positiveValueList.Items.Clear();
                negativeValueList.Items.Clear();

                if (procedureTree.SelectedNode.ForeColor == Color.Red)
                    return;

                Dictionary<string, IParameter> parameterTable = null;
                if (parameters.ContainsKey(procedureTree.SelectedNode.Parent.Text))
                    parameterTable = parameters[procedureTree.SelectedNode.Parent.Text];
                else
                    parameterTable = parameters["all"];

                ParameterValue parameter = null;
                IParameter genericParameter = (ParameterValue)parameterTable[procedureTree.SelectedNode.Text];
                if (genericParameter is ParameterValue)
                {
                    parameter = (ParameterValue)genericParameter;
                }
                else
                {
                    positiveValueList.Items.Add("Parameter is a complex type which cannot be displayed.");
                    negativeValueList.Items.Add("Parameter is a complex type which cannot be displayed.");
                    return;
                }

                List<string> positiveValues = parameter.PositiveValues;
                List<string> negativeValues = parameter.NegativeValues;
                List<string> defaultValues = parameter.DefaultValues;

                bool checkParameterValue = true;

                //positive values
                foreach (string positiveParameter in positiveValues)
                {
                    checkParameterValue = (
                        filteredParameterValues.ContainsKey(
                            procedureTree.SelectedNode.Parent.Text + "/" +
                            procedureTree.SelectedNode.Text + "/" +
                            positiveParameter) ? false : true);

                    if (defaultValues.Contains(positiveParameter))
                        positiveValueList.Items.Add(positiveParameter + " - Default Value", checkParameterValue);
                    else
                        positiveValueList.Items.Add(positiveParameter, checkParameterValue);
                }

                //negative values
                foreach (string negativeParameter in negativeValues)
                {
                    checkParameterValue = (
                        filteredParameterValues.ContainsKey(
                            procedureTree.SelectedNode.Parent.Text + "/" +
                            procedureTree.SelectedNode.Text + "/" +
                            negativeParameter) ? false : true);

                    if (defaultValues.Contains(negativeParameter))
                        negativeValueList.Items.Add(negativeParameter + " - Default Value", checkParameterValue);
                    else
                        negativeValueList.Items.Add(negativeParameter, checkParameterValue);
                }

            }
        }

        #endregion

        #region Menu Items

        //load a specific database
        void newMenuItem_Click(object sender, EventArgs e)
        {
            ToolStripMenuItem menuItem = null;
            for (int i = 0; i < sourcesToolStripMenuItem1.DropDownItems.Count; i++)
            {
                menuItem = sourcesToolStripMenuItem1.DropDownItems[i] as ToolStripMenuItem;

                if (null != menuItem)
                {
                    if (menuItem != (ToolStripMenuItem)sender)
                    {
                        menuItem.Checked = false;
                    }
                    else
                    {
                        menuItem.Checked = true;
                        databaseName = menuItem.Text;
                    }
                }
            }

            StartSchemaGeneration();
        }


        //load a custom database
        private void customDBToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (toolStripTextBox1.Text != "Enter Custom DB Name")
            {
                toolStripMenuItem1.Checked = true;
                ToolStripMenuItem menuItem = null;

                for (int i = 0; i < sourcesToolStripMenuItem1.DropDownItems.Count; i++)
                {
                    menuItem = sourcesToolStripMenuItem1.DropDownItems[i] as ToolStripMenuItem;
                    if (null != menuItem &&
                        menuItem != toolStripMenuItem1)
                    {
                        menuItem.Checked = false;
                    }
                }

                databaseName = toolStripTextBox1.Text;
                StartSchemaGeneration();
            }
        }

        private void StartSchemaGeneration()
        {
            procedures.Clear();
            procedureTree.Nodes.Clear();

            //Begin schema generation
            schemaGenerationThread = new Thread(new ThreadStart(GenerateSchema));
            schemaGenerationThread.Start();
        }

        //load parameters from a file
        private void loadParametersToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML Files|*.xml";
            dialog.DefaultExt = "xml";
            dialog.Multiselect = true;

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                foreach (string filename in dialog.FileNames)
                {
                    LoadParameterValues(filename);
                }
            }

            ValidateProceduresAgainstParameters();
        }

        //clear all existing parameter values
        private void flushParametersToolStripMenuItem_Click(object sender, EventArgs e)
        {
            foreach (string key in parameters.Keys)
                parameters[key].Clear();

            ValidateProceduresAgainstParameters();
        }

        //save all the current settings to a file
        private void saveTestOptionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML Files|*.xml";
            dialog.DefaultExt = "xml";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                XmlTextWriter writer = new XmlTextWriter(dialog.FileName, Encoding.UTF8);
                writer.Formatting = Formatting.Indented;
                writer.WriteStartDocument();
                writer.WriteStartElement("Settings");

                writer.WriteElementString("SQLServerName", textBox1.Text);
                writer.WriteElementString("TestcaseOutputPath", textBox2.Text);
                writer.WriteElementString("SQLAuthUser", textBox3.Text);
                writer.WriteElementString("SQLAuthPassword", textBox4.Text);

                //Save which procedures and which parameters are checked
                foreach (TreeNode procedureNode in procedureTree.Nodes)
                {
                    if (procedureNode.Checked)
                    {
                        writer.WriteStartElement("Procedure");
                        writer.WriteAttributeString("Name", procedureNode.Text);

                        foreach (TreeNode parameterNode in procedureNode.Nodes)
                        {
                            if (parameterNode.Checked)
                            {
                                writer.WriteStartElement(parameterNode.Text);
                                writer.WriteStartElement("FilteredParameterValues");
                                foreach (KeyValuePair<string, bool> pair in filteredParameterValues)
                                {
                                    if (pair.Key.StartsWith(procedureNode.Text + "/" + parameterNode.Text))
                                    {
                                        string filteredValue = pair.Key.Replace(procedureNode.Text + "/" + parameterNode.Text + "/", "");
                                        writer.WriteElementString("FilteredValue", filteredValue);
                                    }
                                }
                                writer.WriteEndElement();
                                writer.WriteEndElement();
                            }
                        }

                        writer.WriteEndElement();
                    }
                }

                writer.WriteEndElement();
                writer.Close();
            }
        }


        //load all settings from a saved file
        private void loadTestOptionsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML Files|*.xml";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                string procedureName = String.Empty;
                TreeNode currentProcedure = null;
                XmlTextReader reader = new XmlTextReader(dialog.FileName);
                XmlReader parameterReader = null;

                reader.Read();
                reader.ReadStartElement("Settings");
                textBox1.Text = reader.ReadElementString("SQLServerName");
                textBox2.Text = reader.ReadElementString("TestcaseOutputPath");
                textBox3.Text = reader.ReadElementString("SQLAuthUser");
                textBox4.Text = reader.ReadElementString("SQLAuthPassword");

                //load all checked procedures and parameters
                while (reader.ReadToNextSibling("Procedure"))
                {
                    foreach (TreeNode procedure in procedureTree.Nodes)
                    {
                        procedureName = reader["Name"];
                        if (procedure.Text == procedureName)
                        {
                            procedure.Checked = true;
                            currentProcedure = procedure;
                            break;
                        }
                    }

                    parameterReader = reader.ReadSubtree();
                    parameterReader.Read();
                    filteredParameterValues.Clear();

                    while (parameterReader.Read())
                    {
                        string parameterName = String.Empty;

                        if (XmlNodeType.EndElement != reader.NodeType)
                        {
                            foreach (TreeNode node in currentProcedure.Nodes)
                            {
                                if (node.Text == reader.Name)
                                {
                                    parameterName = reader.Name;
                                    node.Checked = true;
                                    parameterReader.Read();
                                    parameterReader.Read();
                                    break;
                                }
                            }
                        }

                        if (parameterReader.Name == "FilteredParameterValues" &&
                            !parameterReader.IsEmptyElement)
                        {
                            parameterReader.Read();
                            while (parameterReader.Name != "FilteredParameterValues")
                            {
                                if (parameterReader.NodeType == XmlNodeType.Text)
                                {
                                    filteredParameterValues.Add(
                                        procedureName + "/" +
                                        parameterName + "/" +
                                        parameterReader.Value,
                                        true);
                                }

                                parameterReader.Read();
                            }

                            parameterReader.Read();
                            parameterReader.Read();
                        }
                    }

                    parameterReader.Close();
                }
                reader.Close();
            }

            ValidateProceduresAgainstParameters();
        }

        //begin generating tests from selections
        private void generateTestCasesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            workerThread = new Thread(new ThreadStart(GenerateTests));
            workerThread.Start();
        }

        //save off the loaded schema
        private void saveLoadedSchemaToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (generatedSchema == String.Empty)
            {
                MessageBox.Show("Please select a source database before attempting to save a schema.",
                    "Source Database Not Loaded",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XSD Files|*.xsd";
            dialog.DefaultExt = "xsd";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                if (generatedSchema.StartsWith("Local:"))
                {
                    File.Copy(generatedSchema.Replace("Local:", ""), dialog.FileName);
                }
                else
                {
                    TextWriter writer = new StreamWriter(dialog.FileName);
                    writer.Write(generatedSchema);
                    writer.Close();
                }
            }
        }

        //entry for custom database name
        private void customDatabaseToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (toolStripMenuItem1.Text == "Enter Custom DB Name")
            {
                toolStripMenuItem1.Text = "";
                toolStripMenuItem1.Select();
            }
        }

        //on ENTER, apply the custom database name and load schema
        void customDatabaseToolStripMenuItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                sourcesToolStripMenuItem1.HideDropDown();
                customDBToolStripMenuItem_Click(sender, e);
            }
        }

        #endregion

        #region Buttons

        //select all the listed procedures
        private void allProceduresButton_Click(object sender, EventArgs e)
        {
            bool check = !procedureTree.Nodes[0].Checked;
            for (int i = 0; i < procedureTree.Nodes.Count; i++)
            {
                procedureTree.Nodes[i].Checked = check;
            }

            //calculate the number of test cases that will be generated
            //CalculateTestCases();
        }

        //select all the parameters for the selected procedure
        private void allParametersButton_Click(object sender, EventArgs e)
        {
            if (null == procedureTree.SelectedNode ||
                procedureTree.SelectedNode.Level != 0)
                return;

            int index = procedureTree.SelectedNode.Index;
            bool check = !procedureTree.Nodes[index].Nodes[0].Checked;
            for (int i = 0; i < procedureTree.Nodes[index].Nodes.Count; i++)
            {
                procedureTree.Nodes[index].Nodes[i].Checked = check;
            }

            //calculate the number of test cases that will be generated
            //CalculateTestCases();
        }

        //clear all the selections
        private void clearButton_Click(object sender, EventArgs e)
        {
            foreach (TreeNode procedureNode in procedureTree.Nodes)
            {
                procedureNode.Checked = false;

                foreach (TreeNode parameterNode in procedureNode.Nodes)
                {
                    parameterNode.Checked = false;
                }
            }
        }

        #endregion

        #region Miscellaneous

        void validatingReader_ValidationEventHandler(object sender, System.Xml.Schema.ValidationEventArgs e)
        {
            MessageBox.Show(String.Format(
                "Procedure/Parameter Validation Error: {0}", e.Message) + Environment.NewLine + Environment.NewLine +
                "You will need to resolve this error before any test cases can be generated!",
                "Validation Error",
                MessageBoxButtons.OK,
                MessageBoxIcon.Error);

            Application.Exit();
        }

        #endregion

        #endregion

        #region Thread Workers

        //generate the schema
        private void GenerateSchema()
        {
            //update the UI
            menuStrip1.Invoke(toggleSourcesDelegate, new object[] { !sourcesToolStripMenuItem1.Enabled });
            statusStrip1.Invoke(new UpdateStatus(this.UpdateStatusLabel),
                        new object[] { "Generating the schema from the database - this might take a little time.", Color.Black });
            //prettyUIThread = new Thread(new ThreadStart(prettyUIWorker));
            //prettyUIThread.Start();

            try
            {
                parameters["all"] = new Dictionary<string, IParameter>();

                //load the schema
                dataInterface.LoadInterface(
                    textBox1.Text,
                    new object[] {
                        databaseName, 
                        textBox3.Text, 
                        textBox4.Text });

                //populate the procedure tree and parameter values
                foreach (string procedure in dataInterface.GetListOfAPINames())
                {
                    TreeNode newNode = new TreeNode(procedure);

                    //load parameter values
                    foreach (Parameter treeParameter in dataInterface.GetListOfParameters(procedure))
                    {
                        newNode.Nodes.Add(treeParameter.ParameterName);
                    }

                    //add nodes to procedure tree
                    procedureTree.Invoke(updateProcedureTreeDelegate, newNode);
                }

                ValidateProceduresAgainstParameters();
            }
            catch (SqlException ex)
            {
                MessageBox.Show(
                    "Error while attempting to generate schema from '" + textBox1.Text + "' on database '" + databaseName + "':" + Environment.NewLine + Environment.NewLine +
                    ex.Message,
                    "Error While Generating Schema!",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
            }
            finally
            {
                menuStrip1.Invoke(toggleSourcesDelegate, new object[] { !sourcesToolStripMenuItem1.Enabled });
            }
        }

        //generate tests from selections
        private void GenerateTests()
        {
            proceduresToGenerate.Clear();
            startTime = DateTime.Now;

            //generate test cases for each checked procedure
            foreach (TreeNode procedureNode in procedureTree.Nodes)
            {
                if (procedureNode.Checked)
                {
                    proceduresToGenerate.Add(procedureNode.Text);
                    int caseNumber = 0;
                    string testCasePath = textBox2.Text + "\\" + procedureNode.Text + "Tests.xml";

                    //create the output directory if it does not exist
                    if (!Directory.Exists(textBox2.Text))
                    {
                        Directory.CreateDirectory(textBox2.Text);
                    }

                    //write initial output to the test case file
                    XmlTextWriter testcaseFileWriter = new XmlTextWriter(testCasePath, Encoding.UTF8);
                    testcaseFileWriter.Formatting = Formatting.Indented;
                    testcaseFileWriter.WriteStartDocument();
                    testcaseFileWriter.WriteStartElement("Tests");
                    testcaseFileWriter.WriteAttributeString("xmlns", null, null, "urn:schema-microsoft-ems-catalog");//EMSCatalog.GetSchemaNamespace());
                    testcaseFileWriter.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema");

                    ParameterStack.CaseList = new List<KeyValuePair<string, string>[]>();

                    //write the test cases for each combination
                    foreach (TreeNode parameterNode in procedureNode.Nodes)
                    {
                        Dictionary<string, IParameter> parameterTable = null;
                        if (parameters.ContainsKey(parameterNode.Parent.Text))
                            parameterTable = parameters[parameterNode.Parent.Text];
                        else
                            parameterTable = parameters["all"];

                        ParameterValue parameter = (ParameterValue)parameterTable[parameterNode.Text];

                        List<string> positiveValues = parameter.PositiveValues;
                        List<string> negativeValues = parameter.NegativeValues;

                        if (parameterNode.Checked)
                        {
                            string filterKey = String.Empty;

                            foreach (string parameterValue in positiveValues)
                            {
                                filterKey = procedureNode.Text + "/" +
                                    parameterNode.Text + "/" +
                                    parameterValue;

                                if (!filteredParameterValues.ContainsKey(filterKey))
                                    WriteInputs(testcaseFileWriter, ref caseNumber, procedureNode.Text, parameterNode.Text, parameterValue, parameter.DefaultValues, procedureNode.Nodes);
                            }
                            foreach (string parameterValue in negativeValues)
                            {
                                filterKey = procedureNode.Text + "/" +
                                    parameterNode.Text + "/" +
                                    parameterValue;

                                if (!filteredParameterValues.ContainsKey(filterKey))
                                    WriteInputs(testcaseFileWriter, ref caseNumber, procedureNode.Text, parameterNode.Text, parameterValue, parameter.DefaultValues, procedureNode.Nodes);
                            }
                        }
                    }
                    testcaseFileWriter.WriteEndElement();
                    testcaseFileWriter.Close();
                }
            }

            //Generate code if desired
            if (checkBox1.Checked)
            {
                CreateBuildableCode();
            }

            //Update input at conclusion
            long seconds = (DateTime.Now.Ticks - startTime.Ticks) / TimeSpan.TicksPerSecond;
            statusStrip1.Invoke(new UpdateStatus(this.UpdateStatusLabel),
                        new object[] { 
                            "Test Case Generation Complete in " + seconds + " seconds.",
                            Color.Black });
        }


        //create and iterate through the parameter tree to generate the test case
        private void WriteInputs(XmlTextWriter testcaseFileWriter, ref int caseNumber, string procedureName, string parameter, string parameterValue, List<string> defaults, TreeNodeCollection parameterOrder)
        {
            ParameterStack stack = new ParameterStack(this, parameters, parameter, parameterValue, procedureName, dataInterface.GetListOfParameters(procedureName), parameterOrder);
            Stack<KeyValuePair<string, string>> testCase = new Stack<KeyValuePair<string, string>>();

            if (stack.Root.Nodes[0].Parameter != parameter)
            {
                for (int i = 0; i < stack.Root.Nodes.Count; i++)
                {
                    stack.ProcessStack(testcaseFileWriter, stack.Root.Nodes[i], parameter, parameterValue, procedureName, null, ref caseNumber, ref testCase);
                    testCase = new Stack<KeyValuePair<string, string>>();
                }
            }
            else
            {
                stack.ProcessStack(testcaseFileWriter, stack.Root.Nodes[0], parameter, parameterValue, procedureName, null, ref caseNumber, ref testCase);
            }
            stack.Dispose();
        }

        #endregion

        #region Populate Data Methods

        #region Parameters

        //load parameters from a specified possible
        private void LoadParameterValues(string filename)
        {
            string specificMethod = "all";
            string currentParameter = String.Empty;
            ParameterValue parameterValue = null;
            ComplexParameterValue complexParameterValue = null;
            XmlReader reader = XmlReader.Create(filename);

            reader.Read();
            reader.ReadStartElement("Parameters");
            reader.Read();

            try
            {
                //loop over parameters being loaded
                while (reader.Name != "Parameters")
                {
                    if (reader.NodeType == XmlNodeType.Element)
                    {
                        if (reader.Name == "Parameter")
                        {
                            currentParameter = reader["Name"];
                            parameterValue = new ParameterValue(currentParameter, "ParameterValue");

                            if (reader.AttributeCount > 1)
                                specificMethod = reader["Method"];
                            else
                                specificMethod = "all";

                            if (!parameters.ContainsKey(specificMethod))
                                parameters.Add(specificMethod, new Dictionary<string, IParameter>());
                            if (!parameters[specificMethod].ContainsKey(currentParameter))
                                parameters[specificMethod].Add(currentParameter, parameterValue);
                        }
                        else if (reader.Name == "ComplexParameter")
                        {
                            currentParameter = reader["Name"];
                            complexParameterValue = new ComplexParameterValue(currentParameter, "ComplexParameterValue");

                            if (reader.AttributeCount > 1)
                                specificMethod = reader["Method"];
                            else
                                specificMethod = "all";

                            if (!parameters.ContainsKey(specificMethod))
                                parameters.Add(specificMethod, new Dictionary<string, IParameter>());

                            if (!parameters[specificMethod].ContainsKey(currentParameter))
                                parameters[specificMethod].Add(currentParameter, complexParameterValue);
                        }
                        else if (reader.Name == "Properties")
                        {
                            ReadProperties(new StringReader(
                                reader.ReadOuterXml()),
                                complexParameterValue.Properties);
                        }
                        else if (reader.Name == "PositiveValues")
                        {
                            ReadValues(
                                new StringReader(reader.ReadOuterXml()),
                                parameterValue.DefaultValues,
                                parameterValue.PositiveValues);
                        }
                        else if (reader.Name == "NegativeValues")
                        {
                            ReadValues(
                                new StringReader(reader.ReadOuterXml()),
                                parameterValue.DefaultValues,
                                parameterValue.NegativeValues);
                        }
                    }

                    reader.Read();
                }
            }
            catch (XmlException exception)
            {
                MessageBox.Show("An error occurred while processing your parameters file:" + Environment.NewLine +
                        exception.Message + Environment.NewLine + Environment.NewLine +
                        "If your parameter data contains HTML/XML characters, please use the appropriate character entities: " + Environment.NewLine +
                        @"http://msdn2.microsoft.com/en-us/library/ms537499.aspx",
                        "Error Processing Parameters",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
            }
            finally
            {
                reader.Close();
            }
        }

        private void ReadProperties(TextReader reader, Dictionary<string, IParameter> properties)
        {
            XmlDocument document = new XmlDocument();
            document.Load(reader);

            foreach (XmlNode node in document.DocumentElement.ChildNodes)
            {
                string name = String.Empty;
                string type = String.Empty;

                foreach (XmlNode childNode in node.ChildNodes)
                {
                    if (childNode.Name == "Name")
                        name = childNode.InnerText;
                    else if (childNode.Name == "Type")
                        type = childNode.InnerText;
                }

                if (type.ToLower() == "parameter")
                {
                    properties.Add(name, new ParameterValue(name, "ParameterValue"));
                }
                else if (type.ToLower() == "complexparameter")
                {
                    properties.Add(name, new ComplexParameterValue(name, "ComplexParameterValue"));
                }
            }
        }

        private void ReadValues(TextReader reader, List<string> defaults, List<string> collection)
        {
            string parameterValue = String.Empty;
            XmlDocument document = new XmlDocument();
            document.Load(reader);

            foreach (XmlNode node in document.DocumentElement.ChildNodes)
            {
                parameterValue = node.InnerXml;

                if (node.Attributes.Count > 0)
                {
                    if (!defaults.Contains(parameterValue))
                    {
                        defaults.Add(parameterValue);
                    }
                }

                if (!collection.Contains(parameterValue))
                {
                    collection.Add(parameterValue);
                }
            }
        }

        #endregion

        #endregion

        #region Selection Analysis Methods

        //determine the number of test cases that will be generated
        private void CalculateTestCases()
        {
            Dictionary<string, List<string>> proceduresToProcess = new Dictionary<string, List<string>>();
            List<string> parametersToProcess = null;

            double total = 0;
            double currentProcedureTotal = 0;
            TreeNode procedureNode = null;

            for (int i = 0; i < procedureTree.Nodes.Count; i++)
            {
                procedureNode = procedureTree.Nodes[i];
                if (procedureNode.Checked)
                {
                    //find parameters that will be used for test cases
                    parametersToProcess = new List<string>();
                    for (int j = 0; j < procedureNode.Nodes.Count; j++)
                    {
                        if (procedureNode.Nodes[j].Checked)
                        {
                            parametersToProcess.Add(procedureNode.Nodes[j].Text);
                        }
                    }

                    Dictionary<string, IParameter> parameterTable = null;
                    if (parameters.ContainsKey(procedureNode.Text))
                        parameterTable = parameters[procedureNode.Text];
                    else
                        parameterTable = parameters["all"];

                    //count the number of variations for each parameter - selected and default
                    foreach (string parameterToProcess in parametersToProcess)
                    {
                        ParameterValue parameterValue = (ParameterValue)parameterTable[parameterToProcess];

                        List<string> positiveValues = parameterValue.PositiveValues;
                        List<string> negativeValues = parameterValue.NegativeValues;
                        List<string> defaultValues = parameterValue.DefaultValues;

                        currentProcedureTotal = (positiveValues.Count + negativeValues.Count);

                        foreach (string defaultValue in defaultValues)
                        {
                            bool containsParameter = false;
                            foreach (Parameter parameter in dataInterface.GetListOfParameters(procedureNode.Text))
                                if (parameter.ParameterName == defaultValue)
                                    containsParameter = true;

                            if (parameterToProcess != defaultValue &&
                                containsParameter)
                            {
                                currentProcedureTotal *= defaultValues.Count;
                            }
                        }

                        total += currentProcedureTotal;
                    }
                }
            }

            testCaseCount = total;

            //update the UI with the number of test cases that will be generated
            statusStrip1.Invoke(new UpdateStatus(this.UpdateStatusLabel),
                            new object[] { String.Format(numberOfCasesString, testCaseCount), Color.Black });
        }


        //mark procedures as available or not depending on loaded parameter values
        private void ValidateProceduresAgainstParameters()
        {
            bool hasARedParameter = false;
            bool readyToGenerate = true;
            bool isForSpecificMethod = false;
            bool isForAll = false;

            foreach (TreeNode procedureNode in procedureTree.Nodes)
            {
                ParameterValue parameter = null;
                ComplexParameterValue complexParameter = null;

                hasARedParameter = false;
                foreach (TreeNode parameterNode in procedureNode.Nodes)
                {
                    isForAll = parameters["all"].ContainsKey(parameterNode.Text);

                    isForSpecificMethod = parameters.ContainsKey(procedureNode.Text);
                    if (isForSpecificMethod)
                        isForSpecificMethod = parameters[procedureNode.Text].ContainsKey(parameterNode.Text);

                    if (isForAll)
                    {
                        if (parameters["all"][parameterNode.Text] is ParameterValue)
                        {
                            parameter = (ParameterValue)parameters["all"][parameterNode.Text];
                        }
                        else
                        {
                            complexParameter = (ComplexParameterValue)parameters["all"][parameterNode.Text];
                        }
                    }
                    else if (isForSpecificMethod)
                    {
                        if (parameters[procedureNode.Text][parameterNode.Text] is ParameterValue)
                        {
                            parameter = (ParameterValue)parameters[procedureNode.Text][parameterNode.Text];
                        }
                        else
                        {
                            complexParameter = (ComplexParameterValue)parameters[procedureNode.Text][parameterNode.Text];
                        }
                    }

                    if (!isForAll && !isForSpecificMethod)
                    {
                        parameterNode.ForeColor = Color.Red;
                        hasARedParameter = true;
                    }
                    else if (null != parameter &&
                        parameter.PositiveValues.Count == 0 &&
                        parameter.NegativeValues.Count == 0)
                    {
                        parameterNode.ForeColor = Color.Red;
                        hasARedParameter = true;
                    }
                    else if (null != complexParameter &&
                        complexParameter.Properties.Count == 0)
                    {
                        parameterNode.ForeColor = Color.Red;
                        hasARedParameter = true;
                    }
                    else
                    {
                        parameterNode.ForeColor = Color.Black;
                    }
                }

                //if there is a parameter for the current procedure which does
                //not have any values loaded for it, then the procedure can not 
                //be used to generate test cases at this time.
                if (hasARedParameter)
                {
                    procedureNode.ForeColor = Color.Red;

                    if (procedureNode.Checked)
                    {
                        readyToGenerate = false;
                    }
                }
                else
                {
                    procedureNode.ForeColor = Color.Black;
                }
            }

            //Determine if test cases can be generated currently.
            if (!readyToGenerate)
            {
                statusStrip1.Invoke(toggleExecuteDelegate, false);
                toolStripStatusLabel1.Text = "At least one procedure contains parameters with no values loaded!";
                toolStripStatusLabel1.ForeColor = Color.Red;
            }
            else
            {
                statusStrip1.Invoke(toggleExecuteDelegate, true);
                //CalculateTestCases();
            }
        }


        #endregion

        #region Code Generation Methods

        //write buildable code to the output folder\buildableCode
        private void CreateBuildableCode()
        {
            //update the UI
            statusStrip1.Invoke(new UpdateStatus(this.UpdateStatusLabel),
                    new object[] { "Writing C# code for generated test cases...", Color.Black });

            if (!Directory.Exists(textBox2.Text + "\\buildableCode"))
                Directory.CreateDirectory(textBox2.Text + "\\buildableCode");

            ////copy relevant test case files to the buildableCode folder
            //foreach (string file in proceduresToGenerate)
            //{
            //    string fileName = file + "Tests.xml";
            //    File.Copy(textBox2.Text + @"\" + fileName, textBox2.Text + @"\buildableCode\" + fileName, true);
            //}

            foreach (string method in proceduresToGenerate)
            {
                //int moduleCount = 0;

                string fileName = method + "Tests.xml";
                Queue<string> testcaseQueue = GatherTestCases(textBox2.Text, method);

                //if (!Directory.Exists(textBox2.Text + @"\buildableCode\TestCaseFiles\"))
                //    Directory.CreateDirectory(textBox2.Text + @"\buildableCode\TestCaseFiles\");
                //File.Copy(textBox2.Text + @"\" + fileName, textBox2.Text + @"\buildableCode\TestCaseFiles\" + fileName, true);

                if (!Directory.Exists(textBox2.Text + @"\buildableCode\"))
                    Directory.CreateDirectory(textBox2.Text + @"\buildableCode\");
                File.Copy(textBox2.Text + @"\" + fileName, textBox2.Text + @"\buildableCode\" + fileName, true);


                //while (testcaseQueue.Count > 0)
                //{
                //string currentDirectory = String.Format(@"{0}\buildableCode\{1}-Part{2}", textBox2.Text, method, moduleCount++);
                string currentDirectory = String.Format(@"{0}\buildableCode\", textBox2.Text);
                if (!Directory.Exists(currentDirectory))
                    Directory.CreateDirectory(currentDirectory);

                //output the procedures list for later use in the test module
                OutputProceduresFile(currentDirectory, method);

                CodeWriter.OutputPath = currentDirectory;

                //Write the top portion of the test case boiler plate
                CodeWriter.WriteBeginningOfTestFile(textBox1.Text, databaseName);

                //for (int i = 0; i < 1000 && testcaseQueue.Count > 0; i++)
                //{
                while(testcaseQueue.Count > 0)
                    CodeWriter.WriteTestcase(testcaseQueue.Dequeue());
                //}

                //write the bottom portion of the test case boiler plate
                CodeWriter.WriteEndOfTestFile();

                //write the sources and makefile.inc files
                CodeWriter.WriteBuildFiles(proceduresToGenerate);
                //}
            }


        }

        private Queue<string> GatherTestCases(string currentDirectory, string method)
        {
            Queue<string> testcaseQueue = new Queue<string>();
            using (XmlTextReader testcaseReader = new XmlTextReader(currentDirectory + @"\" + method + "Tests.xml"))
            {
                testcaseReader.Read();
                testcaseReader.ReadStartElement("Tests");

                while (testcaseReader.ReadToNextSibling("testCase"))
                {
                    //CodeWriter.WriteTestcase(testcaseReader["Description"]);
                    testcaseQueue.Enqueue(testcaseReader["Description"]);
                }
                testcaseReader.Close();
            }

            return testcaseQueue;
        }

        private void OutputTestCases(string currentDirectory, string method)
        {
            using (XmlTextReader testcaseReader = new XmlTextReader(currentDirectory + @"\" + method + "Tests.xml"))
            {
                testcaseReader.Read();
                testcaseReader.ReadStartElement("Tests");

                while (testcaseReader.ReadToNextSibling("testCase"))
                {
                    CodeWriter.WriteTestcase(testcaseReader["Description"]);
                }
                testcaseReader.Close();
            }
        }

        private static void OutputProceduresFile(string currentDirectory, string method)
        {
            XmlTextWriter procedureWriter = new XmlTextWriter(currentDirectory + "\\procedures.xml", Encoding.UTF8);
            procedureWriter.Formatting = Formatting.Indented;
            procedureWriter.WriteStartDocument();
            procedureWriter.WriteStartElement("Procedures");
            procedureWriter.WriteElementString(method, String.Empty);
            procedureWriter.WriteEndElement();
            procedureWriter.Close();
        }

        #endregion


        void xmlReaderSettings_ValidationEventHandler(object sender, ValidationEventArgs e)
        {
            throw new Exception("The method or operation is not implemented.");
        }

        void checkedValueList_ItemCheck(object sender, System.Windows.Forms.ItemCheckEventArgs e)
        {
            CheckedListBox checkedList = (CheckedListBox)sender;
            string filterKey =
                procedureTree.SelectedNode.Parent.Text + "/" +
                procedureTree.SelectedNode.Text + "/" +
                ((string)checkedList.Items[e.Index]).Replace(" - Default Value", "");

            if (CheckState.Unchecked == e.NewValue)
            {
                if (!filteredParameterValues.ContainsKey(filterKey))
                    filteredParameterValues.Add(filterKey, true);
            }
            else if (CheckState.Checked == e.NewValue)
            {
                if (filteredParameterValues.ContainsKey(filterKey))
                    filteredParameterValues.Remove(filterKey);
            }
        }

        #endregion

        #region Create Test Data

        private class ValueRange
        {
            bool zeros;
            string[] values;
            int start;
            int end;

            public bool PrependZeros
            {
                get { return zeros; }
            }

            public int StartValue
            {
                get { return start; }
            }

            public int EndValue
            {
                get { return end; }
            }

            public string[] SpecificValues
            {
                get { return values; }
            }

            public int Range
            {
                get { return end - start + 1; }
            }

            public ValueRange(string[] specificValues, bool prependZeros)
            {
                values = specificValues;
                start = 0;
                end = values.Length - 1;
                zeros = prependZeros;
            }

            public ValueRange(int startValue, int endValue, bool prependZeros)
            {
                values = null;
                start = startValue;
                end = endValue;
                zeros = prependZeros;
            }
        }

        private void generateButton_Click(object sender, EventArgs e)
        {

        }

        private void AddRangeValues(Dictionary<string, string> rangeValues)
        {
            for (int i = 0; i < replacementGrid.Rows.Count; i++)
            {
                if (null != replacementGrid["rangeStart", i].Value &&
                   !String.IsNullOrEmpty((string)replacementGrid["rangeStart", i].Value) &&
                   !String.IsNullOrEmpty((string)replacementGrid["rangeEnd", i].Value) &&
                   !String.IsNullOrEmpty((string)replacementGrid["rangeValues", i].Value))
                {
                    TextReader reader = new StreamReader((string)replacementGrid["rangeValues", i].Value);
                    string fileContents = reader.ReadToEnd();

                    rangeValues.Add(
                        (string)replacementGrid["rangeName", i].Value,
                        fileContents);

                    reader.Close();
                }
            }
        }

        private void UpdateDefinedRanges(List<string> requiredRangeNames, Dictionary<string, ValueRange> definedRanges)
        {
            for (int i = 0; i < replacementGrid.Rows.Count; i++)
            {
                if (null != replacementGrid["rangeName", i])
                {
                    string key = (string)replacementGrid["rangeName", i].Value;
                    if (!String.IsNullOrEmpty(key) &&
                        !definedRanges.ContainsKey(key))
                    {
                        if (String.IsNullOrEmpty((string)replacementGrid["rangeValues", i].Value))
                            definedRanges.Add(
                                (string)replacementGrid["rangeName", i].Value,
                                new ValueRange(
                                    Convert.ToInt32(replacementGrid["rangeStart", i].Value),
                                    Convert.ToInt32(replacementGrid["rangeEnd", i].Value),
                                    Convert.ToBoolean(replacementGrid["prependZeros", i].Value)));

                        else if (String.Empty != (string)replacementGrid["rangeValues", i].Value)
                            definedRanges.Add(
                                (string)replacementGrid["rangeName", i].Value,
                                new ValueRange(
                                    ((string)replacementGrid["rangeValues", i].Value).Split(",".ToCharArray()),
                                    Convert.ToBoolean(replacementGrid["prependZeros", i].Value)));
                    }
                }
            }

            if (definedRanges.Keys.Count != requiredRangeNames.Count)
                foreach (string requiredRange in requiredRangeNames)
                    if (!definedRanges.ContainsKey(requiredRange))
                        throw new Exception("Required range is not defined: " + requiredRange);
        }

        private List<string> FindRangeNames(List<string> requiredRangeNames, string content)
        {
            string baseText = content;
            string key;
            int startIndex = 0;
            int endIndex = 0;

            while ((startIndex = baseText.IndexOf('%')) >= 0)
            {
                if ((endIndex = baseText.IndexOf('%', startIndex + 1)) < 0)
                    break;

                key = baseText.Substring(startIndex + 1, endIndex - startIndex - 1);

                if (!requiredRangeNames.Contains(key) &&
                    key != insertionWildcardTextBox.Text.Replace("%", ""))
                    requiredRangeNames.Add(key);

                baseText = baseText.Substring(endIndex + 1);
            }

            return requiredRangeNames;
        }

        #endregion

        #region Map Test Cases

        private class TestcaseInfo
        {
            private Dictionary<string, string> parameters;

            public Dictionary<string, string> Parameters
            {
                get { return parameters; }
            }

            public TestcaseInfo()
            {
                parameters = new Dictionary<string, string>();
            }
        }

        private string FindGeneratedMatch(string generatedCaseName, TestcaseInfo testcaseInfo)
        {
            TestcaseInfo preLoadedTestcaseInfo = null;
            bool match = false;

            if (testcaseTable.ContainsKey(generatedCaseName))
            {
                preLoadedTestcaseInfo = testcaseTable[generatedCaseName];

                if (testcaseInfo.Parameters.Count == preLoadedTestcaseInfo.Parameters.Count)
                {
                    match = true;
                    foreach (string parameter in testcaseInfo.Parameters.Keys)
                        if (!preLoadedTestcaseInfo.Parameters.ContainsKey(parameter) ||
                            testcaseInfo.Parameters[parameter] != preLoadedTestcaseInfo.Parameters[parameter])
                        {
                            match = false;
                            break;
                        }
                }

                if (match)
                    return generatedCaseName;
            }

            foreach (string caseName in testcaseTable.Keys)
            {
                preLoadedTestcaseInfo = testcaseTable[caseName];

                match = false;
                if (testcaseInfo.Parameters.Count == preLoadedTestcaseInfo.Parameters.Count)
                {
                    match = true;
                    foreach (string parameter in testcaseInfo.Parameters.Keys)
                        if (!preLoadedTestcaseInfo.Parameters.ContainsKey(parameter) ||
                            testcaseInfo.Parameters[parameter] != preLoadedTestcaseInfo.Parameters[parameter])
                        {
                            match = false;
                            break;
                        }
                }

                if (match)
                    return caseName;
            }

            return null;
        }


        private void clearGeneratedButton_Click(object sender, EventArgs e)
        {
            generatedCasesList.Items.Clear();
            testcaseTable.Clear();
            generatedCaseDetails.Text = String.Empty;
        }

        private void loadGeneratedButton_Click(object sender, EventArgs e)
        {


        }

        private void generatedCasesList_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (generatedCasesList.SelectedIndex >= 0)
            {
                generatedCaseDetails.Text = String.Empty;
                foreach (string parameter in testcaseTable[(string)generatedCasesList.SelectedItem].Parameters.Keys)
                {
                    generatedCaseDetails.Text += String.Format("{0}:    {1}{2}",
                        parameter,
                        testcaseTable[(string)generatedCasesList.SelectedItem].Parameters[parameter],
                        Environment.NewLine);
                }
            }
        }

        private void clearDetailedCasesButton_Click(object sender, EventArgs e)
        {
            matchesGrid.Rows.Clear();
            descriptions.Clear();
            detailedDescriptionLabel.Text = String.Empty;
        }

        private void loadDetailedCasesButton_Click(object sender, EventArgs e)
        {

        }

        private void loadMatchesButton_Click(object sender, EventArgs e)
        {

        }

        private void makeMatchButton_Click(object sender, EventArgs e)
        {
            if (generatedCasesList.SelectedIndex < 0 ||
                matchesGrid.SelectedCells.Count == 0 ||
                matchesGrid.SelectedCells[0].ColumnIndex > 0)
            {
                MessageBox.Show("Select one item from each list before attempting a match. Be sure to select a detailed testcase from the datagrid.");
                return;
            }

            caseMatches[(string)generatedCasesList.SelectedItem] = (string)matchesGrid.SelectedCells[0].Value;

            matchesGrid.Rows[matchesGrid.SelectedCells[0].RowIndex].Cells[1].Value = (string)generatedCasesList.SelectedItem;
            DataGridViewCellStyle style = matchesGrid.Rows[matchesGrid.SelectedCells[0].RowIndex].Cells[0].Style;
            style.ForeColor = Color.Green;
            style.Font = new Font(matchesGrid.Font, FontStyle.Bold);
        }

        private void saveMatchesButton_Click(object sender, EventArgs e)
        {

        }

        private void matchesGrid_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (null == (string)matchesGrid[0, matchesGrid.SelectedCells[0].RowIndex].Value)
                return;

            if (matchesGrid.SelectedCells.Count > 0)
                detailedDescriptionLabel.Text = descriptions[(string)matchesGrid[0, matchesGrid.SelectedCells[0].RowIndex].Value];

            else
                detailedDescriptionLabel.Text = String.Empty;
        }

        private void applyToListButton_Click(object sender, EventArgs e)
        {

        }

        #endregion

        #region minimize
        private void toolStripTextBox1_Click(object sender, EventArgs e)
        {
            if (toolStripMenuItem1.Text == "Enter Custom DB Name")
            {
                toolStripMenuItem1.Text = "";
                toolStripMenuItem1.Select();
            }
        }

        private void toolStripMenuItem2_Click(object sender, EventArgs e)
        {
            if (generatedSchema == String.Empty)
            {
                MessageBox.Show("Please select a source database before attempting to save a schema.",
                    "Source Database Not Loaded",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                return;
            }

            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XSD Files|*.xsd";
            dialog.DefaultExt = "xsd";
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                if (generatedSchema.StartsWith("Local:"))
                {
                    File.Copy(generatedSchema.Replace("Local:", ""), dialog.FileName);
                }
                else
                {
                    TextWriter writer = new StreamWriter(dialog.FileName);
                    writer.Write(generatedSchema);
                    writer.Close();
                }
            }
        }

        private void toolStripMenuItem4_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML Files|*.xml";
            dialog.DefaultExt = "xml";
            dialog.Multiselect = true;

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                foreach (string filename in dialog.FileNames)
                {
                    LoadParameterValues(filename);
                }
            }

            ValidateProceduresAgainstParameters();
        }

        private void toolStripMenuItem5_Click(object sender, EventArgs e)
        {
            foreach (string key in parameters.Keys)
                parameters[key].Clear();

            ValidateProceduresAgainstParameters();
        }

        private void applyFilterToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void generateToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (databaseName == String.Empty)
                MessageBox.Show("Load schema from DB First!");
            else
            {

                //CalculateTestCases();

                workerThread = new Thread(new ThreadStart(GenerateTests));
                workerThread.Start();
            }
        }

        #endregion

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void generateToolStripMenuItem1_Click(object sender, EventArgs e)
        {
            TextWriter writer = null;

            try
            {
                List<string> requiredRangeNames = new List<string>();
                FindRangeNames(requiredRangeNames, baseXMLTextBox.Text);
                FindRangeNames(requiredRangeNames, insertionXMLTextBox.Text);

                Dictionary<string, ValueRange> definedRanges = new Dictionary<string, ValueRange>();
                Dictionary<string, string> rangeValues = new Dictionary<string, string>();
                Dictionary<string, int> currentRangeValue = new Dictionary<string, int>();

                UpdateDefinedRanges(requiredRangeNames, definedRanges);
                AddRangeValues(rangeValues);

                foreach (string rangeName in rangeValues.Keys)
                {
                    FindRangeNames(requiredRangeNames, rangeValues[rangeName]);
                    UpdateDefinedRanges(requiredRangeNames, definedRanges);
                }

                int largestRangeValue = 0;
                string largestRange = String.Empty;
                foreach (string requiredRange in requiredRangeNames)
                {
                    currentRangeValue.Add(requiredRange, definedRanges[requiredRange].StartValue);

                    if (definedRanges[requiredRange].Range > largestRangeValue)
                    {
                        largestRangeValue = definedRanges[requiredRange].Range;
                        largestRange = requiredRange;
                    }
                }


                writer = new StreamWriter(outputFileTextBox.Text);

                for (int i = definedRanges[largestRange].StartValue; i <= definedRanges[largestRange].EndValue; i++)
                {
                    string baseContent = baseXMLTextBox.Text.Replace(Environment.NewLine, "\r\n");
                    string maxValue = Convert.ToString(definedRanges[largestRange].EndValue);
                    string prependedZeros = String.Empty;

                    if (definedRanges[largestRange].PrependZeros)
                        for (int j = maxValue.Length; j > i.ToString().Length; j--)
                            prependedZeros += "0";

                    baseContent = baseContent.Replace("%" + largestRange + "%", prependedZeros + i.ToString());

                    if (wildcardRadio.Checked)
                    {
                        baseContent = baseContent.Replace(insertionWildcardTextBox.Text, insertionXMLTextBox.Text);
                    }
                    else
                    {
                        int insertIndex = baseContent.IndexOf(insertionWildcardTextBox.Text);
                        if (insertIndex > 0)
                        {
                            baseContent = baseContent.Insert(
                                insertIndex + insertionWildcardTextBox.Text.Length,
                                "\r\n" + insertionXMLTextBox.Text);
                        }
                    }

                    foreach (string requiredRange in requiredRangeNames)
                    {
                        if (requiredRange != largestRange)
                        {
                            maxValue = Convert.ToString(definedRanges[requiredRange].EndValue);
                            prependedZeros = String.Empty;

                            if (definedRanges[requiredRange].PrependZeros)
                                for (int j = maxValue.Length; j > i.ToString().Length; j--)
                                    prependedZeros += "0";

                            baseContent = baseContent.Replace(
                                "%" + requiredRange + "%",
                                prependedZeros + currentRangeValue[requiredRange].ToString());

                            currentRangeValue[requiredRange] = currentRangeValue[requiredRange] + 1;
                            if (currentRangeValue[requiredRange] > definedRanges[requiredRange].EndValue)
                                currentRangeValue[requiredRange] = definedRanges[requiredRange].StartValue;
                        }
                    }

                    string[] lines = baseContent.Split("\r\n".ToCharArray());
                    foreach (string line in lines)
                        writer.WriteLine(line);
                }
            }
            finally
            {
                if (null != writer)
                    writer.Close();
            }
        }

        private void loadGeneratedCasesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Multiselect = true;
            dialog.Filter = "XML Files|*.xml";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                foreach (string file in dialog.FileNames)
                {
                    using (XmlTextReader testcaseReader = new XmlTextReader(file))
                    {
                        testcaseReader.Read();
                        testcaseReader.ReadStartElement("Tests");

                        while (!testcaseReader.EOF)
                        {
                            if (testcaseReader.Name == "testCase" &&
                                testcaseReader.NodeType != XmlNodeType.EndElement)
                            {
                                string testCaseName = testcaseReader["Description"];

                                testcaseReader.ReadToDescendant("input");
                                testcaseReader.Read();

                                TestcaseInfo testcaseInfo = new TestcaseInfo();
                                while (testcaseReader.Name != "input")
                                {
                                    if (testcaseReader.NodeType == XmlNodeType.Element)
                                    {
                                        string parameterValue = testcaseReader.ReadString();
                                        testcaseInfo.Parameters.Add(testcaseReader.Name, parameterValue);
                                    }

                                    testcaseReader.Read();
                                }

                                testcaseTable.Add(testCaseName, testcaseInfo);
                                generatedCasesList.Items.Add(testCaseName);
                            }
                            else
                                testcaseReader.ReadToNextSibling("testCase");
                        }
                    }
                }
            }
        }

        private void loadDetailedCasesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "CSV Files|*.csv";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                StreamReader reader = new StreamReader(dialog.FileName);
                reader.ReadLine();

                string[] columns = new string[2];
                string line = String.Empty;
                while (null != (line = reader.ReadLine()))
                {
                    columns[0] = line.Substring(0, line.IndexOf(','));

                    if (!descriptions.ContainsKey(columns[0]))
                    {
                        columns[1] = line.Substring(line.IndexOf(',') + 1);
                        matchesGrid.Rows.Add(columns[0], null);
                        descriptions[columns[0]] = columns[1];
                    }
                }

                reader.Close();

                for (int i = 0; i < matchesGrid.Rows.Count; i++)
                {
                    if (matchesGrid[1, i].Value == null ||
                        (string)matchesGrid[1, i].Value == String.Empty)
                    {
                        matchesGrid[0, i].Style.ForeColor = Color.Red;
                    }
                }
            }
        }

        private void loadExistingMatchesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "XML Files|*.xml";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                XmlDocument document = new XmlDocument();
                document.Load(dialog.FileName);

                DataGridViewCellStyle style = new DataGridViewCellStyle();

                foreach (XmlNode node in document.DocumentElement.ChildNodes)
                {
                    TestcaseInfo testcaseInfo = new TestcaseInfo();
                    foreach (XmlNode parameterNode in node.ChildNodes[0].ChildNodes)
                        testcaseInfo.Parameters.Add(parameterNode.Name, parameterNode.ChildNodes[0].Value);

                    string generatedCaseName = node.ChildNodes[2].ChildNodes[0].Value;
                    loadedMatchTable[generatedCaseName] = testcaseInfo;
                    string generatedCaseMatch = FindGeneratedMatch(generatedCaseName, testcaseInfo);

                    if (!descriptions.ContainsKey(node.Name.Replace('_', ' ')))
                    {
                        descriptions[node.Name.Replace('_', ' ')] = node.ChildNodes[1].ChildNodes[0].Value;

                        if (String.IsNullOrEmpty(generatedCaseMatch) ||
                            !testcaseTable.ContainsKey(generatedCaseMatch))
                        {
                            matchesGrid.Rows.Add(node.Name.Replace('_', ' '), null);
                        }
                        else
                        {
                            matchesGrid.Rows.Add(node.Name.Replace('_', ' '), generatedCaseMatch);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < matchesGrid.Rows.Count; i++)
                        {
                            if ((string)matchesGrid[0, i].Value == node.Name.Replace('_', ' '))
                            {
                                if (!testcaseTable.ContainsKey(generatedCaseMatch))
                                {
                                    style.ForeColor = Color.Red;
                                    matchesGrid.Rows.Add(node.Name.Replace('_', ' '), null);
                                    matchesGrid[0, i].Style = style;
                                }
                                else
                                {
                                    style.ForeColor = Color.Green;
                                    style.Font = new Font(matchesGrid.Font, FontStyle.Bold);
                                    matchesGrid[0, i].Value = node.Name.Replace('_', ' ');
                                    matchesGrid[1, i].Value = generatedCaseMatch;
                                    matchesGrid[0, i].Style = style;
                                }
                            }
                        }
                    }
                }

                for (int i = 0; i < matchesGrid.Rows.Count; i++)
                {
                    if (matchesGrid["GeneratedCase", i].Value != null)
                    {
                        style = matchesGrid[0, i].Style;
                        style.ForeColor = Color.Green;
                        style.Font = new Font(matchesGrid.Font, FontStyle.Bold);
                    }
                    else
                    {
                        style = matchesGrid[0, i].Style;
                        style.ForeColor = Color.Red;
                        style.Font = new Font(matchesGrid.Font, FontStyle.Regular);
                    }
                }
            }
        }

        private void saveTestCaseMatchesToolStripMenuItem_Click(object sender, EventArgs e)
        {
            SaveFileDialog dialog = new SaveFileDialog();
            dialog.Filter = "XML Files|*.xml";

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                XmlTextWriter writer = new XmlTextWriter(dialog.FileName, Encoding.UTF8);
                writer.Formatting = Formatting.Indented;
                writer.WriteStartElement("TestCases");
                string testcase = String.Empty;

                for (int i = 0; i < matchesGrid.Rows.Count - 1; i++)
                {
                    testcase = (string)matchesGrid[1, i].Value;

                    if (!String.IsNullOrEmpty(testcase))
                    {
                        writer.WriteStartElement(((string)matchesGrid[0, i].Value).Replace(' ', '_'));
                        writer.WriteStartElement("Parameters");
                        foreach (string parameter in testcaseTable[testcase].Parameters.Keys)
                        {
                            writer.WriteElementString(parameter, testcaseTable[testcase].Parameters[parameter]);

                        }

                        writer.WriteEndElement();
                        writer.WriteElementString("Description", descriptions[(string)matchesGrid[0, i].Value]);
                        writer.WriteElementString("MatchingGeneratedCase", testcase);
                        writer.WriteEndElement();
                    }
                }

                writer.WriteEndElement();
                writer.Close();
            }
        }

        private void applyMatchesToVSMDIToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "VSMDI Files|*.vsmdi";

            XmlNode testlinks = null;

            if (dialog.ShowDialog() == DialogResult.OK)
            {
                XmlDocument document = new XmlDocument();
                document.Load(dialog.FileName);
                testlinks = document.GetElementsByTagName("TestLinks")[0];

                bool match = false;
                for (int i = 0; i < testlinks.ChildNodes.Count; i++)
                {

                    match = false;
                    for (int j = 0; j < matchesGrid.Rows.Count; j++)
                    {
                        if ((string)matchesGrid[1, j].Value ==
                            testlinks.ChildNodes[i].Attributes["name"].Value)
                        {
                            match = true;
                            break;
                        }
                    }

                    if (!match)
                    {
                        testlinks.RemoveChild(testlinks.ChildNodes[i--]);
                    }
                }

                XmlTextWriter writer = new XmlTextWriter(dialog.FileName, Encoding.UTF8);
                writer.Formatting = Formatting.Indented;
                document.WriteTo(writer);
                writer.Flush();
                writer.Close();

                MessageBox.Show(
                    "VSMDI File Has Been Updated.",
                    "VSMDI Updated",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Information);
            }
        }

        private void textBox6_TextChanged(object sender, EventArgs e)
        {
            generatedCasesList.Items.Clear();
            foreach (string key in testcaseTable.Keys)
                if (key.ToLower().Contains(textBox6.Text.ToLower()))
                    generatedCasesList.Items.Add(key);
        }

        private void generateFromExistingToolStripMenuItem_Click(object sender, EventArgs e)
        {
            OpenFileDialog openDialog = new OpenFileDialog();
            openDialog.Filter = "XML Files|*.xml";
            openDialog.DefaultExt = "xml";

            SaveFileDialog saveDialog = new SaveFileDialog();
            saveDialog.Filter = "XML Files|*.xml";
            saveDialog.DefaultExt = "xml";

            if (openDialog.ShowDialog() == DialogResult.OK &&
                saveDialog.ShowDialog() == DialogResult.OK)
            {
                Thread generateFromExistingThread = new Thread(
                    new ParameterizedThreadStart(GenerateFromExistingWorker));

                generateFromExistingThread.Start(
                    new GenerateFromExistingParameters(
                    openDialog.FileName,
                    saveDialog.FileName,
                    this));
            }
        }

        private void GenerateFromExistingWorker(object state)
        {
            GenerateFromExistingParameters existingParameters = (GenerateFromExistingParameters)state;

            using (XmlTextWriter testcaseWriter = new XmlTextWriter(existingParameters.SaveFile, Encoding.UTF8))
            {
                testcaseWriter.Formatting = Formatting.Indented;
                testcaseWriter.WriteStartDocument();
                testcaseWriter.WriteStartElement("Tests");
                //testcaseWriter.WriteAttributeString("xmlns", null, null, DBSchema.GetSchemaNamespace());
                testcaseWriter.WriteAttributeString("xmlns", "xsi", null, "http://www.w3.org/2001/XMLSchema");

                using (XmlTextReader testcaseReader = new XmlTextReader(existingParameters.OpenFile))
                {
                    testcaseReader.Read();
                    testcaseReader.ReadStartElement("Tests");
                    int regeneratedCaseNumber = 1;
                    string methodName = String.Empty;

                    while (testcaseReader.ReadToFollowing("testCase"))
                    {
                        methodName = testcaseReader["Description"];
                        methodName = methodName.Substring(0, methodName.IndexOf('_'));

                        ((DITGen)existingParameters.MainForm).statusStrip1.Invoke(updateStatusLabel,
                            new object[] { "Regenerating test case " + regeneratedCaseNumber++, Color.Black });

                        testcaseWriter.WriteStartElement("testCase");
                        for (int i = 0; i < testcaseReader.AttributeCount; i++)
                        {
                            testcaseReader.MoveToAttribute(i);
                            testcaseWriter.WriteAttributeString(
                                testcaseReader.Name,
                                testcaseReader.Value);
                        }

                        StringBuilder builder = new StringBuilder();
                        TextWriter command = new StringWriter(builder);
                        XmlTextWriter commandWriter = new XmlTextWriter(command);

                        testcaseReader.ReadToFollowing("input");
                        testcaseWriter.WriteStartElement("input");
                        testcaseReader.Read();

                        commandWriter.WriteStartElement(methodName);//, EMSCatalog.GetSchemaNamespace());
                        commandWriter.WriteAttributeString("xmlns", "urn:dbschema-config");

                        while (testcaseReader.Name != "input")
                        {
                            if (testcaseReader.NodeType == XmlNodeType.Element)
                            {
                                string parameterValue = testcaseReader.ReadString();
                                testcaseWriter.WriteElementString(
                                    testcaseReader.Name,
                                    parameterValue);

                                if ("NULL" != parameterValue)
                                    commandWriter.WriteElementString(testcaseReader.Name, parameterValue);
                            }

                            testcaseReader.Read();
                        }
                        commandWriter.WriteEndElement();
                        testcaseWriter.WriteEndElement();

                        WriteResultsNode(testcaseWriter, methodName, builder);

                        testcaseWriter.WriteEndElement();
                        testcaseReader.Read();
                    }
                }
            }
        }

        private void WriteResultsNode(XmlTextWriter testcaseWriter, string methodName, StringBuilder builder)
        {
            try
            {
                //get new results and write them
                testcaseWriter.WriteStartElement("RESULTS_NODE");

                string results = String.Empty;
                string commandString = builder.ToString();
                commandString = commandString.Replace("&lt;", "<");
                commandString = commandString.Replace("&gt;", ">");

                //use the interface to execute the specified API
                results = dataInterface.ExecuteAPI(
                    methodName,
                    commandString,
                    new object[] {
                                true,
                                null,
                                testcaseWriter});

                testcaseWriter.WriteRaw(results);
            }
            catch (XmlException ex)
            {
                testcaseWriter.WriteString(ex.Message);
            }
            finally
            {
                testcaseWriter.WriteEndElement();
            }
        }
    }

    interface IParameter
    {
        string Name { get; }
        string ParameterType { get; }
    }

    internal class ParameterValue : IParameter
    {
        List<string> positiveValues;
        List<string> negativeValues;
        List<string> defaultValues;
        private string name;
        private string parameterType;

        public string Name
        {
            get { return name; }
        }

        public string ParameterType
        {
            get { return parameterType; }
        }

        public List<string> PositiveValues
        {
            get { return positiveValues; }
        }

        public List<string> NegativeValues
        {
            get { return negativeValues; }
        }

        public List<string> DefaultValues
        {
            get { return defaultValues; }
        }

        public ParameterValue(string name, string parameterType)
        {
            this.name = name;
            this.parameterType = parameterType;
            positiveValues = new List<string>();
            negativeValues = new List<string>();
            defaultValues = new List<string>();
        }
    }

    internal class ComplexParameterValue : IParameter
    {
        private string name;
        private string parameterType;
        private Dictionary<string, IParameter> properties;

        public string Name
        {
            get { return name; }
        }

        public string ParameterType
        {
            get { return parameterType; }
        }

        public Dictionary<string, IParameter> Properties
        {
            get { return properties; }
        }

        public ComplexParameterValue(string name, string parameterType)
        {
            this.name = name;
            this.parameterType = parameterType;
            properties = new Dictionary<string, IParameter>();
        }
    }

    public class GenerateFromExistingParameters : IDisposable
    {
        private string openFile = String.Empty;
        private string saveFile = String.Empty;
        Form mainForm = null;

        public string OpenFile
        {
            get { return openFile; }
        }

        public string SaveFile
        {
            get { return saveFile; }
        }

        public Form MainForm
        {
            get { return mainForm; }
        }

        public GenerateFromExistingParameters(string open, string save, Form form)
        {
            if (!String.IsNullOrEmpty(open))
                openFile = open;

            if (!String.IsNullOrEmpty(save))
                saveFile = save;

            if (null != form)
                mainForm = form;
        }

        #region IDisposable Members

        void IDisposable.Dispose()
        {
            mainForm.Dispose();
            System.GC.SuppressFinalize(this);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\Resources\makefile.inc ===
!INCLUDE $(INETROOT)\build\makefile.inc

compressFiles:
{0}

copyConfigFile:
    copy app.config $(TARGETNAME).$(TARGETEXT).config
    
copyConfigToTarget:
    copy $(TARGETNAME).dll.config $(TARGETPATH)\$(BUILDTARGET)\$(TARGETNAME).dll.config
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\Properties\Settings.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.EMS.Tools.DITGen.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Test Case Generator")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("MSIT")]
[assembly: AssemblyProduct("Test Case Generator")]
[assembly: AssemblyCopyright("Copyright © MSIT 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("48093dcc-2ac7-40b3-a0e1-b899d6a28476")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\ditgen\Properties\Resources.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.EMS.Tools.DITGen.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "2.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.EMS.Tools.DITGen.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\AndOrTest.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Xml.XPath;
using System.Xml;

using xonline.common.service;
using xonline.common.espengine;

using HResult = xonline.common.service.HResult;

namespace xonline.server.marketplace.test
{
    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class AndOrValidationTests
    {
        public class ResponseDocument : IDocumentResult
        {
            public String Id { get; protected set; }
            public String Document { get; protected set; }

            public ResponseDocument(String id, String doc)
            {
                Id = id;
                Document = doc;
            }
        }

        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }

        public class AndOrValidationTestsBase : TestBase
        {
            protected NameValueCollection _namespaces;
            protected EspEngine s_engine;
            protected Hashtable _filterCriteria;
            protected IDocumentResult result;

            // Add another pamater indicating offer information (if prsent) to validate against
            protected void ValidateStaticAtomResponse(String id, XmlReader reader)
            {
                _namespaces.Add("b", "http://marketplace.xboxlive.com/resource/product/v1");
                _namespaces.Add("a", "http://www.w3.org/2005/Atom");
                reader.Read();
                reader.Read();
                reader.Read();
                String xml = reader.ReadOuterXml();
                result = new ResponseDocument(id, xml);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:author/a:name", null, "Xbox LIVE", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:title", null, "Query Result", _namespaces);
            }

            protected void ValidateStaticAtomResponse(String id, Byte[] xmlAsBytes)
            {
                _namespaces.Add("b", "http://marketplace.xboxlive.com/resource/product/v1");
                _namespaces.Add("a", "http://www.w3.org/2005/Atom");
                String document = Encoding.UTF8.GetString(xmlAsBytes);
                result = new ResponseDocument(id, document);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:author/a:name", null, "Xbox LIVE", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:title", null, "Query Result", _namespaces);
            }

            protected override void Execute()
            {
                _namespaces = new NameValueCollection();
                s_engine = new EspEngine();
                _filterCriteria = new Hashtable();
                result = null;
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_And_Two_Valid_Categories : AndOrValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;                
                
                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-d8026d3b992a";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["categories"] = "3027_4075"; // Document contains both of these categories
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='3027']/b:categoryName", null, "Xbox LIVE Games", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='4075']/b:categoryName", null, "Electronic Arts", _namespaces);

                ResultCode = TEST_RESULTS.PASSED; 
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_And_Two_Valid_Categories_And_Two_Invalid_Categories : AndOrValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-d8026d3b992a";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["categories"] = "3027_4075_95_4321"; // Document does not contain all of these
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "0", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "0", _namespaces);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_Or_Two_Valid_Categories : AndOrValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-d8026d3b992a";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["categories"] = "3027.5"; // Document contains only one of these, document should come back
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='3027']/b:categoryName", null, "Xbox LIVE Games", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='4075']/b:categoryName", null, "Electronic Arts", _namespaces);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_Single_Categories : AndOrValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-d8026d3b992a";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["categories"] = "3027"; // Document contains this one
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='3027']/b:categoryName", null, "Xbox LIVE Games", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:categories/b:category[b:categoryId='4075']/b:categoryName", null, "Electronic Arts", _namespaces);

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class n_Mix_Syntax_Categories : AndOrValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-d8026d3b992a";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["categories"] = "3027.5_1.2"; // mixed syntax is not acceptable!!!!!!
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                try
                {
                    HResult hr = HResult.S_OK;
                    Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                    ResultCode = TEST_RESULTS.FAILED; // We count on an exception to be generated
                }
                catch (XRLException xe)
                {
                    // Check that we got the right exception
                    if (xe.HResult == xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_SYNTAX)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        Global.RO.Error(string.Format("Received exception when it was not expected:\r\n{0}", xe));
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                }
            }
        }                
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\EspResponseTests.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Diagnostics;
using System.Collections.Specialized;
using System.Xml.XPath;
using System.Xml;

using xonline.common.espengine;

using HResult = xonline.common.service.HResult;

namespace xonline.server.marketplace.test
{
    public class ResponseDocument : IDocumentResult
    {
        public String Id { get; protected set; }
        public String Document { get; protected set; }

        public ResponseDocument(String id, String doc)
        {
            Id = id;
            Document = doc;
        }
    }

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class ResponseValidationTestsGroup
    {
        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }

        public class ResponseValidationTestsBase : TestBase
        {
            protected NameValueCollection _namespaces;
            protected EspEngine s_engine;
            protected Hashtable _filterCriteria;
            protected IDocumentResult result;

            // Add another pamater indicating offer information (if prsent) to validate against
            protected void ValidateStaticAtomResponse(String id, XmlReader reader)
            {
                _namespaces.Add("b", "http://marketplace.xboxlive.com/resource/product/v1");
                _namespaces.Add("a", "http://www.w3.org/2005/Atom");
                reader.Read();
                reader.Read();
                reader.Read();
                String xml = reader.ReadOuterXml();
                result = new ResponseDocument(id, xml);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:author/a:name", null, "Xbox LIVE", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:title", null, "Query Result", _namespaces);
            }

            protected void ValidateStaticAtomResponse(String id, Byte[] xmlAsBytes)
            {
                _namespaces.Add("b", "http://marketplace.xboxlive.com/resource/product/v1");
                _namespaces.Add("a", "http://www.w3.org/2005/Atom");
                String document = Encoding.UTF8.GetString(xmlAsBytes);
                result = new ResponseDocument(id, document);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:author/a:name", null, "Xbox LIVE", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:title", null, "Query Result", _namespaces);
            }

            protected override void Execute()
            {
                _namespaces = new NameValueCollection();
                s_engine = new EspEngine();
                _filterCriteria = new Hashtable();
                result = null;
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_NoEntries : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;                
                
                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "aaaaaaaa-aaaa-1000-9115-D8026D3B992A"; // Guid does not exist in catalog
                _filterCriteria["tiers"] = 1;
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "0", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "0", _namespaces);

                ResultCode = TEST_RESULTS.PASSED; 
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_NoOffers : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8023B8D12DB";
                _filterCriteria["tiers"] = 1;
                _filterCriteria["stores"] = 1;
                
                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                _filterCriteria["offerfilter"] = 1; // This game has no offers, this will force a result returned for the product iteself
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(result, "/a:feed/a:entry/b:offerInstances", _namespaces);

                ResultCode = TEST_RESULTS.PASSED; 
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_OneOfferValidNow : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";
                _filterCriteria["tiers"] = 2;
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2007-02-10T01:29:09Z";
                _filterCriteria["enddate"] = "2007-02-10T01:29:09Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);

                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception) // An exception must be generated, this node should not exist
                {
                }
                
                ResultCode = TEST_RESULTS.PASSED; 
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_TwoValid2009 : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";                                          
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["stores"] = 1;
                
                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2009-02-10T01:29:09Z";
                _filterCriteria["enddate"] = "2009-02-10T01:29:09Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);

                ResultCode = TEST_RESULTS.PASSED; 
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_TwoOffers_TierNotMatched : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";
                _filterCriteria["tiers"] = 1000;
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2009-05-05T01:01:01Z";
                _filterCriteria["enddate"] = "2009-05-05T01:01:01Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "0", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "0", _namespaces);
                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }

                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_TwoOffers_OneTierMatchesUsingAnd : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";
                _filterCriteria["tiers"] = "3_1000";
                _filterCriteria["stores"] = 1;

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2009-05-05T01:01:01Z";
                _filterCriteria["enddate"] = "2009-05-05T01:01:01Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";
                
                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr); // No results should come back
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "0", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "0", _namespaces);

                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }

                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_TwoOffers_StoreMatchesUsingOr : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["stores"] = "1.50000";

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2008-05-05T01:01:01Z";
                _filterCriteria["enddate"] = "2008-05-05T01:01:01Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "1", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "1", _namespaces);
            
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);                
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);
                
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class P_BasicGame_TwoOffers_OneStoreMatchesUsingAnd : ResponseValidationTestsBase
        {
            protected override void Execute()
            {
                base.Execute();
                ResultCode = TEST_RESULTS.FAILED;

                _filterCriteria["locale"] = "en-us";
                _filterCriteria["detailview"] = "detaillevel5";
                _filterCriteria["guid"] = "66acd000-77fe-1000-9115-D8026D3B992A";
                _filterCriteria["tiers"] = "2.3";
                _filterCriteria["stores"] = "1_50000";

                // Required fields
                _filterCriteria["resource"] = "productv1";
                _filterCriteria["startdate"] = "2008-05-05T01:01:01Z";
                _filterCriteria["enddate"] = "2008-05-05T01:01:01Z";
                _filterCriteria["pagenum"] = 1;
                _filterCriteria["pagesize"] = 10;
                _filterCriteria["orderby"] = 1;
                _filterCriteria["orderdirection"] = 1;
                _filterCriteria["offerfilter"] = 2;
                _filterCriteria["editorialprivilege"] = 1;
                _filterCriteria["visibilitylevel"] = "1.2";

                HResult hr = HResult.S_OK;
                Byte[] xmlAsBytes = s_engine.Execute(_filterCriteria, ref hr);
                ValidateStaticAtomResponse(this.GetType().ToString(), xmlAsBytes);

                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:totalItems", null, "0", _namespaces);
                XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/b:numItems", null, "0", _namespaces);
                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000000-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000000-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }

                try
                {
                    XmlUtil.ValidateNodeExistsWithAttributesAndValue(result, "/a:feed/a:entry/b:offerInstances/b:offerInstance[b:offerInstanceId='urn:uuid:00000300-0000-4001-8000-00001010001a']/b:offerInstanceId", null, "urn:uuid:00000300-0000-4001-8000-00001010001a", _namespaces);
                    ResultCode = TEST_RESULTS.FAILED;
                    Global.RO.Error("OfferInstanceId urn:uuid:00000300-0000-4001-8000-00001010001a should have not been found!");
                    return;
                }
                catch (Exception)
                {
                }


                ResultCode = TEST_RESULTS.PASSED;
            }
        }
    }

    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\EspHelper.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Xml;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Config;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.config;
using xonline.common.espengine;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;

namespace xonline.server.marketplace.test
{
	class EspHelper : IDisposable
	{

        public IDocumentFeeder DocumentFeeder { get; private set; }
        public ISearchView SearchView { get; private set; }
        public String ContentDistributor { get; private set; }
        public String CollectionName { get; private set; }
        public XmlNamespaceManager NamespaceManager { get; private set; }
        public NameValueCollection Namespaces { get; private set; }
        public EspEngine Engine { get; private set; }

        public String VirtualCollection { get; private set; }
        public String TestSuite { get; private set; }

        private static readonly LSN Lsn = new LSN("00000000001111111111");

        private static readonly String DocumentText =
            "<?xml version=\"1.0\" encoding=\"utf-8\"?><product><searchableXml>"
            + "<id>{0}</id>"
            + "<test>{1}</test>"
            + "<locale>{2}</locale>"
            + "<testSuite>{3}</testSuite>"
            + "<virtualCollection>{4}</virtualCollection>"
            + "{5}"
            + "</searchableXml></product>";

        public EspHelper( String testSuite )
        {
            TestSuite = testSuite;

            NamespaceManager = new XmlNamespaceManager(new NameTable());
            NamespaceManager.AddNamespace("b", "http://marketplace.xboxlive.com/resource/product/v1");
            NamespaceManager.AddNamespace("a", "http://www.w3.org/2005/Atom");

            EspSetup();

            Engine = new EspEngine();

            // Add the ability to filter results down by the name of the test ( this is an element called 'test' under 'searchableXml'.
            // This prevents different test data from interfearing with oneanother.
            Engine.AddFqlMapping( false, false, "test", "test", "System.String", false, false, false, false, true, "productv1", "test", null );
            
            Namespaces = new NameValueCollection();
            Namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
            Namespaces["a"] = "http://www.w3.org/2005/Atom";
        }

        public void Dispose()
        {
            if (DocumentFeeder != null)
            {
                DocumentFeeder.Dispose();
            }
        }

        /// <summary>
        /// Removes all the unit test documents reltated to this test suite
        /// </summary>
        public void RemoveUnitTestDocuments()
        {
            Int32 numberOfDocumentsRemoved = 0;
            String fql = String.Format("xml:scope( id, return=yes) and filter(xml:searchableXml:and( virtualCollection:\"{0}\" and testSuite:\"{1}\" ))", VirtualCollection, TestSuite );
            Global.RO.Info(String.Format("FQL[{0}]", fql));

            IQuery query = new Query(fql);

            IQueryResult queryResult = SearchView.Search(query);
            Global.RO.Info(String.Format("Found {0} matching documents to remove.", queryResult.DocCount));

            // results are '1' indexed, not zero indexed.
            for (Int32 i = 1; i <= queryResult.DocCount; i++)
            {
                IDocumentSummary s = queryResult.GetDocument(i);
                IDocumentSummaryField sf = s.GetSummaryField("contentid");
                DocumentFeeder.RemoveDocument(sf.StringValue);
                numberOfDocumentsRemoved++;
            }

            
            DocumentFeeder.WaitForCompletion();

            Global.RO.Info(String.Format("Removed {0} existing documents", numberOfDocumentsRemoved));
        }

        /// <summary>
        /// Given an array of unit test documents, will push to ESP
        /// </summary>
        /// <param name="documents">Array of document to push</param>
        public void AddUnitTestDocuments( List<MediaDocument> documents )
        {
            Global.RO.Info(String.Format("Pushing {0} documents to [{1}|{2}] and waiting for them to be indexed ...", documents.Count, ContentDistributor, CollectionName));
            using (PublisherEsp p = new PublisherEsp(ContentDistributor, CollectionName))
            {
                foreach ( MediaDocument d in documents )
                {
                    p.PublishDocument(d);
                }
                p.FlushDocuments();
            }
            Global.RO.Info(String.Format("{0} documents pushed and indexed", documents.Count ));
        }

        /// <summary>
        /// Creates a MediaDocument with the necessary searchable Xml correctly set with
        /// no extra element in the searchable xml
        /// </summary>
        /// <param name="testName">The test name to which this document is applicable</param>
        /// <param name="lcid">The lcid for the test</param>
        /// <param name="locale">The locale for the test</param>
        /// <returns>A MediaDocument with fully populated searchXml field</returns>
        public MediaDocument CreateDocument(String testName, Int32 lcid, String locale )
        {
            return CreateDocument(testName, lcid, locale, String.Empty);
        }

        /// <summary>
        /// Creates a MediaDocument with the necessary searchable xsml set. An extra xml fragment
        /// to be contained in the searchable xml can be added
        /// </summary>
        /// <param name="testName">The test name to which this document is applicable</param>
        /// <param name="lcid">The lcid for the test</param>
        /// <param name="locale">The locale for the test</param>
        /// <param name="otherSearchbleXml">Xml fragment cxontaining any other searchble xml</param>
        /// <returns></returns>
        public MediaDocument CreateDocument(String testName, Int32 lcid, String locale,String otherSearchbleXml)
        {
            MediaDocument md = new MediaDocument( Guid.NewGuid(), lcid, Lsn, VirtualCollection );
            md.FlatFieldsString["language"] = locale.Substring(0, 2);
            md.Document = String.Format(DocumentText, md.DocumentId, testName, locale, TestSuite, VirtualCollection, otherSearchbleXml);
            return md;
        }

        /// <summary>
        /// Returns the set of filter criteria required by the esp engine
        /// </summary>
        /// <returns></returns>
        public Hashtable GetCommonFilterCriteria( String testName )
        {
            return GetCommonFilterCriteria(testName, "en-us");
        }

        /// <summary>
        /// Returns the set of filter criteria required by the esp engine
        /// </summary>
        /// <returns></returns>
        public Hashtable GetCommonFilterCriteria( String testName, String locale )
        {
            Hashtable filterCriteria = new Hashtable();
            filterCriteria["locale"] = locale;
            filterCriteria["detailview"] = "xml";
            filterCriteria["resource"] = "productv1";
            filterCriteria["pagenum"] = 1;
            filterCriteria["pagesize"] = 10;
            filterCriteria["orderby"] = 1;
            filterCriteria["orderdirection"] = 1;
            filterCriteria["offerfilter"] = 1;
            filterCriteria["editorialprivilege"] = 4;
            filterCriteria["test"] = testName;
            return filterCriteria;
        }

        public String GetDocument( Hashtable filterCriteria )
        {
            HResult hr = HResult.S_OK;
            return Encoding.UTF8.GetString(Engine.Execute(filterCriteria, ref hr));
        }


        private void EspSetup()
        {
            try
            {
                // Retrieve virtual interface information, construct connection string
                VirtualCollection = Config.GetSetting("catalogwatcher_fast_esp_virtual_collection_name");

                String[] ingestionIps = Config.GetMultiSetting(MultiSetting.fastEspMarketplaceIngestionIps);
                CollectionName = Config.GetSetting(Setting.catalogwatcher_fast_esp_collection_name);
                String ingestionPort = Config.GetSetting(Setting.catalogwatcher_fast_esp_ingestion_port);

                StringBuilder espContentDistributor = new StringBuilder();
                String noFirstComma = string.Empty;

                // Format of the content distributor is a comma seperated list of host:port values
                //      host1:port,host2:port,host3:port
                foreach (string ip in ingestionIps)
                {
                    espContentDistributor.AppendFormat("{0}{1}:{2}", noFirstComma, ip, ingestionPort);
                    noFirstComma = ",";
                }
                ContentDistributor = espContentDistributor.ToString();

                IVirtualInterfaceInfo searchViewInterfaceInfo = Config.GetVirtualInterface(Component.fastEspMarketplaceSearch);

                String qrServer = String.Format("{0}:{1}", searchViewInterfaceInfo.IPAddressString, searchViewInterfaceInfo.Port);

                Global.RO.Info(String.Format("Content Distributor (for cleanup): {0} - collection {1}", ContentDistributor, CollectionName));
                Global.RO.Info(String.Format("QR Server: {0}", qrServer));

                // Content distributor (used for deleting documents after test cleanup
                IContentFactory contentFactory = Factory.CreateContentFactory();
                DocumentFeeder = Factory.CreateDocumentFeeder(ContentDistributor, CollectionName);
                ISubsystem indexing = DocumentFeeder.GetSystemConfig().GetSubsystem("indexing");
                indexing.CompletedCallbackEnabled = true;

                // QR Server for queries
                NameValueCollection configuration = new NameValueCollection();
                configuration.Add("Com.FastSearch.Esp.Search.Http.QRServers", qrServer);
                ISearchFactory searchFactory = SearchFactory.NewInstance(configuration);
                SearchView = searchFactory.GetSearchView(searchViewInterfaceInfo.Info1.ToLower());

            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("{0}", e));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\EspEngineTests.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Xml;

using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.config;
using xonline.common.espengine;

using ServerTestFramework;
using ServerTestFramework.LiveService;

namespace xonline.server.marketplace.test
{
    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class BasicEspEngineTests
    {
        private static EspEngine engine = new EspEngine();

        [TestGroupSetup]
        public void Setup() 
        {            
        }

        [TestGroupTearDown]
        public void Shutdown() 
        {         
        }

        [TestCase, TestCasePriority(1)]
        class p_basic_game_search : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["locale"] = "en-us";
                filterCriteria["detailview"] = "detaillevel5";
                filterCriteria["guid"] = "66ACD000-77FE-1000-9115-D8026D3B992A";

                // Required fields
                filterCriteria["resource"] = "productv1";
                filterCriteria["pagenum"] = 1;                
                filterCriteria["pagesize"] = 10;
                filterCriteria["orderby"] = 1;
                filterCriteria["orderdirection"] = 1;
                filterCriteria["offerfilter"] = 2;
                filterCriteria["editorialprivilege"] = 1;
                filterCriteria["visibilitylevel"] = "1.2";

                string fql = engine.RetrieveFql(filterCriteria);

                Global.RO.Info(fql);

                IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                if (results.DocCount == 1)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_avatar_content : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["locale"] = "en-us";
                filterCriteria["detailview"] = "detaillevel5";
                filterCriteria["guid"] = "00000000-0000-4047-8000-000011110000";
                filterCriteria["bodytypes"] = "1.3";

                // Required fields
                filterCriteria["resource"] = "productv1";
                filterCriteria["pagenum"] = 1;
                filterCriteria["pagesize"] = 10;
                filterCriteria["orderby"] = 1;
                filterCriteria["orderdirection"] = 1;
                filterCriteria["offerfilter"] = 2;
                filterCriteria["editorialprivilege"] = 1;
                filterCriteria["visibilitylevel"] = "1.2";
                filterCriteria["offerfilter"] = 1; // No offers on this one, just avatar media

                string fql = engine.RetrieveFql(filterCriteria);

                Global.RO.Info(fql);

                IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                if (results.DocCount == 1)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

            [TestCase, TestCasePriority(1)]
            class p_parent_products : TestBase
            {
                protected override void Execute()
                {
                    ResultCode = TEST_RESULTS.FAILED;

                    Hashtable filterCriteria = new Hashtable();
                    filterCriteria["locale"] = "en-us";
                    filterCriteria["detailview"] = "detaillevel5";
                    filterCriteria["parentproducts"] = "00020000-0001-0001-0000-000000001005";

                    // Required fields
                    filterCriteria["resource"] = "productv1";
                    filterCriteria["pagenum"] = 1;
                    filterCriteria["pagesize"] = 10;
                    filterCriteria["orderby"] = 1;
                    filterCriteria["orderdirection"] = 1;
                    filterCriteria["editorialprivilege"] = 1;
                    filterCriteria["visibilitylevel"] = "1.2";
                    filterCriteria["offerfilter"] = 1; // No offers on this one, just avatar media

                    string fql = engine.RetrieveFql(filterCriteria);

                    Global.RO.Info(fql);

                    IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                    if (results.DocCount == 3)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
    
    }

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class RuleProcessingTests
    {
        private static EspEngine engine = new EspEngine();

        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }
        /// <summary>
        /// Retrieves the rule XML from the RuleTestData xml file
        /// </summary>
        /// <param name="testCaseName">Test case data to retrieve</param>
        /// <returns>XMLReader pointed at the FILTERRULEofferRule node</returns>
        private static XmlReader GetTestXml(string testCaseName)
        {
            XmlReader reader = XmlReader.Create("RuleTestData.xml");
            reader.ReadToDescendant("ruledata");
            do
            {
                reader.MoveToAttribute("name");
                if (reader.Value.CompareTo(testCaseName) == 0)
                {
                    // Advance to the rule itself
                    reader.Read(); 
                    reader.Read(); 
                    return reader;
                }
            } while (reader.ReadToNextSibling("ruledata"));

            return null; // test case not found
        }

        /// <summary>
        /// Runs an individual test given the parameters passed in
        /// </summary>
        /// <param name="testCaseName">XML fragment to use</param>
        /// <param name="dataPresent">If the Rule Data should be coming back</param>
        /// <param name="date">The date to use for start/end date</param>
        /// <param name="tier">Tier to use</param>
        /// <param name="store">Store to use</param>
        /// <returns></returns>
        private static TEST_RESULTS IndividualTest(String splitOn, bool dataPresent,DateTime date)
        {
            String[] split = splitOn.Split(new Char[] { '_' });

            string testCaseName = split[1] + "_" + split[2] + "_" + split[3];
            XmlReader reader = GetTestXml(testCaseName);

            if (reader == null)
            {
                Global.RO.Error("test case could not be found!");
                return TEST_RESULTS.FAILED;
            }

            Hashtable filterCriteria = new Hashtable();
            filterCriteria["tier"] = split[1];
            filterCriteria["store"] = split[2];

            // Required fields
            filterCriteria["visibilityindex"] = 1;
            filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", date);
            filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", date);

            string ruleData = engine.ProcessRule(filterCriteria, reader);


            if (dataPresent && ruleData == string.Empty) // Rule data should be present and isn't
            {
                Global.RO.Error("Rule should have come back!");
                return TEST_RESULTS.FAILED;
            }
            else if (dataPresent && ruleData != string.Empty) // Rule data should be present, and is
            {
                Global.RO.Info(ruleData);
            }
            else if (!dataPresent && ruleData != string.Empty) // Rule data should not be present, and is
            {
                Global.RO.Error("Rule should have been empty!");
                return TEST_RESULTS.FAILED;                
            }
            else if (!dataPresent && ruleData == string.Empty) //Rule Data should not be present, and isn't
            {
                Global.RO.Info(ruleData);
            }

            return TEST_RESULTS.PASSED;
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_available_useCurrentDates : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), true, DateTime.Now);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_available_UseMinDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MinValue);
            }
        }


        [TestCase, TestCasePriority(1)]
        class p_2_10000_available_UseMaxDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MaxValue);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_past_useCurrentDates : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.Now);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_past_UseMinDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MinValue);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_past_UseMaxDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MaxValue);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_future_useCurrentDates : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.Now);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_future_UseMinDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MinValue);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_2_10000_future_UseMaxDate : TestBase
        {
            protected override void Execute()
            {
                ResultCode = IndividualTest(this.GetType().ToString(), false, DateTime.MaxValue);
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_Multiple_Stores_Anded : TestBase
        {
            protected override void Execute()
            {
                XmlReader reader = GetTestXml("TwoStoresAvailableNow");

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tier"] = "2";
                filterCriteria["store"] = "10000_20000";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);

                string ruleData = engine.ProcessRule(filterCriteria, reader);

                if (ruleData == string.Empty)
                {
                    Global.RO.Error("Rule should have come back!");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                Global.RO.Info(ruleData);
                ResultCode =TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_Multiple_Stores_Anded_NotAllMatch : TestBase
        {
            protected override void Execute()
            {
                XmlReader reader = GetTestXml("TwoStoresAvailableNow");

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tier"] = "2";
                filterCriteria["store"] = "99990_20000";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);

                string ruleData = engine.ProcessRule(filterCriteria, reader);

                if (ruleData != string.Empty)
                {
                    Global.RO.Error("Rule should not have come back!");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class p_Multiple_Stores_Ord : TestBase
        {
            protected override void Execute()
            {
                XmlReader reader = GetTestXml("TwoStoresAvailableNow");

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tier"] = "2";
                filterCriteria["store"] = "60000.20000";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);

                string ruleData = engine.ProcessRule(filterCriteria, reader);

                if (ruleData == string.Empty)
                {
                    Global.RO.Error("Rule should have come back!");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                Global.RO.Info(ruleData);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        


    }

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class MaxRating
    {
        private static EspEngine engine = new EspEngine();

        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }

        [TestCase, TestCasePriority(1)]
        class p_max_rating : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tiers"] = "1.2.3";
                filterCriteria["maxrating"] = "20";
                // First mediaid has a rating of 10, hence will show up with a max of 20
                // Second mediaid has a rating of 30, hence will NOT show up
                filterCriteria["products"] = "00000000-0000-4052-8052-85e83b8d12db.66acd000-77fe-1000-9115-d8026d3b992a";
                filterCriteria["locale"] = "en-us";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["resource"] = "productv1";
                filterCriteria["pagenum"] = 1;
                filterCriteria["pagesize"] = 10;
                filterCriteria["orderby"] = 1;
                filterCriteria["orderdirection"] = 1;
                filterCriteria["offerfilter"] = 2;
                filterCriteria["editorialprivilege"] = 1;
                filterCriteria["visibilitylevel"] = "1.2";
                filterCriteria["offerfilter"] = 1;
                filterCriteria["detailview"] = "detaillevel5";

                string fql = engine.RetrieveFql(filterCriteria);

                Global.RO.Info(fql);

                IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                if (results.DocCount == 1)
                {
                    String espDocument = results.GetDocument(1).GetSummaryField("detaillevel5").StringValue;
                    if (espDocument.Contains("00000000-0000-4052-8052-85e83b8d12db") && !espDocument.Contains("66acd000-77fe-1000-9115-d8026d3b992a"))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }        
    }

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("EspEngineTests")]
    public class OfferInstanceGrouping
    {
        private static EspEngine engine = new EspEngine();

        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }

        [TestCase, TestCasePriority(1)]
        class p_OfferInstance_No_Match : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tiers"] = "2";
                filterCriteria["stores"] = "1";
                filterCriteria["products"] = "66acd000-77fe-1000-9115-d9026d3b992a";
                filterCriteria["locale"] = "en-us";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["resource"] = "productv1";
                filterCriteria["pagenum"] = 1;
                filterCriteria["pagesize"] = 10;
                filterCriteria["orderby"] = 1;
                filterCriteria["orderdirection"] = 1;
                filterCriteria["offerfilter"] = 2;
                filterCriteria["editorialprivilege"] = 1;
                filterCriteria["visibilitylevel"] = "1.2";
                filterCriteria["detailview"] = "detaillevel5";

                string fql = engine.RetrieveFql(filterCriteria);

                Global.RO.Info(fql);

                IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                if (results.DocCount != 0)
                {
                    String espDocument = results.GetDocument(1).GetSummaryField("detaillevel5").StringValue;
                    Global.RO.Error("Should not have received results: " + espDocument);
                }
                else
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [TestCase, TestCasePriority(1)]
        class p_OfferInstance_Match : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = new Hashtable();
                filterCriteria["tiers"] = "3";
                filterCriteria["stores"] = "1";
                filterCriteria["products"] = "66acd000-77fe-1000-9115-d9026d3b992a";
                filterCriteria["locale"] = "en-us";

                // Required fields
                filterCriteria["visibilityindex"] = 1;
                filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.Now);
                filterCriteria["resource"] = "productv1";
                filterCriteria["pagenum"] = 1;
                filterCriteria["pagesize"] = 10;
                filterCriteria["orderby"] = 1;
                filterCriteria["orderdirection"] = 1;
                filterCriteria["offerfilter"] = 2;
                filterCriteria["editorialprivilege"] = 1;
                filterCriteria["visibilitylevel"] = "1.2";
                filterCriteria["detailview"] = "detaillevel5";

                string fql = engine.RetrieveFql(filterCriteria);

                Global.RO.Info(fql);

                IQueryResult results = engine.SubmitQuery(filterCriteria, fql);

                if (results.DocCount == 1)
                {
                    String espDocument = results.GetDocument(1).GetSummaryField("detaillevel5").StringValue;
                    if (espDocument.Contains("<offerInstanceId>urn:uuid:00000000-0000-4001-8000-00001010021b</offerInstanceId>") && !espDocument.Contains("<offerInstanceId>urn:uuid:00000000-0000-4001-8000-00001010011B</offerInstanceId>"))
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        Global.RO.Error(": " + espDocument);
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\FqlTypesTest.cs ===
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;

using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.config;
using xonline.common.espengine;

using ServerTestFramework;
using ServerTestFramework.LiveService;

namespace xonline.server.marketplace.test
{
    /// <summary>
    /// The test classes below will "self describe" which FQL statement to generate
    /// 
    /// Glossery
    /// 
    /// P               - This test case will be a negative test case
    /// First digit     - This test case will enforce the special AND/OR syntax
    /// Second digit     - This test case will enforce the scope operator
    /// First string    - This test case will use this data type
    /// 
    /// The class name will be split across _ and the parameters parsed per the glossery above
    /// </summary>
    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("FqlTypes")]
    public class FqlTypesTests
    {      
        [TestGroupSetup]
        public void Setup() 
        {         
        }

        [TestGroupTearDown]
        public void Shutdown() 
        {         
        }

        private static void PrintInformation(FqlType fqlType, string value)
        {
            Global.RO.Info(string.Format("Fql: [{0}]", fqlType.GetFql(value, false)));
            Global.RO.Info(string.Format("      FqlInformation: [{0}]", fqlType.ToString()));
        }

        private static TEST_RESULTS TryInvalid(FqlType fqlType, string value, xonline.common.service.HResult hresult)
        {
            try
            {
                PrintInformation(fqlType, value);
            }
            catch (XRLException xe)
            {
                if (xe.HResult == hresult)
                {
                    return TEST_RESULTS.PASSED;
                }
                else
                {
                    Global.RO.Error(string.Format("For value [{0}], error generating FQL: {1}", value, xe));
                    return TEST_RESULTS.FAILED;                    
                }
            }
            return TEST_RESULTS.FAILED;              
        }

        /// <summary>
        /// Syntax off
        /// Scope off
        /// Int32 data type
        /// 
        /// RESULT: 
        /// passing 1, FQL generated
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_0_0_Int32 : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productType", "producttypes", "System." + split[3], false, false,false, false, false, null);

                PrintInformation(fqlType, "1");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope off
        /// String data type
        /// 
        /// RESULT: 
        /// passing en-us, FQL generated
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_0_0_String : TestBase 
        {
            protected override void Execute()
            {                
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "locale", "locale", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "en-us");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope off
        /// guid data type
        /// 
        /// RESULT: 
        /// passing rock band 2 buid, FQL generated
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_0_0_Guid : TestBase
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productId", "guid", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope off
        /// datetime data type
        /// 
        /// RESULT: 
        /// passing 20091115T11:00:00Z, FQL generated
        /// </summary> 
        [TestCase, TestCasePriority(1)]
        class p_0_0_DateTime : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "startDate", "startDate", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "20091115T11:00:00Z");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope on
        /// Int32 data type
        /// 
        /// RESULT: 
        /// passing 1, FQL generated
        /// </summary>  
        [TestCase, TestCasePriority(1)]
        class p_0_1_Int32 : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productType", "producttypes", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "1");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope on
        /// Int32 data type
        /// 
        /// RESULT: 
        /// passing 1, FQL generated
        /// </summary> 
        [TestCase, TestCasePriority(1)]
        class p_0_1_String : TestBase 
        { 
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "locale", "locale", "System." + split[3], false, false, false, false,false, null);

                PrintInformation(fqlType, "en-us");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope on
        /// guid data type
        /// 
        /// RESULT: 
        /// passing rock band 2, FQL generated
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_0_1_Guid : TestBase
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "guid", "productId", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869");

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax off
        /// Scope on
        /// datetime data type
        /// 
        /// RESULT: 
        /// Exception generated when creating FqlType
        /// Datetime not valid when scope/syntax is on
        /// </summary> 
        [TestCase, TestCasePriority(1)]
        class n_0_1_DateTime : TestBase 
        { 
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "startDate", "startDate", "System." + split[3], false, false, false, false, false, null);
                }catch (XRLException xe)
                {
                    if (xe.HResult == xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_PARAMETER)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        Global.RO.Error(string.Format("For datatype [{0}], error received: {1}", split[3], xe));
                        ResultCode = TEST_RESULTS.FAILED;                    
                    }
                }
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope off
        /// Int32 data type
        /// 
        /// RESULT: 
        /// passing 1, FQL generated
        /// passing 1.2.3, FQL generated
        /// passing 1_2_3, FQL generated
        /// passing 1_2.3, exception generated
        /// </summary> 
        [TestCase, TestCasePriority(1)]
        class p_1_0_Int32 : TestBase 
        { 
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productType", "producttypes", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "1");
                PrintInformation(fqlType, "1.2.3");
                PrintInformation(fqlType, "1_2_3");

                ResultCode = TryInvalid(fqlType, "1_2.3", xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_SYNTAX);
                if (ResultCode == TEST_RESULTS.FAILED)
                {
                    Global.RO.Error("Test Failure!");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        
        /// <summary>
        /// Syntax on
        /// Scope off
        /// string data type
        /// 
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_0_String : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "locale", "locale", "System." + split[3], false, false, false, false, false, null);
                    ResultCode = TEST_RESULTS.PASSED;
                }
                catch (XRLException xe)
                {
                    Global.RO.Error(string.Format("For datatype [{0}], error received: {1}", split[3], xe));
                    ResultCode = TEST_RESULTS.FAILED;                    
                }                
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope off
        /// guid data type
        /// 
        /// RESULT: 
        /// passing rock band 2 and Lego rock band guid, FQL generated
        /// Passing three guids with both syntax, generate exception
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_0_Guid : TestBase
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productId", "guid", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869.66ACD000-77FE-1000-9115-D802575207F0");
                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869_66ACD000-77FE-1000-9115-D802575207F0");

                ResultCode = TryInvalid(fqlType, "66ACD000-77FE-1000-9115-D80245410869_66ACD000-77FE-1000-9115-D802575207F0.66ACD000-77FE-1000-9115-D80245410869", xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_SYNTAX);
                if (ResultCode == TEST_RESULTS.FAILED)
                {
                    Global.RO.Error("Test Failure!");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope off
        /// datetime data type
        /// 
        /// RESULT: 
        /// Exception always generated. Syntax cannot be on along with datetime
        /// </summary> 
        [TestCase, TestCasePriority(1)]
        class p_1_0_DateTime : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "startDate", "startDate", "System." + split[3], false, false, false, false, false, null);
                }
                catch (XRLException xe)
                {
                    if (xe.HResult == xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_PARAMETER)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        Global.RO.Error(string.Format("For datatype [{0}], error received: {1}", split[3], xe));
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                }
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope on
        /// Int32 data type
        /// 
        /// RESULT: 
        /// passing 1, FQL generated
        /// passing 1.2.3, FQL generated
        /// passing 1_2_3, FQL generated
        /// passing 1_2.3, exception generated
        [TestCase, TestCasePriority(1)]
        class p_1_1_Int32 : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productType", "producttypes", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "1");
                PrintInformation(fqlType, "1.2.3");
                PrintInformation(fqlType, "1_2_3");

                ResultCode = TryInvalid(fqlType, "1_2.3", xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_SYNTAX);
                if (ResultCode == TEST_RESULTS.FAILED)
                {
                    Global.RO.Error("Test Failure!");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope on
        /// string data type
        [TestCase, TestCasePriority(1)]
        class n_1_1_String : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "locale", "locale", "System." + split[3], false, false, false, false, false, null);
                }
                catch (XRLException xe)
                {
                    Global.RO.Error(string.Format("For datatype [{0}], error received: {1}", split[3], xe));
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope on
        /// guid data type
        /// 
        /// RESULT: 
        /// passing rock band 2 and Lego rock band guid, FQL generated
        /// Passing three guids with both syntax, generate exception
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_1_Guid : TestBase
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "productId", "guid", "System." + split[3], false, false, false, false, false, null);

                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869.66ACD000-77FE-1000-9115-D802575207F0");
                PrintInformation(fqlType, "66ACD000-77FE-1000-9115-D80245410869_66ACD000-77FE-1000-9115-D802575207F0");

                ResultCode = TryInvalid(fqlType, "66ACD000-77FE-1000-9115-D80245410869_66ACD000-77FE-1000-9115-D802575207F0.66ACD000-77FE-1000-9115-D80245410869", xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_SYNTAX);
                if (ResultCode == TEST_RESULTS.FAILED)
                {
                    Global.RO.Error("Test Failure!");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// Syntax on
        /// Scope on
        /// datetime data type
        /// 
        /// RESULT: 
        /// Exception always generated, syntax/scope cannot be on with datetime
        [TestCase, TestCasePriority(1)]
        class n_1_1_DateTime : TestBase 
        {
            protected override void Execute()
            {
                System.String[] split = this.GetType().ToString().Split(new Char[] { '_' });

                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(Int32.Parse(split[1]) == 1, Int32.Parse(split[2]) == 1,
                                        "startDate", "startDate", "System." + split[3], false, false, false, false, false, null);
                }
                catch (XRLException xe)
                {
                    if (xe.HResult == xonline.common.service.HResult.XONLINE_E_ESP_ENGINE_INVALID_PARAMETER)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                    else
                    {
                        Global.RO.Error(string.Format("For datatype [{0}], error received: {1}", split[3], xe));
                        ResultCode = TEST_RESULTS.FAILED;
                    }
                }
            }
        }


        /// <summary>
        /// string data type
        /// anti phrase mode - set of valid modes
        /// 
        /// RESULT: 
        /// 
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_1_AntiPhraseMode_Valid : TestBase
        {
            protected override void Execute()
            {
                String[] modes = new String[] {
                    "phrase",
                    "and",
                    "or",
                    "any",
                    "near",
                    "onear",
                    "simpleany",
                    "simpleall"
                };

                foreach (String validMode in modes)
                {
                    try
                    {
                        FqlType fqlType = FqlTypeFactory.GetFqlType(false, false,
                                                "searchterm", "string", "System.String", false, false, false, false, false, validMode);
                        String s = fqlType.GetFql("hello world", false);
                        String expectedFql = String.Format( "searchterm:string(\"hello world\", mode=\"{0}\")", validMode );
                        if ((String.IsNullOrEmpty(s)) || (!s.Equals(expectedFql)))
                        {
                            Global.RO.Error(string.Format("For anti phrase mode '{2}', expected fql [{0}] but got [{1}]", expectedFql, s, validMode));
                            ResultCode = TEST_RESULTS.FAILED;
                            return;
                        }
                    }
                    catch (XRLException xe)
                    {
                        Global.RO.Error(string.Format("For anti phrase mode, error received: {0}", xe));
                        ResultCode = TEST_RESULTS.FAILED;
                        return;
                    }
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// string data type
        /// anti phrase mode - null
        /// 
        /// RESULT: - not set
        /// 
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_1_AntiPhraseMode_Null : TestBase
        {
            protected override void Execute()
            {
                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(false, false,
                                            "searchterm", "string", "System.String", false, false, false, false, false, null);
                    String s = fqlType.GetFql("hello world", false);
                    String expectedFql = String.Format("searchterm:string(\"hello world\")");
                    if ((String.IsNullOrEmpty(s)) || (!s.Equals(expectedFql)))
                    {
                        Global.RO.Error(string.Format("For anti phrase mode '{2}', expected fql [{0}] but got [{1}]", expectedFql, s, "null"));
                        ResultCode = TEST_RESULTS.FAILED;
                        return;
                    }
                }
                catch (XRLException xe)
                {
                    Global.RO.Error(string.Format("For anti phrase mode, error received: {0}", xe));
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        /// <summary>
        /// string data type
        /// anti phrase mode - null
        /// 
        /// RESULT: - not set
        /// 
        /// </summary>   
        [TestCase, TestCasePriority(1)]
        class p_1_1_AntiPhraseMode_Invalid : TestBase
        {
            protected override void Execute()
            {
                try
                {
                    FqlType fqlType = FqlTypeFactory.GetFqlType(false, false,
                                            "searchterm", "string", "System.String", false, false, false, false, false, "invalid");
                    String s = fqlType.GetFql("hello world", false);
                    Global.RO.Error("Expected exception for mode 'invalid'");
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
                catch (XRLException)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                    return;
                }
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\RollupTestDocuments.cs ===
using System;
using System.IO;


namespace xonline.server.marketplace.test
{
    public static class RollupDocuments
    {
        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string NonGONDWithRollup1_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <isGameBrowsable>0</isGameBrowsable>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">2</store>
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">19</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">19</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">3</tier>
                    <store type=""int32"">1</store>
                    <startDate type=""datetime"">2015-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">47</offerTargetType>
                    <avatarBodyType type=""int32"">1</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">47</offerTargetType>
                    <avatarBodyType type=""int32"">3</avatarBodyType>
                    <tier type=""int32"">3</tier>
                    <store type=""int32"">1</store>
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
            </searchableXml>
        ";
        public static readonly string NonGONDWithRollup1_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""1"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>1</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""19"" stores=""1"">
                        <offerTargetType>
                            <mediaType>19</mediaType>
                            <tier>2</tier>
                            <store>1</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2015-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""3"" offerTargetType=""19"" stores=""1"">
                        <offerTargetType>
                            <mediaType>19</mediaType>
                            <tier>3</tier>
                            <store>1</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""3"" offerTargetType=""47"" stores=""1"" avatarBodyType=""1"">                  
                        <offerTargetType>
                            <mediaType>47</mediaType>
                            <avatarBodyType>1</avatarBodyType>
                            <tier>3</tier>
                            <store>1</store>
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""47"" stores=""1"" avatarBodyType=""3"">
                        <offerTargetType>
                            <mediaType>47</mediaType>
                            <avatarBodyType>3</avatarBodyType>
                            <tier>2</tier>
                            <store>1</store>
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
              </detailLevel5>            
        ";
        public static readonly string NonGONDWithNoRollup_Document =
            @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <virtualCollection>{0}</virtualCollection>
                <testSuite>rollup_tests</testSuite>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <isGameBrowsable>1</isGameBrowsable>
            </searchableXml>
        ";
        public static readonly string NonGONDWithNoRollup_DetailLevel =
        @"<detailLevel5>
            <test>{0}</test>
         </detailLevel5>
        ";

        public static readonly string DLC1_WithOffer_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <offerInstances>
                    <offerInstance>
                      <offerId>f0000001-0000-4000-8000-0000415607d1</offerId>
                      <hexOfferId>0x415607d1f0000001</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D1</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">1</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";
        public static readonly string DLC1_WithOffer_DetailLevel =
            @"<detailLevel5>
                <test>{0}</test>
                <offerInstances>
                    <RULE startDate=""2009-08-06T08:00:00Z"" endDate=""2799-12-31T00:00:00Z"" tiers=""2;"" stores=""1;"">
                      <offerInstance>
                        <offerId>urn:uuid:f0000001-0000-4000-8000-0000415607d1</offerId>
                        <hexOfferId>0x415607d1f0000001</hexOfferId>
                        <offerInstanceId>urn:uuid:f0000001-2067-4001-8000-0000415607d1</offerInstanceId>
                        <startDate>2009-08-06T08:00:00Z</startDate>
                        <endDate>2799-12-31T00:00:00Z</endDate>
                        <price paymentTypeId=""1"">2400.0000</price>
                        <taxType>0</taxType>
                        <tiers>
                          <tier>2</tier>
                        </tiers>
                        <stores>
                          <store>1</store>
                        </stores>
                      </offerInstance>
                    </RULE>
                </offerInstances>
              </detailLevel5>
             ";

        public static readonly string DLC2_WithNoOffer_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>        
            </searchableXml>
        ";

        public static readonly string DLC2_WithNoOffer_DetailLevel =
        @"<detailLevel5>
            <test>{0}</test>
         </detailLevel5>
        ";

        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithRollup1_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <childRollup>
                    <offerTargetType type=""int32"">1</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <offerInstances>
                    <offerInstance>
                      <offerId>f0000001-0000-4000-8000-0000415607d2</offerId>
                      <hexOfferId>0x415607d2f0000001</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D2</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">1</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";

        public static readonly string GONDWithRollup1_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""1"" stores=""1"">
                        <offerTargetType>
                            <mediaType>1</mediaType>
                            <tier>2</tier>
                            <store>1</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
                  <offerInstances>
                    <RULE startDate=""2009-08-06T08:00:00Z"" endDate=""2799-12-31T00:00:00Z"" tiers=""2;"" stores=""1;"">
                      <offerInstance>
                        <offerId>urn:uuid:f0000002-0000-4000-8000-0000415607d2</offerId>
                        <hexOfferId>0x415607d2f0000002</hexOfferId>
                        <offerInstanceId>urn:uuid:f0000001-2067-4001-8000-0000415607d2</offerInstanceId>
                        <startDate>2009-08-06T08:00:00Z</startDate>
                        <endDate>2799-12-31T00:00:00Z</endDate>
                        <price paymentTypeId=""1"">2400.0000</price>
                        <taxType>0</taxType>
                        <tiers>
                          <tier>2</tier>
                        </tiers>
                        <stores>
                          <store>1</store>
                        </stores>
                      </offerInstance>
                    </RULE>
                  </offerInstances>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithRollup2_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000001</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <isGameBrowsable>1</isGameBrowsable>
                <childRollup>
                    <offerTargetType type=""int32"">1</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <offerInstances>
                    <offerInstance>
                      <offerId>f000000a-0000-4000-8000-0000415607d2</offerId>
                      <hexOfferId>0x415607d2f000000a</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D2</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">1</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";

        public static readonly string GONDWithRollup2_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""1"" stores=""1"">
                        <offerTargetType>
                            <mediaType>{1}</mediaType>
                            <tier>2</tier>
                            <store>1</store>                
                        </offerTargetType>
                    </RULE>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
                  <offerInstances>
                    <RULE startDate=""2009-08-06T08:00:00Z"" endDate=""2799-12-31T00:00:00Z"" tiers=""2;"" stores=""1;"">
                      <offerInstance>
                        <offerId>urn:uuid:f0000002-0000-4000-8000-0000415607d2</offerId>
                        <hexOfferId>0x415607d2f0000002</hexOfferId>
                        <offerInstanceId>urn:uuid:f0000001-2067-4001-8000-0000415607d2</offerInstanceId>
                        <startDate>2009-08-06T08:00:00Z</startDate>
                        <endDate>2799-12-31T00:00:00Z</endDate>
                        <price paymentTypeId=""1"">2400.0000</price>
                        <taxType>0</taxType>
                        <tiers>
                          <tier>2</tier>
                        </tiers>
                        <stores>
                          <store>1</store>
                        </stores>
                      </offerInstance>
                    </RULE>
                  </offerInstances>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string DLC_ForParentProduct_2_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000001</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <offerInstances>
                    <offerInstance>
                      <offerId>f000000b-0000-4000-8000-0000415607d2</offerId>
                      <hexOfferId>0x415607d2f000000b</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D2</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">1</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";

        public static readonly string DLC_ForParentProduct_2_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerInstances>
                    <RULE startDate=""2009-08-06T08:00:00Z"" endDate=""2799-12-31T00:00:00Z"" tiers=""2;"" stores=""1;"">
                      <offerInstance>
                        <offerId>urn:uuid:f000000b-0000-4000-8000-0000415607d2</offerId>
                        <hexOfferId>0x415607d2f000000b</hexOfferId>
                        <offerInstanceId>urn:uuid:f0000001-2067-4001-8000-0000415607d2</offerInstanceId>
                        <startDate>2009-08-06T08:00:00Z</startDate>
                        <endDate>2799-12-31T00:00:00Z</endDate>
                        <price paymentTypeId=""1"">2400.0000</price>
                        <taxType>0</taxType>
                        <tiers>
                          <tier>2</tier>
                        </tiers>
                        <stores>
                          <store>1</store>
                        </stores>
                      </offerInstance>
                    </RULE>
                  </offerInstances>
              </detailLevel5>            
        ";




        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithRollup2_OI_Vis_Level_3_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000002</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <isGameBrowsable>1</isGameBrowsable>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <offerInstances>
                    <offerInstance>
                      <offerId>f000000a-0000-4000-8000-0000415607d2</offerId>
                      <hexOfferId>0x415607d2f000000a</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D2</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">3</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";

        public static readonly string GONDWithRollup2_OI_Vis_Level_3_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
              </detailLevel5>            
        ";

        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithRollup2_OI_Vis_Level_3_GameNonBrowsable_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000003</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
                <offerInstances>
                    <offerInstance>
                      <offerId>f000000a-0000-4000-8000-0000415607d2</offerId>
                      <hexOfferId>0x415607d2f000000a</hexOfferId>
                      <offerInstanceId>F0000001-2067-4001-8000-0000415607D2</offerInstanceId>
                      <startDate type=""datetime"">2009-08-06T08:00:00Z</startDate>
                      <endDate type=""datetime"">2799-12-31T00:00:00Z</endDate>
                      <paymentType type=""int32"">1</paymentType>
                      <visibilityLevel type=""int32"">3</visibilityLevel>
                      <price type=""double"">2400.0000</price>
                      <taxType type=""int32"">0</taxType>
                      <tiers>
                        <tier  type=""int32"">2</tier>
                      </tiers>
                      <stores>
                        <store  type=""int32"">1</store>
                      </stores>
                    </offerInstance>
                </offerInstances>
            </searchableXml>
        ";

        public static readonly string GONDWithRollup2_OI_Vis_Level_3_GameNonBrowsable_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithoutRollup3_OI_Vis_Level_3_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>                
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000004</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <isGameBrowsable>1</isGameBrowsable>
            </searchableXml>
        ";

        public static readonly string GONDWithoutRollup3_OI_Vis_Level_3_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <myProductId>66acd000-77fe-1000-9115-000000000004</myProductId>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string GONDWithoutRollup3_OI_Vis_Level_3_GameNonBrowsable_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>                
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000005</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
            </searchableXml>
        ";

        public static readonly string GONDWithoutRollup3_OI_Vis_Level_3_GameNonBrowsable_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <myProductId>66acd000-77fe-1000-9115-000000000005</myProductId>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string NonGONDWithRollup3_GameBrowsable_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <isGameBrowsable>1</isGameBrowsable>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000006</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
            </searchableXml>
        ";

        public static readonly string NonGONDWithRollup3_GameBrowsable_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
              </detailLevel5>            
        ";

        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string NonGONDWithNoRollup_GameBrowsable_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <isGameBrowsable>1</isGameBrowsable>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000007</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
                <childRollup>
                    <offerTargetType type=""int32"">18</offerTargetType>
                    <avatarBodyType type=""int32"">0</avatarBodyType>
                    <tier type=""int32"">2</tier>
                    <store type=""int32"">1</store>                    
                    <startDate type=""datetime"">2009-08-06T08:00:00</startDate>
                    <endDate type=""datetime"">2799-12-31T00:00:00</endDate>
                </childRollup>
            </searchableXml>
        ";

        public static readonly string NonGONDWithNoRollup3_GameBrowsable_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
                  <offerTargetTypes>
                    <RULE startDate=""2009-08-06T08:00:00"" endDate=""2799-12-31T00:00:00"" tiers=""2"" offerTargetType=""18"" stores=""2"">
                        <offerTargetType>
                            <mediaType>18</mediaType>
                            <tier>2</tier>
                            <store>2</store>                
                        </offerTargetType>
                    </RULE>
                  </offerTargetTypes>
              </detailLevel5>            
        ";


        // There should be no empty space between start of the string and the <?xml tag
        public static readonly string DLC_ForParentProduct_2_Without_OI_Document =
        @"<?xml version=""1.0"" encoding=""utf-8""?>
            <searchableXml>
                <testSuite>rollup_tests</testSuite>
                <virtualCollection>{0}</virtualCollection>
                <test>{1}</test>
                <locale>{2}</locale>
                <productType>{3}</productType>
                <categoryId type=""int32"">-1</categoryId>
                <avatarBodyType type=""int32"">0</avatarBodyType>
                <parentProducts>
                    <parentProduct>
                      <parentProductId>66acd000-77fe-1000-9115-000000000008</parentProductId>
                      <parentProductType type=""int32"">{3}</parentProductType>
                      <parentRelationshipType type=""int32"">2</parentRelationshipType>
                    </parentProduct>                
                </parentProducts>
            </searchableXml>
        ";

        public static readonly string DLC_ForParentProduct_2_Without_OI_DetailLevel =
            @"<detailLevel5>
                  <test>{0}</test>
              </detailLevel5>            
        ";



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\CatalogWebService\TestSuite\FullTestSuitePart2.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeneratedTests {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FullTestSuitePart2 : PtfTestClassBase {
        
        public FullTestSuitePart2() {
            this.SetSwitch("generatedtestpath", "..\\\\TestSuite");
            this.SetSwitch("noviewer", "false");
            this.SetSwitch("viewcollapselabels", "true");
            this.SetSwitch("stopaterror", "false");
            this.SetSwitch("depthfirst", "false");
            this.SetSwitch("displayrequirements", "true");
            this.SetSwitch("proceedcontroltimeout", "2");
            this.SetSwitch("quiescencetimeout", "2");
            this.SetSwitch("defaultparameterexpansionlimit", "2048");
            this.SetSwitch("defaultparameterexpansion", "product");
            this.SetSwitch("codegenerationtimeout", "300");
            this.SetSwitch("statebound", "-1");
            this.SetSwitch("stepbound", "-1");
            this.SetSwitch("pathbound", "-1");
            this.SetSwitch("stepsperstatebound", "1024");
        }
        
        #region Expect Delegates
        public delegate void SaveAudioEncodingDelegate1(string @return);
        
        public delegate void SaveContributorDelegate1(string @return);
        
        public delegate void SaveGameDelegate1(string @return);
        
        public delegate void SaveImageDelegate1(string @return);
        
        public delegate void SaveLicenseTypeDelegate1(string @return);
        
        public delegate void SavePricingRuleDelegate1(string @return);
        
        public delegate void SaveVideoEncodingDelegate1(string @return);
        
        public delegate void SaveEntityDelegate1(string @return);
        
        public delegate void SaveTaskDelegate1(string @return);
        
        public delegate void SaveTaskDelegate2(string @return);
        
        public delegate void SaveDRMTaskDelegate1(string @return);
        
        public delegate void GetArticleDelegate1(string @return);
        
        public delegate void GetArticleArrayDelegate1(string @return);
        
        public delegate void GetAudioEncodingArrayDelegate1(string @return);
        
        public delegate void GetCategorySystemDelegate1(string @return);
        
        public delegate void GetCategorySystemArrayDelegate1(string @return);
        
        public delegate void GetClientTypeArrayDelegate1(string @return);
        
        public delegate void GetContributorDelegate1(string @return);
        
        public delegate void GetContributorArrayDelegate1(string @return);
        
        public delegate void GetContributorRelationshipTypeArrayDelegate1(string @return);
        
        public delegate void GetCountryDelegate1(string @return);
        
        public delegate void GetCountryArrayDelegate1(string @return);
        
        public delegate void GetCurrencyDelegate1(string @return);
        
        public delegate void GetCurrencyArrayDelegate1(string @return);
        
        public delegate void GetDRMLicenseIssuerDelegate1(string @return);
        
        public delegate void GetDRMLicenseIssuerArrayDelegate1(string @return);
        
        public delegate void GetEntityDelegate1(string @return);
        
        public delegate void GetEntityArrayDelegate1(string @return);
        
        public delegate void GetGameDelegate1(string @return);
        
        public delegate void GetGameContentDelegate1(string @return);
        
        public delegate void GetImageDelegate1(string @return);
        
        public delegate void GetImageFormatDelegate1(string @return);
        
        public delegate void GetImageSizeArrayDelegate1(string @return);
        
        public delegate void GetLicenseClassDelegate1(string @return);
        
        public delegate void GetLicenseClassArrayDelegate1(string @return);
        
        public delegate void GetLicenseTypeDelegate1(string @return);
        
        public delegate void GetLicenseTypeArrayDelegate1(string @return);
        
        public delegate void GetLocaleArrayDelegate1(string @return);
        
        public delegate void GetMediaRelationshipTypeArrayDelegate1(string @return);
        
        public delegate void GetMediaTypeArrayDelegate1(string @return);
        
        public delegate void GetMetadataProviderDelegate1(string @return);
        
        public delegate void GetMetadataProviderArrayDelegate1(string @return);
        
        public delegate void GetOfferDelegate1(string @return);
        
        public delegate void GetPreviewMediaInstanceTypeArrayDelegate1(string @return);
        
        public delegate void GetPricingRuleDelegate1(string @return);
        
        public delegate void GetPricingRuleArrayDelegate1(string @return);
        
        public delegate void GetProviderDelegate1(string @return);
        
        public delegate void GetProviderArrayDelegate1(string @return);
        
        public delegate void GetRatingSystemDelegate1(string @return);
        
        public delegate void GetRatingSystemArrayDelegate1(string @return);
        
        public delegate void GetRoleArrayDelegate1(string @return);
        
        public delegate void GetStoreArrayDelegate1(string @return);
        
        public delegate void GetTasksDelegate1(string @return);
        
        public delegate void GetAvailableTaskAsXMLDelegate1(string @return);
        
        public delegate void GetTaskStatusArrayDelegate1(string @return);
        
        public delegate void GetTaskByStatusDelegate1(string @return);
        
        public delegate void GetUserTypeArrayDelegate1(string @return);
        
        public delegate void GetVideoDelegate1(string @return);
        
        public delegate void GetVideoDefinitionArrayDelegate1(string @return);
        
        public delegate void GetVideoEncodingArrayDelegate1(string @return);
        
        public delegate void GetVideoSeasonDelegate1(string @return);
        
        public delegate void GetVideoSeriesDelegate1(string @return);
        
        public delegate void GetVisibilityLevelArrayDelegate1(string @return);
        
        public delegate void GetVisibilityStatusArrayDelegate1(string @return);
        
        public delegate void GetAvailableEntityIdDelegate1(string @return);
        
        public delegate void GetAvailableCategoryIdDelegate1(string @return);
        
        public delegate void GetAvailableCategorySystemIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingSystemIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingValueIdDelegate1(string @return);
        
        public delegate void GetAvailableRatingDescriptorIdDelegate1(string @return);
        
        public delegate void GetAvailableLicenseTypeIdDelegate1(string @return);
        
        public delegate void GetCatalogIdDelegate1(string @return);
        
        public delegate void GetExternalIdDelegate1(string @return);
        
        public delegate void GetExternalFeedSourceDelegate1(string @return);
        
        public delegate void GetExternalFeedMappingObjectDelegate1(string @return);
        
        public delegate void SaveExternalFeedMapping1Delegate1(string @return);
        
        public delegate void SaveExternalFeedMapping2Delegate1(string @return);
        
        public delegate void SaveExternalFeedMapping3Delegate1(string @return);
        
        public delegate void PingDelegate1(string @return);
        
        public delegate void PurgeTaskQueueDelegate1(string @return);
        
        public delegate void GetPaymentMethodDelegate1(string @return);
        
        public delegate void GetPaymentMethodArrayDelegate1(string @return);
        
        public delegate void GetExternalFeedSourceArrayDelegate1(string @return);
        
        public delegate void GetExternalFeedMappingObjectArrayDelegate1(string @return);
        
        public delegate void GameOfferSearchDelegate1(string @return);
        
        public delegate void GamePublisherSearchDelegate1(string @return);
        
        public delegate void GameTitleSearchDelegate1(string @return);
        
        public delegate void SaveCategoryDelegate1(string @return);
        
        public delegate void SaveGameContentDelegate1(string @return);
        
        public delegate void SaveOfferDelegate1(string @return);
        
        public delegate void SavePublishingBatchRequestDelegate1(string @return);
        
        public delegate void SaveVideoDelegate1(string @return);
        
        public delegate void SaveVideoSeasonDelegate1(string @return);
        
        public delegate void SaveVideoSeriesDelegate1(string @return);
        
        public delegate void GetPodcastByIdDelegate1(string @return);
        
        public delegate void GetPodcastByUriDelegate1(string @return);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase SaveAudioEncodingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveAudioEncoding", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveContributorInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveContributor", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveGameInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveGame", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.IntegerType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveImageInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveImage", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveLicenseTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveLicenseType", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.XmlType), typeof(InputTypes.ArrayType));
        
        static System.Reflection.MethodBase SavePricingRuleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SavePricingRule", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DecimalType), typeof(InputTypes.DecimalType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ArrayType));
        
        static System.Reflection.MethodBase SaveVideoEncodingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoEncoding", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveEntityInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveEntity", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(bool));
        
        static System.Reflection.MethodBase SaveTaskInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveTask", typeof(InputTypes.ServiceType), typeof(InputTypes.XmlType));
        
        static System.Reflection.MethodBase SaveTaskInfo1 = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveTask", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.RelatedItemIdType));
        
        static System.Reflection.MethodBase SaveDRMTaskInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveDRMTask", typeof(InputTypes.ServiceType), typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.MediumStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.LongStringType), typeof(InputTypes.RelatedItemIdType), typeof(bool), typeof(InputTypes.RelatedItemIdType));
        
        static System.Reflection.MethodBase GetArticleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetArticle", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetArticleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetArticleArray", typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAudioEncodingArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAudioEncodingArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCategorySystemInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCategorySystem", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCategorySystemArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCategorySystemArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetClientTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetClientTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributor", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributorArray", typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetContributorRelationshipTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetContributorRelationshipTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCountryInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCountry", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCountryArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCountryArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCurrencyInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCurrency", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCurrencyArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCurrencyArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetDRMLicenseIssuerInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetDRMLicenseIssuer", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetDRMLicenseIssuerArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetDRMLicenseIssuerArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetEntityInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetEntity", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetEntityArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetEntityArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetGameInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetGame", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetGameContentInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetGameContent", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImage", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageFormatInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImageFormat", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetImageSizeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetImageSizeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseClassInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseClass", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseClassArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseClassArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseTypeInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseType", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLicenseTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLicenseTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetLocaleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetLocaleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMediaRelationshipTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMediaRelationshipTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMediaTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMediaTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMetadataProviderInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMetadataProvider", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetMetadataProviderArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetMetadataProviderArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetOfferInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetOffer", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPreviewMediaInstanceTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPreviewMediaInstanceTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPricingRuleInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPricingRule", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPricingRuleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPricingRuleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetProviderInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetProvider", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetProviderArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetProviderArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRatingSystemInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRatingSystem", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRatingSystemArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRatingSystemArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetRoleArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetRoleArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetStoreArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetStoreArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTasksInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTasks", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableTaskAsXMLInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableTaskAsXML", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTaskStatusArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTaskStatusArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetTaskByStatusInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetTaskByStatus", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetUserTypeArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetUserTypeArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideo", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoDefinitionArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoDefinitionArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoEncodingArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoEncodingArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoSeasonInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoSeason", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVideoSeriesInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVideoSeries", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVisibilityLevelArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVisibilityLevelArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetVisibilityStatusArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetVisibilityStatusArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableEntityIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableEntityId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableCategoryIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableCategoryId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableCategorySystemIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableCategorySystemId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingSystemIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingSystemId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingValueIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingValueId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableRatingDescriptorIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableRatingDescriptorId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetAvailableLicenseTypeIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetAvailableLicenseTypeId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetCatalogIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetCatalogId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalId", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedSourceInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedSource", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedMappingObjectInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedMappingObject", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveExternalFeedMapping1Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping1", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveExternalFeedMapping2Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping2");
        
        static System.Reflection.MethodBase SaveExternalFeedMapping3Info = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveExternalFeedMapping3");
        
        static System.Reflection.MethodBase PingInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "Ping", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase PurgeTaskQueueInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "PurgeTaskQueue", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPaymentMethodInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPaymentMethod", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPaymentMethodArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPaymentMethodArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedSourceArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedSourceArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetExternalFeedMappingObjectArrayInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetExternalFeedMappingObjectArray", typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GameOfferSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GameOfferSearch", typeof(InputTypes.StringType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GamePublisherSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GamePublisherSearch", typeof(InputTypes.FindType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GameTitleSearchInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GameTitleSearch", typeof(InputTypes.StringType), typeof(InputTypes.IntegerType), typeof(InputTypes.MaxRows), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveCategoryInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveCategory", typeof(InputTypes.ChangeType), typeof(InputTypes.IdType), typeof(InputTypes.IdType), typeof(InputTypes.TreeParentIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveGameContentInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveGameContent", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(bool), typeof(InputTypes.ShortStringType), typeof(InputTypes.IntegerType), typeof(InputTypes.RelatedItemIdType), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ContentBitFilterType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveOfferInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveOffer", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.MediumStringType), typeof(InputTypes.OfferType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SavePublishingBatchRequestInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SavePublishingBatchRequest", typeof(InputTypes.ChangeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.DateTimeType), typeof(InputTypes.PublishingVisibilityStatusType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideo", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.IntegerType), typeof(InputTypes.IntegerType), typeof(bool), typeof(InputTypes.ShortStringType), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ShortStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ShortStringType), typeof(InputTypes.ShortStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoSeasonInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoSeason", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.IntegerType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase SaveVideoSeriesInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "SaveVideoSeries", typeof(InputTypes.InsertChangeType), typeof(InputTypes.IdType), typeof(InputTypes.ShortStringType), typeof(bool), typeof(bool), typeof(InputTypes.MediumStringType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.DateTimeType), typeof(InputTypes.ShortStringType), typeof(InputTypes.DateTimeType), typeof(InputTypes.RelatedItemIdType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ArrayType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPodcastByIdInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPodcastById", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        
        static System.Reflection.MethodBase GetPodcastByUriInfo = TestManagerHelpers.GetMethodInfo(typeof(Adapter.ICatalogWebServiceAdapter), "GetPodcastByUri", typeof(InputTypes.IdType), typeof(InputTypes.ServiceType));
        #endregion
        
        #region Adapter Instances
        private Adapter.ICatalogWebServiceAdapter ICatalogWebServiceAdapterInstance;
        #endregion
        
        #region Variables
        private IVariable<InputTypes.LongStringType> asperaFileLocation;
        
        private IVariable<InputTypes.ChangeType> change3;
        
        private IVariable<InputTypes.DateTimeType> endDate;
        
        private IVariable<InputTypes.LongStringType> inputFileLocation;
        
        private IVariable<bool> isDRMRequired;
        
        private IVariable<InputTypes.RelatedItemIdType> mediaInstanceId;
        
        private IVariable<InputTypes.LongStringType> outputFileLocation;
        
        private IVariable<InputTypes.ServiceType> service1;
        
        private IVariable<InputTypes.DateTimeType> startDate1;
        
        private IVariable<InputTypes.LongStringType> statusMessage;
        
        private IVariable<InputTypes.IdType> taskInstanceId;
        
        private IVariable<InputTypes.RelatedItemIdType> taskStatusId;
        
        private IVariable<InputTypes.RelatedItemIdType> taskStatusId1;
        
        private IVariable<InputTypes.DateTimeType> v0;
        
        private IVariable<InputTypes.IdType> v1;
        
        private IVariable<bool> v10;
        
        private IVariable<InputTypes.RelatedItemIdType> v11;
        
        private IVariable<InputTypes.DateTimeType> v2;
        
        private IVariable<InputTypes.LongStringType> v3;
        
        private IVariable<InputTypes.LongStringType> v4;
        
        private IVariable<InputTypes.LongStringType> v5;
        
        private IVariable<InputTypes.LongStringType> v6;
        
        private IVariable<InputTypes.RelatedItemIdType> v7;
        
        private IVariable<InputTypes.ChangeType> v8;
        
        private IVariable<InputTypes.ServiceType> v9;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.ICatalogWebServiceAdapterInstance = ((Adapter.ICatalogWebServiceAdapter)(this.Manager.GetAdapter(typeof(Adapter.ICatalogWebServiceAdapter))));
            this.asperaFileLocation = this.Manager.CreateVariable<InputTypes.LongStringType>("asperaFileLocation");
            this.change3 = this.Manager.CreateVariable<InputTypes.ChangeType>("change3");
            this.endDate = this.Manager.CreateVariable<InputTypes.DateTimeType>("endDate");
            this.inputFileLocation = this.Manager.CreateVariable<InputTypes.LongStringType>("inputFileLocation");
            this.isDRMRequired = this.Manager.CreateVariable<bool>("isDRMRequired");
            this.mediaInstanceId = this.Manager.CreateVariable<InputTypes.RelatedItemIdType>("mediaInstanceId");
            this.outputFileLocation = this.Manager.CreateVariable<InputTypes.LongStringType>("outputFileLocation");
            this.service1 = this.Manager.CreateVariable<InputTypes.ServiceType>("service1");
            this.startDate1 = this.Manager.CreateVariable<InputTypes.DateTimeType>("startDate1");
            this.statusMessage = this.Manager.CreateVariable<InputTypes.LongStringType>("statusMessage");
            this.taskInstanceId = this.Manager.CreateVariable<InputTypes.IdType>("taskInstanceId");
            this.taskStatusId = this.Manager.CreateVariable<InputTypes.RelatedItemIdType>("taskStatusId");
            this.taskStatusId1 = this.Manager.CreateVariable<InputTypes.RelatedItemIdType>("taskStatusId1");
            this.v0 = this.Manager.CreateVariable<InputTypes.DateTimeType>("v0");
            this.v1 = this.Manager.CreateVariable<InputTypes.IdType>("v1");
            this.v10 = this.Manager.CreateVariable<bool>("v10");
            this.v11 = this.Manager.CreateVariable<InputTypes.RelatedItemIdType>("v11");
            this.v2 = this.Manager.CreateVariable<InputTypes.DateTimeType>("v2");
            this.v3 = this.Manager.CreateVariable<InputTypes.LongStringType>("v3");
            this.v4 = this.Manager.CreateVariable<InputTypes.LongStringType>("v4");
            this.v5 = this.Manager.CreateVariable<InputTypes.LongStringType>("v5");
            this.v6 = this.Manager.CreateVariable<InputTypes.LongStringType>("v6");
            this.v7 = this.Manager.CreateVariable<InputTypes.RelatedItemIdType>("v7");
            this.v8 = this.Manager.CreateVariable<InputTypes.ChangeType>("v8");
            this.v9 = this.Manager.CreateVariable<InputTypes.ServiceType>("v9");
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S0() {
            this.Manager.BeginTest("FullTestSuitePart2S0");
            this.Manager.Comment("reaching state \'S0\'");
            string temp0;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp0 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp0 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S1)", TestManagerHelpers.Describe(temp0)));
            this.Manager.Comment("reaching state \'S1094\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S2() {
            this.Manager.BeginTest("FullTestSuitePart2S2");
            this.Manager.Comment("reaching state \'S2\'");
            string temp1;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Add,New,Length50,CorrectHeader)\'");
            temp1 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S3\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp1 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S3)", TestManagerHelpers.Describe(temp1)));
            this.Manager.Comment("reaching state \'S1095\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S4() {
            this.Manager.BeginTest("FullTestSuitePart2S4");
            this.Manager.Comment("reaching state \'S4\'");
            string temp2;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp2 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S5\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp2 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S5)", TestManagerHelpers.Describe(temp2)));
            this.Manager.Comment("reaching state \'S1096\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S6() {
            this.Manager.BeginTest("FullTestSuitePart2S6");
            this.Manager.Comment("reaching state \'S6\'");
            string temp3;
            this.Manager.Comment("executing step \'call SaveAudioEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp3 = this.ICatalogWebServiceAdapterInstance.SaveAudioEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S7\'");
            this.Manager.Comment("checking step \'return SaveAudioEncoding/\"NoError\"\'");
            this.Manager.Assert((temp3 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveAudioEncoding, state S7)", TestManagerHelpers.Describe(temp3)));
            this.Manager.Comment("reaching state \'S1097\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S8() {
            this.Manager.BeginTest("FullTestSuitePart2S8");
            this.Manager.Comment("reaching state \'S8\'");
            string temp4;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Future,Length255,Future,Leng" +
                    "th255,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)" +
                    "\'");
            temp4 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S9\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp4 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S9)", TestManagerHelpers.Describe(temp4)));
            this.Manager.Comment("reaching state \'S1098\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S10() {
            this.Manager.BeginTest("FullTestSuitePart2S10");
            this.Manager.Comment("reaching state \'S10\'");
            string temp5;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Future,Length255,Future,Leng" +
                    "th255,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp5 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S11\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp5 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S11)", TestManagerHelpers.Describe(temp5)));
            this.Manager.Comment("reaching state \'S1099\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S12
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S12() {
            this.Manager.BeginTest("FullTestSuitePart2S12");
            this.Manager.Comment("reaching state \'S12\'");
            string temp6;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Today,Length255,Future,Length255," +
                    "Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp6 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S13\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp6 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S13)", TestManagerHelpers.Describe(temp6)));
            this.Manager.Comment("reaching state \'S1100\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S14
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S14() {
            this.Manager.BeginTest("FullTestSuitePart2S14");
            this.Manager.Comment("reaching state \'S14\'");
            string temp7;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Max,Length255,Future,Length255,Em" +
                    "pty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp7 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S15\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp7 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S15)", TestManagerHelpers.Describe(temp7)));
            this.Manager.Comment("reaching state \'S1101\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S16
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S16() {
            this.Manager.BeginTest("FullTestSuitePart2S16");
            this.Manager.Comment("reaching state \'S16\'");
            string temp8;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Future,Length255,Future,Length255" +
                    ",Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp8 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S17\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp8 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S17)", TestManagerHelpers.Describe(temp8)));
            this.Manager.Comment("reaching state \'S1102\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S18
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S18() {
            this.Manager.BeginTest("FullTestSuitePart2S18");
            this.Manager.Comment("reaching state \'S18\'");
            string temp9;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Today,Length255,Future,Length255,Emp" +
                    "ty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp9 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S19\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp9 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S19)", TestManagerHelpers.Describe(temp9)));
            this.Manager.Comment("reaching state \'S1103\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S20
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S20() {
            this.Manager.BeginTest("FullTestSuitePart2S20");
            this.Manager.Comment("reaching state \'S20\'");
            string temp10;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Max,Length255,Future,Length255,Empty" +
                    ",Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp10 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S21\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp10 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S21)", TestManagerHelpers.Describe(temp10)));
            this.Manager.Comment("reaching state \'S1104\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S22
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S22() {
            this.Manager.BeginTest("FullTestSuitePart2S22");
            this.Manager.Comment("reaching state \'S22\'");
            string temp11;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Today,Length255,Future,Lengt" +
                    "h255,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp11 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S23\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp11 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S23)", TestManagerHelpers.Describe(temp11)));
            this.Manager.Comment("reaching state \'S1105\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S24
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S24() {
            this.Manager.BeginTest("FullTestSuitePart2S24");
            this.Manager.Comment("reaching state \'S24\'");
            string temp12;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Max,Length255,Future,Length255," +
                    "Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp12 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S25\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp12 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S25)", TestManagerHelpers.Describe(temp12)));
            this.Manager.Comment("reaching state \'S1106\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S26
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S26() {
            this.Manager.BeginTest("FullTestSuitePart2S26");
            this.Manager.Comment("reaching state \'S26\'");
            string temp13;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Today,Length255,Future,Length25" +
                    "5,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp13 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S27\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp13 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S27)", TestManagerHelpers.Describe(temp13)));
            this.Manager.Comment("reaching state \'S1107\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S28
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S28() {
            this.Manager.BeginTest("FullTestSuitePart2S28");
            this.Manager.Comment("reaching state \'S28\'");
            string temp14;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Today,Length255,Future,Length25" +
                    "5,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'" +
                    "");
            temp14 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S29\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp14 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S29)", TestManagerHelpers.Describe(temp14)));
            this.Manager.Comment("reaching state \'S1108\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S30
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S30() {
            this.Manager.BeginTest("FullTestSuitePart2S30");
            this.Manager.Comment("reaching state \'S30\'");
            string temp15;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Today,Length255,Future,Length255,Len" +
                    "gth50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp15 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S31\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp15 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S31)", TestManagerHelpers.Describe(temp15)));
            this.Manager.Comment("reaching state \'S1109\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S32
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S32() {
            this.Manager.BeginTest("FullTestSuitePart2S32");
            this.Manager.Comment("reaching state \'S32\'");
            string temp16;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Future,Length255,Future,Length2" +
                    "55,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)" +
                    "\'");
            temp16 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S33\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp16 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S33)", TestManagerHelpers.Describe(temp16)));
            this.Manager.Comment("reaching state \'S1110\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S34
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S34() {
            this.Manager.BeginTest("FullTestSuitePart2S34");
            this.Manager.Comment("reaching state \'S34\'");
            string temp17;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Future,Length255,Future,Length255,Em" +
                    "pty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp17 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S35\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp17 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S35)", TestManagerHelpers.Describe(temp17)));
            this.Manager.Comment("reaching state \'S1111\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S36
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S36() {
            this.Manager.BeginTest("FullTestSuitePart2S36");
            this.Manager.Comment("reaching state \'S36\'");
            string temp18;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Past,Length255,Future,Length255,Empt" +
                    "y,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp18 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S37\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp18 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S37)", TestManagerHelpers.Describe(temp18)));
            this.Manager.Comment("reaching state \'S1112\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S38
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S38() {
            this.Manager.BeginTest("FullTestSuitePart2S38");
            this.Manager.Comment("reaching state \'S38\'");
            string temp19;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Future,Length255,Future,Length255,Nu" +
                    "ll,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp19 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S39\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp19 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S39)", TestManagerHelpers.Describe(temp19)));
            this.Manager.Comment("reaching state \'S1113\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S40
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S40() {
            this.Manager.BeginTest("FullTestSuitePart2S40");
            this.Manager.Comment("reaching state \'S40\'");
            string temp20;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Past,Length255,Future,Length255,Null" +
                    ",Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp20 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S41\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp20 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S41)", TestManagerHelpers.Describe(temp20)));
            this.Manager.Comment("reaching state \'S1114\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S42
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S42() {
            this.Manager.BeginTest("FullTestSuitePart2S42");
            this.Manager.Comment("reaching state \'S42\'");
            string temp21;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Past,Length255,Future,Length255,Leng" +
                    "th50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp21 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S43\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp21 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S43)", TestManagerHelpers.Describe(temp21)));
            this.Manager.Comment("reaching state \'S1115\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S44
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S44() {
            this.Manager.BeginTest("FullTestSuitePart2S44");
            this.Manager.Comment("reaching state \'S44\'");
            string temp22;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Past,Length255,Future,Length255,N" +
                    "ull,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp22 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S45\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp22 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S45)", TestManagerHelpers.Describe(temp22)));
            this.Manager.Comment("reaching state \'S1116\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S46
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S46() {
            this.Manager.BeginTest("FullTestSuitePart2S46");
            this.Manager.Comment("reaching state \'S46\'");
            string temp23;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Max,Length255,Future,Length255,Lengt" +
                    "h50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp23 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S47\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp23 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S47)", TestManagerHelpers.Describe(temp23)));
            this.Manager.Comment("reaching state \'S1117\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S48
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S48() {
            this.Manager.BeginTest("FullTestSuitePart2S48");
            this.Manager.Comment("reaching state \'S48\'");
            string temp24;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Max,Length255,Future,Length255,Le" +
                    "ngth50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp24 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S49\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp24 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S49)", TestManagerHelpers.Describe(temp24)));
            this.Manager.Comment("reaching state \'S1118\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S50
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S50() {
            this.Manager.BeginTest("FullTestSuitePart2S50");
            this.Manager.Comment("reaching state \'S50\'");
            string temp25;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Past,Length255,Future,Length" +
                    "255,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp25 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S51\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp25 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S51)", TestManagerHelpers.Describe(temp25)));
            this.Manager.Comment("reaching state \'S1119\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S52
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S52() {
            this.Manager.BeginTest("FullTestSuitePart2S52");
            this.Manager.Comment("reaching state \'S52\'");
            string temp26;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Past,Length255,Future,Length" +
                    "255,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader" +
                    ")\'");
            temp26 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S53\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp26 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S53)", TestManagerHelpers.Describe(temp26)));
            this.Manager.Comment("reaching state \'S1120\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S54
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S54() {
            this.Manager.BeginTest("FullTestSuitePart2S54");
            this.Manager.Comment("reaching state \'S54\'");
            string temp27;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Max,Length255,Future,Length2" +
                    "55,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp27 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S55\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp27 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S55)", TestManagerHelpers.Describe(temp27)));
            this.Manager.Comment("reaching state \'S1121\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S56
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S56() {
            this.Manager.BeginTest("FullTestSuitePart2S56");
            this.Manager.Comment("reaching state \'S56\'");
            string temp28;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Max,Length255,Future,Length255,Null," +
                    "Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp28 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S57\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp28 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S57)", TestManagerHelpers.Describe(temp28)));
            this.Manager.Comment("reaching state \'S1122\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S58
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S58() {
            this.Manager.BeginTest("FullTestSuitePart2S58");
            this.Manager.Comment("reaching state \'S58\'");
            string temp29;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Max,Length255,Future,Length2" +
                    "55,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)" +
                    "\'");
            temp29 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S59\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp29 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S59)", TestManagerHelpers.Describe(temp29)));
            this.Manager.Comment("reaching state \'S1123\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S60
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S60() {
            this.Manager.BeginTest("FullTestSuitePart2S60");
            this.Manager.Comment("reaching state \'S60\'");
            string temp30;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Future,Length255,Future,Length255,Le" +
                    "ngth50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp30 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S61\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp30 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S61)", TestManagerHelpers.Describe(temp30)));
            this.Manager.Comment("reaching state \'S1124\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S62
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S62() {
            this.Manager.BeginTest("FullTestSuitePart2S62");
            this.Manager.Comment("reaching state \'S62\'");
            string temp31;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Past,Length255,Future,Length255,L" +
                    "ength50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp31 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S63\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp31 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S63)", TestManagerHelpers.Describe(temp31)));
            this.Manager.Comment("reaching state \'S1125\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S64
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S64() {
            this.Manager.BeginTest("FullTestSuitePart2S64");
            this.Manager.Comment("reaching state \'S64\'");
            string temp32;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Today,Length255,Future,Length255," +
                    "Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp32 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S65\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp32 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S65)", TestManagerHelpers.Describe(temp32)));
            this.Manager.Comment("reaching state \'S1126\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S66
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S66() {
            this.Manager.BeginTest("FullTestSuitePart2S66");
            this.Manager.Comment("reaching state \'S66\'");
            string temp33;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Past,Length255,Future,Length255" +
                    ",Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp33 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S67\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp33 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S67)", TestManagerHelpers.Describe(temp33)));
            this.Manager.Comment("reaching state \'S1127\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S68
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S68() {
            this.Manager.BeginTest("FullTestSuitePart2S68");
            this.Manager.Comment("reaching state \'S68\'");
            string temp34;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Max,Length255,Future,Length255," +
                    "Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp34 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S69\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp34 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S69)", TestManagerHelpers.Describe(temp34)));
            this.Manager.Comment("reaching state \'S1128\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S70
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S70() {
            this.Manager.BeginTest("FullTestSuitePart2S70");
            this.Manager.Comment("reaching state \'S70\'");
            string temp35;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Today,Length255,Future,Lengt" +
                    "h255,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeade" +
                    "r)\'");
            temp35 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S71\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp35 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S71)", TestManagerHelpers.Describe(temp35)));
            this.Manager.Comment("reaching state \'S1129\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S72
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S72() {
            this.Manager.BeginTest("FullTestSuitePart2S72");
            this.Manager.Comment("reaching state \'S72\'");
            string temp36;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Past,Length255,Future,Length255,E" +
                    "mpty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp36 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S73\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp36 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S73)", TestManagerHelpers.Describe(temp36)));
            this.Manager.Comment("reaching state \'S1130\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S74
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S74() {
            this.Manager.BeginTest("FullTestSuitePart2S74");
            this.Manager.Comment("reaching state \'S74\'");
            string temp37;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Today,Length255,Future,Length255," +
                    "Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp37 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S75\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp37 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S75)", TestManagerHelpers.Describe(temp37)));
            this.Manager.Comment("reaching state \'S1131\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S76
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S76() {
            this.Manager.BeginTest("FullTestSuitePart2S76");
            this.Manager.Comment("reaching state \'S76\'");
            string temp38;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Past,Length255,Future,Length255" +
                    ",Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp38 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S77\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp38 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S77)", TestManagerHelpers.Describe(temp38)));
            this.Manager.Comment("reaching state \'S1132\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S78
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S78() {
            this.Manager.BeginTest("FullTestSuitePart2S78");
            this.Manager.Comment("reaching state \'S78\'");
            string temp39;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Today,Length255,Future,Length25" +
                    "5,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp39 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S79\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp39 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S79)", TestManagerHelpers.Describe(temp39)));
            this.Manager.Comment("reaching state \'S1133\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S80
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S80() {
            this.Manager.BeginTest("FullTestSuitePart2S80");
            this.Manager.Comment("reaching state \'S80\'");
            string temp40;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Max,Length255,Future,Length255," +
                    "Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp40 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S81\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp40 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S81)", TestManagerHelpers.Describe(temp40)));
            this.Manager.Comment("reaching state \'S1134\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S82
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S82() {
            this.Manager.BeginTest("FullTestSuitePart2S82");
            this.Manager.Comment("reaching state \'S82\'");
            string temp41;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Today,Length255,Future,Lengt" +
                    "h255,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp41 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S83\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp41 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S83)", TestManagerHelpers.Describe(temp41)));
            this.Manager.Comment("reaching state \'S1135\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S84
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S84() {
            this.Manager.BeginTest("FullTestSuitePart2S84");
            this.Manager.Comment("reaching state \'S84\'");
            string temp42;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Past,Length255,Future,Length" +
                    "255,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp42 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S85\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp42 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S85)", TestManagerHelpers.Describe(temp42)));
            this.Manager.Comment("reaching state \'S1136\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S86
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S86() {
            this.Manager.BeginTest("FullTestSuitePart2S86");
            this.Manager.Comment("reaching state \'S86\'");
            string temp43;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Past,Length255,Future,Length255" +
                    ",Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp43 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Past, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp43 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S87)", TestManagerHelpers.Describe(temp43)));
            this.Manager.Comment("reaching state \'S1137\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S88
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S88() {
            this.Manager.BeginTest("FullTestSuitePart2S88");
            this.Manager.Comment("reaching state \'S88\'");
            string temp44;
            this.Manager.Comment("executing step \'call SaveContributor(Add,New,Today,Length255,Future,Length255,Nul" +
                    "l,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp44 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.DateTimeType.Today, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp44 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S89)", TestManagerHelpers.Describe(temp44)));
            this.Manager.Comment("reaching state \'S1138\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S90
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S90() {
            this.Manager.BeginTest("FullTestSuitePart2S90");
            this.Manager.Comment("reaching state \'S90\'");
            string temp45;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Max,Length255,Future,Length255,Nu" +
                    "ll,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp45 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp45 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S91)", TestManagerHelpers.Describe(temp45)));
            this.Manager.Comment("reaching state \'S1139\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S92
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S92() {
            this.Manager.BeginTest("FullTestSuitePart2S92");
            this.Manager.Comment("reaching state \'S92\'");
            string temp46;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Max,Length255,Future,Length2" +
                    "55,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp46 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Max, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp46 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S93)", TestManagerHelpers.Describe(temp46)));
            this.Manager.Comment("reaching state \'S1140\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S94
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S94() {
            this.Manager.BeginTest("FullTestSuitePart2S94");
            this.Manager.Comment("reaching state \'S94\'");
            string temp47;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Future,Length255,Future,Length255" +
                    ",Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp47 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp47 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S95)", TestManagerHelpers.Describe(temp47)));
            this.Manager.Comment("reaching state \'S1141\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S96
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S96() {
            this.Manager.BeginTest("FullTestSuitePart2S96");
            this.Manager.Comment("reaching state \'S96\'");
            string temp48;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,New,Future,Length255,Future,Length255" +
                    ",Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp48 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp48 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S97)", TestManagerHelpers.Describe(temp48)));
            this.Manager.Comment("reaching state \'S1142\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S98
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S98() {
            this.Manager.BeginTest("FullTestSuitePart2S98");
            this.Manager.Comment("reaching state \'S98\'");
            string temp49;
            this.Manager.Comment("executing step \'call SaveContributor(Delete,Existing,Future,Length255,Future,Leng" +
                    "th255,Length50,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHead" +
                    "er)\'");
            temp49 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp49 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S99)", TestManagerHelpers.Describe(temp49)));
            this.Manager.Comment("reaching state \'S1143\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S100
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S100() {
            this.Manager.BeginTest("FullTestSuitePart2S100");
            this.Manager.Comment("reaching state \'S100\'");
            string temp50;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Future,Length255,Future,Length2" +
                    "55,Null,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp50 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp50 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S101)", TestManagerHelpers.Describe(temp50)));
            this.Manager.Comment("reaching state \'S1144\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S102
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S102() {
            this.Manager.BeginTest("FullTestSuitePart2S102");
            this.Manager.Comment("reaching state \'S102\'");
            string temp51;
            this.Manager.Comment("executing step \'call SaveContributor(Add,Existing,Future,Length255,Future,Length2" +
                    "55,Empty,Length50,False,Existing,Empty,Empty,Empty,Empty,Empty,CorrectHeader)\'");
            temp51 = this.ICatalogWebServiceAdapterInstance.SaveContributor(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.DateTimeType.Future, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S103\'");
            this.Manager.Comment("checking step \'return SaveContributor/\"NoError\"\'");
            this.Manager.Assert((temp51 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveContributor, state S103)", TestManagerHelpers.Describe(temp51)));
            this.Manager.Comment("reaching state \'S1145\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S104
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S104() {
            this.Manager.BeginTest("FullTestSuitePart2S104");
            this.Manager.Comment("reaching state \'S104\'");
            string temp52;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MaxValue,Length255,Exis" +
                    "ting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,CorrectHeader)\'");
            temp52 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S105\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp52 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S105)", TestManagerHelpers.Describe(temp52)));
            this.Manager.Comment("reaching state \'S1146\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S106
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S106() {
            this.Manager.BeginTest("FullTestSuitePart2S106");
            this.Manager.Comment("reaching state \'S106\'");
            string temp53;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MaxValue,Length255,Exis" +
                    "ting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp53 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S107\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp53 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S107)", TestManagerHelpers.Describe(temp53)));
            this.Manager.Comment("reaching state \'S1147\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S108
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S108() {
            this.Manager.BeginTest("FullTestSuitePart2S108");
            this.Manager.Comment("reaching state \'S108\'");
            string temp54;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MaxValue,Length255,Exis" +
                    "ting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp54 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S109\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp54 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S109)", TestManagerHelpers.Describe(temp54)));
            this.Manager.Comment("reaching state \'S1148\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S110
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S110() {
            this.Manager.BeginTest("FullTestSuitePart2S110");
            this.Manager.Comment("reaching state \'S110\'");
            string temp55;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Negative,Length255,Existi" +
                    "ng,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp55 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S111\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp55 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S111)", TestManagerHelpers.Describe(temp55)));
            this.Manager.Comment("reaching state \'S1149\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S112
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S112() {
            this.Manager.BeginTest("FullTestSuitePart2S112");
            this.Manager.Comment("reaching state \'S112\'");
            string temp56;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MaxValue,Length255,E" +
                    "xisting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp56 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S113\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp56 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S113)", TestManagerHelpers.Describe(temp56)));
            this.Manager.Comment("reaching state \'S1150\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S114
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S114() {
            this.Manager.BeginTest("FullTestSuitePart2S114");
            this.Manager.Comment("reaching state \'S114\'");
            string temp57;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Negative,Length255,E" +
                    "xisting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp57 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp57 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S115)", TestManagerHelpers.Describe(temp57)));
            this.Manager.Comment("reaching state \'S1151\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S116
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S116() {
            this.Manager.BeginTest("FullTestSuitePart2S116");
            this.Manager.Comment("reaching state \'S116\'");
            string temp58;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Negative,Length255,Existing," +
                    "Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp58 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp58 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S117)", TestManagerHelpers.Describe(temp58)));
            this.Manager.Comment("reaching state \'S1152\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S118
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S118() {
            this.Manager.BeginTest("FullTestSuitePart2S118");
            this.Manager.Comment("reaching state \'S118\'");
            string temp59;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Negative,Length255,Existing," +
                    "Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,CorrectHeader)\'");
            temp59 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp59 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S119)", TestManagerHelpers.Describe(temp59)));
            this.Manager.Comment("reaching state \'S1153\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S120
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S120() {
            this.Manager.BeginTest("FullTestSuitePart2S120");
            this.Manager.Comment("reaching state \'S120\'");
            string temp60;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MinValue,Length255,Existing," +
                    "Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp60 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp60 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S121)", TestManagerHelpers.Describe(temp60)));
            this.Manager.Comment("reaching state \'S1154\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S122
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S122() {
            this.Manager.BeginTest("FullTestSuitePart2S122");
            this.Manager.Comment("reaching state \'S122\'");
            string temp61;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MinValue,Length255,E" +
                    "xisting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,Empty,CorrectHeader)\'");
            temp61 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp61 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S123)", TestManagerHelpers.Describe(temp61)));
            this.Manager.Comment("reaching state \'S1155\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S124
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S124() {
            this.Manager.BeginTest("FullTestSuitePart2S124");
            this.Manager.Comment("reaching state \'S124\'");
            string temp62;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Existing,Length255,E" +
                    "xisting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,Empty,CorrectHeader)\'");
            temp62 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp62 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S125)", TestManagerHelpers.Describe(temp62)));
            this.Manager.Comment("reaching state \'S1156\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S126
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S126() {
            this.Manager.BeginTest("FullTestSuitePart2S126");
            this.Manager.Comment("reaching state \'S126\'");
            string temp63;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MaxValue,Length255,E" +
                    "xisting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,Empty,CorrectHeader)\'");
            temp63 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp63 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S127)", TestManagerHelpers.Describe(temp63)));
            this.Manager.Comment("reaching state \'S1157\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S128
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S128() {
            this.Manager.BeginTest("FullTestSuitePart2S128");
            this.Manager.Comment("reaching state \'S128\'");
            string temp64;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Existing,Length255,E" +
                    "xisting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,Empty,CorrectHeader)\'");
            temp64 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp64 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S129)", TestManagerHelpers.Describe(temp64)));
            this.Manager.Comment("reaching state \'S1158\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S130
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S130() {
            this.Manager.BeginTest("FullTestSuitePart2S130");
            this.Manager.Comment("reaching state \'S130\'");
            string temp65;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MaxValue,Length255,E" +
                    "xisting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,Empty,CorrectHeader)\'");
            temp65 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp65 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S131)", TestManagerHelpers.Describe(temp65)));
            this.Manager.Comment("reaching state \'S1159\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S132
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S132() {
            this.Manager.BeginTest("FullTestSuitePart2S132");
            this.Manager.Comment("reaching state \'S132\'");
            string temp66;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MaxValue,Length255,Existi" +
                    "ng,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,CorrectHeader)\'");
            temp66 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp66 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S133)", TestManagerHelpers.Describe(temp66)));
            this.Manager.Comment("reaching state \'S1160\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S134
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S134() {
            this.Manager.BeginTest("FullTestSuitePart2S134");
            this.Manager.Comment("reaching state \'S134\'");
            string temp67;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MaxValue,Length255,Exis" +
                    "ting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp67 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S135\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp67 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S135)", TestManagerHelpers.Describe(temp67)));
            this.Manager.Comment("reaching state \'S1161\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S136
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S136() {
            this.Manager.BeginTest("FullTestSuitePart2S136");
            this.Manager.Comment("reaching state \'S136\'");
            string temp68;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MinValue,Length255,Existi" +
                    "ng,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp68 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S137\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp68 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S137)", TestManagerHelpers.Describe(temp68)));
            this.Manager.Comment("reaching state \'S1162\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S138
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S138() {
            this.Manager.BeginTest("FullTestSuitePart2S138");
            this.Manager.Comment("reaching state \'S138\'");
            string temp69;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Existing,Length255,Existi" +
                    "ng,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp69 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S139\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp69 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S139)", TestManagerHelpers.Describe(temp69)));
            this.Manager.Comment("reaching state \'S1163\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S140
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S140() {
            this.Manager.BeginTest("FullTestSuitePart2S140");
            this.Manager.Comment("reaching state \'S140\'");
            string temp70;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MaxValue,Length255,Existi" +
                    "ng,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp70 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S141\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp70 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S141)", TestManagerHelpers.Describe(temp70)));
            this.Manager.Comment("reaching state \'S1164\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S142
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S142() {
            this.Manager.BeginTest("FullTestSuitePart2S142");
            this.Manager.Comment("reaching state \'S142\'");
            string temp71;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MinValue,Length255,Existing," +
                    "Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,CorrectHeader)\'");
            temp71 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S143\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp71 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S143)", TestManagerHelpers.Describe(temp71)));
            this.Manager.Comment("reaching state \'S1165\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S144
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S144() {
            this.Manager.BeginTest("FullTestSuitePart2S144");
            this.Manager.Comment("reaching state \'S144\'");
            string temp72;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Existing,Length255,Existing," +
                    "Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp72 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S145\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp72 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S145)", TestManagerHelpers.Describe(temp72)));
            this.Manager.Comment("reaching state \'S1166\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S146
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S146() {
            this.Manager.BeginTest("FullTestSuitePart2S146");
            this.Manager.Comment("reaching state \'S146\'");
            string temp73;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MaxValue,Length255,Existing," +
                    "Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp73 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp73 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S147)", TestManagerHelpers.Describe(temp73)));
            this.Manager.Comment("reaching state \'S1167\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S148
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S148() {
            this.Manager.BeginTest("FullTestSuitePart2S148");
            this.Manager.Comment("reaching state \'S148\'");
            string temp74;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Existing,Length255,Existing," +
                    "Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,CorrectHeader)\'");
            temp74 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp74 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S149)", TestManagerHelpers.Describe(temp74)));
            this.Manager.Comment("reaching state \'S1168\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S150
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S150() {
            this.Manager.BeginTest("FullTestSuitePart2S150");
            this.Manager.Comment("reaching state \'S150\'");
            string temp75;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MaxValue,Length255,Existing," +
                    "Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,CorrectHeader)\'");
            temp75 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp75 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S151)", TestManagerHelpers.Describe(temp75)));
            this.Manager.Comment("reaching state \'S1169\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S152
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S152() {
            this.Manager.BeginTest("FullTestSuitePart2S152");
            this.Manager.Comment("reaching state \'S152\'");
            string temp76;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MaxValue,Length255,Existing," +
                    "Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,CorrectHeader)\'");
            temp76 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp76 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S153)", TestManagerHelpers.Describe(temp76)));
            this.Manager.Comment("reaching state \'S1170\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S154
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S154() {
            this.Manager.BeginTest("FullTestSuitePart2S154");
            this.Manager.Comment("reaching state \'S154\'");
            string temp77;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Negative,Length255,Existing," +
                    "Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,CorrectHeader)\'");
            temp77 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp77 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S155)", TestManagerHelpers.Describe(temp77)));
            this.Manager.Comment("reaching state \'S1171\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S156
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S156() {
            this.Manager.BeginTest("FullTestSuitePart2S156");
            this.Manager.Comment("reaching state \'S156\'");
            string temp78;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Negative,Length255,Existing," +
                    "Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,CorrectHeader)\'");
            temp78 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp78 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S157)", TestManagerHelpers.Describe(temp78)));
            this.Manager.Comment("reaching state \'S1172\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S158
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S158() {
            this.Manager.BeginTest("FullTestSuitePart2S158");
            this.Manager.Comment("reaching state \'S158\'");
            string temp79;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MinValue,Length255,Existi" +
                    "ng,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp79 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp79 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S159)", TestManagerHelpers.Describe(temp79)));
            this.Manager.Comment("reaching state \'S1173\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S160
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S160() {
            this.Manager.BeginTest("FullTestSuitePart2S160");
            this.Manager.Comment("reaching state \'S160\'");
            string temp80;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Existing,Length255,E" +
                    "xisting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,CorrectHeader)\'");
            temp80 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp80 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S161)", TestManagerHelpers.Describe(temp80)));
            this.Manager.Comment("reaching state \'S1174\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S162
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S162() {
            this.Manager.BeginTest("FullTestSuitePart2S162");
            this.Manager.Comment("reaching state \'S162\'");
            string temp81;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MaxValue,Length255,E" +
                    "xisting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,CorrectHeader)\'");
            temp81 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp81 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S163)", TestManagerHelpers.Describe(temp81)));
            this.Manager.Comment("reaching state \'S1175\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S164
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S164() {
            this.Manager.BeginTest("FullTestSuitePart2S164");
            this.Manager.Comment("reaching state \'S164\'");
            string temp82;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MinValue,Length255,Existi" +
                    "ng,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp82 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp82 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S165)", TestManagerHelpers.Describe(temp82)));
            this.Manager.Comment("reaching state \'S1176\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S166
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S166() {
            this.Manager.BeginTest("FullTestSuitePart2S166");
            this.Manager.Comment("reaching state \'S166\'");
            string temp83;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Existing,Length255,Existi" +
                    "ng,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp83 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S167\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp83 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S167)", TestManagerHelpers.Describe(temp83)));
            this.Manager.Comment("reaching state \'S1177\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S168
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S168() {
            this.Manager.BeginTest("FullTestSuitePart2S168");
            this.Manager.Comment("reaching state \'S168\'");
            string temp84;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Existing,Length255,Existi" +
                    "ng,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp84 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S169\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp84 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S169)", TestManagerHelpers.Describe(temp84)));
            this.Manager.Comment("reaching state \'S1178\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S170
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S170() {
            this.Manager.BeginTest("FullTestSuitePart2S170");
            this.Manager.Comment("reaching state \'S170\'");
            string temp85;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MinValue,Length255,Exis" +
                    "ting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,CorrectHeader)\'");
            temp85 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S171\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp85 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S171)", TestManagerHelpers.Describe(temp85)));
            this.Manager.Comment("reaching state \'S1179\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S172
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S172() {
            this.Manager.BeginTest("FullTestSuitePart2S172");
            this.Manager.Comment("reaching state \'S172\'");
            string temp86;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Existing,Length255,Exis" +
                    "ting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,CorrectHeader)\'");
            temp86 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S173\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp86 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S173)", TestManagerHelpers.Describe(temp86)));
            this.Manager.Comment("reaching state \'S1180\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S174
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S174() {
            this.Manager.BeginTest("FullTestSuitePart2S174");
            this.Manager.Comment("reaching state \'S174\'");
            string temp87;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MaxValue,Length255,Existi" +
                    "ng,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp87 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S175\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp87 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S175)", TestManagerHelpers.Describe(temp87)));
            this.Manager.Comment("reaching state \'S1181\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S176
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S176() {
            this.Manager.BeginTest("FullTestSuitePart2S176");
            this.Manager.Comment("reaching state \'S176\'");
            string temp88;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MinValue,Length255,Exis" +
                    "ting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp88 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S177\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp88 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S177)", TestManagerHelpers.Describe(temp88)));
            this.Manager.Comment("reaching state \'S1182\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S178
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S178() {
            this.Manager.BeginTest("FullTestSuitePart2S178");
            this.Manager.Comment("reaching state \'S178\'");
            string temp89;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Negative,Length255,Exis" +
                    "ting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,CorrectHeader)\'");
            temp89 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp89 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S179)", TestManagerHelpers.Describe(temp89)));
            this.Manager.Comment("reaching state \'S1183\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S180
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S180() {
            this.Manager.BeginTest("FullTestSuitePart2S180");
            this.Manager.Comment("reaching state \'S180\'");
            string temp90;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MinValue,Length255,Existing," +
                    "Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,CorrectHeader)\'");
            temp90 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp90 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S181)", TestManagerHelpers.Describe(temp90)));
            this.Manager.Comment("reaching state \'S1184\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S182
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S182() {
            this.Manager.BeginTest("FullTestSuitePart2S182");
            this.Manager.Comment("reaching state \'S182\'");
            string temp91;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Existing,Length255,Existing," +
                    "Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,CorrectHeader)\'");
            temp91 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp91 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S183)", TestManagerHelpers.Describe(temp91)));
            this.Manager.Comment("reaching state \'S1185\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S184
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S184() {
            this.Manager.BeginTest("FullTestSuitePart2S184");
            this.Manager.Comment("reaching state \'S184\'");
            string temp92;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Existing,Length255,E" +
                    "xisting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp92 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp92 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S185)", TestManagerHelpers.Describe(temp92)));
            this.Manager.Comment("reaching state \'S1186\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S186
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S186() {
            this.Manager.BeginTest("FullTestSuitePart2S186");
            this.Manager.Comment("reaching state \'S186\'");
            string temp93;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MinValue,Length255,Exis" +
                    "ting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp93 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp93 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S187)", TestManagerHelpers.Describe(temp93)));
            this.Manager.Comment("reaching state \'S1187\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S188
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S188() {
            this.Manager.BeginTest("FullTestSuitePart2S188");
            this.Manager.Comment("reaching state \'S188\'");
            string temp94;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MaxValue,Length255,Existing," +
                    "Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,CorrectHeader)\'");
            temp94 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp94 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S189)", TestManagerHelpers.Describe(temp94)));
            this.Manager.Comment("reaching state \'S1188\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S190
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S190() {
            this.Manager.BeginTest("FullTestSuitePart2S190");
            this.Manager.Comment("reaching state \'S190\'");
            string temp95;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MaxValue,Length255,Existi" +
                    "ng,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp95 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MaxValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp95 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S191)", TestManagerHelpers.Describe(temp95)));
            this.Manager.Comment("reaching state \'S1189\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S192
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S192() {
            this.Manager.BeginTest("FullTestSuitePart2S192");
            this.Manager.Comment("reaching state \'S192\'");
            string temp96;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,Existing,Length255,Existing," +
                    "Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,CorrectHeader)\'");
            temp96 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp96 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S193)", TestManagerHelpers.Describe(temp96)));
            this.Manager.Comment("reaching state \'S1190\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S194
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S194() {
            this.Manager.BeginTest("FullTestSuitePart2S194");
            this.Manager.Comment("reaching state \'S194\'");
            string temp97;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Existing,Length255,Exis" +
                    "ting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp97 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S195\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp97 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S195)", TestManagerHelpers.Describe(temp97)));
            this.Manager.Comment("reaching state \'S1191\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S196
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S196() {
            this.Manager.BeginTest("FullTestSuitePart2S196");
            this.Manager.Comment("reaching state \'S196\'");
            string temp98;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Existing,Length255,Exis" +
                    "ting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp98 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S197\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp98 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S197)", TestManagerHelpers.Describe(temp98)));
            this.Manager.Comment("reaching state \'S1192\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S198
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S198() {
            this.Manager.BeginTest("FullTestSuitePart2S198");
            this.Manager.Comment("reaching state \'S198\'");
            string temp99;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Existing,Length255,Exis" +
                    "ting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp99 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp99 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S199)", TestManagerHelpers.Describe(temp99)));
            this.Manager.Comment("reaching state \'S1193\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S200
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S200() {
            this.Manager.BeginTest("FullTestSuitePart2S200");
            this.Manager.Comment("reaching state \'S200\'");
            string temp100;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Existing,Length255,Existi" +
                    "ng,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,CorrectHeader)\'");
            temp100 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Existing, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp100 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S201)", TestManagerHelpers.Describe(temp100)));
            this.Manager.Comment("reaching state \'S1194\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S202
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S202() {
            this.Manager.BeginTest("FullTestSuitePart2S202");
            this.Manager.Comment("reaching state \'S202\'");
            string temp101;
            this.Manager.Comment("executing step \'call SaveGame(Add,New,Length50,False,MinValue,Length255,Existing," +
                    "Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,CorrectHeader)\'");
            temp101 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp101 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S203)", TestManagerHelpers.Describe(temp101)));
            this.Manager.Comment("reaching state \'S1195\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S204
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S204() {
            this.Manager.BeginTest("FullTestSuitePart2S204");
            this.Manager.Comment("reaching state \'S204\'");
            string temp102;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Negative,Length255,Existi" +
                    "ng,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp102 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp102 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S205)", TestManagerHelpers.Describe(temp102)));
            this.Manager.Comment("reaching state \'S1196\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S206
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S206() {
            this.Manager.BeginTest("FullTestSuitePart2S206");
            this.Manager.Comment("reaching state \'S206\'");
            string temp103;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,MinValue,Length255,Exis" +
                    "ting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp103 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp103 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S207)", TestManagerHelpers.Describe(temp103)));
            this.Manager.Comment("reaching state \'S1197\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S208
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S208() {
            this.Manager.BeginTest("FullTestSuitePart2S208");
            this.Manager.Comment("reaching state \'S208\'");
            string temp104;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MinValue,Length255,E" +
                    "xisting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,CorrectHeader)\'");
            temp104 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp104 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S209)", TestManagerHelpers.Describe(temp104)));
            this.Manager.Comment("reaching state \'S1198\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S210
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S210() {
            this.Manager.BeginTest("FullTestSuitePart2S210");
            this.Manager.Comment("reaching state \'S210\'");
            string temp105;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Negative,Length255,Exis" +
                    "ting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp105 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp105 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S211)", TestManagerHelpers.Describe(temp105)));
            this.Manager.Comment("reaching state \'S1199\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S212
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S212() {
            this.Manager.BeginTest("FullTestSuitePart2S212");
            this.Manager.Comment("reaching state \'S212\'");
            string temp106;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MinValue,Length255,E" +
                    "xisting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,CorrectHeader)\'");
            temp106 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp106 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S213)", TestManagerHelpers.Describe(temp106)));
            this.Manager.Comment("reaching state \'S1200\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S214
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S214() {
            this.Manager.BeginTest("FullTestSuitePart2S214");
            this.Manager.Comment("reaching state \'S214\'");
            string temp107;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Negative,Length255,E" +
                    "xisting,Existing,Future,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,Empty,CorrectHeader)\'");
            temp107 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S215\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp107 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S215)", TestManagerHelpers.Describe(temp107)));
            this.Manager.Comment("reaching state \'S1201\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S216
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S216() {
            this.Manager.BeginTest("FullTestSuitePart2S216");
            this.Manager.Comment("reaching state \'S216\'");
            string temp108;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Negative,Length255,E" +
                    "xisting,Existing,Future,Today,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,CorrectHeader)\'");
            temp108 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Today, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S217\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp108 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S217)", TestManagerHelpers.Describe(temp108)));
            this.Manager.Comment("reaching state \'S1202\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S218
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S218() {
            this.Manager.BeginTest("FullTestSuitePart2S218");
            this.Manager.Comment("reaching state \'S218\'");
            string temp109;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Negative,Length255,Exis" +
                    "ting,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,CorrectHeader)\'");
            temp109 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S219\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp109 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S219)", TestManagerHelpers.Describe(temp109)));
            this.Manager.Comment("reaching state \'S1203\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S220
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S220() {
            this.Manager.BeginTest("FullTestSuitePart2S220");
            this.Manager.Comment("reaching state \'S220\'");
            string temp110;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Negative,Length255,Existi" +
                    "ng,Existing,Future,Max,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,CorrectHeader)\'");
            temp110 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Max, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S221\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp110 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S221)", TestManagerHelpers.Describe(temp110)));
            this.Manager.Comment("reaching state \'S1204\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S222
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S222() {
            this.Manager.BeginTest("FullTestSuitePart2S222");
            this.Manager.Comment("reaching state \'S222\'");
            string temp111;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,MinValue,Length255,Existi" +
                    "ng,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,CorrectHeader)\'");
            temp111 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S223\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp111 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S223)", TestManagerHelpers.Describe(temp111)));
            this.Manager.Comment("reaching state \'S1205\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S224
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S224() {
            this.Manager.BeginTest("FullTestSuitePart2S224");
            this.Manager.Comment("reaching state \'S224\'");
            string temp112;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,MinValue,Length255,E" +
                    "xisting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,Empty,CorrectHeader)\'");
            temp112 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.MinValue, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S225\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp112 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S225)", TestManagerHelpers.Describe(temp112)));
            this.Manager.Comment("reaching state \'S1206\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S226
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S226() {
            this.Manager.BeginTest("FullTestSuitePart2S226");
            this.Manager.Comment("reaching state \'S226\'");
            string temp113;
            this.Manager.Comment("executing step \'call SaveGame(Update,New,Length50,False,Negative,Length255,Existi" +
                    "ng,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,CorrectHeader)\'");
            temp113 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp113 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S227)", TestManagerHelpers.Describe(temp113)));
            this.Manager.Comment("reaching state \'S1207\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S228
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S228() {
            this.Manager.BeginTest("FullTestSuitePart2S228");
            this.Manager.Comment("reaching state \'S228\'");
            string temp114;
            this.Manager.Comment("executing step \'call SaveGame(Add,Existing,Length50,False,Negative,Length255,Exis" +
                    "ting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,CorrectHeader)\'");
            temp114 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp114 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S229)", TestManagerHelpers.Describe(temp114)));
            this.Manager.Comment("reaching state \'S1208\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S230
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S230() {
            this.Manager.BeginTest("FullTestSuitePart2S230");
            this.Manager.Comment("reaching state \'S230\'");
            string temp115;
            this.Manager.Comment("executing step \'call SaveGame(Update,Existing,Length50,False,Negative,Length255,E" +
                    "xisting,Existing,Future,Past,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,Empty,CorrectHeader)\'");
            temp115 = this.ICatalogWebServiceAdapterInstance.SaveGame(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, false, InputTypes.IntegerType.Negative, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Future, InputTypes.DateTimeType.Past, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return SaveGame/\"NoError\"\'");
            this.Manager.Assert((temp115 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveGame, state S231)", TestManagerHelpers.Describe(temp115)));
            this.Manager.Comment("reaching state \'S1209\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S232
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S232() {
            this.Manager.BeginTest("FullTestSuitePart2S232");
            this.Manager.Comment("reaching state \'S232\'");
            string temp116;
            this.Manager.Comment("executing step \'call SaveImage(Update,New,Length255,Length50,True,Length255,Lengt" +
                    "h255,Existing,Existing,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,CorrectHeader)\'");
            temp116 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp116 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S233)", TestManagerHelpers.Describe(temp116)));
            this.Manager.Comment("reaching state \'S1210\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S234
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S234() {
            this.Manager.BeginTest("FullTestSuitePart2S234");
            this.Manager.Comment("reaching state \'S234\'");
            string temp117;
            this.Manager.Comment("executing step \'call SaveImage(Update,New,Length255,Length50,True,Length255,Lengt" +
                    "h255,Existing,NotSpecified,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty,E" +
                    "mpty,Empty,Empty,CorrectHeader)\'");
            temp117 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Update, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp117 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S235)", TestManagerHelpers.Describe(temp117)));
            this.Manager.Comment("reaching state \'S1211\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S236
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S236() {
            this.Manager.BeginTest("FullTestSuitePart2S236");
            this.Manager.Comment("reaching state \'S236\'");
            string temp118;
            this.Manager.Comment("executing step \'call SaveImage(Update,Existing,Length255,Length50,True,Length255," +
                    "Length255,Existing,NotSpecified,Today,Future,Existing,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,Empty,Empty,CorrectHeader)\'");
            temp118 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp118 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S237)", TestManagerHelpers.Describe(temp118)));
            this.Manager.Comment("reaching state \'S1212\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S238
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S238() {
            this.Manager.BeginTest("FullTestSuitePart2S238");
            this.Manager.Comment("reaching state \'S238\'");
            string temp119;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,Existing,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empty,Em" +
                    "pty,Empty,CorrectHeader)\'");
            temp119 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp119 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S239)", TestManagerHelpers.Describe(temp119)));
            this.Manager.Comment("reaching state \'S1213\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S240
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S240() {
            this.Manager.BeginTest("FullTestSuitePart2S240");
            this.Manager.Comment("reaching state \'S240\'");
            string temp120;
            this.Manager.Comment("executing step \'call SaveImage(Add,Existing,Length255,Length50,True,Length255,Len" +
                    "gth255,Existing,NotSpecified,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty" +
                    ",Empty,Empty,Empty,CorrectHeader)\'");
            temp120 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp120 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S241)", TestManagerHelpers.Describe(temp120)));
            this.Manager.Comment("reaching state \'S1214\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S242
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S242() {
            this.Manager.BeginTest("FullTestSuitePart2S242");
            this.Manager.Comment("reaching state \'S242\'");
            string temp121;
            this.Manager.Comment("executing step \'call SaveImage(Add,New,Length255,Length50,True,Length255,Length25" +
                    "5,Existing,NotSpecified,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty,Empt" +
                    "y,Empty,Empty,CorrectHeader)\'");
            temp121 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.NotSpecified, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp121 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S243)", TestManagerHelpers.Describe(temp121)));
            this.Manager.Comment("reaching state \'S1215\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S244
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S244() {
            this.Manager.BeginTest("FullTestSuitePart2S244");
            this.Manager.Comment("reaching state \'S244\'");
            string temp122;
            this.Manager.Comment("executing step \'call SaveImage(Update,Existing,Length255,Length50,True,Length255," +
                    "Length255,Existing,Existing,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty," +
                    "Empty,Empty,Empty,CorrectHeader)\'");
            temp122 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Update, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp122 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S245)", TestManagerHelpers.Describe(temp122)));
            this.Manager.Comment("reaching state \'S1216\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S246
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S246() {
            this.Manager.BeginTest("FullTestSuitePart2S246");
            this.Manager.Comment("reaching state \'S246\'");
            string temp123;
            this.Manager.Comment("executing step \'call SaveImage(Add,Existing,Length255,Length50,True,Length255,Len" +
                    "gth255,Existing,Existing,Today,Future,Existing,Empty,Empty,Empty,Empty,Empty,Emp" +
                    "ty,Empty,Empty,CorrectHeader)\'");
            temp123 = this.ICatalogWebServiceAdapterInstance.SaveImage(InputTypes.InsertChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, true, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.DateTimeType.Today, InputTypes.DateTimeType.Future, InputTypes.RelatedItemIdType.Existing, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S247\'");
            this.Manager.Comment("checking step \'return SaveImage/\"NoError\"\'");
            this.Manager.Assert((temp123 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveImage, state S247)", TestManagerHelpers.Describe(temp123)));
            this.Manager.Comment("reaching state \'S1217\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S248
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S248() {
            this.Manager.BeginTest("FullTestSuitePart2S248");
            this.Manager.Comment("reaching state \'S248\'");
            string temp124;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Valid,Empty)\'");
            temp124 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S249\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp124 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S249)", TestManagerHelpers.Describe(temp124)));
            this.Manager.Comment("reaching state \'S1218\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S250
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S250() {
            this.Manager.BeginTest("FullTestSuitePart2S250");
            this.Manager.Comment("reaching state \'S250\'");
            string temp125;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Inva" +
                    "lid,Empty)\'");
            temp125 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Invalid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S251\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp125 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S251)", TestManagerHelpers.Describe(temp125)));
            this.Manager.Comment("reaching state \'S1219\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S252
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S252() {
            this.Manager.BeginTest("FullTestSuitePart2S252");
            this.Manager.Comment("reaching state \'S252\'");
            string temp126;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,Existing,Existing,Length50" +
                    ",Invalid,Empty)\'");
            temp126 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Invalid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S253\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp126 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S253)", TestManagerHelpers.Describe(temp126)));
            this.Manager.Comment("reaching state \'S1220\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S254
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S254() {
            this.Manager.BeginTest("FullTestSuitePart2S254");
            this.Manager.Comment("reaching state \'S254\'");
            string temp127;
            this.Manager.Comment("executing step \'call SaveLicenseType(CorrectHeader,Add,New,Existing,Length50,Vali" +
                    "d,Empty)\'");
            temp127 = this.ICatalogWebServiceAdapterInstance.SaveLicenseType(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.XmlType.Valid, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S255\'");
            this.Manager.Comment("checking step \'return SaveLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp127 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveLicenseType, state S255)", TestManagerHelpers.Describe(temp127)));
            this.Manager.Comment("reaching state \'S1221\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S256
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S256() {
            this.Manager.BeginTest("FullTestSuitePart2S256");
            this.Manager.Comment("reaching state \'S256\'");
            string temp128;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Past,Empty)\'");
            temp128 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Past, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S257\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp128 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S257)", TestManagerHelpers.Describe(temp128)));
            this.Manager.Comment("reaching state \'S1222\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S258
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S258() {
            this.Manager.BeginTest("FullTestSuitePart2S258");
            this.Manager.Comment("reaching state \'S258\'");
            string temp129;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Past,Empty)\'");
            temp129 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Past, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp129 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S259)", TestManagerHelpers.Describe(temp129)));
            this.Manager.Comment("reaching state \'S1223\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S260
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S260() {
            this.Manager.BeginTest("FullTestSuitePart2S260");
            this.Manager.Comment("reaching state \'S260\'");
            string temp130;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Today,Empty)\'");
            temp130 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp130 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S261)", TestManagerHelpers.Describe(temp130)));
            this.Manager.Comment("reaching state \'S1224\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S262
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S262() {
            this.Manager.BeginTest("FullTestSuitePart2S262");
            this.Manager.Comment("reaching state \'S262\'");
            string temp131;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Future,Empty)\'");
            temp131 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Future, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp131 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S263)", TestManagerHelpers.Describe(temp131)));
            this.Manager.Comment("reaching state \'S1225\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S264
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S264() {
            this.Manager.BeginTest("FullTestSuitePart2S264");
            this.Manager.Comment("reaching state \'S264\'");
            string temp132;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,Existing,Existing,Existing" +
                    ",Existing,Existing,Length50,Existing,Existing,Existing,Max,Empty)\'");
            temp132 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Max, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp132 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S265)", TestManagerHelpers.Describe(temp132)));
            this.Manager.Comment("reaching state \'S1226\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S266
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S266() {
            this.Manager.BeginTest("FullTestSuitePart2S266");
            this.Manager.Comment("reaching state \'S266\'");
            string temp133;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Future,Empty)\'");
            temp133 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Future, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp133 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S267)", TestManagerHelpers.Describe(temp133)));
            this.Manager.Comment("reaching state \'S1227\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S268
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S268() {
            this.Manager.BeginTest("FullTestSuitePart2S268");
            this.Manager.Comment("reaching state \'S268\'");
            string temp134;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Max,Empty)\'");
            temp134 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Max, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp134 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S269)", TestManagerHelpers.Describe(temp134)));
            this.Manager.Comment("reaching state \'S1228\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S270
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S270() {
            this.Manager.BeginTest("FullTestSuitePart2S270");
            this.Manager.Comment("reaching state \'S270\'");
            string temp135;
            this.Manager.Comment("executing step \'call SavePricingRule(CorrectHeader,Add,New,Existing,Existing,Exis" +
                    "ting,Existing,Length50,Existing,Existing,Existing,Today,Empty)\'");
            temp135 = this.ICatalogWebServiceAdapterInstance.SavePricingRule(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.RelatedItemIdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.RelatedItemIdType.Existing, InputTypes.DecimalType.Existing, InputTypes.DecimalType.Existing, InputTypes.DateTimeType.Today, InputTypes.ArrayType.Empty);
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return SavePricingRule/\"NoError\"\'");
            this.Manager.Assert((temp135 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SavePricingRule, state S271)", TestManagerHelpers.Describe(temp135)));
            this.Manager.Comment("reaching state \'S1229\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S272
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S272() {
            this.Manager.BeginTest("FullTestSuitePart2S272");
            this.Manager.Comment("reaching state \'S272\'");
            string temp136;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,Existing,Length50,CorrectHeader)\'");
            temp136 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp136 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S273)", TestManagerHelpers.Describe(temp136)));
            this.Manager.Comment("reaching state \'S1230\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S274
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S274() {
            this.Manager.BeginTest("FullTestSuitePart2S274");
            this.Manager.Comment("reaching state \'S274\'");
            string temp137;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Add,New,Length50,CorrectHeader)\'");
            temp137 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S275\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp137 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S275)", TestManagerHelpers.Describe(temp137)));
            this.Manager.Comment("reaching state \'S1231\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S276
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S276() {
            this.Manager.BeginTest("FullTestSuitePart2S276");
            this.Manager.Comment("reaching state \'S276\'");
            string temp138;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,Existing,Length50,CorrectHeader)\'");
            temp138 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.Existing, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S277\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp138 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S277)", TestManagerHelpers.Describe(temp138)));
            this.Manager.Comment("reaching state \'S1232\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S278
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S278() {
            this.Manager.BeginTest("FullTestSuitePart2S278");
            this.Manager.Comment("reaching state \'S278\'");
            string temp139;
            this.Manager.Comment("executing step \'call SaveVideoEncoding(Delete,New,Length50,CorrectHeader)\'");
            temp139 = this.ICatalogWebServiceAdapterInstance.SaveVideoEncoding(InputTypes.ChangeType.Delete, InputTypes.IdType.New, InputTypes.ShortStringType.Length50, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S279\'");
            this.Manager.Comment("checking step \'return SaveVideoEncoding/\"NoError\"\'");
            this.Manager.Assert((temp139 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveVideoEncoding, state S279)", TestManagerHelpers.Describe(temp139)));
            this.Manager.Comment("reaching state \'S1233\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S280
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S280() {
            this.Manager.BeginTest("FullTestSuitePart2S280");
            this.Manager.Comment("reaching state \'S280\'");
            string temp140;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,True,True,True)\'");
            temp140 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S281\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp140 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S281)", TestManagerHelpers.Describe(temp140)));
            this.Manager.Comment("reaching state \'S1234\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S282
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S282() {
            this.Manager.BeginTest("FullTestSuitePart2S282");
            this.Manager.Comment("reaching state \'S282\'");
            string temp141;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,True,True,True)\'");
            temp141 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S283\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp141 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S283)", TestManagerHelpers.Describe(temp141)));
            this.Manager.Comment("reaching state \'S1235\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S284
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S284() {
            this.Manager.BeginTest("FullTestSuitePart2S284");
            this.Manager.Comment("reaching state \'S284\'");
            string temp142;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,False,False,True)\'");
            temp142 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S285\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp142 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S285)", TestManagerHelpers.Describe(temp142)));
            this.Manager.Comment("reaching state \'S1236\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S286
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S286() {
            this.Manager.BeginTest("FullTestSuitePart2S286");
            this.Manager.Comment("reaching state \'S286\'");
            string temp143;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,False)\'");
            temp143 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S287\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp143 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S287)", TestManagerHelpers.Describe(temp143)));
            this.Manager.Comment("reaching state \'S1237\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S288
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S288() {
            this.Manager.BeginTest("FullTestSuitePart2S288");
            this.Manager.Comment("reaching state \'S288\'");
            string temp144;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,False,False,False)\'");
            temp144 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S289\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp144 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S289)", TestManagerHelpers.Describe(temp144)));
            this.Manager.Comment("reaching state \'S1238\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S290
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S290() {
            this.Manager.BeginTest("FullTestSuitePart2S290");
            this.Manager.Comment("reaching state \'S290\'");
            string temp145;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,False,False,False)\'");
            temp145 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S291\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp145 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S291)", TestManagerHelpers.Describe(temp145)));
            this.Manager.Comment("reaching state \'S1239\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S292
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S292() {
            this.Manager.BeginTest("FullTestSuitePart2S292");
            this.Manager.Comment("reaching state \'S292\'");
            string temp146;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,True,False,False)\'");
            temp146 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S293\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp146 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S293)", TestManagerHelpers.Describe(temp146)));
            this.Manager.Comment("reaching state \'S1240\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S294
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S294() {
            this.Manager.BeginTest("FullTestSuitePart2S294");
            this.Manager.Comment("reaching state \'S294\'");
            string temp147;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,True,False,False)\'");
            temp147 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S295\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp147 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S295)", TestManagerHelpers.Describe(temp147)));
            this.Manager.Comment("reaching state \'S1241\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S296
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S296() {
            this.Manager.BeginTest("FullTestSuitePart2S296");
            this.Manager.Comment("reaching state \'S296\'");
            string temp148;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,True,False,False)\'");
            temp148 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S297\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp148 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S297)", TestManagerHelpers.Describe(temp148)));
            this.Manager.Comment("reaching state \'S1242\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S298
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S298() {
            this.Manager.BeginTest("FullTestSuitePart2S298");
            this.Manager.Comment("reaching state \'S298\'");
            string temp149;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,False,False,False)\'");
            temp149 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S299\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp149 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S299)", TestManagerHelpers.Describe(temp149)));
            this.Manager.Comment("reaching state \'S1243\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S300
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S300() {
            this.Manager.BeginTest("FullTestSuitePart2S300");
            this.Manager.Comment("reaching state \'S300\'");
            string temp150;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,False,False,False)\'");
            temp150 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S301\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp150 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S301)", TestManagerHelpers.Describe(temp150)));
            this.Manager.Comment("reaching state \'S1244\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S302
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S302() {
            this.Manager.BeginTest("FullTestSuitePart2S302");
            this.Manager.Comment("reaching state \'S302\'");
            string temp151;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,True,False,False)\'");
            temp151 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S303\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp151 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S303)", TestManagerHelpers.Describe(temp151)));
            this.Manager.Comment("reaching state \'S1245\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S304
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S304() {
            this.Manager.BeginTest("FullTestSuitePart2S304");
            this.Manager.Comment("reaching state \'S304\'");
            string temp152;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,True,True,False)\'");
            temp152 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S305\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp152 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S305)", TestManagerHelpers.Describe(temp152)));
            this.Manager.Comment("reaching state \'S1246\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S306
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S306() {
            this.Manager.BeginTest("FullTestSuitePart2S306");
            this.Manager.Comment("reaching state \'S306\'");
            string temp153;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,False,False,True)\'");
            temp153 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S307\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp153 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S307)", TestManagerHelpers.Describe(temp153)));
            this.Manager.Comment("reaching state \'S1247\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S308
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S308() {
            this.Manager.BeginTest("FullTestSuitePart2S308");
            this.Manager.Comment("reaching state \'S308\'");
            string temp154;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,True,False,False)\'");
            temp154 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S309\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp154 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S309)", TestManagerHelpers.Describe(temp154)));
            this.Manager.Comment("reaching state \'S1248\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S310
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S310() {
            this.Manager.BeginTest("FullTestSuitePart2S310");
            this.Manager.Comment("reaching state \'S310\'");
            string temp155;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,False,False,False)\'");
            temp155 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S311\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp155 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S311)", TestManagerHelpers.Describe(temp155)));
            this.Manager.Comment("reaching state \'S1249\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S312
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S312() {
            this.Manager.BeginTest("FullTestSuitePart2S312");
            this.Manager.Comment("reaching state \'S312\'");
            string temp156;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,False,False,True)\'");
            temp156 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S313\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp156 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S313)", TestManagerHelpers.Describe(temp156)));
            this.Manager.Comment("reaching state \'S1250\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S314
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S314() {
            this.Manager.BeginTest("FullTestSuitePart2S314");
            this.Manager.Comment("reaching state \'S314\'");
            string temp157;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,True,False,True)\'");
            temp157 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S315\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp157 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S315)", TestManagerHelpers.Describe(temp157)));
            this.Manager.Comment("reaching state \'S1251\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S316
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S316() {
            this.Manager.BeginTest("FullTestSuitePart2S316");
            this.Manager.Comment("reaching state \'S316\'");
            string temp158;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,True,True,True)\'");
            temp158 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S317\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp158 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S317)", TestManagerHelpers.Describe(temp158)));
            this.Manager.Comment("reaching state \'S1252\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S318
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S318() {
            this.Manager.BeginTest("FullTestSuitePart2S318");
            this.Manager.Comment("reaching state \'S318\'");
            string temp159;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,False,False,False)\'");
            temp159 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S319\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp159 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S319)", TestManagerHelpers.Describe(temp159)));
            this.Manager.Comment("reaching state \'S1253\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S320
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S320() {
            this.Manager.BeginTest("FullTestSuitePart2S320");
            this.Manager.Comment("reaching state \'S320\'");
            string temp160;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,False,False,False)\'");
            temp160 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S321\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp160 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S321)", TestManagerHelpers.Describe(temp160)));
            this.Manager.Comment("reaching state \'S1254\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S322
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S322() {
            this.Manager.BeginTest("FullTestSuitePart2S322");
            this.Manager.Comment("reaching state \'S322\'");
            string temp161;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,True,False,True)\'");
            temp161 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S323\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp161 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S323)", TestManagerHelpers.Describe(temp161)));
            this.Manager.Comment("reaching state \'S1255\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S324
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S324() {
            this.Manager.BeginTest("FullTestSuitePart2S324");
            this.Manager.Comment("reaching state \'S324\'");
            string temp162;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,True,True,True)\'");
            temp162 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S325\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp162 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S325)", TestManagerHelpers.Describe(temp162)));
            this.Manager.Comment("reaching state \'S1256\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S326
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S326() {
            this.Manager.BeginTest("FullTestSuitePart2S326");
            this.Manager.Comment("reaching state \'S326\'");
            string temp163;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,True)\'");
            temp163 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S327\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp163 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S327)", TestManagerHelpers.Describe(temp163)));
            this.Manager.Comment("reaching state \'S1257\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S328
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S328() {
            this.Manager.BeginTest("FullTestSuitePart2S328");
            this.Manager.Comment("reaching state \'S328\'");
            string temp164;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,False,False,False)\'");
            temp164 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S329\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp164 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S329)", TestManagerHelpers.Describe(temp164)));
            this.Manager.Comment("reaching state \'S1258\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S330
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S330() {
            this.Manager.BeginTest("FullTestSuitePart2S330");
            this.Manager.Comment("reaching state \'S330\'");
            string temp165;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,False)\'");
            temp165 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S331\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp165 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S331)", TestManagerHelpers.Describe(temp165)));
            this.Manager.Comment("reaching state \'S1259\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S332
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S332() {
            this.Manager.BeginTest("FullTestSuitePart2S332");
            this.Manager.Comment("reaching state \'S332\'");
            string temp166;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,False)\'");
            temp166 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S333\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp166 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S333)", TestManagerHelpers.Describe(temp166)));
            this.Manager.Comment("reaching state \'S1260\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S334
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S334() {
            this.Manager.BeginTest("FullTestSuitePart2S334");
            this.Manager.Comment("reaching state \'S334\'");
            string temp167;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,True,False,False)\'");
            temp167 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S335\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp167 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S335)", TestManagerHelpers.Describe(temp167)));
            this.Manager.Comment("reaching state \'S1261\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S336
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S336() {
            this.Manager.BeginTest("FullTestSuitePart2S336");
            this.Manager.Comment("reaching state \'S336\'");
            string temp168;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,True,True,True)\'");
            temp168 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S337\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp168 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S337)", TestManagerHelpers.Describe(temp168)));
            this.Manager.Comment("reaching state \'S1262\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S338
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S338() {
            this.Manager.BeginTest("FullTestSuitePart2S338");
            this.Manager.Comment("reaching state \'S338\'");
            string temp169;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,True,True,True)\'");
            temp169 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S339\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp169 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S339)", TestManagerHelpers.Describe(temp169)));
            this.Manager.Comment("reaching state \'S1263\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S340
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S340() {
            this.Manager.BeginTest("FullTestSuitePart2S340");
            this.Manager.Comment("reaching state \'S340\'");
            string temp170;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,False)\'");
            temp170 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S341\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp170 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S341)", TestManagerHelpers.Describe(temp170)));
            this.Manager.Comment("reaching state \'S1264\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S342
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S342() {
            this.Manager.BeginTest("FullTestSuitePart2S342");
            this.Manager.Comment("reaching state \'S342\'");
            string temp171;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,False,True)\'");
            temp171 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S343\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp171 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S343)", TestManagerHelpers.Describe(temp171)));
            this.Manager.Comment("reaching state \'S1265\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S344
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S344() {
            this.Manager.BeginTest("FullTestSuitePart2S344");
            this.Manager.Comment("reaching state \'S344\'");
            string temp172;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,False,True)\'");
            temp172 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S345\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp172 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S345)", TestManagerHelpers.Describe(temp172)));
            this.Manager.Comment("reaching state \'S1266\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S346
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S346() {
            this.Manager.BeginTest("FullTestSuitePart2S346");
            this.Manager.Comment("reaching state \'S346\'");
            string temp173;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,True,False,True)\'");
            temp173 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S347\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp173 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S347)", TestManagerHelpers.Describe(temp173)));
            this.Manager.Comment("reaching state \'S1267\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S348
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S348() {
            this.Manager.BeginTest("FullTestSuitePart2S348");
            this.Manager.Comment("reaching state \'S348\'");
            string temp174;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,False,False,False)\'");
            temp174 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, false, false);
            this.Manager.Comment("reaching state \'S349\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp174 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S349)", TestManagerHelpers.Describe(temp174)));
            this.Manager.Comment("reaching state \'S1268\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S350
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S350() {
            this.Manager.BeginTest("FullTestSuitePart2S350");
            this.Manager.Comment("reaching state \'S350\'");
            string temp175;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,True,False,False)\'");
            temp175 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S351\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp175 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S351)", TestManagerHelpers.Describe(temp175)));
            this.Manager.Comment("reaching state \'S1269\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S352
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S352() {
            this.Manager.BeginTest("FullTestSuitePart2S352");
            this.Manager.Comment("reaching state \'S352\'");
            string temp176;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,True,False,False)\'");
            temp176 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S353\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp176 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S353)", TestManagerHelpers.Describe(temp176)));
            this.Manager.Comment("reaching state \'S1270\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S354
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S354() {
            this.Manager.BeginTest("FullTestSuitePart2S354");
            this.Manager.Comment("reaching state \'S354\'");
            string temp177;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,True,True,False)\'");
            temp177 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S355\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp177 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S355)", TestManagerHelpers.Describe(temp177)));
            this.Manager.Comment("reaching state \'S1271\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S356
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S356() {
            this.Manager.BeginTest("FullTestSuitePart2S356");
            this.Manager.Comment("reaching state \'S356\'");
            string temp178;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,True,False,False)\'");
            temp178 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S357\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp178 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S357)", TestManagerHelpers.Describe(temp178)));
            this.Manager.Comment("reaching state \'S1272\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S358
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S358() {
            this.Manager.BeginTest("FullTestSuitePart2S358");
            this.Manager.Comment("reaching state \'S358\'");
            string temp179;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,True,False,False)\'");
            temp179 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S359\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp179 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S359)", TestManagerHelpers.Describe(temp179)));
            this.Manager.Comment("reaching state \'S1273\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S360
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S360() {
            this.Manager.BeginTest("FullTestSuitePart2S360");
            this.Manager.Comment("reaching state \'S360\'");
            string temp180;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,True,False,True)\'");
            temp180 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S361\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp180 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S361)", TestManagerHelpers.Describe(temp180)));
            this.Manager.Comment("reaching state \'S1274\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S362
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S362() {
            this.Manager.BeginTest("FullTestSuitePart2S362");
            this.Manager.Comment("reaching state \'S362\'");
            string temp181;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,True,True,False)\'");
            temp181 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S363\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp181 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S363)", TestManagerHelpers.Describe(temp181)));
            this.Manager.Comment("reaching state \'S1275\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S364
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S364() {
            this.Manager.BeginTest("FullTestSuitePart2S364");
            this.Manager.Comment("reaching state \'S364\'");
            string temp182;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,True,False,True)\'");
            temp182 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S365\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp182 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S365)", TestManagerHelpers.Describe(temp182)));
            this.Manager.Comment("reaching state \'S1276\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S366
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S366() {
            this.Manager.BeginTest("FullTestSuitePart2S366");
            this.Manager.Comment("reaching state \'S366\'");
            string temp183;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,True,True,True)\'");
            temp183 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S367\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp183 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S367)", TestManagerHelpers.Describe(temp183)));
            this.Manager.Comment("reaching state \'S1277\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S368
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S368() {
            this.Manager.BeginTest("FullTestSuitePart2S368");
            this.Manager.Comment("reaching state \'S368\'");
            string temp184;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,True,False,True)\'");
            temp184 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S369\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp184 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S369)", TestManagerHelpers.Describe(temp184)));
            this.Manager.Comment("reaching state \'S1278\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S370
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S370() {
            this.Manager.BeginTest("FullTestSuitePart2S370");
            this.Manager.Comment("reaching state \'S370\'");
            string temp185;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,True,False,True)\'");
            temp185 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S371\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp185 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S371)", TestManagerHelpers.Describe(temp185)));
            this.Manager.Comment("reaching state \'S1279\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S372
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S372() {
            this.Manager.BeginTest("FullTestSuitePart2S372");
            this.Manager.Comment("reaching state \'S372\'");
            string temp186;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,False,True,False)\'");
            temp186 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S373\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp186 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S373)", TestManagerHelpers.Describe(temp186)));
            this.Manager.Comment("reaching state \'S1280\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S374
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S374() {
            this.Manager.BeginTest("FullTestSuitePart2S374");
            this.Manager.Comment("reaching state \'S374\'");
            string temp187;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,False,True,False)\'");
            temp187 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S375\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp187 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S375)", TestManagerHelpers.Describe(temp187)));
            this.Manager.Comment("reaching state \'S1281\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S376
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S376() {
            this.Manager.BeginTest("FullTestSuitePart2S376");
            this.Manager.Comment("reaching state \'S376\'");
            string temp188;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,True,True,False)\'");
            temp188 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S377\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp188 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S377)", TestManagerHelpers.Describe(temp188)));
            this.Manager.Comment("reaching state \'S1282\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S378
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S378() {
            this.Manager.BeginTest("FullTestSuitePart2S378");
            this.Manager.Comment("reaching state \'S378\'");
            string temp189;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,True,True,False)\'");
            temp189 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S379\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp189 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S379)", TestManagerHelpers.Describe(temp189)));
            this.Manager.Comment("reaching state \'S1283\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S380
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S380() {
            this.Manager.BeginTest("FullTestSuitePart2S380");
            this.Manager.Comment("reaching state \'S380\'");
            string temp190;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,True,True,True)\'");
            temp190 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S381\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp190 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S381)", TestManagerHelpers.Describe(temp190)));
            this.Manager.Comment("reaching state \'S1284\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S382
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S382() {
            this.Manager.BeginTest("FullTestSuitePart2S382");
            this.Manager.Comment("reaching state \'S382\'");
            string temp191;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,True,False,True)\'");
            temp191 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S383\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp191 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S383)", TestManagerHelpers.Describe(temp191)));
            this.Manager.Comment("reaching state \'S1285\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S384
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S384() {
            this.Manager.BeginTest("FullTestSuitePart2S384");
            this.Manager.Comment("reaching state \'S384\'");
            string temp192;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,True,True,True)\'");
            temp192 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S385\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp192 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S385)", TestManagerHelpers.Describe(temp192)));
            this.Manager.Comment("reaching state \'S1286\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S386
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S386() {
            this.Manager.BeginTest("FullTestSuitePart2S386");
            this.Manager.Comment("reaching state \'S386\'");
            string temp193;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,False,True,False)\'");
            temp193 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S387\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp193 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S387)", TestManagerHelpers.Describe(temp193)));
            this.Manager.Comment("reaching state \'S1287\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S388
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S388() {
            this.Manager.BeginTest("FullTestSuitePart2S388");
            this.Manager.Comment("reaching state \'S388\'");
            string temp194;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,False)\'");
            temp194 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S389\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp194 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S389)", TestManagerHelpers.Describe(temp194)));
            this.Manager.Comment("reaching state \'S1288\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S390
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S390() {
            this.Manager.BeginTest("FullTestSuitePart2S390");
            this.Manager.Comment("reaching state \'S390\'");
            string temp195;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,False,True,False)\'");
            temp195 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S391\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp195 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S391)", TestManagerHelpers.Describe(temp195)));
            this.Manager.Comment("reaching state \'S1289\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S392
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S392() {
            this.Manager.BeginTest("FullTestSuitePart2S392");
            this.Manager.Comment("reaching state \'S392\'");
            string temp196;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,True,True,False)\'");
            temp196 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S393\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp196 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S393)", TestManagerHelpers.Describe(temp196)));
            this.Manager.Comment("reaching state \'S1290\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S394
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S394() {
            this.Manager.BeginTest("FullTestSuitePart2S394");
            this.Manager.Comment("reaching state \'S394\'");
            string temp197;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,False)\'");
            temp197 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S395\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp197 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S395)", TestManagerHelpers.Describe(temp197)));
            this.Manager.Comment("reaching state \'S1291\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S396
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S396() {
            this.Manager.BeginTest("FullTestSuitePart2S396");
            this.Manager.Comment("reaching state \'S396\'");
            string temp198;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,True,True,False)\'");
            temp198 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S397\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp198 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S397)", TestManagerHelpers.Describe(temp198)));
            this.Manager.Comment("reaching state \'S1292\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S398
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S398() {
            this.Manager.BeginTest("FullTestSuitePart2S398");
            this.Manager.Comment("reaching state \'S398\'");
            string temp199;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,True,True,False)\'");
            temp199 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S399\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp199 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S399)", TestManagerHelpers.Describe(temp199)));
            this.Manager.Comment("reaching state \'S1293\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S400
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S400() {
            this.Manager.BeginTest("FullTestSuitePart2S400");
            this.Manager.Comment("reaching state \'S400\'");
            string temp200;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,True,True,True)\'");
            temp200 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S401\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp200 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S401)", TestManagerHelpers.Describe(temp200)));
            this.Manager.Comment("reaching state \'S1294\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S402
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S402() {
            this.Manager.BeginTest("FullTestSuitePart2S402");
            this.Manager.Comment("reaching state \'S402\'");
            string temp201;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,False,False,True)\'");
            temp201 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S403\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp201 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S403)", TestManagerHelpers.Describe(temp201)));
            this.Manager.Comment("reaching state \'S1295\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S404
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S404() {
            this.Manager.BeginTest("FullTestSuitePart2S404");
            this.Manager.Comment("reaching state \'S404\'");
            string temp202;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,False,True,True)\'");
            temp202 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S405\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp202 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S405)", TestManagerHelpers.Describe(temp202)));
            this.Manager.Comment("reaching state \'S1296\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S406
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S406() {
            this.Manager.BeginTest("FullTestSuitePart2S406");
            this.Manager.Comment("reaching state \'S406\'");
            string temp203;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,False,True,True)\'");
            temp203 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S407\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp203 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S407)", TestManagerHelpers.Describe(temp203)));
            this.Manager.Comment("reaching state \'S1297\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S408
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S408() {
            this.Manager.BeginTest("FullTestSuitePart2S408");
            this.Manager.Comment("reaching state \'S408\'");
            string temp204;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,False,True,True)\'");
            temp204 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S409\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp204 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S409)", TestManagerHelpers.Describe(temp204)));
            this.Manager.Comment("reaching state \'S1298\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S410
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S410() {
            this.Manager.BeginTest("FullTestSuitePart2S410");
            this.Manager.Comment("reaching state \'S410\'");
            string temp205;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,False,True,True)\'");
            temp205 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S411\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp205 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S411)", TestManagerHelpers.Describe(temp205)));
            this.Manager.Comment("reaching state \'S1299\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S412
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S412() {
            this.Manager.BeginTest("FullTestSuitePart2S412");
            this.Manager.Comment("reaching state \'S412\'");
            string temp206;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,True,False,True)\'");
            temp206 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S413\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp206 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S413)", TestManagerHelpers.Describe(temp206)));
            this.Manager.Comment("reaching state \'S1300\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S414
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S414() {
            this.Manager.BeginTest("FullTestSuitePart2S414");
            this.Manager.Comment("reaching state \'S414\'");
            string temp207;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,True,True,False)\'");
            temp207 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S415\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp207 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S415)", TestManagerHelpers.Describe(temp207)));
            this.Manager.Comment("reaching state \'S1301\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S416
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S416() {
            this.Manager.BeginTest("FullTestSuitePart2S416");
            this.Manager.Comment("reaching state \'S416\'");
            string temp208;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,False,False,False)\'");
            temp208 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S417\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp208 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S417)", TestManagerHelpers.Describe(temp208)));
            this.Manager.Comment("reaching state \'S1302\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S418
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S418() {
            this.Manager.BeginTest("FullTestSuitePart2S418");
            this.Manager.Comment("reaching state \'S418\'");
            string temp209;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,False,False,False)\'");
            temp209 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S419\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp209 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S419)", TestManagerHelpers.Describe(temp209)));
            this.Manager.Comment("reaching state \'S1303\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S420
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S420() {
            this.Manager.BeginTest("FullTestSuitePart2S420");
            this.Manager.Comment("reaching state \'S420\'");
            string temp210;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,False,False,True)\'");
            temp210 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S421\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp210 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S421)", TestManagerHelpers.Describe(temp210)));
            this.Manager.Comment("reaching state \'S1304\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S422
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S422() {
            this.Manager.BeginTest("FullTestSuitePart2S422");
            this.Manager.Comment("reaching state \'S422\'");
            string temp211;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,True,True,True)\'");
            temp211 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, true, true);
            this.Manager.Comment("reaching state \'S423\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp211 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S423)", TestManagerHelpers.Describe(temp211)));
            this.Manager.Comment("reaching state \'S1305\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S424
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S424() {
            this.Manager.BeginTest("FullTestSuitePart2S424");
            this.Manager.Comment("reaching state \'S424\'");
            string temp212;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,True,True,True)\'");
            temp212 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S425\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp212 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S425)", TestManagerHelpers.Describe(temp212)));
            this.Manager.Comment("reaching state \'S1306\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S426
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S426() {
            this.Manager.BeginTest("FullTestSuitePart2S426");
            this.Manager.Comment("reaching state \'S426\'");
            string temp213;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,True,True,True)\'");
            temp213 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S427\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp213 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S427)", TestManagerHelpers.Describe(temp213)));
            this.Manager.Comment("reaching state \'S1307\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S428
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S428() {
            this.Manager.BeginTest("FullTestSuitePart2S428");
            this.Manager.Comment("reaching state \'S428\'");
            string temp214;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,True,True,True)\'");
            temp214 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S429\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp214 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S429)", TestManagerHelpers.Describe(temp214)));
            this.Manager.Comment("reaching state \'S1308\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S430
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S430() {
            this.Manager.BeginTest("FullTestSuitePart2S430");
            this.Manager.Comment("reaching state \'S430\'");
            string temp215;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,False,False,False)\'");
            temp215 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S431\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp215 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S431)", TestManagerHelpers.Describe(temp215)));
            this.Manager.Comment("reaching state \'S1309\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S432
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S432() {
            this.Manager.BeginTest("FullTestSuitePart2S432");
            this.Manager.Comment("reaching state \'S432\'");
            string temp216;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,False,False,False)\'");
            temp216 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S433\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp216 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S433)", TestManagerHelpers.Describe(temp216)));
            this.Manager.Comment("reaching state \'S1310\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S434
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S434() {
            this.Manager.BeginTest("FullTestSuitePart2S434");
            this.Manager.Comment("reaching state \'S434\'");
            string temp217;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,False,False,True)\'");
            temp217 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S435\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp217 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S435)", TestManagerHelpers.Describe(temp217)));
            this.Manager.Comment("reaching state \'S1311\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S436
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S436() {
            this.Manager.BeginTest("FullTestSuitePart2S436");
            this.Manager.Comment("reaching state \'S436\'");
            string temp218;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,False,False,True)\'");
            temp218 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S437\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp218 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S437)", TestManagerHelpers.Describe(temp218)));
            this.Manager.Comment("reaching state \'S1312\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S438
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S438() {
            this.Manager.BeginTest("FullTestSuitePart2S438");
            this.Manager.Comment("reaching state \'S438\'");
            string temp219;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,True,False,True)\'");
            temp219 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S439\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp219 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S439)", TestManagerHelpers.Describe(temp219)));
            this.Manager.Comment("reaching state \'S1313\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S440
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S440() {
            this.Manager.BeginTest("FullTestSuitePart2S440");
            this.Manager.Comment("reaching state \'S440\'");
            string temp220;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,True,False,True)\'");
            temp220 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S441\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp220 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S441)", TestManagerHelpers.Describe(temp220)));
            this.Manager.Comment("reaching state \'S1314\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S442
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S442() {
            this.Manager.BeginTest("FullTestSuitePart2S442");
            this.Manager.Comment("reaching state \'S442\'");
            string temp221;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,False,False,True)\'");
            temp221 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S443\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp221 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S443)", TestManagerHelpers.Describe(temp221)));
            this.Manager.Comment("reaching state \'S1315\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S444
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S444() {
            this.Manager.BeginTest("FullTestSuitePart2S444");
            this.Manager.Comment("reaching state \'S444\'");
            string temp222;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,False,True,True)\'");
            temp222 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S445\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp222 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S445)", TestManagerHelpers.Describe(temp222)));
            this.Manager.Comment("reaching state \'S1316\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S446
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S446() {
            this.Manager.BeginTest("FullTestSuitePart2S446");
            this.Manager.Comment("reaching state \'S446\'");
            string temp223;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,True,True,False)\'");
            temp223 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S447\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp223 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S447)", TestManagerHelpers.Describe(temp223)));
            this.Manager.Comment("reaching state \'S1317\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S448
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S448() {
            this.Manager.BeginTest("FullTestSuitePart2S448");
            this.Manager.Comment("reaching state \'S448\'");
            string temp224;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,True,False,False)\'");
            temp224 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S449\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp224 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S449)", TestManagerHelpers.Describe(temp224)));
            this.Manager.Comment("reaching state \'S1318\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S450
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S450() {
            this.Manager.BeginTest("FullTestSuitePart2S450");
            this.Manager.Comment("reaching state \'S450\'");
            string temp225;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,False,True,True)\'");
            temp225 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S451\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp225 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S451)", TestManagerHelpers.Describe(temp225)));
            this.Manager.Comment("reaching state \'S1319\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S452
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S452() {
            this.Manager.BeginTest("FullTestSuitePart2S452");
            this.Manager.Comment("reaching state \'S452\'");
            string temp226;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,False,True,True)\'");
            temp226 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S453\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp226 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S453)", TestManagerHelpers.Describe(temp226)));
            this.Manager.Comment("reaching state \'S1320\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S454
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S454() {
            this.Manager.BeginTest("FullTestSuitePart2S454");
            this.Manager.Comment("reaching state \'S454\'");
            string temp227;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,True,False,False)\'");
            temp227 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S455\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp227 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S455)", TestManagerHelpers.Describe(temp227)));
            this.Manager.Comment("reaching state \'S1321\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S456
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S456() {
            this.Manager.BeginTest("FullTestSuitePart2S456");
            this.Manager.Comment("reaching state \'S456\'");
            string temp228;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,True,True,False)\'");
            temp228 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S457\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp228 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S457)", TestManagerHelpers.Describe(temp228)));
            this.Manager.Comment("reaching state \'S1322\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S458
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S458() {
            this.Manager.BeginTest("FullTestSuitePart2S458");
            this.Manager.Comment("reaching state \'S458\'");
            string temp229;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,True,True,False)\'");
            temp229 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S459\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp229 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S459)", TestManagerHelpers.Describe(temp229)));
            this.Manager.Comment("reaching state \'S1323\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S460
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S460() {
            this.Manager.BeginTest("FullTestSuitePart2S460");
            this.Manager.Comment("reaching state \'S460\'");
            string temp230;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,False,True,True)\'");
            temp230 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S461\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp230 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S461)", TestManagerHelpers.Describe(temp230)));
            this.Manager.Comment("reaching state \'S1324\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S462
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S462() {
            this.Manager.BeginTest("FullTestSuitePart2S462");
            this.Manager.Comment("reaching state \'S462\'");
            string temp231;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,True,True,False)\'");
            temp231 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S463\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp231 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S463)", TestManagerHelpers.Describe(temp231)));
            this.Manager.Comment("reaching state \'S1325\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S464
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S464() {
            this.Manager.BeginTest("FullTestSuitePart2S464");
            this.Manager.Comment("reaching state \'S464\'");
            string temp232;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,True,True,False)\'");
            temp232 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S465\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp232 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S465)", TestManagerHelpers.Describe(temp232)));
            this.Manager.Comment("reaching state \'S1326\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S466
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S466() {
            this.Manager.BeginTest("FullTestSuitePart2S466");
            this.Manager.Comment("reaching state \'S466\'");
            string temp233;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,True,True,False)\'");
            temp233 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, false);
            this.Manager.Comment("reaching state \'S467\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp233 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S467)", TestManagerHelpers.Describe(temp233)));
            this.Manager.Comment("reaching state \'S1327\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S468
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S468() {
            this.Manager.BeginTest("FullTestSuitePart2S468");
            this.Manager.Comment("reaching state \'S468\'");
            string temp234;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,False,False,True)\'");
            temp234 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S469\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp234 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S469)", TestManagerHelpers.Describe(temp234)));
            this.Manager.Comment("reaching state \'S1328\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S470
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S470() {
            this.Manager.BeginTest("FullTestSuitePart2S470");
            this.Manager.Comment("reaching state \'S470\'");
            string temp235;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,True,False,False)\'");
            temp235 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, false, false);
            this.Manager.Comment("reaching state \'S471\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp235 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S471)", TestManagerHelpers.Describe(temp235)));
            this.Manager.Comment("reaching state \'S1329\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S472
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S472() {
            this.Manager.BeginTest("FullTestSuitePart2S472");
            this.Manager.Comment("reaching state \'S472\'");
            string temp236;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,False,True,False)\'");
            temp236 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S473\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp236 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S473)", TestManagerHelpers.Describe(temp236)));
            this.Manager.Comment("reaching state \'S1330\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S474
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S474() {
            this.Manager.BeginTest("FullTestSuitePart2S474");
            this.Manager.Comment("reaching state \'S474\'");
            string temp237;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,False,True,False)\'");
            temp237 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S475\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp237 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S475)", TestManagerHelpers.Describe(temp237)));
            this.Manager.Comment("reaching state \'S1331\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S476
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S476() {
            this.Manager.BeginTest("FullTestSuitePart2S476");
            this.Manager.Comment("reaching state \'S476\'");
            string temp238;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,False,True,False)\'");
            temp238 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S477\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp238 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S477)", TestManagerHelpers.Describe(temp238)));
            this.Manager.Comment("reaching state \'S1332\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S478
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S478() {
            this.Manager.BeginTest("FullTestSuitePart2S478");
            this.Manager.Comment("reaching state \'S478\'");
            string temp239;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,True)\'");
            temp239 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S479\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp239 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S479)", TestManagerHelpers.Describe(temp239)));
            this.Manager.Comment("reaching state \'S1333\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S480
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S480() {
            this.Manager.BeginTest("FullTestSuitePart2S480");
            this.Manager.Comment("reaching state \'S480\'");
            string temp240;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,False,False,False)\'");
            temp240 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S481\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp240 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S481)", TestManagerHelpers.Describe(temp240)));
            this.Manager.Comment("reaching state \'S1334\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S482
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S482() {
            this.Manager.BeginTest("FullTestSuitePart2S482");
            this.Manager.Comment("reaching state \'S482\'");
            string temp241;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,False,False,True)\'");
            temp241 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S483\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp241 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S483)", TestManagerHelpers.Describe(temp241)));
            this.Manager.Comment("reaching state \'S1335\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S484
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S484() {
            this.Manager.BeginTest("FullTestSuitePart2S484");
            this.Manager.Comment("reaching state \'S484\'");
            string temp242;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Em" +
                    "pty,True,True,False)\'");
            temp242 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, true, false);
            this.Manager.Comment("reaching state \'S485\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp242 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S485)", TestManagerHelpers.Describe(temp242)));
            this.Manager.Comment("reaching state \'S1336\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S486
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S486() {
            this.Manager.BeginTest("FullTestSuitePart2S486");
            this.Manager.Comment("reaching state \'S486\'");
            string temp243;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,False,False,True)\'");
            temp243 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S487\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp243 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S487)", TestManagerHelpers.Describe(temp243)));
            this.Manager.Comment("reaching state \'S1337\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S488
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S488() {
            this.Manager.BeginTest("FullTestSuitePart2S488");
            this.Manager.Comment("reaching state \'S488\'");
            string temp244;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Null,False,True,True)\'");
            temp244 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S489\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp244 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S489)", TestManagerHelpers.Describe(temp244)));
            this.Manager.Comment("reaching state \'S1338\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S490
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S490() {
            this.Manager.BeginTest("FullTestSuitePart2S490");
            this.Manager.Comment("reaching state \'S490\'");
            string temp245;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,False,True,False)\'");
            temp245 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S491\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp245 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S491)", TestManagerHelpers.Describe(temp245)));
            this.Manager.Comment("reaching state \'S1339\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S492
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S492() {
            this.Manager.BeginTest("FullTestSuitePart2S492");
            this.Manager.Comment("reaching state \'S492\'");
            string temp246;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Length50,True,False,True)\'");
            temp246 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, true, false, true);
            this.Manager.Comment("reaching state \'S493\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp246 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S493)", TestManagerHelpers.Describe(temp246)));
            this.Manager.Comment("reaching state \'S1340\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S494
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S494() {
            this.Manager.BeginTest("FullTestSuitePart2S494");
            this.Manager.Comment("reaching state \'S494\'");
            string temp247;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,True,True,True)\'");
            temp247 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, true, true, true);
            this.Manager.Comment("reaching state \'S495\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp247 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S495)", TestManagerHelpers.Describe(temp247)));
            this.Manager.Comment("reaching state \'S1341\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S496
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S496() {
            this.Manager.BeginTest("FullTestSuitePart2S496");
            this.Manager.Comment("reaching state \'S496\'");
            string temp248;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,L" +
                    "ength50,False,True,False)\'");
            temp248 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S497\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp248 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S497)", TestManagerHelpers.Describe(temp248)));
            this.Manager.Comment("reaching state \'S1342\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S498
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S498() {
            this.Manager.BeginTest("FullTestSuitePart2S498");
            this.Manager.Comment("reaching state \'S498\'");
            string temp249;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,False,True,False)\'");
            temp249 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S499\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp249 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S499)", TestManagerHelpers.Describe(temp249)));
            this.Manager.Comment("reaching state \'S1343\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S500
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S500() {
            this.Manager.BeginTest("FullTestSuitePart2S500");
            this.Manager.Comment("reaching state \'S500\'");
            string temp250;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,True,False)\'");
            temp250 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S501\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp250 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S501)", TestManagerHelpers.Describe(temp250)));
            this.Manager.Comment("reaching state \'S1344\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S502
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S502() {
            this.Manager.BeginTest("FullTestSuitePart2S502");
            this.Manager.Comment("reaching state \'S502\'");
            string temp251;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,False,True,True)\'");
            temp251 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S503\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp251 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S503)", TestManagerHelpers.Describe(temp251)));
            this.Manager.Comment("reaching state \'S1345\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S504
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S504() {
            this.Manager.BeginTest("FullTestSuitePart2S504");
            this.Manager.Comment("reaching state \'S504\'");
            string temp252;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,True,True,False)\'");
            temp252 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, true, true, false);
            this.Manager.Comment("reaching state \'S505\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp252 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S505)", TestManagerHelpers.Describe(temp252)));
            this.Manager.Comment("reaching state \'S1346\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S506
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S506() {
            this.Manager.BeginTest("FullTestSuitePart2S506");
            this.Manager.Comment("reaching state \'S506\'");
            string temp253;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Length50,False,False,True)\'");
            temp253 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S507\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp253 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S507)", TestManagerHelpers.Describe(temp253)));
            this.Manager.Comment("reaching state \'S1347\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S508
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S508() {
            this.Manager.BeginTest("FullTestSuitePart2S508");
            this.Manager.Comment("reaching state \'S508\'");
            string temp254;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,False,True,False)\'");
            temp254 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S509\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp254 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S509)", TestManagerHelpers.Describe(temp254)));
            this.Manager.Comment("reaching state \'S1348\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S510
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S510() {
            this.Manager.BeginTest("FullTestSuitePart2S510");
            this.Manager.Comment("reaching state \'S510\'");
            string temp255;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,True,True)\'");
            temp255 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S511\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp255 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S511)", TestManagerHelpers.Describe(temp255)));
            this.Manager.Comment("reaching state \'S1349\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S512
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S512() {
            this.Manager.BeginTest("FullTestSuitePart2S512");
            this.Manager.Comment("reaching state \'S512\'");
            string temp256;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Length50,False,False,True)\'");
            temp256 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S513\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp256 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S513)", TestManagerHelpers.Describe(temp256)));
            this.Manager.Comment("reaching state \'S1350\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S514
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S514() {
            this.Manager.BeginTest("FullTestSuitePart2S514");
            this.Manager.Comment("reaching state \'S514\'");
            string temp257;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,False,False,True)\'");
            temp257 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, false, true);
            this.Manager.Comment("reaching state \'S515\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp257 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S515)", TestManagerHelpers.Describe(temp257)));
            this.Manager.Comment("reaching state \'S1351\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S516
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S516() {
            this.Manager.BeginTest("FullTestSuitePart2S516");
            this.Manager.Comment("reaching state \'S516\'");
            string temp258;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Null,False,False,False)\'");
            temp258 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, false, false);
            this.Manager.Comment("reaching state \'S517\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp258 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S517)", TestManagerHelpers.Describe(temp258)));
            this.Manager.Comment("reaching state \'S1352\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S518
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S518() {
            this.Manager.BeginTest("FullTestSuitePart2S518");
            this.Manager.Comment("reaching state \'S518\'");
            string temp259;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,N" +
                    "ull,False,True,False)\'");
            temp259 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S519\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp259 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S519)", TestManagerHelpers.Describe(temp259)));
            this.Manager.Comment("reaching state \'S1353\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S520
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S520() {
            this.Manager.BeginTest("FullTestSuitePart2S520");
            this.Manager.Comment("reaching state \'S520\'");
            string temp260;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,True,False,False)\'");
            temp260 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, true, false, false);
            this.Manager.Comment("reaching state \'S521\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp260 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S521)", TestManagerHelpers.Describe(temp260)));
            this.Manager.Comment("reaching state \'S1354\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S522
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S522() {
            this.Manager.BeginTest("FullTestSuitePart2S522");
            this.Manager.Comment("reaching state \'S522\'");
            string temp261;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Length50,False,True,True)\'");
            temp261 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, true, true);
            this.Manager.Comment("reaching state \'S523\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp261 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S523)", TestManagerHelpers.Describe(temp261)));
            this.Manager.Comment("reaching state \'S1355\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S524
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S524() {
            this.Manager.BeginTest("FullTestSuitePart2S524");
            this.Manager.Comment("reaching state \'S524\'");
            string temp262;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,False,False,True)\'");
            temp262 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, false, true);
            this.Manager.Comment("reaching state \'S525\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp262 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S525)", TestManagerHelpers.Describe(temp262)));
            this.Manager.Comment("reaching state \'S1356\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S526
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S526() {
            this.Manager.BeginTest("FullTestSuitePart2S526");
            this.Manager.Comment("reaching state \'S526\'");
            string temp263;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Le" +
                    "ngth50,False,True,False)\'");
            temp263 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Length50, false, true, false);
            this.Manager.Comment("reaching state \'S527\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp263 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S527)", TestManagerHelpers.Describe(temp263)));
            this.Manager.Comment("reaching state \'S1357\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S528
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S528() {
            this.Manager.BeginTest("FullTestSuitePart2S528");
            this.Manager.Comment("reaching state \'S528\'");
            string temp264;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,False,False,True)\'");
            temp264 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S529\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp264 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S529)", TestManagerHelpers.Describe(temp264)));
            this.Manager.Comment("reaching state \'S1358\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S530
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S530() {
            this.Manager.BeginTest("FullTestSuitePart2S530");
            this.Manager.Comment("reaching state \'S530\'");
            string temp265;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Null,False,True,True)\'");
            temp265 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S531\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp265 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S531)", TestManagerHelpers.Describe(temp265)));
            this.Manager.Comment("reaching state \'S1359\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S532
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S532() {
            this.Manager.BeginTest("FullTestSuitePart2S532");
            this.Manager.Comment("reaching state \'S532\'");
            string temp266;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,False,False,True)\'");
            temp266 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S533\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp266 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S533)", TestManagerHelpers.Describe(temp266)));
            this.Manager.Comment("reaching state \'S1360\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S534
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S534() {
            this.Manager.BeginTest("FullTestSuitePart2S534");
            this.Manager.Comment("reaching state \'S534\'");
            string temp267;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,False,True,True)\'");
            temp267 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S535\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp267 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S535)", TestManagerHelpers.Describe(temp267)));
            this.Manager.Comment("reaching state \'S1361\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S536
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S536() {
            this.Manager.BeginTest("FullTestSuitePart2S536");
            this.Manager.Comment("reaching state \'S536\'");
            string temp268;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,True,False,True)\'");
            temp268 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S537\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp268 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S537)", TestManagerHelpers.Describe(temp268)));
            this.Manager.Comment("reaching state \'S1362\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S538
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S538() {
            this.Manager.BeginTest("FullTestSuitePart2S538");
            this.Manager.Comment("reaching state \'S538\'");
            string temp269;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,False,True,False)\'");
            temp269 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, true, false);
            this.Manager.Comment("reaching state \'S539\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp269 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S539)", TestManagerHelpers.Describe(temp269)));
            this.Manager.Comment("reaching state \'S1363\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S540
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S540() {
            this.Manager.BeginTest("FullTestSuitePart2S540");
            this.Manager.Comment("reaching state \'S540\'");
            string temp270;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,False,True,True)\'");
            temp270 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S541\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp270 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S541)", TestManagerHelpers.Describe(temp270)));
            this.Manager.Comment("reaching state \'S1364\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S542
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S542() {
            this.Manager.BeginTest("FullTestSuitePart2S542");
            this.Manager.Comment("reaching state \'S542\'");
            string temp271;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,True,True,True)\'");
            temp271 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S543\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp271 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S543)", TestManagerHelpers.Describe(temp271)));
            this.Manager.Comment("reaching state \'S1365\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S544
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S544() {
            this.Manager.BeginTest("FullTestSuitePart2S544");
            this.Manager.Comment("reaching state \'S544\'");
            string temp272;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,False,False,False)\'");
            temp272 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, false, false);
            this.Manager.Comment("reaching state \'S545\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp272 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S545)", TestManagerHelpers.Describe(temp272)));
            this.Manager.Comment("reaching state \'S1366\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S546
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S546() {
            this.Manager.BeginTest("FullTestSuitePart2S546");
            this.Manager.Comment("reaching state \'S546\'");
            string temp273;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Null,Nu" +
                    "ll,False,True,True)\'");
            temp273 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, false, true, true);
            this.Manager.Comment("reaching state \'S547\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp273 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S547)", TestManagerHelpers.Describe(temp273)));
            this.Manager.Comment("reaching state \'S1367\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S548
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S548() {
            this.Manager.BeginTest("FullTestSuitePart2S548");
            this.Manager.Comment("reaching state \'S548\'");
            string temp274;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,True,False,False)\'");
            temp274 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S549\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp274 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S549)", TestManagerHelpers.Describe(temp274)));
            this.Manager.Comment("reaching state \'S1368\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S550
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S550() {
            this.Manager.BeginTest("FullTestSuitePart2S550");
            this.Manager.Comment("reaching state \'S550\'");
            string temp275;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Le" +
                    "ngth50,Empty,True,False,True)\'");
            temp275 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S551\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp275 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S551)", TestManagerHelpers.Describe(temp275)));
            this.Manager.Comment("reaching state \'S1369\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S552
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S552() {
            this.Manager.BeginTest("FullTestSuitePart2S552");
            this.Manager.Comment("reaching state \'S552\'");
            string temp276;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Em" +
                    "pty,Empty,False,True,False)\'");
            temp276 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S553\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp276 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S553)", TestManagerHelpers.Describe(temp276)));
            this.Manager.Comment("reaching state \'S1370\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S554
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S554() {
            this.Manager.BeginTest("FullTestSuitePart2S554");
            this.Manager.Comment("reaching state \'S554\'");
            string temp277;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Length5" +
                    "0,Empty,True,True,True)\'");
            temp277 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Length50, InputTypes.ShortStringType.Empty, true, true, true);
            this.Manager.Comment("reaching state \'S555\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp277 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S555)", TestManagerHelpers.Describe(temp277)));
            this.Manager.Comment("reaching state \'S1371\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S556
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S556() {
            this.Manager.BeginTest("FullTestSuitePart2S556");
            this.Manager.Comment("reaching state \'S556\'");
            string temp278;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,New,Length255,Length255,Empty,E" +
                    "mpty,True,False,False)\'");
            temp278 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.New, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Empty, InputTypes.ShortStringType.Empty, true, false, false);
            this.Manager.Comment("reaching state \'S557\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp278 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S557)", TestManagerHelpers.Describe(temp278)));
            this.Manager.Comment("reaching state \'S1372\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S558
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S558() {
            this.Manager.BeginTest("FullTestSuitePart2S558");
            this.Manager.Comment("reaching state \'S558\'");
            string temp279;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Null,True,False,True)\'");
            temp279 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Null, true, false, true);
            this.Manager.Comment("reaching state \'S559\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp279 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S559)", TestManagerHelpers.Describe(temp279)));
            this.Manager.Comment("reaching state \'S1373\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S560
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S560() {
            this.Manager.BeginTest("FullTestSuitePart2S560");
            this.Manager.Comment("reaching state \'S560\'");
            string temp280;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,False,False,True)\'");
            temp280 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, false, true);
            this.Manager.Comment("reaching state \'S561\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp280 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S561)", TestManagerHelpers.Describe(temp280)));
            this.Manager.Comment("reaching state \'S1374\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S562
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S562() {
            this.Manager.BeginTest("FullTestSuitePart2S562");
            this.Manager.Comment("reaching state \'S562\'");
            string temp281;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,False,True,True)\'");
            temp281 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, true, true);
            this.Manager.Comment("reaching state \'S563\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp281 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S563)", TestManagerHelpers.Describe(temp281)));
            this.Manager.Comment("reaching state \'S1375\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S564
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S564() {
            this.Manager.BeginTest("FullTestSuitePart2S564");
            this.Manager.Comment("reaching state \'S564\'");
            string temp282;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,True,False,True)\'");
            temp282 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, true, false, true);
            this.Manager.Comment("reaching state \'S565\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp282 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S565)", TestManagerHelpers.Describe(temp282)));
            this.Manager.Comment("reaching state \'S1376\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S566
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S566() {
            this.Manager.BeginTest("FullTestSuitePart2S566");
            this.Manager.Comment("reaching state \'S566\'");
            string temp283;
            this.Manager.Comment("executing step \'call SaveEntity(CorrectHeader,Add,Existing,Length255,Length255,Nu" +
                    "ll,Empty,False,True,False)\'");
            temp283 = this.ICatalogWebServiceAdapterInstance.SaveEntity(InputTypes.ServiceType.CorrectHeader, InputTypes.ChangeType.Add, InputTypes.IdType.Existing, InputTypes.MediumStringType.Length255, InputTypes.MediumStringType.Length255, InputTypes.ShortStringType.Null, InputTypes.ShortStringType.Empty, false, true, false);
            this.Manager.Comment("reaching state \'S567\'");
            this.Manager.Comment("checking step \'return SaveEntity/\"NoError\"\'");
            this.Manager.Assert((temp283 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveEntity, state S567)", TestManagerHelpers.Describe(temp283)));
            this.Manager.Comment("reaching state \'S1377\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S568
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S568() {
            this.Manager.BeginTest("FullTestSuitePart2S568");
            this.Manager.Comment("reaching state \'S568\'");
            string temp284;
            this.Manager.Comment("executing step \'call SaveTask(CorrectHeader,Valid)\'");
            temp284 = this.ICatalogWebServiceAdapterInstance.SaveTask(InputTypes.ServiceType.CorrectHeader, InputTypes.XmlType.Valid);
            this.Manager.Comment("reaching state \'S569\'");
            this.Manager.Comment("checking step \'return SaveTask/\"NoError\"\'");
            this.Manager.Assert((temp284 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveTask, state S569)", TestManagerHelpers.Describe(temp284)));
            this.Manager.Comment("reaching state \'S1378\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S570
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S570() {
            this.Manager.BeginTest("FullTestSuitePart2S570");
            this.Manager.Comment("reaching state \'S570\'");
            string temp285;
            this.Manager.Comment("executing step \'call SaveTask(v0,v1,v2,v3,v4,Length255,v5,v6,v7,v8,v9)\'");
            temp285 = this.ICatalogWebServiceAdapterInstance.SaveTask(this.v9.Value, this.v8.Value, this.v1.Value, this.v0.Value, this.v2.Value, InputTypes.MediumStringType.Length255, this.v3.Value, this.v4.Value, this.v5.Value, this.v6.Value, this.v7.Value);
            this.Manager.AddReturn(SaveTaskInfo1, null, temp285);
            this.Manager.Comment("reaching state \'S571\'");
            this.Manager.Assert(false, "reached error state \'S571\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S572
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S572() {
            this.Manager.BeginTest("FullTestSuitePart2S572");
            this.Manager.Comment("reaching state \'S572\'");
            string temp286;
            this.Manager.Comment("executing step \'call SaveDRMTask(v0,v1,v2,v3,v4,Length255,v5,v6,v7,v8,v9,v10,v11)" +
                    "\'");
            temp286 = this.ICatalogWebServiceAdapterInstance.SaveDRMTask(this.v9.Value, this.v8.Value, this.v1.Value, this.v0.Value, this.v2.Value, InputTypes.MediumStringType.Length255, this.v3.Value, this.v4.Value, this.v5.Value, this.v6.Value, this.v7.Value, this.v10.Value, this.v11.Value);
            this.Manager.AddReturn(SaveDRMTaskInfo, null, temp286);
            this.Manager.Comment("reaching state \'S573\'");
            this.Manager.Assert(false, "reached error state \'S573\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S574
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S574() {
            this.Manager.BeginTest("FullTestSuitePart2S574");
            this.Manager.Comment("reaching state \'S574\'");
            string temp287;
            this.Manager.Comment("executing step \'call GetArticle(Existing,CorrectHeader)\'");
            temp287 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S575\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp287 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S575)", TestManagerHelpers.Describe(temp287)));
            this.Manager.Comment("reaching state \'S1379\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S576
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S576() {
            this.Manager.BeginTest("FullTestSuitePart2S576");
            this.Manager.Comment("reaching state \'S576\'");
            string temp288;
            this.Manager.Comment("executing step \'call GetArticle(New,CorrectHeader)\'");
            temp288 = this.ICatalogWebServiceAdapterInstance.GetArticle(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S577\'");
            this.Manager.Comment("checking step \'return GetArticle/\"NoError\"\'");
            this.Manager.Assert((temp288 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticle, state S577)", TestManagerHelpers.Describe(temp288)));
            this.Manager.Comment("reaching state \'S1380\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S578
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S578() {
            this.Manager.BeginTest("FullTestSuitePart2S578");
            this.Manager.Comment("reaching state \'S578\'");
            string temp289;
            this.Manager.Comment("executing step \'call GetArticleArray(Empty,CorrectHeader)\'");
            temp289 = this.ICatalogWebServiceAdapterInstance.GetArticleArray(InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S579\'");
            this.Manager.Comment("checking step \'return GetArticleArray/\"NoError\"\'");
            this.Manager.Assert((temp289 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetArticleArray, state S579)", TestManagerHelpers.Describe(temp289)));
            this.Manager.Comment("reaching state \'S1381\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S580
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S580() {
            this.Manager.BeginTest("FullTestSuitePart2S580");
            this.Manager.Comment("reaching state \'S580\'");
            string temp290;
            this.Manager.Comment("executing step \'call GetAudioEncodingArray(CorrectHeader)\'");
            temp290 = this.ICatalogWebServiceAdapterInstance.GetAudioEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S581\'");
            this.Manager.Comment("checking step \'return GetAudioEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp290 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAudioEncodingArray, state S581)", TestManagerHelpers.Describe(temp290)));
            this.Manager.Comment("reaching state \'S1382\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S582
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S582() {
            this.Manager.BeginTest("FullTestSuitePart2S582");
            this.Manager.Comment("reaching state \'S582\'");
            string temp291;
            this.Manager.Comment("executing step \'call GetCategorySystem(Existing,CorrectHeader)\'");
            temp291 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S583\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp291 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S583)", TestManagerHelpers.Describe(temp291)));
            this.Manager.Comment("reaching state \'S1383\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S584
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S584() {
            this.Manager.BeginTest("FullTestSuitePart2S584");
            this.Manager.Comment("reaching state \'S584\'");
            string temp292;
            this.Manager.Comment("executing step \'call GetCategorySystem(New,CorrectHeader)\'");
            temp292 = this.ICatalogWebServiceAdapterInstance.GetCategorySystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S585\'");
            this.Manager.Comment("checking step \'return GetCategorySystem/\"NoError\"\'");
            this.Manager.Assert((temp292 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystem, state S585)", TestManagerHelpers.Describe(temp292)));
            this.Manager.Comment("reaching state \'S1384\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S586
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S586() {
            this.Manager.BeginTest("FullTestSuitePart2S586");
            this.Manager.Comment("reaching state \'S586\'");
            string temp293;
            this.Manager.Comment("executing step \'call GetCategorySystemArray(CorrectHeader)\'");
            temp293 = this.ICatalogWebServiceAdapterInstance.GetCategorySystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S587\'");
            this.Manager.Comment("checking step \'return GetCategorySystemArray/\"NoError\"\'");
            this.Manager.Assert((temp293 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCategorySystemArray, state S587)" +
                        "", TestManagerHelpers.Describe(temp293)));
            this.Manager.Comment("reaching state \'S1385\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S588
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S588() {
            this.Manager.BeginTest("FullTestSuitePart2S588");
            this.Manager.Comment("reaching state \'S588\'");
            string temp294;
            this.Manager.Comment("executing step \'call GetClientTypeArray(CorrectHeader)\'");
            temp294 = this.ICatalogWebServiceAdapterInstance.GetClientTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S589\'");
            this.Manager.Comment("checking step \'return GetClientTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp294 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetClientTypeArray, state S589)", TestManagerHelpers.Describe(temp294)));
            this.Manager.Comment("reaching state \'S1386\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S590
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S590() {
            this.Manager.BeginTest("FullTestSuitePart2S590");
            this.Manager.Comment("reaching state \'S590\'");
            string temp295;
            this.Manager.Comment("executing step \'call GetContributor(Existing,CorrectHeader)\'");
            temp295 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S591\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp295 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S591)", TestManagerHelpers.Describe(temp295)));
            this.Manager.Comment("reaching state \'S1387\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S592
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S592() {
            this.Manager.BeginTest("FullTestSuitePart2S592");
            this.Manager.Comment("reaching state \'S592\'");
            string temp296;
            this.Manager.Comment("executing step \'call GetContributor(New,CorrectHeader)\'");
            temp296 = this.ICatalogWebServiceAdapterInstance.GetContributor(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S593\'");
            this.Manager.Comment("checking step \'return GetContributor/\"NoError\"\'");
            this.Manager.Assert((temp296 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributor, state S593)", TestManagerHelpers.Describe(temp296)));
            this.Manager.Comment("reaching state \'S1388\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S594
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S594() {
            this.Manager.BeginTest("FullTestSuitePart2S594");
            this.Manager.Comment("reaching state \'S594\'");
            string temp297;
            this.Manager.Comment("executing step \'call GetContributorArray(Empty,CorrectHeader)\'");
            temp297 = this.ICatalogWebServiceAdapterInstance.GetContributorArray(InputTypes.ArrayType.Empty, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S595\'");
            this.Manager.Comment("checking step \'return GetContributorArray/\"NoError\"\'");
            this.Manager.Assert((temp297 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorArray, state S595)", TestManagerHelpers.Describe(temp297)));
            this.Manager.Comment("reaching state \'S1389\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S596
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S596() {
            this.Manager.BeginTest("FullTestSuitePart2S596");
            this.Manager.Comment("reaching state \'S596\'");
            string temp298;
            this.Manager.Comment("executing step \'call GetContributorRelationshipTypeArray(CorrectHeader)\'");
            temp298 = this.ICatalogWebServiceAdapterInstance.GetContributorRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S597\'");
            this.Manager.Comment("checking step \'return GetContributorRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp298 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetContributorRelationshipTypeArray" +
                        ", state S597)", TestManagerHelpers.Describe(temp298)));
            this.Manager.Comment("reaching state \'S1390\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S598
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S598() {
            this.Manager.BeginTest("FullTestSuitePart2S598");
            this.Manager.Comment("reaching state \'S598\'");
            string temp299;
            this.Manager.Comment("executing step \'call GetCountry(Existing,CorrectHeader)\'");
            temp299 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S599\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp299 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S599)", TestManagerHelpers.Describe(temp299)));
            this.Manager.Comment("reaching state \'S1391\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S600
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S600() {
            this.Manager.BeginTest("FullTestSuitePart2S600");
            this.Manager.Comment("reaching state \'S600\'");
            string temp300;
            this.Manager.Comment("executing step \'call GetCountry(New,CorrectHeader)\'");
            temp300 = this.ICatalogWebServiceAdapterInstance.GetCountry(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S601\'");
            this.Manager.Comment("checking step \'return GetCountry/\"NoError\"\'");
            this.Manager.Assert((temp300 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountry, state S601)", TestManagerHelpers.Describe(temp300)));
            this.Manager.Comment("reaching state \'S1392\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S602
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S602() {
            this.Manager.BeginTest("FullTestSuitePart2S602");
            this.Manager.Comment("reaching state \'S602\'");
            string temp301;
            this.Manager.Comment("executing step \'call GetCountryArray(CorrectHeader)\'");
            temp301 = this.ICatalogWebServiceAdapterInstance.GetCountryArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S603\'");
            this.Manager.Comment("checking step \'return GetCountryArray/\"NoError\"\'");
            this.Manager.Assert((temp301 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCountryArray, state S603)", TestManagerHelpers.Describe(temp301)));
            this.Manager.Comment("reaching state \'S1393\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S604
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S604() {
            this.Manager.BeginTest("FullTestSuitePart2S604");
            this.Manager.Comment("reaching state \'S604\'");
            string temp302;
            this.Manager.Comment("executing step \'call GetCurrency(Existing,CorrectHeader)\'");
            temp302 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S605\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp302 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S605)", TestManagerHelpers.Describe(temp302)));
            this.Manager.Comment("reaching state \'S1394\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S606
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S606() {
            this.Manager.BeginTest("FullTestSuitePart2S606");
            this.Manager.Comment("reaching state \'S606\'");
            string temp303;
            this.Manager.Comment("executing step \'call GetCurrency(New,CorrectHeader)\'");
            temp303 = this.ICatalogWebServiceAdapterInstance.GetCurrency(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S607\'");
            this.Manager.Comment("checking step \'return GetCurrency/\"NoError\"\'");
            this.Manager.Assert((temp303 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrency, state S607)", TestManagerHelpers.Describe(temp303)));
            this.Manager.Comment("reaching state \'S1395\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S608
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S608() {
            this.Manager.BeginTest("FullTestSuitePart2S608");
            this.Manager.Comment("reaching state \'S608\'");
            string temp304;
            this.Manager.Comment("executing step \'call GetCurrencyArray(CorrectHeader)\'");
            temp304 = this.ICatalogWebServiceAdapterInstance.GetCurrencyArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S609\'");
            this.Manager.Comment("checking step \'return GetCurrencyArray/\"NoError\"\'");
            this.Manager.Assert((temp304 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCurrencyArray, state S609)", TestManagerHelpers.Describe(temp304)));
            this.Manager.Comment("reaching state \'S1396\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S610
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S610() {
            this.Manager.BeginTest("FullTestSuitePart2S610");
            this.Manager.Comment("reaching state \'S610\'");
            string temp305;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(Existing,CorrectHeader)\'");
            temp305 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S611\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp305 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S611)", TestManagerHelpers.Describe(temp305)));
            this.Manager.Comment("reaching state \'S1397\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S612
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S612() {
            this.Manager.BeginTest("FullTestSuitePart2S612");
            this.Manager.Comment("reaching state \'S612\'");
            string temp306;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuer(New,CorrectHeader)\'");
            temp306 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S613\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuer/\"NoError\"\'");
            this.Manager.Assert((temp306 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuer, state S613)", TestManagerHelpers.Describe(temp306)));
            this.Manager.Comment("reaching state \'S1398\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S614
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S614() {
            this.Manager.BeginTest("FullTestSuitePart2S614");
            this.Manager.Comment("reaching state \'S614\'");
            string temp307;
            this.Manager.Comment("executing step \'call GetDRMLicenseIssuerArray(CorrectHeader)\'");
            temp307 = this.ICatalogWebServiceAdapterInstance.GetDRMLicenseIssuerArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S615\'");
            this.Manager.Comment("checking step \'return GetDRMLicenseIssuerArray/\"NoError\"\'");
            this.Manager.Assert((temp307 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetDRMLicenseIssuerArray, state S61" +
                        "5)", TestManagerHelpers.Describe(temp307)));
            this.Manager.Comment("reaching state \'S1399\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S616
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S616() {
            this.Manager.BeginTest("FullTestSuitePart2S616");
            this.Manager.Comment("reaching state \'S616\'");
            string temp308;
            this.Manager.Comment("executing step \'call GetEntity(Existing,CorrectHeader)\'");
            temp308 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S617\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp308 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S617)", TestManagerHelpers.Describe(temp308)));
            this.Manager.Comment("reaching state \'S1400\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S618
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S618() {
            this.Manager.BeginTest("FullTestSuitePart2S618");
            this.Manager.Comment("reaching state \'S618\'");
            string temp309;
            this.Manager.Comment("executing step \'call GetEntity(New,CorrectHeader)\'");
            temp309 = this.ICatalogWebServiceAdapterInstance.GetEntity(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S619\'");
            this.Manager.Comment("checking step \'return GetEntity/\"NoError\"\'");
            this.Manager.Assert((temp309 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntity, state S619)", TestManagerHelpers.Describe(temp309)));
            this.Manager.Comment("reaching state \'S1401\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S620
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S620() {
            this.Manager.BeginTest("FullTestSuitePart2S620");
            this.Manager.Comment("reaching state \'S620\'");
            string temp310;
            this.Manager.Comment("executing step \'call GetEntityArray(CorrectHeader)\'");
            temp310 = this.ICatalogWebServiceAdapterInstance.GetEntityArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S621\'");
            this.Manager.Comment("checking step \'return GetEntityArray/\"NoError\"\'");
            this.Manager.Assert((temp310 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetEntityArray, state S621)", TestManagerHelpers.Describe(temp310)));
            this.Manager.Comment("reaching state \'S1402\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S622
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S622() {
            this.Manager.BeginTest("FullTestSuitePart2S622");
            this.Manager.Comment("reaching state \'S622\'");
            string temp311;
            this.Manager.Comment("executing step \'call GetGame(Existing,CorrectHeader)\'");
            temp311 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S623\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp311 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S623)", TestManagerHelpers.Describe(temp311)));
            this.Manager.Comment("reaching state \'S1403\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S624
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S624() {
            this.Manager.BeginTest("FullTestSuitePart2S624");
            this.Manager.Comment("reaching state \'S624\'");
            string temp312;
            this.Manager.Comment("executing step \'call GetGame(New,CorrectHeader)\'");
            temp312 = this.ICatalogWebServiceAdapterInstance.GetGame(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S625\'");
            this.Manager.Comment("checking step \'return GetGame/\"NoError\"\'");
            this.Manager.Assert((temp312 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGame, state S625)", TestManagerHelpers.Describe(temp312)));
            this.Manager.Comment("reaching state \'S1404\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S626
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S626() {
            this.Manager.BeginTest("FullTestSuitePart2S626");
            this.Manager.Comment("reaching state \'S626\'");
            string temp313;
            this.Manager.Comment("executing step \'call GetGameContent(Existing,CorrectHeader)\'");
            temp313 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S627\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp313 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S627)", TestManagerHelpers.Describe(temp313)));
            this.Manager.Comment("reaching state \'S1405\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S628
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S628() {
            this.Manager.BeginTest("FullTestSuitePart2S628");
            this.Manager.Comment("reaching state \'S628\'");
            string temp314;
            this.Manager.Comment("executing step \'call GetGameContent(New,CorrectHeader)\'");
            temp314 = this.ICatalogWebServiceAdapterInstance.GetGameContent(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S629\'");
            this.Manager.Comment("checking step \'return GetGameContent/\"NoError\"\'");
            this.Manager.Assert((temp314 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetGameContent, state S629)", TestManagerHelpers.Describe(temp314)));
            this.Manager.Comment("reaching state \'S1406\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S630
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S630() {
            this.Manager.BeginTest("FullTestSuitePart2S630");
            this.Manager.Comment("reaching state \'S630\'");
            string temp315;
            this.Manager.Comment("executing step \'call GetImage(Existing,CorrectHeader)\'");
            temp315 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S631\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp315 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S631)", TestManagerHelpers.Describe(temp315)));
            this.Manager.Comment("reaching state \'S1407\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S632
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S632() {
            this.Manager.BeginTest("FullTestSuitePart2S632");
            this.Manager.Comment("reaching state \'S632\'");
            string temp316;
            this.Manager.Comment("executing step \'call GetImage(New,CorrectHeader)\'");
            temp316 = this.ICatalogWebServiceAdapterInstance.GetImage(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S633\'");
            this.Manager.Comment("checking step \'return GetImage/\"NoError\"\'");
            this.Manager.Assert((temp316 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImage, state S633)", TestManagerHelpers.Describe(temp316)));
            this.Manager.Comment("reaching state \'S1408\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S634
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S634() {
            this.Manager.BeginTest("FullTestSuitePart2S634");
            this.Manager.Comment("reaching state \'S634\'");
            string temp317;
            this.Manager.Comment("executing step \'call GetImageFormat(CorrectHeader)\'");
            temp317 = this.ICatalogWebServiceAdapterInstance.GetImageFormat(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S635\'");
            this.Manager.Comment("checking step \'return GetImageFormat/\"NoError\"\'");
            this.Manager.Assert((temp317 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageFormat, state S635)", TestManagerHelpers.Describe(temp317)));
            this.Manager.Comment("reaching state \'S1409\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S636
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S636() {
            this.Manager.BeginTest("FullTestSuitePart2S636");
            this.Manager.Comment("reaching state \'S636\'");
            string temp318;
            this.Manager.Comment("executing step \'call GetImageSizeArray(CorrectHeader)\'");
            temp318 = this.ICatalogWebServiceAdapterInstance.GetImageSizeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S637\'");
            this.Manager.Comment("checking step \'return GetImageSizeArray/\"NoError\"\'");
            this.Manager.Assert((temp318 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetImageSizeArray, state S637)", TestManagerHelpers.Describe(temp318)));
            this.Manager.Comment("reaching state \'S1410\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S638
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S638() {
            this.Manager.BeginTest("FullTestSuitePart2S638");
            this.Manager.Comment("reaching state \'S638\'");
            string temp319;
            this.Manager.Comment("executing step \'call GetLicenseClass(Existing,CorrectHeader)\'");
            temp319 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S639\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp319 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S639)", TestManagerHelpers.Describe(temp319)));
            this.Manager.Comment("reaching state \'S1411\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S640
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S640() {
            this.Manager.BeginTest("FullTestSuitePart2S640");
            this.Manager.Comment("reaching state \'S640\'");
            string temp320;
            this.Manager.Comment("executing step \'call GetLicenseClass(New,CorrectHeader)\'");
            temp320 = this.ICatalogWebServiceAdapterInstance.GetLicenseClass(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S641\'");
            this.Manager.Comment("checking step \'return GetLicenseClass/\"NoError\"\'");
            this.Manager.Assert((temp320 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClass, state S641)", TestManagerHelpers.Describe(temp320)));
            this.Manager.Comment("reaching state \'S1412\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S642
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S642() {
            this.Manager.BeginTest("FullTestSuitePart2S642");
            this.Manager.Comment("reaching state \'S642\'");
            string temp321;
            this.Manager.Comment("executing step \'call GetLicenseClassArray(CorrectHeader)\'");
            temp321 = this.ICatalogWebServiceAdapterInstance.GetLicenseClassArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S643\'");
            this.Manager.Comment("checking step \'return GetLicenseClassArray/\"NoError\"\'");
            this.Manager.Assert((temp321 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseClassArray, state S643)", TestManagerHelpers.Describe(temp321)));
            this.Manager.Comment("reaching state \'S1413\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S644
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S644() {
            this.Manager.BeginTest("FullTestSuitePart2S644");
            this.Manager.Comment("reaching state \'S644\'");
            string temp322;
            this.Manager.Comment("executing step \'call GetLicenseType(Existing,CorrectHeader)\'");
            temp322 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S645\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp322 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S645)", TestManagerHelpers.Describe(temp322)));
            this.Manager.Comment("reaching state \'S1414\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S646
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S646() {
            this.Manager.BeginTest("FullTestSuitePart2S646");
            this.Manager.Comment("reaching state \'S646\'");
            string temp323;
            this.Manager.Comment("executing step \'call GetLicenseType(New,CorrectHeader)\'");
            temp323 = this.ICatalogWebServiceAdapterInstance.GetLicenseType(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S647\'");
            this.Manager.Comment("checking step \'return GetLicenseType/\"NoError\"\'");
            this.Manager.Assert((temp323 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseType, state S647)", TestManagerHelpers.Describe(temp323)));
            this.Manager.Comment("reaching state \'S1415\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S648
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S648() {
            this.Manager.BeginTest("FullTestSuitePart2S648");
            this.Manager.Comment("reaching state \'S648\'");
            string temp324;
            this.Manager.Comment("executing step \'call GetLicenseTypeArray(CorrectHeader)\'");
            temp324 = this.ICatalogWebServiceAdapterInstance.GetLicenseTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S649\'");
            this.Manager.Comment("checking step \'return GetLicenseTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp324 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLicenseTypeArray, state S649)", TestManagerHelpers.Describe(temp324)));
            this.Manager.Comment("reaching state \'S1416\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S650
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S650() {
            this.Manager.BeginTest("FullTestSuitePart2S650");
            this.Manager.Comment("reaching state \'S650\'");
            string temp325;
            this.Manager.Comment("executing step \'call GetLocaleArray(CorrectHeader)\'");
            temp325 = this.ICatalogWebServiceAdapterInstance.GetLocaleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S651\'");
            this.Manager.Comment("checking step \'return GetLocaleArray/\"NoError\"\'");
            this.Manager.Assert((temp325 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetLocaleArray, state S651)", TestManagerHelpers.Describe(temp325)));
            this.Manager.Comment("reaching state \'S1417\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S652
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S652() {
            this.Manager.BeginTest("FullTestSuitePart2S652");
            this.Manager.Comment("reaching state \'S652\'");
            string temp326;
            this.Manager.Comment("executing step \'call GetMediaRelationshipTypeArray(CorrectHeader)\'");
            temp326 = this.ICatalogWebServiceAdapterInstance.GetMediaRelationshipTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S653\'");
            this.Manager.Comment("checking step \'return GetMediaRelationshipTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp326 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaRelationshipTypeArray, stat" +
                        "e S653)", TestManagerHelpers.Describe(temp326)));
            this.Manager.Comment("reaching state \'S1418\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S654
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S654() {
            this.Manager.BeginTest("FullTestSuitePart2S654");
            this.Manager.Comment("reaching state \'S654\'");
            string temp327;
            this.Manager.Comment("executing step \'call GetMediaTypeArray(CorrectHeader)\'");
            temp327 = this.ICatalogWebServiceAdapterInstance.GetMediaTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S655\'");
            this.Manager.Comment("checking step \'return GetMediaTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp327 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMediaTypeArray, state S655)", TestManagerHelpers.Describe(temp327)));
            this.Manager.Comment("reaching state \'S1419\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S656
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S656() {
            this.Manager.BeginTest("FullTestSuitePart2S656");
            this.Manager.Comment("reaching state \'S656\'");
            string temp328;
            this.Manager.Comment("executing step \'call GetMetadataProvider(Existing,CorrectHeader)\'");
            temp328 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S657\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp328 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S657)", TestManagerHelpers.Describe(temp328)));
            this.Manager.Comment("reaching state \'S1420\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S658
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S658() {
            this.Manager.BeginTest("FullTestSuitePart2S658");
            this.Manager.Comment("reaching state \'S658\'");
            string temp329;
            this.Manager.Comment("executing step \'call GetMetadataProvider(New,CorrectHeader)\'");
            temp329 = this.ICatalogWebServiceAdapterInstance.GetMetadataProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S659\'");
            this.Manager.Comment("checking step \'return GetMetadataProvider/\"NoError\"\'");
            this.Manager.Assert((temp329 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProvider, state S659)", TestManagerHelpers.Describe(temp329)));
            this.Manager.Comment("reaching state \'S1421\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S660
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S660() {
            this.Manager.BeginTest("FullTestSuitePart2S660");
            this.Manager.Comment("reaching state \'S660\'");
            string temp330;
            this.Manager.Comment("executing step \'call GetMetadataProviderArray(CorrectHeader)\'");
            temp330 = this.ICatalogWebServiceAdapterInstance.GetMetadataProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S661\'");
            this.Manager.Comment("checking step \'return GetMetadataProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp330 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetMetadataProviderArray, state S66" +
                        "1)", TestManagerHelpers.Describe(temp330)));
            this.Manager.Comment("reaching state \'S1422\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S662
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S662() {
            this.Manager.BeginTest("FullTestSuitePart2S662");
            this.Manager.Comment("reaching state \'S662\'");
            string temp331;
            this.Manager.Comment("executing step \'call GetOffer(Existing,CorrectHeader)\'");
            temp331 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S663\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp331 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S663)", TestManagerHelpers.Describe(temp331)));
            this.Manager.Comment("reaching state \'S1423\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S664
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S664() {
            this.Manager.BeginTest("FullTestSuitePart2S664");
            this.Manager.Comment("reaching state \'S664\'");
            string temp332;
            this.Manager.Comment("executing step \'call GetOffer(New,CorrectHeader)\'");
            temp332 = this.ICatalogWebServiceAdapterInstance.GetOffer(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S665\'");
            this.Manager.Comment("checking step \'return GetOffer/\"NoError\"\'");
            this.Manager.Assert((temp332 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetOffer, state S665)", TestManagerHelpers.Describe(temp332)));
            this.Manager.Comment("reaching state \'S1424\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S666
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S666() {
            this.Manager.BeginTest("FullTestSuitePart2S666");
            this.Manager.Comment("reaching state \'S666\'");
            string temp333;
            this.Manager.Comment("executing step \'call GetPreviewMediaInstanceTypeArray(CorrectHeader)\'");
            temp333 = this.ICatalogWebServiceAdapterInstance.GetPreviewMediaInstanceTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S667\'");
            this.Manager.Comment("checking step \'return GetPreviewMediaInstanceTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp333 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPreviewMediaInstanceTypeArray, s" +
                        "tate S667)", TestManagerHelpers.Describe(temp333)));
            this.Manager.Comment("reaching state \'S1425\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S668
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S668() {
            this.Manager.BeginTest("FullTestSuitePart2S668");
            this.Manager.Comment("reaching state \'S668\'");
            string temp334;
            this.Manager.Comment("executing step \'call GetPricingRule(Existing,CorrectHeader)\'");
            temp334 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S669\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp334 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S669)", TestManagerHelpers.Describe(temp334)));
            this.Manager.Comment("reaching state \'S1426\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S670
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S670() {
            this.Manager.BeginTest("FullTestSuitePart2S670");
            this.Manager.Comment("reaching state \'S670\'");
            string temp335;
            this.Manager.Comment("executing step \'call GetPricingRule(New,CorrectHeader)\'");
            temp335 = this.ICatalogWebServiceAdapterInstance.GetPricingRule(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S671\'");
            this.Manager.Comment("checking step \'return GetPricingRule/\"NoError\"\'");
            this.Manager.Assert((temp335 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRule, state S671)", TestManagerHelpers.Describe(temp335)));
            this.Manager.Comment("reaching state \'S1427\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S672
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S672() {
            this.Manager.BeginTest("FullTestSuitePart2S672");
            this.Manager.Comment("reaching state \'S672\'");
            string temp336;
            this.Manager.Comment("executing step \'call GetPricingRuleArray(CorrectHeader)\'");
            temp336 = this.ICatalogWebServiceAdapterInstance.GetPricingRuleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S673\'");
            this.Manager.Comment("checking step \'return GetPricingRuleArray/\"NoError\"\'");
            this.Manager.Assert((temp336 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPricingRuleArray, state S673)", TestManagerHelpers.Describe(temp336)));
            this.Manager.Comment("reaching state \'S1428\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S674
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S674() {
            this.Manager.BeginTest("FullTestSuitePart2S674");
            this.Manager.Comment("reaching state \'S674\'");
            string temp337;
            this.Manager.Comment("executing step \'call GetProvider(Existing,CorrectHeader)\'");
            temp337 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S675\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp337 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S675)", TestManagerHelpers.Describe(temp337)));
            this.Manager.Comment("reaching state \'S1429\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S676
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S676() {
            this.Manager.BeginTest("FullTestSuitePart2S676");
            this.Manager.Comment("reaching state \'S676\'");
            string temp338;
            this.Manager.Comment("executing step \'call GetProvider(New,CorrectHeader)\'");
            temp338 = this.ICatalogWebServiceAdapterInstance.GetProvider(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S677\'");
            this.Manager.Comment("checking step \'return GetProvider/\"NoError\"\'");
            this.Manager.Assert((temp338 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProvider, state S677)", TestManagerHelpers.Describe(temp338)));
            this.Manager.Comment("reaching state \'S1430\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S678
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S678() {
            this.Manager.BeginTest("FullTestSuitePart2S678");
            this.Manager.Comment("reaching state \'S678\'");
            string temp339;
            this.Manager.Comment("executing step \'call GetProviderArray(CorrectHeader)\'");
            temp339 = this.ICatalogWebServiceAdapterInstance.GetProviderArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S679\'");
            this.Manager.Comment("checking step \'return GetProviderArray/\"NoError\"\'");
            this.Manager.Assert((temp339 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetProviderArray, state S679)", TestManagerHelpers.Describe(temp339)));
            this.Manager.Comment("reaching state \'S1431\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S680
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S680() {
            this.Manager.BeginTest("FullTestSuitePart2S680");
            this.Manager.Comment("reaching state \'S680\'");
            string temp340;
            this.Manager.Comment("executing step \'call GetRatingSystem(Existing,CorrectHeader)\'");
            temp340 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S681\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp340 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S681)", TestManagerHelpers.Describe(temp340)));
            this.Manager.Comment("reaching state \'S1432\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S682
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S682() {
            this.Manager.BeginTest("FullTestSuitePart2S682");
            this.Manager.Comment("reaching state \'S682\'");
            string temp341;
            this.Manager.Comment("executing step \'call GetRatingSystem(New,CorrectHeader)\'");
            temp341 = this.ICatalogWebServiceAdapterInstance.GetRatingSystem(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S683\'");
            this.Manager.Comment("checking step \'return GetRatingSystem/\"NoError\"\'");
            this.Manager.Assert((temp341 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystem, state S683)", TestManagerHelpers.Describe(temp341)));
            this.Manager.Comment("reaching state \'S1433\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S684
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S684() {
            this.Manager.BeginTest("FullTestSuitePart2S684");
            this.Manager.Comment("reaching state \'S684\'");
            string temp342;
            this.Manager.Comment("executing step \'call GetRatingSystemArray(CorrectHeader)\'");
            temp342 = this.ICatalogWebServiceAdapterInstance.GetRatingSystemArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S685\'");
            this.Manager.Comment("checking step \'return GetRatingSystemArray/\"NoError\"\'");
            this.Manager.Assert((temp342 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRatingSystemArray, state S685)", TestManagerHelpers.Describe(temp342)));
            this.Manager.Comment("reaching state \'S1434\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S686
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S686() {
            this.Manager.BeginTest("FullTestSuitePart2S686");
            this.Manager.Comment("reaching state \'S686\'");
            string temp343;
            this.Manager.Comment("executing step \'call GetRoleArray(CorrectHeader)\'");
            temp343 = this.ICatalogWebServiceAdapterInstance.GetRoleArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S687\'");
            this.Manager.Comment("checking step \'return GetRoleArray/\"NoError\"\'");
            this.Manager.Assert((temp343 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetRoleArray, state S687)", TestManagerHelpers.Describe(temp343)));
            this.Manager.Comment("reaching state \'S1435\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S688
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S688() {
            this.Manager.BeginTest("FullTestSuitePart2S688");
            this.Manager.Comment("reaching state \'S688\'");
            string temp344;
            this.Manager.Comment("executing step \'call GetStoreArray(CorrectHeader)\'");
            temp344 = this.ICatalogWebServiceAdapterInstance.GetStoreArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S689\'");
            this.Manager.Comment("checking step \'return GetStoreArray/\"NoError\"\'");
            this.Manager.Assert((temp344 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetStoreArray, state S689)", TestManagerHelpers.Describe(temp344)));
            this.Manager.Comment("reaching state \'S1436\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S690
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S690() {
            this.Manager.BeginTest("FullTestSuitePart2S690");
            this.Manager.Comment("reaching state \'S690\'");
            string temp345;
            this.Manager.Comment("executing step \'call GetTasks(CorrectHeader)\'");
            temp345 = this.ICatalogWebServiceAdapterInstance.GetTasks(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S691\'");
            this.Manager.Comment("checking step \'return GetTasks/\"NoError\"\'");
            this.Manager.Assert((temp345 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTasks, state S691)", TestManagerHelpers.Describe(temp345)));
            this.Manager.Comment("reaching state \'S1437\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S692
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S692() {
            this.Manager.BeginTest("FullTestSuitePart2S692");
            this.Manager.Comment("reaching state \'S692\'");
            string temp346;
            this.Manager.Comment("executing step \'call GetAvailableTaskAsXML(CorrectHeader)\'");
            temp346 = this.ICatalogWebServiceAdapterInstance.GetAvailableTaskAsXML(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S693\'");
            this.Manager.Comment("checking step \'return GetAvailableTaskAsXML/\"NoError\"\'");
            this.Manager.Assert((temp346 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableTaskAsXML, state S693)", TestManagerHelpers.Describe(temp346)));
            this.Manager.Comment("reaching state \'S1438\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S694
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S694() {
            this.Manager.BeginTest("FullTestSuitePart2S694");
            this.Manager.Comment("reaching state \'S694\'");
            string temp347;
            this.Manager.Comment("executing step \'call GetTaskStatusArray(CorrectHeader)\'");
            temp347 = this.ICatalogWebServiceAdapterInstance.GetTaskStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S695\'");
            this.Manager.Comment("checking step \'return GetTaskStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp347 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskStatusArray, state S695)", TestManagerHelpers.Describe(temp347)));
            this.Manager.Comment("reaching state \'S1439\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S696
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S696() {
            this.Manager.BeginTest("FullTestSuitePart2S696");
            this.Manager.Comment("reaching state \'S696\'");
            string temp348;
            this.Manager.Comment("executing step \'call GetTaskByStatus(Existing,CorrectHeader)\'");
            temp348 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S697\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp348 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S697)", TestManagerHelpers.Describe(temp348)));
            this.Manager.Comment("reaching state \'S1440\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S698
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S698() {
            this.Manager.BeginTest("FullTestSuitePart2S698");
            this.Manager.Comment("reaching state \'S698\'");
            string temp349;
            this.Manager.Comment("executing step \'call GetTaskByStatus(New,CorrectHeader)\'");
            temp349 = this.ICatalogWebServiceAdapterInstance.GetTaskByStatus(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S699\'");
            this.Manager.Comment("checking step \'return GetTaskByStatus/\"NoError\"\'");
            this.Manager.Assert((temp349 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetTaskByStatus, state S699)", TestManagerHelpers.Describe(temp349)));
            this.Manager.Comment("reaching state \'S1441\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S700
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S700() {
            this.Manager.BeginTest("FullTestSuitePart2S700");
            this.Manager.Comment("reaching state \'S700\'");
            string temp350;
            this.Manager.Comment("executing step \'call GetUserTypeArray(CorrectHeader)\'");
            temp350 = this.ICatalogWebServiceAdapterInstance.GetUserTypeArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S701\'");
            this.Manager.Comment("checking step \'return GetUserTypeArray/\"NoError\"\'");
            this.Manager.Assert((temp350 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetUserTypeArray, state S701)", TestManagerHelpers.Describe(temp350)));
            this.Manager.Comment("reaching state \'S1442\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S702
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S702() {
            this.Manager.BeginTest("FullTestSuitePart2S702");
            this.Manager.Comment("reaching state \'S702\'");
            string temp351;
            this.Manager.Comment("executing step \'call GetVideo(Existing,CorrectHeader)\'");
            temp351 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S703\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp351 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S703)", TestManagerHelpers.Describe(temp351)));
            this.Manager.Comment("reaching state \'S1443\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S704
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S704() {
            this.Manager.BeginTest("FullTestSuitePart2S704");
            this.Manager.Comment("reaching state \'S704\'");
            string temp352;
            this.Manager.Comment("executing step \'call GetVideo(New,CorrectHeader)\'");
            temp352 = this.ICatalogWebServiceAdapterInstance.GetVideo(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S705\'");
            this.Manager.Comment("checking step \'return GetVideo/\"NoError\"\'");
            this.Manager.Assert((temp352 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideo, state S705)", TestManagerHelpers.Describe(temp352)));
            this.Manager.Comment("reaching state \'S1444\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S706
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S706() {
            this.Manager.BeginTest("FullTestSuitePart2S706");
            this.Manager.Comment("reaching state \'S706\'");
            string temp353;
            this.Manager.Comment("executing step \'call GetVideoDefinitionArray(CorrectHeader)\'");
            temp353 = this.ICatalogWebServiceAdapterInstance.GetVideoDefinitionArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S707\'");
            this.Manager.Comment("checking step \'return GetVideoDefinitionArray/\"NoError\"\'");
            this.Manager.Assert((temp353 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoDefinitionArray, state S707" +
                        ")", TestManagerHelpers.Describe(temp353)));
            this.Manager.Comment("reaching state \'S1445\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S708
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S708() {
            this.Manager.BeginTest("FullTestSuitePart2S708");
            this.Manager.Comment("reaching state \'S708\'");
            string temp354;
            this.Manager.Comment("executing step \'call GetVideoEncodingArray(CorrectHeader)\'");
            temp354 = this.ICatalogWebServiceAdapterInstance.GetVideoEncodingArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S709\'");
            this.Manager.Comment("checking step \'return GetVideoEncodingArray/\"NoError\"\'");
            this.Manager.Assert((temp354 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoEncodingArray, state S709)", TestManagerHelpers.Describe(temp354)));
            this.Manager.Comment("reaching state \'S1446\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S710
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S710() {
            this.Manager.BeginTest("FullTestSuitePart2S710");
            this.Manager.Comment("reaching state \'S710\'");
            string temp355;
            this.Manager.Comment("executing step \'call GetVideoSeason(Existing,CorrectHeader)\'");
            temp355 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S711\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp355 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S711)", TestManagerHelpers.Describe(temp355)));
            this.Manager.Comment("reaching state \'S1447\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S712
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S712() {
            this.Manager.BeginTest("FullTestSuitePart2S712");
            this.Manager.Comment("reaching state \'S712\'");
            string temp356;
            this.Manager.Comment("executing step \'call GetVideoSeason(New,CorrectHeader)\'");
            temp356 = this.ICatalogWebServiceAdapterInstance.GetVideoSeason(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S713\'");
            this.Manager.Comment("checking step \'return GetVideoSeason/\"NoError\"\'");
            this.Manager.Assert((temp356 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeason, state S713)", TestManagerHelpers.Describe(temp356)));
            this.Manager.Comment("reaching state \'S1448\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S714
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S714() {
            this.Manager.BeginTest("FullTestSuitePart2S714");
            this.Manager.Comment("reaching state \'S714\'");
            string temp357;
            this.Manager.Comment("executing step \'call GetVideoSeries(Existing,CorrectHeader)\'");
            temp357 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S715\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp357 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S715)", TestManagerHelpers.Describe(temp357)));
            this.Manager.Comment("reaching state \'S1449\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S716
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S716() {
            this.Manager.BeginTest("FullTestSuitePart2S716");
            this.Manager.Comment("reaching state \'S716\'");
            string temp358;
            this.Manager.Comment("executing step \'call GetVideoSeries(New,CorrectHeader)\'");
            temp358 = this.ICatalogWebServiceAdapterInstance.GetVideoSeries(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S717\'");
            this.Manager.Comment("checking step \'return GetVideoSeries/\"NoError\"\'");
            this.Manager.Assert((temp358 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVideoSeries, state S717)", TestManagerHelpers.Describe(temp358)));
            this.Manager.Comment("reaching state \'S1450\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S718
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S718() {
            this.Manager.BeginTest("FullTestSuitePart2S718");
            this.Manager.Comment("reaching state \'S718\'");
            string temp359;
            this.Manager.Comment("executing step \'call GetVisibilityLevelArray(CorrectHeader)\'");
            temp359 = this.ICatalogWebServiceAdapterInstance.GetVisibilityLevelArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S719\'");
            this.Manager.Comment("checking step \'return GetVisibilityLevelArray/\"NoError\"\'");
            this.Manager.Assert((temp359 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityLevelArray, state S719" +
                        ")", TestManagerHelpers.Describe(temp359)));
            this.Manager.Comment("reaching state \'S1451\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S720
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S720() {
            this.Manager.BeginTest("FullTestSuitePart2S720");
            this.Manager.Comment("reaching state \'S720\'");
            string temp360;
            this.Manager.Comment("executing step \'call GetVisibilityStatusArray(CorrectHeader)\'");
            temp360 = this.ICatalogWebServiceAdapterInstance.GetVisibilityStatusArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S721\'");
            this.Manager.Comment("checking step \'return GetVisibilityStatusArray/\"NoError\"\'");
            this.Manager.Assert((temp360 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetVisibilityStatusArray, state S72" +
                        "1)", TestManagerHelpers.Describe(temp360)));
            this.Manager.Comment("reaching state \'S1452\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S722
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S722() {
            this.Manager.BeginTest("FullTestSuitePart2S722");
            this.Manager.Comment("reaching state \'S722\'");
            string temp361;
            this.Manager.Comment("executing step \'call GetAvailableEntityId(CorrectHeader)\'");
            temp361 = this.ICatalogWebServiceAdapterInstance.GetAvailableEntityId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S723\'");
            this.Manager.Comment("checking step \'return GetAvailableEntityId/\"NoError\"\'");
            this.Manager.Assert((temp361 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableEntityId, state S723)", TestManagerHelpers.Describe(temp361)));
            this.Manager.Comment("reaching state \'S1453\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S724
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S724() {
            this.Manager.BeginTest("FullTestSuitePart2S724");
            this.Manager.Comment("reaching state \'S724\'");
            string temp362;
            this.Manager.Comment("executing step \'call GetAvailableCategoryId(CorrectHeader)\'");
            temp362 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategoryId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S725\'");
            this.Manager.Comment("checking step \'return GetAvailableCategoryId/\"NoError\"\'");
            this.Manager.Assert((temp362 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategoryId, state S725)" +
                        "", TestManagerHelpers.Describe(temp362)));
            this.Manager.Comment("reaching state \'S1454\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S726
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S726() {
            this.Manager.BeginTest("FullTestSuitePart2S726");
            this.Manager.Comment("reaching state \'S726\'");
            string temp363;
            this.Manager.Comment("executing step \'call GetAvailableCategorySystemId(CorrectHeader)\'");
            temp363 = this.ICatalogWebServiceAdapterInstance.GetAvailableCategorySystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S727\'");
            this.Manager.Comment("checking step \'return GetAvailableCategorySystemId/\"NoError\"\'");
            this.Manager.Assert((temp363 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableCategorySystemId, state" +
                        " S727)", TestManagerHelpers.Describe(temp363)));
            this.Manager.Comment("reaching state \'S1455\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S728
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S728() {
            this.Manager.BeginTest("FullTestSuitePart2S728");
            this.Manager.Comment("reaching state \'S728\'");
            string temp364;
            this.Manager.Comment("executing step \'call GetAvailableRatingSystemId(CorrectHeader)\'");
            temp364 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingSystemId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S729\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingSystemId/\"NoError\"\'");
            this.Manager.Assert((temp364 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingSystemId, state S" +
                        "729)", TestManagerHelpers.Describe(temp364)));
            this.Manager.Comment("reaching state \'S1456\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S730
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S730() {
            this.Manager.BeginTest("FullTestSuitePart2S730");
            this.Manager.Comment("reaching state \'S730\'");
            string temp365;
            this.Manager.Comment("executing step \'call GetAvailableRatingValueId(CorrectHeader)\'");
            temp365 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingValueId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S731\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingValueId/\"NoError\"\'");
            this.Manager.Assert((temp365 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingValueId, state S7" +
                        "31)", TestManagerHelpers.Describe(temp365)));
            this.Manager.Comment("reaching state \'S1457\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S732
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S732() {
            this.Manager.BeginTest("FullTestSuitePart2S732");
            this.Manager.Comment("reaching state \'S732\'");
            string temp366;
            this.Manager.Comment("executing step \'call GetAvailableRatingDescriptorId(CorrectHeader)\'");
            temp366 = this.ICatalogWebServiceAdapterInstance.GetAvailableRatingDescriptorId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S733\'");
            this.Manager.Comment("checking step \'return GetAvailableRatingDescriptorId/\"NoError\"\'");
            this.Manager.Assert((temp366 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableRatingDescriptorId, sta" +
                        "te S733)", TestManagerHelpers.Describe(temp366)));
            this.Manager.Comment("reaching state \'S1458\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S734
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S734() {
            this.Manager.BeginTest("FullTestSuitePart2S734");
            this.Manager.Comment("reaching state \'S734\'");
            string temp367;
            this.Manager.Comment("executing step \'call GetAvailableLicenseTypeId(CorrectHeader)\'");
            temp367 = this.ICatalogWebServiceAdapterInstance.GetAvailableLicenseTypeId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S735\'");
            this.Manager.Comment("checking step \'return GetAvailableLicenseTypeId/\"NoError\"\'");
            this.Manager.Assert((temp367 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetAvailableLicenseTypeId, state S7" +
                        "35)", TestManagerHelpers.Describe(temp367)));
            this.Manager.Comment("reaching state \'S1459\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S736
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S736() {
            this.Manager.BeginTest("FullTestSuitePart2S736");
            this.Manager.Comment("reaching state \'S736\'");
            string temp368;
            this.Manager.Comment("executing step \'call GetCatalogId(CorrectHeader)\'");
            temp368 = this.ICatalogWebServiceAdapterInstance.GetCatalogId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S737\'");
            this.Manager.Comment("checking step \'return GetCatalogId/\"NoError\"\'");
            this.Manager.Assert((temp368 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetCatalogId, state S737)", TestManagerHelpers.Describe(temp368)));
            this.Manager.Comment("reaching state \'S1460\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S738
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S738() {
            this.Manager.BeginTest("FullTestSuitePart2S738");
            this.Manager.Comment("reaching state \'S738\'");
            string temp369;
            this.Manager.Comment("executing step \'call GetExternalId(CorrectHeader)\'");
            temp369 = this.ICatalogWebServiceAdapterInstance.GetExternalId(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S739\'");
            this.Manager.Comment("checking step \'return GetExternalId/\"NoError\"\'");
            this.Manager.Assert((temp369 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalId, state S739)", TestManagerHelpers.Describe(temp369)));
            this.Manager.Comment("reaching state \'S1461\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S740
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S740() {
            this.Manager.BeginTest("FullTestSuitePart2S740");
            this.Manager.Comment("reaching state \'S740\'");
            string temp370;
            this.Manager.Comment("executing step \'call GetExternalFeedSource(CorrectHeader)\'");
            temp370 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSource(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S741\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSource/\"NoError\"\'");
            this.Manager.Assert((temp370 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSource, state S741)", TestManagerHelpers.Describe(temp370)));
            this.Manager.Comment("reaching state \'S1462\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S742
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S742() {
            this.Manager.BeginTest("FullTestSuitePart2S742");
            this.Manager.Comment("reaching state \'S742\'");
            string temp371;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObject(CorrectHeader)\'");
            temp371 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObject(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S743\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObject/\"NoError\"\'");
            this.Manager.Assert((temp371 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObject, state" +
                        " S743)", TestManagerHelpers.Describe(temp371)));
            this.Manager.Comment("reaching state \'S1463\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S744
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S744() {
            this.Manager.BeginTest("FullTestSuitePart2S744");
            this.Manager.Comment("reaching state \'S744\'");
            string temp372;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping1(CorrectHeader)\'");
            temp372 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping1(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S745\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping1/\"NoError\"\'");
            this.Manager.Assert((temp372 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping1, state S74" +
                        "5)", TestManagerHelpers.Describe(temp372)));
            this.Manager.Comment("reaching state \'S1464\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S746
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S746() {
            this.Manager.BeginTest("FullTestSuitePart2S746");
            this.Manager.Comment("reaching state \'S746\'");
            string temp373;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping2()\'");
            temp373 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping2();
            this.Manager.Comment("reaching state \'S747\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping2/\"NoError\"\'");
            this.Manager.Assert((temp373 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping2, state S74" +
                        "7)", TestManagerHelpers.Describe(temp373)));
            this.Manager.Comment("reaching state \'S1465\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S748
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S748() {
            this.Manager.BeginTest("FullTestSuitePart2S748");
            this.Manager.Comment("reaching state \'S748\'");
            string temp374;
            this.Manager.Comment("executing step \'call SaveExternalFeedMapping3()\'");
            temp374 = this.ICatalogWebServiceAdapterInstance.SaveExternalFeedMapping3();
            this.Manager.Comment("reaching state \'S749\'");
            this.Manager.Comment("checking step \'return SaveExternalFeedMapping3/\"NoError\"\'");
            this.Manager.Assert((temp374 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of SaveExternalFeedMapping3, state S74" +
                        "9)", TestManagerHelpers.Describe(temp374)));
            this.Manager.Comment("reaching state \'S1466\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S750
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S750() {
            this.Manager.BeginTest("FullTestSuitePart2S750");
            this.Manager.Comment("reaching state \'S750\'");
            string temp375;
            this.Manager.Comment("executing step \'call Ping(CorrectHeader)\'");
            temp375 = this.ICatalogWebServiceAdapterInstance.Ping(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S751\'");
            this.Manager.Comment("checking step \'return Ping/\"NoError\"\'");
            this.Manager.Assert((temp375 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of Ping, state S751)", TestManagerHelpers.Describe(temp375)));
            this.Manager.Comment("reaching state \'S1467\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S752
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S752() {
            this.Manager.BeginTest("FullTestSuitePart2S752");
            this.Manager.Comment("reaching state \'S752\'");
            string temp376;
            this.Manager.Comment("executing step \'call PurgeTaskQueue(CorrectHeader)\'");
            temp376 = this.ICatalogWebServiceAdapterInstance.PurgeTaskQueue(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S753\'");
            this.Manager.Comment("checking step \'return PurgeTaskQueue/\"NoError\"\'");
            this.Manager.Assert((temp376 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of PurgeTaskQueue, state S753)", TestManagerHelpers.Describe(temp376)));
            this.Manager.Comment("reaching state \'S1468\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S754
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S754() {
            this.Manager.BeginTest("FullTestSuitePart2S754");
            this.Manager.Comment("reaching state \'S754\'");
            string temp377;
            this.Manager.Comment("executing step \'call GetPaymentMethod(Existing,CorrectHeader)\'");
            temp377 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.Existing, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S755\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp377 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S755)", TestManagerHelpers.Describe(temp377)));
            this.Manager.Comment("reaching state \'S1469\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S756
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S756() {
            this.Manager.BeginTest("FullTestSuitePart2S756");
            this.Manager.Comment("reaching state \'S756\'");
            string temp378;
            this.Manager.Comment("executing step \'call GetPaymentMethod(New,CorrectHeader)\'");
            temp378 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethod(InputTypes.IdType.New, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S757\'");
            this.Manager.Comment("checking step \'return GetPaymentMethod/\"NoError\"\'");
            this.Manager.Assert((temp378 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethod, state S757)", TestManagerHelpers.Describe(temp378)));
            this.Manager.Comment("reaching state \'S1470\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S758
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S758() {
            this.Manager.BeginTest("FullTestSuitePart2S758");
            this.Manager.Comment("reaching state \'S758\'");
            string temp379;
            this.Manager.Comment("executing step \'call GetPaymentMethodArray(CorrectHeader)\'");
            temp379 = this.ICatalogWebServiceAdapterInstance.GetPaymentMethodArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S759\'");
            this.Manager.Comment("checking step \'return GetPaymentMethodArray/\"NoError\"\'");
            this.Manager.Assert((temp379 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetPaymentMethodArray, state S759)", TestManagerHelpers.Describe(temp379)));
            this.Manager.Comment("reaching state \'S1471\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S760
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S760() {
            this.Manager.BeginTest("FullTestSuitePart2S760");
            this.Manager.Comment("reaching state \'S760\'");
            string temp380;
            this.Manager.Comment("executing step \'call GetExternalFeedSourceArray(CorrectHeader)\'");
            temp380 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedSourceArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S761\'");
            this.Manager.Comment("checking step \'return GetExternalFeedSourceArray/\"NoError\"\'");
            this.Manager.Assert((temp380 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedSourceArray, state S" +
                        "761)", TestManagerHelpers.Describe(temp380)));
            this.Manager.Comment("reaching state \'S1472\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S762
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S762() {
            this.Manager.BeginTest("FullTestSuitePart2S762");
            this.Manager.Comment("reaching state \'S762\'");
            string temp381;
            this.Manager.Comment("executing step \'call GetExternalFeedMappingObjectArray(CorrectHeader)\'");
            temp381 = this.ICatalogWebServiceAdapterInstance.GetExternalFeedMappingObjectArray(InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S763\'");
            this.Manager.Comment("checking step \'return GetExternalFeedMappingObjectArray/\"NoError\"\'");
            this.Manager.Assert((temp381 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GetExternalFeedMappingObjectArray, " +
                        "state S763)", TestManagerHelpers.Describe(temp381)));
            this.Manager.Comment("reaching state \'S1473\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S764
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S764() {
            this.Manager.BeginTest("FullTestSuitePart2S764");
            this.Manager.Comment("reaching state \'S764\'");
            string temp382;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length0,CorrectHeader)\'");
            temp382 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S765\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp382 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S765)", TestManagerHelpers.Describe(temp382)));
            this.Manager.Comment("reaching state \'S1474\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S766
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S766() {
            this.Manager.BeginTest("FullTestSuitePart2S766");
            this.Manager.Comment("reaching state \'S766\'");
            string temp383;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length0,CorrectHeader)\'");
            temp383 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S767\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp383 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S767)", TestManagerHelpers.Describe(temp383)));
            this.Manager.Comment("reaching state \'S1475\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S768
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S768() {
            this.Manager.BeginTest("FullTestSuitePart2S768");
            this.Manager.Comment("reaching state \'S768\'");
            string temp384;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length0,CorrectHeader)\'");
            temp384 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S769\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp384 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S769)", TestManagerHelpers.Describe(temp384)));
            this.Manager.Comment("reaching state \'S1476\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S770
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S770() {
            this.Manager.BeginTest("FullTestSuitePart2S770");
            this.Manager.Comment("reaching state \'S770\'");
            string temp385;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length0,CorrectHeader)\'");
            temp385 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S771\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp385 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S771)", TestManagerHelpers.Describe(temp385)));
            this.Manager.Comment("reaching state \'S1477\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S772
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S772() {
            this.Manager.BeginTest("FullTestSuitePart2S772");
            this.Manager.Comment("reaching state \'S772\'");
            string temp386;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length0,CorrectHeader)\'");
            temp386 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S773\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp386 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S773)", TestManagerHelpers.Describe(temp386)));
            this.Manager.Comment("reaching state \'S1478\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S774
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S774() {
            this.Manager.BeginTest("FullTestSuitePart2S774");
            this.Manager.Comment("reaching state \'S774\'");
            string temp387;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length0,CorrectHeader)\'");
            temp387 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S775\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp387 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S775)", TestManagerHelpers.Describe(temp387)));
            this.Manager.Comment("reaching state \'S1479\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S776
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S776() {
            this.Manager.BeginTest("FullTestSuitePart2S776");
            this.Manager.Comment("reaching state \'S776\'");
            string temp388;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length1,CorrectHeader)\'");
            temp388 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S777\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp388 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S777)", TestManagerHelpers.Describe(temp388)));
            this.Manager.Comment("reaching state \'S1480\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S778
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S778() {
            this.Manager.BeginTest("FullTestSuitePart2S778");
            this.Manager.Comment("reaching state \'S778\'");
            string temp389;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length500,CorrectHeader)\'");
            temp389 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S779\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp389 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S779)", TestManagerHelpers.Describe(temp389)));
            this.Manager.Comment("reaching state \'S1481\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S780
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S780() {
            this.Manager.BeginTest("FullTestSuitePart2S780");
            this.Manager.Comment("reaching state \'S780\'");
            string temp390;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length1,CorrectHeader)\'");
            temp390 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S781\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp390 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S781)", TestManagerHelpers.Describe(temp390)));
            this.Manager.Comment("reaching state \'S1482\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S782
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S782() {
            this.Manager.BeginTest("FullTestSuitePart2S782");
            this.Manager.Comment("reaching state \'S782\'");
            string temp391;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length500,CorrectHeader)\'");
            temp391 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S783\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp391 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S783)", TestManagerHelpers.Describe(temp391)));
            this.Manager.Comment("reaching state \'S1483\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S784
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S784() {
            this.Manager.BeginTest("FullTestSuitePart2S784");
            this.Manager.Comment("reaching state \'S784\'");
            string temp392;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length1,CorrectHeader)\'");
            temp392 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S785\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp392 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S785)", TestManagerHelpers.Describe(temp392)));
            this.Manager.Comment("reaching state \'S1484\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S786
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S786() {
            this.Manager.BeginTest("FullTestSuitePart2S786");
            this.Manager.Comment("reaching state \'S786\'");
            string temp393;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length500,CorrectHeader)\'");
            temp393 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S787\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp393 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S787)", TestManagerHelpers.Describe(temp393)));
            this.Manager.Comment("reaching state \'S1485\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S788
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S788() {
            this.Manager.BeginTest("FullTestSuitePart2S788");
            this.Manager.Comment("reaching state \'S788\'");
            string temp394;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length1,CorrectHeader)\'");
            temp394 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S789\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp394 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S789)", TestManagerHelpers.Describe(temp394)));
            this.Manager.Comment("reaching state \'S1486\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S790
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S790() {
            this.Manager.BeginTest("FullTestSuitePart2S790");
            this.Manager.Comment("reaching state \'S790\'");
            string temp395;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length500,CorrectHeader)\'");
            temp395 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S791\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp395 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S791)", TestManagerHelpers.Describe(temp395)));
            this.Manager.Comment("reaching state \'S1487\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S792
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S792() {
            this.Manager.BeginTest("FullTestSuitePart2S792");
            this.Manager.Comment("reaching state \'S792\'");
            string temp396;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length250,CorrectHeader)\'");
            temp396 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S793\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp396 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S793)", TestManagerHelpers.Describe(temp396)));
            this.Manager.Comment("reaching state \'S1488\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S794
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S794() {
            this.Manager.BeginTest("FullTestSuitePart2S794");
            this.Manager.Comment("reaching state \'S794\'");
            string temp397;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length500,CorrectHeader)\'");
            temp397 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S795\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp397 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S795)", TestManagerHelpers.Describe(temp397)));
            this.Manager.Comment("reaching state \'S1489\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S796
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S796() {
            this.Manager.BeginTest("FullTestSuitePart2S796");
            this.Manager.Comment("reaching state \'S796\'");
            string temp398;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length1,CorrectHeader)\'");
            temp398 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S797\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp398 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S797)", TestManagerHelpers.Describe(temp398)));
            this.Manager.Comment("reaching state \'S1490\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S798
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S798() {
            this.Manager.BeginTest("FullTestSuitePart2S798");
            this.Manager.Comment("reaching state \'S798\'");
            string temp399;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length250,CorrectHeader)\'");
            temp399 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S799\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp399 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S799)", TestManagerHelpers.Describe(temp399)));
            this.Manager.Comment("reaching state \'S1491\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S800
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S800() {
            this.Manager.BeginTest("FullTestSuitePart2S800");
            this.Manager.Comment("reaching state \'S800\'");
            string temp400;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length1,CorrectHeader)\'");
            temp400 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S801\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp400 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S801)", TestManagerHelpers.Describe(temp400)));
            this.Manager.Comment("reaching state \'S1492\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S802
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S802() {
            this.Manager.BeginTest("FullTestSuitePart2S802");
            this.Manager.Comment("reaching state \'S802\'");
            string temp401;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length250,CorrectHeader)\'");
            temp401 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S803\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp401 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S803)", TestManagerHelpers.Describe(temp401)));
            this.Manager.Comment("reaching state \'S1493\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S804
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S804() {
            this.Manager.BeginTest("FullTestSuitePart2S804");
            this.Manager.Comment("reaching state \'S804\'");
            string temp402;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFull,Length251,CorrectHeader)\'");
            temp402 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFull, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S805\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp402 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S805)", TestManagerHelpers.Describe(temp402)));
            this.Manager.Comment("reaching state \'S1494\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S806
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S806() {
            this.Manager.BeginTest("FullTestSuitePart2S806");
            this.Manager.Comment("reaching state \'S806\'");
            string temp403;
            this.Manager.Comment("executing step \'call GameOfferSearch(New,Length251,CorrectHeader)\'");
            temp403 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S807\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp403 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S807)", TestManagerHelpers.Describe(temp403)));
            this.Manager.Comment("reaching state \'S1495\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S808
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S808() {
            this.Manager.BeginTest("FullTestSuitePart2S808");
            this.Manager.Comment("reaching state \'S808\'");
            string temp404;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingLast,Length251,CorrectHeader)\'");
            temp404 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingLast, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S809\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp404 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S809)", TestManagerHelpers.Describe(temp404)));
            this.Manager.Comment("reaching state \'S1496\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S810
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S810() {
            this.Manager.BeginTest("FullTestSuitePart2S810");
            this.Manager.Comment("reaching state \'S810\'");
            string temp405;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length250,CorrectHeader)\'");
            temp405 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S811\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp405 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S811)", TestManagerHelpers.Describe(temp405)));
            this.Manager.Comment("reaching state \'S1497\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S812
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S812() {
            this.Manager.BeginTest("FullTestSuitePart2S812");
            this.Manager.Comment("reaching state \'S812\'");
            string temp406;
            this.Manager.Comment("executing step \'call GameOfferSearch(Null,Length251,CorrectHeader)\'");
            temp406 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S813\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp406 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S813)", TestManagerHelpers.Describe(temp406)));
            this.Manager.Comment("reaching state \'S1498\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S814
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S814() {
            this.Manager.BeginTest("FullTestSuitePart2S814");
            this.Manager.Comment("reaching state \'S814\'");
            string temp407;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length500,CorrectHeader)\'");
            temp407 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S815\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp407 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S815)", TestManagerHelpers.Describe(temp407)));
            this.Manager.Comment("reaching state \'S1499\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S816
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S816() {
            this.Manager.BeginTest("FullTestSuitePart2S816");
            this.Manager.Comment("reaching state \'S816\'");
            string temp408;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length250,CorrectHeader)\'");
            temp408 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S817\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp408 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S817)", TestManagerHelpers.Describe(temp408)));
            this.Manager.Comment("reaching state \'S1500\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S818
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S818() {
            this.Manager.BeginTest("FullTestSuitePart2S818");
            this.Manager.Comment("reaching state \'S818\'");
            string temp409;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length250,CorrectHeader)\'");
            temp409 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S819\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp409 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S819)", TestManagerHelpers.Describe(temp409)));
            this.Manager.Comment("reaching state \'S1501\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S820
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S820() {
            this.Manager.BeginTest("FullTestSuitePart2S820");
            this.Manager.Comment("reaching state \'S820\'");
            string temp410;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingFirst,Length251,CorrectHeader)\'");
            temp410 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingFirst, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S821\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp410 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S821)", TestManagerHelpers.Describe(temp410)));
            this.Manager.Comment("reaching state \'S1502\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S822
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S822() {
            this.Manager.BeginTest("FullTestSuitePart2S822");
            this.Manager.Comment("reaching state \'S822\'");
            string temp411;
            this.Manager.Comment("executing step \'call GameOfferSearch(ExistingMiddle,Length251,CorrectHeader)\'");
            temp411 = this.ICatalogWebServiceAdapterInstance.GameOfferSearch(InputTypes.StringType.ExistingMiddle, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S823\'");
            this.Manager.Comment("checking step \'return GameOfferSearch/\"NoError\"\'");
            this.Manager.Assert((temp411 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameOfferSearch, state S823)", TestManagerHelpers.Describe(temp411)));
            this.Manager.Comment("reaching state \'S1503\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S824
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S824() {
            this.Manager.BeginTest("FullTestSuitePart2S824");
            this.Manager.Comment("reaching state \'S824\'");
            string temp412;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length0,CorrectHeader)\'");
            temp412 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S825\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp412 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S825)", TestManagerHelpers.Describe(temp412)));
            this.Manager.Comment("reaching state \'S1504\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S826
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S826() {
            this.Manager.BeginTest("FullTestSuitePart2S826");
            this.Manager.Comment("reaching state \'S826\'");
            string temp413;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length1,CorrectHeader)\'");
            temp413 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S827\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp413 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S827)", TestManagerHelpers.Describe(temp413)));
            this.Manager.Comment("reaching state \'S1505\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S828
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S828() {
            this.Manager.BeginTest("FullTestSuitePart2S828");
            this.Manager.Comment("reaching state \'S828\'");
            string temp414;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length1,CorrectHeader)\'");
            temp414 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S829\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp414 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S829)", TestManagerHelpers.Describe(temp414)));
            this.Manager.Comment("reaching state \'S1506\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S830
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S830() {
            this.Manager.BeginTest("FullTestSuitePart2S830");
            this.Manager.Comment("reaching state \'S830\'");
            string temp415;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length251,CorrectHeader)\'");
            temp415 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S831\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp415 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S831)", TestManagerHelpers.Describe(temp415)));
            this.Manager.Comment("reaching state \'S1507\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S832
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S832() {
            this.Manager.BeginTest("FullTestSuitePart2S832");
            this.Manager.Comment("reaching state \'S832\'");
            string temp416;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length500,CorrectHeader)\'");
            temp416 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S833\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp416 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S833)", TestManagerHelpers.Describe(temp416)));
            this.Manager.Comment("reaching state \'S1508\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S834
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S834() {
            this.Manager.BeginTest("FullTestSuitePart2S834");
            this.Manager.Comment("reaching state \'S834\'");
            string temp417;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length250,CorrectHeader)\'");
            temp417 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S835\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp417 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S835)", TestManagerHelpers.Describe(temp417)));
            this.Manager.Comment("reaching state \'S1509\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S836
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S836() {
            this.Manager.BeginTest("FullTestSuitePart2S836");
            this.Manager.Comment("reaching state \'S836\'");
            string temp418;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length251,CorrectHeader)\'");
            temp418 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S837\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp418 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S837)", TestManagerHelpers.Describe(temp418)));
            this.Manager.Comment("reaching state \'S1510\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S838
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S838() {
            this.Manager.BeginTest("FullTestSuitePart2S838");
            this.Manager.Comment("reaching state \'S838\'");
            string temp419;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length250,CorrectHeader)\'");
            temp419 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S839\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp419 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S839)", TestManagerHelpers.Describe(temp419)));
            this.Manager.Comment("reaching state \'S1511\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S840
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S840() {
            this.Manager.BeginTest("FullTestSuitePart2S840");
            this.Manager.Comment("reaching state \'S840\'");
            string temp420;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length1,CorrectHeader)\'");
            temp420 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S841\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp420 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S841)", TestManagerHelpers.Describe(temp420)));
            this.Manager.Comment("reaching state \'S1512\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S842
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S842() {
            this.Manager.BeginTest("FullTestSuitePart2S842");
            this.Manager.Comment("reaching state \'S842\'");
            string temp421;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length0,CorrectHeader)\'");
            temp421 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S843\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp421 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S843)", TestManagerHelpers.Describe(temp421)));
            this.Manager.Comment("reaching state \'S1513\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S844
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S844() {
            this.Manager.BeginTest("FullTestSuitePart2S844");
            this.Manager.Comment("reaching state \'S844\'");
            string temp422;
            this.Manager.Comment("executing step \'call GamePublisherSearch(New,Length500,CorrectHeader)\'");
            temp422 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.New, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S845\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp422 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S845)", TestManagerHelpers.Describe(temp422)));
            this.Manager.Comment("reaching state \'S1514\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S846
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S846() {
            this.Manager.BeginTest("FullTestSuitePart2S846");
            this.Manager.Comment("reaching state \'S846\'");
            string temp423;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length251,CorrectHeader)\'");
            temp423 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S847\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp423 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S847)", TestManagerHelpers.Describe(temp423)));
            this.Manager.Comment("reaching state \'S1515\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S848
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S848() {
            this.Manager.BeginTest("FullTestSuitePart2S848");
            this.Manager.Comment("reaching state \'S848\'");
            string temp424;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length500,CorrectHeader)\'");
            temp424 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S849\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp424 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S849)", TestManagerHelpers.Describe(temp424)));
            this.Manager.Comment("reaching state \'S1516\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S850
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S850() {
            this.Manager.BeginTest("FullTestSuitePart2S850");
            this.Manager.Comment("reaching state \'S850\'");
            string temp425;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Existing,Length250,CorrectHeader)\'");
            temp425 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S851\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp425 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S851)", TestManagerHelpers.Describe(temp425)));
            this.Manager.Comment("reaching state \'S1517\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S852
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S852() {
            this.Manager.BeginTest("FullTestSuitePart2S852");
            this.Manager.Comment("reaching state \'S852\'");
            string temp426;
            this.Manager.Comment("executing step \'call GamePublisherSearch(Null,Length0,CorrectHeader)\'");
            temp426 = this.ICatalogWebServiceAdapterInstance.GamePublisherSearch(InputTypes.FindType.Null, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S853\'");
            this.Manager.Comment("checking step \'return GamePublisherSearch/\"NoError\"\'");
            this.Manager.Assert((temp426 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GamePublisherSearch, state S853)", TestManagerHelpers.Describe(temp426)));
            this.Manager.Comment("reaching state \'S1518\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S854
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S854() {
            this.Manager.BeginTest("FullTestSuitePart2S854");
            this.Manager.Comment("reaching state \'S854\'");
            string temp427;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Negative,Length0,CorrectHeader)\'");
            temp427 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S855\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp427 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S855)", TestManagerHelpers.Describe(temp427)));
            this.Manager.Comment("reaching state \'S1519\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S856
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S856() {
            this.Manager.BeginTest("FullTestSuitePart2S856");
            this.Manager.Comment("reaching state \'S856\'");
            string temp428;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Negative,Length0,CorrectHeader)" +
                    "\'");
            temp428 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S857\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp428 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S857)", TestManagerHelpers.Describe(temp428)));
            this.Manager.Comment("reaching state \'S1520\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S858
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S858() {
            this.Manager.BeginTest("FullTestSuitePart2S858");
            this.Manager.Comment("reaching state \'S858\'");
            string temp429;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Negative,Length250,CorrectHeade" +
                    "r)\'");
            temp429 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S859\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp429 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S859)", TestManagerHelpers.Describe(temp429)));
            this.Manager.Comment("reaching state \'S1521\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S860
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S860() {
            this.Manager.BeginTest("FullTestSuitePart2S860");
            this.Manager.Comment("reaching state \'S860\'");
            string temp430;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Negative,Length500,CorrectHeade" +
                    "r)\'");
            temp430 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S861\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp430 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S861)", TestManagerHelpers.Describe(temp430)));
            this.Manager.Comment("reaching state \'S1522\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S862
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S862() {
            this.Manager.BeginTest("FullTestSuitePart2S862");
            this.Manager.Comment("reaching state \'S862\'");
            string temp431;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Negative,Length500,CorrectHeade" +
                    "r)\'");
            temp431 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S863\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp431 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S863)", TestManagerHelpers.Describe(temp431)));
            this.Manager.Comment("reaching state \'S1523\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S864
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S864() {
            this.Manager.BeginTest("FullTestSuitePart2S864");
            this.Manager.Comment("reaching state \'S864\'");
            string temp432;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MinValue,Length500,CorrectHeade" +
                    "r)\'");
            temp432 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S865\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp432 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S865)", TestManagerHelpers.Describe(temp432)));
            this.Manager.Comment("reaching state \'S1524\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S866
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S866() {
            this.Manager.BeginTest("FullTestSuitePart2S866");
            this.Manager.Comment("reaching state \'S866\'");
            string temp433;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MinValue,Length500,CorrectHeade" +
                    "r)\'");
            temp433 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S867\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp433 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S867)", TestManagerHelpers.Describe(temp433)));
            this.Manager.Comment("reaching state \'S1525\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S868
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S868() {
            this.Manager.BeginTest("FullTestSuitePart2S868");
            this.Manager.Comment("reaching state \'S868\'");
            string temp434;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp434 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S869\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp434 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S869)", TestManagerHelpers.Describe(temp434)));
            this.Manager.Comment("reaching state \'S1526\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S870
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S870() {
            this.Manager.BeginTest("FullTestSuitePart2S870");
            this.Manager.Comment("reaching state \'S870\'");
            string temp435;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length500,CorrectHead" +
                    "er)\'");
            temp435 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S871\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp435 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S871)", TestManagerHelpers.Describe(temp435)));
            this.Manager.Comment("reaching state \'S1527\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S872
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S872() {
            this.Manager.BeginTest("FullTestSuitePart2S872");
            this.Manager.Comment("reaching state \'S872\'");
            string temp436;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length1,CorrectHeader" +
                    ")\'");
            temp436 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S873\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp436 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S873)", TestManagerHelpers.Describe(temp436)));
            this.Manager.Comment("reaching state \'S1528\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S874
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S874() {
            this.Manager.BeginTest("FullTestSuitePart2S874");
            this.Manager.Comment("reaching state \'S874\'");
            string temp437;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length1,CorrectHeader)\'");
            temp437 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S875\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp437 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S875)", TestManagerHelpers.Describe(temp437)));
            this.Manager.Comment("reaching state \'S1529\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S876
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S876() {
            this.Manager.BeginTest("FullTestSuitePart2S876");
            this.Manager.Comment("reaching state \'S876\'");
            string temp438;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp438 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S877\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp438 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S877)", TestManagerHelpers.Describe(temp438)));
            this.Manager.Comment("reaching state \'S1530\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S878
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S878() {
            this.Manager.BeginTest("FullTestSuitePart2S878");
            this.Manager.Comment("reaching state \'S878\'");
            string temp439;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length250,CorrectHeader)\'");
            temp439 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S879\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp439 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S879)", TestManagerHelpers.Describe(temp439)));
            this.Manager.Comment("reaching state \'S1531\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S880
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S880() {
            this.Manager.BeginTest("FullTestSuitePart2S880");
            this.Manager.Comment("reaching state \'S880\'");
            string temp440;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Negative,Length1,CorrectHeader)" +
                    "\'");
            temp440 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S881\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp440 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S881)", TestManagerHelpers.Describe(temp440)));
            this.Manager.Comment("reaching state \'S1532\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S882
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S882() {
            this.Manager.BeginTest("FullTestSuitePart2S882");
            this.Manager.Comment("reaching state \'S882\'");
            string temp441;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Negative,Length0,CorrectHeader" +
                    ")\'");
            temp441 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S883\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp441 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S883)", TestManagerHelpers.Describe(temp441)));
            this.Manager.Comment("reaching state \'S1533\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S884
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S884() {
            this.Manager.BeginTest("FullTestSuitePart2S884");
            this.Manager.Comment("reaching state \'S884\'");
            string temp442;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Negative,Length500,CorrectHeader)\'");
            temp442 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S885\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp442 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S885)", TestManagerHelpers.Describe(temp442)));
            this.Manager.Comment("reaching state \'S1534\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S886
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S886() {
            this.Manager.BeginTest("FullTestSuitePart2S886");
            this.Manager.Comment("reaching state \'S886\'");
            string temp443;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Negative,Length500,CorrectHead" +
                    "er)\'");
            temp443 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S887\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp443 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S887)", TestManagerHelpers.Describe(temp443)));
            this.Manager.Comment("reaching state \'S1535\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S888
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S888() {
            this.Manager.BeginTest("FullTestSuitePart2S888");
            this.Manager.Comment("reaching state \'S888\'");
            string temp444;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MaxValue,Length0,CorrectHeader)\'");
            temp444 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S889\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp444 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S889)", TestManagerHelpers.Describe(temp444)));
            this.Manager.Comment("reaching state \'S1536\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S890
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S890() {
            this.Manager.BeginTest("FullTestSuitePart2S890");
            this.Manager.Comment("reaching state \'S890\'");
            string temp445;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Negative,Length1,CorrectHeader" +
                    ")\'");
            temp445 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S891\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp445 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S891)", TestManagerHelpers.Describe(temp445)));
            this.Manager.Comment("reaching state \'S1537\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S892
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S892() {
            this.Manager.BeginTest("FullTestSuitePart2S892");
            this.Manager.Comment("reaching state \'S892\'");
            string temp446;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Negative,Length1,CorrectHeader)\'");
            temp446 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S893\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp446 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S893)", TestManagerHelpers.Describe(temp446)));
            this.Manager.Comment("reaching state \'S1538\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S894
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S894() {
            this.Manager.BeginTest("FullTestSuitePart2S894");
            this.Manager.Comment("reaching state \'S894\'");
            string temp447;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Negative,Length500,CorrectHea" +
                    "der)\'");
            temp447 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S895\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp447 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S895)", TestManagerHelpers.Describe(temp447)));
            this.Manager.Comment("reaching state \'S1539\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S896
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S896() {
            this.Manager.BeginTest("FullTestSuitePart2S896");
            this.Manager.Comment("reaching state \'S896\'");
            string temp448;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Negative,Length250,CorrectHeader)\'");
            temp448 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S897\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp448 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S897)", TestManagerHelpers.Describe(temp448)));
            this.Manager.Comment("reaching state \'S1540\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S898
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S898() {
            this.Manager.BeginTest("FullTestSuitePart2S898");
            this.Manager.Comment("reaching state \'S898\'");
            string temp449;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Negative,Length1,CorrectHeade" +
                    "r)\'");
            temp449 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S899\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp449 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S899)", TestManagerHelpers.Describe(temp449)));
            this.Manager.Comment("reaching state \'S1541\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S900
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S900() {
            this.Manager.BeginTest("FullTestSuitePart2S900");
            this.Manager.Comment("reaching state \'S900\'");
            string temp450;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Negative,Length250,CorrectHead" +
                    "er)\'");
            temp450 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S901\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp450 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S901)", TestManagerHelpers.Describe(temp450)));
            this.Manager.Comment("reaching state \'S1542\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S902
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S902() {
            this.Manager.BeginTest("FullTestSuitePart2S902");
            this.Manager.Comment("reaching state \'S902\'");
            string temp451;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp451 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S903\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp451 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S903)", TestManagerHelpers.Describe(temp451)));
            this.Manager.Comment("reaching state \'S1543\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S904
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S904() {
            this.Manager.BeginTest("FullTestSuitePart2S904");
            this.Manager.Comment("reaching state \'S904\'");
            string temp452;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length250,CorrectHeader)\'");
            temp452 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S905\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp452 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S905)", TestManagerHelpers.Describe(temp452)));
            this.Manager.Comment("reaching state \'S1544\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S906
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S906() {
            this.Manager.BeginTest("FullTestSuitePart2S906");
            this.Manager.Comment("reaching state \'S906\'");
            string temp453;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length250,CorrectHeade" +
                    "r)\'");
            temp453 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S907\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp453 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S907)", TestManagerHelpers.Describe(temp453)));
            this.Manager.Comment("reaching state \'S1545\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S908
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S908() {
            this.Manager.BeginTest("FullTestSuitePart2S908");
            this.Manager.Comment("reaching state \'S908\'");
            string temp454;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length250,CorrectHea" +
                    "der)\'");
            temp454 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S909\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp454 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S909)", TestManagerHelpers.Describe(temp454)));
            this.Manager.Comment("reaching state \'S1546\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S910
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S910() {
            this.Manager.BeginTest("FullTestSuitePart2S910");
            this.Manager.Comment("reaching state \'S910\'");
            string temp455;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp455 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S911\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp455 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S911)", TestManagerHelpers.Describe(temp455)));
            this.Manager.Comment("reaching state \'S1547\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S912
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S912() {
            this.Manager.BeginTest("FullTestSuitePart2S912");
            this.Manager.Comment("reaching state \'S912\'");
            string temp456;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MaxValue,Length251,CorrectHeader)\'");
            temp456 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S913\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp456 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S913)", TestManagerHelpers.Describe(temp456)));
            this.Manager.Comment("reaching state \'S1548\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S914
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S914() {
            this.Manager.BeginTest("FullTestSuitePart2S914");
            this.Manager.Comment("reaching state \'S914\'");
            string temp457;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MaxValue,Length251,CorrectHeade" +
                    "r)\'");
            temp457 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S915\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp457 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S915)", TestManagerHelpers.Describe(temp457)));
            this.Manager.Comment("reaching state \'S1549\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S916
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S916() {
            this.Manager.BeginTest("FullTestSuitePart2S916");
            this.Manager.Comment("reaching state \'S916\'");
            string temp458;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MaxValue,Length251,CorrectHeader)\'");
            temp458 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S917\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp458 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S917)", TestManagerHelpers.Describe(temp458)));
            this.Manager.Comment("reaching state \'S1550\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S918
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S918() {
            this.Manager.BeginTest("FullTestSuitePart2S918");
            this.Manager.Comment("reaching state \'S918\'");
            string temp459;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MaxValue,Length251,CorrectHea" +
                    "der)\'");
            temp459 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S919\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp459 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S919)", TestManagerHelpers.Describe(temp459)));
            this.Manager.Comment("reaching state \'S1551\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S920
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S920() {
            this.Manager.BeginTest("FullTestSuitePart2S920");
            this.Manager.Comment("reaching state \'S920\'");
            string temp460;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MaxValue,Length251,CorrectHead" +
                    "er)\'");
            temp460 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S921\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp460 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S921)", TestManagerHelpers.Describe(temp460)));
            this.Manager.Comment("reaching state \'S1552\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S922
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S922() {
            this.Manager.BeginTest("FullTestSuitePart2S922");
            this.Manager.Comment("reaching state \'S922\'");
            string temp461;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length251,CorrectHeader)\'");
            temp461 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S923\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp461 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S923)", TestManagerHelpers.Describe(temp461)));
            this.Manager.Comment("reaching state \'S1553\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S924
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S924() {
            this.Manager.BeginTest("FullTestSuitePart2S924");
            this.Manager.Comment("reaching state \'S924\'");
            string temp462;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length500,CorrectHeader)\'");
            temp462 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S925\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp462 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S925)", TestManagerHelpers.Describe(temp462)));
            this.Manager.Comment("reaching state \'S1554\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S926
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S926() {
            this.Manager.BeginTest("FullTestSuitePart2S926");
            this.Manager.Comment("reaching state \'S926\'");
            string temp463;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length500,CorrectHea" +
                    "der)\'");
            temp463 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S927\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp463 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S927)", TestManagerHelpers.Describe(temp463)));
            this.Manager.Comment("reaching state \'S1555\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S928
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S928() {
            this.Manager.BeginTest("FullTestSuitePart2S928");
            this.Manager.Comment("reaching state \'S928\'");
            string temp464;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Negative,Length250,CorrectHea" +
                    "der)\'");
            temp464 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S929\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp464 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S929)", TestManagerHelpers.Describe(temp464)));
            this.Manager.Comment("reaching state \'S1556\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S930
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S930() {
            this.Manager.BeginTest("FullTestSuitePart2S930");
            this.Manager.Comment("reaching state \'S930\'");
            string temp465;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Negative,Length251,CorrectHeader)\'");
            temp465 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S931\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp465 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S931)", TestManagerHelpers.Describe(temp465)));
            this.Manager.Comment("reaching state \'S1557\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S932
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S932() {
            this.Manager.BeginTest("FullTestSuitePart2S932");
            this.Manager.Comment("reaching state \'S932\'");
            string temp466;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MinValue,Length1,CorrectHeader)\'");
            temp466 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S933\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp466 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S933)", TestManagerHelpers.Describe(temp466)));
            this.Manager.Comment("reaching state \'S1558\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S934
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S934() {
            this.Manager.BeginTest("FullTestSuitePart2S934");
            this.Manager.Comment("reaching state \'S934\'");
            string temp467;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length250,CorrectHead" +
                    "er)\'");
            temp467 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S935\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp467 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S935)", TestManagerHelpers.Describe(temp467)));
            this.Manager.Comment("reaching state \'S1559\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S936
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S936() {
            this.Manager.BeginTest("FullTestSuitePart2S936");
            this.Manager.Comment("reaching state \'S936\'");
            string temp468;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MinValue,Length250,CorrectHead" +
                    "er)\'");
            temp468 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S937\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp468 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S937)", TestManagerHelpers.Describe(temp468)));
            this.Manager.Comment("reaching state \'S1560\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S938
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S938() {
            this.Manager.BeginTest("FullTestSuitePart2S938");
            this.Manager.Comment("reaching state \'S938\'");
            string temp469;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Negative,Length250,CorrectHeade" +
                    "r)\'");
            temp469 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S939\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp469 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S939)", TestManagerHelpers.Describe(temp469)));
            this.Manager.Comment("reaching state \'S1561\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S940
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S940() {
            this.Manager.BeginTest("FullTestSuitePart2S940");
            this.Manager.Comment("reaching state \'S940\'");
            string temp470;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Negative,Length251,CorrectHeade" +
                    "r)\'");
            temp470 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S941\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp470 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S941)", TestManagerHelpers.Describe(temp470)));
            this.Manager.Comment("reaching state \'S1562\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S942
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S942() {
            this.Manager.BeginTest("FullTestSuitePart2S942");
            this.Manager.Comment("reaching state \'S942\'");
            string temp471;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Negative,Length0,CorrectHeader)" +
                    "\'");
            temp471 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S943\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp471 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S943)", TestManagerHelpers.Describe(temp471)));
            this.Manager.Comment("reaching state \'S1563\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S944
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S944() {
            this.Manager.BeginTest("FullTestSuitePart2S944");
            this.Manager.Comment("reaching state \'S944\'");
            string temp472;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MinValue,Length250,CorrectHeade" +
                    "r)\'");
            temp472 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S945\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp472 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S945)", TestManagerHelpers.Describe(temp472)));
            this.Manager.Comment("reaching state \'S1564\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S946
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S946() {
            this.Manager.BeginTest("FullTestSuitePart2S946");
            this.Manager.Comment("reaching state \'S946\'");
            string temp473;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MaxValue,Length0,CorrectHeader)\'");
            temp473 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S947\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp473 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S947)", TestManagerHelpers.Describe(temp473)));
            this.Manager.Comment("reaching state \'S1565\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S948
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S948() {
            this.Manager.BeginTest("FullTestSuitePart2S948");
            this.Manager.Comment("reaching state \'S948\'");
            string temp474;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length0,CorrectHeader)\'");
            temp474 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S949\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp474 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S949)", TestManagerHelpers.Describe(temp474)));
            this.Manager.Comment("reaching state \'S1566\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S950
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S950() {
            this.Manager.BeginTest("FullTestSuitePart2S950");
            this.Manager.Comment("reaching state \'S950\'");
            string temp475;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length0,CorrectHeade" +
                    "r)\'");
            temp475 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S951\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp475 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S951)", TestManagerHelpers.Describe(temp475)));
            this.Manager.Comment("reaching state \'S1567\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S952
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S952() {
            this.Manager.BeginTest("FullTestSuitePart2S952");
            this.Manager.Comment("reaching state \'S952\'");
            string temp476;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length0,CorrectHeader" +
                    ")\'");
            temp476 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S953\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp476 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S953)", TestManagerHelpers.Describe(temp476)));
            this.Manager.Comment("reaching state \'S1568\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S954
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S954() {
            this.Manager.BeginTest("FullTestSuitePart2S954");
            this.Manager.Comment("reaching state \'S954\'");
            string temp477;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MinValue,Length0,CorrectHeader)\'");
            temp477 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S955\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp477 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S955)", TestManagerHelpers.Describe(temp477)));
            this.Manager.Comment("reaching state \'S1569\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S956
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S956() {
            this.Manager.BeginTest("FullTestSuitePart2S956");
            this.Manager.Comment("reaching state \'S956\'");
            string temp478;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Negative,Length251,CorrectHea" +
                    "der)\'");
            temp478 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S957\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp478 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S957)", TestManagerHelpers.Describe(temp478)));
            this.Manager.Comment("reaching state \'S1570\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S958
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S958() {
            this.Manager.BeginTest("FullTestSuitePart2S958");
            this.Manager.Comment("reaching state \'S958\'");
            string temp479;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Negative,Length251,CorrectHead" +
                    "er)\'");
            temp479 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S959\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp479 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S959)", TestManagerHelpers.Describe(temp479)));
            this.Manager.Comment("reaching state \'S1571\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S960
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S960() {
            this.Manager.BeginTest("FullTestSuitePart2S960");
            this.Manager.Comment("reaching state \'S960\'");
            string temp480;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MinValue,Length1,CorrectHeader" +
                    ")\'");
            temp480 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S961\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp480 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S961)", TestManagerHelpers.Describe(temp480)));
            this.Manager.Comment("reaching state \'S1572\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S962
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S962() {
            this.Manager.BeginTest("FullTestSuitePart2S962");
            this.Manager.Comment("reaching state \'S962\'");
            string temp481;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MinValue,Length1,CorrectHeader)\'");
            temp481 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S963\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp481 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S963)", TestManagerHelpers.Describe(temp481)));
            this.Manager.Comment("reaching state \'S1573\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S964
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S964() {
            this.Manager.BeginTest("FullTestSuitePart2S964");
            this.Manager.Comment("reaching state \'S964\'");
            string temp482;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length1,CorrectHeader)\'");
            temp482 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S965\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp482 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S965)", TestManagerHelpers.Describe(temp482)));
            this.Manager.Comment("reaching state \'S1574\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S966
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S966() {
            this.Manager.BeginTest("FullTestSuitePart2S966");
            this.Manager.Comment("reaching state \'S966\'");
            string temp483;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Negative,Length1,CorrectHeader)\'");
            temp483 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S967\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp483 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S967)", TestManagerHelpers.Describe(temp483)));
            this.Manager.Comment("reaching state \'S1575\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S968
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S968() {
            this.Manager.BeginTest("FullTestSuitePart2S968");
            this.Manager.Comment("reaching state \'S968\'");
            string temp484;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MinValue,Length1,CorrectHeader)" +
                    "\'");
            temp484 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S969\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp484 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S969)", TestManagerHelpers.Describe(temp484)));
            this.Manager.Comment("reaching state \'S1576\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S970
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S970() {
            this.Manager.BeginTest("FullTestSuitePart2S970");
            this.Manager.Comment("reaching state \'S970\'");
            string temp485;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MinValue,Length251,CorrectHeader)\'");
            temp485 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S971\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp485 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S971)", TestManagerHelpers.Describe(temp485)));
            this.Manager.Comment("reaching state \'S1577\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S972
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S972() {
            this.Manager.BeginTest("FullTestSuitePart2S972");
            this.Manager.Comment("reaching state \'S972\'");
            string temp486;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length251,CorrectHeade" +
                    "r)\'");
            temp486 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S973\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp486 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S973)", TestManagerHelpers.Describe(temp486)));
            this.Manager.Comment("reaching state \'S1578\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S974
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S974() {
            this.Manager.BeginTest("FullTestSuitePart2S974");
            this.Manager.Comment("reaching state \'S974\'");
            string temp487;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,Existing,Length251,CorrectHeader)\'");
            temp487 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S975\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp487 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S975)", TestManagerHelpers.Describe(temp487)));
            this.Manager.Comment("reaching state \'S1579\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S976
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S976() {
            this.Manager.BeginTest("FullTestSuitePart2S976");
            this.Manager.Comment("reaching state \'S976\'");
            string temp488;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MinValue,Length250,CorrectHeade" +
                    "r)\'");
            temp488 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S977\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp488 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S977)", TestManagerHelpers.Describe(temp488)));
            this.Manager.Comment("reaching state \'S1580\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S978
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S978() {
            this.Manager.BeginTest("FullTestSuitePart2S978");
            this.Manager.Comment("reaching state \'S978\'");
            string temp489;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MinValue,Length251,CorrectHeade" +
                    "r)\'");
            temp489 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S979\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp489 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S979)", TestManagerHelpers.Describe(temp489)));
            this.Manager.Comment("reaching state \'S1581\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S980
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S980() {
            this.Manager.BeginTest("FullTestSuitePart2S980");
            this.Manager.Comment("reaching state \'S980\'");
            string temp490;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MinValue,Length250,CorrectHeader)\'");
            temp490 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S981\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp490 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S981)", TestManagerHelpers.Describe(temp490)));
            this.Manager.Comment("reaching state \'S1582\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S982
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S982() {
            this.Manager.BeginTest("FullTestSuitePart2S982");
            this.Manager.Comment("reaching state \'S982\'");
            string temp491;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MinValue,Length250,CorrectHeader)\'");
            temp491 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S983\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp491 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S983)", TestManagerHelpers.Describe(temp491)));
            this.Manager.Comment("reaching state \'S1583\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S984
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S984() {
            this.Manager.BeginTest("FullTestSuitePart2S984");
            this.Manager.Comment("reaching state \'S984\'");
            string temp492;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MinValue,Length251,CorrectHeader)\'");
            temp492 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S985\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp492 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S985)", TestManagerHelpers.Describe(temp492)));
            this.Manager.Comment("reaching state \'S1584\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S986
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S986() {
            this.Manager.BeginTest("FullTestSuitePart2S986");
            this.Manager.Comment("reaching state \'S986\'");
            string temp493;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MinValue,Length1,CorrectHeade" +
                    "r)\'");
            temp493 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S987\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp493 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S987)", TestManagerHelpers.Describe(temp493)));
            this.Manager.Comment("reaching state \'S1585\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S988
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S988() {
            this.Manager.BeginTest("FullTestSuitePart2S988");
            this.Manager.Comment("reaching state \'S988\'");
            string temp494;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MaxValue,Length1,CorrectHeader)\'");
            temp494 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S989\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp494 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S989)", TestManagerHelpers.Describe(temp494)));
            this.Manager.Comment("reaching state \'S1586\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S990
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S990() {
            this.Manager.BeginTest("FullTestSuitePart2S990");
            this.Manager.Comment("reaching state \'S990\'");
            string temp495;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Negative,Length250,CorrectHeader)\'");
            temp495 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S991\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp495 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S991)", TestManagerHelpers.Describe(temp495)));
            this.Manager.Comment("reaching state \'S1587\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S992
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S992() {
            this.Manager.BeginTest("FullTestSuitePart2S992");
            this.Manager.Comment("reaching state \'S992\'");
            string temp496;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MinValue,Length250,CorrectHea" +
                    "der)\'");
            temp496 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S993\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp496 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S993)", TestManagerHelpers.Describe(temp496)));
            this.Manager.Comment("reaching state \'S1588\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S994
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S994() {
            this.Manager.BeginTest("FullTestSuitePart2S994");
            this.Manager.Comment("reaching state \'S994\'");
            string temp497;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MaxValue,Length1,CorrectHeader)" +
                    "\'");
            temp497 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S995\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp497 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S995)", TestManagerHelpers.Describe(temp497)));
            this.Manager.Comment("reaching state \'S1589\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S996
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S996() {
            this.Manager.BeginTest("FullTestSuitePart2S996");
            this.Manager.Comment("reaching state \'S996\'");
            string temp498;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Negative,Length251,CorrectHeade" +
                    "r)\'");
            temp498 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S997\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp498 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S997)", TestManagerHelpers.Describe(temp498)));
            this.Manager.Comment("reaching state \'S1590\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S998
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S998() {
            this.Manager.BeginTest("FullTestSuitePart2S998");
            this.Manager.Comment("reaching state \'S998\'");
            string temp499;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length1,CorrectHeade" +
                    "r)\'");
            temp499 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S999\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp499 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S999)", TestManagerHelpers.Describe(temp499)));
            this.Manager.Comment("reaching state \'S1591\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1000
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1000() {
            this.Manager.BeginTest("FullTestSuitePart2S1000");
            this.Manager.Comment("reaching state \'S1000\'");
            string temp500;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MinValue,Length1,CorrectHeader)" +
                    "\'");
            temp500 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1001\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp500 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1001)", TestManagerHelpers.Describe(temp500)));
            this.Manager.Comment("reaching state \'S1592\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1002
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1002() {
            this.Manager.BeginTest("FullTestSuitePart2S1002");
            this.Manager.Comment("reaching state \'S1002\'");
            string temp501;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Negative,Length1,CorrectHeader)" +
                    "\'");
            temp501 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1003\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp501 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1003)", TestManagerHelpers.Describe(temp501)));
            this.Manager.Comment("reaching state \'S1593\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1004
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1004() {
            this.Manager.BeginTest("FullTestSuitePart2S1004");
            this.Manager.Comment("reaching state \'S1004\'");
            string temp502;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MinValue,Length251,CorrectHea" +
                    "der)\'");
            temp502 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1005\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp502 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1005)", TestManagerHelpers.Describe(temp502)));
            this.Manager.Comment("reaching state \'S1594\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1006
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1006() {
            this.Manager.BeginTest("FullTestSuitePart2S1006");
            this.Manager.Comment("reaching state \'S1006\'");
            string temp503;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Negative,Length251,CorrectHeader)\'");
            temp503 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1007\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp503 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1007)", TestManagerHelpers.Describe(temp503)));
            this.Manager.Comment("reaching state \'S1595\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1008
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1008() {
            this.Manager.BeginTest("FullTestSuitePart2S1008");
            this.Manager.Comment("reaching state \'S1008\'");
            string temp504;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MinValue,Length251,CorrectHead" +
                    "er)\'");
            temp504 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1009\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp504 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1009)", TestManagerHelpers.Describe(temp504)));
            this.Manager.Comment("reaching state \'S1596\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1010
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1010() {
            this.Manager.BeginTest("FullTestSuitePart2S1010");
            this.Manager.Comment("reaching state \'S1010\'");
            string temp505;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MinValue,Length0,CorrectHeader)\'");
            temp505 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1011\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp505 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1011)", TestManagerHelpers.Describe(temp505)));
            this.Manager.Comment("reaching state \'S1597\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1012
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1012() {
            this.Manager.BeginTest("FullTestSuitePart2S1012");
            this.Manager.Comment("reaching state \'S1012\'");
            string temp506;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MinValue,Length0,CorrectHeader)" +
                    "\'");
            temp506 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1013\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp506 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1013)", TestManagerHelpers.Describe(temp506)));
            this.Manager.Comment("reaching state \'S1598\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1014
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1014() {
            this.Manager.BeginTest("FullTestSuitePart2S1014");
            this.Manager.Comment("reaching state \'S1014\'");
            string temp507;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MinValue,Length0,CorrectHeade" +
                    "r)\'");
            temp507 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1015\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp507 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1015)", TestManagerHelpers.Describe(temp507)));
            this.Manager.Comment("reaching state \'S1599\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1016
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1016() {
            this.Manager.BeginTest("FullTestSuitePart2S1016");
            this.Manager.Comment("reaching state \'S1016\'");
            string temp508;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Negative,Length0,CorrectHeader)\'");
            temp508 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1017\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp508 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1017)", TestManagerHelpers.Describe(temp508)));
            this.Manager.Comment("reaching state \'S1600\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1018
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1018() {
            this.Manager.BeginTest("FullTestSuitePart2S1018");
            this.Manager.Comment("reaching state \'S1018\'");
            string temp509;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MinValue,Length500,CorrectHeader)\'");
            temp509 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1019\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp509 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1019)", TestManagerHelpers.Describe(temp509)));
            this.Manager.Comment("reaching state \'S1601\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1020
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1020() {
            this.Manager.BeginTest("FullTestSuitePart2S1020");
            this.Manager.Comment("reaching state \'S1020\'");
            string temp510;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Negative,Length0,CorrectHeade" +
                    "r)\'");
            temp510 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1021\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp510 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1021)", TestManagerHelpers.Describe(temp510)));
            this.Manager.Comment("reaching state \'S1602\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1022
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1022() {
            this.Manager.BeginTest("FullTestSuitePart2S1022");
            this.Manager.Comment("reaching state \'S1022\'");
            string temp511;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MinValue,Length500,CorrectHeader)\'");
            temp511 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1023\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp511 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1023)", TestManagerHelpers.Describe(temp511)));
            this.Manager.Comment("reaching state \'S1603\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1024
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1024() {
            this.Manager.BeginTest("FullTestSuitePart2S1024");
            this.Manager.Comment("reaching state \'S1024\'");
            string temp512;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MinValue,Length500,CorrectHea" +
                    "der)\'");
            temp512 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1025\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp512 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1025)", TestManagerHelpers.Describe(temp512)));
            this.Manager.Comment("reaching state \'S1604\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1026
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1026() {
            this.Manager.BeginTest("FullTestSuitePart2S1026");
            this.Manager.Comment("reaching state \'S1026\'");
            string temp513;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Negative,Length500,CorrectHeader)\'");
            temp513 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Negative, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1027\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp513 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1027)", TestManagerHelpers.Describe(temp513)));
            this.Manager.Comment("reaching state \'S1605\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1028
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1028() {
            this.Manager.BeginTest("FullTestSuitePart2S1028");
            this.Manager.Comment("reaching state \'S1028\'");
            string temp514;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,Existing,Length251,CorrectHea" +
                    "der)\'");
            temp514 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1029\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp514 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1029)", TestManagerHelpers.Describe(temp514)));
            this.Manager.Comment("reaching state \'S1606\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1030
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1030() {
            this.Manager.BeginTest("FullTestSuitePart2S1030");
            this.Manager.Comment("reaching state \'S1030\'");
            string temp515;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MaxValue,Length1,CorrectHeader)\'");
            temp515 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1031\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp515 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1031)", TestManagerHelpers.Describe(temp515)));
            this.Manager.Comment("reaching state \'S1607\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1032
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1032() {
            this.Manager.BeginTest("FullTestSuitePart2S1032");
            this.Manager.Comment("reaching state \'S1032\'");
            string temp516;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MaxValue,Length250,CorrectHeader)\'");
            temp516 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1033\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp516 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1033)", TestManagerHelpers.Describe(temp516)));
            this.Manager.Comment("reaching state \'S1608\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1034
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1034() {
            this.Manager.BeginTest("FullTestSuitePart2S1034");
            this.Manager.Comment("reaching state \'S1034\'");
            string temp517;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MaxValue,Length250,CorrectHeade" +
                    "r)\'");
            temp517 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1035\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp517 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1035)", TestManagerHelpers.Describe(temp517)));
            this.Manager.Comment("reaching state \'S1609\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1036
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1036() {
            this.Manager.BeginTest("FullTestSuitePart2S1036");
            this.Manager.Comment("reaching state \'S1036\'");
            string temp518;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MaxValue,Length250,CorrectHeader)\'");
            temp518 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1037\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp518 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1037)", TestManagerHelpers.Describe(temp518)));
            this.Manager.Comment("reaching state \'S1610\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1038
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1038() {
            this.Manager.BeginTest("FullTestSuitePart2S1038");
            this.Manager.Comment("reaching state \'S1038\'");
            string temp519;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length500,CorrectHeader)\'");
            temp519 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1039\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp519 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1039)", TestManagerHelpers.Describe(temp519)));
            this.Manager.Comment("reaching state \'S1611\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1040
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1040() {
            this.Manager.BeginTest("FullTestSuitePart2S1040");
            this.Manager.Comment("reaching state \'S1040\'");
            string temp520;
            this.Manager.Comment("executing step \'call GameTitleSearch(Null,MaxValue,Length500,CorrectHeader)\'");
            temp520 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.Null, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1041\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp520 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1041)", TestManagerHelpers.Describe(temp520)));
            this.Manager.Comment("reaching state \'S1612\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1042
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1042() {
            this.Manager.BeginTest("FullTestSuitePart2S1042");
            this.Manager.Comment("reaching state \'S1042\'");
            string temp521;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp521 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1043\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp521 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1043)", TestManagerHelpers.Describe(temp521)));
            this.Manager.Comment("reaching state \'S1613\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1044
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1044() {
            this.Manager.BeginTest("FullTestSuitePart2S1044");
            this.Manager.Comment("reaching state \'S1044\'");
            string temp522;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MaxValue,Length1,CorrectHeade" +
                    "r)\'");
            temp522 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1045\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp522 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1045)", TestManagerHelpers.Describe(temp522)));
            this.Manager.Comment("reaching state \'S1614\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1046
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1046() {
            this.Manager.BeginTest("FullTestSuitePart2S1046");
            this.Manager.Comment("reaching state \'S1046\'");
            string temp523;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MaxValue,Length250,CorrectHea" +
                    "der)\'");
            temp523 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1047\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp523 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1047)", TestManagerHelpers.Describe(temp523)));
            this.Manager.Comment("reaching state \'S1615\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1048
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1048() {
            this.Manager.BeginTest("FullTestSuitePart2S1048");
            this.Manager.Comment("reaching state \'S1048\'");
            string temp524;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MaxValue,Length500,CorrectHeade" +
                    "r)\'");
            temp524 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1049\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp524 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1049)", TestManagerHelpers.Describe(temp524)));
            this.Manager.Comment("reaching state \'S1616\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1050
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1050() {
            this.Manager.BeginTest("FullTestSuitePart2S1050");
            this.Manager.Comment("reaching state \'S1050\'");
            string temp525;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,Existing,Length0,CorrectHeader)\'");
            temp525 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1051\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp525 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1051)", TestManagerHelpers.Describe(temp525)));
            this.Manager.Comment("reaching state \'S1617\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1052
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1052() {
            this.Manager.BeginTest("FullTestSuitePart2S1052");
            this.Manager.Comment("reaching state \'S1052\'");
            string temp526;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MaxValue,Length500,CorrectHea" +
                    "der)\'");
            temp526 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1053\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp526 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1053)", TestManagerHelpers.Describe(temp526)));
            this.Manager.Comment("reaching state \'S1618\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1054
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1054() {
            this.Manager.BeginTest("FullTestSuitePart2S1054");
            this.Manager.Comment("reaching state \'S1054\'");
            string temp527;
            this.Manager.Comment("executing step \'call GameTitleSearch(New,MaxValue,Length500,CorrectHeader)\'");
            temp527 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.New, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1055\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp527 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1055)", TestManagerHelpers.Describe(temp527)));
            this.Manager.Comment("reaching state \'S1619\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1056
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1056() {
            this.Manager.BeginTest("FullTestSuitePart2S1056");
            this.Manager.Comment("reaching state \'S1056\'");
            string temp528;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFull,MaxValue,Length0,CorrectHeader)" +
                    "\'");
            temp528 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFull, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1057\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp528 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1057)", TestManagerHelpers.Describe(temp528)));
            this.Manager.Comment("reaching state \'S1620\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1058
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1058() {
            this.Manager.BeginTest("FullTestSuitePart2S1058");
            this.Manager.Comment("reaching state \'S1058\'");
            string temp529;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingMiddle,MaxValue,Length0,CorrectHeade" +
                    "r)\'");
            temp529 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingMiddle, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1059\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp529 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1059)", TestManagerHelpers.Describe(temp529)));
            this.Manager.Comment("reaching state \'S1621\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1060
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1060() {
            this.Manager.BeginTest("FullTestSuitePart2S1060");
            this.Manager.Comment("reaching state \'S1060\'");
            string temp530;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MinValue,Length500,CorrectHead" +
                    "er)\'");
            temp530 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1061\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp530 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1061)", TestManagerHelpers.Describe(temp530)));
            this.Manager.Comment("reaching state \'S1622\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1062
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1062() {
            this.Manager.BeginTest("FullTestSuitePart2S1062");
            this.Manager.Comment("reaching state \'S1062\'");
            string temp531;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,Existing,Length251,CorrectHead" +
                    "er)\'");
            temp531 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1063\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp531 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1063)", TestManagerHelpers.Describe(temp531)));
            this.Manager.Comment("reaching state \'S1623\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1064
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1064() {
            this.Manager.BeginTest("FullTestSuitePart2S1064");
            this.Manager.Comment("reaching state \'S1064\'");
            string temp532;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MinValue,Length251,CorrectHeade" +
                    "r)\'");
            temp532 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1065\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp532 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1065)", TestManagerHelpers.Describe(temp532)));
            this.Manager.Comment("reaching state \'S1624\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1066
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1066() {
            this.Manager.BeginTest("FullTestSuitePart2S1066");
            this.Manager.Comment("reaching state \'S1066\'");
            string temp533;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MinValue,Length0,CorrectHeader)" +
                    "\'");
            temp533 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1067\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp533 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1067)", TestManagerHelpers.Describe(temp533)));
            this.Manager.Comment("reaching state \'S1625\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1068
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1068() {
            this.Manager.BeginTest("FullTestSuitePart2S1068");
            this.Manager.Comment("reaching state \'S1068\'");
            string temp534;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MinValue,Length0,CorrectHeader" +
                    ")\'");
            temp534 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MinValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1069\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp534 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1069)", TestManagerHelpers.Describe(temp534)));
            this.Manager.Comment("reaching state \'S1626\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1070
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1070() {
            this.Manager.BeginTest("FullTestSuitePart2S1070");
            this.Manager.Comment("reaching state \'S1070\'");
            string temp535;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length1,CorrectHeader)" +
                    "\'");
            temp535 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1071\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp535 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1071)", TestManagerHelpers.Describe(temp535)));
            this.Manager.Comment("reaching state \'S1627\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1072
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1072() {
            this.Manager.BeginTest("FullTestSuitePart2S1072");
            this.Manager.Comment("reaching state \'S1072\'");
            string temp536;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MaxValue,Length250,CorrectHead" +
                    "er)\'");
            temp536 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1073\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp536 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1073)", TestManagerHelpers.Describe(temp536)));
            this.Manager.Comment("reaching state \'S1628\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1074
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1074() {
            this.Manager.BeginTest("FullTestSuitePart2S1074");
            this.Manager.Comment("reaching state \'S1074\'");
            string temp537;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MaxValue,Length1,CorrectHeader" +
                    ")\'");
            temp537 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1075\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp537 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1075)", TestManagerHelpers.Describe(temp537)));
            this.Manager.Comment("reaching state \'S1629\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1076
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1076() {
            this.Manager.BeginTest("FullTestSuitePart2S1076");
            this.Manager.Comment("reaching state \'S1076\'");
            string temp538;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length500,CorrectHeade" +
                    "r)\'");
            temp538 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1077\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp538 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1077)", TestManagerHelpers.Describe(temp538)));
            this.Manager.Comment("reaching state \'S1630\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1078
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1078() {
            this.Manager.BeginTest("FullTestSuitePart2S1078");
            this.Manager.Comment("reaching state \'S1078\'");
            string temp539;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MaxValue,Length500,CorrectHead" +
                    "er)\'");
            temp539 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1079\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp539 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1079)", TestManagerHelpers.Describe(temp539)));
            this.Manager.Comment("reaching state \'S1631\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1080
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1080() {
            this.Manager.BeginTest("FullTestSuitePart2S1080");
            this.Manager.Comment("reaching state \'S1080\'");
            string temp540;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingFirst,MaxValue,Length0,CorrectHeader" +
                    ")\'");
            temp540 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingFirst, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1081\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp540 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1081)", TestManagerHelpers.Describe(temp540)));
            this.Manager.Comment("reaching state \'S1632\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1082
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1082() {
            this.Manager.BeginTest("FullTestSuitePart2S1082");
            this.Manager.Comment("reaching state \'S1082\'");
            string temp541;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,Existing,Length0,CorrectHeader)" +
                    "\'");
            temp541 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.Existing, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1083\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp541 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1083)", TestManagerHelpers.Describe(temp541)));
            this.Manager.Comment("reaching state \'S1633\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1084
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1084() {
            this.Manager.BeginTest("FullTestSuitePart2S1084");
            this.Manager.Comment("reaching state \'S1084\'");
            string temp542;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MaxValue,Length250,CorrectHeade" +
                    "r)\'");
            temp542 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length250, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1085\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp542 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1085)", TestManagerHelpers.Describe(temp542)));
            this.Manager.Comment("reaching state \'S1634\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1086
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1086() {
            this.Manager.BeginTest("FullTestSuitePart2S1086");
            this.Manager.Comment("reaching state \'S1086\'");
            string temp543;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MaxValue,Length1,CorrectHeader)" +
                    "\'");
            temp543 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length1, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1087\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp543 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1087)", TestManagerHelpers.Describe(temp543)));
            this.Manager.Comment("reaching state \'S1635\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1088
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1088() {
            this.Manager.BeginTest("FullTestSuitePart2S1088");
            this.Manager.Comment("reaching state \'S1088\'");
            string temp544;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MaxValue,Length251,CorrectHeade" +
                    "r)\'");
            temp544 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length251, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1089\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp544 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1089)", TestManagerHelpers.Describe(temp544)));
            this.Manager.Comment("reaching state \'S1636\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1090
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1090() {
            this.Manager.BeginTest("FullTestSuitePart2S1090");
            this.Manager.Comment("reaching state \'S1090\'");
            string temp545;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MaxValue,Length500,CorrectHeade" +
                    "r)\'");
            temp545 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length500, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1091\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp545 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1091)", TestManagerHelpers.Describe(temp545)));
            this.Manager.Comment("reaching state \'S1637\'");
            this.Manager.EndTest();
        }
        #endregion
        
        #region Test Starting in S1092
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public virtual void FullTestSuitePart2S1092() {
            this.Manager.BeginTest("FullTestSuitePart2S1092");
            this.Manager.Comment("reaching state \'S1092\'");
            string temp546;
            this.Manager.Comment("executing step \'call GameTitleSearch(ExistingLast,MaxValue,Length0,CorrectHeader)" +
                    "\'");
            temp546 = this.ICatalogWebServiceAdapterInstance.GameTitleSearch(InputTypes.StringType.ExistingLast, InputTypes.IntegerType.MaxValue, InputTypes.MaxRows.Length0, InputTypes.ServiceType.CorrectHeader);
            this.Manager.Comment("reaching state \'S1093\'");
            this.Manager.Comment("checking step \'return GameTitleSearch/\"NoError\"\'");
            this.Manager.Assert((temp546 == "NoError"), String.Format("expected \'\"NoError\"\', actual \'{0}\' (return of GameTitleSearch, state S1093)", TestManagerHelpers.Describe(temp546)));
            this.Manager.Comment("reaching state \'S1638\'");
            this.Manager.EndTest();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\NormalizationTests.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.XPath;

using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.config;
using xonline.common.espengine;
using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.mgmt;
using xonline.common.utilities;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;
using ServerTestFramework.LiveService;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Content.Config;


namespace xonline.server.marketplace.test
{
    /// <summary>
    /// Normalization is the process whereby characters with the same meaning are converted
    /// to some base character. For example the digit '2' (\u0032) and '２' (\uFF12) have the same
    /// intent - to convey the number 'two'. In this case, we normalize (convert) all instances
    /// of '２' to '2'.
    /// </summary>
    [TestGroup, Owner("ajaffray"), TestFrequency("Check-In"), EnvRequirement("EspTests")]
    class NormalizationTests
    {
        private static EspHelper helper = null;

        private static readonly String TestDataName_RomanWidthNormalization = "roman_width_normalization";
        private static readonly String TestDataName_KatakanaWidthNormalization = "katakana_width_normalization";
        private static readonly String TestDataName_HiraganaKatakanaNormalization1 = "hiragana_katakana_normalization1";
        private static readonly String TestDataName_HiraganaKatakanaNormalization2 = "hiragana_katakana_normalization2";
        private static readonly String TestDataName_HiraganaKatakanaNormalization3 = "hiragana_katakana_normalization3";
        private static readonly String TestDataName_SpaceNormalization = "space_normalization";

        private static Dictionary<String, List<MediaDocument>> testDocuments = new Dictionary<string, List<MediaDocument>>();

        private void CreateTestDocuments()
        {
            String testDataName;
            MediaDocument d1;
            MediaDocument d2;
            List<MediaDocument> expectedResult;

            #region normalization Test Data (Roman characters)
            // ----------------------------------------------------------------------------------------------------
            // Latin full width to normal(half) width normalization
            testDataName = TestDataName_RomanWidthNormalization;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "2";

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchtitle"] = "\uFF12";      // fullwidth '2'

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            #endregion

            #region normalization Test Data (Kana)
            // ----------------------------------------------------------------------------------------------------
            // Kana half width to full width normalization
            // 
            testDataName = TestDataName_KatakanaWidthNormalization;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "\uFF71";  // Half width KATAKANA LETTER A

            d2 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d2.FlatFieldsString["searchtitle"] = "\u30A2";  // Full width KATAKANA LETTER A

            expectedResult.Add(d1);
            expectedResult.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Hiragana - Katakana normalization
            // 
            testDataName = TestDataName_HiraganaKatakanaNormalization1;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "\u3071";  // HIRAGANA LETTER PA

            d2 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d2.FlatFieldsString["searchtitle"] = "\u30D1";  // KATAKANA LETTER PA

            expectedResult.Add(d1);
            expectedResult.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Hiragana - Katakana normalization
            // 
            testDataName = TestDataName_HiraganaKatakanaNormalization2;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "\u3049";  // HIRAGANA LETTER small O

            d2 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d2.FlatFieldsString["searchtitle"] = "\u30A9";  // KATAKANA LETTER small O

            expectedResult.Add(d1);
            expectedResult.Add(d2);

            // ----------------------------------------------------------------------------------------------------
            // Hiragana - Katakana normalization
            // 
            testDataName = TestDataName_HiraganaKatakanaNormalization3;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d1.FlatFieldsString["searchtitle"] = "かずー";

            d2 = helper.CreateDocument(testDataName, 1041, "ja-jp");
            d2.FlatFieldsString["searchtitle"] = "カズー";

            expectedResult.Add(d1);
            expectedResult.Add(d2);
            #endregion

            #region normalization data (Other)
            // ----------------------------------------------------------------------------------------------------
            // Hiragana - Katakana normalization
            // 
            testDataName = TestDataName_SpaceNormalization;
            expectedResult = new List<MediaDocument>();
            testDocuments[testDataName] = expectedResult;

            d1 = helper.CreateDocument(testDataName, 1033, "en-us");
            d1.FlatFieldsString["searchtitle"] = "Alan　Wake";      // fullwidth space

            d2 = helper.CreateDocument(testDataName, 1033, "en-us");
            d2.FlatFieldsString["searchtitle"] = "Alan Wake";       // half width (normal) space

            expectedResult.Add(d1);
            expectedResult.Add(d2);

            #endregion
        }

        #region Tests
        [TestCase, TestCasePriority(1)]
        class RomanHalfWidthNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered( TestDataName_RomanWidthNormalization, "en-us", "2" );
            }
        }

        [TestCase, TestCasePriority(1)]
        class RomanFullWidthNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_RomanWidthNormalization, "en-us", "\uFF12");
            }
        }

        /// <summary>
        ///  Query with a HALF width Kana char and you should get back docs with both full and half width char
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class KanaHalfWidthNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_KatakanaWidthNormalization, "ja-jp", "\uFF71");
            }
        }

        /// <summary>
        /// Query with a FULL width Kana char and you should get back docs with both full and half width char
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class KanaFullWidthNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_KatakanaWidthNormalization, "ja-jp", "\u30A2");
            }
        }


        /// <summary>
        ///  Query HIRAGANA letter PA and get back docs with both Hiragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class HiraganaKatakanaNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization1, "ja-jp", "\u3071");
            }
        }

        /// <summary>
        ///  Query KATAKANA letter PA and get back docs with both Hiragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class KatakanaHiraganaNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization1, "ja-jp", "\u30D1");
            }
        }


        /// <summary>
        ///  Query with HIRAGANA small O and get back docs with both Huragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class HiraganaKatakanaNormalization2 : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization2, "ja-jp", "\u3049");
            }
        }

        /// <summary>
        ///  Query with KATAKANA small O and get back docs with both Huragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class KatakanaHiraganaNormalization2 : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization2, "ja-jp", "\u30A9");
            }
        }


        /// <summary>
        ///  Query with HIRAGANA phrase and get back docs with both Hiragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class HiraganaKatakanaNormalization3 : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization3, "ja-jp", "かずー");
            }
        }

        /// <summary>
        ///  Query with KATAKANA phrase and get back docs with both Hiragana and Katakana
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class KatakanaHiraganaNormalization3 : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_HiraganaKatakanaNormalization3, "ja-jp", "カズー");
            }
        }

        /// <summary>
        ///  Query with phrase containing full width space and get back docs containing either
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class FullWidthHalfWidthSpaceNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_SpaceNormalization, "en-us", "Alan　Wake");
            }
        }

        /// <summary>
        ///  Query with phrase containing half width space and get back docs containing either
        /// </summary>
        [TestCase, TestCasePriority(1)]
        class HalfWidthFullWidthSpaceNormalization : TestBase
        {
            protected override void Execute()
            {
                ResultCode = TestUnordered(TestDataName_SpaceNormalization, "en-us", "Alan Wake");
            }
        }

        #endregion

        public NormalizationTests()
        {
        }

        #region Test Infrastructure
        [TestGroupSetup]
        public void Setup()
        {
            helper = new EspHelper("normalization_test");
            CreateTestDocuments();

            helper.RemoveUnitTestDocuments();

            List<MediaDocument> allDocuments = new List<MediaDocument>();
            foreach (String k in testDocuments.Keys)
            {
                allDocuments.AddRange(testDocuments[k]);
            }
            helper.AddUnitTestDocuments(allDocuments);
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            try
            {
                //helper.RemoveUnitTestDocuments();
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("Exception during shutdown: {0}", e));
            }

            if (helper != null)
            {
                helper.Dispose();
            }
        }
        

        public static List<String> ExtractIdsFromResult(String xmlResults)
        {
            List<String> ids = new List<string>();
            XPathDocument doc = new XPathDocument(new StringReader(xmlResults));
            XPathNavigator nav = doc.CreateNavigator();

            XPathNodeIterator it = nav.Select("//a:id", helper.NamespaceManager);

            // Skip the first <a:id> element - this is the id for the whole result
            it.MoveNext();

            while (it.MoveNext())
            {
                ids.Add(it.Current.Value);
            }
            return ids;
        }

        private static TEST_RESULTS ValidateDocumentsReturned_Unordered(String testName, Hashtable filterCriteria )
        {
            String xmlAsString = helper.GetDocument(filterCriteria);
            List<String> orderedIds = ExtractIdsFromResult(xmlAsString);

            if ((orderedIds == null) || (orderedIds.Count == 0))
            {
                Global.RO.Info(String.Format("No results retrieved"));
                return TEST_RESULTS.FAILED;
            }

            List<MediaDocument> expectedResults = testDocuments[testName];
            if (orderedIds.Count != expectedResults.Count)
            {
                Global.RO.Info(String.Format("Expected {0} results but actually received {1}", orderedIds.Count, expectedResults.Count));
                return TEST_RESULTS.FAILED;
            }

            // Make sure that each of the ids in one set is in the other
            foreach (MediaDocument md in expectedResults)
            {
                if (!orderedIds.Contains(md.DocumentId))
                {
                    return TEST_RESULTS.FAILED;
                }
            }

            return TEST_RESULTS.PASSED;
        }

        public static TEST_RESULTS TestUnordered(String testDataName, String locale, string searchTerm )
        {
            Hashtable filterCriteria = helper.GetCommonFilterCriteria(testDataName, locale);

            filterCriteria["searchterm"] = searchTerm;

            Global.RO.Info(String.Format("Searching for docs with [{0}]", searchTerm ));

            return ValidateDocumentsReturned_Unordered(testDataName, filterCriteria );
        }

        #endregion

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\RollupTests.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Config;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.config;
using xonline.common.espengine;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Xml.XPath;

namespace xonline.server.marketplace.test
{

    [TestGroup, Owner("ripin"), TestFrequency("Check-In"), EnvRequirement("RollupTests")]
    public class RollupTestsGroup
    {
        private static EspEngine engine = new EspEngine();
        private static readonly LSN Lsn = new LSN("00000000001111111111");

        private static Dictionary<String, MediaDocument> TestDocuments = new Dictionary<string, MediaDocument>();
        private static int game360ProductType = 1;
        private static int gameContentType = 18; 
        private static int gameDemoType = 20;

        private static string allProductTypes = String.Format("{0}.{1}.{2}", game360ProductType, gameContentType, gameDemoType);


        private static IDocumentFeeder _documentFeeder = null;
        private static ISearchView _searchView = null;
        private static String _virtualCollectionName = null;
        private static String _contentDistributor = null;
        private static String _collectionName = null;
        protected NameValueCollection _namespaces;
        private static XmlNamespaceManager mngr = null;


        [TestGroupSetup]
        public void Setup()
        {
            try
            {
                // Retrieve virtual interface information, construct connection string
                _virtualCollectionName = Config.GetSetting("catalogwatcher_fast_esp_virtual_collection_name");

                string[] ingestionIps = Config.GetMultiSetting(MultiSetting.fastEspMarketplaceIngestionIps);
                _collectionName = Config.GetSetting(Setting.catalogwatcher_fast_esp_collection_name);
                string ingestionPort = Config.GetSetting(Setting.catalogwatcher_fast_esp_ingestion_port);

                StringBuilder espContentDistributor = new StringBuilder();
                string noFirstComma = string.Empty;

                // Format of the content distributor is a comma seperated list of host:port values
                //      host1:port,host2:port,host3:port
                foreach (string ip in ingestionIps)
                {
                    espContentDistributor.AppendFormat("{0}{1}:{2}", noFirstComma, ip, ingestionPort);
                    noFirstComma = ",";
                }
                _contentDistributor = espContentDistributor.ToString();

                IVirtualInterfaceInfo searchViewInterfaceInfo = Config.GetVirtualInterface(Component.fastEspMarketplaceSearch);

                String qrServer = String.Format("{0}:{1}", searchViewInterfaceInfo.IPAddressString, searchViewInterfaceInfo.Port);

                Global.RO.Info(String.Format("Content Distributor (for cleanup): {0} - collection {1}", _contentDistributor, _collectionName));
                Global.RO.Info(String.Format("QR Server: {0}", qrServer));

                // Content distributor (used for deleting documents after test cleanup
                IContentFactory contentFactory = Factory.CreateContentFactory();
                _documentFeeder = Factory.CreateDocumentFeeder(_contentDistributor, _collectionName);
                ISubsystem indexing = _documentFeeder.GetSystemConfig().GetSubsystem("indexing");
                indexing.CompletedCallbackEnabled = true;

                // QR Server for queries
                NameValueCollection configuration = new NameValueCollection();
                configuration.Add("Com.FastSearch.Esp.Search.Http.QRServers", qrServer);
                ISearchFactory searchFactory = SearchFactory.NewInstance(configuration);
                _searchView = searchFactory.GetSearchView(searchViewInterfaceInfo.Info1.ToLower());


                // Make sure no documents exist from a previous run that will interfere
                RemoveUnitTestDocuments();

                // Add all the test documents
                AddUnitTestDocuments();

                mngr = new XmlNamespaceManager(new NameTable());
                mngr.AddNamespace("b", "http://marketplace.xboxlive.com/resource/product/v1");
                mngr.AddNamespace("a", "http://www.w3.org/2005/Atom");
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("{0}", e));
            }
        }

        private void RemoveUnitTestDocuments()
        {
            Int32 numberOfDocumentsRemoved = 0;
            String fql = String.Format("xml:searchableXml:and( virtualCollection:\"{0}\" and testSuite:\"rollup_tests\")", _virtualCollectionName);
            Global.RO.Info(String.Format("FQL[{0}]", fql));

            IQuery query = new Query(fql);

            IQueryResult queryResult = _searchView.Search(query);
            Global.RO.Info(String.Format("Found {0} matching documents to remove.", queryResult.DocCount));

            // results are '1' indexed, not zero indexed.
            for (Int32 i = 1; i <= queryResult.DocCount; i++)
            {
                IDocumentSummary s = queryResult.GetDocument(i);
                IDocumentSummaryField sf = s.GetSummaryField("contentid");
                _documentFeeder.RemoveDocument(sf.StringValue);
                numberOfDocumentsRemoved++;
            }

            _documentFeeder.WaitForCompletion();

            Global.RO.Info(String.Format("Removed {0} existing documents", numberOfDocumentsRemoved));
        }


        private MediaDocument CreateAndAddTestDocument(String testName, String DocumentText, int lcid, string detailLevel)
        {
            MediaDocument d = new MediaDocument(Guid.NewGuid(), lcid, Lsn, _virtualCollectionName);
            d.Document = DocumentText;
            d.FlatFieldsString["detaillevel5"] = detailLevel;
            TestDocuments.Add(d.DocumentId, d);
            return d;
        }

        private void AddUnitTestDocuments()
        {
            MediaDocument d;
            TestDocuments.Clear();

            String testName = "NON GOND Game with child rollups " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.NonGONDWithRollup1_Document, _virtualCollectionName, testName, "en-US", game360ProductType), 
                                        1033, 
                                        String.Format(RollupDocuments.NonGONDWithRollup1_DetailLevel, testName));

            testName = "NON GOND Game with no child rollups " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.NonGONDWithNoRollup_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.NonGONDWithNoRollup_DetailLevel, testName));

            testName = "DLC With Offers " + gameDemoType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC1_WithOffer_Document, _virtualCollectionName, testName, "en-US", gameDemoType),
                                        1033,
                                        String.Format(RollupDocuments.DLC1_WithOffer_DetailLevel, testName));

            testName = "DLC With Offers " + gameContentType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC1_WithOffer_Document, _virtualCollectionName, testName, "en-US", gameContentType),
                                        1033,
                                        String.Format(RollupDocuments.DLC1_WithOffer_DetailLevel, testName));


            testName = "DLC Without Offers " + gameDemoType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC2_WithNoOffer_Document, _virtualCollectionName, testName, "en-US", gameDemoType),
                                        1033,
                                        String.Format(RollupDocuments.DLC2_WithNoOffer_DetailLevel, testName));

            testName = "DLC Without Offers " + gameContentType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC2_WithNoOffer_Document, _virtualCollectionName, testName, "en-US", gameContentType),
                                        1033,
                                        String.Format(RollupDocuments.DLC2_WithNoOffer_DetailLevel, testName));

            testName = "GOND Game " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithRollup1_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithRollup1_DetailLevel, testName));


            testName = "GOND Game With Valid OI " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithRollup2_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithRollup2_DetailLevel, testName, game360ProductType));


            testName = "GOND Game with Vis 3 OI " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithRollup2_OI_Vis_Level_3_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithRollup2_OI_Vis_Level_3_DetailLevel, testName));


            testName = "GOND Game with Vis 3 OI Non Browsable " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithRollup2_OI_Vis_Level_3_GameNonBrowsable_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithRollup2_OI_Vis_Level_3_GameNonBrowsable_DetailLevel, testName));


            testName = "DLC For Parent Product Param " + gameContentType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC_ForParentProduct_2_Document, _virtualCollectionName, testName, "en-US", gameContentType),
                                        1033,
                                        String.Format(RollupDocuments.DLC_ForParentProduct_2_DetailLevel, testName, game360ProductType));


            testName = "GOND Game without Rollup with Vis 3 OI " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithoutRollup3_OI_Vis_Level_3_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithoutRollup3_OI_Vis_Level_3_DetailLevel, testName));


            testName = "GOND Game without Rollup with Vis 3 OI Non Browsable " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.GONDWithoutRollup3_OI_Vis_Level_3_GameNonBrowsable_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.GONDWithoutRollup3_OI_Vis_Level_3_GameNonBrowsable_DetailLevel, testName));

            testName = "NonGOND Game with Rollup Browsable " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.NonGONDWithRollup3_GameBrowsable_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.NonGONDWithRollup3_GameBrowsable_DetailLevel, testName));

            testName = "NonGOND Game without Rollup Browsable " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.NonGONDWithNoRollup_GameBrowsable_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.NonGONDWithNoRollup3_GameBrowsable_DetailLevel, testName));


            testName = "DLC For ParentProduct2 without OI " + game360ProductType;
            d = CreateAndAddTestDocument(testName,
                                        String.Format(RollupDocuments.DLC_ForParentProduct_2_Without_OI_Document, _virtualCollectionName, testName, "en-US", game360ProductType),
                                        1033,
                                        String.Format(RollupDocuments.DLC_ForParentProduct_2_Without_OI_DetailLevel, testName));



            Global.RO.Info(String.Format("Pushing {0} documents to [{1}|{2}] and waiting for them to be indexed ...", TestDocuments.Keys.Count, _contentDistributor, _collectionName));
            using (PublisherEsp p = new PublisherEsp(_contentDistributor, _collectionName))
            {
                foreach (String docId in TestDocuments.Keys)
                {
                    MediaDocument md = TestDocuments[docId];
                    p.PublishDocument(md);
                }
                p.FlushDocuments();
            }
            Global.RO.Info(String.Format("{0} documents pushed and indexed", TestDocuments.Keys.Count));



        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            try
            {
                RemoveUnitTestDocuments();
            }
            catch (Exception e)
            {
                Global.RO.Error(String.Format("Exception during shutdown: {0}", e));
            }

            if (_documentFeeder != null)
            {
                _documentFeeder.Dispose();
            }
        }

        protected static String GetDocument(Byte[] xmlAsBytes)
        {
            return Encoding.UTF8.GetString(xmlAsBytes);
        }


        public static Hashtable GetCommonFilterCriteria()
        {
            Hashtable filterCriteria = new Hashtable();
            filterCriteria["locale"] = "en-us";
            filterCriteria["detailview"] = "detaillevel5";
            filterCriteria["resource"] = "productv1";
            filterCriteria["pagenum"] = 1;
            filterCriteria["pagesize"] = 10;
            filterCriteria["orderby"] = 1;
            filterCriteria["orderdirection"] = 1;
            filterCriteria["offerfilter"] = 2;
            filterCriteria["startdate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.UtcNow);
            filterCriteria["enddate"] = String.Format("{0:yyyy-MM-ddThh:mm:ssZ}", DateTime.UtcNow);
            filterCriteria["stores"] = 1;
            filterCriteria["tiers"] = 2;
            filterCriteria["editorialprivilege"] = 1;
            filterCriteria["categories"] = -1;
            filterCriteria["visibilityLevel"] = "1.2";
            return filterCriteria;
        }

        #region Rollup Tests for Games
        [TestCase, TestCasePriority(1)]
        class Rollup_NonGONDGameWithRollups_All360Games_Silver : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["tiers"] = 3;
                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='18']", _namespaces);   // gold only offers
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='19']", _namespaces); // Offer in future
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='47']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_NonGONDGameWithRollups_All360Games_PCStore : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["stores"] = 2;
                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes", _namespaces);                
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='18']", _namespaces);         // PC Store
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='19']", _namespaces);   // xbox store only                
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='47']", _namespaces); // xbox store only                
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_NonGONDGameWithRollups_AllGames360Games_OfferTargetType_NoResults : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["offertargettypes"] = "20";      // Game does not have this mediaType
                filterCriteria["bodyTypes"] = "2.3.0";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);                
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='18']", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='19']", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='47']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_NonGONDGameWithRollups_AllGames360Games_AvatarFilter_NoResults : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["offertargettypes"] = "47";      // Game does not have this mediaType
                filterCriteria["bodyTypes"] = "2.3";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);               
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='18']", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='19']", _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='47']", _namespaces); // Has only male items and neutral item for PC only
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_NonGONDGameWithRollups_AllGames360Games_AllFilters_AllMatch : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["offertargettypes"] = "18.19.47";
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes", _namespaces);               
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='18']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='19']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerTargetTypes/b:offerTargetType[b:mediaType='47']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_OfferFilterEqualsOne_Games : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 1;
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offertargettypes"] = "30"; // Not in any documents

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        //------------------------------------------------------------------------------------------------------------------------------------------
        // dlc

        #region Rollup Tests for DLC

        [TestCase, TestCasePriority(1)]
        class Rollup_DLC_AllDemosWithOffers : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = gameDemoType;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC With Offers {0}']", gameDemoType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/a:entry/b:offerInstances", _namespaces);

                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='DLC Without Offers {0}']", gameDemoType), _namespaces); // without offers are not returned
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='DLC With Offers {0}']", gameContentType), _namespaces); // Other productTypes are filtered out
                XmlUtil.ValidateNodeDoesNotExist(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces); // Games containing the dlc should not get returned
               
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_OfferFilterEqualsOne_DLC : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 1;
                filterCriteria["producttypes"] = gameDemoType;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC With Offers {0}']", gameDemoType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC Without Offers {0}']", gameDemoType), _namespaces); // without offers are also returned
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        #endregion

        //-----------------------------------------------------------------------------------------------------------------------------------
        // Games and DLC
        #region Rollup Tests for Games and DLC

        [TestCase, TestCasePriority(1)]
        class Rollup_GamesAndDLC : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = String.Format("{0}.{1}",game360ProductType, gameDemoType);
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC With Offers {0}']", gameDemoType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces); // Games containing that have same rollup should get returned

                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        #endregion

        #region 'Offers' parameter tests

        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_Match_GOND : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "f0000001-0000-4000-8000-0000415607d2";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // only one document should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_Match_GOND_HexOffers : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["hexoffers"] = "0x415607d2f0000001";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // only one document should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_Match_GOND_WithOfferTargetTypes : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = filterCriteria["offertargettypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "f0000001-0000-4000-8000-0000415607d2";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // No documents should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_Match_DLC : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["producttypes"] = String.Format("{0}.{1}", game360ProductType, gameContentType);
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "f0000001-0000-4000-8000-0000415607d1";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // Only one document should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC With Offers {0}']", gameContentType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_NoMatch_WithoutOfferTargetTypes : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // No other documents should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_NoMatch_WithOfferTargetTypes : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa";
                filterCriteria["offertargettypes"] = allProductTypes;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // No other documents should be returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_OffersParam_Match_GOND_OfferFilter3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offers"] = "f0000001-0000-4000-8000-0000415607d2";
                filterCriteria["offerfilter"] = 3;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // only one document should be returned                
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        #endregion

        #region 'OfferFilter=3' tests

        [TestCase, TestCasePriority(1)]
        class Rollup_OfferFilter3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                // Give me all games that have some child on sale
                filterCriteria["producttypes"] = game360ProductType;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["offerfilter"] = 3;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // only one document should be returned                
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='9']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NON GOND Game with no child rollups {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game With Valid OI {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game with Vis 3 OI {0}']", game360ProductType), _namespaces);
                // It will also return the following non browsable game since the game has children that have offers
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game with Vis 3 OI Non Browsable {0}']", game360ProductType), _namespaces);                
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NonGOND Game with Rollup Browsable {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game without Rollup with Vis 3 OI {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        #endregion

        #region 'parentProducts' parameter

        // Some terminology:
        // OI stands for OfferInstance
        // Vis stands for VisibilityLevel; so OI_Vis_3 means OfferInstance with VisibilityLevel = 3 (an offer that should not be returned i.e. the offer is not valid)
        // OF stands for OfferFilter
        
        // The FD Logic is as follows:
        // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI
        // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country


        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_OI_Present : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000001";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='2']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game With Valid OI {0}']", game360ProductType), _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='DLC For Parent Product Param {0}']", gameContentType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_OI_Vis_3_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000002";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_OI_Vis_3_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000002";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game with Vis 3 OI {0}']", game360ProductType), _namespaces);                
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_OI_Vis_3_Non_Browsable : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000003";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_OfferTargetTypes : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000003";
                filterCriteria["offertargettypes"] = allProductTypes;

                HResult hr = HResult.S_OK;
                try
                {
                    string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                }
                catch (XRLException xe)
                {
                    if (xe.HResult == HResult.XONLINE_E_ESP_ENGINE_INVALID_PARAMETER_GROUPING)
                    {
                        ResultCode = TEST_RESULTS.PASSED;
                    }
                }
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_GOND_With_No_Rollup_OI_Vis_3_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000004";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI
                // No Valid OI (since Vis = 3), so no document returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_GOND_With_No_Rollup_OI_Vis_3_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000004";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country
                // This game is Browsable in country and should get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='GOND Game without Rollup with Vis 3 OI {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_GOND_With_No_Rollup_OI_Vis_3_NonBrowsable_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000005";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI
                // This game does not have a valid OI (Vis = 3); so should not get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_GOND_With_No_Rollup_OI_Vis_3_NonBrowsable_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000005";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country
                // This game does not have a valid OI and is non browsable so should not get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_NonGOND_With_Rollup_Browsable_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000006";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI
                // No valid OI (vis = 3) so document should not get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        
        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_NonGOND_With_Rollup_Browsable_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000006";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country
                // The Game is browsable, so should return
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NonGOND Game with Rollup Browsable {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_NonGOND_Without_Rollup_Browsable_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000007";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI
                // The game is NonGOND; so should not get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_NonGOND_Without_Rollup_Browsable_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000007";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country
                // Tha game is browsable, so should get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='1']", _namespaces);
                XmlUtil.ValidateNodeExists(nav, String.Format("/a:feed/a:entry[b:test='NonGOND Game without Rollup Browsable {0}']", game360ProductType), _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        
        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_DLC_Without_OI_Vis_3_OF_2 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 2;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000008";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=2, then a document should get returned IFF it has a valid OI                
                // DLC has no valid OI so should not get returned
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class Rollup_Parent_Products_DLC_Without_OI_Vis_3_OF_3 : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;
                Hashtable filterCriteria = GetCommonFilterCriteria();
                filterCriteria["offerfilter"] = 3;
                filterCriteria["producttypes"] = allProductTypes;
                filterCriteria["bodyTypes"] = "2.3.0";
                filterCriteria["tiers"] = "2.3";
                filterCriteria["parentproducts"] = "66acd000-77fe-1000-9115-000000000008";

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                // The FD Logic is as follows:
                // When ParentProducts parameter is passed in with OF=3, then a document should get returned IFF it has a valid OI OR it is Browsable in the country
                // DLC are not browsable, so this dlc should not return
                XmlUtil.ValidateNodeExists(nav, "/a:feed[b:totalItems='0']", _namespaces);
                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        #endregion


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\EspEngine\NavigatorTests.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml;

using Com.FastSearch.Esp.Content;
using Com.FastSearch.Esp.Content.Config;
using Com.FastSearch.Esp.Content.Errors;
using Com.FastSearch.Esp.Content.Util;
using Com.FastSearch.Esp.Search;
using Com.FastSearch.Esp.Search.Query;
using Com.FastSearch.Esp.Search.Result;
using Com.FastSearch.Esp.Search.View;

using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.config;
using xonline.common.espengine;
using xonline.server.catalogwatcher;
using HResult = xonline.common.service.HResult;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Xml.XPath;

namespace xonline.server.marketplace.test
{
    class NavigatorTests
    {
    }

    [TestGroup, Owner("craigta"), TestFrequency("Check-In"), EnvRequirement("NavigatorTests")]
    public class BasicNavigatorTests
    {
        private static EspEngine engine = new EspEngine();

        private static readonly LSN Lsn = new LSN("00000000001111111111");
        private static readonly String SearchTitle = "Navigator_Test_Suite-Test_Name={0}";
        private static readonly String LetterJumpNavTestName = String.Format(SearchTitle, "BasicNavTest");
        private static readonly String AvatarBodyTypeNavTestName = String.Format(SearchTitle, "AvatarBodyTypeNavTest");
        private static readonly String ProductTypeNavTestName = String.Format(SearchTitle, "ProductTypeNavTest");
        private static readonly String Genre_1033_NavTestName = String.Format(SearchTitle, "Genre_1033_NavTestName");
        private static readonly String Genre_1041_NavTestName = String.Format(SearchTitle, "Genre_1041_NavTestName");
        private static readonly String Rating_ESRB_NavTestName = String.Format(SearchTitle, "Rating_ESRB_NavTestName");
        private static readonly String Rating_CERO_NavTestName = String.Format(SearchTitle, "Rating_CERO_NavTestName");
        private static readonly String Rating_PEGI_NavTestName = String.Format(SearchTitle, "Rating_PEGI_NavTestName");
        private static readonly String ParentAndClothingNavTestName = String.Format(SearchTitle, "ParentAndClothing");
        private static readonly String SpecialCharacterNavTestName = String.Format(SearchTitle, "SpecialCharacter");
        

        private static readonly String DocumentText = "<?xml version=\"1.0\" encoding=\"utf-8\"?><product><searchableXml><id>{1}</id><testSuite>navigator_test</testSuite><virtualCollection>{0}</virtualCollection><test>{2}</test><locale>{3}</locale></searchableXml></product>";

        private static Dictionary<String, MediaDocument> TestDocuments = new Dictionary<string, MediaDocument>();

        private static IDocumentFeeder _documentFeeder = null;
        private static ISearchView _searchView = null;
        private static String _virtualCollectionName = null;
        private static String _contentDistributor = null;
        private static String _collectionName = null;
        protected NameValueCollection _namespaces;
        private static XmlNamespaceManager mngr = null;

        [TestGroupSetup]
        public void Setup()
        {
            try
            {
                TestDocuments = new Dictionary<string, MediaDocument>();

                // Retrieve virtual interface information, construct connection string
                _virtualCollectionName = Config.GetSetting("catalogwatcher_fast_esp_virtual_collection_name");

                string[] ingestionIps = Config.GetMultiSetting(MultiSetting.fastEspMarketplaceIngestionIps);
                _collectionName = Config.GetSetting(Setting.catalogwatcher_fast_esp_collection_name);
                string ingestionPort = Config.GetSetting(Setting.catalogwatcher_fast_esp_ingestion_port);

                StringBuilder espContentDistributor = new StringBuilder();
                string noFirstComma = string.Empty;

                // Format of the content distributor is a comma seperated list of host:port values
                //      host1:port,host2:port,host3:port
                foreach (string ip in ingestionIps)
                {
                    espContentDistributor.AppendFormat("{0}{1}:{2}", noFirstComma, ip, ingestionPort);
                    noFirstComma = ",";
                }
                _contentDistributor = espContentDistributor.ToString();

                IVirtualInterfaceInfo searchViewInterfaceInfo = Config.GetVirtualInterface(Component.fastEspMarketplaceSearch);

                String qrServer = String.Format("{0}:{1}", searchViewInterfaceInfo.IPAddressString, searchViewInterfaceInfo.Port);

                Global.RO.Info(String.Format("Content Distributor (for cleanup): {0} - collection {1}", _contentDistributor, _collectionName));
                Global.RO.Info(String.Format("QR Server: {0}", qrServer));

                // Content distributor (used for deleting documents after test cleanup
                IContentFactory contentFactory = Factory.CreateContentFactory();
                _documentFeeder = Factory.CreateDocumentFeeder(_contentDistributor, _collectionName);
                ISubsystem indexing = _documentFeeder.GetSystemConfig().GetSubsystem("indexing");
                indexing.CompletedCallbackEnabled = true;

                // QR Server for queries
                NameValueCollection configuration = new NameValueCollection();
                configuration.Add("Com.FastSearch.Esp.Search.Http.QRServers", qrServer);
                ISearchFactory searchFactory = SearchFactory.NewInstance(configuration);
                _searchView = searchFactory.GetSearchView(searchViewInterfaceInfo.Info1.ToLower());


                // Make sure no documents exist from a previous run that will interfere
                RemoveUnitTestDocuments();

                // Add all the test documents
                AddUnitTestDocuments();

                mngr = new XmlNamespaceManager(new NameTable());
                mngr.AddNamespace("b", "http://marketplace.xboxlive.com/resource/product/v1" );
                mngr.AddNamespace("a", "http://www.w3.org/2005/Atom");
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("{0}", e));
            }
        }

        private void RemoveUnitTestDocuments()
        {
            Int32 numberOfDocumentsRemoved = 0;
            String fql = String.Format("xml:scope( id, return=yes) and filter(searchterm:\"{1}\") and filter(xml:searchableXml:and( virtualCollection:\"{0}\"))", _virtualCollectionName, String.Format(SearchTitle, "*"));
            Global.RO.Info(String.Format("FQL[{0}]", fql));

            IQuery query = new Query(fql);

            IQueryResult queryResult = _searchView.Search(query);
            Global.RO.Info(String.Format("Found {0} matching documents to remove.", queryResult.DocCount));

            // results are '1' indexed, not zero indexed.
            for (Int32 i = 1; i <= queryResult.DocCount; i++)
            {
                IDocumentSummary s = queryResult.GetDocument(i);
                IDocumentSummaryField sf = s.GetSummaryField("contentid");
                _documentFeeder.RemoveDocument(sf.StringValue);
                numberOfDocumentsRemoved++;
            }

            _documentFeeder.WaitForCompletion();

            Global.RO.Info(String.Format("Removed {0} existing documents", numberOfDocumentsRemoved));
        }

        private MediaDocument CreateAndAddTestDocument(String testName, String locale)
        {
            return CreateAndAddTestDocument(testName, locale, 1033);
        }

        private MediaDocument CreateAndAddTestDocument( String testName, String locale, Int32 lcid )
        {
            MediaDocument d = new MediaDocument(Guid.NewGuid(), lcid, Lsn, _virtualCollectionName);
            d.Document = String.Format(DocumentText, _virtualCollectionName, d.DocumentId, testName, locale);
            d.FlatFieldsString["searchtitle"] = testName;
            TestDocuments.Add(d.DocumentId, d);
            return d;
        }


        private void AddUnitTestDocuments()
        {
            MediaDocument d;

            TestDocuments.Clear();

            // ****************************************************
            // Letter Jump Documents
            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "a";

            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "b";
            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "b";

            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "c";
            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "c";
            d = CreateAndAddTestDocument(LetterJumpNavTestName, "en-us");
            d.FlatFieldsString["letterjump"] = "c";

            // ****************************************************
            // Product Type Documents
            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game#1";

            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game Content#18";
            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game Content#18";

            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game Demo#19";
            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game Demo#19";
            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Game Demo#19";

            d = CreateAndAddTestDocument(ProductTypeNavTestName, "en-us");
            d.FlatFieldsString["producttypenavigator"] = "Theme#20";

            // ****************************************************
            // genrenavigator documents (3)

            // English - order on return should be
            //  3002
            //  3018
            //  3019
            //  3020
            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = String.Empty;

            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Action &amp; Adventure#3002";
            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Action &amp; Adventure#3002";

            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Card &amp; Board#3018";
            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Card &amp; Board#3018";
            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Card &amp; Board#3018";

            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Classics#3019";

            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Educational#3020";
            d = CreateAndAddTestDocument(Genre_1033_NavTestName, "en-us");
            d.FlatFieldsString["genrenavigator"] = "Educational#3020";


            // Japanese - order on return should be
            //  3002
            //  3020
            //  3018
            //  3019
            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = String.Empty;

            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "アクション &amp; アドベンチャー#3002";
            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "アクション &amp; アドベンチャー#3002";

            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "テーブル ゲーム#3018";
            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "テーブル ゲーム#3018";
            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "テーブル ゲーム#3018";

            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "懐かしのゲーム#3019";

            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "エデュテイメント#3020";
            d = CreateAndAddTestDocument(Genre_1041_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["genrenavigator"] = "エデュテイメント#3020";

            
            // ****************************************************
            // ratingnavigator documents (4)
            //Rating_ESRB_NavTestName
            //Rating_CERO_NavTestName
            //Rating_PEGI_NavTestName

            // ESRB
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = String.Empty;            

            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "0#EC#0";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "1#E#10";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "2#E10#20";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "3#RPE#25";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "4#T#30";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "5#M#40";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "6#AO#50";
            d = CreateAndAddTestDocument(Rating_ESRB_NavTestName, "en-us");
            d.FlatFieldsString["ratingnavigator"] = "7#RP#60";

            d = CreateAndAddTestDocument(Rating_CERO_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["ratingnavigator"] = "0#A#100";
            d = CreateAndAddTestDocument(Rating_CERO_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["ratingnavigator"] = "1#B#110";
            d = CreateAndAddTestDocument(Rating_CERO_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["ratingnavigator"] = "2#C#120";
            d = CreateAndAddTestDocument(Rating_CERO_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["ratingnavigator"] = "3#D#130";
            d = CreateAndAddTestDocument(Rating_CERO_NavTestName, "ja-jp", 1041);
            d.FlatFieldsString["ratingnavigator"] = "4#Z#140";

            d = CreateAndAddTestDocument(Rating_PEGI_NavTestName, "fr-fr", 1036);
            d.FlatFieldsString["ratingnavigator"] = "0#3+#14001";
            d = CreateAndAddTestDocument(Rating_PEGI_NavTestName, "fr-fr", 1036);
            d.FlatFieldsString["ratingnavigator"] = "1#7+#14002";
            d = CreateAndAddTestDocument(Rating_PEGI_NavTestName, "fr-fr", 1036);
            d.FlatFieldsString["ratingnavigator"] = "2#12+#14003";
            d = CreateAndAddTestDocument(Rating_PEGI_NavTestName, "fr-fr", 1036);
            d.FlatFieldsString["ratingnavigator"] = "3#16+#14004";
            d = CreateAndAddTestDocument(Rating_PEGI_NavTestName, "fr-fr", 1036);
            d.FlatFieldsString["ratingnavigator"] = "4#18+#14005";

            
            // ****************************************************
            // Avatar Body Type Documents (5)
            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 0;                                           // unknown items will not be navigated
            
            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 1;
            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 1;

            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 2;
            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 2;
            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 2;

            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us");
            d.FlatFieldsInt32["avatarbodytype"] = 3;

            d = CreateAndAddTestDocument(AvatarBodyTypeNavTestName, "en-us"); // no body type specified

            // ****************************************************
            // Avatar store Documents (6)

            // ****************************************************
            // Parent / Avatar Clothes (7 and 8)
            // Three parents for A/1
            // Two parents for B/2
            // One parent for C/3

            // Four for clothes All Items
            // One for clothes tops
            // One for cloths polo
            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~A#1~B#2~C#3";
            d.FlatFieldsString["avatarclothesnavigator"] = "~All Items#13001~Tops#13200~Polo#13204";
           
            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~A#1~B#2";
            
            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us");
            d.FlatFieldsString["avatarclothesnavigator"] = "~All Items#13001";

            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us");
            d.FlatFieldsString["avatarclothesnavigator"] = "~All Items#13001";

            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~A#1";
            d.FlatFieldsString["avatarclothesnavigator"] = "~All Items#13001";

            d = CreateAndAddTestDocument(ParentAndClothingNavTestName, "en-us"); // nothing to navigate on

            // ****************************************************
            // Parent / Avatar Clothes (7 and 8)

            // ****************************************************
            // Use special split character, #
            
            // Titles as:
            //      Wallace #1
            //      Wallace #2
            // Doubling the # and putting them all together:
            //      ~Wallace %231#Wallace %231#66acd000-77fe-1000-9115-d8025841093c~Wallace %232#Wallace %232#66acd000-77fe-1000-9115-d80258410979            
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~Wallace %231#Wallace %231#66acd000-77fe-1000-9115-d8025841093c~Wallace %232#Wallace %232#66acd000-77fe-1000-9115-d80258410979";

            // Titles as:
            //      Wallace #1#
            //      Wallace #2#
            // ~Wallace %231%23#Wallace %231%23#66acd000-77fe-1000-9115-d8025841093c~Wallace %232%23#Wallace %232%23#66acd000-77fe-1000-9115-d80258410979            
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~Wallace %231%23#Wallace %231%23#66acd000-77fe-1000-9115-d8025841093c~Wallace %232%23#Wallace %232%23#66acd000-77fe-1000-9115-d80258410979";

            // Titles as:
            //      Wallace 1###
            // ~Wallace 1%23%23%23#Wallace 1%23%23%23#66acd000-77fe-1000-9115-d8025841093c
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~Wallace 1%23%23%23#Wallace 1%23%23%23#66acd000-77fe-1000-9115-d8025841093c";

            // Titles as:
            //      #Wallace 1
            // ~%23Wallace 1#%23Wallace 1#66acd000-77fe-1000-9115-d8025841093c
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~%23Wallace 1#%23Wallace 1#66acd000-77fe-1000-9115-d8025841093c";

            // Titles as:
            //      ###Wallace 1
            // ~%23%23%23Wallace 1#%23%23%23Wallace 1#66acd000-77fe-1000-9115-d8025841093c
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~%23%23%23Wallace 1#%23%23%23Wallace 1#66acd000-77fe-1000-9115-d8025841093c";

            // Titles as:
            //      #Wallace 1#
            // ~%23Wallace 1%23#%23Wallace 1%23#66acd000-77fe-1000-9115-d8025841093c
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~%23Wallace 1%23#%23Wallace 1%23#66acd000-77fe-1000-9115-d8025841093c";

            // Titles as:
            //      Wallace 1
            // ~Wallace 1#Wallace 1#66acd000-77fe-1000-9115-d8025841093c
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~Wallace 1#Wallace 1#66acd000-77fe-1000-9115-d8025841093c";

            // Titles as:
            //      Wallace & Gromit #1
            //      Wallace & Gromit #2
            //      Wallace & Gromit #3
            //      Wallace & Gromit #4
            // ~Wallace &amp; Gromit %231#Wallace &amp; Gromit %231#66acd000-77fe-1000-9115-d8025841093c~Wallace &amp; Gromit %232#Wallace &amp; Gromit %232#66acd000-77fe-1000-9115-d80258410979~Wallace &amp; Gromit %233#Wallace &amp; Gromit %233#66acd000-77fe-1000-9115-d8025841097a~Wallace &amp; Gromit %234#Wallace &amp; Gromit %234#66acd000-77fe-1000-9115-d8025841097b
            d = CreateAndAddTestDocument(SpecialCharacterNavTestName, "en-us");
            d.FlatFieldsString["parentproductnavigator"] = "~Wallace &amp; Gromit %231#Wallace &amp; Gromit %231#66acd000-77fe-1000-9115-d8025841093c~Wallace &amp; Gromit %232#Wallace &amp; Gromit %232#66acd000-77fe-1000-9115-d80258410979~Wallace &amp; Gromit %233#Wallace &amp; Gromit %233#66acd000-77fe-1000-9115-d8025841097a~Wallace &amp; Gromit %234#Wallace &amp; Gromit %234#66acd000-77fe-1000-9115-d8025841097b";

            
            // ****************************************************
            // Use special split character, #
            
            


            Global.RO.Info(String.Format("Pushing {0} documents to [{1}|{2}] and waiting for them to be indexed ...", TestDocuments.Keys.Count, _contentDistributor, _collectionName));
            using (PublisherEsp p = new PublisherEsp(_contentDistributor, _collectionName))
            {
                foreach (String docId in TestDocuments.Keys)
                {
                    MediaDocument md = TestDocuments[docId];
                    p.PublishDocument(md);
                }
                p.FlushDocuments();
            }
            Global.RO.Info(String.Format("{0} documents pushed and indexed", TestDocuments.Keys.Count));
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            try
            {
                RemoveUnitTestDocuments();
            }
            catch (Exception e)
            {
                Global.RO.Info(String.Format("Exception during shutdown: {0}", e));
            }

            if (_documentFeeder != null)
            {
                _documentFeeder.Dispose();
            }
        }

        protected static String GetDocument(Byte[] xmlAsBytes)
        {
            return Encoding.UTF8.GetString(xmlAsBytes);
        }


        public static Hashtable GetCommonFilterCriteria()
        {
            Hashtable filterCriteria = new Hashtable();
            filterCriteria["locale"] = "en-us";
            filterCriteria["detailview"] = "xml";
            filterCriteria["resource"] = "productv1";
            filterCriteria["pagenum"] = 1;
            filterCriteria["pagesize"] = 10;
            filterCriteria["orderby"] = 1;
            filterCriteria["orderdirection"] = 1;
            filterCriteria["offerfilter"] = 1;
            filterCriteria["editorialprivilege"] = 4;
            return filterCriteria;
        }


        #region Letter Jump Navigator
        [TestCase, TestCasePriority(1)]
        class BasicNavigatorTest_LetterJumpNav : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "1";
                filterCriteria["searchTerm"] = LetterJumpNavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                //ResponseDocument result = new ResponseDocument("", xmlAsString);
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "LetterJumpNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "6", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "1", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "a", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "b", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "c", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED; 
            }
        }
        #endregion

        #region Product Type Navigator
        [TestCase, TestCasePriority(1)]
        class BasicNavigatorTest_ProductTypeNav : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "2";
                filterCriteria["searchTerm"] = ProductTypeNavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                //ResponseDocument result = new ResponseDocument("", xmlAsString);
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "ProductTypeNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "7", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "2", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "18", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Game Content", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "19", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Game Demo", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "1", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Game", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "20", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Theme", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 4th <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion


        #region Genre Navigator
        [TestCase, TestCasePriority(1)]
        class GenreNavigator_English : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "3";
                filterCriteria["searchTerm"] = Genre_1033_NavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "GenreNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "8", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "3", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3002", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Action & Adventure", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3018", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Card & Board", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3019", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Classics", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3020", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Educational", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class GenreNavigator_Japanese : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "3";
                filterCriteria["locale"] = "ja-jp";
                filterCriteria["searchTerm"] = Genre_1041_NavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "GenreNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "8", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "3", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3002", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "アクション & アドベンチャー", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3020", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "エデュテイメント", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }
                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3018", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "テーブル ゲーム", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3019", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "懐かしのゲーム", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region Rating Navigator
        [TestCase, TestCasePriority(1)]
        class RatingNavigator_ESRB : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "4";
                filterCriteria["searchTerm"] = Rating_ESRB_NavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "RatingNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "8", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "4", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "0", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "EC", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "10", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "E", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "20", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "E10", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "25", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "RPE", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "30", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "T", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "40", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "M", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 4th <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "50", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "AO", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 5th <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "60", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "RP", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 6th <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class RatingNavigator_CERO : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "4";
                filterCriteria["locale"] = "ja-jp";
                filterCriteria["searchTerm"] = Rating_CERO_NavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "RatingNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "5", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "4", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "100", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "A", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "110", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "B", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "120", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "C", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 3rd <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "130", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "D", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 4th <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "140", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Z", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 5th <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase, TestCasePriority(1)]
        class RatingNavigator_PEGI : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "4";
                filterCriteria["locale"] = "fr-fr";
                filterCriteria["searchTerm"] = Rating_PEGI_NavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "RatingNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "5", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "4", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "14001", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "3+", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "14002", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "7+", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "14003", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "12+", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 3rd <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "14004", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "16+", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 4th <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "14005", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "18+", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected 5th <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region Avatar Body Type Navigator
        [TestCase, TestCasePriority(1)]
        class BasicNavigatorTest_AvatarBodyType : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "5";
                filterCriteria["searchTerm"] = AvatarBodyTypeNavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                //ResponseDocument result = new ResponseDocument("", xmlAsString);
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", "AvatarBodyTypeNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorHits", "6", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator/b:navigatorId", "5", _namespaces);

                XPathNodeIterator it = nav.Select("//b:navigationElement", mngr);

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "1", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "2", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region Parent and Avatar Clothing navigation
        [TestCase, TestCasePriority(1)]
        class BasicNavigatorTest_ParentAndClothes: TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "7.8"; // Parent + Clothing type
                filterCriteria["searchTerm"] = ParentAndClothingNavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                //ResponseDocument result = new ResponseDocument("", xmlAsString);
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorName", "ParentProductNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorHits", "3", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorId", "7", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='AvatarClothesNavigator']/b:navigatorName", "AvatarClothesNavigator", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='AvatarClothesNavigator']/b:navigatorHits", "4", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='AvatarClothesNavigator']/b:navigatorId", "8", _namespaces);

                XPathNodeIterator it = nav.Select("/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement", mngr);

                // Parent / Avatar Clothes (7 and 8)
                // Three parents for A/1
                // Two parents for B/2
                // One parent for C/3

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "A", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "1", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "3", _namespaces);
                }

                if (it.MoveNext())
                {                    
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "B", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "2", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "2", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "C", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "3", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }


                // make sure there are no more ...
                if (it.MoveNext())
                {
                    Global.RO.Error("Extra <navigationElement> found");
                    return;
                }

                it = nav.Select("/a:feed/b:navigators/b:navigator[b:navigatorName='AvatarClothesNavigator']/b:navigationElement", mngr);

                // Four for clothes All Items
                // One for clothes tops
                // One for cloths polo

                // move to the first 'NavigationElement' element - we know at least one exists from the previous call
                it.MoveNext();
                {
                    XPathNavigator navigationElement = it.Current.Clone();
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "All Items", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "13001", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "4", _namespaces);
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Polo", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "13204", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected second <navigationElement> element but none found");
                    return;
                }

                if (it.MoveNext())
                {
                    XPathNavigator navigationElement = it.Current;
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementName", "Tops", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementId", "13200", _namespaces);
                    XmlUtil.ValidateNodeExistsWithValue(navigationElement, "b:navigationElementHits", "1", _namespaces);
                }
                else
                {
                    Global.RO.Error("Expected third <navigationElement> element but none found");
                    return;
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region Special Character Processing
        [TestCase, TestCasePriority(1)]
        class BasicNavigatorTest_SpecialCharacters : TestBase
        {
            protected NameValueCollection _namespaces = new NameValueCollection();
            protected override void Execute()
            {
                int expectedParents = 13;
                ResultCode = TEST_RESULTS.FAILED;

                Hashtable filterCriteria = GetCommonFilterCriteria();

                filterCriteria["navigators"] = "7"; // Parent
                filterCriteria["searchTerm"] = SpecialCharacterNavTestName;

                HResult hr = HResult.S_OK;
                string xmlAsString = GetDocument(engine.Execute(filterCriteria, ref hr));

                // Now make sure that we got navigators back 
                _namespaces["b"] = "http://marketplace.xboxlive.com/resource/product/v1";
                _namespaces["a"] = "http://www.w3.org/2005/Atom";
                //ResponseDocument result = new ResponseDocument("", xmlAsString);
                XPathDocument doc = new XPathDocument(new StringReader(xmlAsString));
                XPathNavigator nav = doc.CreateNavigator();
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator", _namespaces);
                XmlUtil.ValidateNodeExists(nav, "/a:feed/b:navigators/b:navigator/b:navigatorName", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorName", "ParentProductNavigator", _namespaces);
                                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorHits", "8", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigatorId", "7", _namespaces);

                XPathNodeIterator it = nav.Select("/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement", mngr);

                int totalParents = 0;
                while (it.MoveNext())
                {
                    ++totalParents;
                }

                if (totalParents != expectedParents)
                {
                    throw new Exception(String.Format("Received [{0}] parents, expected [{1}] parents", totalParents, expectedParents));
                }

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace #1']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace #2']/b:navigationElementId", "66acd000-77fe-1000-9115-d80258410979", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace #1#']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace #2#']/b:navigationElementId", "66acd000-77fe-1000-9115-d80258410979", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace 1###']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace 1']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='#Wallace 1']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='#Wallace 1#']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace & Gromit #1']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace & Gromit #2']/b:navigationElementId", "66acd000-77fe-1000-9115-d80258410979", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace & Gromit #3']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841097a", _namespaces);
                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='Wallace & Gromit #4']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841097b", _namespaces);

                XmlUtil.ValidateNodeExistsWithValue(nav, "/a:feed/b:navigators/b:navigator[b:navigatorName='ParentProductNavigator']/b:navigationElement[b:navigationElementName='###Wallace 1']/b:navigationElementId", "66acd000-77fe-1000-9115-d8025841093c", _namespaces);                

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\test\marketplace\FECompression\FECompressionTests.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Threading;
using System.IO.Compression;
using System.Xml.XPath;
using System.Collections.Specialized;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using System.Diagnostics;

namespace xonline.server.marketplace.test
{
    [TestGroup, Owner("ripin"), TestFrequency("Daily"), EnvRequirement("xblobonly")]
    public class FeCompressionTests
    {
        [TestGroupSetup]
        public void Setup()
        {
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
        }


        public enum CatalogType
        {
            SQL_BASED_FE,
            FAST_BASED_FE            
        }
        
        public class FECompressionTests : TestBase
        {

            protected void RunTest(string url, bool useCompression, string testName)
            {
                RunTest(url, useCompression, testName, true);
            }

            protected void RunTest(string url, bool useCompression, string testName, bool shouldPass)
            {
                ResultCode = TEST_RESULTS.PASSED;

                HttpWebRequest webRequest = (HttpWebRequest)HttpWebRequest.Create(url);
                webRequest.Timeout = 45000;
                if (useCompression)
                {
                    webRequest.Headers.Add("Accept-Encoding", "gzip;q=1.0");
                }
                HttpWebResponse webResponse = (HttpWebResponse)webRequest.GetResponse();
                Stream receiveStream = webResponse.GetResponseStream();

                // Pipes the stream to a higher level stream reader with the required encoding format. 
                string downloadedString = null;
                if (useCompression)
                {
                    Stream compressedStream = new GZipStream(receiveStream, CompressionMode.Decompress);
                    StreamReader decompressionReader = new StreamReader(compressedStream, Encoding.Default);
                    downloadedString = decompressionReader.ReadToEnd();
                }
                else
                {
                    StreamReader readStream = new StreamReader(receiveStream);
                    downloadedString = readStream.ReadToEnd();
                }
                if (!downloadedString.StartsWith(@"<?xml version=""1.0"" encoding=""utf-8""?>", StringComparison.OrdinalIgnoreCase))
                {
                    if (shouldPass)
                    {
                        Global.RO.Error(String.Format("{0} Test FAILED!!! Expected data not returned.", testName));
                        ResultCode = TEST_RESULTS.FAILED;
                        throw new Exception();
                    }
                }
                else if(!shouldPass)
           