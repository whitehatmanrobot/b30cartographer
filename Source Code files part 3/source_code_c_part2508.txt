NTIALIAS_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DANTIALIASMODE;

// Vertex types supported by Direct3D
typedef enum _D3DVERTEXTYPE {
    D3DVT_VERTEX        = 1,
    D3DVT_LVERTEX       = 2,
    D3DVT_TLVERTEX      = 3,
    D3DVT_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DVERTEXTYPE;

#if(DIRECT3D_VERSION < 0x0800)

// Primitives supported by draw-primitive API
typedef enum _D3DPRIMITIVETYPE {
    D3DPT_POINTLIST     = 1,
    D3DPT_LINELIST      = 2,
    D3DPT_LINESTRIP     = 3,
    D3DPT_TRIANGLELIST  = 4,
    D3DPT_TRIANGLESTRIP = 5,
    D3DPT_TRIANGLEFAN   = 6,
    D3DPT_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DPRIMITIVETYPE;

#endif //(DIRECT3D_VERSION < 0x0800)

#endif /* DIRECT3D_VERSION >= 0x0500 */
/*
 * Amount to add to a state to generate the override for that state.
 */
#define D3DSTATE_OVERRIDE_BIAS      256

/*
 * A state which sets the override flag for the specified state type.
 */
#define D3DSTATE_OVERRIDE(type) (D3DRENDERSTATETYPE)(((DWORD) (type) + D3DSTATE_OVERRIDE_BIAS))

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DTRANSFORMSTATETYPE {
    D3DTRANSFORMSTATE_WORLD         = 1,
    D3DTRANSFORMSTATE_VIEW          = 2,
    D3DTRANSFORMSTATE_PROJECTION    = 3,
#if(DIRECT3D_VERSION >= 0x0700)
    D3DTRANSFORMSTATE_WORLD1        = 4,  // 2nd matrix to blend
    D3DTRANSFORMSTATE_WORLD2        = 5,  // 3rd matrix to blend
    D3DTRANSFORMSTATE_WORLD3        = 6,  // 4th matrix to blend
    D3DTRANSFORMSTATE_TEXTURE0      = 16,
    D3DTRANSFORMSTATE_TEXTURE1      = 17,
    D3DTRANSFORMSTATE_TEXTURE2      = 18,
    D3DTRANSFORMSTATE_TEXTURE3      = 19,
    D3DTRANSFORMSTATE_TEXTURE4      = 20,
    D3DTRANSFORMSTATE_TEXTURE5      = 21,
    D3DTRANSFORMSTATE_TEXTURE6      = 22,
    D3DTRANSFORMSTATE_TEXTURE7      = 23,
#endif /* DIRECT3D_VERSION >= 0x0700 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DTRANSFORMSTATE_FORCE_DWORD     = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DTRANSFORMSTATETYPE;

#else

//
// legacy transform state names
//
typedef enum _D3DTRANSFORMSTATETYPE D3DTRANSFORMSTATETYPE;
#define D3DTRANSFORMSTATE_WORLD         (D3DTRANSFORMSTATETYPE)1
#define D3DTRANSFORMSTATE_VIEW          (D3DTRANSFORMSTATETYPE)2
#define D3DTRANSFORMSTATE_PROJECTION    (D3DTRANSFORMSTATETYPE)3
#define D3DTRANSFORMSTATE_WORLD1        (D3DTRANSFORMSTATETYPE)4
#define D3DTRANSFORMSTATE_WORLD2        (D3DTRANSFORMSTATETYPE)5
#define D3DTRANSFORMSTATE_WORLD3        (D3DTRANSFORMSTATETYPE)6
#define D3DTRANSFORMSTATE_TEXTURE0      (D3DTRANSFORMSTATETYPE)16
#define D3DTRANSFORMSTATE_TEXTURE1      (D3DTRANSFORMSTATETYPE)17
#define D3DTRANSFORMSTATE_TEXTURE2      (D3DTRANSFORMSTATETYPE)18
#define D3DTRANSFORMSTATE_TEXTURE3      (D3DTRANSFORMSTATETYPE)19
#define D3DTRANSFORMSTATE_TEXTURE4      (D3DTRANSFORMSTATETYPE)20
#define D3DTRANSFORMSTATE_TEXTURE5      (D3DTRANSFORMSTATETYPE)21
#define D3DTRANSFORMSTATE_TEXTURE6      (D3DTRANSFORMSTATETYPE)22
#define D3DTRANSFORMSTATE_TEXTURE7      (D3DTRANSFORMSTATETYPE)23

#endif //(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DLIGHTSTATETYPE {
    D3DLIGHTSTATE_MATERIAL          = 1,
    D3DLIGHTSTATE_AMBIENT           = 2,
    D3DLIGHTSTATE_COLORMODEL        = 3,
    D3DLIGHTSTATE_FOGMODE           = 4,
    D3DLIGHTSTATE_FOGSTART          = 5,
    D3DLIGHTSTATE_FOGEND            = 6,
    D3DLIGHTSTATE_FOGDENSITY        = 7,
#if(DIRECT3D_VERSION >= 0x0600)
    D3DLIGHTSTATE_COLORVERTEX       = 8,
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DLIGHTSTATE_FORCE_DWORD         = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DLIGHTSTATETYPE;

#if(DIRECT3D_VERSION < 0x0800)

typedef enum _D3DRENDERSTATETYPE {
    D3DRENDERSTATE_ANTIALIAS          = 2,    /* D3DANTIALIASMODE */
    D3DRENDERSTATE_TEXTUREPERSPECTIVE = 4,    /* TRUE for perspective correction */
    D3DRENDERSTATE_ZENABLE            = 7,    /* D3DZBUFFERTYPE (or TRUE/FALSE for legacy) */
    D3DRENDERSTATE_FILLMODE           = 8,    /* D3DFILL_MODE        */
    D3DRENDERSTATE_SHADEMODE          = 9,    /* D3DSHADEMODE */
    D3DRENDERSTATE_LINEPATTERN        = 10,   /* D3DLINEPATTERN */
    D3DRENDERSTATE_ZWRITEENABLE       = 14,   /* TRUE to enable z writes */
    D3DRENDERSTATE_ALPHATESTENABLE    = 15,   /* TRUE to enable alpha tests */
    D3DRENDERSTATE_LASTPIXEL          = 16,   /* TRUE for last-pixel on lines */
    D3DRENDERSTATE_SRCBLEND           = 19,   /* D3DBLEND */
    D3DRENDERSTATE_DESTBLEND          = 20,   /* D3DBLEND */
    D3DRENDERSTATE_CULLMODE           = 22,   /* D3DCULL */
    D3DRENDERSTATE_ZFUNC              = 23,   /* D3DCMPFUNC */
    D3DRENDERSTATE_ALPHAREF           = 24,   /* D3DFIXED */
    D3DRENDERSTATE_ALPHAFUNC          = 25,   /* D3DCMPFUNC */
    D3DRENDERSTATE_DITHERENABLE       = 26,   /* TRUE to enable dithering */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_ALPHABLENDENABLE   = 27,   /* TRUE to enable alpha blending */
#endif /* DIRECT3D_VERSION >= 0x0500 */
    D3DRENDERSTATE_FOGENABLE          = 28,   /* TRUE to enable fog blending */
    D3DRENDERSTATE_SPECULARENABLE     = 29,   /* TRUE to enable specular */
    D3DRENDERSTATE_ZVISIBLE           = 30,   /* TRUE to enable z checking */
    D3DRENDERSTATE_STIPPLEDALPHA      = 33,   /* TRUE to enable stippled alpha (RGB device only) */
    D3DRENDERSTATE_FOGCOLOR           = 34,   /* D3DCOLOR */
    D3DRENDERSTATE_FOGTABLEMODE       = 35,   /* D3DFOGMODE */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DRENDERSTATE_FOGSTART           = 36,   /* Fog start (for both vertex and pixel fog) */
    D3DRENDERSTATE_FOGEND             = 37,   /* Fog end      */
    D3DRENDERSTATE_FOGDENSITY         = 38,   /* Fog density  */
#endif /* DIRECT3D_VERSION >= 0x0700 */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_EDGEANTIALIAS      = 40,   /* TRUE to enable edge antialiasing */
    D3DRENDERSTATE_COLORKEYENABLE     = 41,   /* TRUE to enable source colorkeyed textures */
    D3DRENDERSTATE_ZBIAS              = 47,   /* LONG Z bias */
    D3DRENDERSTATE_RANGEFOGENABLE     = 48,   /* Enables range-based fog */
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)
    D3DRENDERSTATE_STENCILENABLE      = 52,   /* BOOL enable/disable stenciling */
    D3DRENDERSTATE_STENCILFAIL        = 53,   /* D3DSTENCILOP to do if stencil test fails */
    D3DRENDERSTATE_STENCILZFAIL       = 54,   /* D3DSTENCILOP to do if stencil test passes and Z test fails */
    D3DRENDERSTATE_STENCILPASS        = 55,   /* D3DSTENCILOP to do if both stencil and Z tests pass */
    D3DRENDERSTATE_STENCILFUNC        = 56,   /* D3DCMPFUNC fn.  Stencil Test passes if ((ref & mask) stencilfn (stencil & mask)) is true */
    D3DRENDERSTATE_STENCILREF         = 57,   /* Reference value used in stencil test */
    D3DRENDERSTATE_STENCILMASK        = 58,   /* Mask value used in stencil test */
    D3DRENDERSTATE_STENCILWRITEMASK   = 59,   /* Write mask applied to values written to stencil buffer */
    D3DRENDERSTATE_TEXTUREFACTOR      = 60,   /* D3DCOLOR used for multi-texture blend */
#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0600)

    /*
     * 128 values [128, 255] are reserved for texture coordinate wrap flags.
     * These are constructed with the D3DWRAP_U and D3DWRAP_V macros. Using
     * a flags word preserves forward compatibility with texture coordinates
     * that are >2D.
     */
    D3DRENDERSTATE_WRAP0              = 128,  /* wrap for 1st texture coord. set */
    D3DRENDERSTATE_WRAP1              = 129,  /* wrap for 2nd texture coord. set */
    D3DRENDERSTATE_WRAP2              = 130,  /* wrap for 3rd texture coord. set */
    D3DRENDERSTATE_WRAP3              = 131,  /* wrap for 4th texture coord. set */
    D3DRENDERSTATE_WRAP4              = 132,  /* wrap for 5th texture coord. set */
    D3DRENDERSTATE_WRAP5              = 133,  /* wrap for 6th texture coord. set */
    D3DRENDERSTATE_WRAP6              = 134,  /* wrap for 7th texture coord. set */
    D3DRENDERSTATE_WRAP7              = 135,  /* wrap for 8th texture coord. set */
#endif /* DIRECT3D_VERSION >= 0x0600 */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DRENDERSTATE_CLIPPING            = 136,
    D3DRENDERSTATE_LIGHTING            = 137,
    D3DRENDERSTATE_EXTENTS             = 138,
    D3DRENDERSTATE_AMBIENT             = 139,
    D3DRENDERSTATE_FOGVERTEXMODE       = 140,
    D3DRENDERSTATE_COLORVERTEX         = 141,
    D3DRENDERSTATE_LOCALVIEWER         = 142,
    D3DRENDERSTATE_NORMALIZENORMALS    = 143,
    D3DRENDERSTATE_COLORKEYBLENDENABLE = 144,
    D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    = 145,
    D3DRENDERSTATE_SPECULARMATERIALSOURCE   = 146,
    D3DRENDERSTATE_AMBIENTMATERIALSOURCE    = 147,
    D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   = 148,
    D3DRENDERSTATE_VERTEXBLEND              = 151,
    D3DRENDERSTATE_CLIPPLANEENABLE          = 152,

#endif /* DIRECT3D_VERSION >= 0x0700 */

//
// retired renderstates - not supported for DX7 interfaces
//
    D3DRENDERSTATE_TEXTUREHANDLE      = 1,    /* Texture handle for legacy interfaces (Texture,Texture2) */
    D3DRENDERSTATE_TEXTUREADDRESS     = 3,    /* D3DTEXTUREADDRESS  */
    D3DRENDERSTATE_WRAPU              = 5,    /* TRUE for wrapping in u */
    D3DRENDERSTATE_WRAPV              = 6,    /* TRUE for wrapping in v */
    D3DRENDERSTATE_MONOENABLE         = 11,   /* TRUE to enable mono rasterization */
    D3DRENDERSTATE_ROP2               = 12,   /* ROP2 */
    D3DRENDERSTATE_PLANEMASK          = 13,   /* DWORD physical plane mask */
    D3DRENDERSTATE_TEXTUREMAG         = 17,   /* D3DTEXTUREFILTER */
    D3DRENDERSTATE_TEXTUREMIN         = 18,   /* D3DTEXTUREFILTER */
    D3DRENDERSTATE_TEXTUREMAPBLEND    = 21,   /* D3DTEXTUREBLEND */
    D3DRENDERSTATE_SUBPIXEL           = 31,   /* TRUE to enable subpixel correction */
    D3DRENDERSTATE_SUBPIXELX          = 32,   /* TRUE to enable correction in X only */
    D3DRENDERSTATE_STIPPLEENABLE      = 39,   /* TRUE to enable stippling */
#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_BORDERCOLOR        = 43,   /* Border color for texturing w/border */
    D3DRENDERSTATE_TEXTUREADDRESSU    = 44,   /* Texture addressing mode for U coordinate */
    D3DRENDERSTATE_TEXTUREADDRESSV    = 45,   /* Texture addressing mode for V coordinate */
    D3DRENDERSTATE_MIPMAPLODBIAS      = 46,   /* D3DVALUE Mipmap LOD bias */
    D3DRENDERSTATE_ANISOTROPY         = 49,   /* Max. anisotropy. 1 = no anisotropy */
#endif /* DIRECT3D_VERSION >= 0x0500 */
    D3DRENDERSTATE_FLUSHBATCH         = 50,   /* Explicit flush for DP batching (DX5 Only) */
#if(DIRECT3D_VERSION >= 0x0600)
    D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT=51, /* BOOL enable sort-independent transparency */
#endif /* DIRECT3D_VERSION >= 0x0600 */
    D3DRENDERSTATE_STIPPLEPATTERN00   = 64,   /* Stipple pattern 01...  */
    D3DRENDERSTATE_STIPPLEPATTERN01   = 65,
    D3DRENDERSTATE_STIPPLEPATTERN02   = 66,
    D3DRENDERSTATE_STIPPLEPATTERN03   = 67,
    D3DRENDERSTATE_STIPPLEPATTERN04   = 68,
    D3DRENDERSTATE_STIPPLEPATTERN05   = 69,
    D3DRENDERSTATE_STIPPLEPATTERN06   = 70,
    D3DRENDERSTATE_STIPPLEPATTERN07   = 71,
    D3DRENDERSTATE_STIPPLEPATTERN08   = 72,
    D3DRENDERSTATE_STIPPLEPATTERN09   = 73,
    D3DRENDERSTATE_STIPPLEPATTERN10   = 74,
    D3DRENDERSTATE_STIPPLEPATTERN11   = 75,
    D3DRENDERSTATE_STIPPLEPATTERN12   = 76,
    D3DRENDERSTATE_STIPPLEPATTERN13   = 77,
    D3DRENDERSTATE_STIPPLEPATTERN14   = 78,
    D3DRENDERSTATE_STIPPLEPATTERN15   = 79,
    D3DRENDERSTATE_STIPPLEPATTERN16   = 80,
    D3DRENDERSTATE_STIPPLEPATTERN17   = 81,
    D3DRENDERSTATE_STIPPLEPATTERN18   = 82,
    D3DRENDERSTATE_STIPPLEPATTERN19   = 83,
    D3DRENDERSTATE_STIPPLEPATTERN20   = 84,
    D3DRENDERSTATE_STIPPLEPATTERN21   = 85,
    D3DRENDERSTATE_STIPPLEPATTERN22   = 86,
    D3DRENDERSTATE_STIPPLEPATTERN23   = 87,
    D3DRENDERSTATE_STIPPLEPATTERN24   = 88,
    D3DRENDERSTATE_STIPPLEPATTERN25   = 89,
    D3DRENDERSTATE_STIPPLEPATTERN26   = 90,
    D3DRENDERSTATE_STIPPLEPATTERN27   = 91,
    D3DRENDERSTATE_STIPPLEPATTERN28   = 92,
    D3DRENDERSTATE_STIPPLEPATTERN29   = 93,
    D3DRENDERSTATE_STIPPLEPATTERN30   = 94,
    D3DRENDERSTATE_STIPPLEPATTERN31   = 95,

//
// retired renderstate names - the values are still used under new naming conventions
//
    D3DRENDERSTATE_FOGTABLESTART      = 36,   /* Fog table start    */
    D3DRENDERSTATE_FOGTABLEEND        = 37,   /* Fog table end      */
    D3DRENDERSTATE_FOGTABLEDENSITY    = 38,   /* Fog table density  */

#if(DIRECT3D_VERSION >= 0x0500)
    D3DRENDERSTATE_FORCE_DWORD        = 0x7fffffff, /* force 32-bit size enum */
#endif /* DIRECT3D_VERSION >= 0x0500 */
} D3DRENDERSTATETYPE;

#else

typedef enum _D3DRENDERSTATETYPE D3DRENDERSTATETYPE;

//
// legacy renderstate names
//
#define D3DRENDERSTATE_TEXTUREPERSPECTIVE       (D3DRENDERSTATETYPE)4
#define D3DRENDERSTATE_ZENABLE                  (D3DRENDERSTATETYPE)7
#define D3DRENDERSTATE_FILLMODE                 (D3DRENDERSTATETYPE)8
#define D3DRENDERSTATE_SHADEMODE                (D3DRENDERSTATETYPE)9
#define D3DRENDERSTATE_LINEPATTERN              (D3DRENDERSTATETYPE)10
#define D3DRENDERSTATE_ZWRITEENABLE             (D3DRENDERSTATETYPE)14
#define D3DRENDERSTATE_ALPHATESTENABLE          (D3DRENDERSTATETYPE)15
#define D3DRENDERSTATE_LASTPIXEL                (D3DRENDERSTATETYPE)16
#define D3DRENDERSTATE_SRCBLEND                 (D3DRENDERSTATETYPE)19
#define D3DRENDERSTATE_DESTBLEND                (D3DRENDERSTATETYPE)20
#define D3DRENDERSTATE_CULLMODE                 (D3DRENDERSTATETYPE)22
#define D3DRENDERSTATE_ZFUNC                    (D3DRENDERSTATETYPE)23
#define D3DRENDERSTATE_ALPHAREF                 (D3DRENDERSTATETYPE)24
#define D3DRENDERSTATE_ALPHAFUNC                (D3DRENDERSTATETYPE)25
#define D3DRENDERSTATE_DITHERENABLE             (D3DRENDERSTATETYPE)26
#define D3DRENDERSTATE_ALPHABLENDENABLE         (D3DRENDERSTATETYPE)27
#define D3DRENDERSTATE_FOGENABLE                (D3DRENDERSTATETYPE)28
#define D3DRENDERSTATE_SPECULARENABLE           (D3DRENDERSTATETYPE)29
#define D3DRENDERSTATE_ZVISIBLE                 (D3DRENDERSTATETYPE)30
#define D3DRENDERSTATE_STIPPLEDALPHA            (D3DRENDERSTATETYPE)33
#define D3DRENDERSTATE_FOGCOLOR                 (D3DRENDERSTATETYPE)34
#define D3DRENDERSTATE_FOGTABLEMODE             (D3DRENDERSTATETYPE)35
#define D3DRENDERSTATE_FOGSTART                 (D3DRENDERSTATETYPE)36
#define D3DRENDERSTATE_FOGEND                   (D3DRENDERSTATETYPE)37
#define D3DRENDERSTATE_FOGDENSITY               (D3DRENDERSTATETYPE)38
#define D3DRENDERSTATE_EDGEANTIALIAS            (D3DRENDERSTATETYPE)40
#define D3DRENDERSTATE_ZBIAS                    (D3DRENDERSTATETYPE)47
#define D3DRENDERSTATE_RANGEFOGENABLE           (D3DRENDERSTATETYPE)48
#define D3DRENDERSTATE_STENCILENABLE            (D3DRENDERSTATETYPE)52
#define D3DRENDERSTATE_STENCILFAIL              (D3DRENDERSTATETYPE)53
#define D3DRENDERSTATE_STENCILZFAIL             (D3DRENDERSTATETYPE)54
#define D3DRENDERSTATE_STENCILPASS              (D3DRENDERSTATETYPE)55
#define D3DRENDERSTATE_STENCILFUNC              (D3DRENDERSTATETYPE)56
#define D3DRENDERSTATE_STENCILREF               (D3DRENDERSTATETYPE)57
#define D3DRENDERSTATE_STENCILMASK              (D3DRENDERSTATETYPE)58
#define D3DRENDERSTATE_STENCILWRITEMASK         (D3DRENDERSTATETYPE)59
#define D3DRENDERSTATE_TEXTUREFACTOR            (D3DRENDERSTATETYPE)60
#define D3DRENDERSTATE_WRAP0                    (D3DRENDERSTATETYPE)128
#define D3DRENDERSTATE_WRAP1                    (D3DRENDERSTATETYPE)129
#define D3DRENDERSTATE_WRAP2                    (D3DRENDERSTATETYPE)130
#define D3DRENDERSTATE_WRAP3                    (D3DRENDERSTATETYPE)131
#define D3DRENDERSTATE_WRAP4                    (D3DRENDERSTATETYPE)132
#define D3DRENDERSTATE_WRAP5                    (D3DRENDERSTATETYPE)133
#define D3DRENDERSTATE_WRAP6                    (D3DRENDERSTATETYPE)134
#define D3DRENDERSTATE_WRAP7                    (D3DRENDERSTATETYPE)135

#define D3DRENDERSTATE_CLIPPING                 (D3DRENDERSTATETYPE)136
#define D3DRENDERSTATE_LIGHTING                 (D3DRENDERSTATETYPE)137
#define D3DRENDERSTATE_EXTENTS                  (D3DRENDERSTATETYPE)138
#define D3DRENDERSTATE_AMBIENT                  (D3DRENDERSTATETYPE)139
#define D3DRENDERSTATE_FOGVERTEXMODE            (D3DRENDERSTATETYPE)140
#define D3DRENDERSTATE_COLORVERTEX              (D3DRENDERSTATETYPE)141
#define D3DRENDERSTATE_LOCALVIEWER              (D3DRENDERSTATETYPE)142
#define D3DRENDERSTATE_NORMALIZENORMALS         (D3DRENDERSTATETYPE)143
#define D3DRENDERSTATE_COLORKEYBLENDENABLE      (D3DRENDERSTATETYPE)144
#define D3DRENDERSTATE_DIFFUSEMATERIALSOURCE    (D3DRENDERSTATETYPE)145
#define D3DRENDERSTATE_SPECULARMATERIALSOURCE   (D3DRENDERSTATETYPE)146
#define D3DRENDERSTATE_AMBIENTMATERIALSOURCE    (D3DRENDERSTATETYPE)147
#define D3DRENDERSTATE_EMISSIVEMATERIALSOURCE   (D3DRENDERSTATETYPE)148
#define D3DRENDERSTATE_VERTEXBLEND              (D3DRENDERSTATETYPE)151
#define D3DRENDERSTATE_CLIPPLANEENABLE          (D3DRENDERSTATETYPE)152

//
// retired renderstates - not supported for DX7 interfaces
//
#define D3DRENDERSTATE_TEXTUREHANDLE     (D3DRENDERSTATETYPE)1
#define D3DRENDERSTATE_ANTIALIAS         (D3DRENDERSTATETYPE)2
#define D3DRENDERSTATE_TEXTUREADDRESS    (D3DRENDERSTATETYPE)3
#define D3DRENDERSTATE_WRAPU             (D3DRENDERSTATETYPE)5
#define D3DRENDERSTATE_WRAPV             (D3DRENDERSTATETYPE)6
#define D3DRENDERSTATE_MONOENABLE        (D3DRENDERSTATETYPE)11
#define D3DRENDERSTATE_ROP2              (D3DRENDERSTATETYPE)12
#define D3DRENDERSTATE_PLANEMASK         (D3DRENDERSTATETYPE)13
#define D3DRENDERSTATE_TEXTUREMAG        (D3DRENDERSTATETYPE)17
#define D3DRENDERSTATE_TEXTUREMIN        (D3DRENDERSTATETYPE)18
#define D3DRENDERSTATE_TEXTUREMAPBLEND   (D3DRENDERSTATETYPE)21
#define D3DRENDERSTATE_SUBPIXEL          (D3DRENDERSTATETYPE)31
#define D3DRENDERSTATE_SUBPIXELX         (D3DRENDERSTATETYPE)32
#define D3DRENDERSTATE_STIPPLEENABLE     (D3DRENDERSTATETYPE)39
#define D3DRENDERSTATE_OLDALPHABLENDENABLE  (D3DRENDERSTATETYPE)42
#define D3DRENDERSTATE_BORDERCOLOR       (D3DRENDERSTATETYPE)43
#define D3DRENDERSTATE_TEXTUREADDRESSU   (D3DRENDERSTATETYPE)44
#define D3DRENDERSTATE_TEXTUREADDRESSV   (D3DRENDERSTATETYPE)45
#define D3DRENDERSTATE_MIPMAPLODBIAS     (D3DRENDERSTATETYPE)46
#define D3DRENDERSTATE_ANISOTROPY        (D3DRENDERSTATETYPE)49
#define D3DRENDERSTATE_FLUSHBATCH        (D3DRENDERSTATETYPE)50
#define D3DRENDERSTATE_TRANSLUCENTSORTINDEPENDENT (D3DRENDERSTATETYPE)51
#define D3DRENDERSTATE_STIPPLEPATTERN00  (D3DRENDERSTATETYPE)64
#define D3DRENDERSTATE_STIPPLEPATTERN01  (D3DRENDERSTATETYPE)65
#define D3DRENDERSTATE_STIPPLEPATTERN02  (D3DRENDERSTATETYPE)66
#define D3DRENDERSTATE_STIPPLEPATTERN03  (D3DRENDERSTATETYPE)67
#define D3DRENDERSTATE_STIPPLEPATTERN04  (D3DRENDERSTATETYPE)68
#define D3DRENDERSTATE_STIPPLEPATTERN05  (D3DRENDERSTATETYPE)69
#define D3DRENDERSTATE_STIPPLEPATTERN06  (D3DRENDERSTATETYPE)70
#define D3DRENDERSTATE_STIPPLEPATTERN07  (D3DRENDERSTATETYPE)71
#define D3DRENDERSTATE_STIPPLEPATTERN08  (D3DRENDERSTATETYPE)72
#define D3DRENDERSTATE_STIPPLEPATTERN09  (D3DRENDERSTATETYPE)73
#define D3DRENDERSTATE_STIPPLEPATTERN10  (D3DRENDERSTATETYPE)74
#define D3DRENDERSTATE_STIPPLEPATTERN11  (D3DRENDERSTATETYPE)75
#define D3DRENDERSTATE_STIPPLEPATTERN12  (D3DRENDERSTATETYPE)76
#define D3DRENDERSTATE_STIPPLEPATTERN13  (D3DRENDERSTATETYPE)77
#define D3DRENDERSTATE_STIPPLEPATTERN14  (D3DRENDERSTATETYPE)78
#define D3DRENDERSTATE_STIPPLEPATTERN15  (D3DRENDERSTATETYPE)79
#define D3DRENDERSTATE_STIPPLEPATTERN16  (D3DRENDERSTATETYPE)80
#define D3DRENDERSTATE_STIPPLEPATTERN17  (D3DRENDERSTATETYPE)81
#define D3DRENDERSTATE_STIPPLEPATTERN18  (D3DRENDERSTATETYPE)82
#define D3DRENDERSTATE_STIPPLEPATTERN19  (D3DRENDERSTATETYPE)83
#define D3DRENDERSTATE_STIPPLEPATTERN20  (D3DRENDERSTATETYPE)84
#define D3DRENDERSTATE_STIPPLEPATTERN21  (D3DRENDERSTATETYPE)85
#define D3DRENDERSTATE_STIPPLEPATTERN22  (D3DRENDERSTATETYPE)86
#define D3DRENDERSTATE_STIPPLEPATTERN23  (D3DRENDERSTATETYPE)87
#define D3DRENDERSTATE_STIPPLEPATTERN24  (D3DRENDERSTATETYPE)88
#define D3DRENDERSTATE_STIPPLEPATTERN25  (D3DRENDERSTATETYPE)89
#define D3DRENDERSTATE_STIPPLEPATTERN26  (D3DRENDERSTATETYPE)90
#define D3DRENDERSTATE_STIPPLEPATTERN27  (D3DRENDERSTATETYPE)91
#define D3DRENDERSTATE_STIPPLEPATTERN28  (D3DRENDERSTATETYPE)92
#define D3DRENDERSTATE_STIPPLEPATTERN29  (D3DRENDERSTATETYPE)93
#define D3DRENDERSTATE_STIPPLEPATTERN30  (D3DRENDERSTATETYPE)94
#define D3DRENDERSTATE_STIPPLEPATTERN31  (D3DRENDERSTATETYPE)95

//
// retired renderstates - not supported for DX8 interfaces
//
#define D3DRENDERSTATE_COLORKEYENABLE        (D3DRENDERSTATETYPE)41
#define D3DRENDERSTATE_COLORKEYBLENDENABLE   (D3DRENDERSTATETYPE)144

//
// retired renderstate names - the values are still used under new naming conventions
//
#define D3DRENDERSTATE_BLENDENABLE       (D3DRENDERSTATETYPE)27
#define D3DRENDERSTATE_FOGTABLESTART     (D3DRENDERSTATETYPE)36
#define D3DRENDERSTATE_FOGTABLEEND       (D3DRENDERSTATETYPE)37
#define D3DRENDERSTATE_FOGTABLEDENSITY   (D3DRENDERSTATETYPE)38

#endif //(DIRECT3D_VERSION < 0x0800)


#if(DIRECT3D_VERSION < 0x0800)

// Values for material source
typedef enum _D3DMATERIALCOLORSOURCE
{
    D3DMCS_MATERIAL = 0,                // Color from material is used
    D3DMCS_COLOR1   = 1,                // Diffuse vertex color is used
    D3DMCS_COLOR2   = 2,                // Specular vertex color is used
    D3DMCS_FORCE_DWORD = 0x7fffffff,    // force 32-bit size enum
} D3DMATERIALCOLORSOURCE;


#if(DIRECT3D_VERSION >= 0x0500)
// For back-compatibility with legacy compilations
#define D3DRENDERSTATE_BLENDENABLE      D3DRENDERSTATE_ALPHABLENDENABLE
#endif /* DIRECT3D_VERSION >= 0x0500 */

#if(DIRECT3D_VERSION >= 0x0600)

// Bias to apply to the texture coordinate set to apply a wrap to.
#define D3DRENDERSTATE_WRAPBIAS                 128UL

/* Flags to construct the WRAP render states */
#define D3DWRAP_U   0x00000001L
#define D3DWRAP_V   0x00000002L

#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION >= 0x0700)

/* Flags to construct the WRAP render states for 1D thru 4D texture coordinates */
#define D3DWRAPCOORD_0   0x00000001L    // same as D3DWRAP_U
#define D3DWRAPCOORD_1   0x00000002L    // same as D3DWRAP_V
#define D3DWRAPCOORD_2   0x00000004L
#define D3DWRAPCOORD_3   0x00000008L

#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif //(DIRECT3D_VERSION < 0x0800)

#define D3DRENDERSTATE_STIPPLEPATTERN(y) (D3DRENDERSTATE_STIPPLEPATTERN00 + (y))

typedef struct _D3DSTATE {
    union {
#if(DIRECT3D_VERSION < 0x0800)
    D3DTRANSFORMSTATETYPE   dtstTransformStateType;
#endif //(DIRECT3D_VERSION < 0x0800)
    D3DLIGHTSTATETYPE   dlstLightStateType;
    D3DRENDERSTATETYPE  drstRenderStateType;
    };
    union {
    DWORD           dwArg[1];
    D3DVALUE        dvArg[1];
    };
} D3DSTATE, *LPD3DSTATE;


/*
 * Operation used to load matrices
 * hDstMat = hSrcMat
 */
typedef struct _D3DMATRIXLOAD {
    D3DMATRIXHANDLE hDestMatrix;   /* Destination matrix */
    D3DMATRIXHANDLE hSrcMatrix;   /* Source matrix */
} D3DMATRIXLOAD, *LPD3DMATRIXLOAD;

/*
 * Operation used to multiply matrices
 * hDstMat = hSrcMat1 * hSrcMat2
 */
typedef struct _D3DMATRIXMULTIPLY {
    D3DMATRIXHANDLE hDestMatrix;   /* Destination matrix */
    D3DMATRIXHANDLE hSrcMatrix1;  /* First source matrix */
    D3DMATRIXHANDLE hSrcMatrix2;  /* Second source matrix */
} D3DMATRIXMULTIPLY, *LPD3DMATRIXMULTIPLY;

/*
 * Operation used to transform and light vertices.
 */
typedef struct _D3DPROCESSVERTICES {
    DWORD        dwFlags;    /* Do we transform or light or just copy? */
    WORD         wStart;     /* Index to first vertex in source */
    WORD         wDest;      /* Index to first vertex in local buffer */
    DWORD        dwCount;    /* Number of vertices to be processed */
    DWORD    dwReserved; /* Must be zero */
} D3DPROCESSVERTICES, *LPD3DPROCESSVERTICES;

#define D3DPROCESSVERTICES_TRANSFORMLIGHT   0x00000000L
#define D3DPROCESSVERTICES_TRANSFORM        0x00000001L
#define D3DPROCESSVERTICES_COPY         0x00000002L
#define D3DPROCESSVERTICES_OPMASK       0x00000007L

#define D3DPROCESSVERTICES_UPDATEEXTENTS    0x00000008L
#define D3DPROCESSVERTICES_NOCOLOR      0x00000010L


#if(DIRECT3D_VERSION >= 0x0600)


#if(DIRECT3D_VERSION < 0x0800)

/*
 * State enumerants for per-stage texture processing.
 */
typedef enum _D3DTEXTURESTAGESTATETYPE
{
    D3DTSS_COLOROP        =  1, /* D3DTEXTUREOP - per-stage blending controls for color channels */
    D3DTSS_COLORARG1      =  2, /* D3DTA_* (texture arg) */
    D3DTSS_COLORARG2      =  3, /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAOP        =  4, /* D3DTEXTUREOP - per-stage blending controls for alpha channel */
    D3DTSS_ALPHAARG1      =  5, /* D3DTA_* (texture arg) */
    D3DTSS_ALPHAARG2      =  6, /* D3DTA_* (texture arg) */
    D3DTSS_BUMPENVMAT00   =  7, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT01   =  8, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT10   =  9, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_BUMPENVMAT11   = 10, /* D3DVALUE (bump mapping matrix) */
    D3DTSS_TEXCOORDINDEX  = 11, /* identifies which set of texture coordinates index this texture */
    D3DTSS_ADDRESS        = 12, /* D3DTEXTUREADDRESS for both coordinates */
    D3DTSS_ADDRESSU       = 13, /* D3DTEXTUREADDRESS for U coordinate */
    D3DTSS_ADDRESSV       = 14, /* D3DTEXTUREADDRESS for V coordinate */
    D3DTSS_BORDERCOLOR    = 15, /* D3DCOLOR */
    D3DTSS_MAGFILTER      = 16, /* D3DTEXTUREMAGFILTER filter to use for magnification */
    D3DTSS_MINFILTER      = 17, /* D3DTEXTUREMINFILTER filter to use for minification */
    D3DTSS_MIPFILTER      = 18, /* D3DTEXTUREMIPFILTER filter to use between mipmaps during minification */
    D3DTSS_MIPMAPLODBIAS  = 19, /* D3DVALUE Mipmap LOD bias */
    D3DTSS_MAXMIPLEVEL    = 20, /* DWORD 0..(n-1) LOD index of largest map to use (0 == largest) */
    D3DTSS_MAXANISOTROPY  = 21, /* DWORD maximum anisotropy */
    D3DTSS_BUMPENVLSCALE  = 22, /* D3DVALUE scale for bump map luminance */
    D3DTSS_BUMPENVLOFFSET = 23, /* D3DVALUE offset for bump map luminance */
#if(DIRECT3D_VERSION >= 0x0700)
    D3DTSS_TEXTURETRANSFORMFLAGS = 24, /* D3DTEXTURETRANSFORMFLAGS controls texture transform */
#endif /* DIRECT3D_VERSION >= 0x0700 */
    D3DTSS_FORCE_DWORD   = 0x7fffffff, /* force 32-bit size enum */
} D3DTEXTURESTAGESTATETYPE;

#if(DIRECT3D_VERSION >= 0x0700)
// Values, used with D3DTSS_TEXCOORDINDEX, to specify that the vertex data(position
// and normal in the camera space) should be taken as texture coordinates
// Low 16 bits are used to specify texture coordinate index, to take the WRAP mode from
//
#define D3DTSS_TCI_PASSTHRU                             0x00000000
#define D3DTSS_TCI_CAMERASPACENORMAL                    0x00010000
#define D3DTSS_TCI_CAMERASPACEPOSITION                  0x00020000
#define D3DTSS_TCI_CAMERASPACEREFLECTIONVECTOR          0x00030000
#endif /* DIRECT3D_VERSION >= 0x0700 */

/*
 * Enumerations for COLOROP and ALPHAOP texture blending operations set in
 * texture processing stage controls in D3DRENDERSTATE.
 */
typedef enum _D3DTEXTUREOP
{
// Control
    D3DTOP_DISABLE    = 1,      // disables stage
    D3DTOP_SELECTARG1 = 2,      // the default
    D3DTOP_SELECTARG2 = 3,

// Modulate
    D3DTOP_MODULATE   = 4,      // multiply args together
    D3DTOP_MODULATE2X = 5,      // multiply and  1 bit
    D3DTOP_MODULATE4X = 6,      // multiply and  2 bits

// Add
    D3DTOP_ADD          =  7,   // add arguments together
    D3DTOP_ADDSIGNED    =  8,   // add with -0.5 bias
    D3DTOP_ADDSIGNED2X  =  9,   // as above but left  1 bit
    D3DTOP_SUBTRACT     = 10,   // Arg1 - Arg2, with no saturation
    D3DTOP_ADDSMOOTH    = 11,   // add 2 args, subtract product
                                // Arg1 + Arg2 - Arg1*Arg2
                                // = Arg1 + (1-Arg1)*Arg2

// Linear alpha blend: Arg1*(Alpha) + Arg2*(1-Alpha)
    D3DTOP_BLENDDIFFUSEALPHA    = 12, // iterated alpha
    D3DTOP_BLENDTEXTUREALPHA    = 13, // texture alpha
    D3DTOP_BLENDFACTORALPHA     = 14, // alpha from D3DRENDERSTATE_TEXTUREFACTOR
    // Linear alpha blend with pre-multiplied arg1 input: Arg1 + Arg2*(1-Alpha)
    D3DTOP_BLENDTEXTUREALPHAPM  = 15, // texture alpha
    D3DTOP_BLENDCURRENTALPHA    = 16, // by alpha of current color

// Specular mapping
    D3DTOP_PREMODULATE            = 17,     // modulate with next texture before use
    D3DTOP_MODULATEALPHA_ADDCOLOR = 18,     // Arg1.RGB + Arg1.A*Arg2.RGB
                                            // COLOROP only
    D3DTOP_MODULATECOLOR_ADDALPHA = 19,     // Arg1.RGB*Arg2.RGB + Arg1.A
                                            // COLOROP only
    D3DTOP_MODULATEINVALPHA_ADDCOLOR = 20,  // (1-Arg1.A)*Arg2.RGB + Arg1.RGB
                                            // COLOROP only
    D3DTOP_MODULATEINVCOLOR_ADDALPHA = 21,  // (1-Arg1.RGB)*Arg2.RGB + Arg1.A
                                            // COLOROP only

// Bump mapping
    D3DTOP_BUMPENVMAP           = 22, // per pixel env map perturbation
    D3DTOP_BUMPENVMAPLUMINANCE  = 23, // with luminance channel
    // This can do either diffuse or specular bump mapping with correct input.
    // Performs the function (Arg1.R*Arg2.R + Arg1.G*Arg2.G + Arg1.B*Arg2.B)
    // where each component has been scaled and offset to make it signed.
    // The result is replicated into all four (including alpha) channels.
    // This is a valid COLOROP only.
    D3DTOP_DOTPRODUCT3          = 24,

    D3DTOP_FORCE_DWORD = 0x7fffffff,
} D3DTEXTUREOP;

/*
 * Values for COLORARG1,2 and ALPHAARG1,2 texture blending operations
 * set in texture processing stage controls in D3DRENDERSTATE.
 */
#define D3DTA_SELECTMASK        0x0000000f  // mask for arg selector
#define D3DTA_DIFFUSE           0x00000000  // select diffuse color
#define D3DTA_CURRENT           0x00000001  // select result of previous stage
#define D3DTA_TEXTURE           0x00000002  // select texture color
#define D3DTA_TFACTOR           0x00000003  // select RENDERSTATE_TEXTUREFACTOR
#if(DIRECT3D_VERSION >= 0x0700)
#define D3DTA_SPECULAR          0x00000004  // select specular color
#endif /* DIRECT3D_VERSION >= 0x0700 */
#define D3DTA_COMPLEMENT        0x00000010  // take 1.0 - x
#define D3DTA_ALPHAREPLICATE    0x00000020  // replicate alpha to color components

#endif //(DIRECT3D_VERSION < 0x0800)

/*
 *  IDirect3DTexture2 State Filter Types
 */
typedef enum _D3DTEXTUREMAGFILTER
{
    D3DTFG_POINT        = 1,    // nearest
    D3DTFG_LINEAR       = 2,    // linear interpolation
    D3DTFG_FLATCUBIC    = 3,    // cubic
    D3DTFG_GAUSSIANCUBIC = 4,   // different cubic kernel
    D3DTFG_ANISOTROPIC  = 5,    //
#if(DIRECT3D_VERSION >= 0x0700)
#endif /* DIRECT3D_VERSION >= 0x0700 */
    D3DTFG_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMAGFILTER;

typedef enum _D3DTEXTUREMINFILTER
{
    D3DTFN_POINT        = 1,    // nearest
    D3DTFN_LINEAR       = 2,    // linear interpolation
    D3DTFN_ANISOTROPIC  = 3,    //
    D3DTFN_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMINFILTER;

typedef enum _D3DTEXTUREMIPFILTER
{
    D3DTFP_NONE         = 1,    // mipmapping disabled (use MAG filter)
    D3DTFP_POINT        = 2,    // nearest
    D3DTFP_LINEAR       = 3,    // linear interpolation
    D3DTFP_FORCE_DWORD  = 0x7fffffff,   // force 32-bit size enum
} D3DTEXTUREMIPFILTER;

#endif /* DIRECT3D_VERSION >= 0x0600 */

/*
 * Triangle flags
 */

/*
 * Tri strip and fan flags.
 * START loads all three vertices
 * EVEN and ODD load just v3 with even or odd culling
 * START_FLAT contains a count from 0 to 29 that allows the
 * whole strip or fan to be culled in one hit.
 * e.g. for a quad len = 1
 */
#define D3DTRIFLAG_START            0x00000000L
#define D3DTRIFLAG_STARTFLAT(len) (len)     /* 0 < len < 30 */
#define D3DTRIFLAG_ODD              0x0000001eL
#define D3DTRIFLAG_EVEN             0x0000001fL

/*
 * Triangle edge flags
 * enable edges for wireframe or antialiasing
 */
#define D3DTRIFLAG_EDGEENABLE1          0x00000100L /* v0-v1 edge */
#define D3DTRIFLAG_EDGEENABLE2          0x00000200L /* v1-v2 edge */
#define D3DTRIFLAG_EDGEENABLE3          0x00000400L /* v2-v0 edge */
#define D3DTRIFLAG_EDGEENABLETRIANGLE \
        (D3DTRIFLAG_EDGEENABLE1 | D3DTRIFLAG_EDGEENABLE2 | D3DTRIFLAG_EDGEENABLE3)

/*
 * Primitive structures and related defines.  Vertex offsets are to types
 * D3DVERTEX, D3DLVERTEX, or D3DTLVERTEX.
 */

/*
 * Triangle list primitive structure
 */
typedef struct _D3DTRIANGLE {
    union {
    WORD    v1;            /* Vertex indices */
    WORD    wV1;
    };
    union {
    WORD    v2;
    WORD    wV2;
    };
    union {
    WORD    v3;
    WORD    wV3;
    };
    WORD        wFlags;       /* Edge (and other) flags */
} D3DTRIANGLE, *LPD3DTRIANGLE;

/*
 * Line list structure.
 * The instruction count defines the number of line segments.
 */
typedef struct _D3DLINE {
    union {
    WORD    v1;            /* Vertex indices */
    WORD    wV1;
    };
    union {
    WORD    v2;
    WORD    wV2;
    };
} D3DLINE, *LPD3DLINE;

/*
 * Span structure
 * Spans join a list of points with the same y value.
 * If the y value changes, a new span is started.
 */
typedef struct _D3DSPAN {
    WORD    wCount; /* Number of spans */
    WORD    wFirst; /* Index to first vertex */
} D3DSPAN, *LPD3DSPAN;

/*
 * Point structure
 */
typedef struct _D3DPOINT {
    WORD    wCount;     /* number of points     */
    WORD    wFirst;     /* index to first vertex    */
} D3DPOINT, *LPD3DPOINT;


/*
 * Forward branch structure.
 * Mask is logically anded with the driver status mask
 * if the result equals 'value', the branch is taken.
 */
typedef struct _D3DBRANCH {
    DWORD   dwMask;     /* Bitmask against D3D status */
    DWORD   dwValue;
    BOOL    bNegate;        /* TRUE to negate comparison */
    DWORD   dwOffset;   /* How far to branch forward (0 for exit)*/
} D3DBRANCH, *LPD3DBRANCH;

/*
 * Status used for set status instruction.
 * The D3D status is initialised on device creation
 * and is modified by all execute calls.
 */
typedef struct _D3DSTATUS {
    DWORD       dwFlags;    /* Do we set extents or status */
    DWORD   dwStatus;   /* D3D status */
    D3DRECT drExtent;
} D3DSTATUS, *LPD3DSTATUS;

#define D3DSETSTATUS_STATUS     0x00000001L
#define D3DSETSTATUS_EXTENTS        0x00000002L
#define D3DSETSTATUS_ALL    (D3DSETSTATUS_STATUS | D3DSETSTATUS_EXTENTS)

#if(DIRECT3D_VERSION >= 0x0500)
typedef struct _D3DCLIPSTATUS {
    DWORD dwFlags; /* Do we set 2d extents, 3D extents or status */
    DWORD dwStatus; /* Clip status */
    float minx, maxx; /* X extents */
    float miny, maxy; /* Y extents */
    float minz, maxz; /* Z extents */
} D3DCLIPSTATUS, *LPD3DCLIPSTATUS;

#define D3DCLIPSTATUS_STATUS        0x00000001L
#define D3DCLIPSTATUS_EXTENTS2      0x00000002L
#define D3DCLIPSTATUS_EXTENTS3      0x00000004L

#endif /* DIRECT3D_VERSION >= 0x0500 */
/*
 * Statistics structure
 */
typedef struct _D3DSTATS {
    DWORD        dwSize;
    DWORD        dwTrianglesDrawn;
    DWORD        dwLinesDrawn;
    DWORD        dwPointsDrawn;
    DWORD        dwSpansDrawn;
    DWORD        dwVerticesProcessed;
} D3DSTATS, *LPD3DSTATS;

/*
 * Execute options.
 * When calling using D3DEXECUTE_UNCLIPPED all the primitives
 * inside the buffer must be contained within the viewport.
 */
#define D3DEXECUTE_CLIPPED       0x00000001l
#define D3DEXECUTE_UNCLIPPED     0x00000002l

typedef struct _D3DEXECUTEDATA {
    DWORD       dwSize;
    DWORD       dwVertexOffset;
    DWORD       dwVertexCount;
    DWORD       dwInstructionOffset;
    DWORD       dwInstructionLength;
    DWORD       dwHVertexOffset;
    D3DSTATUS   dsStatus;   /* Status after execute */
} D3DEXECUTEDATA, *LPD3DEXECUTEDATA;

/*
 * Palette flags.
 * This are or'ed with the peFlags in the PALETTEENTRYs passed to DirectDraw.
 */
#define D3DPAL_FREE 0x00    /* Renderer may use this entry freely */
#define D3DPAL_READONLY 0x40    /* Renderer may not set this entry */
#define D3DPAL_RESERVED 0x80    /* Renderer may not use this entry */


#if(DIRECT3D_VERSION >= 0x0600)

typedef struct _D3DVERTEXBUFFERDESC {
    DWORD dwSize;
    DWORD dwCaps;
    DWORD dwFVF;
    DWORD dwNumVertices;
} D3DVERTEXBUFFERDESC, *LPD3DVERTEXBUFFERDESC;

#define D3DVBCAPS_SYSTEMMEMORY      0x00000800l
#define D3DVBCAPS_WRITEONLY         0x00010000l
#define D3DVBCAPS_OPTIMIZED         0x80000000l
#define D3DVBCAPS_DONOTCLIP         0x00000001l

/* Vertex Operations for ProcessVertices */
#define D3DVOP_LIGHT       (1 << 10)
#define D3DVOP_TRANSFORM   (1 << 0)
#define D3DVOP_CLIP        (1 << 2)
#define D3DVOP_EXTENTS     (1 << 3)


#if(DIRECT3D_VERSION < 0x0800)

/* The maximum number of vertices user can pass to any d3d
   drawing function or to create vertex buffer with
*/
#define D3DMAXNUMVERTICES    ((1<<16) - 1)
/* The maximum number of primitives user can pass to any d3d
   drawing function.
*/
#define D3DMAXNUMPRIMITIVES  ((1<<16) - 1)

#if(DIRECT3D_VERSION >= 0x0700)

/* Bits for dwFlags in ProcessVertices call */
#define D3DPV_DONOTCOPYDATA (1 << 0)

#endif /* DIRECT3D_VERSION >= 0x0700 */

#endif //(DIRECT3D_VERSION < 0x0800)

//-------------------------------------------------------------------

#if(DIRECT3D_VERSION < 0x0800)

// Flexible vertex format bits
//
#define D3DFVF_RESERVED0        0x001
#define D3DFVF_POSITION_MASK    0x00E
#define D3DFVF_XYZ              0x002
#define D3DFVF_XYZRHW           0x004
#if(DIRECT3D_VERSION >= 0x0700)
#define D3DFVF_XYZB1            0x006
#define D3DFVF_XYZB2            0x008
#define D3DFVF_XYZB3            0x00a
#define D3DFVF_XYZB4            0x00c
#define D3DFVF_XYZB5            0x00e

#endif /* DIRECT3D_VERSION >= 0x0700 */
#define D3DFVF_NORMAL           0x010
#define D3DFVF_RESERVED1        0x020
#define D3DFVF_DIFFUSE          0x040
#define D3DFVF_SPECULAR         0x080

#define D3DFVF_TEXCOUNT_MASK    0xf00
#define D3DFVF_TEXCOUNT_SHIFT   8
#define D3DFVF_TEX0             0x000
#define D3DFVF_TEX1             0x100
#define D3DFVF_TEX2             0x200
#define D3DFVF_TEX3             0x300
#define D3DFVF_TEX4             0x400
#define D3DFVF_TEX5             0x500
#define D3DFVF_TEX6             0x600
#define D3DFVF_TEX7             0x700
#define D3DFVF_TEX8             0x800

#define D3DFVF_RESERVED2        0xf000  // 4 reserved bits

#else
#define D3DFVF_RESERVED1        0x020
#endif //(DIRECT3D_VERSION < 0x0800)

#define D3DFVF_VERTEX ( D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_TEX1 )
#define D3DFVF_LVERTEX ( D3DFVF_XYZ | D3DFVF_RESERVED1 | D3DFVF_DIFFUSE | \
                         D3DFVF_SPECULAR | D3DFVF_TEX1 )
#define D3DFVF_TLVERTEX ( D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_SPECULAR | \
                          D3DFVF_TEX1 )


typedef struct _D3DDP_PTRSTRIDE
{
    LPVOID lpvData;
    DWORD  dwStride;
} D3DDP_PTRSTRIDE;

#define D3DDP_MAXTEXCOORD 8

typedef struct _D3DDRAWPRIMITIVESTRIDEDDATA
{
    D3DDP_PTRSTRIDE position;
    D3DDP_PTRSTRIDE normal;
    D3DDP_PTRSTRIDE diffuse;
    D3DDP_PTRSTRIDE specular;
    D3DDP_PTRSTRIDE textureCoords[D3DDP_MAXTEXCOORD];
} D3DDRAWPRIMITIVESTRIDEDDATA, *LPD3DDRAWPRIMITIVESTRIDEDDATA;
//---------------------------------------------------------------------
// ComputeSphereVisibility return values
//
#define D3DVIS_INSIDE_FRUSTUM       0
#define D3DVIS_INTERSECT_FRUSTUM    1
#define D3DVIS_OUTSIDE_FRUSTUM      2
#define D3DVIS_INSIDE_LEFT          0
#define D3DVIS_INTERSECT_LEFT       (1 << 2)
#define D3DVIS_OUTSIDE_LEFT         (2 << 2)
#define D3DVIS_INSIDE_RIGHT         0
#define D3DVIS_INTERSECT_RIGHT      (1 << 4)
#define D3DVIS_OUTSIDE_RIGHT        (2 << 4)
#define D3DVIS_INSIDE_TOP           0
#define D3DVIS_INTERSECT_TOP        (1 << 6)
#define D3DVIS_OUTSIDE_TOP          (2 << 6)
#define D3DVIS_INSIDE_BOTTOM        0
#define D3DVIS_INTERSECT_BOTTOM     (1 << 8)
#define D3DVIS_OUTSIDE_BOTTOM       (2 << 8)
#define D3DVIS_INSIDE_NEAR          0
#define D3DVIS_INTERSECT_NEAR       (1 << 10)
#define D3DVIS_OUTSIDE_NEAR         (2 << 10)
#define D3DVIS_INSIDE_FAR           0
#define D3DVIS_INTERSECT_FAR        (1 << 12)
#define D3DVIS_OUTSIDE_FAR          (2 << 12)

#define D3DVIS_MASK_FRUSTUM         (3 << 0)
#define D3DVIS_MASK_LEFT            (3 << 2)
#define D3DVIS_MASK_RIGHT           (3 << 4)
#define D3DVIS_MASK_TOP             (3 << 6)
#define D3DVIS_MASK_BOTTOM          (3 << 8)
#define D3DVIS_MASK_NEAR            (3 << 10)
#define D3DVIS_MASK_FAR             (3 << 12)

#endif /* DIRECT3D_VERSION >= 0x0600 */

#if(DIRECT3D_VERSION < 0x0800)

#if(DIRECT3D_VERSION >= 0x0700)

// To be used with GetInfo()
#define D3DDEVINFOID_TEXTUREMANAGER    1
#define D3DDEVINFOID_D3DTEXTUREMANAGER 2
#define D3DDEVINFOID_TEXTURING         3

typedef enum _D3DSTATEBLOCKTYPE
{
    D3DSBT_ALL           = 1, // capture all state
    D3DSBT_PIXELSTATE    = 2, // capture pixel state
    D3DSBT_VERTEXSTATE   = 3, // capture vertex state
    D3DSBT_FORCE_DWORD   = 0xffffffff
} D3DSTATEBLOCKTYPE;

// The D3DVERTEXBLENDFLAGS type is used with D3DRENDERSTATE_VERTEXBLEND state.
//
typedef enum _D3DVERTEXBLENDFLAGS
{
    D3DVBLEND_DISABLE  = 0, // Disable vertex blending
    D3DVBLEND_1WEIGHT  = 1, // blend between 2 matrices
    D3DVBLEND_2WEIGHTS = 2, // blend between 3 matrices
    D3DVBLEND_3WEIGHTS = 3, // blend between 4 matrices
} D3DVERTEXBLENDFLAGS;

typedef enum _D3DTEXTURETRANSFORMFLAGS {
    D3DTTFF_DISABLE         = 0,    // texture coordinates are passed directly
    D3DTTFF_COUNT1          = 1,    // rasterizer should expect 1-D texture coords
    D3DTTFF_COUNT2          = 2,    // rasterizer should expect 2-D texture coords
    D3DTTFF_COUNT3          = 3,    // rasterizer should expect 3-D texture coords
    D3DTTFF_COUNT4          = 4,    // rasterizer should expect 4-D texture coords
    D3DTTFF_PROJECTED       = 256,  // texcoords to be divided by COUNTth element
    D3DTTFF_FORCE_DWORD     = 0x7fffffff,
} D3DTEXTURETRANSFORMFLAGS;

// Macros to set texture coordinate format bits in the FVF id

#define D3DFVF_TEXTUREFORMAT2 0         // Two floating point values
#define D3DFVF_TEXTUREFORMAT1 3         // One floating point value
#define D3DFVF_TEXTUREFORMAT3 1         // Three floating point values
#define D3DFVF_TEXTUREFORMAT4 2         // Four floating point values

#define D3DFVF_TEXCOORDSIZE3(CoordIndex) (D3DFVF_TEXTUREFORMAT3 << (CoordIndex*2 + 16))
#define D3DFVF_TEXCOORDSIZE2(CoordIndex) (D3DFVF_TEXTUREFORMAT2)
#define D3DFVF_TEXCOORDSIZE4(CoordIndex) (D3DFVF_TEXTUREFORMAT4 << (CoordIndex*2 + 16))
#define D3DFVF_TEXCOORDSIZE1(CoordIndex) (D3DFVF_TEXTUREFORMAT1 << (CoordIndex*2 + 16))


#endif /* DIRECT3D_VERSION >= 0x0700 */

#else
//
// legacy vertex blend names
//
typedef enum _D3DVERTEXBLENDFLAGS D3DVERTEXBLENDFLAGS;
#define D3DVBLEND_DISABLE  (D3DVERTEXBLENDFLAGS)0
#define D3DVBLEND_1WEIGHT  (D3DVERTEXBLENDFLAGS)1
#define D3DVBLEND_2WEIGHTS (D3DVERTEXBLENDFLAGS)2
#define D3DVBLEND_3WEIGHTS (D3DVERTEXBLENDFLAGS)3

#endif //(DIRECT3D_VERSION < 0x0800)

#pragma pack()
#pragma warning(default:4201)

#endif /* _D3DTYPES_H_ */
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dvec.inl ===
/****************************************************************** 
 *                                                                *
 *   D3DVec.inl                                                   *
 *                                                                *
 *   Float-valued 3D vector class for Direct3D.                   *
 *                                                                *
 *   Copyright (c) Microsoft Corp. All rights reserved.           *
 *                                                                *
 ******************************************************************/

#include <math.h>

// =====================================
// Constructors
// =====================================

inline
_D3DVECTOR::_D3DVECTOR(D3DVALUE f)
{
    x = y = z = f;
}

inline
_D3DVECTOR::_D3DVECTOR(D3DVALUE _x, D3DVALUE _y, D3DVALUE _z)
{
    x = _x; y = _y; z = _z;
}

inline
_D3DVECTOR::_D3DVECTOR(const D3DVALUE f[3])
{
    x = f[0]; y = f[1]; z = f[2];
}

// =====================================
// Access grants
// =====================================

inline const D3DVALUE&
_D3DVECTOR::operator[](int i) const
{
    return (&x)[i];
}

inline D3DVALUE&
_D3DVECTOR::operator[](int i)
{
    return (&x)[i];
}


// =====================================
// Assignment operators
// =====================================

inline _D3DVECTOR&
_D3DVECTOR::operator += (const _D3DVECTOR& v)
{
   x += v.x;   y += v.y;   z += v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator -= (const _D3DVECTOR& v)
{
   x -= v.x;   y -= v.y;   z -= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator *= (const _D3DVECTOR& v)
{
   x *= v.x;   y *= v.y;   z *= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator /= (const _D3DVECTOR& v)
{
   x /= v.x;   y /= v.y;   z /= v.z;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator *= (D3DVALUE s)
{
   x *= s;   y *= s;   z *= s;
   return *this;
}

inline _D3DVECTOR&
_D3DVECTOR::operator /= (D3DVALUE s)
{
   x /= s;   y /= s;   z /= s;
   return *this;
}

inline _D3DVECTOR
operator + (const _D3DVECTOR& v)
{
   return v;
}

inline _D3DVECTOR
operator - (const _D3DVECTOR& v)
{
   return _D3DVECTOR(-v.x, -v.y, -v.z);
}

inline _D3DVECTOR
operator + (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x+v2.x, v1.y+v2.y, v1.z+v2.z);
}

inline _D3DVECTOR
operator - (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x-v2.x, v1.y-v2.y, v1.z-v2.z);
}

inline _D3DVECTOR
operator * (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x*v2.x, v1.y*v2.y, v1.z*v2.z);
}

inline _D3DVECTOR
operator / (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR(v1.x/v2.x, v1.y/v2.y, v1.z/v2.z);
}

inline int
operator < (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1[0] < v2[0] && v1[1] < v2[1] && v1[2] < v2[2];
}

inline int
operator <= (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1[0] <= v2[0] && v1[1] <= v2[1] && v1[2] <= v2[2];
}

inline _D3DVECTOR
operator * (const _D3DVECTOR& v, D3DVALUE s)
{
   return _D3DVECTOR(s*v.x, s*v.y, s*v.z);
}

inline _D3DVECTOR
operator * (D3DVALUE s, const _D3DVECTOR& v)
{
   return _D3DVECTOR(s*v.x, s*v.y, s*v.z);
}

inline _D3DVECTOR
operator / (const _D3DVECTOR& v, D3DVALUE s)
{
   return _D3DVECTOR(v.x/s, v.y/s, v.z/s);
}

inline int
operator == (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1.x==v2.x && v1.y==v2.y && v1.z == v2.z;
}

inline D3DVALUE
Magnitude (const _D3DVECTOR& v)
{
   return (D3DVALUE) sqrt(SquareMagnitude(v));
}

inline D3DVALUE
SquareMagnitude (const _D3DVECTOR& v)
{
   return v.x*v.x + v.y*v.y + v.z*v.z;
}

inline _D3DVECTOR
Normalize (const _D3DVECTOR& v)
{
   return v / Magnitude(v);
}

inline D3DVALUE
Min (const _D3DVECTOR& v)
{
   D3DVALUE ret = v.x;
   if (v.y < ret) ret = v.y;
   if (v.z < ret) ret = v.z;
   return ret;
}

inline D3DVALUE
Max (const _D3DVECTOR& v)
{
   D3DVALUE ret = v.x;
   if (ret < v.y) ret = v.y;
   if (ret < v.z) ret = v.z;
   return ret;
}

inline _D3DVECTOR
Minimize (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR( v1[0] < v2[0] ? v1[0] : v2[0],
                   v1[1] < v2[1] ? v1[1] : v2[1],
                   v1[2] < v2[2] ? v1[2] : v2[2]);
}

inline _D3DVECTOR
Maximize (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return _D3DVECTOR( v1[0] > v2[0] ? v1[0] : v2[0],
                   v1[1] > v2[1] ? v1[1] : v2[1],
                   v1[2] > v2[2] ? v1[2] : v2[2]);
}

inline D3DVALUE
DotProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
   return v1.x*v2.x + v1.y * v2.y + v1.z*v2.z;
}

inline _D3DVECTOR
CrossProduct (const _D3DVECTOR& v1, const _D3DVECTOR& v2)
{
	_D3DVECTOR result;

	result[0] = v1[1] * v2[2] - v1[2] * v2[1];
	result[1] = v1[2] * v2[0] - v1[0] * v2[2];
	result[2] = v1[0] * v2[1] - v1[1] * v2[0];

	return result;
}

inline _D3DMATRIX
operator* (const _D3DMATRIX& a, const _D3DMATRIX& b)
{
    _D3DMATRIX ret;
    for (int i=0; i<4; i++) {
        for (int j=0; j<4; j++) {
            ret(i, j) = 0.0f;
            for (int k=0; k<4; k++) {
                ret(i, j) += a(i, k) * b(k, j);
            }
        }
    }
    return ret;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8shape.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8shapes.h
//  Content:    D3DX simple shapes
//
///////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8SHAPES_H__
#define __D3DX8SHAPES_H__

///////////////////////////////////////////////////////////////////////////
// Functions:
///////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus


//-------------------------------------------------------------------------
// D3DXCreatePolygon: 
// ------------------
// Creates a mesh containing an n-sided polygon.  The polygon is centered
// at the origin.
//
// Parameters:
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  Length      Length of each side.
//  Sides       Number of sides the polygon has.  (Must be >= 3)
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreatePolygon(
        LPDIRECT3DDEVICE8   pDevice,
        FLOAT               Length, 
        UINT                Sides, 
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateBox: 
// --------------
// Creates a mesh containing an axis-aligned box.  The box is centered at
// the origin.
//
// Parameters:
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  Width       Width of box (along X-axis)
//  Height      Height of box (along Y-axis)
//  Depth       Depth of box (along Z-axis)
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateBox(
        LPDIRECT3DDEVICE8   pDevice, 
        FLOAT               Width,
        FLOAT               Height,
        FLOAT               Depth,
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateCylinder:
// -------------------
// Creates a mesh containing a cylinder.  The generated cylinder is
// centered at the origin, and its axis is aligned with the Z-axis.
//
// Parameters:
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  Radius1     Radius at -Z end (should be >= 0.0f)
//  Radius2     Radius at +Z end (should be >= 0.0f)
//  Length      Length of cylinder (along Z-axis)
//  Slices      Number of slices about the main axis
//  Stacks      Number of stacks along the main axis
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateCylinder(
        LPDIRECT3DDEVICE8   pDevice,
        FLOAT               Radius1, 
        FLOAT               Radius2, 
        FLOAT               Length, 
        UINT                Slices, 
        UINT                Stacks,   
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateSphere:
// -----------------
// Creates a mesh containing a sphere.  The sphere is centered at the
// origin.
//
// Parameters:
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  Radius      Radius of the sphere (should be >= 0.0f)
//  Slices      Number of slices about the main axis
//  Stacks      Number of stacks along the main axis
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateSphere(
        LPDIRECT3DDEVICE8  pDevice, 
        FLOAT              Radius, 
        UINT               Slices, 
        UINT               Stacks,
        LPD3DXMESH*        ppMesh,
        LPD3DXBUFFER*      ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateTorus:
// ----------------
// Creates a mesh containing a torus.  The generated torus is centered at
// the origin, and its axis is aligned with the Z-axis.
//
// Parameters: 
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  InnerRadius Inner radius of the torus (should be >= 0.0f)
//  OuterRadius Outer radius of the torue (should be >= 0.0f)
//  Sides       Number of sides in a cross-section (must be >= 3)
//  Rings       Number of rings making up the torus (must be >= 3)
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTorus(
        LPDIRECT3DDEVICE8   pDevice,
        FLOAT               InnerRadius,
        FLOAT               OuterRadius, 
        UINT                Sides,
        UINT                Rings, 
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateTeapot: 
// -----------------
// Creates a mesh containing a teapot.
//
// Parameters: 
//
//  pDevice     The D3D device with which the mesh is going to be used.
//  ppMesh      The mesh object which will be created
//  ppAdjacency Returns a buffer containing adjacency info.  Can be NULL.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTeapot(
        LPDIRECT3DDEVICE8   pDevice,
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency);


//-------------------------------------------------------------------------
// D3DXCreateText: 
// --------------- 
// Creates a mesh containing the specified text using the font associated
// with the device context.
//
// Parameters:
//
//  pDevice       The D3D device with which the mesh is going to be used.
//  hDC           Device context, with desired font selected
//  pText         Text to generate
//  Deviation     Maximum chordal deviation from true font outlines
//  Extrusion     Amount to extrude text in -Z direction
//  ppMesh        The mesh object which will be created
//  pGlyphMetrics Address of buffer to receive glyph metric data (or NULL)
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTextA(
        LPDIRECT3DDEVICE8   pDevice,
        HDC                 hDC,
        LPCSTR              pText,
        FLOAT               Deviation,
        FLOAT               Extrusion,
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency,
        LPGLYPHMETRICSFLOAT pGlyphMetrics);

HRESULT WINAPI
    D3DXCreateTextW(
        LPDIRECT3DDEVICE8   pDevice,
        HDC                 hDC,
        LPCWSTR             pText,
        FLOAT               Deviation,
        FLOAT               Extrusion,
        LPD3DXMESH*         ppMesh,
        LPD3DXBUFFER*       ppAdjacency,
        LPGLYPHMETRICSFLOAT pGlyphMetrics);

#ifdef UNICODE
#define D3DXCreateText D3DXCreateTextW
#else
#define D3DXCreateText D3DXCreateTextA
#endif


#ifdef __cplusplus
}
#endif //__cplusplus    

#endif //__D3DX8SHAPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8mesh.h ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8mesh.h
//  Content:    D3DX mesh types and functions
//
//////////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8MESH_H__
#define __D3DX8MESH_H__

#include "dxfile.h"     // defines LPDIRECTXFILEDATA

// {A69BA991-1F7D-11d3-B929-00C04F68DC23}
DEFINE_GUID(IID_ID3DXBaseMesh,
0xa69ba991, 0x1f7d, 0x11d3, 0xb9, 0x29, 0x0, 0xc0, 0x4f, 0x68, 0xdc, 0x23);

// {9D84AC46-6B90-49a9-A721-085C7A3E3DAE}
DEFINE_GUID(IID_ID3DXMesh, 
0x9d84ac46, 0x6b90, 0x49a9, 0xa7, 0x21, 0x8, 0x5c, 0x7a, 0x3e, 0x3d, 0xae);

// {15981AA8-1A05-48e3-BBE7-FF5D49654E3F}
DEFINE_GUID(IID_ID3DXPMesh, 
0x15981aa8, 0x1a05, 0x48e3, 0xbb, 0xe7, 0xff, 0x5d, 0x49, 0x65, 0x4e, 0x3f);

// {BC3BBDE2-1F7D-11d3-B929-00C04F68DC23}
DEFINE_GUID(IID_ID3DXSPMesh, 
0xbc3bbde2, 0x1f7d, 0x11d3, 0xb9, 0x29, 0x0, 0xc0, 0x4f, 0x68, 0xdc, 0x23);

// {82A53844-F322-409e-A2E9-992E1104069D}
DEFINE_GUID(IID_ID3DXSkinMesh, 
0x82a53844, 0xf322, 0x409e, 0xa2, 0xe9, 0x99, 0x2e, 0x11, 0x4, 0x6, 0x9d);


// Mesh options - lower 3 bytes only, upper byte used by _D3DXMESHOPT option flags
enum _D3DXMESH {
    D3DXMESH_32BIT                  = 0x001, // If set, then use 32 bit indices, if not set use 16 bit indices.
    D3DXMESH_DONOTCLIP              = 0x002, // Use D3DUSAGE_DONOTCLIP for VB & IB.
    D3DXMESH_POINTS                 = 0x004, // Use D3DUSAGE_POINTS for VB & IB. 
    D3DXMESH_RTPATCHES              = 0x008, // Use D3DUSAGE_RTPATCHES for VB & IB. 
    D3DXMESH_NPATCHES               = 0x4000,// Use D3DUSAGE_NPATCHES for VB & IB. 
    D3DXMESH_VB_SYSTEMMEM           = 0x010, // Use D3DPOOL_SYSTEMMEM for VB. Overrides D3DXMESH_MANAGEDVERTEXBUFFER
    D3DXMESH_VB_MANAGED             = 0x020, // Use D3DPOOL_MANAGED for VB. 
    D3DXMESH_VB_WRITEONLY           = 0x040, // Use D3DUSAGE_WRITEONLY for VB.
    D3DXMESH_VB_DYNAMIC             = 0x080, // Use D3DUSAGE_DYNAMIC for VB.
    D3DXMESH_VB_SOFTWAREPROCESSING = 0x8000, // Use D3DUSAGE_SOFTWAREPROCESSING for VB.
    D3DXMESH_IB_SYSTEMMEM           = 0x100, // Use D3DPOOL_SYSTEMMEM for IB. Overrides D3DXMESH_MANAGEDINDEXBUFFER
    D3DXMESH_IB_MANAGED             = 0x200, // Use D3DPOOL_MANAGED for IB.
    D3DXMESH_IB_WRITEONLY           = 0x400, // Use D3DUSAGE_WRITEONLY for IB.
    D3DXMESH_IB_DYNAMIC             = 0x800, // Use D3DUSAGE_DYNAMIC for IB.
    D3DXMESH_IB_SOFTWAREPROCESSING= 0x10000, // Use D3DUSAGE_SOFTWAREPROCESSING for IB.

    D3DXMESH_VB_SHARE               = 0x1000, // Valid for Clone* calls only, forces cloned mesh/pmesh to share vertex buffer

    D3DXMESH_USEHWONLY              = 0x2000, // Valid for ID3DXSkinMesh::ConvertToBlendedMesh

    // Helper options
    D3DXMESH_SYSTEMMEM              = 0x110, // D3DXMESH_VB_SYSTEMMEM | D3DXMESH_IB_SYSTEMMEM
    D3DXMESH_MANAGED                = 0x220, // D3DXMESH_VB_MANAGED | D3DXMESH_IB_MANAGED
    D3DXMESH_WRITEONLY              = 0x440, // D3DXMESH_VB_WRITEONLY | D3DXMESH_IB_WRITEONLY
    D3DXMESH_DYNAMIC                = 0x880, // D3DXMESH_VB_DYNAMIC | D3DXMESH_IB_DYNAMIC
    D3DXMESH_SOFTWAREPROCESSING   = 0x18000, // D3DXMESH_VB_SOFTWAREPROCESSING | D3DXMESH_IB_SOFTWAREPROCESSING

};

// option field values for specifying min value in D3DXGeneratePMesh and D3DXSimplifyMesh
enum _D3DXMESHSIMP
{
    D3DXMESHSIMP_VERTEX   = 0x1,
    D3DXMESHSIMP_FACE     = 0x2,

};

enum _MAX_FVF_DECL_SIZE
{
    MAX_FVF_DECL_SIZE = 20
};

typedef struct ID3DXBaseMesh *LPD3DXBASEMESH;
typedef struct ID3DXMesh *LPD3DXMESH;
typedef struct ID3DXPMesh *LPD3DXPMESH;
typedef struct ID3DXSPMesh *LPD3DXSPMESH;
typedef struct ID3DXSkinMesh *LPD3DXSKINMESH;

typedef struct _D3DXATTRIBUTERANGE
{
    DWORD AttribId;
    DWORD FaceStart;
    DWORD FaceCount;
    DWORD VertexStart;
    DWORD VertexCount;
} D3DXATTRIBUTERANGE;

typedef D3DXATTRIBUTERANGE* LPD3DXATTRIBUTERANGE;

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
struct D3DXMATERIAL
{
    D3DMATERIAL8  MatD3D;
    LPSTR         pTextureFilename;
};
typedef struct D3DXMATERIAL *LPD3DXMATERIAL;
#ifdef __cplusplus
}
#endif //__cplusplus

typedef struct _D3DXATTRIBUTEWEIGHTS
{
    FLOAT Position;
    FLOAT Boundary;
    FLOAT Normal;
    FLOAT Diffuse;
    FLOAT Specular;
    FLOAT Tex[8];
} D3DXATTRIBUTEWEIGHTS;

typedef D3DXATTRIBUTEWEIGHTS* LPD3DXATTRIBUTEWEIGHTS;

enum _D3DXWELDEPSILONSFLAGS
{
    D3DXWELDEPSILONS_WELDALL = 0x1,              // weld all vertices marked by adjacency as being overlapping

    D3DXWELDEPSILONS_WELDPARTIALMATCHES = 0x2,   // if a given vertex component is within epsilon, modify partial matched 
                                                    // vertices so that both components identical AND if all components "equal"
                                                    // remove one of the vertices
    D3DXWELDEPSILONS_DONOTREMOVEVERTICES = 0x4,  // instructs weld to only allow modifications to vertices and not removal
                                                    // ONLY valid if D3DXWELDEPSILONS_WELDPARTIALMATCHES is set
                                                    // useful to modify vertices to be equal, but not allow vertices to be removed
};

typedef struct _D3DXWELDEPSILONS
{
    FLOAT SkinWeights;
    FLOAT Normal;
    FLOAT Tex[8];
    DWORD Flags;
} D3DXWELDEPSILONS;

typedef D3DXWELDEPSILONS* LPD3DXWELDEPSILONS;


#undef INTERFACE
#define INTERFACE ID3DXBaseMesh

DECLARE_INTERFACE_(ID3DXBaseMesh, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXBaseMesh
    STDMETHOD(DrawSubset)(THIS_ DWORD AttribId) PURE;
    STDMETHOD_(DWORD, GetNumFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetNumVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetFVF)(THIS) PURE;
    STDMETHOD(GetDeclaration)(THIS_ DWORD Declaration[MAX_FVF_DECL_SIZE]) PURE;
    STDMETHOD_(DWORD, GetOptions)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(CloneMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(CloneMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(GetVertexBuffer)(THIS_ LPDIRECT3DVERTEXBUFFER8* ppVB) PURE;
    STDMETHOD(GetIndexBuffer)(THIS_ LPDIRECT3DINDEXBUFFER8* ppIB) PURE;
    STDMETHOD(LockVertexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockVertexBuffer)(THIS) PURE;
    STDMETHOD(LockIndexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockIndexBuffer)(THIS) PURE;
    STDMETHOD(GetAttributeTable)(
                THIS_ D3DXATTRIBUTERANGE *pAttribTable, DWORD* pAttribTableSize) PURE;

    STDMETHOD(ConvertPointRepsToAdjacency)(THIS_ CONST DWORD* pPRep, DWORD* pAdjacency) PURE;
    STDMETHOD(ConvertAdjacencyToPointReps)(THIS_ CONST DWORD* pAdjacency, DWORD* pPRep) PURE;
    STDMETHOD(GenerateAdjacency)(THIS_ FLOAT Epsilon, DWORD* pAdjacency) PURE;
};


#undef INTERFACE
#define INTERFACE ID3DXMesh

DECLARE_INTERFACE_(ID3DXMesh, ID3DXBaseMesh)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXBaseMesh
    STDMETHOD(DrawSubset)(THIS_ DWORD AttribId) PURE;
    STDMETHOD_(DWORD, GetNumFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetNumVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetFVF)(THIS) PURE;
    STDMETHOD(GetDeclaration)(THIS_ DWORD Declaration[MAX_FVF_DECL_SIZE]) PURE;
    STDMETHOD_(DWORD, GetOptions)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(CloneMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(CloneMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(GetVertexBuffer)(THIS_ LPDIRECT3DVERTEXBUFFER8* ppVB) PURE;
    STDMETHOD(GetIndexBuffer)(THIS_ LPDIRECT3DINDEXBUFFER8* ppIB) PURE;
    STDMETHOD(LockVertexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockVertexBuffer)(THIS) PURE;
    STDMETHOD(LockIndexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockIndexBuffer)(THIS) PURE;
    STDMETHOD(GetAttributeTable)(
                THIS_ D3DXATTRIBUTERANGE *pAttribTable, DWORD* pAttribTableSize) PURE;

    STDMETHOD(ConvertPointRepsToAdjacency)(THIS_ CONST DWORD* pPRep, DWORD* pAdjacency) PURE;
    STDMETHOD(ConvertAdjacencyToPointReps)(THIS_ CONST DWORD* pAdjacency, DWORD* pPRep) PURE;
    STDMETHOD(GenerateAdjacency)(THIS_ FLOAT Epsilon, DWORD* pAdjacency) PURE;

    // ID3DXMesh
    STDMETHOD(LockAttributeBuffer)(THIS_ DWORD Flags, DWORD** ppData) PURE;
    STDMETHOD(UnlockAttributeBuffer)(THIS) PURE;
    STDMETHOD(Optimize)(THIS_ DWORD Flags, CONST DWORD* pAdjacencyIn, DWORD* pAdjacencyOut, 
                     DWORD* pFaceRemap, LPD3DXBUFFER *ppVertexRemap,  
                     LPD3DXMESH* ppOptMesh) PURE;
    STDMETHOD(OptimizeInplace)(THIS_ DWORD Flags, CONST DWORD* pAdjacencyIn, DWORD* pAdjacencyOut, 
                     DWORD* pFaceRemap, LPD3DXBUFFER *ppVertexRemap) PURE;

};


#undef INTERFACE
#define INTERFACE ID3DXPMesh

DECLARE_INTERFACE_(ID3DXPMesh, ID3DXBaseMesh)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXBaseMesh
    STDMETHOD(DrawSubset)(THIS_ DWORD AttribId) PURE;
    STDMETHOD_(DWORD, GetNumFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetNumVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetFVF)(THIS) PURE;
    STDMETHOD(GetDeclaration)(THIS_ DWORD Declaration[MAX_FVF_DECL_SIZE]) PURE;
    STDMETHOD_(DWORD, GetOptions)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(CloneMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(CloneMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3DDevice, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(GetVertexBuffer)(THIS_ LPDIRECT3DVERTEXBUFFER8* ppVB) PURE;
    STDMETHOD(GetIndexBuffer)(THIS_ LPDIRECT3DINDEXBUFFER8* ppIB) PURE;
    STDMETHOD(LockVertexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockVertexBuffer)(THIS) PURE;
    STDMETHOD(LockIndexBuffer)(THIS_ DWORD Flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockIndexBuffer)(THIS) PURE;
    STDMETHOD(GetAttributeTable)(
                THIS_ D3DXATTRIBUTERANGE *pAttribTable, DWORD* pAttribTableSize) PURE;

    STDMETHOD(ConvertPointRepsToAdjacency)(THIS_ CONST DWORD* pPRep, DWORD* pAdjacency) PURE;
    STDMETHOD(ConvertAdjacencyToPointReps)(THIS_ CONST DWORD* pAdjacency, DWORD* pPRep) PURE;
    STDMETHOD(GenerateAdjacency)(THIS_ FLOAT Epsilon, DWORD* pAdjacency) PURE;

    // ID3DXPMesh
    STDMETHOD(ClonePMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3D, LPD3DXPMESH* ppCloneMesh) PURE;
    STDMETHOD(ClonePMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3D, LPD3DXPMESH* ppCloneMesh) PURE;
    STDMETHOD(SetNumFaces)(THIS_ DWORD Faces) PURE;
    STDMETHOD(SetNumVertices)(THIS_ DWORD Vertices) PURE;
    STDMETHOD_(DWORD, GetMaxFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetMinFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetMaxVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetMinVertices)(THIS) PURE;
    STDMETHOD(Save)(THIS_ IStream *pStream, LPD3DXMATERIAL pMaterials, DWORD NumMaterials) PURE;

    STDMETHOD(Optimize)(THIS_ DWORD Flags, DWORD* pAdjacencyOut, 
                     DWORD* pFaceRemap, LPD3DXBUFFER *ppVertexRemap,  
                     LPD3DXMESH* ppOptMesh) PURE;

    STDMETHOD(OptimizeBaseLOD)(THIS_ DWORD Flags, DWORD* pFaceRemap) PURE;
    STDMETHOD(TrimByFaces)(THIS_ DWORD NewFacesMin, DWORD NewFacesMax, DWORD *rgiFaceRemap, DWORD *rgiVertRemap) PURE;
    STDMETHOD(TrimByVertices)(THIS_ DWORD NewVerticesMin, DWORD NewVerticesMax, DWORD *rgiFaceRemap, DWORD *rgiVertRemap) PURE;

    STDMETHOD(GetAdjacency)(THIS_ DWORD* pAdjacency) PURE;
};


#undef INTERFACE
#define INTERFACE ID3DXSPMesh

DECLARE_INTERFACE_(ID3DXSPMesh, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXSPMesh
    STDMETHOD_(DWORD, GetNumFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetNumVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetFVF)(THIS) PURE;
    STDMETHOD(GetDeclaration)(THIS_ DWORD Declaration[MAX_FVF_DECL_SIZE]) PURE;
    STDMETHOD_(DWORD, GetOptions)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(CloneMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3D, DWORD *pAdjacencyOut, DWORD *pVertexRemapOut, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(CloneMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3DDevice, DWORD *pAdjacencyOut, DWORD *pVertexRemapOut, LPD3DXMESH* ppCloneMesh) PURE;
    STDMETHOD(ClonePMeshFVF)(THIS_ DWORD Options, 
                DWORD FVF, LPDIRECT3DDEVICE8 pD3D, DWORD *pVertexRemapOut, LPD3DXPMESH* ppCloneMesh) PURE;
    STDMETHOD(ClonePMesh)(THIS_ DWORD Options, 
                CONST DWORD *pDeclaration, LPDIRECT3DDEVICE8 pD3D, DWORD *pVertexRemapOut, LPD3DXPMESH* ppCloneMesh) PURE;
    STDMETHOD(ReduceFaces)(THIS_ DWORD Faces) PURE;
    STDMETHOD(ReduceVertices)(THIS_ DWORD Vertices) PURE;
    STDMETHOD_(DWORD, GetMaxFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetMaxVertices)(THIS) PURE;
    STDMETHOD(GetVertexAttributeWeights)(THIS_ LPD3DXATTRIBUTEWEIGHTS pVertexAttributeWeights) PURE;
    STDMETHOD(GetVertexWeights)(THIS_ FLOAT *pVertexWeights) PURE;
};

#define UNUSED16 (0xffff)
#define UNUSED32 (0xffffffff)

// ID3DXMesh::Optimize options - upper byte only, lower 3 bytes used from _D3DXMESH option flags
enum _D3DXMESHOPT {
    D3DXMESHOPT_COMPACT       = 0x01000000,
    D3DXMESHOPT_ATTRSORT      = 0x02000000,
    D3DXMESHOPT_VERTEXCACHE   = 0x04000000,
    D3DXMESHOPT_STRIPREORDER  = 0x08000000,
    D3DXMESHOPT_IGNOREVERTS   = 0x10000000,  // optimize faces only, don't touch vertices
    D3DXMESHOPT_SHAREVB       = 0x20000000,
};

// Subset of the mesh that has the same attribute and bone combination.
// This subset can be rendered in a single draw call
typedef struct _D3DXBONECOMBINATION
{
    DWORD AttribId;
    DWORD FaceStart;
    DWORD FaceCount;
    DWORD VertexStart;
    DWORD VertexCount;
    DWORD* BoneId;
} D3DXBONECOMBINATION, *LPD3DXBONECOMBINATION;


#undef INTERFACE
#define INTERFACE ID3DXSkinMesh

DECLARE_INTERFACE_(ID3DXSkinMesh, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXMesh
    STDMETHOD_(DWORD, GetNumFaces)(THIS) PURE;
    STDMETHOD_(DWORD, GetNumVertices)(THIS) PURE;
    STDMETHOD_(DWORD, GetFVF)(THIS) PURE;
    STDMETHOD(GetDeclaration)(THIS_ DWORD Declaration[MAX_FVF_DECL_SIZE]) PURE;
    STDMETHOD_(DWORD, GetOptions)(THIS) PURE;
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(GetVertexBuffer)(THIS_ LPDIRECT3DVERTEXBUFFER8* ppVB) PURE;
    STDMETHOD(GetIndexBuffer)(THIS_ LPDIRECT3DINDEXBUFFER8* ppIB) PURE;
    STDMETHOD(LockVertexBuffer)(THIS_ DWORD flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockVertexBuffer)(THIS) PURE;
    STDMETHOD(LockIndexBuffer)(THIS_ DWORD flags, BYTE** ppData) PURE;
    STDMETHOD(UnlockIndexBuffer)(THIS) PURE;
    STDMETHOD(LockAttributeBuffer)(THIS_ DWORD flags, DWORD** ppData) PURE;
    STDMETHOD(UnlockAttributeBuffer)(THIS) PURE;
    // ID3DXSkinMesh
    STDMETHOD_(DWORD, GetNumBones)(THIS) PURE;
    STDMETHOD(GetOriginalMesh)(THIS_ LPD3DXMESH* ppMesh) PURE;
    STDMETHOD(SetBoneInfluence)(THIS_ DWORD bone, DWORD numInfluences, CONST DWORD* vertices, CONST FLOAT* weights) PURE;
    STDMETHOD_(DWORD, GetNumBoneInfluences)(THIS_ DWORD bone) PURE;
    STDMETHOD(GetBoneInfluence)(THIS_ DWORD bone, DWORD* vertices, FLOAT* weights) PURE;
    STDMETHOD(GetMaxVertexInfluences)(THIS_ DWORD* maxVertexInfluences) PURE;
    STDMETHOD(GetMaxFaceInfluences)(THIS_ DWORD* maxFaceInfluences) PURE;

    STDMETHOD(ConvertToBlendedMesh)(THIS_ DWORD Options, 
                                    CONST LPDWORD pAdjacencyIn, 
                                    LPDWORD pAdjacencyOut,
                                    DWORD* pNumBoneCombinations, 
                                    LPD3DXBUFFER* ppBoneCombinationTable, 
                                    DWORD* pFaceRemap, 
                                    LPD3DXBUFFER *ppVertexRemap, 
                                    LPD3DXMESH* ppMesh) PURE;

    STDMETHOD(ConvertToIndexedBlendedMesh)(THIS_ DWORD Options, 
                                           CONST LPDWORD pAdjacencyIn, 
                                           DWORD paletteSize, 
                                           LPDWORD pAdjacencyOut, 
                                           DWORD* pNumBoneCombinations, 
                                           LPD3DXBUFFER* ppBoneCombinationTable, 
                                           DWORD* pFaceRemap, 
                                           LPD3DXBUFFER *ppVertexRemap, 
                                           LPD3DXMESH* ppMesh) PURE;

    STDMETHOD(GenerateSkinnedMesh)(THIS_ DWORD Options, 
                                   FLOAT minWeight, 
                                   CONST LPDWORD pAdjacencyIn, 
                                   LPDWORD pAdjacencyOut, 
                                   DWORD* pFaceRemap, 
                                   LPD3DXBUFFER *ppVertexRemap, 
                                   LPD3DXMESH* ppMesh) PURE;
    STDMETHOD(UpdateSkinnedMesh)(THIS_ CONST D3DXMATRIX* pBoneTransforms, CONST D3DXMATRIX* pBoneInvTransforms, LPD3DXMESH pMesh) PURE;
};

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

HRESULT WINAPI 
    D3DXCreateMesh(
        DWORD NumFaces, 
        DWORD NumVertices, 
        DWORD Options, 
        CONST DWORD *pDeclaration, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXMESH* ppMesh);

HRESULT WINAPI 
    D3DXCreateMeshFVF(
        DWORD NumFaces, 
        DWORD NumVertices, 
        DWORD Options, 
        DWORD FVF, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXMESH* ppMesh);

HRESULT WINAPI 
    D3DXCreateSPMesh(
        LPD3DXMESH pMesh, 
        CONST DWORD* pAdjacency, 
        CONST LPD3DXATTRIBUTEWEIGHTS pVertexAttributeWeights,
        CONST FLOAT *pVertexWeights,
        LPD3DXSPMESH* ppSMesh);

// clean a mesh up for simplification, try to make manifold
HRESULT WINAPI
    D3DXCleanMesh(
    LPD3DXMESH pMeshIn,
    CONST DWORD* pAdjacencyIn,
    LPD3DXMESH* ppMeshOut,
    DWORD* pAdjacencyOut,
    LPD3DXBUFFER* ppErrorsAndWarnings);

HRESULT WINAPI
    D3DXValidMesh(
    LPD3DXMESH pMeshIn,
    CONST DWORD* pAdjacency,
    LPD3DXBUFFER* ppErrorsAndWarnings);

HRESULT WINAPI 
    D3DXGeneratePMesh(
        LPD3DXMESH pMesh, 
        CONST DWORD* pAdjacency, 
        CONST LPD3DXATTRIBUTEWEIGHTS pVertexAttributeWeights,
        CONST FLOAT *pVertexWeights,
        DWORD MinValue, 
        DWORD Options, 
        LPD3DXPMESH* ppPMesh);

HRESULT WINAPI 
    D3DXSimplifyMesh(
        LPD3DXMESH pMesh, 
        CONST DWORD* pAdjacency, 
        CONST LPD3DXATTRIBUTEWEIGHTS pVertexAttributeWeights,
        CONST FLOAT *pVertexWeights,
        DWORD MinValue, 
        DWORD Options, 
        LPD3DXMESH* ppMesh);

HRESULT WINAPI 
    D3DXComputeBoundingSphere(
        PVOID pPointsFVF, 
        DWORD NumVertices, 
        DWORD FVF,
        D3DXVECTOR3 *pCenter, 
        FLOAT *pRadius);

HRESULT WINAPI 
    D3DXComputeBoundingBox(
        PVOID pPointsFVF, 
        DWORD NumVertices, 
        DWORD FVF,
        D3DXVECTOR3 *pMin, 
        D3DXVECTOR3 *pMax);

HRESULT WINAPI 
    D3DXComputeNormals(
        LPD3DXBASEMESH pMesh,
        DWORD *pAdjacency);

HRESULT WINAPI 
    D3DXCreateBuffer(
        DWORD NumBytes, 
        LPD3DXBUFFER *ppBuffer);


HRESULT WINAPI
    D3DXLoadMeshFromX(
        LPSTR pFilename, 
        DWORD Options, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXBUFFER *ppAdjacency,
        LPD3DXBUFFER *ppMaterials, 
        DWORD *pNumMaterials,
        LPD3DXMESH *ppMesh);

HRESULT WINAPI 
    D3DXLoadMeshFromXInMemory(
        PBYTE Memory,
        DWORD SizeOfMemory,
        DWORD Options, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXBUFFER *ppAdjacency,
        LPD3DXBUFFER *ppMaterials, 
        DWORD *pNumMaterials,
        LPD3DXMESH *ppMesh);

HRESULT WINAPI 
    D3DXLoadMeshFromXResource(
        HMODULE Module,
        LPCTSTR Name,
        LPCTSTR Type,
        DWORD Options, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXBUFFER *ppAdjacency,
        LPD3DXBUFFER *ppMaterials, 
        DWORD *pNumMaterials,
        LPD3DXMESH *ppMesh);

HRESULT WINAPI 
    D3DXSaveMeshToX(
        LPSTR pFilename,
        LPD3DXMESH pMesh,
        CONST DWORD* pAdjacency,
        CONST LPD3DXMATERIAL pMaterials,
        DWORD NumMaterials,
        DWORD Format
        );

HRESULT WINAPI 
    D3DXCreatePMeshFromStream(
        IStream *pStream, 
        DWORD Options,
        LPDIRECT3DDEVICE8 pD3DDevice, 
        LPD3DXBUFFER *ppMaterials,
        DWORD* pNumMaterials,
        LPD3DXPMESH *ppPMesh);

HRESULT WINAPI
    D3DXCreateSkinMesh(
        DWORD NumFaces, 
        DWORD NumVertices, 
        DWORD NumBones,
        DWORD Options, 
        CONST DWORD *pDeclaration, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXSKINMESH* ppSkinMesh);

HRESULT WINAPI
    D3DXCreateSkinMeshFVF(
        DWORD NumFaces, 
        DWORD NumVertices, 
        DWORD NumBones,
        DWORD Options, 
        DWORD FVF, 
        LPDIRECT3DDEVICE8 pD3D, 
        LPD3DXSKINMESH* ppSkinMesh);

HRESULT WINAPI
    D3DXCreateSkinMeshFromMesh(
        LPD3DXMESH pMesh,
        DWORD numBones,
        LPD3DXSKINMESH* ppSkinMesh);

HRESULT WINAPI 
    D3DXLoadMeshFromXof(
        LPDIRECTXFILEDATA pXofObjMesh, 
        DWORD Options, 
        LPDIRECT3DDEVICE8 pD3DDevice, 
        LPD3DXBUFFER *ppAdjacency,
        LPD3DXBUFFER *ppMaterials, 
        DWORD *pNumMaterials,
        LPD3DXMESH *ppMesh);

HRESULT WINAPI
    D3DXLoadSkinMeshFromXof(
        LPDIRECTXFILEDATA pxofobjMesh, 
        DWORD Options,
        LPDIRECT3DDEVICE8 pD3D,
        LPD3DXBUFFER* ppAdjacency,
        LPD3DXBUFFER* ppMaterials,
        DWORD *pMatOut,
        LPD3DXBUFFER* ppBoneNames,
        LPD3DXBUFFER* ppBoneTransforms,
        LPD3DXSKINMESH* ppMesh);

HRESULT WINAPI
    D3DXTessellateNPatches(
        LPD3DXMESH pMeshIn,             
        CONST DWORD* pAdjacencyIn,             
        FLOAT NumSegs,                    
        BOOL  QuadraticInterpNormals,     // if false use linear intrep for normals, if true use quadratic
        LPD3DXMESH *ppMeshOut,
        LPD3DXBUFFER *ppAdjacencyOut);

UINT WINAPI
    D3DXGetFVFVertexSize(DWORD FVF);

HRESULT WINAPI
    D3DXDeclaratorFromFVF(
        DWORD FVF,
        DWORD Declaration[MAX_FVF_DECL_SIZE]);

HRESULT WINAPI
    D3DXFVFFromDeclarator(
        CONST DWORD *pDeclarator,
        DWORD *pFVF);

HRESULT WINAPI 
    D3DXWeldVertices(
        CONST LPD3DXMESH pMesh,         
        LPD3DXWELDEPSILONS pEpsilons,                 
        CONST DWORD *pAdjacencyIn, 
        DWORD *pAdjacencyOut,
        DWORD* pFaceRemap, 
        LPD3DXBUFFER *ppVertexRemap);

typedef struct _D3DXINTERSECTINFO
{
    DWORD FaceIndex;                // index of face intersected
    FLOAT U;                        // Barycentric Hit Coordinates    
    FLOAT V;                        // Barycentric Hit Coordinates
    FLOAT Dist;                     // Ray-Intersection Parameter Distance
} D3DXINTERSECTINFO, *LPD3DXINTERSECTINFO;


HRESULT WINAPI
    D3DXIntersect(
        LPD3DXBASEMESH pMesh,
        CONST D3DXVECTOR3 *pRayPos,
        CONST D3DXVECTOR3 *pRayDir, 
        BOOL    *pHit,              // True if any faces were intersected
        DWORD   *pFaceIndex,        // index of closest face intersected
        FLOAT   *pU,                // Barycentric Hit Coordinates    
        FLOAT   *pV,                // Barycentric Hit Coordinates
        FLOAT   *pDist,             // Ray-Intersection Parameter Distance
        LPD3DXBUFFER *ppAllHits,    // Array of D3DXINTERSECTINFOs for all hits (not just closest) 
        DWORD   *pCountOfHits);     // Number of entries in AllHits array

HRESULT WINAPI
    D3DXIntersectSubset(
        LPD3DXBASEMESH pMesh,
        DWORD AttribId,
        CONST D3DXVECTOR3 *pRayPos,
        CONST D3DXVECTOR3 *pRayDir, 
        BOOL    *pHit,              // True if any faces were intersected
        DWORD   *pFaceIndex,        // index of closest face intersected
        FLOAT   *pU,                // Barycentric Hit Coordinates    
        FLOAT   *pV,                // Barycentric Hit Coordinates
        FLOAT   *pDist,             // Ray-Intersection Parameter Distance
        LPD3DXBUFFER *ppAllHits,    // Array of D3DXINTERSECTINFOs for all hits (not just closest) 
        DWORD   *pCountOfHits);     // Number of entries in AllHits array


HRESULT WINAPI D3DXSplitMesh
    (
    CONST LPD3DXMESH pMeshIn,         
    CONST DWORD *pAdjacencyIn, 
    CONST DWORD MaxSize,
    CONST DWORD Options,
    DWORD *pMeshesOut,
    LPD3DXBUFFER *ppMeshArrayOut,
    LPD3DXBUFFER *ppAdjacencyArrayOut,
    LPD3DXBUFFER *ppFaceRemapArrayOut,
    LPD3DXBUFFER *ppVertRemapArrayOut
    );

BOOL D3DXIntersectTri 
(
    CONST D3DXVECTOR3 *p0,           // Triangle vertex 0 position
    CONST D3DXVECTOR3 *p1,           // Triangle vertex 1 position
    CONST D3DXVECTOR3 *p2,           // Triangle vertex 2 position
    CONST D3DXVECTOR3 *pRayPos,      // Ray origin
    CONST D3DXVECTOR3 *pRayDir,      // Ray direction
    FLOAT *pU,                       // Barycentric Hit Coordinates
    FLOAT *pV,                       // Barycentric Hit Coordinates
    FLOAT *pDist);                   // Ray-Intersection Parameter Distance

BOOL WINAPI
    D3DXSphereBoundProbe(
        CONST D3DXVECTOR3 *pCenter,
        FLOAT Radius,
        CONST D3DXVECTOR3 *pRayPosition,
        CONST D3DXVECTOR3 *pRayDirection);

BOOL WINAPI 
    D3DXBoxBoundProbe(
        CONST D3DXVECTOR3 *pMin, 
        CONST D3DXVECTOR3 *pMax,
        CONST D3DXVECTOR3 *pRayPosition,
        CONST D3DXVECTOR3 *pRayDirection);

enum _D3DXERR {
    D3DXERR_CANNOTMODIFYINDEXBUFFER     = MAKE_DDHRESULT(2900),
    D3DXERR_INVALIDMESH                 = MAKE_DDHRESULT(2901),
    D3DXERR_CANNOTATTRSORT              = MAKE_DDHRESULT(2902),
    D3DXERR_SKINNINGNOTSUPPORTED        = MAKE_DDHRESULT(2903),
    D3DXERR_TOOMANYINFLUENCES           = MAKE_DDHRESULT(2904),
    D3DXERR_INVALIDDATA                 = MAKE_DDHRESULT(2905),
    D3DXERR_LOADEDMESHASNODATA          = MAKE_DDHRESULT(2906),
};


#define D3DX_COMP_TANGENT_NONE 0xFFFFFFFF

HRESULT WINAPI D3DXComputeTangent(LPD3DXMESH InMesh,
                                 DWORD TexStage,
                                 LPD3DXMESH OutMesh,
                                 DWORD TexStageUVec,
                                 DWORD TexStageVVec,
                                 DWORD Wrap,
                                 DWORD *Adjacency);

HRESULT WINAPI
D3DXConvertMeshSubsetToSingleStrip
(
    LPD3DXBASEMESH MeshIn,
    DWORD AttribId,
    DWORD IBOptions,
    LPDIRECT3DINDEXBUFFER8 *ppIndexBuffer,
    DWORD *pNumIndices
);

HRESULT WINAPI
D3DXConvertMeshSubsetToStrips
(
    LPD3DXBASEMESH MeshIn,
    DWORD AttribId,
    DWORD IBOptions,
    LPDIRECT3DINDEXBUFFER8 *ppIndexBuffer,
    DWORD *pNumIndices,
    LPD3DXBUFFER *ppStripLengths,
    DWORD *pNumStrips
);


#ifdef __cplusplus
}
#endif //__cplusplus

#endif //__D3DX8MESH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8core.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8core.h
//  Content:    D3DX core types and functions
//
///////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8CORE_H__
#define __D3DX8CORE_H__



///////////////////////////////////////////////////////////////////////////
// ID3DXBuffer:
// ------------
// The buffer object is used by D3DX to return arbitrary size data.
//
// GetBufferPointer -
//    Returns a pointer to the beginning of the buffer.
//
// GetBufferSize -
//    Returns the size of the buffer, in bytes.
///////////////////////////////////////////////////////////////////////////

typedef interface ID3DXBuffer ID3DXBuffer;
typedef interface ID3DXBuffer *LPD3DXBUFFER;

// {932E6A7E-C68E-45dd-A7BF-53D19C86DB1F}
DEFINE_GUID(IID_ID3DXBuffer, 
0x932e6a7e, 0xc68e, 0x45dd, 0xa7, 0xbf, 0x53, 0xd1, 0x9c, 0x86, 0xdb, 0x1f);

#undef INTERFACE
#define INTERFACE ID3DXBuffer

DECLARE_INTERFACE_(ID3DXBuffer, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXBuffer
    STDMETHOD_(LPVOID, GetBufferPointer)(THIS) PURE;
    STDMETHOD_(DWORD, GetBufferSize)(THIS) PURE;
};



///////////////////////////////////////////////////////////////////////////
// ID3DXFont:
// ----------
// Font objects contain the textures and resources needed to render
// a specific font on a specific device.
//
// Begin -
//    Prepartes device for drawing text.  This is optional.. if DrawText
//    is called outside of Begin/End, it will call Begin and End for you.
//
// DrawText -
//    Draws formatted text on a D3D device.  Some parameters are 
//    surprisingly similar to those of GDI's DrawText function.  See GDI 
//    documentation for a detailed description of these parameters.
//
// End -
//    Restores device state to how it was when Begin was called.
//
// OnLostDevice, OnResetDevice -
//    Call OnLostDevice() on this object before calling Reset() on the
//    device, so that this object can release any stateblocks and video
//    memory resources.  After Reset(), the call OnResetDevice().
//
///////////////////////////////////////////////////////////////////////////

typedef interface ID3DXFont ID3DXFont;
typedef interface ID3DXFont *LPD3DXFONT;


// {2D501DF7-D253-4414-865F-A6D54A753138}
DEFINE_GUID( IID_ID3DXFont,
0x2d501df7, 0xd253, 0x4414, 0x86, 0x5f, 0xa6, 0xd5, 0x4a, 0x75, 0x31, 0x38);


#undef INTERFACE
#define INTERFACE ID3DXFont

DECLARE_INTERFACE_(ID3DXFont, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXFont
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(GetLogFont)(THIS_ LOGFONT* pLogFont) PURE;

    STDMETHOD(Begin)(THIS) PURE;
    STDMETHOD_(INT, DrawTextA)(THIS_ LPCSTR  pString, INT Count, LPRECT pRect, DWORD Format, D3DCOLOR Color) PURE;
    STDMETHOD_(INT, DrawTextW)(THIS_ LPCWSTR pString, INT Count, LPRECT pRect, DWORD Format, D3DCOLOR Color) PURE;
    STDMETHOD(End)(THIS) PURE;

    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
};

#ifndef DrawText
#ifdef UNICODE
#define DrawText DrawTextW
#else
#define DrawText DrawTextA
#endif
#endif


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

HRESULT WINAPI
    D3DXCreateFont(
        LPDIRECT3DDEVICE8   pDevice,
        HFONT               hFont,
        LPD3DXFONT*         ppFont);


HRESULT WINAPI
    D3DXCreateFontIndirect(
        LPDIRECT3DDEVICE8   pDevice,
        CONST LOGFONT*      pLogFont,
        LPD3DXFONT*         ppFont);

#ifdef __cplusplus
}
#endif //__cplusplus




///////////////////////////////////////////////////////////////////////////
// ID3DXSprite:
// ------------
// This object intends to provide an easy way to drawing sprites using D3D.
//
// Begin - 
//    Prepares device for drawing sprites
//
// Draw, DrawAffine, DrawTransform -
//    Draws a sprite in screen-space.  Before transformation, the sprite is
//    the size of SrcRect, with its top-left corner at the origin (0,0).  
//    The color and alpha channels are modulated by Color.
//
// End - 
//     Restores device state to how it was when Begin was called.
//
// OnLostDevice, OnResetDevice -
//    Call OnLostDevice() on this object before calling Reset() on the
//    device, so that this object can release any stateblocks and video
//    memory resources.  After Reset(), the call OnResetDevice().
///////////////////////////////////////////////////////////////////////////

typedef interface ID3DXSprite ID3DXSprite;
typedef interface ID3DXSprite *LPD3DXSPRITE;


// {E8691849-87B8-4929-9050-1B0542D5538C}
DEFINE_GUID( IID_ID3DXSprite, 
0xe8691849, 0x87b8, 0x4929, 0x90, 0x50, 0x1b, 0x5, 0x42, 0xd5, 0x53, 0x8c);


#undef INTERFACE
#define INTERFACE ID3DXSprite

DECLARE_INTERFACE_(ID3DXSprite, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXSprite
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;

    STDMETHOD(Begin)(THIS) PURE;

    STDMETHOD(Draw)(THIS_ LPDIRECT3DTEXTURE8  pSrcTexture, 
        CONST RECT* pSrcRect, CONST D3DXVECTOR2* pScaling, 
        CONST D3DXVECTOR2* pRotationCenter, FLOAT Rotation, 
        CONST D3DXVECTOR2* pTranslation, D3DCOLOR Color) PURE;

    STDMETHOD(DrawTransform)(THIS_ LPDIRECT3DTEXTURE8 pSrcTexture, 
        CONST RECT* pSrcRect, CONST D3DXMATRIX* pTransform, 
        D3DCOLOR Color) PURE;

    STDMETHOD(End)(THIS) PURE;

    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
};


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus


HRESULT WINAPI
    D3DXCreateSprite(
        LPDIRECT3DDEVICE8   pDevice,
        LPD3DXSPRITE*       ppSprite);

#ifdef __cplusplus
}
#endif //__cplusplus




///////////////////////////////////////////////////////////////////////////
// ID3DXRenderToSurface:
// ---------------------
// This object abstracts rendering to surfaces.  These surfaces do not 
// necessarily need to be render targets.  If they are not, a compatible
// render target is used, and the result copied into surface at end scene.
//
// BeginScene, EndScene -
//    Call BeginScene() and EndScene() at the beginning and ending of your
//    scene.  These calls will setup and restore render targets, viewports, 
//    etc.. 
//
// OnLostDevice, OnResetDevice -
//    Call OnLostDevice() on this object before calling Reset() on the
//    device, so that this object can release any stateblocks and video
//    memory resources.  After Reset(), the call OnResetDevice().
///////////////////////////////////////////////////////////////////////////

typedef struct _D3DXRTS_DESC
{
    UINT                Width;
    UINT                Height;
    D3DFORMAT           Format;
    BOOL                DepthStencil;
    D3DFORMAT           DepthStencilFormat;

} D3DXRTS_DESC;


typedef interface ID3DXRenderToSurface ID3DXRenderToSurface;
typedef interface ID3DXRenderToSurface *LPD3DXRENDERTOSURFACE;


// {69CC587C-E40C-458d-B5D3-B029E18EB60A}
DEFINE_GUID( IID_ID3DXRenderToSurface, 
0x69cc587c, 0xe40c, 0x458d, 0xb5, 0xd3, 0xb0, 0x29, 0xe1, 0x8e, 0xb6, 0xa);


#undef INTERFACE
#define INTERFACE ID3DXRenderToSurface

DECLARE_INTERFACE_(ID3DXRenderToSurface, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXRenderToSurface
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DXRTS_DESC* pDesc) PURE;

    STDMETHOD(BeginScene)(THIS_ LPDIRECT3DSURFACE8 pSurface, CONST D3DVIEWPORT8* pViewport) PURE;
    STDMETHOD(EndScene)(THIS) PURE;

    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
};


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

HRESULT WINAPI
    D3DXCreateRenderToSurface(
        LPDIRECT3DDEVICE8       pDevice,
        UINT                    Width,
        UINT                    Height,
        D3DFORMAT               Format,
        BOOL                    DepthStencil,
        D3DFORMAT               DepthStencilFormat,
        LPD3DXRENDERTOSURFACE*  ppRenderToSurface);

#ifdef __cplusplus
}
#endif //__cplusplus



///////////////////////////////////////////////////////////////////////////
// ID3DXRenderToEnvMap:
// --------------------
// This object abstracts rendering to environment maps.  These surfaces 
// do not necessarily need to be render targets.  If they are not, a 
// compatible render target is used, and the result copied into the
// environment map at end scene.
//
// BeginCube, BeginSphere, BeginHemisphere, BeginParabolic -
//    This function initiates the rendering of the environment map.  As
//    parameters, you pass the textures in which will get filled in with
//    the resulting environment map.
//
// Face -
//    Call this function to initiate the drawing of each face.  For each 
//    environment map, you will call this six times.. once for each face 
//    in D3DCUBEMAP_FACES.
//
// End -
//    This will restore all render targets, and if needed compose all the
//    rendered faces into the environment map surfaces.
//
// OnLostDevice, OnResetDevice -
//    Call OnLostDevice() on this object before calling Reset() on the
//    device, so that this object can release any stateblocks and video
//    memory resources.  After Reset(), the call OnResetDevice().
///////////////////////////////////////////////////////////////////////////

typedef struct _D3DXRTE_DESC
{
    UINT        Size;
    D3DFORMAT   Format;
    BOOL        DepthStencil;
    D3DFORMAT   DepthStencilFormat;
} D3DXRTE_DESC;


typedef interface ID3DXRenderToEnvMap ID3DXRenderToEnvMap;
typedef interface ID3DXRenderToEnvMap *LPD3DXRenderToEnvMap;

// {9F6779E5-60A9-4d8b-AEE4-32770F405DBA}
DEFINE_GUID( IID_ID3DXRenderToEnvMap, 
0x9f6779e5, 0x60a9, 0x4d8b, 0xae, 0xe4, 0x32, 0x77, 0xf, 0x40, 0x5d, 0xba);


#undef INTERFACE
#define INTERFACE ID3DXRenderToEnvMap

DECLARE_INTERFACE_(ID3DXRenderToEnvMap, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXRenderToEnvMap
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DXRTE_DESC* pDesc) PURE;

    STDMETHOD(BeginCube)(THIS_ 
        LPDIRECT3DCUBETEXTURE8 pCubeTex) PURE;

    STDMETHOD(BeginSphere)(THIS_
        LPDIRECT3DTEXTURE8 pTex) PURE;

    STDMETHOD(BeginHemisphere)(THIS_ 
        LPDIRECT3DTEXTURE8 pTexZPos,
        LPDIRECT3DTEXTURE8 pTexZNeg) PURE;

    STDMETHOD(BeginParabolic)(THIS_ 
        LPDIRECT3DTEXTURE8 pTexZPos,
        LPDIRECT3DTEXTURE8 pTexZNeg) PURE;

    STDMETHOD(Face)(THIS_ D3DCUBEMAP_FACES Face) PURE;
    STDMETHOD(End)(THIS) PURE;

    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
};


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

HRESULT WINAPI
    D3DXCreateRenderToEnvMap(
        LPDIRECT3DDEVICE8       pDevice,
        UINT                    Size,
        D3DFORMAT               Format,
        BOOL                    DepthStencil,
        D3DFORMAT               DepthStencilFormat,
        LPD3DXRenderToEnvMap*   ppRenderToEnvMap);

#ifdef __cplusplus
}
#endif //__cplusplus



///////////////////////////////////////////////////////////////////////////
// Shader assemblers:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// D3DXASM flags:
// --------------
//
// D3DXASM_DEBUG
//   Generate debug info.
//
// D3DXASM_SKIPVALIDATION
//   Do not validate the generated code against known capabilities and
//   constraints.  This option is only recommended when assembling shaders
//   you KNOW will work.  (ie. have assembled before without this option.)
//-------------------------------------------------------------------------

#define D3DXASM_DEBUG           (1 << 0)
#define D3DXASM_SKIPVALIDATION  (1 << 1)


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

//-------------------------------------------------------------------------
// D3DXAssembleShader:
// -------------------
// Assembles an ascii description of a vertex or pixel shader into 
// binary form.
//
// Parameters:
//  pSrcFile
//      Source file name
//  hSrcModule
//      Module handle. if NULL, current module will be used.
//  pSrcResource
//      Resource name in module
//  pSrcData
//      Pointer to source code
//  SrcDataLen
//      Size of source code, in bytes
//  Flags
//      D3DXASM_xxx flags
//  ppConstants
//      Returns an ID3DXBuffer object containing constant declarations.
//  ppCompiledShader
//      Returns an ID3DXBuffer object containing the object code.
//  ppCompilationErrors
//      Returns an ID3DXBuffer object containing ascii error messages
//-------------------------------------------------------------------------

HRESULT WINAPI
    D3DXAssembleShaderFromFileA(
        LPCSTR                pSrcFile,
        DWORD                 Flags,
        LPD3DXBUFFER*         ppConstants,
        LPD3DXBUFFER*         ppCompiledShader,
        LPD3DXBUFFER*         ppCompilationErrors);

HRESULT WINAPI
    D3DXAssembleShaderFromFileW(
        LPCWSTR               pSrcFile,
        DWORD                 Flags,
        LPD3DXBUFFER*         ppConstants,
        LPD3DXBUFFER*         ppCompiledShader,
        LPD3DXBUFFER*         ppCompilationErrors);

#ifdef UNICODE
#define D3DXAssembleShaderFromFile D3DXAssembleShaderFromFileW
#else
#define D3DXAssembleShaderFromFile D3DXAssembleShaderFromFileA
#endif

HRESULT WINAPI
    D3DXAssembleShaderFromResourceA(
        HMODULE               hSrcModule,
        LPCSTR                pSrcResource,
        DWORD                 Flags,
        LPD3DXBUFFER*         ppConstants,
        LPD3DXBUFFER*         ppCompiledShader,
        LPD3DXBUFFER*         ppCompilationErrors);

HRESULT WINAPI
    D3DXAssembleShaderFromResourceW(
        HMODULE               hSrcModule,
        LPCWSTR               pSrcResource,
        DWORD                 Flags,
        LPD3DXBUFFER*         ppConstants,
        LPD3DXBUFFER*         ppCompiledShader,
        LPD3DXBUFFER*         ppCompilationErrors);

#ifdef UNICODE
#define D3DXAssembleShaderFromResource D3DXAssembleShaderFromResourceW
#else
#define D3DXAssembleShaderFromResource D3DXAssembleShaderFromResourceA
#endif

HRESULT WINAPI
    D3DXAssembleShader(
        LPCVOID               pSrcData,
        UINT                  SrcDataLen,
        DWORD                 Flags,
        LPD3DXBUFFER*         ppConstants,
        LPD3DXBUFFER*         ppCompiledShader,
        LPD3DXBUFFER*         ppCompilationErrors);


#ifdef __cplusplus
}
#endif //__cplusplus



///////////////////////////////////////////////////////////////////////////
// Misc APIs:
///////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus

//-------------------------------------------------------------------------
// D3DXGetErrorString:
// ------------------
// Returns the error string for given an hresult.  Interprets all D3DX and
// D3D hresults.
//
// Parameters:
//  hr
//      The error code to be deciphered.
//  pBuffer
//      Pointer to the buffer to be filled in.
//  BufferLen
//      Count of characters in buffer.  Any error message longer than this
//      length will be truncated to fit.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXGetErrorStringA(
        HRESULT             hr,
        LPSTR               pBuffer,
        UINT                BufferLen);

HRESULT WINAPI
    D3DXGetErrorStringW(
        HRESULT             hr,
        LPWSTR              pBuffer,
        UINT                BufferLen);

#ifdef UNICODE
#define D3DXGetErrorString D3DXGetErrorStringW
#else
#define D3DXGetErrorString D3DXGetErrorStringA
#endif



#ifdef __cplusplus
}
#endif //__cplusplus

#endif //__D3DX8CORE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8effect.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8effect.h
//  Content:    D3DX effect types and functions
//
///////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8EFFECT_H__
#define __D3DX8EFFECT_H__


#define D3DXFX_DONOTSAVESTATE  (1 << 0)


typedef enum _D3DXPARAMETERTYPE
{
    D3DXPT_DWORD        = 0,
    D3DXPT_FLOAT        = 1,
    D3DXPT_VECTOR       = 2,
    D3DXPT_MATRIX       = 3,
    D3DXPT_TEXTURE      = 4,
    D3DXPT_VERTEXSHADER = 5,
    D3DXPT_PIXELSHADER  = 6,
    D3DXPT_CONSTANT     = 7,
    D3DXPT_STRING       = 8,
    D3DXPT_FORCE_DWORD  = 0x7fffffff /* force 32-bit size enum */

} D3DXPARAMETERTYPE;


typedef struct _D3DXEFFECT_DESC
{
    UINT Parameters;
    UINT Techniques;

} D3DXEFFECT_DESC;


typedef struct _D3DXPARAMETER_DESC
{
    LPCSTR Name;
    LPCSTR Index;
    D3DXPARAMETERTYPE Type;

} D3DXPARAMETER_DESC;


typedef struct _D3DXTECHNIQUE_DESC
{
    LPCSTR Name;
    LPCSTR Index;
    UINT   Passes;

} D3DXTECHNIQUE_DESC;


typedef struct _D3DXPASS_DESC
{
    LPCSTR Name;
    LPCSTR Index;

} D3DXPASS_DESC;



//////////////////////////////////////////////////////////////////////////////
// ID3DXEffect ///////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

typedef interface ID3DXEffect ID3DXEffect;
typedef interface ID3DXEffect *LPD3DXEFFECT;

// {281BBDD4-AEDF-4907-8650-E79CDFD45165}
DEFINE_GUID( IID_ID3DXEffect, 
0x281bbdd4, 0xaedf, 0x4907, 0x86, 0x50, 0xe7, 0x9c, 0xdf, 0xd4, 0x51, 0x65);

#undef INTERFACE
#define INTERFACE ID3DXEffect

DECLARE_INTERFACE_(ID3DXEffect, IUnknown)
{
    // IUnknown
    STDMETHOD(QueryInterface)(THIS_ REFIID iid, LPVOID *ppv) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    // ID3DXEffect
    STDMETHOD(GetDevice)(THIS_ LPDIRECT3DDEVICE8* ppDevice) PURE;
    STDMETHOD(GetDesc)(THIS_ D3DXEFFECT_DESC* pDesc) PURE;
    STDMETHOD(GetParameterDesc)(THIS_ LPCSTR pParameter, D3DXPARAMETER_DESC* pDesc) PURE;
    STDMETHOD(GetTechniqueDesc)(THIS_ LPCSTR pTechnique, D3DXTECHNIQUE_DESC* pDesc) PURE;
    STDMETHOD(GetPassDesc)(THIS_ LPCSTR pTechnique, LPCSTR pPass, D3DXPASS_DESC* pDesc) PURE;
    STDMETHOD(FindNextValidTechnique)(THIS_ LPCSTR pTechnique, D3DXTECHNIQUE_DESC* pDesc) PURE;
    STDMETHOD(CloneEffect)(THIS_ LPDIRECT3DDEVICE8 pDevice, LPD3DXEFFECT* ppEffect) PURE;
    STDMETHOD(GetCompiledEffect)(THIS_ LPD3DXBUFFER* ppCompiledEffect) PURE;

    STDMETHOD(SetTechnique)(THIS_ LPCSTR pTechnique) PURE;
    STDMETHOD(GetTechnique)(THIS_ LPCSTR* ppTechnique) PURE;

    STDMETHOD(SetDword)(THIS_ LPCSTR pParameter, DWORD dw) PURE;
    STDMETHOD(GetDword)(THIS_ LPCSTR pParameter, DWORD* pdw) PURE; 
    STDMETHOD(SetFloat)(THIS_ LPCSTR pParameter, FLOAT f) PURE;
    STDMETHOD(GetFloat)(THIS_ LPCSTR pParameter, FLOAT* pf) PURE;    
    STDMETHOD(SetVector)(THIS_ LPCSTR pParameter, D3DXVECTOR4* pVector) PURE;
    STDMETHOD(GetVector)(THIS_ LPCSTR pParameter, D3DXVECTOR4* pVector) PURE;
    STDMETHOD(SetMatrix)(THIS_ LPCSTR pParameter, D3DXMATRIX* pMatrix) PURE;
    STDMETHOD(GetMatrix)(THIS_ LPCSTR pParameter, D3DXMATRIX* pMatrix) PURE;
    STDMETHOD(SetTexture)(THIS_ LPCSTR pParameter, LPDIRECT3DBASETEXTURE8 pTexture) PURE;
    STDMETHOD(GetTexture)(THIS_ LPCSTR pParameter, LPDIRECT3DBASETEXTURE8 *ppTexture) PURE;
    STDMETHOD(SetVertexShader)(THIS_ LPCSTR pParameter, DWORD Handle) PURE;
    STDMETHOD(GetVertexShader)(THIS_ LPCSTR pParameter, DWORD* pHandle) PURE;
    STDMETHOD(SetPixelShader)(THIS_ LPCSTR pParameter, DWORD Handle) PURE;
    STDMETHOD(GetPixelShader)(THIS_ LPCSTR pParameter, DWORD* pHandle) PURE;
    STDMETHOD(SetString)(THIS_ LPCSTR pParameter, LPCSTR pString) PURE;
    STDMETHOD(GetString)(THIS_ LPCSTR pParameter, LPCSTR* ppString) PURE;
    STDMETHOD_(BOOL, IsParameterUsed)(THIS_ LPCSTR pParameter) PURE;

    STDMETHOD(Validate)(THIS) PURE;
    STDMETHOD(Begin)(THIS_ UINT *pPasses, DWORD Flags) PURE;
    STDMETHOD(Pass)(THIS_ UINT Pass) PURE;
    STDMETHOD(End)(THIS) PURE;
    STDMETHOD(OnLostDevice)(THIS) PURE;
    STDMETHOD(OnResetDevice)(THIS) PURE;
};



//////////////////////////////////////////////////////////////////////////////
// APIs //////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


#ifdef __cplusplus
extern "C" {
#endif //__cplusplus


//----------------------------------------------------------------------------
// D3DXCreateEffect:
// -----------------
// Creates an effect from an ascii or binaray effect description.
//
// Parameters:
//  pDevice
//      Pointer of the device on which to create the effect
//  pSrcFile
//      Name of the file containing the effect description
//  hSrcModule
//      Module handle. if NULL, current module will be used.
//  pSrcResource
//      Resource name in module
//  pSrcData
//      Pointer to effect description
//  SrcDataSize
//      Size of the effect description in bytes
//  ppEffect
//      Returns a buffer containing created effect.
//  ppCompilationErrors
//      Returns a buffer containing any error messages which occurred during
//      compile.  Or NULL if you do not care about the error messages.
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXCreateEffectFromFileA(
        LPDIRECT3DDEVICE8 pDevice,
        LPCSTR            pSrcFile,
        LPD3DXEFFECT*     ppEffect,
        LPD3DXBUFFER*     ppCompilationErrors);

HRESULT WINAPI
    D3DXCreateEffectFromFileW(
        LPDIRECT3DDEVICE8 pDevice,
        LPCWSTR           pSrcFile,
        LPD3DXEFFECT*     ppEffect,
        LPD3DXBUFFER*     ppCompilationErrors);

#ifdef UNICODE
#define D3DXCreateEffectFromFile D3DXCreateEffectFromFileW
#else
#define D3DXCreateEffectFromFile D3DXCreateEffectFromFileA
#endif


HRESULT WINAPI
    D3DXCreateEffectFromResourceA(
        LPDIRECT3DDEVICE8 pDevice,
        HMODULE           hSrcModule,
        LPCSTR            pSrcResource,
        LPD3DXEFFECT*     ppEffect,
        LPD3DXBUFFER*     ppCompilationErrors);

HRESULT WINAPI
    D3DXCreateEffectFromResourceW(
        LPDIRECT3DDEVICE8 pDevice,
        HMODULE           hSrcModule,
        LPCWSTR           pSrcResource,
        LPD3DXEFFECT*     ppEffect,
        LPD3DXBUFFER*     ppCompilationErrors);

#ifdef UNICODE
#define D3DXCreateEffectFromResource D3DXCreateEffectFromResourceW
#else
#define D3DXCreateEffectFromResource D3DXCreateEffectFromResourceA
#endif


HRESULT WINAPI
    D3DXCreateEffect(
        LPDIRECT3DDEVICE8 pDevice,
        LPCVOID           pSrcData,
        UINT              SrcDataSize,
        LPD3DXEFFECT*     ppEffect,
        LPD3DXBUFFER*     ppCompilationErrors);


#ifdef __cplusplus
}
#endif //__cplusplus

#endif //__D3DX8EFFECT_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8math.h ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8math.h
//  Content:    D3DX math types and functions
//
//////////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8MATH_H__
#define __D3DX8MATH_H__

#include <math.h>
#pragma warning(disable:4201) // anonymous unions warning



//===========================================================================
//
// General purpose utilities
//
//===========================================================================
#define D3DX_PI    ((FLOAT)  3.141592654f)
#define D3DX_1BYPI ((FLOAT)  0.318309886f)

#define D3DXToRadian( degree ) ((degree) * (D3DX_PI / 180.0f))
#define D3DXToDegree( radian ) ((radian) * (180.0f / D3DX_PI))



//===========================================================================
//
// Vectors
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------
typedef struct D3DXVECTOR2
{
#ifdef __cplusplus
public:
    D3DXVECTOR2() {};
    D3DXVECTOR2( CONST FLOAT * );
    D3DXVECTOR2( FLOAT x, FLOAT y );

    // casting
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // assignment operators
    D3DXVECTOR2& operator += ( CONST D3DXVECTOR2& );
    D3DXVECTOR2& operator -= ( CONST D3DXVECTOR2& );
    D3DXVECTOR2& operator *= ( FLOAT );
    D3DXVECTOR2& operator /= ( FLOAT );

    // unary operators
    D3DXVECTOR2 operator + () const;
    D3DXVECTOR2 operator - () const;

    // binary operators
    D3DXVECTOR2 operator + ( CONST D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator - ( CONST D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator * ( FLOAT ) const;
    D3DXVECTOR2 operator / ( FLOAT ) const;

    friend D3DXVECTOR2 operator * ( FLOAT, CONST D3DXVECTOR2& );

    BOOL operator == ( CONST D3DXVECTOR2& ) const;
    BOOL operator != ( CONST D3DXVECTOR2& ) const;


public:
#endif //__cplusplus
    FLOAT x, y;
} D3DXVECTOR2, *LPD3DXVECTOR2;


//--------------------------
// 3D Vector
//--------------------------
#ifdef __cplusplus
typedef struct D3DXVECTOR3 : public D3DVECTOR
{
public:
    D3DXVECTOR3() {};
    D3DXVECTOR3( CONST FLOAT * );
    D3DXVECTOR3( CONST D3DVECTOR& );
    D3DXVECTOR3( FLOAT x, FLOAT y, FLOAT z );

    // casting
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // assignment operators
    D3DXVECTOR3& operator += ( CONST D3DXVECTOR3& );
    D3DXVECTOR3& operator -= ( CONST D3DXVECTOR3& );
    D3DXVECTOR3& operator *= ( FLOAT );
    D3DXVECTOR3& operator /= ( FLOAT );

    // unary operators
    D3DXVECTOR3 operator + () const;
    D3DXVECTOR3 operator - () const;

    // binary operators
    D3DXVECTOR3 operator + ( CONST D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator - ( CONST D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator * ( FLOAT ) const;
    D3DXVECTOR3 operator / ( FLOAT ) const;

    friend D3DXVECTOR3 operator * ( FLOAT, CONST struct D3DXVECTOR3& );

    BOOL operator == ( CONST D3DXVECTOR3& ) const;
    BOOL operator != ( CONST D3DXVECTOR3& ) const;

} D3DXVECTOR3, *LPD3DXVECTOR3;

#else //!__cplusplus
typedef struct _D3DVECTOR D3DXVECTOR3, *LPD3DXVECTOR3;
#endif //!__cplusplus


//--------------------------
// 4D Vector
//--------------------------
typedef struct D3DXVECTOR4
{
#ifdef __cplusplus
public:
    D3DXVECTOR4() {};
    D3DXVECTOR4( CONST FLOAT* );
    D3DXVECTOR4( FLOAT x, FLOAT y, FLOAT z, FLOAT w );

    // casting
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // assignment operators
    D3DXVECTOR4& operator += ( CONST D3DXVECTOR4& );
    D3DXVECTOR4& operator -= ( CONST D3DXVECTOR4& );
    D3DXVECTOR4& operator *= ( FLOAT );
    D3DXVECTOR4& operator /= ( FLOAT );

    // unary operators
    D3DXVECTOR4 operator + () const;
    D3DXVECTOR4 operator - () const;

    // binary operators
    D3DXVECTOR4 operator + ( CONST D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator - ( CONST D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator * ( FLOAT ) const;
    D3DXVECTOR4 operator / ( FLOAT ) const;

    friend D3DXVECTOR4 operator * ( FLOAT, CONST D3DXVECTOR4& );

    BOOL operator == ( CONST D3DXVECTOR4& ) const;
    BOOL operator != ( CONST D3DXVECTOR4& ) const;

public:
#endif //__cplusplus
    FLOAT x, y, z, w;
} D3DXVECTOR4, *LPD3DXVECTOR4;


//===========================================================================
//
// Matrices
//
//===========================================================================
#ifdef __cplusplus
typedef struct D3DXMATRIX : public D3DMATRIX
{
public:
    D3DXMATRIX() {};
    D3DXMATRIX( CONST FLOAT * );
    D3DXMATRIX( CONST D3DMATRIX& );
    D3DXMATRIX( FLOAT _11, FLOAT _12, FLOAT _13, FLOAT _14,
                FLOAT _21, FLOAT _22, FLOAT _23, FLOAT _24,
                FLOAT _31, FLOAT _32, FLOAT _33, FLOAT _34,
                FLOAT _41, FLOAT _42, FLOAT _43, FLOAT _44 );


    // access grants
    FLOAT& operator () ( UINT Row, UINT Col );
    FLOAT  operator () ( UINT Row, UINT Col ) const;

    // casting operators
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // assignment operators
    D3DXMATRIX& operator *= ( CONST D3DXMATRIX& );
    D3DXMATRIX& operator += ( CONST D3DXMATRIX& );
    D3DXMATRIX& operator -= ( CONST D3DXMATRIX& );
    D3DXMATRIX& operator *= ( FLOAT );
    D3DXMATRIX& operator /= ( FLOAT );

    // unary operators
    D3DXMATRIX operator + () const;
    D3DXMATRIX operator - () const;

    // binary operators
    D3DXMATRIX operator * ( CONST D3DXMATRIX& ) const;
    D3DXMATRIX operator + ( CONST D3DXMATRIX& ) const;
    D3DXMATRIX operator - ( CONST D3DXMATRIX& ) const;
    D3DXMATRIX operator * ( FLOAT ) const;
    D3DXMATRIX operator / ( FLOAT ) const;

    friend D3DXMATRIX operator * ( FLOAT, CONST D3DXMATRIX& );

    BOOL operator == ( CONST D3DXMATRIX& ) const;
    BOOL operator != ( CONST D3DXMATRIX& ) const;

} D3DXMATRIX, *LPD3DXMATRIX;

#else //!__cplusplus
typedef struct _D3DMATRIX D3DXMATRIX, *LPD3DXMATRIX;
#endif //!__cplusplus

#ifdef __cplusplus
typedef struct _D3DXMATRIXA16 : public D3DXMATRIX
{
    _D3DXMATRIXA16() {}
    _D3DXMATRIXA16( CONST FLOAT * f): D3DXMATRIX(f) {}
    _D3DXMATRIXA16( CONST D3DMATRIX& m): D3DXMATRIX(m) {}
    _D3DXMATRIXA16( FLOAT _11, FLOAT _12, FLOAT _13, FLOAT _14,
                    FLOAT _21, FLOAT _22, FLOAT _23, FLOAT _24,
                    FLOAT _31, FLOAT _32, FLOAT _33, FLOAT _34,
                    FLOAT _41, FLOAT _42, FLOAT _43, FLOAT _44 ) :
                D3DXMATRIX(_11, _12, _13, _14,
                           _21, _22, _23, _24,
                           _31, _32, _33, _34,
                           _41, _42, _43, _44) {}
    void* operator new(size_t s)
    {
        LPBYTE p = ::new BYTE[s + 16];
        if (p)
        {
            BYTE offset = (BYTE)(16 - ((ULONG_PTR)p & 15));
            p += offset;
            p[-1] = offset;
        }
        return p;
    };

    void* operator new[](size_t s)
    {
        LPBYTE p = ::new BYTE[s + 16];
        if (p)
        {
            BYTE offset = (BYTE)(16 - ((ULONG_PTR)p & 15));
            p += offset;
            p[-1] = offset;
        }
        return p;
    };

    // This is NOT a virtual operator. If you cast
    // to D3DXMATRIX, do not delete using that
    void operator delete(void* p)
    {
        if(p)
        {
            BYTE* pb = static_cast<BYTE*>(p);
            pb -= pb[-1];
            ::delete [] pb;
        }
    };

    // This is NOT a virtual operator. If you cast
    // to D3DXMATRIX, do not delete using that
    void operator delete[](void* p)
    {
        if(p)
        {
            BYTE* pb = static_cast<BYTE*>(p);
            pb -= pb[-1];
            ::delete [] pb;
        }
    };

    struct _D3DXMATRIXA16& operator=(CONST D3DXMATRIX& rhs)
    {
        memcpy(&_11, &rhs, sizeof(D3DXMATRIX));
        return *this;
    };
} _D3DXMATRIXA16;

#else //!__cplusplus
typedef D3DXMATRIX  _D3DXMATRIXA16;
#endif //!__cplusplus

#if _MSC_FULL_VER >= 12008804        // First Processor Pack
#define _ALIGN_16 __declspec(align(16))
#else
#define _ALIGN_16
#endif

#define D3DXMATRIXA16 _ALIGN_16 _D3DXMATRIXA16

typedef D3DXMATRIXA16 *LPD3DXMATRIXA16;

//===========================================================================
//
//    Quaternions
//
//===========================================================================
typedef struct D3DXQUATERNION
{
#ifdef __cplusplus
public:
    D3DXQUATERNION() {}
    D3DXQUATERNION( CONST FLOAT * );
    D3DXQUATERNION( FLOAT x, FLOAT y, FLOAT z, FLOAT w );

    // casting
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // assignment operators
    D3DXQUATERNION& operator += ( CONST D3DXQUATERNION& );
    D3DXQUATERNION& operator -= ( CONST D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( CONST D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( FLOAT );
    D3DXQUATERNION& operator /= ( FLOAT );

    // unary operators
    D3DXQUATERNION  operator + () const;
    D3DXQUATERNION  operator - () const;

    // binary operators
    D3DXQUATERNION operator + ( CONST D3DXQUATERNION& ) const;
    D3DXQUATERNION operator - ( CONST D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( CONST D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( FLOAT ) const;
    D3DXQUATERNION operator / ( FLOAT ) const;

    friend D3DXQUATERNION operator * (FLOAT, CONST D3DXQUATERNION& );

    BOOL operator == ( CONST D3DXQUATERNION& ) const;
    BOOL operator != ( CONST D3DXQUATERNION& ) const;

#endif //__cplusplus
    FLOAT x, y, z, w;
} D3DXQUATERNION, *LPD3DXQUATERNION;


//===========================================================================
//
// Planes
//
//===========================================================================
typedef struct D3DXPLANE
{
#ifdef __cplusplus
public:
    D3DXPLANE() {}
    D3DXPLANE( CONST FLOAT* );
    D3DXPLANE( FLOAT a, FLOAT b, FLOAT c, FLOAT d );

    // casting
    operator FLOAT* ();
    operator CONST FLOAT* () const;

    // unary operators
    D3DXPLANE operator + () const;
    D3DXPLANE operator - () const;

    // binary operators
    BOOL operator == ( CONST D3DXPLANE& ) const;
    BOOL operator != ( CONST D3DXPLANE& ) const;

#endif //__cplusplus
    FLOAT a, b, c, d;
} D3DXPLANE, *LPD3DXPLANE;


//===========================================================================
//
// Colors
//
//===========================================================================

typedef struct D3DXCOLOR
{
#ifdef __cplusplus
public:
    D3DXCOLOR() {}
    D3DXCOLOR( DWORD argb );
    D3DXCOLOR( CONST FLOAT * );
    D3DXCOLOR( CONST D3DCOLORVALUE& );
    D3DXCOLOR( FLOAT r, FLOAT g, FLOAT b, FLOAT a );

    // casting
    operator DWORD () const;

    operator FLOAT* ();
    operator CONST FLOAT* () const;

    operator D3DCOLORVALUE* ();
    operator CONST D3DCOLORVALUE* () const;

    operator D3DCOLORVALUE& ();
    operator CONST D3DCOLORVALUE& () const;

    // assignment operators
    D3DXCOLOR& operator += ( CONST D3DXCOLOR& );
    D3DXCOLOR& operator -= ( CONST D3DXCOLOR& );
    D3DXCOLOR& operator *= ( FLOAT );
    D3DXCOLOR& operator /= ( FLOAT );

    // unary operators
    D3DXCOLOR operator + () const;
    D3DXCOLOR operator - () const;

    // binary operators
    D3DXCOLOR operator + ( CONST D3DXCOLOR& ) const;
    D3DXCOLOR operator - ( CONST D3DXCOLOR& ) const;
    D3DXCOLOR operator * ( FLOAT ) const;
    D3DXCOLOR operator / ( FLOAT ) const;

    friend D3DXCOLOR operator * (FLOAT, CONST D3DXCOLOR& );

    BOOL operator == ( CONST D3DXCOLOR& ) const;
    BOOL operator != ( CONST D3DXCOLOR& ) const;

#endif //__cplusplus
    FLOAT r, g, b, a;
} D3DXCOLOR, *LPD3DXCOLOR;



//===========================================================================
//
// D3DX math functions:
//
// NOTE:
//  * All these functions can take the same object as in and out parameters.
//
//  * Out parameters are typically also returned as return values, so that
//    the output of one function may be used as a parameter to another.
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------

// inline

FLOAT D3DXVec2Length
    ( CONST D3DXVECTOR2 *pV );

FLOAT D3DXVec2LengthSq
    ( CONST D3DXVECTOR2 *pV );

FLOAT D3DXVec2Dot
    ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

// Z component of ((x1,y1,0) cross (x2,y2,0))
FLOAT D3DXVec2CCW
    ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2)
D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2)
D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, FLOAT s );

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2,
      FLOAT s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR2* WINAPI D3DXVec2Normalize
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR2* WINAPI D3DXVec2Hermite
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pT1,
      CONST D3DXVECTOR2 *pV2, CONST D3DXVECTOR2 *pT2, FLOAT s );

// CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)
D3DXVECTOR2* WINAPI D3DXVec2CatmullRom
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV0, CONST D3DXVECTOR2 *pV1,
      CONST D3DXVECTOR2 *pV2, CONST D3DXVECTOR2 *pV3, FLOAT s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR2* WINAPI D3DXVec2BaryCentric
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2,
      CONST D3DXVECTOR2 *pV3, FLOAT f, FLOAT g);

// Transform (x, y, 0, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec2Transform
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR2 *pV, CONST D3DXMATRIX *pM );

// Transform (x, y, 0, 1) by matrix, project result back into w=1.
D3DXVECTOR2* WINAPI D3DXVec2TransformCoord
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, CONST D3DXMATRIX *pM );

// Transform (x, y, 0, 0) by matrix.
D3DXVECTOR2* WINAPI D3DXVec2TransformNormal
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, CONST D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 3D Vector
//--------------------------

// inline

FLOAT D3DXVec3Length
    ( CONST D3DXVECTOR3 *pV );

FLOAT D3DXVec3LengthSq
    ( CONST D3DXVECTOR3 *pV );

FLOAT D3DXVec3Dot
    ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, FLOAT s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2,
      FLOAT s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR3* WINAPI D3DXVec3Normalize
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR3* WINAPI D3DXVec3Hermite
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pT1,
      CONST D3DXVECTOR3 *pV2, CONST D3DXVECTOR3 *pT2, FLOAT s );

// CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)
D3DXVECTOR3* WINAPI D3DXVec3CatmullRom
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV0, CONST D3DXVECTOR3 *pV1,
      CONST D3DXVECTOR3 *pV2, CONST D3DXVECTOR3 *pV3, FLOAT s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR3* WINAPI D3DXVec3BaryCentric
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2,
      CONST D3DXVECTOR3 *pV3, FLOAT f, FLOAT g);

// Transform (x, y, z, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec3Transform
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR3 *pV, CONST D3DXMATRIX *pM );

// Transform (x, y, z, 1) by matrix, project result back into w=1.
D3DXVECTOR3* WINAPI D3DXVec3TransformCoord
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, CONST D3DXMATRIX *pM );

// Transform (x, y, z, 0) by matrix.  If you transforming a normal by a 
// non-affine matrix, the matrix you pass to this function should be the 
// transpose of the inverse of the matrix you would use to transform a coord.
D3DXVECTOR3* WINAPI D3DXVec3TransformNormal
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, CONST D3DXMATRIX *pM );

// Project vector from object space into screen space
D3DXVECTOR3* WINAPI D3DXVec3Project
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, CONST D3DVIEWPORT8 *pViewport,
      CONST D3DXMATRIX *pProjection, CONST D3DXMATRIX *pView, CONST D3DXMATRIX *pWorld);

// Project vector from screen space into object space
D3DXVECTOR3* WINAPI D3DXVec3Unproject
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, CONST D3DVIEWPORT8 *pViewport,
      CONST D3DXMATRIX *pProjection, CONST D3DXMATRIX *pView, CONST D3DXMATRIX *pWorld);

#ifdef __cplusplus
}
#endif



//--------------------------
// 4D Vector
//--------------------------

// inline

FLOAT D3DXVec4Length
    ( CONST D3DXVECTOR4 *pV );

FLOAT D3DXVec4LengthSq
    ( CONST D3DXVECTOR4 *pV );

FLOAT D3DXVec4Dot
    ( CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2 );

D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2);

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2);

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV, FLOAT s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2,
      FLOAT s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Cross-product in 4 dimensions.
D3DXVECTOR4* WINAPI D3DXVec4Cross
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2,
      CONST D3DXVECTOR4 *pV3);

D3DXVECTOR4* WINAPI D3DXVec4Normalize
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR4* WINAPI D3DXVec4Hermite
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pT1,
      CONST D3DXVECTOR4 *pV2, CONST D3DXVECTOR4 *pT2, FLOAT s );

// CatmullRom interpolation between V1 (when s == 0) and V2 (when s == 1)
D3DXVECTOR4* WINAPI D3DXVec4CatmullRom
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV0, CONST D3DXVECTOR4 *pV1,
      CONST D3DXVECTOR4 *pV2, CONST D3DXVECTOR4 *pV3, FLOAT s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR4* WINAPI D3DXVec4BaryCentric
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2,
      CONST D3DXVECTOR4 *pV3, FLOAT f, FLOAT g);

// Transform vector by matrix.
D3DXVECTOR4* WINAPI D3DXVec4Transform
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV, CONST D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 4D Matrix
//--------------------------

// inline

D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut );

BOOL D3DXMatrixIsIdentity
    ( CONST D3DXMATRIX *pM );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

FLOAT WINAPI D3DXMatrixfDeterminant
    ( CONST D3DXMATRIX *pM );

D3DXMATRIX* WINAPI D3DXMatrixTranspose
    ( D3DXMATRIX *pOut, CONST D3DXMATRIX *pM );

// Matrix multiplication.  The result represents the transformation M2
// followed by the transformation M1.  (Out = M1 * M2)
D3DXMATRIX* WINAPI D3DXMatrixMultiply
    ( D3DXMATRIX *pOut, CONST D3DXMATRIX *pM1, CONST D3DXMATRIX *pM2 );

// Matrix multiplication, followed by a transpose. (Out = T(M1 * M2))
D3DXMATRIX* WINAPI D3DXMatrixMultiplyTranspose
    ( D3DXMATRIX *pOut, CONST D3DXMATRIX *pM1, CONST D3DXMATRIX *pM2 );

// Calculate inverse of matrix.  Inversion my fail, in which case NULL will
// be returned.  The determinant of pM is also returned it pfDeterminant
// is non-NULL.
D3DXMATRIX* WINAPI D3DXMatrixInverse
    ( D3DXMATRIX *pOut, FLOAT *pDeterminant, CONST D3DXMATRIX *pM );

// Build a matrix which scales by (sx, sy, sz)
D3DXMATRIX* WINAPI D3DXMatrixScaling
    ( D3DXMATRIX *pOut, FLOAT sx, FLOAT sy, FLOAT sz );

// Build a matrix which translates by (x, y, z)
D3DXMATRIX* WINAPI D3DXMatrixTranslation
    ( D3DXMATRIX *pOut, FLOAT x, FLOAT y, FLOAT z );

// Build a matrix which rotates around the X axis
D3DXMATRIX* WINAPI D3DXMatrixRotationX
    ( D3DXMATRIX *pOut, FLOAT Angle );

// Build a matrix which rotates around the Y axis
D3DXMATRIX* WINAPI D3DXMatrixRotationY
    ( D3DXMATRIX *pOut, FLOAT Angle );

// Build a matrix which rotates around the Z axis
D3DXMATRIX* WINAPI D3DXMatrixRotationZ
    ( D3DXMATRIX *pOut, FLOAT Angle );

// Build a matrix which rotates around an arbitrary axis
D3DXMATRIX* WINAPI D3DXMatrixRotationAxis
    ( D3DXMATRIX *pOut, CONST D3DXVECTOR3 *pV, FLOAT Angle );

// Build a matrix from a quaternion
D3DXMATRIX* WINAPI D3DXMatrixRotationQuaternion
    ( D3DXMATRIX *pOut, CONST D3DXQUATERNION *pQ);

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXMATRIX* WINAPI D3DXMatrixRotationYawPitchRoll
    ( D3DXMATRIX *pOut, FLOAT Yaw, FLOAT Pitch, FLOAT Roll );


// Build transformation matrix.  NULL arguments are treated as identity.
// Mout = Msc-1 * Msr-1 * Ms * Msr * Msc * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixTransformation
    ( D3DXMATRIX *pOut, CONST D3DXVECTOR3 *pScalingCenter,
      CONST D3DXQUATERNION *pScalingRotation, CONST D3DXVECTOR3 *pScaling,
      CONST D3DXVECTOR3 *pRotationCenter, CONST D3DXQUATERNION *pRotation,
      CONST D3DXVECTOR3 *pTranslation);

// Build affine transformation matrix.  NULL arguments are treated as identity.
// Mout = Ms * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixAffineTransformation
    ( D3DXMATRIX *pOut, FLOAT Scaling, CONST D3DXVECTOR3 *pRotationCenter,
      CONST D3DXQUATERNION *pRotation, CONST D3DXVECTOR3 *pTranslation);

// Build a lookat matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAtRH
    ( D3DXMATRIX *pOut, CONST D3DXVECTOR3 *pEye, CONST D3DXVECTOR3 *pAt,
      CONST D3DXVECTOR3 *pUp );

// Build a lookat matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAtLH
    ( D3DXMATRIX *pOut, CONST D3DXVECTOR3 *pEye, CONST D3DXVECTOR3 *pAt,
      CONST D3DXVECTOR3 *pUp );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveRH
    ( D3DXMATRIX *pOut, FLOAT w, FLOAT h, FLOAT zn, FLOAT zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveLH
    ( D3DXMATRIX *pOut, FLOAT w, FLOAT h, FLOAT zn, FLOAT zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFovRH
    ( D3DXMATRIX *pOut, FLOAT fovy, FLOAT Aspect, FLOAT zn, FLOAT zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFovLH
    ( D3DXMATRIX *pOut, FLOAT fovy, FLOAT Aspect, FLOAT zn, FLOAT zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenterRH
    ( D3DXMATRIX *pOut, FLOAT l, FLOAT r, FLOAT b, FLOAT t, FLOAT zn,
      FLOAT zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenterLH
    ( D3DXMATRIX *pOut, FLOAT l, FLOAT r, FLOAT b, FLOAT t, FLOAT zn,
      FLOAT zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoRH
    ( D3DXMATRIX *pOut, FLOAT w, FLOAT h, FLOAT zn, FLOAT zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoLH
    ( D3DXMATRIX *pOut, FLOAT w, FLOAT h, FLOAT zn, FLOAT zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenterRH
    ( D3DXMATRIX *pOut, FLOAT l, FLOAT r, FLOAT b, FLOAT t, FLOAT zn,
      FLOAT zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenterLH
    ( D3DXMATRIX *pOut, FLOAT l, FLOAT r, FLOAT b, FLOAT t, FLOAT zn,
      FLOAT zf );

// Build a matrix which flattens geometry into a plane, as if casting
// a shadow from a light.
D3DXMATRIX* WINAPI D3DXMatrixShadow
    ( D3DXMATRIX *pOut, CONST D3DXVECTOR4 *pLight,
      CONST D3DXPLANE *pPlane );

// Build a matrix which reflects the coordinate system about a plane
D3DXMATRIX* WINAPI D3DXMatrixReflect
    ( D3DXMATRIX *pOut, CONST D3DXPLANE *pPlane );

#ifdef __cplusplus
}
#endif


//--------------------------
// Quaternion
//--------------------------

// inline

FLOAT D3DXQuaternionLength
    ( CONST D3DXQUATERNION *pQ );

// Length squared, or "norm"
FLOAT D3DXQuaternionLengthSq
    ( CONST D3DXQUATERNION *pQ );

FLOAT D3DXQuaternionDot
    ( CONST D3DXQUATERNION *pQ1, CONST D3DXQUATERNION *pQ2 );

// (0, 0, 0, 1)
D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut );

BOOL D3DXQuaternionIsIdentity
    ( CONST D3DXQUATERNION *pQ );

// (-x, -y, -z, w)
D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Compute a quaternin's axis and angle of rotation. Expects unit quaternions.
void WINAPI D3DXQuaternionToAxisAngle
    ( CONST D3DXQUATERNION *pQ, D3DXVECTOR3 *pAxis, FLOAT *pAngle );

// Build a quaternion from a rotation matrix.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationMatrix
    ( D3DXQUATERNION *pOut, CONST D3DXMATRIX *pM);

// Rotation about arbitrary axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationAxis
    ( D3DXQUATERNION *pOut, CONST D3DXVECTOR3 *pV, FLOAT Angle );

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationYawPitchRoll
    ( D3DXQUATERNION *pOut, FLOAT Yaw, FLOAT Pitch, FLOAT Roll );

// Quaternion multiplication.  The result represents the rotation Q2
// followed by the rotation Q1.  (Out = Q2 * Q1)
D3DXQUATERNION* WINAPI D3DXQuaternionMultiply
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ1,
      CONST D3DXQUATERNION *pQ2 );

D3DXQUATERNION* WINAPI D3DXQuaternionNormalize
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ );

// Conjugate and re-norm
D3DXQUATERNION* WINAPI D3DXQuaternionInverse
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ );

// Expects unit quaternions.
// if q = (cos(theta), sin(theta) * v); ln(q) = (0, theta * v)
D3DXQUATERNION* WINAPI D3DXQuaternionLn
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ );

// Expects pure quaternions. (w == 0)  w is ignored in calculation.
// if q = (0, theta * v); exp(q) = (cos(theta), sin(theta) * v)
D3DXQUATERNION* WINAPI D3DXQuaternionExp
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ );
      
// Spherical linear interpolation between Q1 (t == 0) and Q2 (t == 1).
// Expects unit quaternions.
D3DXQUATERNION* WINAPI D3DXQuaternionSlerp
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ1,
      CONST D3DXQUATERNION *pQ2, FLOAT t );

// Spherical quadrangle interpolation.
// Slerp(Slerp(Q1, C, t), Slerp(A, B, t), 2t(1-t))
D3DXQUATERNION* WINAPI D3DXQuaternionSquad
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ1,
      CONST D3DXQUATERNION *pA, CONST D3DXQUATERNION *pB,
      CONST D3DXQUATERNION *pC, FLOAT t );

// Setup control points for spherical quadrangle interpolation
// from Q1 to Q2.  The control points are chosen in such a way 
// to ensure the continuity of tangents with adjacent segments.
void WINAPI D3DXQuaternionSquadSetup
    ( D3DXQUATERNION *pAOut, D3DXQUATERNION *pBOut, D3DXQUATERNION *pCOut,
      CONST D3DXQUATERNION *pQ0, CONST D3DXQUATERNION *pQ1, 
      CONST D3DXQUATERNION *pQ2, CONST D3DXQUATERNION *pQ3 );

// Barycentric interpolation.
// Slerp(Slerp(Q1, Q2, f+g), Slerp(Q1, Q3, f+g), g/(f+g))
D3DXQUATERNION* WINAPI D3DXQuaternionBaryCentric
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ1,
      CONST D3DXQUATERNION *pQ2, CONST D3DXQUATERNION *pQ3,
      FLOAT f, FLOAT g );

#ifdef __cplusplus
}
#endif


//--------------------------
// Plane
//--------------------------

// inline

// ax + by + cz + dw
FLOAT D3DXPlaneDot
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR4 *pV);

// ax + by + cz + d
FLOAT D3DXPlaneDotCoord
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR3 *pV);

// ax + by + cz
FLOAT D3DXPlaneDotNormal
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR3 *pV);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Normalize plane (so that |a,b,c| == 1)
D3DXPLANE* WINAPI D3DXPlaneNormalize
    ( D3DXPLANE *pOut, CONST D3DXPLANE *pP);

// Find the intersection between a plane and a line.  If the line is
// parallel to the plane, NULL is returned.
D3DXVECTOR3* WINAPI D3DXPlaneIntersectLine
    ( D3DXVECTOR3 *pOut, CONST D3DXPLANE *pP, CONST D3DXVECTOR3 *pV1,
      CONST D3DXVECTOR3 *pV2);

// Construct a plane from a point and a normal
D3DXPLANE* WINAPI D3DXPlaneFromPointNormal
    ( D3DXPLANE *pOut, CONST D3DXVECTOR3 *pPoint, CONST D3DXVECTOR3 *pNormal);

// Construct a plane from 3 points
D3DXPLANE* WINAPI D3DXPlaneFromPoints
    ( D3DXPLANE *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2,
      CONST D3DXVECTOR3 *pV3);

// Transform a plane by a matrix.  The vector (a,b,c) must be normal.
// M should be the inverse transpose of the transformation desired.
D3DXPLANE* WINAPI D3DXPlaneTransform
    ( D3DXPLANE *pOut, CONST D3DXPLANE *pP, CONST D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// Color
//--------------------------

// inline

// (1-r, 1-g, 1-b, a)
D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC);

D3DXCOLOR* D3DXColorAdd
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorSubtract
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorScale
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC, FLOAT s);

// (r1*r2, g1*g2, b1*b2, a1*a2)
D3DXCOLOR* D3DXColorModulate
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2);

// Linear interpolation of r,g,b, and a. C1 + s(C2-C1)
D3DXCOLOR* D3DXColorLerp
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2, FLOAT s);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Interpolate r,g,b between desaturated color and color.
// DesaturatedColor + s(Color - DesaturatedColor)
D3DXCOLOR* WINAPI D3DXColorAdjustSaturation
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC, FLOAT s);

// Interpolate r,g,b between 50% grey and color.  Grey + s(Color - Grey)
D3DXCOLOR* WINAPI D3DXColorAdjustContrast
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC, FLOAT c);

#ifdef __cplusplus
}
#endif




//--------------------------
// Misc
//--------------------------

#ifdef __cplusplus
extern "C" {
#endif

// Calculate Fresnel term given the cosine of theta (likely obtained by
// taking the dot of two normals), and the refraction index of the material.
FLOAT WINAPI D3DXFresnelTerm
    (FLOAT CosTheta, FLOAT RefractionIndex);     

#ifdef __cplusplus
}
#endif



//===========================================================================
//
//    Matrix Stack
//
//===========================================================================

typedef interface ID3DXMatrixStack ID3DXMatrixStack;
typedef interface ID3DXMatrixStack *LPD3DXMATRIXSTACK;

// {E3357330-CC5E-11d2-A434-00A0C90629A8}
DEFINE_GUID( IID_ID3DXMatrixStack,
0xe3357330, 0xcc5e, 0x11d2, 0xa4, 0x34, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);


#undef INTERFACE
#define INTERFACE ID3DXMatrixStack

DECLARE_INTERFACE_(ID3DXMatrixStack, IUnknown)
{
    //
    // IUnknown methods
    //
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    //
    // ID3DXMatrixStack methods
    //

    // Pops the top of the stack, returns the current top
    // *after* popping the top.
    STDMETHOD(Pop)(THIS) PURE;

    // Pushes the stack by one, duplicating the current matrix.
    STDMETHOD(Push)(THIS) PURE;

    // Loads identity in the current matrix.
    STDMETHOD(LoadIdentity)(THIS) PURE;

    // Loads the given matrix into the current matrix
    STDMETHOD(LoadMatrix)(THIS_ CONST D3DXMATRIX* pM ) PURE;

    // Right-Multiplies the given matrix to the current matrix.
    // (transformation is about the current world origin)
    STDMETHOD(MultMatrix)(THIS_ CONST D3DXMATRIX* pM ) PURE;

    // Left-Multiplies the given matrix to the current matrix
    // (transformation is about the local origin of the object)
    STDMETHOD(MultMatrixLocal)(THIS_ CONST D3DXMATRIX* pM ) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the current world origin)
    STDMETHOD(RotateAxis)
        (THIS_ CONST D3DXVECTOR3* pV, FLOAT Angle) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the local origin of the object)
    STDMETHOD(RotateAxisLocal)
        (THIS_ CONST D3DXVECTOR3* pV, FLOAT Angle) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // current world origin)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRoll)
        (THIS_ FLOAT Yaw, FLOAT Pitch, FLOAT Roll) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // local origin of the object)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRollLocal)
        (THIS_ FLOAT Yaw, FLOAT Pitch, FLOAT Roll) PURE;

    // Right multiply the current matrix with the computed scale
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Scale)(THIS_ FLOAT x, FLOAT y, FLOAT z) PURE;

    // Left multiply the current matrix with the computed scale
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(ScaleLocal)(THIS_ FLOAT x, FLOAT y, FLOAT z) PURE;

    // Right multiply the current matrix with the computed translation
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Translate)(THIS_ FLOAT x, FLOAT y, FLOAT z ) PURE;

    // Left multiply the current matrix with the computed translation
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(TranslateLocal)(THIS_ FLOAT x, FLOAT y, FLOAT z) PURE;

    // Obtain the current matrix at the top of the stack
    STDMETHOD_(D3DXMATRIX*, GetTop)(THIS) PURE;
};

#ifdef __cplusplus
extern "C" {
#endif

HRESULT WINAPI 
    D3DXCreateMatrixStack( 
        DWORD               Flags, 
        LPD3DXMATRIXSTACK*  ppStack);

#ifdef __cplusplus
}
#endif

#include "d3dx8math.inl"

#pragma warning(default:4201)

#endif // __D3DX8MATH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8math.inl ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8math.inl
//  Content:    D3DX math inline functions
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __D3DX8MATH_INL__
#define __D3DX8MATH_INL__


//===========================================================================
//
// Inline Class Methods
//
//===========================================================================

#ifdef __cplusplus

//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE
D3DXVECTOR2::D3DXVECTOR2( CONST FLOAT *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
}

D3DXINLINE
D3DXVECTOR2::D3DXVECTOR2( FLOAT fx, FLOAT fy )
{
    x = fx;
    y = fy;
}

// casting
D3DXINLINE
D3DXVECTOR2::operator FLOAT* ()
{
    return (FLOAT *) &x;
}

D3DXINLINE
D3DXVECTOR2::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &x;
}

// assignment operators
D3DXINLINE D3DXVECTOR2&
D3DXVECTOR2::operator += ( CONST D3DXVECTOR2& v )
{
    x += v.x;
    y += v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2&
D3DXVECTOR2::operator -= ( CONST D3DXVECTOR2& v )
{
    x -= v.x;
    y -= v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2&
D3DXVECTOR2::operator *= ( FLOAT f )
{
    x *= f;
    y *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR2&
D3DXVECTOR2::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    return *this;
}

// unary operators
D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator - () const
{
    return D3DXVECTOR2(-x, -y);
}

// binary operators
D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator + ( CONST D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x + v.x, y + v.y);
}

D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator - ( CONST D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x - v.x, y - v.y);
}

D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator * ( FLOAT f ) const
{
    return D3DXVECTOR2(x * f, y * f);
}

D3DXINLINE D3DXVECTOR2
D3DXVECTOR2::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXVECTOR2(x * fInv, y * fInv);
}


D3DXINLINE D3DXVECTOR2
operator * ( FLOAT f, CONST D3DXVECTOR2& v )
{
    return D3DXVECTOR2(f * v.x, f * v.y);
}

D3DXINLINE BOOL
D3DXVECTOR2::operator == ( CONST D3DXVECTOR2& v ) const
{
    return x == v.x && y == v.y;
}

D3DXINLINE BOOL
D3DXVECTOR2::operator != ( CONST D3DXVECTOR2& v ) const
{
    return x != v.x || y != v.y;
}




//--------------------------
// 3D Vector
//--------------------------
D3DXINLINE
D3DXVECTOR3::D3DXVECTOR3( CONST FLOAT *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
}

D3DXINLINE
D3DXVECTOR3::D3DXVECTOR3( CONST D3DVECTOR& v )
{
    x = v.x;
    y = v.y;
    z = v.z;
}

D3DXINLINE
D3DXVECTOR3::D3DXVECTOR3( FLOAT fx, FLOAT fy, FLOAT fz )
{
    x = fx;
    y = fy;
    z = fz;
}


// casting
D3DXINLINE
D3DXVECTOR3::operator FLOAT* ()
{
    return (FLOAT *) &x;
}

D3DXINLINE
D3DXVECTOR3::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &x;
}


// assignment operators
D3DXINLINE D3DXVECTOR3&
D3DXVECTOR3::operator += ( CONST D3DXVECTOR3& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3&
D3DXVECTOR3::operator -= ( CONST D3DXVECTOR3& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3&
D3DXVECTOR3::operator *= ( FLOAT f )
{
    x *= f;
    y *= f;
    z *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR3&
D3DXVECTOR3::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator - () const
{
    return D3DXVECTOR3(-x, -y, -z);
}


// binary operators
D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator + ( CONST D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
}

D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator - ( CONST D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);
}

D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator * ( FLOAT f ) const
{
    return D3DXVECTOR3(x * f, y * f, z * f);
}

D3DXINLINE D3DXVECTOR3
D3DXVECTOR3::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);
}


D3DXINLINE D3DXVECTOR3
operator * ( FLOAT f, CONST struct D3DXVECTOR3& v )
{
    return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);
}


D3DXINLINE BOOL
D3DXVECTOR3::operator == ( CONST D3DXVECTOR3& v ) const
{
    return x == v.x && y == v.y && z == v.z;
}

D3DXINLINE BOOL
D3DXVECTOR3::operator != ( CONST D3DXVECTOR3& v ) const
{
    return x != v.x || y != v.y || z != v.z;
}



//--------------------------
// 4D Vector
//--------------------------
D3DXINLINE
D3DXVECTOR4::D3DXVECTOR4( CONST FLOAT *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE
D3DXVECTOR4::D3DXVECTOR4( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE
D3DXVECTOR4::operator FLOAT* ()
{
    return (FLOAT *) &x;
}

D3DXINLINE
D3DXVECTOR4::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &x;
}


// assignment operators
D3DXINLINE D3DXVECTOR4&
D3DXVECTOR4::operator += ( CONST D3DXVECTOR4& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4&
D3DXVECTOR4::operator -= ( CONST D3DXVECTOR4& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4&
D3DXVECTOR4::operator *= ( FLOAT f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR4&
D3DXVECTOR4::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator - () const
{
    return D3DXVECTOR4(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator + ( CONST D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x + v.x, y + v.y, z + v.z, w + v.w);
}

D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator - ( CONST D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x - v.x, y - v.y, z - v.z, w - v.w);
}

D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator * ( FLOAT f ) const
{
    return D3DXVECTOR4(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXVECTOR4
D3DXVECTOR4::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXVECTOR4(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXVECTOR4
operator * ( FLOAT f, CONST D3DXVECTOR4& v )
{
    return D3DXVECTOR4(f * v.x, f * v.y, f * v.z, f * v.w);
}


D3DXINLINE BOOL
D3DXVECTOR4::operator == ( CONST D3DXVECTOR4& v ) const
{
    return x == v.x && y == v.y && z == v.z && w == v.w;
}

D3DXINLINE BOOL
D3DXVECTOR4::operator != ( CONST D3DXVECTOR4& v ) const
{
    return x != v.x || y != v.y || z != v.z || w != v.w;
}


//--------------------------
// Matrix
//--------------------------
D3DXINLINE
D3DXMATRIX::D3DXMATRIX( CONST FLOAT* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    memcpy(&_11, pf, sizeof(D3DXMATRIX));
}

D3DXINLINE
D3DXMATRIX::D3DXMATRIX( CONST D3DMATRIX& mat )
{
    memcpy(&_11, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE
D3DXMATRIX::D3DXMATRIX( FLOAT f11, FLOAT f12, FLOAT f13, FLOAT f14,
                        FLOAT f21, FLOAT f22, FLOAT f23, FLOAT f24,
                        FLOAT f31, FLOAT f32, FLOAT f33, FLOAT f34,
                        FLOAT f41, FLOAT f42, FLOAT f43, FLOAT f44 )
{
    _11 = f11; _12 = f12; _13 = f13; _14 = f14;
    _21 = f21; _22 = f22; _23 = f23; _24 = f24;
    _31 = f31; _32 = f32; _33 = f33; _34 = f34;
    _41 = f41; _42 = f42; _43 = f43; _44 = f44;
}



// access grants
D3DXINLINE FLOAT&
D3DXMATRIX::operator () ( UINT iRow, UINT iCol )
{
    return m[iRow][iCol];
}

D3DXINLINE FLOAT
D3DXMATRIX::operator () ( UINT iRow, UINT iCol ) const
{
    return m[iRow][iCol];
}


// casting operators
D3DXINLINE
D3DXMATRIX::operator FLOAT* ()
{
    return (FLOAT *) &_11;
}

D3DXINLINE
D3DXMATRIX::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &_11;
}


// assignment operators
D3DXINLINE D3DXMATRIX&
D3DXMATRIX::operator *= ( CONST D3DXMATRIX& mat )
{
    D3DXMatrixMultiply(this, this, &mat);
    return *this;
}

D3DXINLINE D3DXMATRIX&
D3DXMATRIX::operator += ( CONST D3DXMATRIX& mat )
{
    _11 += mat._11; _12 += mat._12; _13 += mat._13; _14 += mat._14;
    _21 += mat._21; _22 += mat._22; _23 += mat._23; _24 += mat._24;
    _31 += mat._31; _32 += mat._32; _33 += mat._33; _34 += mat._34;
    _41 += mat._41; _42 += mat._42; _43 += mat._43; _44 += mat._44;
    return *this;
}

D3DXINLINE D3DXMATRIX&
D3DXMATRIX::operator -= ( CONST D3DXMATRIX& mat )
{
    _11 -= mat._11; _12 -= mat._12; _13 -= mat._13; _14 -= mat._14;
    _21 -= mat._21; _22 -= mat._22; _23 -= mat._23; _24 -= mat._24;
    _31 -= mat._31; _32 -= mat._32; _33 -= mat._33; _34 -= mat._34;
    _41 -= mat._41; _42 -= mat._42; _43 -= mat._43; _44 -= mat._44;
    return *this;
}

D3DXINLINE D3DXMATRIX&
D3DXMATRIX::operator *= ( FLOAT f )
{
    _11 *= f; _12 *= f; _13 *= f; _14 *= f;
    _21 *= f; _22 *= f; _23 *= f; _24 *= f;
    _31 *= f; _32 *= f; _33 *= f; _34 *= f;
    _41 *= f; _42 *= f; _43 *= f; _44 *= f;
    return *this;
}

D3DXINLINE D3DXMATRIX&
D3DXMATRIX::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    _11 *= fInv; _12 *= fInv; _13 *= fInv; _14 *= fInv;
    _21 *= fInv; _22 *= fInv; _23 *= fInv; _24 *= fInv;
    _31 *= fInv; _32 *= fInv; _33 *= fInv; _34 *= fInv;
    _41 *= fInv; _42 *= fInv; _43 *= fInv; _44 *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator + () const
{
    return *this;
}

D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator - () const
{
    return D3DXMATRIX(-_11, -_12, -_13, -_14,
                      -_21, -_22, -_23, -_24,
                      -_31, -_32, -_33, -_34,
                      -_41, -_42, -_43, -_44);
}


// binary operators
D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator * ( CONST D3DXMATRIX& mat ) const
{
    D3DXMATRIX matT;
    D3DXMatrixMultiply(&matT, this, &mat);
    return matT;
}

D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator + ( CONST D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(_11 + mat._11, _12 + mat._12, _13 + mat._13, _14 + mat._14,
                      _21 + mat._21, _22 + mat._22, _23 + mat._23, _24 + mat._24,
                      _31 + mat._31, _32 + mat._32, _33 + mat._33, _34 + mat._34,
                      _41 + mat._41, _42 + mat._42, _43 + mat._43, _44 + mat._44);
}

D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator - ( CONST D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(_11 - mat._11, _12 - mat._12, _13 - mat._13, _14 - mat._14,
                      _21 - mat._21, _22 - mat._22, _23 - mat._23, _24 - mat._24,
                      _31 - mat._31, _32 - mat._32, _33 - mat._33, _34 - mat._34,
                      _41 - mat._41, _42 - mat._42, _43 - mat._43, _44 - mat._44);
}

D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator * ( FLOAT f ) const
{
    return D3DXMATRIX(_11 * f, _12 * f, _13 * f, _14 * f,
                      _21 * f, _22 * f, _23 * f, _24 * f,
                      _31 * f, _32 * f, _33 * f, _34 * f,
                      _41 * f, _42 * f, _43 * f, _44 * f);
}

D3DXINLINE D3DXMATRIX
D3DXMATRIX::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXMATRIX(_11 * fInv, _12 * fInv, _13 * fInv, _14 * fInv,
                      _21 * fInv, _22 * fInv, _23 * fInv, _24 * fInv,
                      _31 * fInv, _32 * fInv, _33 * fInv, _34 * fInv,
                      _41 * fInv, _42 * fInv, _43 * fInv, _44 * fInv);
}


D3DXINLINE D3DXMATRIX
operator * ( FLOAT f, CONST D3DXMATRIX& mat )
{
    return D3DXMATRIX(f * mat._11, f * mat._12, f * mat._13, f * mat._14,
                      f * mat._21, f * mat._22, f * mat._23, f * mat._24,
                      f * mat._31, f * mat._32, f * mat._33, f * mat._34,
                      f * mat._41, f * mat._42, f * mat._43, f * mat._44);
}


D3DXINLINE BOOL
D3DXMATRIX::operator == ( CONST D3DXMATRIX& mat ) const
{
    return 0 == memcmp(this, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE BOOL
D3DXMATRIX::operator != ( CONST D3DXMATRIX& mat ) const
{
    return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));
}



//--------------------------
// Quaternion
//--------------------------

D3DXINLINE
D3DXQUATERNION::D3DXQUATERNION( CONST FLOAT* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE
D3DXQUATERNION::D3DXQUATERNION( FLOAT fx, FLOAT fy, FLOAT fz, FLOAT fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE
D3DXQUATERNION::operator FLOAT* ()
{
    return (FLOAT *) &x;
}

D3DXINLINE
D3DXQUATERNION::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &x;
}


// assignment operators
D3DXINLINE D3DXQUATERNION&
D3DXQUATERNION::operator += ( CONST D3DXQUATERNION& q )
{
    x += q.x;
    y += q.y;
    z += q.z;
    w += q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION&
D3DXQUATERNION::operator -= ( CONST D3DXQUATERNION& q )
{
    x -= q.x;
    y -= q.y;
    z -= q.z;
    w -= q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION&
D3DXQUATERNION::operator *= ( CONST D3DXQUATERNION& q )
{
    D3DXQuaternionMultiply(this, this, &q);
    return *this;
}

D3DXINLINE D3DXQUATERNION&
D3DXQUATERNION::operator *= ( FLOAT f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXQUATERNION&
D3DXQUATERNION::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator + () const
{
    return *this;
}

D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator - () const
{
    return D3DXQUATERNION(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator + ( CONST D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x + q.x, y + q.y, z + q.z, w + q.w);
}

D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator - ( CONST D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x - q.x, y - q.y, z - q.z, w - q.w);
}

D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator * ( CONST D3DXQUATERNION& q ) const
{
    D3DXQUATERNION qT;
    D3DXQuaternionMultiply(&qT, this, &q);
    return qT;
}

D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator * ( FLOAT f ) const
{
    return D3DXQUATERNION(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXQUATERNION
D3DXQUATERNION::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXQUATERNION(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXQUATERNION
operator * (FLOAT f, CONST D3DXQUATERNION& q )
{
    return D3DXQUATERNION(f * q.x, f * q.y, f * q.z, f * q.w);
}


D3DXINLINE BOOL
D3DXQUATERNION::operator == ( CONST D3DXQUATERNION& q ) const
{
    return x == q.x && y == q.y && z == q.z && w == q.w;
}

D3DXINLINE BOOL
D3DXQUATERNION::operator != ( CONST D3DXQUATERNION& q ) const
{
    return x != q.x || y != q.y || z != q.z || w != q.w;
}



//--------------------------
// Plane
//--------------------------

D3DXINLINE
D3DXPLANE::D3DXPLANE( CONST FLOAT* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    a = pf[0];
    b = pf[1];
    c = pf[2];
    d = pf[3];
}

D3DXINLINE
D3DXPLANE::D3DXPLANE( FLOAT fa, FLOAT fb, FLOAT fc, FLOAT fd )
{
    a = fa;
    b = fb;
    c = fc;
    d = fd;
}


// casting
D3DXINLINE
D3DXPLANE::operator FLOAT* ()
{
    return (FLOAT *) &a;
}

D3DXINLINE
D3DXPLANE::operator CONST FLOAT* () const
{
    return (CONST FLOAT *) &a;
}


// unary operators
D3DXINLINE D3DXPLANE
D3DXPLANE::operator + () const
{
    return *this;
}

D3DXINLINE D3DXPLANE
D3DXPLANE::operator - () const
{
    return D3DXPLANE(-a, -b, -c, -d);
}


// binary operators
D3DXINLINE BOOL
D3DXPLANE::operator == ( CONST D3DXPLANE& p ) const
{
    return a == p.a && b == p.b && c == p.c && d == p.d;
}

D3DXINLINE BOOL
D3DXPLANE::operator != ( CONST D3DXPLANE& p ) const
{
    return a != p.a || b != p.b || c != p.c || d != p.d;
}




//--------------------------
// Color
//--------------------------

D3DXINLINE
D3DXCOLOR::D3DXCOLOR( DWORD dw )
{
    CONST FLOAT f = 1.0f / 255.0f;
    r = f * (FLOAT) (unsigned char) (dw >> 16);
    g = f * (FLOAT) (unsigned char) (dw >>  8);
    b = f * (FLOAT) (unsigned char) (dw >>  0);
    a = f * (FLOAT) (unsigned char) (dw >> 24);
}

D3DXINLINE
D3DXCOLOR::D3DXCOLOR( CONST FLOAT* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    r = pf[0];
    g = pf[1];
    b = pf[2];
    a = pf[3];
}

D3DXINLINE
D3DXCOLOR::D3DXCOLOR( CONST D3DCOLORVALUE& c )
{
    r = c.r;
    g = c.g;
    b = c.b;
    a = c.a;
}

D3DXINLINE
D3DXCOLOR::D3DXCOLOR( FLOAT fr, FLOAT fg, FLOAT fb, FLOAT fa )
{
    r = fr;
    g = fg;
    b = fb;
    a = fa;
}


// casting
D3DXINLINE
D3DXCOLOR::operator DWORD () const
{
    DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
    DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
    DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
    DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

    return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
}


D3DXINLINE
D3DXCOLOR::operator FLOAT * ()
{
    return (FLOAT *) &r;
}

D3DXINLINE
D3DXCOLOR::operator CONST FLOAT * () const
{
    return (CONST FLOAT *) &r;
}


D3DXINLINE
D3DXCOLOR::operator D3DCOLORVALUE * ()
{
    return (D3DCOLORVALUE *) &r;
}

D3DXINLINE
D3DXCOLOR::operator CONST D3DCOLORVALUE * () const
{
    return (CONST D3DCOLORVALUE *) &r;
}


D3DXINLINE
D3DXCOLOR::operator D3DCOLORVALUE& ()
{
    return *((D3DCOLORVALUE *) &r);
}

D3DXINLINE
D3DXCOLOR::operator CONST D3DCOLORVALUE& () const
{
    return *((CONST D3DCOLORVALUE *) &r);
}


// assignment operators
D3DXINLINE D3DXCOLOR&
D3DXCOLOR::operator += ( CONST D3DXCOLOR& c )
{
    r += c.r;
    g += c.g;
    b += c.b;
    a += c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR&
D3DXCOLOR::operator -= ( CONST D3DXCOLOR& c )
{
    r -= c.r;
    g -= c.g;
    b -= c.b;
    a -= c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR&
D3DXCOLOR::operator *= ( FLOAT f )
{
    r *= f;
    g *= f;
    b *= f;
    a *= f;
    return *this;
}

D3DXINLINE D3DXCOLOR&
D3DXCOLOR::operator /= ( FLOAT f )
{
    FLOAT fInv = 1.0f / f;
    r *= fInv;
    g *= fInv;
    b *= fInv;
    a *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator + () const
{
    return *this;
}

D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator - () const
{
    return D3DXCOLOR(-r, -g, -b, -a);
}


// binary operators
D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator + ( CONST D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);
}

D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator - ( CONST D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);
}

D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator * ( FLOAT f ) const
{
    return D3DXCOLOR(r * f, g * f, b * f, a * f);
}

D3DXINLINE D3DXCOLOR
D3DXCOLOR::operator / ( FLOAT f ) const
{
    FLOAT fInv = 1.0f / f;
    return D3DXCOLOR(r * fInv, g * fInv, b * fInv, a * fInv);
}


D3DXINLINE D3DXCOLOR
operator * (FLOAT f, CONST D3DXCOLOR& c )
{
    return D3DXCOLOR(f * c.r, f * c.g, f * c.b, f * c.a);
}


D3DXINLINE BOOL
D3DXCOLOR::operator == ( CONST D3DXCOLOR& c ) const
{
    return r == c.r && g == c.g && b == c.b && a == c.a;
}

D3DXINLINE BOOL
D3DXCOLOR::operator != ( CONST D3DXCOLOR& c ) const
{
    return r != c.r || g != c.g || b != c.b || a != c.a;
}


#endif //__cplusplus



//===========================================================================
//
// Inline functions
//
//===========================================================================


//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE FLOAT D3DXVec2Length
    ( CONST D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y);
#else
    return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y);
#endif
}

D3DXINLINE FLOAT D3DXVec2LengthSq
    ( CONST D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y;
}

D3DXINLINE FLOAT D3DXVec2Dot
    ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y;
}

D3DXINLINE FLOAT D3DXVec2CCW
    ( CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->y - pV1->y * pV2->x;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV, FLOAT s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, CONST D3DXVECTOR2 *pV1, CONST D3DXVECTOR2 *pV2,
      FLOAT s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    return pOut;
}


//--------------------------
// 3D Vector
//--------------------------

D3DXINLINE FLOAT D3DXVec3Length
    ( CONST D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#else
    return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#endif
}

D3DXINLINE FLOAT D3DXVec3LengthSq
    ( CONST D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;
}

D3DXINLINE FLOAT D3DXVec3Dot
    ( CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
    D3DXVECTOR3 v;

#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    v.x = pV1->y * pV2->z - pV1->z * pV2->y;
    v.y = pV1->z * pV2->x - pV1->x * pV2->z;
    v.z = pV1->x * pV2->y - pV1->y * pV2->x;

    *pOut = v;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV, FLOAT s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, CONST D3DXVECTOR3 *pV1, CONST D3DXVECTOR3 *pV2,
      FLOAT s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    return pOut;
}


//--------------------------
// 4D Vector
//--------------------------

D3DXINLINE FLOAT D3DXVec4Length
    ( CONST D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#else
    return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#endif
}

D3DXINLINE FLOAT D3DXVec4LengthSq
    ( CONST D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w;
}

D3DXINLINE FLOAT D3DXVec4Dot
    ( CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z + pV1->w * pV2->w;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    pOut->w = pV1->w + pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    pOut->w = pV1->w - pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w < pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w > pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV, FLOAT s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    pOut->w = pV->w * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, CONST D3DXVECTOR4 *pV1, CONST D3DXVECTOR4 *pV2,
      FLOAT s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    pOut->w = pV1->w + s * (pV2->w - pV1->w);
    return pOut;
}


//--------------------------
// 4D Matrix
//--------------------------

D3DXINLINE D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
    pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
    pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
    pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

    pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;
    return pOut;
}


D3DXINLINE BOOL D3DXMatrixIsIdentity
    ( CONST D3DXMATRIX *pM )
{
#ifdef D3DX_DEBUG
    if(!pM)
        return FALSE;
#endif

    return pM->m[0][0] == 1.0f && pM->m[0][1] == 0.0f && pM->m[0][2] == 0.0f && pM->m[0][3] == 0.0f &&
           pM->m[1][0] == 0.0f && pM->m[1][1] == 1.0f && pM->m[1][2] == 0.0f && pM->m[1][3] == 0.0f &&
           pM->m[2][0] == 0.0f && pM->m[2][1] == 0.0f && pM->m[2][2] == 1.0f && pM->m[2][3] == 0.0f &&
           pM->m[3][0] == 0.0f && pM->m[3][1] == 0.0f && pM->m[3][2] == 0.0f && pM->m[3][3] == 1.0f;
}


//--------------------------
// Quaternion
//--------------------------

D3DXINLINE FLOAT D3DXQuaternionLength
    ( CONST D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#else
    return (FLOAT) sqrt(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#endif
}

D3DXINLINE FLOAT D3DXQuaternionLengthSq
    ( CONST D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

    return pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w;
}

D3DXINLINE FLOAT D3DXQuaternionDot
    ( CONST D3DXQUATERNION *pQ1, CONST D3DXQUATERNION *pQ2 )
{
#ifdef D3DX_DEBUG
    if(!pQ1 || !pQ2)
        return 0.0f;
#endif

    return pQ1->x * pQ2->x + pQ1->y * pQ2->y + pQ1->z * pQ2->z + pQ1->w * pQ2->w;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->x = pOut->y = pOut->z = 0.0f;
    pOut->w = 1.0f;
    return pOut;
}

D3DXINLINE BOOL D3DXQuaternionIsIdentity
    ( CONST D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return FALSE;
#endif

    return pQ->x == 0.0f && pQ->y == 0.0f && pQ->z == 0.0f && pQ->w == 1.0f;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, CONST D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pQ)
        return NULL;
#endif

    pOut->x = -pQ->x;
    pOut->y = -pQ->y;
    pOut->z = -pQ->z;
    pOut->w =  pQ->w;
    return pOut;
}


//--------------------------
// Plane
//--------------------------

D3DXINLINE FLOAT D3DXPlaneDot
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR4 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d * pV->w;
}

D3DXINLINE FLOAT D3DXPlaneDotCoord
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d;
}

D3DXINLINE FLOAT D3DXPlaneDotNormal
    ( CONST D3DXPLANE *pP, CONST D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z;
}


//--------------------------
// Color
//--------------------------

D3DXINLINE D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = 1.0f - pC->r;
    pOut->g = 1.0f - pC->g;
    pOut->b = 1.0f - pC->b;
    pOut->a = pC->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorAdd
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + pC2->r;
    pOut->g = pC1->g + pC2->g;
    pOut->b = pC1->b + pC2->b;
    pOut->a = pC1->a + pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorSubtract
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r - pC2->r;
    pOut->g = pC1->g - pC2->g;
    pOut->b = pC1->b - pC2->b;
    pOut->a = pC1->a - pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorScale
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC, FLOAT s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = pC->r * s;
    pOut->g = pC->g * s;
    pOut->b = pC->b * s;
    pOut->a = pC->a * s;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorModulate
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r * pC2->r;
    pOut->g = pC1->g * pC2->g;
    pOut->b = pC1->b * pC2->b;
    pOut->a = pC1->a * pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorLerp
    (D3DXCOLOR *pOut, CONST D3DXCOLOR *pC1, CONST D3DXCOLOR *pC2, FLOAT s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + s * (pC2->r - pC1->r);
    pOut->g = pC1->g + s * (pC2->g - pC1->g);
    pOut->b = pC1->b + s * (pC2->b - pC1->b);
    pOut->a = pC1->a + s * (pC2->a - pC1->a);
    return pOut;
}


#endif // __D3DX8MATH_INL__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dx8tex.h ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dx8tex.h
//  Content:    D3DX texturing APIs
//
//////////////////////////////////////////////////////////////////////////////

#include "d3dx8.h"

#ifndef __D3DX8TEX_H__
#define __D3DX8TEX_H__


//----------------------------------------------------------------------------
// D3DX_FILTER flags:
// ------------------
//
// A valid filter must contain one of these values:
//
//  D3DX_FILTER_NONE
//      No scaling or filtering will take place.  Pixels outside the bounds
//      of the source image are assumed to be transparent black.
//  D3DX_FILTER_POINT
//      Each destination pixel is computed by sampling the nearest pixel
//      from the source image.
//  D3DX_FILTER_LINEAR
//      Each destination pixel is computed by linearly interpolating between
//      the nearest pixels in the source image.  This filter works best 
//      when the scale on each axis is less than 2.
//  D3DX_FILTER_TRIANGLE
//      Every pixel in the source image contributes equally to the
//      destination image.  This is the slowest of all the filters.
//  D3DX_FILTER_BOX
//      Each pixel is computed by averaging a 2x2(x2) box pixels from 
//      the source image. Only works when the dimensions of the 
//      destination are half those of the source. (as with mip maps)
//
// And can be OR'd with any of these optional flags:
//
//  D3DX_FILTER_MIRROR_U
//      Indicates that pixels off the edge of the texture on the U-axis
//      should be mirrored, not wraped.
//  D3DX_FILTER_MIRROR_V
//      Indicates that pixels off the edge of the texture on the V-axis
//      should be mirrored, not wraped.
//  D3DX_FILTER_MIRROR_W
//      Indicates that pixels off the edge of the texture on the W-axis
//      should be mirrored, not wraped.
//  D3DX_FILTER_MIRROR
//      Same as specifying D3DX_FILTER_MIRROR_U | D3DX_FILTER_MIRROR_V |
//      D3DX_FILTER_MIRROR_V
//  D3DX_FILTER_DITHER
//      Dithers the resulting image.
//
//----------------------------------------------------------------------------

#define D3DX_FILTER_NONE            (1 << 0)
#define D3DX_FILTER_POINT           (2 << 0)
#define D3DX_FILTER_LINEAR          (3 << 0)
#define D3DX_FILTER_TRIANGLE        (4 << 0)
#define D3DX_FILTER_BOX             (5 << 0)

#define D3DX_FILTER_MIRROR_U        (1 << 16)
#define D3DX_FILTER_MIRROR_V        (2 << 16)
#define D3DX_FILTER_MIRROR_W        (4 << 16)
#define D3DX_FILTER_MIRROR          (7 << 16)
#define D3DX_FILTER_DITHER          (8 << 16)


//----------------------------------------------------------------------------
// D3DX_NORMALMAP flags:
// ---------------------
// These flags are used to control how D3DXComputeNormalMap generates normal
// maps.  Any number of these flags may be OR'd together in any combination.
//
//  D3DX_NORMALMAP_MIRROR_U
//      Indicates that pixels off the edge of the texture on the U-axis
//      should be mirrored, not wraped.
//  D3DX_NORMALMAP_MIRROR_V
//      Indicates that pixels off the edge of the texture on the V-axis
//      should be mirrored, not wraped.
//  D3DX_NORMALMAP_MIRROR
//      Same as specifying D3DX_NORMALMAP_MIRROR_U | D3DX_NORMALMAP_MIRROR_V
//  D3DX_NORMALMAP_INVERTSIGN
//      Inverts the direction of each normal 
//  D3DX_NORMALMAP_COMPUTE_OCCLUSION
//      Compute the per pixel Occlusion term and encodes it into the alpha.
//      An Alpha of 1 means that the pixel is not obscured in anyway, and
//      an alpha of 0 would mean that the pixel is completly obscured.
//
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------

#define D3DX_NORMALMAP_MIRROR_U     (1 << 16)
#define D3DX_NORMALMAP_MIRROR_V     (2 << 16)
#define D3DX_NORMALMAP_MIRROR       (3 << 16)
#define D3DX_NORMALMAP_INVERTSIGN   (8 << 16)
#define D3DX_NORMALMAP_COMPUTE_OCCLUSION (16 << 16)




//----------------------------------------------------------------------------
// D3DX_CHANNEL flags:
// -------------------
// These flags are used by functions which operate on or more channels
// in a texture.
//
// D3DX_CHANNEL_RED
//     Indicates the red channel should be used
// D3DX_CHANNEL_BLUE
//     Indicates the blue channel should be used
// D3DX_CHANNEL_GREEN
//     Indicates the green channel should be used
// D3DX_CHANNEL_ALPHA
//     Indicates the alpha channel should be used
// D3DX_CHANNEL_LUMINANCE
//     Indicates the luminaces of the red green and blue channels should be 
//     used.
//
//----------------------------------------------------------------------------

#define D3DX_CHANNEL_RED            (1 << 0)
#define D3DX_CHANNEL_BLUE           (1 << 1)
#define D3DX_CHANNEL_GREEN          (1 << 2)
#define D3DX_CHANNEL_ALPHA          (1 << 3)
#define D3DX_CHANNEL_LUMINANCE      (1 << 4)




//----------------------------------------------------------------------------
// D3DXIMAGE_FILEFORMAT:
// ---------------------
// This enum is used to describe supported image file formats.
//
//----------------------------------------------------------------------------

typedef enum _D3DXIMAGE_FILEFORMAT
{
    D3DXIFF_BMP         = 0,
    D3DXIFF_JPG         = 1,
    D3DXIFF_TGA         = 2,
    D3DXIFF_PNG         = 3,
    D3DXIFF_DDS         = 4,
    D3DXIFF_PPM         = 5,
    D3DXIFF_DIB         = 6,
    D3DXIFF_FORCE_DWORD = 0x7fffffff

} D3DXIMAGE_FILEFORMAT;


//----------------------------------------------------------------------------
// LPD3DXFILL2D and LPD3DXFILL3D:
// ------------------------------
// Function types used by the texture fill functions.
//
// Parameters:
//  pOut
//      Pointer to a vector which the function uses to return its result.
//      X,Y,Z,W will be mapped to R,G,B,A respectivly. 
//  pTexCoord
//      Pointer to a vector containing the coordinates of the texel currently 
//      being evaluated.  Textures and VolumeTexture texcoord components 
//      range from 0 to 1. CubeTexture texcoord component range from -1 to 1.
//  pTexelSize
//      Pointer to a vector containing the dimensions of the current texel.
//  pData
//      Pointer to user data.
//
//----------------------------------------------------------------------------

typedef VOID (*LPD3DXFILL2D)(D3DXVECTOR4 *pOut, D3DXVECTOR2 *pTexCoord, D3DXVECTOR2 *pTexelSize, LPVOID pData);
typedef VOID (*LPD3DXFILL3D)(D3DXVECTOR4 *pOut, D3DXVECTOR3 *pTexCoord, D3DXVECTOR3 *pTexelSize, LPVOID pData);
 


//----------------------------------------------------------------------------
// D3DXIMAGE_INFO:
// ---------------
// This structure is used to return a rough description of what the
// the original contents of an image file looked like.
// 
//  Width
//      Width of original image in pixels
//  Height
//      Height of original image in pixels
//  Depth
//      Depth of original image in pixels
//  MipLevels
//      Number of mip levels in original image
//  Format
//      D3D format which most closely describes the data in original image
//  ResourceType
//      D3DRESOURCETYPE representing the type of texture stored in the file.
//      D3DRTYPE_TEXTURE, D3DRTYPE_VOLUMETEXTURE, or D3DRTYPE_CUBETEXTURE.
//  ImageFileFormat
//      D3DXIMAGE_FILEFORMAT representing the format of the image file.
//
//----------------------------------------------------------------------------

typedef struct _D3DXIMAGE_INFO
{
    UINT                    Width;
    UINT                    Height;
    UINT                    Depth;
    UINT                    MipLevels;
    D3DFORMAT               Format;
    D3DRESOURCETYPE         ResourceType;
    D3DXIMAGE_FILEFORMAT    ImageFileFormat;

} D3DXIMAGE_INFO;





#ifdef __cplusplus
extern "C" {
#endif //__cplusplus



//////////////////////////////////////////////////////////////////////////////
// Image File APIs ///////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
;
//----------------------------------------------------------------------------
// GetImageInfoFromFile/Resource:
// ------------------------------
// Fills in a D3DXIMAGE_INFO struct with information about an image file.
//
// Parameters:
//  pSrcFile
//      File name of the source image.
//  pSrcModule
//      Module where resource is located, or NULL for module associated
//      with image the os used to create the current process.
//  pSrcResource
//      Resource name
//  pSrcData
//      Pointer to file in memory.
//  SrcDataSize
//      Size in bytes of file in memory.
//  pSrcInfo
//      Pointer to a D3DXIMAGE_INFO structure to be filled in with the 
//      description of the data in the source image file.
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXGetImageInfoFromFileA(
        LPCSTR                    pSrcFile,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXGetImageInfoFromFileW(
        LPCWSTR                   pSrcFile,
        D3DXIMAGE_INFO*           pSrcInfo);

#ifdef UNICODE
#define D3DXGetImageInfoFromFile D3DXGetImageInfoFromFileW
#else
#define D3DXGetImageInfoFromFile D3DXGetImageInfoFromFileA
#endif


HRESULT WINAPI
    D3DXGetImageInfoFromResourceA(
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXGetImageInfoFromResourceW(
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        D3DXIMAGE_INFO*           pSrcInfo);

#ifdef UNICODE
#define D3DXGetImageInfoFromResource D3DXGetImageInfoFromResourceW
#else
#define D3DXGetImageInfoFromResource D3DXGetImageInfoFromResourceA
#endif


HRESULT WINAPI
    D3DXGetImageInfoFromFileInMemory(
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        D3DXIMAGE_INFO*           pSrcInfo);




//////////////////////////////////////////////////////////////////////////////
// Load/Save Surface APIs ////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
// D3DXLoadSurfaceFromFile/Resource:
// ---------------------------------
// Load surface from a file or resource
//
// Parameters:
//  pDestSurface
//      Destination surface, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestRect
//      Destination rectangle, or NULL for entire surface
//  pSrcFile
//      File name of the source image.
//  pSrcModule
//      Module where resource is located, or NULL for module associated
//      with image the os used to create the current process.
//  pSrcResource
//      Resource name
//  pSrcData
//      Pointer to file in memory.
//  SrcDataSize
//      Size in bytes of file in memory.
//  pSrcRect
//      Source rectangle, or NULL for entire image
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//  pSrcInfo
//      Pointer to a D3DXIMAGE_INFO structure to be filled in with the 
//      description of the data in the source image file, or NULL.
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadSurfaceFromFileA(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        LPCSTR                    pSrcFile,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXLoadSurfaceFromFileW(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        LPCWSTR                   pSrcFile,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

#ifdef UNICODE
#define D3DXLoadSurfaceFromFile D3DXLoadSurfaceFromFileW
#else
#define D3DXLoadSurfaceFromFile D3DXLoadSurfaceFromFileA
#endif



HRESULT WINAPI
    D3DXLoadSurfaceFromResourceA(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXLoadSurfaceFromResourceW(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);


#ifdef UNICODE
#define D3DXLoadSurfaceFromResource D3DXLoadSurfaceFromResourceW
#else
#define D3DXLoadSurfaceFromResource D3DXLoadSurfaceFromResourceA
#endif



HRESULT WINAPI
    D3DXLoadSurfaceFromFileInMemory(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);



//----------------------------------------------------------------------------
// D3DXLoadSurfaceFromSurface:
// ---------------------------
// Load surface from another surface (with color conversion)
//
// Parameters:
//  pDestSurface
//      Destination surface, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestRect
//      Destination rectangle, or NULL for entire surface
//  pSrcSurface
//      Source surface
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcRect
//      Source rectangle, or NULL for entire surface
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadSurfaceFromSurface(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        LPDIRECT3DSURFACE8        pSrcSurface,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey);


//----------------------------------------------------------------------------
// D3DXLoadSurfaceFromMemory:
// --------------------------
// Load surface from memory.
//
// Parameters:
//  pDestSurface
//      Destination surface, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestRect
//      Destination rectangle, or NULL for entire surface
//  pSrcMemory
//      Pointer to the top-left corner of the source image in memory
//  SrcFormat
//      Pixel format of the source image.
//  SrcPitch
//      Pitch of source image, in bytes.  For DXT formats, this number
//      should represent the width of one row of cells, in bytes.
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcRect
//      Source rectangle.
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadSurfaceFromMemory(
        LPDIRECT3DSURFACE8        pDestSurface,
        CONST PALETTEENTRY*       pDestPalette,
        CONST RECT*               pDestRect,
        LPCVOID                   pSrcMemory,
        D3DFORMAT                 SrcFormat,
        UINT                      SrcPitch,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST RECT*               pSrcRect,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey);


//----------------------------------------------------------------------------
// D3DXSaveSurfaceToFile:
// ----------------------
// Save a surface to a image file.
//
// Parameters:
//  pDestFile
//      File name of the destination file
//  DestFormat
//      D3DXIMAGE_FILEFORMAT specifying file format to use when saving.
//  pSrcSurface
//      Source surface, containing the image to be saved
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcRect
//      Source rectangle, or NULL for the entire image
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXSaveSurfaceToFileA(
        LPCSTR                    pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DSURFACE8        pSrcSurface,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST RECT*               pSrcRect);

HRESULT WINAPI
    D3DXSaveSurfaceToFileW(
        LPCWSTR                   pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DSURFACE8        pSrcSurface,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST RECT*               pSrcRect);

#ifdef UNICODE
#define D3DXSaveSurfaceToFile D3DXSaveSurfaceToFileW
#else
#define D3DXSaveSurfaceToFile D3DXSaveSurfaceToFileA
#endif




//////////////////////////////////////////////////////////////////////////////
// Load/Save Volume APIs /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
// D3DXLoadVolumeFromFile/Resource:
// --------------------------------
// Load volume from a file or resource
//
// Parameters:
//  pDestVolume
//      Destination volume, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestBox
//      Destination box, or NULL for entire volume
//  pSrcFile
//      File name of the source image.
//  pSrcModule
//      Module where resource is located, or NULL for module associated
//      with image the os used to create the current process.
//  pSrcResource
//      Resource name
//  pSrcData
//      Pointer to file in memory.
//  SrcDataSize
//      Size in bytes of file in memory.
//  pSrcBox
//      Source box, or NULL for entire image
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//  pSrcInfo
//      Pointer to a D3DXIMAGE_INFO structure to be filled in with the 
//      description of the data in the source image file, or NULL.
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadVolumeFromFileA(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        LPCSTR                    pSrcFile,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXLoadVolumeFromFileW(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        LPCWSTR                   pSrcFile,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

#ifdef UNICODE
#define D3DXLoadVolumeFromFile D3DXLoadVolumeFromFileW
#else
#define D3DXLoadVolumeFromFile D3DXLoadVolumeFromFileA
#endif


HRESULT WINAPI
    D3DXLoadVolumeFromResourceA(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

HRESULT WINAPI
    D3DXLoadVolumeFromResourceW(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);

#ifdef UNICODE
#define D3DXLoadVolumeFromResource D3DXLoadVolumeFromResourceW
#else
#define D3DXLoadVolumeFromResource D3DXLoadVolumeFromResourceA
#endif



HRESULT WINAPI
    D3DXLoadVolumeFromFileInMemory(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo);



//----------------------------------------------------------------------------
// D3DXLoadVolumeFromVolume:
// -------------------------
// Load volume from another volume (with color conversion)
//
// Parameters:
//  pDestVolume
//      Destination volume, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestBox
//      Destination box, or NULL for entire volume
//  pSrcVolume
//      Source volume
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcBox
//      Source box, or NULL for entire volume
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadVolumeFromVolume(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        LPDIRECT3DVOLUME8         pSrcVolume,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey);



//----------------------------------------------------------------------------
// D3DXLoadVolumeFromMemory:
// -------------------------
// Load volume from memory.
//
// Parameters:
//  pDestVolume
//      Destination volume, which will receive the image.
//  pDestPalette
//      Destination palette of 256 colors, or NULL
//  pDestBox
//      Destination box, or NULL for entire volume
//  pSrcMemory
//      Pointer to the top-left corner of the source volume in memory
//  SrcFormat
//      Pixel format of the source volume.
//  SrcRowPitch
//      Pitch of source image, in bytes.  For DXT formats, this number
//      should represent the size of one row of cells, in bytes.
//  SrcSlicePitch
//      Pitch of source image, in bytes.  For DXT formats, this number
//      should represent the size of one slice of cells, in bytes.
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcBox
//      Source box.
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXLoadVolumeFromMemory(
        LPDIRECT3DVOLUME8         pDestVolume,
        CONST PALETTEENTRY*       pDestPalette,
        CONST D3DBOX*             pDestBox,
        LPCVOID                   pSrcMemory,
        D3DFORMAT                 SrcFormat,
        UINT                      SrcRowPitch,
        UINT                      SrcSlicePitch,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST D3DBOX*             pSrcBox,
        DWORD                     Filter,
        D3DCOLOR                  ColorKey);



//----------------------------------------------------------------------------
// D3DXSaveVolumeToFile:
// ---------------------
// Save a volume to a image file.
//
// Parameters:
//  pDestFile
//      File name of the destination file
//  DestFormat
//      D3DXIMAGE_FILEFORMAT specifying file format to use when saving.
//  pSrcVolume
//      Source volume, containing the image to be saved
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  pSrcBox
//      Source box, or NULL for the entire volume
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXSaveVolumeToFileA(
        LPCSTR                    pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DVOLUME8         pSrcVolume,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST D3DBOX*             pSrcBox);

HRESULT WINAPI
    D3DXSaveVolumeToFileW(
        LPCWSTR                   pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DVOLUME8         pSrcVolume,
        CONST PALETTEENTRY*       pSrcPalette,
        CONST D3DBOX*             pSrcBox);

#ifdef UNICODE
#define D3DXSaveVolumeToFile D3DXSaveVolumeToFileW
#else
#define D3DXSaveVolumeToFile D3DXSaveVolumeToFileA
#endif




//////////////////////////////////////////////////////////////////////////////
// Create/Save Texture APIs //////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
// D3DXCheckTextureRequirements:
// -----------------------------
// Checks texture creation parameters.  If parameters are invalid, this
// function returns corrected parameters.
//
// Parameters:
//
//  pDevice
//      The D3D device to be used
//  pWidth, pHeight, pDepth, pSize
//      Desired size in pixels, or NULL.  Returns corrected size.
//  pNumMipLevels
//      Number of desired mipmap levels, or NULL.  Returns corrected number.
//  Usage
//      Texture usage flags
//  pFormat
//      Desired pixel format, or NULL.  Returns corrected format.
//  Pool
//      Memory pool to be used to create texture
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXCheckTextureRequirements(
        LPDIRECT3DDEVICE8         pDevice,
        UINT*                     pWidth,
        UINT*                     pHeight,
        UINT*                     pNumMipLevels,
        DWORD                     Usage,
        D3DFORMAT*                pFormat,
        D3DPOOL                   Pool);

HRESULT WINAPI
    D3DXCheckCubeTextureRequirements(
        LPDIRECT3DDEVICE8         pDevice,
        UINT*                     pSize,
        UINT*                     pNumMipLevels,
        DWORD                     Usage,
        D3DFORMAT*                pFormat,
        D3DPOOL                   Pool);

HRESULT WINAPI
    D3DXCheckVolumeTextureRequirements(
        LPDIRECT3DDEVICE8         pDevice,
        UINT*                     pWidth,
        UINT*                     pHeight,
        UINT*                     pDepth,
        UINT*                     pNumMipLevels,
        DWORD                     Usage,
        D3DFORMAT*                pFormat,
        D3DPOOL                   Pool);


//----------------------------------------------------------------------------
// D3DXCreateTexture:
// ------------------
// Create an empty texture
//
// Parameters:
//
//  pDevice
//      The D3D device with which the texture is going to be used.
//  Width, Height, Depth, Size
//      size in pixels; these must be non-zero
//  MipLevels
//      number of mip levels desired; if zero or D3DX_DEFAULT, a complete
//      mipmap chain will be created.
//  Usage
//      Texture usage flags
//  Format
//      Pixel format.
//  Pool
//      Memory pool to be used to create texture
//  ppTexture, ppCubeTexture, ppVolumeTexture
//      The texture object that will be created
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXCreateTexture(
        LPDIRECT3DDEVICE8         pDevice,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateCubeTexture(
        LPDIRECT3DDEVICE8         pDevice,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTexture(
        LPDIRECT3DDEVICE8         pDevice,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);



//----------------------------------------------------------------------------
// D3DXCreateTextureFromFile/Resource:
// -----------------------------------
// Create a texture object from a file or resource.
//
// Parameters:
//
//  pDevice
//      The D3D device with which the texture is going to be used.
//  pSrcFile
//      File name.
//  hSrcModule
//      Module handle. if NULL, current module will be used.
//  pSrcResource
//      Resource name in module
//  pvSrcData
//      Pointer to file in memory.
//  SrcDataSize
//      Size in bytes of file in memory.
//  Width, Height, Depth, Size
//      Size in pixels; if zero or D3DX_DEFAULT, the size will be taken
//      from the file.
//  MipLevels
//      Number of mip levels;  if zero or D3DX_DEFAULT, a complete mipmap
//      chain will be created.
//  Usage
//      Texture usage flags
//  Format
//      Desired pixel format.  If D3DFMT_UNKNOWN, the format will be
//      taken from the file.
//  Pool
//      Memory pool to be used to create texture
//  Filter
//      D3DX_FILTER flags controlling how the image is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_TRIANGLE.
//  MipFilter
//      D3DX_FILTER flags controlling how each miplevel is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_BOX,
//  ColorKey
//      Color to replace with transparent black, or 0 to disable colorkey.
//      This is always a 32-bit ARGB color, independent of the source image
//      format.  Alpha is significant, and should usually be set to FF for 
//      opaque colorkeys.  (ex. Opaque black == 0xff000000)
//  pSrcInfo
//      Pointer to a D3DXIMAGE_INFO structure to be filled in with the 
//      description of the data in the source image file, or NULL.
//  pPalette
//      256 color palette to be filled in, or NULL
//  ppTexture, ppCubeTexture, ppVolumeTexture
//      The texture object that will be created
//
//----------------------------------------------------------------------------


// FromFile

HRESULT WINAPI
    D3DXCreateTextureFromFileA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateTextureFromFileW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        LPDIRECT3DTEXTURE8*       ppTexture);

#ifdef UNICODE
#define D3DXCreateTextureFromFile D3DXCreateTextureFromFileW
#else
#define D3DXCreateTextureFromFile D3DXCreateTextureFromFileA
#endif


HRESULT WINAPI
    D3DXCreateCubeTextureFromFileA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromFileW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

#ifdef UNICODE
#define D3DXCreateCubeTextureFromFile D3DXCreateCubeTextureFromFileW
#else
#define D3DXCreateCubeTextureFromFile D3DXCreateCubeTextureFromFileA
#endif


HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

#ifdef UNICODE
#define D3DXCreateVolumeTextureFromFile D3DXCreateVolumeTextureFromFileW
#else
#define D3DXCreateVolumeTextureFromFile D3DXCreateVolumeTextureFromFileA
#endif


// FromResource

HRESULT WINAPI
    D3DXCreateTextureFromResourceA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateTextureFromResourceW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        LPDIRECT3DTEXTURE8*       ppTexture);

#ifdef UNICODE
#define D3DXCreateTextureFromResource D3DXCreateTextureFromResourceW
#else
#define D3DXCreateTextureFromResource D3DXCreateTextureFromResourceA
#endif


HRESULT WINAPI
    D3DXCreateCubeTextureFromResourceA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromResourceW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

#ifdef UNICODE
#define D3DXCreateCubeTextureFromResource D3DXCreateCubeTextureFromResourceW
#else
#define D3DXCreateCubeTextureFromResource D3DXCreateCubeTextureFromResourceA
#endif


HRESULT WINAPI
    D3DXCreateVolumeTextureFromResourceA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromResourceW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

#ifdef UNICODE
#define D3DXCreateVolumeTextureFromResource D3DXCreateVolumeTextureFromResourceW
#else
#define D3DXCreateVolumeTextureFromResource D3DXCreateVolumeTextureFromResourceA
#endif


// FromFileEx

HRESULT WINAPI
    D3DXCreateTextureFromFileExA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateTextureFromFileExW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DTEXTURE8*       ppTexture);

#ifdef UNICODE
#define D3DXCreateTextureFromFileEx D3DXCreateTextureFromFileExW
#else
#define D3DXCreateTextureFromFileEx D3DXCreateTextureFromFileExA
#endif


HRESULT WINAPI
    D3DXCreateCubeTextureFromFileExA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromFileExW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

#ifdef UNICODE
#define D3DXCreateCubeTextureFromFileEx D3DXCreateCubeTextureFromFileExW
#else
#define D3DXCreateCubeTextureFromFileEx D3DXCreateCubeTextureFromFileExA
#endif


HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileExA(
        LPDIRECT3DDEVICE8         pDevice,
        LPCSTR                    pSrcFile,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileExW(
        LPDIRECT3DDEVICE8         pDevice,
        LPCWSTR                   pSrcFile,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

#ifdef UNICODE
#define D3DXCreateVolumeTextureFromFileEx D3DXCreateVolumeTextureFromFileExW
#else
#define D3DXCreateVolumeTextureFromFileEx D3DXCreateVolumeTextureFromFileExA
#endif


// FromResourceEx

HRESULT WINAPI
    D3DXCreateTextureFromResourceExA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateTextureFromResourceExW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DTEXTURE8*       ppTexture);

#ifdef UNICODE
#define D3DXCreateTextureFromResourceEx D3DXCreateTextureFromResourceExW
#else
#define D3DXCreateTextureFromResourceEx D3DXCreateTextureFromResourceExA
#endif


HRESULT WINAPI
    D3DXCreateCubeTextureFromResourceExA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromResourceExW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

#ifdef UNICODE
#define D3DXCreateCubeTextureFromResourceEx D3DXCreateCubeTextureFromResourceExW
#else
#define D3DXCreateCubeTextureFromResourceEx D3DXCreateCubeTextureFromResourceExA
#endif


HRESULT WINAPI
    D3DXCreateVolumeTextureFromResourceExA(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCSTR                    pSrcResource,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromResourceExW(
        LPDIRECT3DDEVICE8         pDevice,
        HMODULE                   hSrcModule,
        LPCWSTR                   pSrcResource,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);

#ifdef UNICODE
#define D3DXCreateVolumeTextureFromResourceEx D3DXCreateVolumeTextureFromResourceExW
#else
#define D3DXCreateVolumeTextureFromResourceEx D3DXCreateVolumeTextureFromResourceExA
#endif


// FromFileInMemory

HRESULT WINAPI
    D3DXCreateTextureFromFileInMemory(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromFileInMemory(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileInMemory(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);


// FromFileInMemoryEx

HRESULT WINAPI
    D3DXCreateTextureFromFileInMemoryEx(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        UINT                      Width,
        UINT                      Height,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DTEXTURE8*       ppTexture);

HRESULT WINAPI
    D3DXCreateCubeTextureFromFileInMemoryEx(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        UINT                      Size,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DCUBETEXTURE8*   ppCubeTexture);

HRESULT WINAPI
    D3DXCreateVolumeTextureFromFileInMemoryEx(
        LPDIRECT3DDEVICE8         pDevice,
        LPCVOID                   pSrcData,
        UINT                      SrcDataSize,
        UINT                      Width,
        UINT                      Height,
        UINT                      Depth,
        UINT                      MipLevels,
        DWORD                     Usage,
        D3DFORMAT                 Format,
        D3DPOOL                   Pool,
        DWORD                     Filter,
        DWORD                     MipFilter,
        D3DCOLOR                  ColorKey,
        D3DXIMAGE_INFO*           pSrcInfo,
        PALETTEENTRY*             pPalette,
        LPDIRECT3DVOLUMETEXTURE8* ppVolumeTexture);



//----------------------------------------------------------------------------
// D3DXSaveTextureToFile:
// ----------------------
// Save a texture to a file.
//
// Parameters:
//  pDestFile
//      File name of the destination file
//  DestFormat
//      D3DXIMAGE_FILEFORMAT specifying file format to use when saving.
//  pSrcTexture
//      Source texture, containing the image to be saved
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//
//----------------------------------------------------------------------------


HRESULT WINAPI
    D3DXSaveTextureToFileA(
        LPCSTR                    pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DBASETEXTURE8    pSrcTexture,
        CONST PALETTEENTRY*       pSrcPalette);

HRESULT WINAPI
    D3DXSaveTextureToFileW(
        LPCWSTR                   pDestFile,
        D3DXIMAGE_FILEFORMAT      DestFormat,
        LPDIRECT3DBASETEXTURE8    pSrcTexture,
        CONST PALETTEENTRY*       pSrcPalette);

#ifdef UNICODE
#define D3DXSaveTextureToFile D3DXSaveTextureToFileW
#else
#define D3DXSaveTextureToFile D3DXSaveTextureToFileA
#endif




//////////////////////////////////////////////////////////////////////////////
// Misc Texture APIs /////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//----------------------------------------------------------------------------
// D3DXFilterTexture:
// ------------------
// Filters mipmaps levels of a texture.
//
// Parameters:
//  pBaseTexture
//      The texture object to be filtered
//  pPalette
//      256 color palette to be used, or NULL for non-palettized formats
//  SrcLevel
//      The level whose image is used to generate the subsequent levels. 
//  Filter
//      D3DX_FILTER flags controlling how each miplevel is filtered.
//      Or D3DX_DEFAULT for D3DX_FILTER_BOX,
//
//----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXFilterTexture(
        LPDIRECT3DBASETEXTURE8    pBaseTexture,
        CONST PALETTEENTRY*       pPalette,
        UINT                      SrcLevel,
        DWORD                     Filter);

#define D3DXFilterCubeTexture D3DXFilterTexture
#define D3DXFilterVolumeTexture D3DXFilterTexture



//----------------------------------------------------------------------------
// D3DXFillTexture:
// ----------------
// Uses a user provided function to fill each texel of each mip level of a
// given texture.
//
// Paramters:
//  pTexture, pCubeTexture, pVolumeTexture
//      Pointer to the texture to be filled.
//  pFunction
//      Pointer to user provided evalutor function which will be used to 
//      compute the value of each texel.
//  pData
//      Pointer to an arbitrary block of user defined data.  This pointer 
//      will be passed to the function provided in pFunction
//-----------------------------------------------------------------------------

HRESULT WINAPI
    D3DXFillTexture(
        LPDIRECT3DTEXTURE8        pTexture,
        LPD3DXFILL2D              pFunction,
        LPVOID                    pData);

HRESULT WINAPI
    D3DXFillCubeTexture(
        LPDIRECT3DCUBETEXTURE8    pCubeTexture,
        LPD3DXFILL3D              pFunction,
        LPVOID                    pData);

HRESULT WINAPI
    D3DXFillVolumeTexture(
        LPDIRECT3DVOLUMETEXTURE8  pVolumeTexture,
        LPD3DXFILL3D              pFunction,
        LPVOID                    pData);



//----------------------------------------------------------------------------
// D3DXComputeNormalMap:
// ---------------------
// Converts a height map into a normal map.  The (x,y,z) components of each
// normal are mapped to the (r,g,b) channels of the output texture.
//
// Parameters
//  pTexture
//      Pointer to the destination texture
//  pSrcTexture
//      Pointer to the source heightmap texture 
//  pSrcPalette
//      Source palette of 256 colors, or NULL
//  Flags
//      D3DX_NORMALMAP flags
//  Channel
//      D3DX_CHANNEL specifying source of height information
//  Amplitude
//      The constant value which the height information is multiplied by.
//---------------------------------------------------------------------------

HRESULT WINAPI
    D3DXComputeNormalMap(
        LPDIRECT3DTEXTURE8        pTexture,
        LPDIRECT3DTEXTURE8        pSrcTexture,
        CONST PALETTEENTRY*       pSrcPalette,
        DWORD                     Flags,
        DWORD                     Channel,
        FLOAT                     Amplitude);




#ifdef __cplusplus
}
#endif //__cplusplus

#endif //__D3DX8TEX_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxerr.h ===
//----------------------------------------------------------------------
//                                                                      
//   d3dxerr.h --  0xC code definitions for the D3DX API                
//                                                                      
//   Copyright (c) Microsoft Corp. All rights reserved.      
//                                                                      
//----------------------------------------------------------------------
#ifndef __D3DXERR_H__
#define __D3DXERR_H__

// 
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_D3DX    0x877



//
// MessageId: D3DXERR_NOMEMORY
//
// MessageText:
//
//  Out of memory.
// 
#define D3DXERR_NOMEMORY    ((HRESULT)0xC8770BB8L)


//
// MessageId: D3DXERR_NULLPOINTER
//
// MessageText:
//
//  A NULL pointer was passed as a parameter.
// 
#define D3DXERR_NULLPOINTER    ((HRESULT)0xC8770BB9L)


//
// MessageId: D3DXERR_INVALIDD3DXDEVICEINDEX
//
// MessageText:
//
//  The Device Index passed in is invalid.
// 
#define D3DXERR_INVALIDD3DXDEVICEINDEX    ((HRESULT)0xC8770BBAL)


//
// MessageId: D3DXERR_NODIRECTDRAWAVAILABLE
//
// MessageText:
//
//  DirectDraw has not been created.
// 
#define D3DXERR_NODIRECTDRAWAVAILABLE    ((HRESULT)0xC8770BBBL)


//
// MessageId: D3DXERR_NODIRECT3DAVAILABLE
//
// MessageText:
//
//  Direct3D has not been created.
// 
#define D3DXERR_NODIRECT3DAVAILABLE    ((HRESULT)0xC8770BBCL)


//
// MessageId: D3DXERR_NODIRECT3DDEVICEAVAILABLE
//
// MessageText:
//
//  Direct3D device has not been created.
// 
#define D3DXERR_NODIRECT3DDEVICEAVAILABLE    ((HRESULT)0xC8770BBDL)


//
// MessageId: D3DXERR_NOPRIMARYAVAILABLE
//
// MessageText:
//
//  Primary surface has not been created.
// 
#define D3DXERR_NOPRIMARYAVAILABLE    ((HRESULT)0xC8770BBEL)


//
// MessageId: D3DXERR_NOZBUFFERAVAILABLE
//
// MessageText:
//
//  Z buffer has not been created.
// 
#define D3DXERR_NOZBUFFERAVAILABLE    ((HRESULT)0xC8770BBFL)


//
// MessageId: D3DXERR_NOBACKBUFFERAVAILABLE
//
// MessageText:
//
//  Backbuffer has not been created.
// 
#define D3DXERR_NOBACKBUFFERAVAILABLE    ((HRESULT)0xC8770BC0L)


//
// MessageId: D3DXERR_COULDNTUPDATECAPS
//
// MessageText:
//
//  Failed to update caps database after changing display mode.
// 
#define D3DXERR_COULDNTUPDATECAPS    ((HRESULT)0xC8770BC1L)


//
// MessageId: D3DXERR_NOZBUFFER
//
// MessageText:
//
//  Could not create Z buffer.
// 
#define D3DXERR_NOZBUFFER    ((HRESULT)0xC8770BC2L)


//
// MessageId: D3DXERR_INVALIDMODE
//
// MessageText:
//
//  Display mode is not valid.
// 
#define D3DXERR_INVALIDMODE    ((HRESULT)0xC8770BC3L)


//
// MessageId: D3DXERR_INVALIDPARAMETER
//
// MessageText:
//
//  One or more of the parameters passed is invalid.
// 
#define D3DXERR_INVALIDPARAMETER    ((HRESULT)0xC8770BC4L)


//
// MessageId: D3DXERR_INITFAILED
//
// MessageText:
//
//  D3DX failed to initialize itself.
// 
#define D3DXERR_INITFAILED    ((HRESULT)0xC8770BC5L)


//
// MessageId: D3DXERR_STARTUPFAILED
//
// MessageText:
//
//  D3DX failed to start up.
// 
#define D3DXERR_STARTUPFAILED    ((HRESULT)0xC8770BC6L)


//
// MessageId: D3DXERR_D3DXNOTSTARTEDYET
//
// MessageText:
//
//  D3DXInitialize() must be called first.
// 
#define D3DXERR_D3DXNOTSTARTEDYET    ((HRESULT)0xC8770BC7L)


//
// MessageId: D3DXERR_NOTINITIALIZED
//
// MessageText:
//
//  D3DX is not initialized yet.
// 
#define D3DXERR_NOTINITIALIZED    ((HRESULT)0xC8770BC8L)


//
// MessageId: D3DXERR_FAILEDDRAWTEXT
//
// MessageText:
//
//  Failed to render text to the surface.
// 
#define D3DXERR_FAILEDDRAWTEXT    ((HRESULT)0xC8770BC9L)


//
// MessageId: D3DXERR_BADD3DXCONTEXT
//
// MessageText:
//
//  Bad D3DX context.
// 
#define D3DXERR_BADD3DXCONTEXT    ((HRESULT)0xC8770BCAL)


//
// MessageId: D3DXERR_CAPSNOTSUPPORTED
//
// MessageText:
//
//  The requested device capabilities are not supported.
// 
#define D3DXERR_CAPSNOTSUPPORTED    ((HRESULT)0xC8770BCBL)


//
// MessageId: D3DXERR_UNSUPPORTEDFILEFORMAT
//
// MessageText:
//
//  The image file format is unrecognized.
// 
#define D3DXERR_UNSUPPORTEDFILEFORMAT    ((HRESULT)0xC8770BCCL)


//
// MessageId: D3DXERR_IFLERROR
//
// MessageText:
//
//  The image file loading library error.
// 
#define D3DXERR_IFLERROR    ((HRESULT)0xC8770BCDL)


//
// MessageId: D3DXERR_FAILEDGETCAPS
//
// MessageText:
//
//  Could not obtain device caps.
// 
#define D3DXERR_FAILEDGETCAPS    ((HRESULT)0xC8770BCEL)


//
// MessageId: D3DXERR_CANNOTRESIZEFULLSCREEN
//
// MessageText:
//
//  Resize does not work for full-screen.
// 
#define D3DXERR_CANNOTRESIZEFULLSCREEN    ((HRESULT)0xC8770BCFL)


//
// MessageId: D3DXERR_CANNOTRESIZENONWINDOWED
//
// MessageText:
//
//  Resize does not work for non-windowed contexts.
// 
#define D3DXERR_CANNOTRESIZENONWINDOWED    ((HRESULT)0xC8770BD0L)


//
// MessageId: D3DXERR_FRONTBUFFERALREADYEXISTS
//
// MessageText:
//
//  Front buffer already exists.
// 
#define D3DXERR_FRONTBUFFERALREADYEXISTS    ((HRESULT)0xC8770BD1L)


//
// MessageId: D3DXERR_FULLSCREENPRIMARYEXISTS
//
// MessageText:
//
//  The app is using the primary in full-screen mode.
// 
#define D3DXERR_FULLSCREENPRIMARYEXISTS    ((HRESULT)0xC8770BD2L)


//
// MessageId: D3DXERR_GETDCFAILED
//
// MessageText:
//
//  Could not get device context.
// 
#define D3DXERR_GETDCFAILED    ((HRESULT)0xC8770BD3L)


//
// MessageId: D3DXERR_BITBLTFAILED
//
// MessageText:
//
//  Could not bitBlt.
// 
#define D3DXERR_BITBLTFAILED    ((HRESULT)0xC8770BD4L)


//
// MessageId: D3DXERR_NOTEXTURE
//
// MessageText:
//
//  There is no surface backing up this texture.
// 
#define D3DXERR_NOTEXTURE    ((HRESULT)0xC8770BD5L)


//
// MessageId: D3DXERR_MIPLEVELABSENT
//
// MessageText:
//
//  There is no such miplevel for this surface.
// 
#define D3DXERR_MIPLEVELABSENT    ((HRESULT)0xC8770BD6L)


//
// MessageId: D3DXERR_SURFACENOTPALETTED
//
// MessageText:
//
//  The surface is not paletted.
// 
#define D3DXERR_SURFACENOTPALETTED    ((HRESULT)0xC8770BD7L)


//
// MessageId: D3DXERR_ENUMFORMATSFAILED
//
// MessageText:
//
//  An error occured while enumerating surface formats.
// 
#define D3DXERR_ENUMFORMATSFAILED    ((HRESULT)0xC8770BD8L)


//
// MessageId: D3DXERR_COLORDEPTHTOOLOW
//
// MessageText:
//
//  D3DX only supports color depths of 16 bit or greater.
// 
#define D3DXERR_COLORDEPTHTOOLOW    ((HRESULT)0xC8770BD9L)


//
// MessageId: D3DXERR_INVALIDFILEFORMAT
//
// MessageText:
//
//  The file format is invalid.
// 
#define D3DXERR_INVALIDFILEFORMAT    ((HRESULT)0xC8770BDAL)


//
// MessageId: D3DXERR_NOMATCHFOUND
//
// MessageText:
//
//  No suitable match found.
// 
#define D3DXERR_NOMATCHFOUND    ((HRESULT)0xC8770BDBL)



#endif //__D3DXERR_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxmath.h ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxmath.h
//  Content:    D3DX math types and functions
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __D3DXMATH_H__
#define __D3DXMATH_H__

#include <d3d.h>
#include <math.h>
#include <limits.h>
#include "d3dxerr.h"

#ifndef D3DXINLINE
#ifdef __cplusplus
#define D3DXINLINE inline
#else
#define D3DXINLINE _inline
#endif
#endif

#pragma warning(disable:4201) // anonymous unions warning



typedef struct ID3DXMatrixStack *LPD3DXMATRIXSTACK;

// {E3357330-CC5E-11d2-A434-00A0C90629A8}
DEFINE_GUID( IID_ID3DXMatrixStack,
             0xe3357330, 0xcc5e, 0x11d2, 0xa4, 0x34, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8);


//===========================================================================
//
// General purpose utilities
//
//===========================================================================
#define D3DX_PI    ((float)  3.141592654f)
#define D3DX_1BYPI ((float)  0.318309886f)

#define D3DXToRadian( degree ) ((degree) * (D3DX_PI / 180.0f))
#define D3DXToDegree( radian ) ((radian) * (180.0f / D3DX_PI))



//===========================================================================
//
// Vectors
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------
typedef struct D3DXVECTOR2
{
#ifdef __cplusplus
public:
    D3DXVECTOR2() {};
    D3DXVECTOR2( const float * );
    D3DXVECTOR2( float x, float y );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXVECTOR2& operator += ( const D3DXVECTOR2& );
    D3DXVECTOR2& operator -= ( const D3DXVECTOR2& );
    D3DXVECTOR2& operator *= ( float );
    D3DXVECTOR2& operator /= ( float );

    // unary operators
    D3DXVECTOR2 operator + () const;
    D3DXVECTOR2 operator - () const;

    // binary operators
    D3DXVECTOR2 operator + ( const D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator - ( const D3DXVECTOR2& ) const;
    D3DXVECTOR2 operator * ( float ) const;
    D3DXVECTOR2 operator / ( float ) const;

    friend D3DXVECTOR2 operator * ( float, const D3DXVECTOR2& );

    BOOL operator == ( const D3DXVECTOR2& ) const;
    BOOL operator != ( const D3DXVECTOR2& ) const;


public:
#endif //__cplusplus
    float x, y;
} D3DXVECTOR2, *LPD3DXVECTOR2;


//--------------------------
// 3D Vector
//--------------------------
typedef struct D3DXVECTOR3
{
#ifdef __cplusplus
public:
    D3DXVECTOR3() {};
    D3DXVECTOR3( const float * );
    D3DXVECTOR3( const D3DVECTOR& );
    D3DXVECTOR3( float x, float y, float z );

    // casting
    operator float* ();
    operator const float* () const;

    operator D3DVECTOR* ();
    operator const D3DVECTOR* () const;

    operator D3DVECTOR& ();
    operator const D3DVECTOR& () const;

    // assignment operators
    D3DXVECTOR3& operator += ( const D3DXVECTOR3& );
    D3DXVECTOR3& operator -= ( const D3DXVECTOR3& );
    D3DXVECTOR3& operator *= ( float );
    D3DXVECTOR3& operator /= ( float );

    // unary operators
    D3DXVECTOR3 operator + () const;
    D3DXVECTOR3 operator - () const;

    // binary operators
    D3DXVECTOR3 operator + ( const D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator - ( const D3DXVECTOR3& ) const;
    D3DXVECTOR3 operator * ( float ) const;
    D3DXVECTOR3 operator / ( float ) const;

    friend D3DXVECTOR3 operator * ( float, const struct D3DXVECTOR3& );

    BOOL operator == ( const D3DXVECTOR3& ) const;
    BOOL operator != ( const D3DXVECTOR3& ) const;

public:
#endif //__cplusplus
    float x, y, z;
} D3DXVECTOR3, *LPD3DXVECTOR3;


//--------------------------
// 4D Vector
//--------------------------
typedef struct D3DXVECTOR4
{
#ifdef __cplusplus
public:
    D3DXVECTOR4() {};
    D3DXVECTOR4( const float* );
    D3DXVECTOR4( float x, float y, float z, float w );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXVECTOR4& operator += ( const D3DXVECTOR4& );
    D3DXVECTOR4& operator -= ( const D3DXVECTOR4& );
    D3DXVECTOR4& operator *= ( float );
    D3DXVECTOR4& operator /= ( float );

    // unary operators
    D3DXVECTOR4 operator + () const;
    D3DXVECTOR4 operator - () const;

    // binary operators
    D3DXVECTOR4 operator + ( const D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator - ( const D3DXVECTOR4& ) const;
    D3DXVECTOR4 operator * ( float ) const;
    D3DXVECTOR4 operator / ( float ) const;

    friend D3DXVECTOR4 operator * ( float, const D3DXVECTOR4& );

    BOOL operator == ( const D3DXVECTOR4& ) const;
    BOOL operator != ( const D3DXVECTOR4& ) const;

public:
#endif //__cplusplus
    float x, y, z, w;
} D3DXVECTOR4, *LPD3DXVECTOR4;


//===========================================================================
//
// Matrices
//
//===========================================================================
typedef struct D3DXMATRIX
{
#ifdef __cplusplus
public:
    D3DXMATRIX() {};
    D3DXMATRIX( const float * );
    D3DXMATRIX( const D3DMATRIX& );
    D3DXMATRIX( float m00, float m01, float m02, float m03,
                float m10, float m11, float m12, float m13,
                float m20, float m21, float m22, float m23,
                float m30, float m31, float m32, float m33 );


    // access grants
    float& operator () ( UINT iRow, UINT iCol );
    float  operator () ( UINT iRow, UINT iCol ) const;

    // casting operators
    operator float* ();
    operator const float* () const;

    operator D3DMATRIX* ();
    operator const D3DMATRIX* () const;

    operator D3DMATRIX& ();
    operator const D3DMATRIX& () const;

    // assignment operators
    D3DXMATRIX& operator *= ( const D3DXMATRIX& );
    D3DXMATRIX& operator += ( const D3DXMATRIX& );
    D3DXMATRIX& operator -= ( const D3DXMATRIX& );
    D3DXMATRIX& operator *= ( float );
    D3DXMATRIX& operator /= ( float );

    // unary operators
    D3DXMATRIX operator + () const;
    D3DXMATRIX operator - () const;

    // binary operators
    D3DXMATRIX operator * ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator + ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator - ( const D3DXMATRIX& ) const;
    D3DXMATRIX operator * ( float ) const;
    D3DXMATRIX operator / ( float ) const;

    friend D3DXMATRIX operator * ( float, const D3DXMATRIX& );

    BOOL operator == ( const D3DXMATRIX& ) const;
    BOOL operator != ( const D3DXMATRIX& ) const;


#endif //__cplusplus

    union
    {
        float m[4][4];
#ifdef __cplusplus
        struct
        {
            float m00, m01, m02, m03;
            float m10, m11, m12, m13;
            float m20, m21, m22, m23;
            float m30, m31, m32, m33;
        };
#endif //__cplusplus
    };
} D3DXMATRIX, *LPD3DXMATRIX;


//===========================================================================
//
//    Quaternions
//
//===========================================================================
typedef struct D3DXQUATERNION
{
#ifdef __cplusplus
public:
    D3DXQUATERNION() {}
    D3DXQUATERNION( const float * );
    D3DXQUATERNION( float x, float y, float z, float w );

    // casting
    operator float* ();
    operator const float* () const;

    // assignment operators
    D3DXQUATERNION& operator += ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator -= ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( const D3DXQUATERNION& );
    D3DXQUATERNION& operator *= ( float );
    D3DXQUATERNION& operator /= ( float );

    // unary operators
    D3DXQUATERNION  operator + () const;
    D3DXQUATERNION  operator - () const;

    // binary operators
    D3DXQUATERNION operator + ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator - ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( const D3DXQUATERNION& ) const;
    D3DXQUATERNION operator * ( float ) const;
    D3DXQUATERNION operator / ( float ) const;

    friend D3DXQUATERNION operator * (float, const D3DXQUATERNION& );

    BOOL operator == ( const D3DXQUATERNION& ) const;
    BOOL operator != ( const D3DXQUATERNION& ) const;

#endif //__cplusplus
    float x, y, z, w;
} D3DXQUATERNION, *LPD3DXQUATERNION;


//===========================================================================
//
// Planes
//
//===========================================================================
typedef struct D3DXPLANE
{
#ifdef __cplusplus
public:
    D3DXPLANE() {}
    D3DXPLANE( const float* );
    D3DXPLANE( float a, float b, float c, float d );

    // casting
    operator float* ();
    operator const float* () const;

    // unary operators
    D3DXPLANE operator + () const;
    D3DXPLANE operator - () const;

    // binary operators
    BOOL operator == ( const D3DXPLANE& ) const;
    BOOL operator != ( const D3DXPLANE& ) const;

#endif //__cplusplus
    float a, b, c, d;
} D3DXPLANE, *LPD3DXPLANE;


//===========================================================================
//
// Colors
//
//===========================================================================

typedef struct D3DXCOLOR
{
#ifdef __cplusplus
public:
    D3DXCOLOR() {}
    D3DXCOLOR( DWORD argb );
    D3DXCOLOR( const float * );
    D3DXCOLOR( const D3DCOLORVALUE& );
    D3DXCOLOR( float r, float g, float b, float a );

    // casting
    operator DWORD () const;

    operator float* ();
    operator const float* () const;

    operator D3DCOLORVALUE* ();
    operator const D3DCOLORVALUE* () const;

    operator D3DCOLORVALUE& ();
    operator const D3DCOLORVALUE& () const;

    // assignment operators
    D3DXCOLOR& operator += ( const D3DXCOLOR& );
    D3DXCOLOR& operator -= ( const D3DXCOLOR& );
    D3DXCOLOR& operator *= ( float );
    D3DXCOLOR& operator /= ( float );

    // unary operators
    D3DXCOLOR operator + () const;
    D3DXCOLOR operator - () const;

    // binary operators
    D3DXCOLOR operator + ( const D3DXCOLOR& ) const;
    D3DXCOLOR operator - ( const D3DXCOLOR& ) const;
    D3DXCOLOR operator * ( float ) const;
    D3DXCOLOR operator / ( float ) const;

    friend D3DXCOLOR operator * (float, const D3DXCOLOR& );

    BOOL operator == ( const D3DXCOLOR& ) const;
    BOOL operator != ( const D3DXCOLOR& ) const;

#endif //__cplusplus
    FLOAT r, g, b, a;
} D3DXCOLOR, *LPD3DXCOLOR;



//===========================================================================
//
// D3DX math functions:
//
// NOTE:
//  * All these functions can take the same object as in and out parameters.
//
//  * Out parameters are typically also returned as return values, so that
//    the output of one function may be used as a parameter to another.
//
//===========================================================================

//--------------------------
// 2D Vector
//--------------------------

// inline

float D3DXVec2Length
    ( const D3DXVECTOR2 *pV );

float D3DXVec2LengthSq
    ( const D3DXVECTOR2 *pV );

float D3DXVec2Dot
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Z component of ((x1,y1,0) cross (x2,y2,0))
float D3DXVec2CCW
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2)
D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2)
D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 );

D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, float s );

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR2* WINAPI D3DXVec2Normalize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR2* WINAPI D3DXVec2Hermite
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pT1,
      const D3DXVECTOR2 *pV2, const D3DXVECTOR2 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR2* WINAPI D3DXVec2BaryCentric
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      D3DXVECTOR2 *pV3, float f, float g);

// Transform (x, y, 0, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec2Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

// Transform (x, y, 0, 1) by matrix, project result back into w=1.
D3DXVECTOR2* WINAPI D3DXVec2TransformCoord
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

// Transform (x, y, 0, 0) by matrix.
D3DXVECTOR2* WINAPI D3DXVec2TransformNormal
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 3D Vector
//--------------------------

// inline

float D3DXVec3Length
    ( const D3DXVECTOR3 *pV );

float D3DXVec3LengthSq
    ( const D3DXVECTOR3 *pV );

float D3DXVec3Dot
    ( const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 );

D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, float s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

D3DXVECTOR3* WINAPI D3DXVec3Normalize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR3* WINAPI D3DXVec3Hermite
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pT1,
      const D3DXVECTOR3 *pV2, const D3DXVECTOR3 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR3* WINAPI D3DXVec3BaryCentric
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      const D3DXVECTOR3 *pV3, float f, float g);

// Transform (x, y, z, 1) by matrix.
D3DXVECTOR4* WINAPI D3DXVec3Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

// Transform (x, y, z, 1) by matrix, project result back into w=1.
D3DXVECTOR3* WINAPI D3DXVec3TransformCoord
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

// Transform (x, y, z, 0) by matrix.
D3DXVECTOR3* WINAPI D3DXVec3TransformNormal
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif



//--------------------------
// 4D Vector
//--------------------------

// inline

float D3DXVec4Length
    ( const D3DXVECTOR4 *pV );

float D3DXVec4LengthSq
    ( const D3DXVECTOR4 *pV );

float D3DXVec4Dot
    ( const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2 );

D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

// Minimize each component.  x = min(x1, x2), y = min(y1, y2), ...
D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

// Maximize each component.  x = max(x1, x2), y = max(y1, y2), ...
D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2);

D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, float s);

// Linear interpolation. V1 + s(V2-V1)
D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      float s );

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Cross-product in 4 dimensions.
D3DXVECTOR4* WINAPI D3DXVec4Cross
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      const D3DXVECTOR4 *pV3);

D3DXVECTOR4* WINAPI D3DXVec4Normalize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV );

// Hermite interpolation between position V1, tangent T1 (when s == 0)
// and position V2, tangent T2 (when s == 1).
D3DXVECTOR4* WINAPI D3DXVec4Hermite
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pT1,
      const D3DXVECTOR4 *pV2, const D3DXVECTOR4 *pT2, float s );

// Barycentric coordinates.  V1 + f(V2-V1) + g(V3-V1)
D3DXVECTOR4* WINAPI D3DXVec4BaryCentric
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      const D3DXVECTOR4 *pV3, float f, float g);

// Transform vector by matrix.
D3DXVECTOR4* WINAPI D3DXVec4Transform
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// 4D Matrix
//--------------------------

// inline

D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut );

BOOL D3DXMatrixIsIdentity
    ( const D3DXMATRIX *pM );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

float WINAPI D3DXMatrixfDeterminant
    ( const D3DXMATRIX *pM );

// Matrix multiplication.  The result represents the transformation M2 
// followed by the transformation M1.  (Out = M1 * M2)
D3DXMATRIX* WINAPI D3DXMatrixMultiply
    ( D3DXMATRIX *pOut, const D3DXMATRIX *pM1, const D3DXMATRIX *pM2 );

D3DXMATRIX* WINAPI D3DXMatrixTranspose
    ( D3DXMATRIX *pOut, const D3DXMATRIX *pM );

// Calculate inverse of matrix.  Inversion my fail, in which case NULL will
// be returned.  The determinant of pM is also returned it pfDeterminant
// is non-NULL.
D3DXMATRIX* WINAPI D3DXMatrixInverse
    ( D3DXMATRIX *pOut, float *pfDeterminant, const D3DXMATRIX *pM );

// Build a matrix which scales by (sx, sy, sz)
D3DXMATRIX* WINAPI D3DXMatrixScaling
    ( D3DXMATRIX *pOut, float sx, float sy, float sz );

// Build a matrix which translates by (x, y, z)
D3DXMATRIX* WINAPI D3DXMatrixTranslation
    ( D3DXMATRIX *pOut, float x, float y, float z );

// Build a matrix which rotates around the X axis
D3DXMATRIX* WINAPI D3DXMatrixRotationX
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around the Y axis
D3DXMATRIX* WINAPI D3DXMatrixRotationY
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around the Z axis
D3DXMATRIX* WINAPI D3DXMatrixRotationZ
    ( D3DXMATRIX *pOut, float angle );

// Build a matrix which rotates around an arbitrary axis
D3DXMATRIX* WINAPI D3DXMatrixRotationAxis
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pV, float angle );

// Build a matrix from a quaternion
D3DXMATRIX* WINAPI D3DXMatrixRotationQuaternion
    ( D3DXMATRIX *pOut, const D3DXQUATERNION *pQ);

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXMATRIX* WINAPI D3DXMatrixRotationYawPitchRoll
    ( D3DXMATRIX *pOut, float yaw, float pitch, float roll );


// Build transformation matrix.  NULL arguments are treated as identity.
// Mout = Msc-1 * Msr-1 * Ms * Msr * Msc * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixTransformation
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pScalingCenter,
      const D3DXQUATERNION *pScalingRotation, const D3DXVECTOR3 *pScaling,
      const D3DXVECTOR3 *pRotationCenter, const D3DXQUATERNION *pRotation,
      const D3DXVECTOR3 *pTranslation);

// Build affine transformation matrix.  NULL arguments are treated as identity.
// Mout = Ms * Mrc-1 * Mr * Mrc * Mt
D3DXMATRIX* WINAPI D3DXMatrixAffineTransformation
    ( D3DXMATRIX *pOut, float Scaling, const D3DXVECTOR3 *pRotationCenter,
      const D3DXQUATERNION *pRotation, const D3DXVECTOR3 *pTranslation);

// Build a lookat matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAt
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pEye, const D3DXVECTOR3 *pAt,
      const D3DXVECTOR3 *pUp );

// Build a lookat matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixLookAtLH
    ( D3DXMATRIX *pOut, const D3DXVECTOR3 *pEye, const D3DXVECTOR3 *pAt,
      const D3DXVECTOR3 *pUp );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspective
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveLH
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFov
    ( D3DXMATRIX *pOut, float fovy, float aspect, float zn, float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveFovLH
    ( D3DXMATRIX *pOut, float fovy, float aspect, float zn, float zf );

// Build a perspective projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenter
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build a perspective projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixPerspectiveOffCenterLH
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrtho
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoLH
    ( D3DXMATRIX *pOut, float w, float h, float zn, float zf );

// Build an ortho projection matrix. (right-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenter
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build an ortho projection matrix. (left-handed)
D3DXMATRIX* WINAPI D3DXMatrixOrthoOffCenterLH
    ( D3DXMATRIX *pOut, float l, float r, float b, float t, float zn,
      float zf );

// Build a matrix which flattens geometry into a plane, as if casting
// a shadow from a light.
D3DXMATRIX* WINAPI D3DXMatrixShadow
    ( D3DXMATRIX *pOut, const D3DXVECTOR4 *pLight,
      const D3DXPLANE *pPlane );

// Build a matrix which reflects the coordinate system about a plane
D3DXMATRIX* WINAPI D3DXMatrixReflect
    ( D3DXMATRIX *pOut, const D3DXPLANE *pPlane );

#ifdef __cplusplus
}
#endif


//--------------------------
// Quaternion
//--------------------------

// inline

float D3DXQuaternionLength
    ( const D3DXQUATERNION *pQ );

// Length squared, or "norm"
float D3DXQuaternionLengthSq
    ( const D3DXQUATERNION *pQ );

float D3DXQuaternionDot
    ( const D3DXQUATERNION *pQ1, const D3DXQUATERNION *pQ2 );

// (0, 0, 0, 1)
D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut );

BOOL D3DXQuaternionIsIdentity
    ( const D3DXQUATERNION *pQ );

// (-x, -y, -z, w)
D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );


// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Compute a quaternin's axis and angle of rotation. Expects unit quaternions.
void WINAPI D3DXQuaternionToAxisAngle
    ( const D3DXQUATERNION *pQ, D3DXVECTOR3 *pAxis, float *pAngle );

// Build a quaternion from a rotation matrix.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationMatrix
    ( D3DXQUATERNION *pOut, const D3DXMATRIX *pM);

// Rotation about arbitrary axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationAxis
    ( D3DXQUATERNION *pOut, const D3DXVECTOR3 *pV, float angle );

// Yaw around the Y axis, a pitch around the X axis,
// and a roll around the Z axis.
D3DXQUATERNION* WINAPI D3DXQuaternionRotationYawPitchRoll
    ( D3DXQUATERNION *pOut, float yaw, float pitch, float roll );

// Quaternion multiplication.  The result represents the rotation Q2 
// followed by the rotation Q1.  (Out = Q2 * Q1)
D3DXQUATERNION* WINAPI D3DXQuaternionMultiply
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2 );

D3DXQUATERNION* WINAPI D3DXQuaternionNormalize
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Conjugate and re-norm
D3DXQUATERNION* WINAPI D3DXQuaternionInverse
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Expects unit quaternions.
// if q = (cos(theta), sin(theta) * v); ln(q) = (0, theta * v)
D3DXQUATERNION* WINAPI D3DXQuaternionLn
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Expects pure quaternions. (w == 0)  w is ignored in calculation.
// if q = (0, theta * v); exp(q) = (cos(theta), sin(theta) * v)
D3DXQUATERNION* WINAPI D3DXQuaternionExp
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ );

// Spherical linear interpolation between Q1 (s == 0) and Q2 (s == 1).
// Expects unit quaternions.
D3DXQUATERNION* WINAPI D3DXQuaternionSlerp
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, float t );

// Spherical quadrangle interpolation.
// Slerp(Slerp(Q1, Q4, t), Slerp(Q2, Q3, t), 2t(1-t))
D3DXQUATERNION* WINAPI D3DXQuaternionSquad
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, const D3DXQUATERNION *pQ3,
      const D3DXQUATERNION *pQ4, float t );

// Slerp(Slerp(Q1, Q2, f+g), Slerp(Q1, Q3, f+g), g/(f+g))
D3DXQUATERNION* WINAPI D3DXQuaternionBaryCentric
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ1,
      const D3DXQUATERNION *pQ2, const D3DXQUATERNION *pQ3,
      float f, float g );

#ifdef __cplusplus
}
#endif


//--------------------------
// Plane
//--------------------------

// inline

// ax + by + cz + dw
float D3DXPlaneDot
    ( const D3DXPLANE *pP, const D3DXVECTOR4 *pV);

// ax + by + cz + d
float D3DXPlaneDotCoord
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV);

// ax + by + cz
float D3DXPlaneDotNormal
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Normalize plane (so that |a,b,c| == 1)
D3DXPLANE* WINAPI D3DXPlaneNormalize
    ( D3DXPLANE *pOut, const D3DXPLANE *pP);

// Find the intersection between a plane and a line.  If the line is
// parallel to the plane, NULL is returned.
D3DXVECTOR3* WINAPI D3DXPlaneIntersectLine
    ( D3DXVECTOR3 *pOut, const D3DXPLANE *pP, const D3DXVECTOR3 *pV1,
      const D3DXVECTOR3 *pV2);

// Construct a plane from a point and a normal
D3DXPLANE* WINAPI D3DXPlaneFromPointNormal
    ( D3DXPLANE *pOut, const D3DXVECTOR3 *pPoint, const D3DXVECTOR3 *pNormal);

// Construct a plane from 3 points
D3DXPLANE* WINAPI D3DXPlaneFromPoints
    ( D3DXPLANE *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      const D3DXVECTOR3 *pV3);

// Transform a plane by a matrix.  The vector (a,b,c) must be normal.
// M must be an affine transform.
D3DXPLANE* WINAPI D3DXPlaneTransform
    ( D3DXPLANE *pOut, const D3DXPLANE *pP, const D3DXMATRIX *pM );

#ifdef __cplusplus
}
#endif


//--------------------------
// Color
//--------------------------

// inline

// (1-r, 1-g, 1-b, a)
D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC);

D3DXCOLOR* D3DXColorAdd
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorSubtract
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

D3DXCOLOR* D3DXColorScale
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s);

// (r1*r2, g1*g2, b1*b2, a1*a2)
D3DXCOLOR* D3DXColorModulate
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2);

// Linear interpolation of r,g,b, and a. C1 + s(C2-C1)
D3DXCOLOR* D3DXColorLerp
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2, float s);

// non-inline
#ifdef __cplusplus
extern "C" {
#endif

// Interpolate r,g,b between desaturated color and color.
// DesaturatedColor + s(Color - DesaturatedColor)
D3DXCOLOR* WINAPI D3DXColorAdjustSaturation
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s);

// Interpolate r,g,b between 50% grey and color.  Grey + s(Color - Grey)
D3DXCOLOR* WINAPI D3DXColorAdjustContrast
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float c);

#ifdef __cplusplus
}
#endif






//===========================================================================
//
//    Matrix Stack
//
//===========================================================================

DECLARE_INTERFACE_(ID3DXMatrixStack, IUnknown)
{
    //
    // IUnknown methods
    //
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID * ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    //
    // ID3DXMatrixStack methods
    //

    // Pops the top of the stack, returns the current top
    // *after* popping the top.
    STDMETHOD(Pop)(THIS) PURE;

    // Pushes the stack by one, duplicating the current matrix.
    STDMETHOD(Push)(THIS) PURE;

    // Loads identity in the current matrix.
    STDMETHOD(LoadIdentity)(THIS) PURE;

    // Loads the given matrix into the current matrix
    STDMETHOD(LoadMatrix)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Right-Multiplies the given matrix to the current matrix.
    // (transformation is about the current world origin)
    STDMETHOD(MultMatrix)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Left-Multiplies the given matrix to the current matrix
    // (transformation is about the local origin of the object)
    STDMETHOD(MultMatrixLocal)(THIS_ const D3DXMATRIX* pM ) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the current world origin)
    STDMETHOD(RotateAxis)
        (THIS_ const D3DXVECTOR3* pV, float angle) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix, counterclockwise about the given axis with the given angle.
    // (rotation is about the local origin of the object)
    STDMETHOD(RotateAxisLocal)
        (THIS_ const D3DXVECTOR3* pV, float angle) PURE;

    // Right multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // current world origin)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRoll)
        (THIS_ float yaw, float pitch, float roll) PURE;

    // Left multiply the current matrix with the computed rotation
    // matrix. All angles are counterclockwise. (rotation is about the
    // local origin of the object)

    // The rotation is composed of a yaw around the Y axis, a pitch around
    // the X axis, and a roll around the Z axis.
    STDMETHOD(RotateYawPitchRollLocal)
        (THIS_ float yaw, float pitch, float roll) PURE;

    // Right multiply the current matrix with the computed scale
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Scale)(THIS_ float x, float y, float z) PURE;

    // Left multiply the current matrix with the computed scale
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(ScaleLocal)(THIS_ float x, float y, float z) PURE;

    // Right multiply the current matrix with the computed translation
    // matrix. (transformation is about the current world origin)
    STDMETHOD(Translate)(THIS_ float x, float y, float z ) PURE;

    // Left multiply the current matrix with the computed translation
    // matrix. (transformation is about the local origin of the object)
    STDMETHOD(TranslateLocal)(THIS_ float x, float y, float z) PURE;

    // Obtain the current matrix at the top of the stack
    STDMETHOD_(D3DXMATRIX*, GetTop)(THIS) PURE;
};

#ifdef __cplusplus
extern "C" {
#endif

HRESULT WINAPI D3DXCreateMatrixStack( DWORD flags, LPD3DXMATRIXSTACK *ppStack );

#ifdef __cplusplus
}
#endif

#include "d3dxmath.inl"

#pragma warning(default:4201)

#endif // __D3DXMATH_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxcore.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxcore.h
//  Content:    D3DX core types and functions
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXCORE_H__
#define __D3DXCORE_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"


typedef struct ID3DXContext *LPD3DXCONTEXT;

// {9B74ED7A-BBEF-11d2-9F8E-0000F8080835}
DEFINE_GUID(IID_ID3DXContext, 
     0x9b74ed7a, 0xbbef, 0x11d2, 0x9f, 0x8e, 0x0, 0x0, 0xf8, 0x8, 0x8, 0x35);


///////////////////////////////////////////////////////////////////////////
// Defines and Enumerators used below:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// D3DX_DEFAULT:
// ---------
// A predefined value that could be used for any parameter in D3DX APIs or 
// member functions that is an enumerant or a handle.  The D3DX 
// documentation indicates wherever D3DX_DEFAULT may be used, 
// and how it will be interpreted in each situation.
//-------------------------------------------------------------------------
#define D3DX_DEFAULT ULONG_MAX
                            
//-------------------------------------------------------------------------
// D3DX_DEFAULT_FLOAT:
// ------------------
// Similar to D3DX_DEFAULT, but used for floating point parameters.
// The D3DX documentation indicates wherever D3DX_DEFAULT_FLOAT may be used, 
// and how it will be interpreted in each situation.
//-------------------------------------------------------------------------
#define D3DX_DEFAULT_FLOAT FLT_MAX
                            
//-------------------------------------------------------------------------
// Hardware Acceleration Level:
// ---------------------------
// These constants represent pre-defined hardware acceleration levels,
// and may be used as a default anywhere a (DWORD) deviceIndex is required.
// Each pre-define indicates a different level of hardware acceleration.
// They are an alternative to using explicit deviceIndices retrieved by
// D3DXGetDeviceDescription().
//
// The only case these pre-defines should be used as device indices is if
// a particular level of acceleration is required, and given more than 
// one capable device on the computer, it does not matter which one
// is used.
//
// The method of selection is as follows: If one of the D3DX devices on 
// the primary DDraw device supports a requested hardware acceleration 
// level, it will be used. Otherwise, the first matching device discovered 
// by D3DX will be used.  
//
// Of course, it is possible for no match to exist for any of the
// pre-defines on a particular computer.  Passing such a value into the
// D3DX apis will simply cause them to fail, reporting that no match
// is available.
// 
// D3DX_HWLEVEL_NULL:      Null implementation (draws nothing)
// D3DX_HWLEVEL_REFERENCE: Reference implementation (slowest)
// D3DX_HWLEVEL_2D:        2D acceleration only (RGB rasterizer used)
// D3DX_HWLEVEL_RASTER:    Rasterization acceleration (likely most useful)
// D3DX_HWLEVEL_TL:        Transform and lighting acceleration 
// D3DX_DEFAULT:           The highest level of acceleration available
//                         on the primary DDraw device.
//-------------------------------------------------------------------------
#define D3DX_HWLEVEL_NULL       (D3DX_DEFAULT - 1)
#define D3DX_HWLEVEL_REFERENCE  (D3DX_DEFAULT - 2)
#define D3DX_HWLEVEL_2D         (D3DX_DEFAULT - 3) 
#define D3DX_HWLEVEL_RASTER     (D3DX_DEFAULT - 4) 
#define D3DX_HWLEVEL_TL         (D3DX_DEFAULT - 5) 

//-------------------------------------------------------------------------
// Surface Class:
// -------------
// These are the various types of 2D-surfaces classified according to their
// usage. Note that a number of them overlap. e.g. STENCILBUFFERS and 
// DEPTHBUFFERS overlap (since in DX7 implementation the stencil and depth
// bits are part of the same pixel format).
//
// Mapping to the DX7 DDPIXELFORMAT concepts:
// -----------------------------------------
// D3DX_SC_DEPTHBUFFER:    All ddpfs which have the DDPF_ZPIXELS or the
//                           DDPF_ZBUFFER flags set.
// D3DX_SC_STENCILBUFFER:  All ddpfs which have the DDPF_STENCILBUFFER 
//                          flag set.
// D3DX_SC_BUMPMAP:        All ddpfs which have the DDPF_BUMPLUMINANCE 
//                           or the DDPF_BUMPDUDV flags set.
// D3DX_SC_LUMINANCEMAP:   All ddpfs which have the DDPF_BUMPLUMINANCE
//                           or the DDPF_LUMINANCE flags set.
// D3DX_SC_COLORTEXTURE:   All the surfaces that have color information in
//                           them and can be used for texturing.
// D3DX_SC_COLORRENDERTGT: All the surfaces that contain color 
//                           information and can be used as render targets.
//-------------------------------------------------------------------------
#define D3DX_SC_DEPTHBUFFER     0x01
#define D3DX_SC_STENCILBUFFER   0x02
#define D3DX_SC_COLORTEXTURE    0x04
#define D3DX_SC_BUMPMAP         0x08
#define D3DX_SC_LUMINANCEMAP    0x10
#define D3DX_SC_COLORRENDERTGT  0x20

//-------------------------------------------------------------------------
// Surface Formats:
// ---------------
// These are the various types of surface formats that can be enumerated, 
// there is no DDPIXELFORMAT structure in D3DX, the enums carry the meaning 
// (like FOURCCs).
//
// All the surface classes are represented here.  
//
//-------------------------------------------------------------------------
typedef enum _D3DX_SURFACEFORMAT
{
    D3DX_SF_UNKNOWN    = 0,
    D3DX_SF_R8G8B8     = 1,
    D3DX_SF_A8R8G8B8   = 2,
    D3DX_SF_X8R8G8B8   = 3,
    D3DX_SF_R5G6B5     = 4,
    D3DX_SF_R5G5B5     = 5,
    D3DX_SF_PALETTE4   = 6,
    D3DX_SF_PALETTE8   = 7,
    D3DX_SF_A1R5G5B5   = 8,
    D3DX_SF_X4R4G4B4   = 9,
    D3DX_SF_A4R4G4B4   =10,
    D3DX_SF_L8         =11,      // 8 bit luminance-only
    D3DX_SF_A8L8       =12,      // 16 bit alpha-luminance
    D3DX_SF_U8V8       =13,      // 16 bit bump map format
    D3DX_SF_U5V5L6     =14,      // 16 bit bump map format with luminance
    D3DX_SF_U8V8L8     =15,      // 24 bit bump map format with luminance
    D3DX_SF_UYVY       =16,      // UYVY format (PC98 compliance)
    D3DX_SF_YUY2       =17,      // YUY2 format (PC98 compliance)
    D3DX_SF_DXT1       =18,      // S3 texture compression technique 1
    D3DX_SF_DXT3       =19,      // S3 texture compression technique 3
    D3DX_SF_DXT5       =20,      // S3 texture compression technique 5
    D3DX_SF_R3G3B2     =21,      // 8 bit RGB texture format
    D3DX_SF_A8         =22,      // 8 bit alpha-only
    D3DX_SF_TEXTUREMAX =23,      // Last texture format

    D3DX_SF_Z16S0      =256,
    D3DX_SF_Z32S0      =257,
    D3DX_SF_Z15S1      =258,
    D3DX_SF_Z24S8      =259,
    D3DX_SF_S1Z15      =260,
    D3DX_SF_S8Z24      =261,
    D3DX_SF_DEPTHMAX   =262,     // Last depth format

    D3DX_SF_FORCEMAX  = (DWORD)(-1)
} D3DX_SURFACEFORMAT;

//-------------------------------------------------------------------------
// Filtering types for Texture APIs 
//
// -------------
// These are the various filter types for generation of mip-maps 
//
// D3DX_FILTERTYPE
// -----------------------------------------
// D3DX_FT_POINT:   Point sampling only - no filtering
// D3DX_FT_LINEAR:  Bi-linear filtering
//
//-------------------------------------------------------------------------
typedef enum _D3DX_FILTERTYPE
{
    D3DX_FT_POINT    = 0x01,
    D3DX_FT_LINEAR   = 0x02,
    D3DX_FT_DEFAULT  = D3DX_DEFAULT
} D3DX_FILTERTYPE;

///////////////////////////////////////////////////////////////////////////
// Structures used below:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// D3DX_VIDMODEDESC: Display mode description.
// ----------------
// width:       Screen Width 
// height:      Screen Height
// bpp:         Bits per pixel
// refreshRate: Refresh rate
//-------------------------------------------------------------------------
typedef struct  _D3DX_VIDMODEDESC
{
    DWORD width;
    DWORD height;
    DWORD bpp;
    DWORD refreshRate;
} D3DX_VIDMODEDESC;

//-------------------------------------------------------------------------
// D3DX_DEVICEDESC: Description of a device that can do 3D
// ---------------
// deviceIndex:   Unique (DWORD) number for the device.
// hwLevel:       Level of acceleration afforded.  This is one of the
//                predefined Device Indices, and exists in this
//                structure for informational purposes only.  More than
//                one device on the system may have the same hwLevel.
//                To refer to a particular device with the D3DX apis,
//                use the value in the deviceIndex member instead.
// ddGuid:        The ddraw GUID
// d3dDeviceGuid: Direct3D Device GUID
// ddDeviceID:    DDraw's GetDeviceIdentifier GUID.  This GUID is unique to
//                a particular driver revision on a particular video card.
// driverDesc:    String describing the driver
// monitor:       Handle to the video monitor used by this device (multimon
//                specific).  Devices that use different monitors on a 
//                multimon system report different values in this field.
//                Therefore, to test for a multimon system, an application 
//                should look for more than one different monitor handle in 
//                the list of D3DX devices.
// onPrimary:     Indicates if this device is on the primary monitor
//                (multimon specific).
//-------------------------------------------------------------------------
#define D3DX_DRIVERDESC_LENGTH    256

typedef struct _D3DX_DEVICEDESC
{
    DWORD       deviceIndex;  
    DWORD       hwLevel;
    GUID        ddGuid;       
    GUID        d3dDeviceGuid;   
    GUID        ddDeviceID;      
    char        driverDesc[D3DX_DRIVERDESC_LENGTH];          
    HMONITOR    monitor;
    BOOL        onPrimary;
} D3DX_DEVICEDESC;

///////////////////////////////////////////////////////////////////////////
// APIs:
///////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
    
//-------------------------------------------------------------------------
// D3DXInitialize: The very first call a D3DX app must make.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXInitialize();

//-------------------------------------------------------------------------
// D3DXUninitialize: The very last call a D3DX app must make.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXUninitialize();

//-------------------------------------------------------------------------
// D3DXGetDeviceCount: Returns the maximum number of D3DXdevices 
// ------------------  available.
//
// D3DXGetDeviceDescription: Lists the 2D and 3D capabilities of the devices. 
// ------------------------  Also, the various guids needed by ddraw and d3d.
//
// Params: 
//     [in] DWORD deviceIndex: Which device? Starts at 0.
//     [in] D3DX_DEVICEDESC* pd3dxDevice: Pointer to the D3DX_DEVICEDESC
//                                        structure to be filled in.
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetDeviceCount();

HRESULT WINAPI
    D3DXGetDeviceDescription(DWORD            deviceIndex, 
                             D3DX_DEVICEDESC* pd3dxDeviceDesc);

//-------------------------------------------------------------------------
// D3DXGetMaxNumVideoModes: Returns the maximum number of video-modes .
// -----------------------  
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [in]  DWORD flags: If D3DX_GVM_REFRESHRATE is set, then the refresh
//                        rates are not ignored.
//
// D3DXGetVideoMode:  Describes a particular video mode for this device
// ----------------
//
// Note:  These queries will simply give you a list of modes that the
//        display adapter tells DirectX that it supports.
//        There is no guarantee that D3DXCreateContext(Ex) will succeed 
//        with all listed video modes.  This is a fundamental limitation 
//        of the current DirectX architecture which D3DX cannot hide in 
//        any clean way.
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [in]  DWORD flags: If D3DX_GVM_REFRESHRATE is set, then the refresh
//                        rates are returned
//     [in]  DWORD which: Which VideoMode ? Starts at 0.
//     [out] D3DX_VIDMODEDESC* pModeList: Pointer to the D3DX_VIDMODEDESC
//                        structure that will be filled in.
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetMaxNumVideoModes(DWORD       deviceIndex, 
                            DWORD       flags);

HRESULT WINAPI
    D3DXGetVideoMode(DWORD             deviceIndex, 
                     DWORD             flags, 
                     DWORD             modeIndex, 
                     D3DX_VIDMODEDESC* pModeDesc);

#define D3DX_GVM_REFRESHRATE      0x00000001
//-------------------------------------------------------------------------
// D3DXGetMaxSurfaceFormats: Returns the maximum number of surface
// ------------------------  formats supported by the device at that
//                           video mode.
//
// D3DXGetSurfaceFormat: Describes one of the supported surface formats.
// --------------------- 
//
// Params:
//     [in]  DWORD  deviceIndex: The device being referred to.
//     [in]  D3DX_VIDMODEDESC* pDesc: The display mode at which the supported
//                                    surface formats are requested. If it is
//                                    NULL, the current display mode is 
//                                    assumed.
//     [in]  DWORD surfClassFlags: Required surface classes.  Only surface
//                                 formats which support all specified 
//                                 surface classes will be returned.  
//                                 (Multiple surface classes may be specified
//                                 using bitwise OR.) 
//     [in]  DWORD which: Which surface formats to retrieve. Starts at 0.
//     [out] D3DX_SURFACEFORMAT* pFormat: The surface format
//-------------------------------------------------------------------------
DWORD WINAPI 
    D3DXGetMaxSurfaceFormats(DWORD             deviceIndex, 
                             D3DX_VIDMODEDESC* pDesc,
                             DWORD             surfClassFlags);
HRESULT WINAPI
    D3DXGetSurfaceFormat(DWORD               deviceIndex,
                         D3DX_VIDMODEDESC*   pDesc,
                         DWORD               surfClassFlags,                   
                         DWORD               surfaceIndex, 
                         D3DX_SURFACEFORMAT* pFormat);


//-------------------------------------------------------------------------
// D3DXGetCurrentVideoMode: Retrieves the current video mode for this device.
// -------------------
//
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.
//     [out] D3DX_VIDMODEDESC* pVidMode: The current video mode
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXGetCurrentVideoMode(DWORD             deviceIndex, 
                            D3DX_VIDMODEDESC* pVidMode);

//-------------------------------------------------------------------------
// D3DXGetDeviceCaps: Lists all the capabilities of a device at a display 
//                    mode.
// ----------------
//
// Params:
//     [in]  DWORD  deviceIndex: The device being referred to.
//     [in]  D3DX_VIDMODEDESC* pDesc:  If this is NULL, we will return the 
//                                     caps at the current display mode of 
//                                     the device.
//     [out] D3DDEVICEDESC7* pD3DDeviceDesc7: D3D Caps ( NULL to ignore 
//                                              parameter)
//     [out] DDCAPS7* pDDHalCaps: DDraw HAL Caps (NULL to ignore parameter)
//     [out] DDCAPS7* pDDHelCaps: DDraw HEL Caps (NULL to ignore  paramter)
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXGetDeviceCaps(DWORD             deviceIndex, 
                      D3DX_VIDMODEDESC* pVidMode,
                      D3DDEVICEDESC7*   pD3DCaps,
                      DDCAPS*           pDDHALCaps,
                      DDCAPS*           pDDHELCaps);

//-------------------------------------------------------------------------
// D3DXCreateContext: Initializes the chosen device. It is the simplest init
// -----------------  function available.  Parameters are treated the same
//                    as the matching subset of parameters in 
//                    D3DXCreateContextEx, documented below.
//                    Remaining D3DXCreateContextEx parameters that are
//                    not present in D3DXCreateContext are treated as
//                    D3DX_DEFAULT.  Note that multimon is not supported
//                    with D3DXCreateContext.
//
// D3DXCreateContextEx: A more advanced function to initialize the device.
// -------------------  Also accepts D3DX_DEFAULT for most of the parameters
//                      and then will do what D3DXCreateContext did.
//
// Note: Do not expect D3DXCreateContext(Ex) to be fail-safe (as with any
//       API).  Supported device capablilites should be used as a guide
//       for choosing parameter values.  Keep in mind that there will 
//       inevitably be some combinations of parameters that just do not work.
// 
// Params:
//     [in]  DWORD deviceIndex: The device being referred to.   
//     [in]  DWORD flags: The valid flags are D3DX_CONTEXT_FULLSCREEN, and
//                        D3DX_CONTEXT_OFFSCREEN.  These flags cannot both
//                        be specified.  If no flags are specified, the
//                        context defaults to windowed mode.
//
//     [in]  HWND  hwnd: Device window.  See note.
//     [in]  HWND  hwndFocus: Window which receives keyboard messages from 
//                            the device window.  The device window should be 
//                            a child of focus window.  Useful for multimon 
//                            applications.  See note.
//     NOTE: 
//         windowed:   
//             hwnd must be a valid window.  hwndFocus must be NULL or 
//             D3DX_DEFAULT.
//
//         fullscreen: 
//             Either hwnd or hwndFocus must be a valid window.  (Both cannot
//             be NULL or D3DX_DEFAULT).  If hwnd is NULL or D3DX_DEFAULT, 
//             a default device window will be created as a child of hwndFocus.
//
//         offscreen:
//             Both hwnd and hwndFocus must be NULL or D3DX_DEFAULT
//
//     [in]  DWORD numColorBits: If D3DX_DEFAULT is passed for windowed mode,
//                               the current desktop's color depth is chosen.
//                               For full screen mode, D3DX_DEFAULT causes 16
//                               bit color to be used.                               
//     [in]  DWORD numAlphaBits: If D3DX_DEFAULT is passed, 0 is chosen.
//     [in]  DWORD numDepthbits: If D3DX_DEFAULT is passed,
//                               the highest available number of depth bits
//                               is chosen.  See note.
//     [in]  DWORD numStencilBits: If D3DX_DEFAULT is passed, the highest
//                                 available number of stencil bits is chosen.
//                                 See note.
//
//     NOTE: If both numDepthBits and numStencilBits are D3DX_DEFAULT,
//           D3DX first picks the highest available number of stencil
//           bits.  Then, for the chosen number of stencil bits, 
//           the highest available number of depth bits is chosen.
//           If only one of numStencilBits or numDepthBits 
//           is D3DX_DEFAULT, the highest number of bits available 
//           for this parameter is chosen out of only the formats
//           that support the number of bits requested for the
//           fixed parameter.
//
//     [in]  DWORD numBackBuffers: Number of back buffers, or D3DX_DEFAULT.
//                                 See note.
//
//     NOTE:
//        windowed: D3DX_DEFAULT means 1.  You must specify one back buffer.
//
//        fullscreen: D3DX_DEFAULT means 1.  Any number of back buffers can be
//            specified.
//
//        offscreen: D3DX_DEFAULT means 0.  You cannot specify additional back 
//            buffers.
//
//     [in]  DWORD width: Width, in pixels, or D3DX_DEFAULT.  See note.
//     [in]  DWORD height: Height, in pixels, or D3DX_DEFAULT.  See note.
//
//     NOTE: 
//        windowed: If either width or height is D3DX_DEFAULT, both values
//            default to the dimensions of the client area of hwnd.
//
//        fullscreen: If either width or height is D3DX_DEFAULT, width 
//            defaults to 640, and height defaults to 480.
//
//        offscreen: An error is returned if either width or height is 
//            D3DX_DEFAULT.
//
//     [in]  DWORD refreshRate: D3DX_DEFAULT means we let ddraw choose for 
//                              us.  Ignored for windowed and offscreen modes.
//     [out] LPD3DXCONTEXT* ppCtx: This is the Context object that is used for
//                                 rendering on that device.
//
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateContext(DWORD          deviceIndex,  
                      DWORD          flags,
                      HWND           hwnd,
                      DWORD          width, 
                      DWORD          height,
                      LPD3DXCONTEXT* ppCtx);

HRESULT WINAPI
    D3DXCreateContextEx(DWORD          deviceIndex,  
                        DWORD          flags,
                        HWND           hwnd,
                        HWND           hwndFocus, 
                        DWORD          numColorBits,
                        DWORD          numAlphaBits,
                        DWORD          numDepthbits,
                        DWORD          numStencilBits,
                        DWORD          numBackBuffers,
                        DWORD          width, 
                        DWORD          height,
                        DWORD          refreshRate,
                        LPD3DXCONTEXT* ppCtx);

// The D3DXCreateContext(Ex) flags are:
#define D3DX_CONTEXT_FULLSCREEN  0x00000001
#define D3DX_CONTEXT_OFFSCREEN   0x00000002

//-------------------------------------------------------------------------
// D3DXGetErrorString: Prints out the error string given an hresult. Prints
// ------------------  Win32 as well as DX6 error messages besides the D3DX
//                     messages.
//
// Params:
//     [in]  HRESULT hr: The error code to be deciphered.
//     [in]  DWORD strLength: Length of the string passed in.
//     [out] LPSTR pStr:  The string output. This string of appropriate
//                       size needs to be passed in.
//-------------------------------------------------------------------------
void WINAPI
    D3DXGetErrorString(HRESULT hr, 
                       DWORD   strLength, 
                       LPSTR   pStr);

//-------------------------------------------------------------------------
// D3DXMakeDDPixelFormat: Fills in a DDPIXELFORMAT structure based on the 
// ---------------------   D3DX surface format requested.
//
// Params:
//     [in]  D3DX_SURFACEFORMAT d3dxFormat: Surface format.
//     [out] DDPIXELFORMAT*     pddpf:      Pixel format matching the given
//                                          surface format.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXMakeDDPixelFormat(D3DX_SURFACEFORMAT d3dxFormat, 
                          DDPIXELFORMAT*     pddpf);

//-------------------------------------------------------------------------
// D3DXMakeSurfaceFormat: Determines the surface format corresponding to 
// ---------------------  a given DDPIXELFORMAT. 
//
// Params:
//     [in]  DDPIXELFORMAT* pddpf: Pixel format.
// Return Value:
//     D3DX_SURFACEFORMAT: Surface format matching the given pixel format.
//                         D3DX_SF_UNKNOWN if the format is not supported
//-------------------------------------------------------------------------
D3DX_SURFACEFORMAT WINAPI
    D3DXMakeSurfaceFormat(DDPIXELFORMAT* pddpf);

#ifdef __cplusplus
}
#endif //__cplusplus    

///////////////////////////////////////////////////////////////////////////
// Interfaces:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// ID3DXContext interface: 
//
// This encapsulates all the stuff that the app might 
// want to do at initialization time and any global control over d3d and 
// ddraw.
//-------------------------------------------------------------------------


DECLARE_INTERFACE_(ID3DXContext, IUnknown)
{
    //
    // IUnknown methods 
    //
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // Get the DDraw and Direct3D objects to call DirectDraw or
    // Direct3D Immediate Mode functions. 
    // If the objects don't exist (because they have not
    // been created for some reason) NULL is returned.
    // All the objects returned in the following Get* functions
    // are addref'ed. It is the application's responsibility to
    // release them when no longer needed.
    STDMETHOD_(LPDIRECTDRAW7,GetDD)(THIS) PURE;
    STDMETHOD_(LPDIRECT3D7,GetD3D)(THIS) PURE;
    STDMETHOD_(LPDIRECT3DDEVICE7,GetD3DDevice)(THIS) PURE;

    // Get the various buffers that get created at the init time
    // These are addref'ed as well. It is the application's responsibility
    // to release them before the app quits or when it needs a resize.
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetPrimary)(THIS) PURE;
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetZBuffer)(THIS) PURE;
    STDMETHOD_(LPDIRECTDRAWSURFACE7,GetBackBuffer)(THIS_ DWORD which) PURE;

    // Get the associated window handles 
    STDMETHOD_(HWND,GetWindow)(THIS) PURE;
    STDMETHOD_(HWND,GetFocusWindow)(THIS) PURE;

    // 
    // Various Get methods, in case the user had specified default
    // parameters
    //
    STDMETHOD(GetDeviceIndex)(THIS_ 
                              LPDWORD pDeviceIndex, 
                              LPDWORD pHwLevel) PURE;

    STDMETHOD_(DWORD, GetNumBackBuffers)(THIS) PURE;

    STDMETHOD(GetNumBits)(THIS_
                          LPDWORD pColorBits, 
                          LPDWORD pDepthBits,
                          LPDWORD pAlphaBits, 
                          LPDWORD pStencilBits) PURE;

    STDMETHOD(GetBufferSize)(THIS_ 
                             LPDWORD pWidth, 
                             LPDWORD pHeight) PURE;

    // Get the flags that were used to create this context
    STDMETHOD_(DWORD, GetCreationFlags)(THIS) PURE;
    STDMETHOD_(DWORD, GetRefreshRate)(THIS) PURE;
    
    // Restoring surfaces in case stuff is lost
    STDMETHOD(RestoreSurfaces)(THIS) PURE;
    
    // Resize all the buffers to the new width and height
    STDMETHOD(Resize)(THIS_ DWORD width, DWORD height) PURE;

    // Update the frame using a flip or a blit,
    // If the D3DX_UPDATE_NOVSYNC flag is set, blit is used if the 
    // driver cannot flip without waiting for vsync in full-screen mode.
    STDMETHOD(UpdateFrame)(THIS_ DWORD flags) PURE;

    // Render a string at the specified coordinates, with the specified 
    // colour. This is only provided as a convenience for 
    // debugging/information during development.
    // topLeftX and topLeftY represent the location of the top left corner
    // of the string, on the render target.  
    // The coordinate and color parameters each have a range of 0.0-1.0
    STDMETHOD(DrawDebugText)(THIS_
                             float topLeftX, 
                             float topLeftY,
                             D3DCOLOR color,
                             LPSTR pString) PURE;

    // Clears to the current viewport
    // The following are the valid flags:
    // D3DCLEAR_TARGET  (to clear the render target )
    // D3DCLEAR_ZBUFFER (to clear the depth-buffer )
    // D3DCLEAR_STENCIL (to clear the stencil-buffer )
    STDMETHOD(Clear)(THIS_ DWORD ClearFlags) PURE;

    STDMETHOD(SetClearColor)(THIS_ D3DCOLOR color ) PURE;
    STDMETHOD(SetClearDepth)(THIS_ float z) PURE;
    STDMETHOD(SetClearStencil)(THIS_ DWORD stencil) PURE;
};


//-------------------------------------------------------------------------
// Flags for Update member function:
//

// Flag to indicate that blit should be used instead of a flip
// for full-screen rendering.
#define D3DX_UPDATE_NOVSYNC (1<<0)

///////////////////////////////////////////////////////////////////////////
// Texturing APIs:
///////////////////////////////////////////////////////////////////////////
#ifdef __cplusplus
extern "C" {
#endif //__cplusplus
    
//-------------------------------------------------------------------------
// D3DXCheckTextureRequirements: Return information about texture creation 
// ----------------------------  (used by CreateTexture, CreateTextureFromFile
//                                and CreateCubeMapTexture)
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported.
//  pWidth
//      width in pixels or NULL 
//      returns corrected width
//  pHeight       
//      height in pixels or NULL
//      returns corrected height
//  pPixelFormat
//      surface format 
//      returns best match to input format
//
//  Notes: 1. Unless the flags is set to specifically prevent creating 
//            mipmaps, mipmaps are generated all the way till 1x1 surface.
//         2. width, height and pixelformat are altered based on available 
//            hardware. For example:
//              a. Texture dimensions may be required to be powers of 2
//              b. We may require width == height for some devices
//              c. If PixelFormat is unavailable, a best fit is made
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCheckTextureRequirements( LPDIRECT3DDEVICE7     pd3dDevice,
                                  LPDWORD               pFlags, 
                                  LPDWORD               pWidth,  
                                  LPDWORD               pHeight,  
                                  D3DX_SURFACEFORMAT*   pPixelFormat);

//-------------------------------------------------------------------------
// D3DXCreateTexture: Create an empty texture object
// -----------------
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  pWidth
//      width in pixels; 0 or NULL is unacceptable
//      returns corrected width
//  pHeight       
//      height in pixels; 0 or NULL is unacceptable
//      returns corrected height
//  pPixelFormat
//      surface format. D3DX_DEFAULT is unacceptable.
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      The ddraw surface that will be created
//  pNumMipMaps
//      the number of mipmaps actually generated
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateTexture( LPDIRECT3DDEVICE7     pd3dDevice,
                       LPDWORD               pFlags, 
                       LPDWORD               pWidth,  
                       LPDWORD               pHeight,  
                       D3DX_SURFACEFORMAT*   pPixelFormat,
                       LPDIRECTDRAWPALETTE   pDDPal,
                       LPDIRECTDRAWSURFACE7* ppDDSurf,
                       LPDWORD               pNumMipMaps);

//-------------------------------------------------------------------------
// D3DXCreateCubeMapTexture: Create blank cube-map texture
// ------------------------
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  cubefaces
//      allows specification of which faces of the cube-map to generate.
//      D3DX_DEFAULT, 0, and DDSCAPS2_CUBEMAP_ALLFACES all mean
//      "create all 6 faces of the cubemap". Any combination of
//      DDSCAPS2_CUBEMAP_POSITIVEX, DDSCAPS2_CUBEMAP_NEGATIVEX,
//      DDSCAPS2_CUBEMAP_POSITIVEY, DDSCAPS2_CUBEMAP_NEGATIVEY,
//      DDSCAPS2_CUBEMAP_POSITIVEZ, or DDSCAPS2_CUBEMAP_NEGATIVEZ, is
//      valid.
//  colorEmptyFaces
//      allows specification of the color to use for the faces that were not
//      specified in the cubefaces parameter.
//  pWidth
//      width in pixels; 0 or NULL is unacceptable
//      returns corrected width
//  pHeight       
//      height in pixels; 0 or NULL is unacceptable
//      returns corrected height
//  pPixelFormat
//      surface format. D3DX_DEFAULT is unacceptable.
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      the ddraw surface that will be created
//  pNumMipMaps
//      the number of mipmaps generated for a particular face of the 
//      cubemap.
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateCubeMapTexture( LPDIRECT3DDEVICE7     pd3dDevice,
                              LPDWORD               pFlags, 
                              DWORD                 cubefaces,
                              D3DCOLOR              colorEmptyFaces,
                              LPDWORD               pWidth,  
                              LPDWORD               pHeight,  
                              D3DX_SURFACEFORMAT    *pPixelFormat,
                              LPDIRECTDRAWPALETTE   pDDPal,
                              LPDIRECTDRAWSURFACE7* ppDDSurf,
                              LPDWORD               pNumMipMaps);


//-------------------------------------------------------------------------
// D3DXCreateTextureFromFile: Create a texture object from a file or from the 
// -------------------------  resource. Only BMP and DIB are supported from the
//                            resource portion of the executable.
//
// Parameters:
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
//  pFlags   
//      allows specification of D3DX_TEXTURE_NOMIPMAP
//      D3DX_TEXTURE_NOMIPMAP may be returned in the case where mipmap creation 
//      is not supported. Additionally, D3DX_TEXTURE_STAGE<n> can be specified
//      to indicate which texture stage the texture is for e.g. 
//      D3D_TEXTURE_STAGE1 indicates that the texture is for use with texture 
//      stage one. Stage Zero is the default if no TEXTURE_STAGE flags are
//      set.
//  pWidth  
//      Width in pixels. If 0 or D3DX_DEFAULT, the width will be taken 
//      from the file
//      returns corrected width
//  pHeight   
//      Height in pixels. If 0 or D3DX_DEFAULT, the height will be taken 
//      from the file
//      returns corrected height
//  pPixelFormat
//      If D3DX_SF_UNKNOWN is passed in, pixel format closest to the bitmap 
//      will be chosen
//      returns actual format that was used
//  pDDPal
//      DDraw palette that is set (if present) on paletted surfaces.
//      It is ignored even if it is set, for non-paletted surfaces.
//  ppDDSurf
//      The ddraw surface that will be created.
//  pNumMipMaps
//      The number of mipmaps generated.
//  pSrcName
//      File name. BMP, DIB, DDS, are supported. 
//      
//      TGA is supported for the following cases: 16, 24, 32bpp direct color and 8bpp palettized. 
//      Also, 8, 16bpp grayscale is supported. RLE versions of the above 
//      TGA formats are also supported. ColorKey and Premultiplied Alpha 
//      are not currently supported for TGA files.
//      returns created format
//
//  Notes: See notes for D3DXCheckTextureRequirements. 
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateTextureFromFile( LPDIRECT3DDEVICE7     pd3dDevice,
                               LPDWORD               pFlags, 
                               LPDWORD               pWidth,  
                               LPDWORD               pHeight,  
                               D3DX_SURFACEFORMAT*   pPixelFormat,
                               LPDIRECTDRAWPALETTE   pDDPal,
                               LPDIRECTDRAWSURFACE7* ppDDSurf,
                               LPDWORD               pNumMipMaps,
                               LPSTR                 pSrcName,
                               D3DX_FILTERTYPE       filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromFile: Load from a file into a mipmap level. Doing the 
// -----------------------  necessary color conversion and rescaling. File
//                          format support is identical to 
//                          D3DXCreateTextureFromFile's.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pSrcName
//      File name. BMP, DIB, DDS, are supported. 
//      For details on TGA support, refer to the comments for 
//      D3DXCreateTextureFromFile
// pSrcRect
//      the source rectangle or null (whole surface)
// pDestRect
//      the destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromFile( LPDIRECT3DDEVICE7    pd3dDevice,
                             LPDIRECTDRAWSURFACE7 pTexture,
                             DWORD                mipMapLevel,
                             LPSTR                pSrcName, 
                             RECT*                pSrcRect, 
                             RECT*                pDestRect,
                             D3DX_FILTERTYPE      filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromSurface: Load from a DDraw Surface into a mipmap level. 
// --------------------------  Doing the necessary color conversion.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pSurfaceSrc
//      the source surface
// pSrcRect
//      the source rectangle or null (whole surface)
// pDestRect
//      the destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromSurface( LPDIRECT3DDEVICE7    pd3dDevice,
                                LPDIRECTDRAWSURFACE7 pTexture,
                                DWORD                mipMapLevel,
                                LPDIRECTDRAWSURFACE7 pSurfaceSrc, 
                                RECT*                pSrcRect, 
                                RECT*                pDestRect,
                                D3DX_FILTERTYPE      filterType);

//-------------------------------------------------------------------------
// D3DXLoadTextureFromMemory: Load a mip level from memory. Doing the necessary
// -------------------------  color conversion.
//
//  pd3dDevice
//      The D3D device with which the texture is going to be used.
// pTexture
//      a pointer to a DD7Surface which was created with either 
//      CreateTextureFromFile or CreateTexture.
// mipMapLevel
//      indicates mipmap level
//      Note: 
//          1. Error if mipmap level doesn't exist
//          2. If D3DX_DEFAULT and equal number of mipmap levels exist
//             then all the source mip-levels are loaded
//          3. If the source has mipmaps and the dest doesn't, use the top one
//          4. If the dest has miplevels and source doesn't, we expand
//          5. If there are unequal numbers of miplevels, we expand
// pMemory
//      pointer to source memory from which the texture will be loaded
// pDDPal
//      DirectDraw Palette, that the app passes in optionally if the memory is 
//      supposed to be paletteized.
// srcPixelFormat
//      PixelFormat of the source.
// srcPitch
//      The pitch of the memory or D3DX_DEFAULT (based on srcPixelFormat)
// pDestRect
//      The destination rectangle or null (whole surface)
// filterType 
//      filter used for mipmap generation
// 
// Assumptions: The source (memory) is loaded in full
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXLoadTextureFromMemory( LPDIRECT3DDEVICE7    pd3dDevice, 
                               LPDIRECTDRAWSURFACE7 pTexture,
                               DWORD                mipMapLevel, 
                               LPVOID               pMemory,
                               LPDIRECTDRAWPALETTE  pDDPal,
                               D3DX_SURFACEFORMAT   srcPixelFormat,
                               DWORD                srcPitch,
                               RECT*                pDestRect,
                               D3DX_FILTERTYPE      filterType);

#ifdef __cplusplus
}
#endif //__cplusplus    

//-------------------------------------------------------------------------
// Flags for texture create functions; applies to 
// D3DXCreateTexture, D3DXCreateCubeMapTexture and D3DXCreateTextureFromFile.
//

// Flag to indicate that mipmap generation is not desired.
#define D3DX_TEXTURE_NOMIPMAP  (1 << 8)

// Flags to indicate which texture stage the texture is
// intended for use with. Specifying the stage is necessary at
// texture creation time for HW devices that expose the
// D3DDEVCAPS_SEPARATETEXTUREMEMORIES bit in their D3DDEVICEDESC
// structure.
#define D3DX_TEXTURE_STAGE0    (0)
#define D3DX_TEXTURE_STAGE1    (1)
#define D3DX_TEXTURE_STAGE2    (2)
#define D3DX_TEXTURE_STAGE3    (3)
#define D3DX_TEXTURE_STAGE4    (4)
#define D3DX_TEXTURE_STAGE5    (5)
#define D3DX_TEXTURE_STAGE6    (6)
#define D3DX_TEXTURE_STAGE7    (7)

// Mask to extract the texture stage value out of the flags to
// the texture create functions.
#define D3DX_TEXTURE_STAGE_MASK (0x7)

#endif //__D3DXCORE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxmath.inl ===
//////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxmath.inl
//  Content:    D3DX math inline functions
//
//////////////////////////////////////////////////////////////////////////////

#ifndef __D3DXMATH_INL__
#define __D3DXMATH_INL__


//===========================================================================
//
// Inline Class Methods
//
//===========================================================================

#ifdef __cplusplus

//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE 
D3DXVECTOR2::D3DXVECTOR2( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
}

D3DXINLINE 
D3DXVECTOR2::D3DXVECTOR2( float fx, float fy )
{
    x = fx;
    y = fy;
}

// casting
D3DXINLINE 
D3DXVECTOR2::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR2::operator const float* () const
{
    return (const float *) &x;
}

// assignment operators
D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator += ( const D3DXVECTOR2& v )
{
    x += v.x;
    y += v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator -= ( const D3DXVECTOR2& v )
{
    x -= v.x;
    y -= v.y;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator *= ( float f )
{
    x *= f;
    y *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR2& 
D3DXVECTOR2::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    return *this;
}

// unary operators
D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator - () const
{
    return D3DXVECTOR2(-x, -y);
}

// binary operators
D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator + ( const D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x + v.x, y + v.y);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator - ( const D3DXVECTOR2& v ) const
{
    return D3DXVECTOR2(x - v.x, y - v.y);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator * ( float f ) const
{
    return D3DXVECTOR2(x * f, y * f);
}

D3DXINLINE D3DXVECTOR2 
D3DXVECTOR2::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR2(x * fInv, y * fInv);
}


D3DXINLINE D3DXVECTOR2 
operator * ( float f, const D3DXVECTOR2& v )
{
    return D3DXVECTOR2(f * v.x, f * v.y);
}

D3DXINLINE BOOL 
D3DXVECTOR2::operator == ( const D3DXVECTOR2& v ) const
{
    return x == v.x && y == v.y;
}

D3DXINLINE BOOL 
D3DXVECTOR2::operator != ( const D3DXVECTOR2& v ) const
{
    return x != v.x || y != v.y;
}




//--------------------------
// 3D Vector
//--------------------------
D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
}

D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( const D3DVECTOR& v )
{
    x = v.x;
    y = v.y;
    z = v.z;
}

D3DXINLINE 
D3DXVECTOR3::D3DXVECTOR3( float fx, float fy, float fz )
{
    x = fx;
    y = fy;
    z = fz;
}


// casting
D3DXINLINE 
D3DXVECTOR3::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR3::operator const float* () const
{
    return (const float *) &x;
}


D3DXINLINE 
D3DXVECTOR3::operator D3DVECTOR* ()
{
    return (D3DVECTOR *) &x;
}

D3DXINLINE 
D3DXVECTOR3::operator const D3DVECTOR* () const
{
    return (const D3DVECTOR *) &x;
}


D3DXINLINE 
D3DXVECTOR3::operator D3DVECTOR& ()
{
    return *((D3DVECTOR *) &x);
}

D3DXINLINE 
D3DXVECTOR3::operator const D3DVECTOR& () const
{
    return *((const D3DVECTOR *) &x);
}


// assignment operators
D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator += ( const D3DXVECTOR3& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator -= ( const D3DXVECTOR3& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR3& 
D3DXVECTOR3::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator - () const
{
    return D3DXVECTOR3(-x, -y, -z);
}


// binary operators
D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator + ( const D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator - ( const D3DXVECTOR3& v ) const
{
    return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator * ( float f ) const
{
    return D3DXVECTOR3(x * f, y * f, z * f);
}

D3DXINLINE D3DXVECTOR3 
D3DXVECTOR3::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR3(x * fInv, y * fInv, z * fInv);
}


D3DXINLINE D3DXVECTOR3 
operator * ( float f, const struct D3DXVECTOR3& v )
{
    return D3DXVECTOR3(f * v.x, f * v.y, f * v.z);
}


D3DXINLINE BOOL 
D3DXVECTOR3::operator == ( const D3DXVECTOR3& v ) const
{
    return x == v.x && y == v.y && z == v.z;
}

D3DXINLINE BOOL 
D3DXVECTOR3::operator != ( const D3DXVECTOR3& v ) const
{
    return x != v.x || y != v.y || z != v.z;
}



//--------------------------
// 4D Vector
//--------------------------
D3DXINLINE 
D3DXVECTOR4::D3DXVECTOR4( const float *pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE 
D3DXVECTOR4::D3DXVECTOR4( float fx, float fy, float fz, float fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE 
D3DXVECTOR4::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXVECTOR4::operator const float* () const
{
    return (const float *) &x;
}


// assignment operators
D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator += ( const D3DXVECTOR4& v )
{
    x += v.x;
    y += v.y;
    z += v.z;
    w += v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator -= ( const D3DXVECTOR4& v )
{
    x -= v.x;
    y -= v.y;
    z -= v.z;
    w -= v.w;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXVECTOR4& 
D3DXVECTOR4::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator + () const
{
    return *this;
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator - () const
{
    return D3DXVECTOR4(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator + ( const D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x + v.x, y + v.y, z + v.z, w + v.w);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator - ( const D3DXVECTOR4& v ) const
{
    return D3DXVECTOR4(x - v.x, y - v.y, z - v.z, w - v.w);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator * ( float f ) const
{
    return D3DXVECTOR4(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXVECTOR4 
D3DXVECTOR4::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXVECTOR4(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXVECTOR4 
operator * ( float f, const D3DXVECTOR4& v )
{
    return D3DXVECTOR4(f * v.x, f * v.y, f * v.z, f * v.w);
}


D3DXINLINE BOOL 
D3DXVECTOR4::operator == ( const D3DXVECTOR4& v ) const
{
    return x == v.x && y == v.y && z == v.z && w == v.w;
}

D3DXINLINE BOOL 
D3DXVECTOR4::operator != ( const D3DXVECTOR4& v ) const
{
    return x != v.x || y != v.y || z != v.z || w != v.w;
}


//--------------------------
// Matrix
//--------------------------
D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    memcpy(&m00, pf, sizeof(D3DXMATRIX));
}

D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( const D3DMATRIX& mat )
{
    memcpy(&m00, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE 
D3DXMATRIX::D3DXMATRIX( float f00, float f01, float f02, float f03,
                        float f10, float f11, float f12, float f13,
                        float f20, float f21, float f22, float f23,
                        float f30, float f31, float f32, float f33 )
{
    m00 = f00; m01 = f01; m02 = f02; m03 = f03;
    m10 = f10; m11 = f11; m12 = f12; m13 = f13;
    m20 = f20; m21 = f21; m22 = f22; m23 = f23;
    m30 = f30; m31 = f31; m32 = f32; m33 = f33;
}



// access grants
D3DXINLINE float& 
D3DXMATRIX::operator () ( UINT iRow, UINT iCol )
{
    return m[iRow][iCol];
}

D3DXINLINE float  
D3DXMATRIX::operator () ( UINT iRow, UINT iCol ) const
{
    return m[iRow][iCol];
}


// casting operators
D3DXINLINE 
D3DXMATRIX::operator float* ()
{
    return (float *) &m00;
}

D3DXINLINE 
D3DXMATRIX::operator const float* () const
{
    return (const float *) &m00;
}


D3DXINLINE 
D3DXMATRIX::operator D3DMATRIX* ()
{
    return (D3DMATRIX *) &m00;
}

D3DXINLINE 
D3DXMATRIX::operator const D3DMATRIX* () const
{
    return (const D3DMATRIX *) &m00;
}


D3DXINLINE 
D3DXMATRIX::operator D3DMATRIX& ()
{
    return *((D3DMATRIX *) &m00);
}

D3DXINLINE 
D3DXMATRIX::operator const D3DMATRIX& () const
{
    return *((const D3DMATRIX *) &m00);
}


// assignment operators
D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator *= ( const D3DXMATRIX& mat )
{
    D3DXMatrixMultiply(this, this, &mat);
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator += ( const D3DXMATRIX& mat )
{
    m00 += mat.m00; m01 += mat.m01; m02 += mat.m02; m03 += mat.m03;
    m10 += mat.m10; m11 += mat.m11; m12 += mat.m12; m13 += mat.m13;
    m20 += mat.m20; m21 += mat.m21; m22 += mat.m22; m23 += mat.m23;
    m30 += mat.m30; m31 += mat.m31; m32 += mat.m32; m33 += mat.m33;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator -= ( const D3DXMATRIX& mat )
{
    m00 -= mat.m00; m01 -= mat.m01; m02 -= mat.m02; m03 -= mat.m03;
    m10 -= mat.m10; m11 -= mat.m11; m12 -= mat.m12; m13 -= mat.m13;
    m20 -= mat.m20; m21 -= mat.m21; m22 -= mat.m22; m23 -= mat.m23;
    m30 -= mat.m30; m31 -= mat.m31; m32 -= mat.m32; m33 -= mat.m33;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator *= ( float f )
{
    m00 *= f; m01 *= f; m02 *= f; m03 *= f;
    m10 *= f; m11 *= f; m12 *= f; m13 *= f;
    m20 *= f; m21 *= f; m22 *= f; m23 *= f;
    m30 *= f; m31 *= f; m32 *= f; m33 *= f;
    return *this;
}

D3DXINLINE D3DXMATRIX& 
D3DXMATRIX::operator /= ( float f )
{
    float fInv = 1.0f / f;
    m00 *= fInv; m01 *= fInv; m02 *= fInv; m03 *= fInv;
    m10 *= fInv; m11 *= fInv; m12 *= fInv; m13 *= fInv;
    m20 *= fInv; m21 *= fInv; m22 *= fInv; m23 *= fInv;
    m30 *= fInv; m31 *= fInv; m32 *= fInv; m33 *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator + () const
{
    return *this;
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator - () const
{
    return D3DXMATRIX(-m00, -m01, -m02, -m03,
                      -m10, -m11, -m12, -m13,
                      -m20, -m21, -m22, -m23,
                      -m30, -m31, -m32, -m33);
}


// binary operators
D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator * ( const D3DXMATRIX& mat ) const
{
    D3DXMATRIX matT;
    D3DXMatrixMultiply(&matT, this, &mat);
    return matT;
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator + ( const D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(m00 + mat.m00, m01 + mat.m01, m02 + mat.m02, m03 + mat.m03, 
                      m10 + mat.m10, m11 + mat.m11, m12 + mat.m12, m13 + mat.m13, 
                      m20 + mat.m20, m21 + mat.m21, m22 + mat.m22, m23 + mat.m23, 
                      m30 + mat.m30, m31 + mat.m31, m32 + mat.m32, m33 + mat.m33);
}    

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator - ( const D3DXMATRIX& mat ) const
{
    return D3DXMATRIX(m00 - mat.m00, m01 - mat.m01, m02 - mat.m02, m03 - mat.m03, 
                      m10 - mat.m10, m11 - mat.m11, m12 - mat.m12, m13 - mat.m13, 
                      m20 - mat.m20, m21 - mat.m21, m22 - mat.m22, m23 - mat.m23, 
                      m30 - mat.m30, m31 - mat.m31, m32 - mat.m32, m33 - mat.m33);
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator * ( float f ) const
{
    return D3DXMATRIX(m00 * f, m01 * f, m02 * f, m03 * f, 
                      m10 * f, m11 * f, m12 * f, m13 * f, 
                      m20 * f, m21 * f, m22 * f, m23 * f, 
                      m30 * f, m31 * f, m32 * f, m33 * f);
}

D3DXINLINE D3DXMATRIX 
D3DXMATRIX::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXMATRIX(m00 * fInv, m01 * fInv, m02 * fInv, m03 * fInv, 
                      m10 * fInv, m11 * fInv, m12 * fInv, m13 * fInv, 
                      m20 * fInv, m21 * fInv, m22 * fInv, m23 * fInv, 
                      m30 * fInv, m31 * fInv, m32 * fInv, m33 * fInv);
}


D3DXINLINE D3DXMATRIX 
operator * ( float f, const D3DXMATRIX& mat )
{
    return D3DXMATRIX(f * mat.m00, f * mat.m01, f * mat.m02, f * mat.m03, 
                      f * mat.m10, f * mat.m11, f * mat.m12, f * mat.m13, 
                      f * mat.m20, f * mat.m21, f * mat.m22, f * mat.m23, 
                      f * mat.m30, f * mat.m31, f * mat.m32, f * mat.m33);
}


D3DXINLINE BOOL 
D3DXMATRIX::operator == ( const D3DXMATRIX& mat ) const
{
    return 0 == memcmp(this, &mat, sizeof(D3DXMATRIX));
}

D3DXINLINE BOOL 
D3DXMATRIX::operator != ( const D3DXMATRIX& mat ) const
{
    return 0 != memcmp(this, &mat, sizeof(D3DXMATRIX));
}



//--------------------------
// Quaternion
//--------------------------

D3DXINLINE 
D3DXQUATERNION::D3DXQUATERNION( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    x = pf[0];
    y = pf[1];
    z = pf[2];
    w = pf[3];
}

D3DXINLINE 
D3DXQUATERNION::D3DXQUATERNION( float fx, float fy, float fz, float fw )
{
    x = fx;
    y = fy;
    z = fz;
    w = fw;
}


// casting
D3DXINLINE 
D3DXQUATERNION::operator float* ()
{
    return (float *) &x;
}

D3DXINLINE 
D3DXQUATERNION::operator const float* () const
{
    return (const float *) &x;
}


// assignment operators
D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator += ( const D3DXQUATERNION& q )
{
    x += q.x;
    y += q.y;
    z += q.z;
    w += q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator -= ( const D3DXQUATERNION& q )
{
    x -= q.x;
    y -= q.y;
    z -= q.z;
    w -= q.w;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator *= ( const D3DXQUATERNION& q )
{
    D3DXQuaternionMultiply(this, this, &q);
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator *= ( float f )
{
    x *= f;
    y *= f;
    z *= f;
    w *= f;
    return *this;
}

D3DXINLINE D3DXQUATERNION& 
D3DXQUATERNION::operator /= ( float f )
{
    float fInv = 1.0f / f;
    x *= fInv;
    y *= fInv;
    z *= fInv;
    w *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXQUATERNION  
D3DXQUATERNION::operator + () const
{
    return *this;
}

D3DXINLINE D3DXQUATERNION  
D3DXQUATERNION::operator - () const
{
    return D3DXQUATERNION(-x, -y, -z, -w);
}


// binary operators
D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator + ( const D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x + q.x, y + q.y, z + q.z, w + q.w);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator - ( const D3DXQUATERNION& q ) const
{
    return D3DXQUATERNION(x - q.x, y - q.y, z - q.z, w - q.w);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator * ( const D3DXQUATERNION& q ) const
{
    D3DXQUATERNION qT;
    D3DXQuaternionMultiply(&qT, this, &q);
    return qT;
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator * ( float f ) const
{
    return D3DXQUATERNION(x * f, y * f, z * f, w * f);
}

D3DXINLINE D3DXQUATERNION 
D3DXQUATERNION::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXQUATERNION(x * fInv, y * fInv, z * fInv, w * fInv);
}


D3DXINLINE D3DXQUATERNION 
operator * (float f, const D3DXQUATERNION& q )
{
    return D3DXQUATERNION(f * q.x, f * q.y, f * q.z, f * q.w);
}


D3DXINLINE BOOL 
D3DXQUATERNION::operator == ( const D3DXQUATERNION& q ) const
{
    return x == q.x && y == q.y && z == q.z && w == q.w;
}

D3DXINLINE BOOL 
D3DXQUATERNION::operator != ( const D3DXQUATERNION& q ) const
{
    return x != q.x || y != q.y || z != q.z || w != q.w;
}



//--------------------------
// Plane
//--------------------------

D3DXINLINE 
D3DXPLANE::D3DXPLANE( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    a = pf[0];
    b = pf[1];
    c = pf[2];
    d = pf[3];
}

D3DXINLINE 
D3DXPLANE::D3DXPLANE( float fa, float fb, float fc, float fd )
{
    a = fa;
    b = fb;
    c = fc;
    d = fd;
}


// casting
D3DXINLINE 
D3DXPLANE::operator float* ()
{
    return (float *) &a;
}

D3DXINLINE 
D3DXPLANE::operator const float* () const
{
    return (const float *) &a;
}


// unary operators
D3DXINLINE D3DXPLANE 
D3DXPLANE::operator + () const
{
    return *this;
}

D3DXINLINE D3DXPLANE 
D3DXPLANE::operator - () const
{
    return D3DXPLANE(-a, -b, -c, -d);
}


// binary operators
D3DXINLINE BOOL 
D3DXPLANE::operator == ( const D3DXPLANE& p ) const
{
    return a == p.a && b == p.b && c == p.c && d == p.d;
}

D3DXINLINE BOOL 
D3DXPLANE::operator != ( const D3DXPLANE& p ) const
{
    return a != p.a || b != p.b || c != p.c || d != p.d;
}




//--------------------------
// Color
//--------------------------

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( DWORD dw )
{
    const float f = 1.0f / 255.0f;
    r = f * (float) (unsigned char) (dw >> 16);
    g = f * (float) (unsigned char) (dw >>  8);
    b = f * (float) (unsigned char) (dw >>  0);
    a = f * (float) (unsigned char) (dw >> 24);
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( const float* pf )
{
#ifdef D3DX_DEBUG
    if(!pf)
        return;
#endif

    r = pf[0];
    g = pf[1];
    b = pf[2];
    a = pf[3];
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( const D3DCOLORVALUE& c )
{
    r = c.r;
    g = c.g;
    b = c.b;
    a = c.a;
}

D3DXINLINE 
D3DXCOLOR::D3DXCOLOR( float fr, float fg, float fb, float fa )
{
    r = fr;
    g = fg;
    b = fb;
    a = fa;
}


// casting
D3DXINLINE 
D3DXCOLOR::operator DWORD () const
{
    DWORD dwR = r >= 1.0f ? 0xff : r <= 0.0f ? 0x00 : (DWORD) (r * 255.0f + 0.5f);
    DWORD dwG = g >= 1.0f ? 0xff : g <= 0.0f ? 0x00 : (DWORD) (g * 255.0f + 0.5f);
    DWORD dwB = b >= 1.0f ? 0xff : b <= 0.0f ? 0x00 : (DWORD) (b * 255.0f + 0.5f);
    DWORD dwA = a >= 1.0f ? 0xff : a <= 0.0f ? 0x00 : (DWORD) (a * 255.0f + 0.5f);

    return (dwA << 24) | (dwR << 16) | (dwG << 8) | dwB;
}


D3DXINLINE 
D3DXCOLOR::operator float * ()
{
    return (float *) &r;
}

D3DXINLINE 
D3DXCOLOR::operator const float * () const
{
    return (const float *) &r;
}


D3DXINLINE 
D3DXCOLOR::operator D3DCOLORVALUE * ()
{
    return (D3DCOLORVALUE *) &r;
}

D3DXINLINE 
D3DXCOLOR::operator const D3DCOLORVALUE * () const
{
    return (const D3DCOLORVALUE *) &r;
}


D3DXINLINE 
D3DXCOLOR::operator D3DCOLORVALUE& ()
{
    return *((D3DCOLORVALUE *) &r);
}

D3DXINLINE 
D3DXCOLOR::operator const D3DCOLORVALUE& () const
{
    return *((const D3DCOLORVALUE *) &r);
}


// assignment operators
D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator += ( const D3DXCOLOR& c )
{
    r += c.r;
    g += c.g;
    b += c.b;
    a += c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator -= ( const D3DXCOLOR& c )
{
    r -= c.r;
    g -= c.g;
    b -= c.b;
    a -= c.a;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator *= ( float f )
{
    r *= f;
    g *= f;
    b *= f;
    a *= f;
    return *this;
}

D3DXINLINE D3DXCOLOR& 
D3DXCOLOR::operator /= ( float f )
{
    float fInv = 1.0f / f;
    r *= fInv;
    g *= fInv;
    b *= fInv;
    a *= fInv;
    return *this;
}


// unary operators
D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator + () const
{
    return *this;
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator - () const
{
    return D3DXCOLOR(-r, -g, -b, -a);
}


// binary operators
D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator + ( const D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r + c.r, g + c.g, b + c.b, a + c.a);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator - ( const D3DXCOLOR& c ) const
{
    return D3DXCOLOR(r - c.r, g - c.g, b - c.b, a - c.a);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator * ( float f ) const
{
    return D3DXCOLOR(r * f, g * f, b * f, a * f);
}

D3DXINLINE D3DXCOLOR 
D3DXCOLOR::operator / ( float f ) const
{
    float fInv = 1.0f / f;
    return D3DXCOLOR(r * fInv, g * fInv, b * fInv, a * fInv);
}


D3DXINLINE D3DXCOLOR 
operator * (float f, const D3DXCOLOR& c )
{
    return D3DXCOLOR(f * c.r, f * c.g, f * c.b, f * c.a);
}


D3DXINLINE BOOL 
D3DXCOLOR::operator == ( const D3DXCOLOR& c ) const
{
    return r == c.r && g == c.g && b == c.b && a == c.a;
}

D3DXINLINE BOOL 
D3DXCOLOR::operator != ( const D3DXCOLOR& c ) const
{
    return r != c.r || g != c.g || b != c.b || a != c.a;
}


#endif //__cplusplus



//===========================================================================
//
// Inline functions
//
//===========================================================================


//--------------------------
// 2D Vector
//--------------------------

D3DXINLINE float D3DXVec2Length
    ( const D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y);
#endif 
}

D3DXINLINE float D3DXVec2LengthSq
    ( const D3DXVECTOR2 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y;
}

D3DXINLINE float D3DXVec2Dot
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y;
}

D3DXINLINE float D3DXVec2CCW
    ( const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->y - pV1->y * pV2->x;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Add
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Subtract
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Minimize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Maximize
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Scale
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV, float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR2* D3DXVec2Lerp
    ( D3DXVECTOR2 *pOut, const D3DXVECTOR2 *pV1, const D3DXVECTOR2 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    return pOut;
}


//--------------------------
// 3D Vector
//--------------------------

D3DXINLINE float D3DXVec3Length
    ( const D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
#endif
}

D3DXINLINE float D3DXVec3LengthSq
    ( const D3DXVECTOR3 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z;
}

D3DXINLINE float D3DXVec3Dot
    ( const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Cross
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
    D3DXVECTOR3 v;

#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    v.x = pV1->y * pV2->z - pV1->z * pV2->y;
    v.y = pV1->z * pV2->x - pV1->x * pV2->z;
    v.z = pV1->x * pV2->y - pV1->y * pV2->x;

    *pOut = v;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Add
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Subtract
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Minimize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Maximize
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Scale
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR3* D3DXVec3Lerp
    ( D3DXVECTOR3 *pOut, const D3DXVECTOR3 *pV1, const D3DXVECTOR3 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    return pOut;
}


//--------------------------
// 4D Vector
//--------------------------

D3DXINLINE float D3DXVec4Length
    ( const D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#else
    return (float) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w);
#endif
}

D3DXINLINE float D3DXVec4LengthSq
    ( const D3DXVECTOR4 *pV )
{
#ifdef D3DX_DEBUG
    if(!pV)
        return 0.0f;
#endif

    return pV->x * pV->x + pV->y * pV->y + pV->z * pV->z + pV->w * pV->w;
}

D3DXINLINE float D3DXVec4Dot
    ( const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2 )
{
#ifdef D3DX_DEBUG
    if(!pV1 || !pV2)
        return 0.0f;
#endif

    return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z + pV1->w * pV2->w;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Add
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + pV2->x;
    pOut->y = pV1->y + pV2->y;
    pOut->z = pV1->z + pV2->z;
    pOut->w = pV1->w + pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Subtract
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x - pV2->x;
    pOut->y = pV1->y - pV2->y;
    pOut->z = pV1->z - pV2->z;
    pOut->w = pV1->w - pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Minimize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x < pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y < pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z < pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w < pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Maximize
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x > pV2->x ? pV1->x : pV2->x;
    pOut->y = pV1->y > pV2->y ? pV1->y : pV2->y;
    pOut->z = pV1->z > pV2->z ? pV1->z : pV2->z;
    pOut->w = pV1->w > pV2->w ? pV1->w : pV2->w;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Scale
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV)
        return NULL;
#endif

    pOut->x = pV->x * s;
    pOut->y = pV->y * s;
    pOut->z = pV->z * s;
    pOut->w = pV->w * s;
    return pOut;
}

D3DXINLINE D3DXVECTOR4* D3DXVec4Lerp
    ( D3DXVECTOR4 *pOut, const D3DXVECTOR4 *pV1, const D3DXVECTOR4 *pV2,
      float s )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pV1 || !pV2)
        return NULL;
#endif

    pOut->x = pV1->x + s * (pV2->x - pV1->x);
    pOut->y = pV1->y + s * (pV2->y - pV1->y);
    pOut->z = pV1->z + s * (pV2->z - pV1->z);
    pOut->w = pV1->w + s * (pV2->w - pV1->w);
    return pOut;
}


//--------------------------
// 4D Matrix
//--------------------------

D3DXINLINE D3DXMATRIX* D3DXMatrixIdentity
    ( D3DXMATRIX *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] = 
    pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] = 
    pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] = 
    pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

    pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;
    return pOut;
}


D3DXINLINE BOOL D3DXMatrixIsIdentity
    ( const D3DXMATRIX *pM )
{
#ifdef D3DX_DEBUG
    if(!pM)
        return FALSE;
#endif

    return pM->m[0][0] == 1.0f && pM->m[0][1] == 0.0f && pM->m[0][2] == 0.0f && pM->m[0][3] == 0.0f &&
           pM->m[1][0] == 0.0f && pM->m[1][1] == 1.0f && pM->m[1][2] == 0.0f && pM->m[1][3] == 0.0f &&
           pM->m[2][0] == 0.0f && pM->m[2][1] == 0.0f && pM->m[2][2] == 1.0f && pM->m[2][3] == 0.0f &&
           pM->m[3][0] == 0.0f && pM->m[3][1] == 0.0f && pM->m[3][2] == 0.0f && pM->m[3][3] == 1.0f;
}


//--------------------------
// Quaternion
//--------------------------

D3DXINLINE float D3DXQuaternionLength
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

#ifdef __cplusplus
    return sqrtf(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#else
    return (float) sqrt(pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w);
#endif
}

D3DXINLINE float D3DXQuaternionLengthSq
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return 0.0f;
#endif

    return pQ->x * pQ->x + pQ->y * pQ->y + pQ->z * pQ->z + pQ->w * pQ->w;
}

D3DXINLINE float D3DXQuaternionDot
    ( const D3DXQUATERNION *pQ1, const D3DXQUATERNION *pQ2 )
{
#ifdef D3DX_DEBUG
    if(!pQ1 || !pQ2)
        return 0.0f;
#endif

    return pQ1->x * pQ2->x + pQ1->y * pQ2->y + pQ1->z * pQ2->z + pQ1->w * pQ2->w;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionIdentity
    ( D3DXQUATERNION *pOut )
{
#ifdef D3DX_DEBUG
    if(!pOut)
        return NULL;
#endif

    pOut->x = pOut->y = pOut->z = 0.0f;
    pOut->w = 1.0f;
    return pOut;
}

D3DXINLINE BOOL D3DXQuaternionIsIdentity
    ( const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pQ)
        return FALSE;
#endif

    return pQ->x == 0.0f && pQ->y == 0.0f && pQ->z == 0.0f && pQ->w == 1.0f;
}


D3DXINLINE D3DXQUATERNION* D3DXQuaternionConjugate
    ( D3DXQUATERNION *pOut, const D3DXQUATERNION *pQ )
{
#ifdef D3DX_DEBUG
    if(!pOut || !pQ)
        return NULL;
#endif

    pOut->x = -pQ->x;
    pOut->y = -pQ->y;
    pOut->z = -pQ->z;
    pOut->w =  pQ->w;
    return pOut;
}


//--------------------------
// Plane
//--------------------------

D3DXINLINE float D3DXPlaneDot
    ( const D3DXPLANE *pP, const D3DXVECTOR4 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d * pV->w;
}

D3DXINLINE float D3DXPlaneDotCoord
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z + pP->d;
}

D3DXINLINE float D3DXPlaneDotNormal
    ( const D3DXPLANE *pP, const D3DXVECTOR3 *pV)
{
#ifdef D3DX_DEBUG
    if(!pP || !pV)
        return 0.0f;
#endif

    return pP->a * pV->x + pP->b * pV->y + pP->c * pV->z;
}


//--------------------------
// Color
//--------------------------

D3DXINLINE D3DXCOLOR* D3DXColorNegative
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = 1.0f - pC->r;
    pOut->g = 1.0f - pC->g;
    pOut->b = 1.0f - pC->b;
    pOut->a = pC->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorAdd        
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + pC2->r;
    pOut->g = pC1->g + pC2->g;
    pOut->b = pC1->b + pC2->b;
    pOut->a = pC1->a + pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorSubtract   
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r - pC2->r;
    pOut->g = pC1->g - pC2->g;
    pOut->b = pC1->b - pC2->b;
    pOut->a = pC1->a - pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorScale      
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC)
        return NULL;
#endif

    pOut->r = pC->r * s;
    pOut->g = pC->g * s;
    pOut->b = pC->b * s;
    pOut->a = pC->a * s;
    return pOut;
} 

D3DXINLINE D3DXCOLOR* D3DXColorModulate   
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r * pC2->r;
    pOut->g = pC1->g * pC2->g;
    pOut->b = pC1->b * pC2->b;
    pOut->a = pC1->a * pC2->a;
    return pOut;
}

D3DXINLINE D3DXCOLOR* D3DXColorLerp       
    (D3DXCOLOR *pOut, const D3DXCOLOR *pC1, const D3DXCOLOR *pC2, float s)
{
#ifdef D3DX_DEBUG
    if(!pOut || !pC1 || !pC2)
        return NULL;
#endif

    pOut->r = pC1->r + s * (pC2->r - pC1->r);
    pOut->g = pC1->g + s * (pC2->g - pC1->g);
    pOut->b = pC1->b + s * (pC2->b - pC1->b);
    pOut->a = pC1->a + s * (pC2->a - pC1->a);
    return pOut;
}


#endif // __D3DXMATH_INL__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxshapes.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxshapes.h
//  Content:    D3DX simple shapes
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXSHAPES_H__
#define __D3DXSHAPES_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"


typedef struct ID3DXSimpleShape *LPD3DXSIMPLESHAPE;

// {CFCD4602-EB7B-11d2-A440-00A0C90629A8}
DEFINE_GUID( IID_ID3DXSimpleShape, 
0xcfcd4602, 0xeb7b, 0x11d2, 0xa4, 0x40, 0x0, 0xa0, 0xc9, 0x6, 0x29, 0xa8 );


///////////////////////////////////////////////////////////////////////////
// Interfaces:
///////////////////////////////////////////////////////////////////////////

//-------------------------------------------------------------------------
// ID3DXSimpleShape interface: 
//-------------------------------------------------------------------------

DECLARE_INTERFACE_(ID3DXSimpleShape, IUnknown)
{
    // IUnknown methods 
    STDMETHOD(QueryInterface)(THIS_ REFIID  riid, LPVOID* ppvObj) PURE;
    STDMETHOD_(ULONG,AddRef)(THIS) PURE;
    STDMETHOD_(ULONG,Release)(THIS) PURE;

    // ID3DXSimpleShape methods
    STDMETHOD_(LPDIRECT3DVERTEXBUFFER7, GetVB)(THIS) PURE;
    STDMETHOD_(DWORD, GetIndices)(THIS_ LPWORD *ppIndices) PURE;
    STDMETHOD(Draw)(THIS) PURE;
};



///////////////////////////////////////////////////////////////////////////
// Functions:
///////////////////////////////////////////////////////////////////////////

#ifdef __cplusplus
extern "C" {
#endif //__cplusplus


//-------------------------------------------------------------------------
// D3DXCreatePolygon: Creates an 'n' sided polygon using the device
// ----------------  specified. It returns a vertex buffer that can be used
//                   for drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float sideSize: Length of a side.
//     [in]  DWORD numTexCoords:   The number of texture coordinates desired
//                                 in the vertex-buffer. (Default is 1)
//                                 D3DX_DEFAULT is a valid input.
//     [out] IDirect3DVertexBuffer7** ppVB: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreatePolygon(LPDIRECT3DDEVICE7  pDevice,
                      float              sideSize, 
                      DWORD              numSides, 
                      DWORD              numTexCoords, 
                      LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateBox: Creates a box (cuboid) of given dimensions using the  
// ------------  device. It returns a vertex buffer that can
//               be used for drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float width: Width of the box (along x-axis)
//     [in]  float height: Height of the box (along y-axis)
//     [in]  float depth: Depth of the box (along z-axis)
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output vertex-buffer.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateBox(LPDIRECT3DDEVICE7  pDevice, 
                  float              width,
                  float              height,
                  float              depth,
                  DWORD              numTexCoords, 
                  LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateCylinder: Creates a cylinder of given dimensions using the  
// -----------------  device. It returns a vertex buffer that
//                    can be used for drawing or manipulation by the program
//                    later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float baseRadius: Base-radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float topRadius: Top-radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float height: Height (default is 1.0f, shd be >= 0.0f)
//     [in]  DWORD numSlices: Number of slices about the main axis.
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numStacks: Number of stacks along the main axis. 
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI 
    D3DXCreateCylinder(LPDIRECT3DDEVICE7  pDevice,
                       float              baseRadius, 
                       float              topRadius, 
                       float              height, 
                       DWORD              numSlices, 
                       DWORD              numStacks,   
                       DWORD              numTexCoords, 
                       LPD3DXSIMPLESHAPE* ppShape );


//-------------------------------------------------------------------------
// D3DXCreateTorus: Creates a torus of given dimensions using the  
// --------------  device specified. It returns a vertex buffer that can
//                 be used for drawing or manipulation by the program later
//                 on. It draws a doughnut, centered at (0, 0, 0) whose axis 
//                 is aligned with the z-axis. With the innerRadius used
//                 as the radius of the cross-section (minor-Radius) and 
//                 the outerRadius used as the radius of the central 'hole'. 
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float innerRadius: inner radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float outerRadius: outer radius (default is 2.0f, shd be >= 0.0f)
//     [in]  DWORD numSides: Number of sides in the cross-section 
//                           (default is 8). D3DX_DEFAULT is a valid input.
//     [in]  DWORD numRings: Number of rings making up the torus 
//                           (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                                 in the vertex-buffer. Default is 1. 
//                                 D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTorus(LPDIRECT3DDEVICE7  pDevice,
                    float              innerRadius,
                    float              outerRadius, 
                    DWORD              numSides,
                    DWORD              numRings, 
                    DWORD              numTexCoords,  
                    LPD3DXSIMPLESHAPE* ppShape );

//-------------------------------------------------------------------------
// D3DXCreateTeapot: Creates a teapot using the device specified. 
// ----------------  It returns a vertex buffer that can be used for
//                   drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateTeapot(LPDIRECT3DDEVICE7  pDevice,
                     DWORD              numTexCoords, 
                     LPD3DXSIMPLESHAPE* ppShape);

//-------------------------------------------------------------------------
// D3DXCreateSphere: Creates a cylinder of given dimensions using the
// ----------------  device specified. 
//                   It returns a vertex buffer that can be used for
//                   drawing or manipulation by the program later on.
//
// Params: 
//     [in]  LPDIRECT3DDEVICE7 pDevice: The device to create off. 
//     [in]  float radius: radius (default is 1.0f, shd be >= 0.0f)
//     [in]  float height: Height (default is 1.0f, shd be >= 0.0f)
//     [in]  DWORD numSlices: Number of slices about the main axis
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numStacks: Number of stacks along the main axis
//                            (default is 8) D3DX_DEFAULT is a valid input.
//     [in]  DWORD numTexCoords: The number of texture coordinates desired
//                               in the vertex-buffer. Default is 1. 
//                               D3DX_DEFAULT is a valid input here.
//     [out] LPD3DXSIMPLESHAPE* ppShape: The output shape interface.
//-------------------------------------------------------------------------
HRESULT WINAPI
    D3DXCreateSphere(LPDIRECT3DDEVICE7  pDevice, 
                     float              radius, 
                     DWORD              numSlices, 
                     DWORD              numStacks,
                     DWORD              numTexCoords, 
                     LPD3DXSIMPLESHAPE* ppShape);

#ifdef __cplusplus
}
#endif //__cplusplus    
#endif //__D3DXSHAPES_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\d3dxsprite.h ===
///////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) Microsoft Corporation.  All Rights Reserved.
//
//  File:       d3dxsprite.h
//  Content:    D3DX sprite helper functions
//
//      These functions allow you to use sprites with D3DX. A "sprite" is
//      loosely defined as a 2D image that you want to transfer to the 
//      rendering target. The source image can be a texture created
//      with the help of the D3DX texture loader; though advanced users may
//      want to create their own. A helper function (PrepareDeviceForSprite)
//      is provided to make it easy to set up render states on a device. 
//      (Again, advanced users can use their own created devices.) 
//
//      There are two general techniques for sprites; the simpler one just
//      specifies a destination rectangle and a rotation anlge. A more 
//      powerful technique supports rendering to non-rectangular quads.
//
//      Both techniques support clipping, alpha, and rotation. More
//      details are below.
//
///////////////////////////////////////////////////////////////////////////

#ifndef __D3DXSPRITE_H__
#define __D3DXSPRITE_H__

#include <d3d.h>
#include <limits.h>
#include "d3dxerr.h"

#ifdef __cplusplus
extern "C" {
#endif


//-------------------------------------------------------------------------
// D3DXPrepareDeviceForSprite:
//
// Call this function to set up all the render states necessary for
// BltSprite/WarpSprite to work correctly. (Advanced users may opt to
// not call this function first; in which case Blt/WarpSprite functions
// will use whatever render/texture states were set up on the device when
// they are called.)
//
// Warning: This function modifies render states and may impact performance
// negatively on some 3D hardware if it is called too often per frame.
//
// Warning: If the render state changes (other than through calls to 
// BltSprite or WarpSprite), you will need to call this function again before 
// calling BltSprite or WarpSprite.
//
// Details: This function modifies the the rendering first texture stage and 
// it modifies some renderstates for the entire device. Here is the exact 
// list:
// 
//   SetTextureStageState(0, D3DTSS_COLORARG1,         D3DTA_TEXTURE);
//   SetTextureStageState(0, D3DTSS_COLOROP,           D3DTOP_SELECTARG1);
//   SetTextureStageState(0, D3DTSS_ALPHAARG1,         D3DTA_TEXTURE);
//   SetTextureStageState(0, D3DTSS_ALPHAARG2,         D3DTA_DIFFUSE);
//   SetTextureStageState(0, D3DTSS_ALPHAOP,           D3DTOP_MODULATE);
//   SetTextureStageState(0, D3DTSS_MINFILTER,         D3DTFN_LINEAR);
//   SetTextureStageState(0, D3DTSS_MAGFILTER,         D3DTFG_LINEAR);
// 
//   SetRenderState(D3DRENDERSTATE_SRCBLEND,           D3DBLEND_SRCALPHA);
//   SetRenderState(D3DRENDERSTATE_DESTBLEND,          D3DBLEND_INVSRCALPHA);
//   SetRenderState(D3DRENDERSTATE_ALPHABLENDENABLE,   TRUE);
//
//   Depending on the value of ZEnable parameter, this function will
//   will either call
//   SetRenderState(D3DRENDERSTATE_ZENABLE,            FALSE);
//   - or -
//   SetRenderState(D3DRENDERSTATE_ZENABLE,            TRUE);
//
// Parameters: 
//      pd3dDevice  - a pointer to the d3d device that you wish to prepare
//                    for use with D3DX Sprite Services
//      ZEnable     - a flag indicating whether you want the sprites to
//                    check and update the Z buffer as part of rendering.
//                    If ZEnable is FALSE, OR you are using
//                    alpha-blending, then it is necessary to render your
//                    sprites from back-to-front. 
//
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI
    D3DXPrepareDeviceForSprite( LPDIRECT3DDEVICE7 pd3dDevice, 
                                BOOL ZEnable = FALSE);
#else
HRESULT WINAPI
    D3DXPrepareDeviceForSprite( LPDIRECT3DDEVICE7 pd3dDevice, 
                                BOOL ZEnable);
#endif



//-------------------------------------------------------------------------
// The D3DXDrawBasicSprite() function performs blitting of source images onto 
// a 3D rendering device. This function only calls SetTexture on the first 
// renderstage with the parameter (pd3dTexture) if that parameter is non-null. 
// This function assumes that D3DXPrepareDeviceForSprite has been called on 
// the device or that caller has in some other way correctly prepared the 
// renderstates.
//
// This function supports scaling, rotations, alpha-blending, and choosing 
// a source sub-rect.
// 
// Rotation angle is specified in radians. Both rotations and scales
// are applied around the center of the sprite; where the center of the
// sprite is half the width/height of the sprite, plus the offset parameter. 
//
// Use the offset parameter if you want the sprite's center to be something 
// other than the image center.
//
// The destination point indicates where you would like the center of
// the sprite to draw to.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      ppointDest  - a pointer to the target point for the sprite. The
//                    components of the vector must be in screen
//                    space.
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.
//      angleRad    - angle of rotation around the 'center' of the rect
//      scale       - a uniform scale that is applied to the source rect
//                    to specify the size of the image that is rendered
//      pOffset     - offset from the center of the source rect to use as the 
//                    center of rotation
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that horizontal or vertical mirroring 
//                    may be simply accomplished by swapping the left/right 
//                    or top/bottom fields of this RECT.
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSpriteSimple(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                         LPDIRECT3DDEVICE7     pd3dDevice, 
                         const D3DXVECTOR3     *ppointDest, 
                         float                 alpha        = 1.0f,
                         float                 scale        = 1.0f,
                         float                 angleRad     = 0.0f,
                         const D3DXVECTOR2     *pOffset     = NULL,
                         const RECT            *pSourceRect = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSpriteSimple(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                         LPDIRECT3DDEVICE7     pd3dDevice, 
                         D3DXVECTOR3           *ppointDest, 
                         float                 alpha,
                         float                 scale,
                         float                 angleRad,
                         D3DXVECTOR2           *pOffset,
                         RECT                  *pSourceRect);
#endif

//-------------------------------------------------------------------------
// The D3DXDrawSprite() function transforms source images onto a 3D 
// rendering device. It takes a general 4x4 matrix which is use to transform
// the points of a default rect: (left=-.5, top=-.5, right=+.5, bottom=+.5).
// (This default rect was chosen so that it was centered around the origin
// to ease setting up rotations. And it was chosen to have a width/height of one
// to ease setting up scales.)
// 
// This function only calls SetTexture on the first 
// renderstage with the parameter (pd3dTexture) if that parameter is non-null. 
// This function assumes that D3DXPrepareDeviceForSprite has been called on 
// the device or that caller has in some other way correctly prepared the 
// renderstates.
//
// This function supports alpha-blending, and choosing 
// a source sub-rect. (A value of NULL for source sub-rect means the entire
// texture is used.)
//
// Note that if the transformed points have a value for w (the homogenous
// coordinate) that is not 1, then this function will invert it and pass
// that value to D3D as the rhw field of a TLVERTEX. If the value for w is
// zero, then it use 1 as the rhw.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      pMatrixTransform - 4x4 matrix that specifies the transformation
//                    that will be applied to the default -.5 to +.5 
//                    rectangle.
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.Furthermore, you should avoid scenarios where 
//                    semi-transparent objects intersect.
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that mirroring may be simply accomplished
//                    by swapping the left/right or top/bottom fields of
//                    this RECT.
// 
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSpriteTransform(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                            LPDIRECT3DDEVICE7     pd3dDevice, 
                            const D3DXMATRIX      *pMatrixTransform, 
                            float                 alpha         = 1.0f,
                            const RECT            *pSourceRect  = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSpriteTransform(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                            LPDIRECT3DDEVICE7     pd3dDevice, 
                            D3DXMATRIX            *pMatrixTransform, 
                            float                 alpha,
                            RECT                  *pSourceRect);
#endif

//-------------------------------------------------------------------------
// The D3DXBuildSpriteTransform() function is a helper provided which
// creates a matrix corresponding to simple properties. This matrix is
// set up to pass directly to D3DXTransformSprite.
//
// Parameters: 
//      pMatrix     - a pointer to the result matrix
//      prectDest   - a pointer to the target rectangle for the sprite
//      angleRad    - angle of rotation around the 'center' of the rect
//      pOffset     - offset from the center of the source rect to use as the 
//                    center of rotation
// 
//-------------------------------------------------------------------------

#ifdef __cplusplus
void WINAPI
    D3DXBuildSpriteTransform(D3DXMATRIX            *pMatrix,
                             const RECT            *prectDest,
                             float                 angleRad     = 0.0f,
                             const D3DXVECTOR2     *pOffset     = NULL);
#else
void WINAPI
    D3DXBuildSpriteTransform(D3DXMATRIX            *pMatrix,
                             RECT                  *prectDest,
                             float                 angleRad,
                             D3DXVECTOR2           *pOffset);
#endif


//-------------------------------------------------------------------------
// The D3DXDrawSprite3D() function renders a texture onto a 3D quad. The
// quad ABCD is broken into two triangles ABC and ACD which are rendered
// via DrawPrim.
//
// Parameters: 
//      pd3dTexture - a pointer to the surface containing the texture
//      pd3dDevice  - a pointer to the d3d device to render to. It is
//                    assumed that render states are set up. (See
//                    D3DXPrepareDeviceForSprite)
//      quad        - array of 4 points in the following order:
//                    upper-left, upper-right, lower-right, lower-left.
//                    If these vectors contain a W, then this function
//                    will take the reciprocal of that value to pass as
//                    as the rhw (i.e. reciprocal homogenous w).
//      alpha       - alpha value to apply to sprite. 1.0 means totally
//                    opaque; and 0.0 means totally transparent. 
//                    WARNING: If you are using alpha, then you should render
//                    from back to front in order to avoid rendering
//                    artifacts.Furthermore, you should avoid scenarios where 
//                    semi-transparent objects intersect.
//      pSourceRect - a rect that indicates what portion of the source
//                    source texture to use. If NULL is passed, then the
//                    entire source is used. If the source texture was 
//                    created via D3DX, then the rect should be specified
//                    in the coordinates of the original image (so that you
//                    don't have to worry about stretching/scaling that D3DX
//                    may have done to make the image work with your current
//                    3D Device.) Note that mirroring may be simply accomplished
//                    by swapping the left/right or top/bottom fields of
//                    this RECT.
//-------------------------------------------------------------------------

#ifdef __cplusplus
HRESULT WINAPI 
    D3DXDrawSprite3D(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                     LPDIRECT3DDEVICE7     pd3dDevice, 
                     const D3DXVECTOR4     quad[4], 
                     float                 alpha         = 1.0f,
                     const RECT            *pSourceRect  = NULL);
#else
HRESULT WINAPI 
    D3DXDrawSprite3D(LPDIRECTDRAWSURFACE7  pd3dTexture, 
                     LPDIRECT3DDEVICE7     pd3dDevice, 
                     D3DXVECTOR4           quad[4], 
                     float                 alpha,
                     RECT                  *pSourceRect);
#endif



#ifdef __cplusplus
} // extern "C"
#endif

#endif // __D3DXSPRITE_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\DAnimId.h ===
// Copyright (C) Microsoft Corporation, 1998
//
// IDs for DANIM Events
//
// Just follow the template when adding either DISPIDs or new interfaces.
//

#ifndef __DANIMDISPID_H__
#define __DANIMDISPID_H__

// Base offset:

#define DISPID_BASE                                             0x00000000

// Interface offsets:
#define DAVIEWERCONTROL_OFFSET                                  0x1000
#define DAVIEW_OFFSET                                           0x2000

// Interface bases:
#define DISPID_DANIMEVENT_BASE                                  (DISPID_BASE + DAVIEWERCONTROL_OFFSET)
#define DISPID_VIEWEVENT_BASE                                   (DISPID_BASE + DAVIEW_OFFSET)

// DAVIEWERCONTROL DISPIDs:
#define DISPID_DANIMEVENT_START                          (DISPID_DANIMEVENT_BASE + 0x01)
#define DISPID_DANIMEVENT_MOUSEUP                        (DISPID_DANIMEVENT_BASE + 0x02)
#define DISPID_DANIMEVENT_MOUSEDOWN                      (DISPID_DANIMEVENT_BASE + 0x03)
#define DISPID_DANIMEVENT_MOUSEMOVE                      (DISPID_DANIMEVENT_BASE + 0x04)
#define DISPID_DANIMEVENT_CLICK                          (DISPID_DANIMEVENT_BASE + 0x05)
#define DISPID_DANIMEVENT_KEYPRESS                       (DISPID_DANIMEVENT_BASE + 0x06)
#define DISPID_DANIMEVENT_KEYUP                          (DISPID_DANIMEVENT_BASE + 0x07)
#define DISPID_DANIMEVENT_KEYDOWN                        (DISPID_DANIMEVENT_BASE + 0x08)
#define DISPID_DANIMEVENT_ERROR                          (DISPID_DANIMEVENT_BASE + 0x09)
#define DISPID_DANIMEVENT_STOP                           (DISPID_DANIMEVENT_BASE + 0x0A)
#define DISPID_DANIMEVENT_PAUSE                          (DISPID_DANIMEVENT_BASE + 0x0B)
#define DISPID_DANIMEVENT_RESUME                         (DISPID_DANIMEVENT_BASE + 0x0C)

//VIEW DISPIDS
#define DISPID_VIEWEVENT_START                                  (DISPID_VIEWEVENT_BASE + 0x01)
#define DISPID_VIEWEVENT_STOP                                   (DISPID_VIEWEVENT_BASE + 0x02)
#define DISPID_VIEWEVENT_ONMOUSEMOVE                            (DISPID_VIEWEVENT_BASE + 0x03)
#define DISPID_VIEWEVENT_ONMOUSEBUTTON                          (DISPID_VIEWEVENT_BASE + 0x04)
#define DISPID_VIEWEVENT_ONKEY                                  (DISPID_VIEWEVENT_BASE + 0x05)
#define DISPID_VIEWEVENT_ONFOCUS                                (DISPID_VIEWEVENT_BASE + 0x06)
#define DISPID_VIEWEVENT_PAUSE                                  (DISPID_VIEWEVENT_BASE + 0x07)
#define DISPID_VIEWEVENT_RESUME                                 (DISPID_VIEWEVENT_BASE + 0x08)
#define DISPID_VIEWEVENT_ERROR                                  (DISPID_VIEWEVENT_BASE + 0x09)

#endif  //__DANIMDISPID_H__
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\datapath.h ===
/*****************************************************************************\
*                                                                             *
* DataPath.h    Obsolete DataPath header                                      *
*                                                                             *
*               Copyright 1995 - 1999 Microsoft Corp. All rights reserved.    *
*                                                                             *
\*****************************************************************************/

#ifndef __datapath_h__
#define __datapath_h__
#pragma message("WARNING: your code should #include ocidl.h instead of datapath.h")
#include <ocidl.h>
#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\danim.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0342 */
/* Compiler settings for danim.idl:
    Oicf, W0, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __danim_h__
#define __danim_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDAViewSite_FWD_DEFINED__
#define __IDAViewSite_FWD_DEFINED__
typedef interface IDAViewSite IDAViewSite;
#endif 	/* __IDAViewSite_FWD_DEFINED__ */


#ifndef __IDAView_FWD_DEFINED__
#define __IDAView_FWD_DEFINED__
typedef interface IDAView IDAView;
#endif 	/* __IDAView_FWD_DEFINED__ */


#ifndef __IDABehavior_FWD_DEFINED__
#define __IDABehavior_FWD_DEFINED__
typedef interface IDABehavior IDABehavior;
#endif 	/* __IDABehavior_FWD_DEFINED__ */


#ifndef __IDANumber_FWD_DEFINED__
#define __IDANumber_FWD_DEFINED__
typedef interface IDANumber IDANumber;
#endif 	/* __IDANumber_FWD_DEFINED__ */


#ifndef __IDABvrHook_FWD_DEFINED__
#define __IDABvrHook_FWD_DEFINED__
typedef interface IDABvrHook IDABvrHook;
#endif 	/* __IDABvrHook_FWD_DEFINED__ */


#ifndef __IDADrawingSurface_FWD_DEFINED__
#define __IDADrawingSurface_FWD_DEFINED__
typedef interface IDADrawingSurface IDADrawingSurface;
#endif 	/* __IDADrawingSurface_FWD_DEFINED__ */


#ifndef __IDAPickableResult_FWD_DEFINED__
#define __IDAPickableResult_FWD_DEFINED__
typedef interface IDAPickableResult IDAPickableResult;
#endif 	/* __IDAPickableResult_FWD_DEFINED__ */


#ifndef __IDAEvent_FWD_DEFINED__
#define __IDAEvent_FWD_DEFINED__
typedef interface IDAEvent IDAEvent;
#endif 	/* __IDAEvent_FWD_DEFINED__ */


#ifndef __IDA2Behavior_FWD_DEFINED__
#define __IDA2Behavior_FWD_DEFINED__
typedef interface IDA2Behavior IDA2Behavior;
#endif 	/* __IDA2Behavior_FWD_DEFINED__ */


#ifndef __IDAImport_FWD_DEFINED__
#define __IDAImport_FWD_DEFINED__
typedef interface IDAImport IDAImport;
#endif 	/* __IDAImport_FWD_DEFINED__ */


#ifndef __IDAModifiableBehavior_FWD_DEFINED__
#define __IDAModifiableBehavior_FWD_DEFINED__
typedef interface IDAModifiableBehavior IDAModifiableBehavior;
#endif 	/* __IDAModifiableBehavior_FWD_DEFINED__ */


#ifndef __DABehavior_FWD_DEFINED__
#define __DABehavior_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABehavior DABehavior;
#else
typedef struct DABehavior DABehavior;
#endif /* __cplusplus */

#endif 	/* __DABehavior_FWD_DEFINED__ */


#ifndef __IDAUntilNotifier_FWD_DEFINED__
#define __IDAUntilNotifier_FWD_DEFINED__
typedef interface IDAUntilNotifier IDAUntilNotifier;
#endif 	/* __IDAUntilNotifier_FWD_DEFINED__ */


#ifndef __IDABoolean_FWD_DEFINED__
#define __IDABoolean_FWD_DEFINED__
typedef interface IDABoolean IDABoolean;
#endif 	/* __IDABoolean_FWD_DEFINED__ */


#ifndef __IDACamera_FWD_DEFINED__
#define __IDACamera_FWD_DEFINED__
typedef interface IDACamera IDACamera;
#endif 	/* __IDACamera_FWD_DEFINED__ */


#ifndef __IDAColor_FWD_DEFINED__
#define __IDAColor_FWD_DEFINED__
typedef interface IDAColor IDAColor;
#endif 	/* __IDAColor_FWD_DEFINED__ */


#ifndef __IDAGeometry_FWD_DEFINED__
#define __IDAGeometry_FWD_DEFINED__
typedef interface IDAGeometry IDAGeometry;
#endif 	/* __IDAGeometry_FWD_DEFINED__ */


#ifndef __IDAImage_FWD_DEFINED__
#define __IDAImage_FWD_DEFINED__
typedef interface IDAImage IDAImage;
#endif 	/* __IDAImage_FWD_DEFINED__ */


#ifndef __IDAMatte_FWD_DEFINED__
#define __IDAMatte_FWD_DEFINED__
typedef interface IDAMatte IDAMatte;
#endif 	/* __IDAMatte_FWD_DEFINED__ */


#ifndef __IDAMicrophone_FWD_DEFINED__
#define __IDAMicrophone_FWD_DEFINED__
typedef interface IDAMicrophone IDAMicrophone;
#endif 	/* __IDAMicrophone_FWD_DEFINED__ */


#ifndef __IDAMontage_FWD_DEFINED__
#define __IDAMontage_FWD_DEFINED__
typedef interface IDAMontage IDAMontage;
#endif 	/* __IDAMontage_FWD_DEFINED__ */


#ifndef __IDAPath2_FWD_DEFINED__
#define __IDAPath2_FWD_DEFINED__
typedef interface IDAPath2 IDAPath2;
#endif 	/* __IDAPath2_FWD_DEFINED__ */


#ifndef __IDAPoint2_FWD_DEFINED__
#define __IDAPoint2_FWD_DEFINED__
typedef interface IDAPoint2 IDAPoint2;
#endif 	/* __IDAPoint2_FWD_DEFINED__ */


#ifndef __IDAPoint3_FWD_DEFINED__
#define __IDAPoint3_FWD_DEFINED__
typedef interface IDAPoint3 IDAPoint3;
#endif 	/* __IDAPoint3_FWD_DEFINED__ */


#ifndef __IDASound_FWD_DEFINED__
#define __IDASound_FWD_DEFINED__
typedef interface IDASound IDASound;
#endif 	/* __IDASound_FWD_DEFINED__ */


#ifndef __IDAString_FWD_DEFINED__
#define __IDAString_FWD_DEFINED__
typedef interface IDAString IDAString;
#endif 	/* __IDAString_FWD_DEFINED__ */


#ifndef __IDATransform2_FWD_DEFINED__
#define __IDATransform2_FWD_DEFINED__
typedef interface IDATransform2 IDATransform2;
#endif 	/* __IDATransform2_FWD_DEFINED__ */


#ifndef __IDATransform3_FWD_DEFINED__
#define __IDATransform3_FWD_DEFINED__
typedef interface IDATransform3 IDATransform3;
#endif 	/* __IDATransform3_FWD_DEFINED__ */


#ifndef __IDAVector2_FWD_DEFINED__
#define __IDAVector2_FWD_DEFINED__
typedef interface IDAVector2 IDAVector2;
#endif 	/* __IDAVector2_FWD_DEFINED__ */


#ifndef __IDAVector3_FWD_DEFINED__
#define __IDAVector3_FWD_DEFINED__
typedef interface IDAVector3 IDAVector3;
#endif 	/* __IDAVector3_FWD_DEFINED__ */


#ifndef __IDAFontStyle_FWD_DEFINED__
#define __IDAFontStyle_FWD_DEFINED__
typedef interface IDAFontStyle IDAFontStyle;
#endif 	/* __IDAFontStyle_FWD_DEFINED__ */


#ifndef __IDALineStyle_FWD_DEFINED__
#define __IDALineStyle_FWD_DEFINED__
typedef interface IDALineStyle IDALineStyle;
#endif 	/* __IDALineStyle_FWD_DEFINED__ */


#ifndef __IDAEndStyle_FWD_DEFINED__
#define __IDAEndStyle_FWD_DEFINED__
typedef interface IDAEndStyle IDAEndStyle;
#endif 	/* __IDAEndStyle_FWD_DEFINED__ */


#ifndef __IDAJoinStyle_FWD_DEFINED__
#define __IDAJoinStyle_FWD_DEFINED__
typedef interface IDAJoinStyle IDAJoinStyle;
#endif 	/* __IDAJoinStyle_FWD_DEFINED__ */


#ifndef __IDADashStyle_FWD_DEFINED__
#define __IDADashStyle_FWD_DEFINED__
typedef interface IDADashStyle IDADashStyle;
#endif 	/* __IDADashStyle_FWD_DEFINED__ */


#ifndef __IDABbox2_FWD_DEFINED__
#define __IDABbox2_FWD_DEFINED__
typedef interface IDABbox2 IDABbox2;
#endif 	/* __IDABbox2_FWD_DEFINED__ */


#ifndef __IDABbox3_FWD_DEFINED__
#define __IDABbox3_FWD_DEFINED__
typedef interface IDABbox3 IDABbox3;
#endif 	/* __IDABbox3_FWD_DEFINED__ */


#ifndef __IDAPair_FWD_DEFINED__
#define __IDAPair_FWD_DEFINED__
typedef interface IDAPair IDAPair;
#endif 	/* __IDAPair_FWD_DEFINED__ */


#ifndef __IDAArray_FWD_DEFINED__
#define __IDAArray_FWD_DEFINED__
typedef interface IDAArray IDAArray;
#endif 	/* __IDAArray_FWD_DEFINED__ */


#ifndef __IDATuple_FWD_DEFINED__
#define __IDATuple_FWD_DEFINED__
typedef interface IDATuple IDATuple;
#endif 	/* __IDATuple_FWD_DEFINED__ */


#ifndef __IDAUserData_FWD_DEFINED__
#define __IDAUserData_FWD_DEFINED__
typedef interface IDAUserData IDAUserData;
#endif 	/* __IDAUserData_FWD_DEFINED__ */


#ifndef __IDA2Geometry_FWD_DEFINED__
#define __IDA2Geometry_FWD_DEFINED__
typedef interface IDA2Geometry IDA2Geometry;
#endif 	/* __IDA2Geometry_FWD_DEFINED__ */


#ifndef __IDA2Image_FWD_DEFINED__
#define __IDA2Image_FWD_DEFINED__
typedef interface IDA2Image IDA2Image;
#endif 	/* __IDA2Image_FWD_DEFINED__ */


#ifndef __IDA2FontStyle_FWD_DEFINED__
#define __IDA2FontStyle_FWD_DEFINED__
typedef interface IDA2FontStyle IDA2FontStyle;
#endif 	/* __IDA2FontStyle_FWD_DEFINED__ */


#ifndef __IDA2LineStyle_FWD_DEFINED__
#define __IDA2LineStyle_FWD_DEFINED__
typedef interface IDA2LineStyle IDA2LineStyle;
#endif 	/* __IDA2LineStyle_FWD_DEFINED__ */


#ifndef __IDA2Event_FWD_DEFINED__
#define __IDA2Event_FWD_DEFINED__
typedef interface IDA2Event IDA2Event;
#endif 	/* __IDA2Event_FWD_DEFINED__ */


#ifndef __IDA2Array_FWD_DEFINED__
#define __IDA2Array_FWD_DEFINED__
typedef interface IDA2Array IDA2Array;
#endif 	/* __IDA2Array_FWD_DEFINED__ */


#ifndef __IDA2Color_FWD_DEFINED__
#define __IDA2Color_FWD_DEFINED__
typedef interface IDA2Color IDA2Color;
#endif 	/* __IDA2Color_FWD_DEFINED__ */


#ifndef __IDA3Geometry_FWD_DEFINED__
#define __IDA3Geometry_FWD_DEFINED__
typedef interface IDA3Geometry IDA3Geometry;
#endif 	/* __IDA3Geometry_FWD_DEFINED__ */


#ifndef __IDA3Image_FWD_DEFINED__
#define __IDA3Image_FWD_DEFINED__
typedef interface IDA3Image IDA3Image;
#endif 	/* __IDA3Image_FWD_DEFINED__ */


#ifndef __IDA3Array_FWD_DEFINED__
#define __IDA3Array_FWD_DEFINED__
typedef interface IDA3Array IDA3Array;
#endif 	/* __IDA3Array_FWD_DEFINED__ */


#ifndef __IDAPreferences_FWD_DEFINED__
#define __IDAPreferences_FWD_DEFINED__
typedef interface IDAPreferences IDAPreferences;
#endif 	/* __IDAPreferences_FWD_DEFINED__ */


#ifndef __IDA2View_FWD_DEFINED__
#define __IDA2View_FWD_DEFINED__
typedef interface IDA2View IDA2View;
#endif 	/* __IDA2View_FWD_DEFINED__ */


#ifndef __IDA3View_FWD_DEFINED__
#define __IDA3View_FWD_DEFINED__
typedef interface IDA3View IDA3View;
#endif 	/* __IDA3View_FWD_DEFINED__ */


#ifndef ___IDAViewEvents_FWD_DEFINED__
#define ___IDAViewEvents_FWD_DEFINED__
typedef interface _IDAViewEvents _IDAViewEvents;
#endif 	/* ___IDAViewEvents_FWD_DEFINED__ */


#ifndef __DAView_FWD_DEFINED__
#define __DAView_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAView DAView;
#else
typedef struct DAView DAView;
#endif /* __cplusplus */

#endif 	/* __DAView_FWD_DEFINED__ */


#ifndef __IDASite_FWD_DEFINED__
#define __IDASite_FWD_DEFINED__
typedef interface IDASite IDASite;
#endif 	/* __IDASite_FWD_DEFINED__ */


#ifndef __IDAImportationResult_FWD_DEFINED__
#define __IDAImportationResult_FWD_DEFINED__
typedef interface IDAImportationResult IDAImportationResult;
#endif 	/* __IDAImportationResult_FWD_DEFINED__ */


#ifndef __IDADXTransformResult_FWD_DEFINED__
#define __IDADXTransformResult_FWD_DEFINED__
typedef interface IDADXTransformResult IDADXTransformResult;
#endif 	/* __IDADXTransformResult_FWD_DEFINED__ */


#ifndef __IDAStatics_FWD_DEFINED__
#define __IDAStatics_FWD_DEFINED__
typedef interface IDAStatics IDAStatics;
#endif 	/* __IDAStatics_FWD_DEFINED__ */


#ifndef __IDA2Statics_FWD_DEFINED__
#define __IDA2Statics_FWD_DEFINED__
typedef interface IDA2Statics IDA2Statics;
#endif 	/* __IDA2Statics_FWD_DEFINED__ */


#ifndef __IDA3Statics_FWD_DEFINED__
#define __IDA3Statics_FWD_DEFINED__
typedef interface IDA3Statics IDA3Statics;
#endif 	/* __IDA3Statics_FWD_DEFINED__ */


#ifndef __DAStatics_FWD_DEFINED__
#define __DAStatics_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAStatics DAStatics;
#else
typedef struct DAStatics DAStatics;
#endif /* __cplusplus */

#endif 	/* __DAStatics_FWD_DEFINED__ */


#ifndef __IDAViewerControl_FWD_DEFINED__
#define __IDAViewerControl_FWD_DEFINED__
typedef interface IDAViewerControl IDAViewerControl;
#endif 	/* __IDAViewerControl_FWD_DEFINED__ */


#ifndef __IDAViewerControlWindowed_FWD_DEFINED__
#define __IDAViewerControlWindowed_FWD_DEFINED__
typedef interface IDAViewerControlWindowed IDAViewerControlWindowed;
#endif 	/* __IDAViewerControlWindowed_FWD_DEFINED__ */


#ifndef __IDA2ViewerControl_FWD_DEFINED__
#define __IDA2ViewerControl_FWD_DEFINED__
typedef interface IDA2ViewerControl IDA2ViewerControl;
#endif 	/* __IDA2ViewerControl_FWD_DEFINED__ */


#ifndef __IDA2ViewerControlWindowed_FWD_DEFINED__
#define __IDA2ViewerControlWindowed_FWD_DEFINED__
typedef interface IDA2ViewerControlWindowed IDA2ViewerControlWindowed;
#endif 	/* __IDA2ViewerControlWindowed_FWD_DEFINED__ */


#ifndef __IDA3ViewerControl_FWD_DEFINED__
#define __IDA3ViewerControl_FWD_DEFINED__
typedef interface IDA3ViewerControl IDA3ViewerControl;
#endif 	/* __IDA3ViewerControl_FWD_DEFINED__ */


#ifndef __IDA3ViewerControlWindowed_FWD_DEFINED__
#define __IDA3ViewerControlWindowed_FWD_DEFINED__
typedef interface IDA3ViewerControlWindowed IDA3ViewerControlWindowed;
#endif 	/* __IDA3ViewerControlWindowed_FWD_DEFINED__ */


#ifndef ___IDAViewerControlEvents_FWD_DEFINED__
#define ___IDAViewerControlEvents_FWD_DEFINED__
typedef interface _IDAViewerControlEvents _IDAViewerControlEvents;
#endif 	/* ___IDAViewerControlEvents_FWD_DEFINED__ */


#ifndef __DAViewerControl_FWD_DEFINED__
#define __DAViewerControl_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAViewerControl DAViewerControl;
#else
typedef struct DAViewerControl DAViewerControl;
#endif /* __cplusplus */

#endif 	/* __DAViewerControl_FWD_DEFINED__ */


#ifndef __DAViewerControlWindowed_FWD_DEFINED__
#define __DAViewerControlWindowed_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAViewerControlWindowed DAViewerControlWindowed;
#else
typedef struct DAViewerControlWindowed DAViewerControlWindowed;
#endif /* __cplusplus */

#endif 	/* __DAViewerControlWindowed_FWD_DEFINED__ */


#ifndef __DABoolean_FWD_DEFINED__
#define __DABoolean_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABoolean DABoolean;
#else
typedef struct DABoolean DABoolean;
#endif /* __cplusplus */

#endif 	/* __DABoolean_FWD_DEFINED__ */


#ifndef __DACamera_FWD_DEFINED__
#define __DACamera_FWD_DEFINED__

#ifdef __cplusplus
typedef class DACamera DACamera;
#else
typedef struct DACamera DACamera;
#endif /* __cplusplus */

#endif 	/* __DACamera_FWD_DEFINED__ */


#ifndef __DAColor_FWD_DEFINED__
#define __DAColor_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAColor DAColor;
#else
typedef struct DAColor DAColor;
#endif /* __cplusplus */

#endif 	/* __DAColor_FWD_DEFINED__ */


#ifndef __DAGeometry_FWD_DEFINED__
#define __DAGeometry_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAGeometry DAGeometry;
#else
typedef struct DAGeometry DAGeometry;
#endif /* __cplusplus */

#endif 	/* __DAGeometry_FWD_DEFINED__ */


#ifndef __DAImage_FWD_DEFINED__
#define __DAImage_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAImage DAImage;
#else
typedef struct DAImage DAImage;
#endif /* __cplusplus */

#endif 	/* __DAImage_FWD_DEFINED__ */


#ifndef __DAMatte_FWD_DEFINED__
#define __DAMatte_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMatte DAMatte;
#else
typedef struct DAMatte DAMatte;
#endif /* __cplusplus */

#endif 	/* __DAMatte_FWD_DEFINED__ */


#ifndef __DAMicrophone_FWD_DEFINED__
#define __DAMicrophone_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMicrophone DAMicrophone;
#else
typedef struct DAMicrophone DAMicrophone;
#endif /* __cplusplus */

#endif 	/* __DAMicrophone_FWD_DEFINED__ */


#ifndef __DAMontage_FWD_DEFINED__
#define __DAMontage_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAMontage DAMontage;
#else
typedef struct DAMontage DAMontage;
#endif /* __cplusplus */

#endif 	/* __DAMontage_FWD_DEFINED__ */


#ifndef __DANumber_FWD_DEFINED__
#define __DANumber_FWD_DEFINED__

#ifdef __cplusplus
typedef class DANumber DANumber;
#else
typedef struct DANumber DANumber;
#endif /* __cplusplus */

#endif 	/* __DANumber_FWD_DEFINED__ */


#ifndef __DAPath2_FWD_DEFINED__
#define __DAPath2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPath2 DAPath2;
#else
typedef struct DAPath2 DAPath2;
#endif /* __cplusplus */

#endif 	/* __DAPath2_FWD_DEFINED__ */


#ifndef __DAPoint2_FWD_DEFINED__
#define __DAPoint2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPoint2 DAPoint2;
#else
typedef struct DAPoint2 DAPoint2;
#endif /* __cplusplus */

#endif 	/* __DAPoint2_FWD_DEFINED__ */


#ifndef __DAPoint3_FWD_DEFINED__
#define __DAPoint3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPoint3 DAPoint3;
#else
typedef struct DAPoint3 DAPoint3;
#endif /* __cplusplus */

#endif 	/* __DAPoint3_FWD_DEFINED__ */


#ifndef __DASound_FWD_DEFINED__
#define __DASound_FWD_DEFINED__

#ifdef __cplusplus
typedef class DASound DASound;
#else
typedef struct DASound DASound;
#endif /* __cplusplus */

#endif 	/* __DASound_FWD_DEFINED__ */


#ifndef __DAString_FWD_DEFINED__
#define __DAString_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAString DAString;
#else
typedef struct DAString DAString;
#endif /* __cplusplus */

#endif 	/* __DAString_FWD_DEFINED__ */


#ifndef __DATransform2_FWD_DEFINED__
#define __DATransform2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATransform2 DATransform2;
#else
typedef struct DATransform2 DATransform2;
#endif /* __cplusplus */

#endif 	/* __DATransform2_FWD_DEFINED__ */


#ifndef __DATransform3_FWD_DEFINED__
#define __DATransform3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATransform3 DATransform3;
#else
typedef struct DATransform3 DATransform3;
#endif /* __cplusplus */

#endif 	/* __DATransform3_FWD_DEFINED__ */


#ifndef __DAVector2_FWD_DEFINED__
#define __DAVector2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAVector2 DAVector2;
#else
typedef struct DAVector2 DAVector2;
#endif /* __cplusplus */

#endif 	/* __DAVector2_FWD_DEFINED__ */


#ifndef __DAVector3_FWD_DEFINED__
#define __DAVector3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAVector3 DAVector3;
#else
typedef struct DAVector3 DAVector3;
#endif /* __cplusplus */

#endif 	/* __DAVector3_FWD_DEFINED__ */


#ifndef __DAFontStyle_FWD_DEFINED__
#define __DAFontStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAFontStyle DAFontStyle;
#else
typedef struct DAFontStyle DAFontStyle;
#endif /* __cplusplus */

#endif 	/* __DAFontStyle_FWD_DEFINED__ */


#ifndef __DALineStyle_FWD_DEFINED__
#define __DALineStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DALineStyle DALineStyle;
#else
typedef struct DALineStyle DALineStyle;
#endif /* __cplusplus */

#endif 	/* __DALineStyle_FWD_DEFINED__ */


#ifndef __DAEndStyle_FWD_DEFINED__
#define __DAEndStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAEndStyle DAEndStyle;
#else
typedef struct DAEndStyle DAEndStyle;
#endif /* __cplusplus */

#endif 	/* __DAEndStyle_FWD_DEFINED__ */


#ifndef __DAJoinStyle_FWD_DEFINED__
#define __DAJoinStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAJoinStyle DAJoinStyle;
#else
typedef struct DAJoinStyle DAJoinStyle;
#endif /* __cplusplus */

#endif 	/* __DAJoinStyle_FWD_DEFINED__ */


#ifndef __DADashStyle_FWD_DEFINED__
#define __DADashStyle_FWD_DEFINED__

#ifdef __cplusplus
typedef class DADashStyle DADashStyle;
#else
typedef struct DADashStyle DADashStyle;
#endif /* __cplusplus */

#endif 	/* __DADashStyle_FWD_DEFINED__ */


#ifndef __DABbox2_FWD_DEFINED__
#define __DABbox2_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABbox2 DABbox2;
#else
typedef struct DABbox2 DABbox2;
#endif /* __cplusplus */

#endif 	/* __DABbox2_FWD_DEFINED__ */


#ifndef __DABbox3_FWD_DEFINED__
#define __DABbox3_FWD_DEFINED__

#ifdef __cplusplus
typedef class DABbox3 DABbox3;
#else
typedef struct DABbox3 DABbox3;
#endif /* __cplusplus */

#endif 	/* __DABbox3_FWD_DEFINED__ */


#ifndef __DAPair_FWD_DEFINED__
#define __DAPair_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPair DAPair;
#else
typedef struct DAPair DAPair;
#endif /* __cplusplus */

#endif 	/* __DAPair_FWD_DEFINED__ */


#ifndef __DAEvent_FWD_DEFINED__
#define __DAEvent_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAEvent DAEvent;
#else
typedef struct DAEvent DAEvent;
#endif /* __cplusplus */

#endif 	/* __DAEvent_FWD_DEFINED__ */


#ifndef __DAArray_FWD_DEFINED__
#define __DAArray_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAArray DAArray;
#else
typedef struct DAArray DAArray;
#endif /* __cplusplus */

#endif 	/* __DAArray_FWD_DEFINED__ */


#ifndef __DATuple_FWD_DEFINED__
#define __DATuple_FWD_DEFINED__

#ifdef __cplusplus
typedef class DATuple DATuple;
#else
typedef struct DATuple DATuple;
#endif /* __cplusplus */

#endif 	/* __DATuple_FWD_DEFINED__ */


#ifndef __DAUserData_FWD_DEFINED__
#define __DAUserData_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAUserData DAUserData;
#else
typedef struct DAUserData DAUserData;
#endif /* __cplusplus */

#endif 	/* __DAUserData_FWD_DEFINED__ */


#ifndef __DAImportationResult_FWD_DEFINED__
#define __DAImportationResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAImportationResult DAImportationResult;
#else
typedef struct DAImportationResult DAImportationResult;
#endif /* __cplusplus */

#endif 	/* __DAImportationResult_FWD_DEFINED__ */


#ifndef __DAPickableResult_FWD_DEFINED__
#define __DAPickableResult_FWD_DEFINED__

#ifdef __cplusplus
typedef class DAPickableResult DAPickableResult;
#else
typedef struct DAPickableResult DAPickableResult;
#endif /* __cplusplus */

#endif 	/* __DAPickableResult_FWD_DEFINED__ */


/* header files for imported files */
#include "oleidl.h"
#include "servprov.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_danim_0000 */
/* [local] */ 

typedef IDAPickableResult *PickableResultPtr;



extern RPC_IF_HANDLE __MIDL_itf_danim_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_danim_0000_v0_0_s_ifspec;


#ifndef __DirectAnimation_LIBRARY_DEFINED__
#define __DirectAnimation_LIBRARY_DEFINED__

/* library DirectAnimation */
/* [version][lcid][helpstring][uuid] */ 









/* [helpstring] */ 
enum __MIDL___MIDL_itf_danim_0136_0001
    {	DAContinueTimeline	= 1L << 0,
	DASwitchFinal	= 1L << 1,
	DASwitchNextTick	= 1L << 2
    } ;
typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0137_0001
    {	DAQUAL_AA_TEXT_ON	= 1L << 0,
	DAQUAL_AA_TEXT_OFF	= 1L << 1,
	DAQUAL_AA_LINES_ON	= 1L << 2,
	DAQUAL_AA_LINES_OFF	= 1L << 3,
	DAQUAL_AA_SOLIDS_ON	= 1L << 4,
	DAQUAL_AA_SOLIDS_OFF	= 1L << 5,
	DAQUAL_AA_CLIP_ON	= 1L << 6,
	DAQUAL_AA_CLIP_OFF	= 1L << 7,
	DAQUAL_MSHTML_COLORS_ON	= 1L << 8,
	DAQUAL_MSHTML_COLORS_OFF	= 1L << 9,
	DAQUAL_QUALITY_TRANSFORMS_ON	= 1L << 10,
	DAQUAL_QUALITY_TRANSFORMS_OFF	= 1L << 11
    } 	DA_IMAGE_QUALITY_FLAGS;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0137_0002
    {	DAINVRECT_MERGE_BOXES	= 1L << 0
    } 	DA_INVALIDATED_RECTS_FLAGS;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0137_0003
    {	DASHSTYLE_SOLID	= 0,
	DASHSTYLE_DASH	= 1L,
	DASHSTYLE_DOT	= 2L,
	DASHSTYLE_DASHDOT	= 3L,
	DASHSTYLE_DASHDOTDOT	= 4L,
	DASHSTYLE_NULL	= 5L
    } 	DA_DASHSTYLE_ENUM;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0137_0004
    {	ENDSTYLE_ROUND	= 0,
	ENDSTYLE_SQUARE	= 1L,
	ENDSTYLE_FLAT	= 2L
    } 	DA_ENDSTYLE_ENUM;

typedef /* [public][helpstring] */ 
enum __MIDL___MIDL_itf_danim_0137_0005
    {	JOINSTYLE_ROUND	= 0,
	JOINSTYLE_BEVEL	= 1L,
	JOINSTYLE_MITER	= 2L
    } 	DA_JOINSTYLE_ENUM;






































/* [helpstring] */ 
enum __MIDL___MIDL_itf_danim_0184_0001
    {	DAAsyncFlag	= 0x1
    } ;
typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0187_0001
    {	DAEmpty	= 0,
	DASolid	= 1,
	DADash	= 2
    } 	DA_DASH_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0187_0002
    {	DAEndFlat	= 0,
	DAEndSquare	= 1,
	DAEndRound	= 2
    } 	DA_END_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0187_0003
    {	DAJoinBevel	= 0,
	DAJoinRound	= 1,
	DAJoinMiter	= 2
    } 	DA_JOIN_STYLE;

typedef /* [public][public][public] */ 
enum __MIDL___MIDL_itf_danim_0195_0001
    {	DAMultimediaTimer	= 0,
	DAContainerTimer	= 1,
	DAWMTimer	= 2
    } 	DA_TIMER_SOURCE;


EXTERN_C const IID LIBID_DirectAnimation;

#ifndef __IDAViewSite_INTERFACE_DEFINED__
#define __IDAViewSite_INTERFACE_DEFINED__

/* interface IDAViewSite */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAViewSite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B3-2C60-11d0-A31D-00AA00B92C03")
    IDAViewSite : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetStatusText( 
            /* [in] */ BSTR StatusText) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewSiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAViewSite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAViewSite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAViewSite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAViewSite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAViewSite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAViewSite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAViewSite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *SetStatusText )( 
            IDAViewSite * This,
            /* [in] */ BSTR StatusText);
        
        END_INTERFACE
    } IDAViewSiteVtbl;

    interface IDAViewSite
    {
        CONST_VTBL struct IDAViewSiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAViewSite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAViewSite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAViewSite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAViewSite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAViewSite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAViewSite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAViewSite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAViewSite_SetStatusText(This,StatusText)	\
    (This)->lpVtbl -> SetStatusText(This,StatusText)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAViewSite_SetStatusText_Proxy( 
    IDAViewSite * This,
    /* [in] */ BSTR StatusText);


void __RPC_STUB IDAViewSite_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAViewSite_INTERFACE_DEFINED__ */


#ifndef __IDAView_INTERFACE_DEFINED__
#define __IDAView_INTERFACE_DEFINED__

/* interface IDAView */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAView;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B4-2C60-11d0-A31D-00AA00B92C03")
    IDAView : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_SimulationTime( 
            /* [retval][out] */ double *simTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tick( 
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Render( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddBvrToRun( 
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveRunningBvr( 
            /* [in] */ LONG id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartModel( 
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StopModel( void) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Window( 
            /* [retval][out] */ long *hwnd) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Window( 
            /* [in] */ long hwnd) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_IDirectDrawSurface( 
            /* [retval][out] */ IUnknown **ddsurf) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_IDirectDrawSurface( 
            /* [in] */ IUnknown *ddsurf) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_DC( 
            /* [retval][out] */ HDC *dc) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_DC( 
            /* [in] */ HDC dc) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CompositeDirectlyToTarget( 
            /* [retval][out] */ VARIANT_BOOL *composeToTarget) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CompositeDirectlyToTarget( 
            /* [in] */ VARIANT_BOOL composeToTarget) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetViewport( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetClipRect( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RePaint( 
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PaletteChanged( 
            /* [in] */ VARIANT_BOOL bNew) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Site( 
            /* [retval][out] */ IDAViewSite **pViewSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Site( 
            /* [in] */ IDAViewSite *pViewSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClientSite( 
            /* [in] */ IOleClientSite *pClientSite) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClientSite( 
            /* [retval][out] */ IOleClientSite **pClientSite) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseMove( 
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseButton( 
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnKey( 
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnFocus( 
            /* [in] */ VARIANT_BOOL bHasFocus) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Preferences( 
            /* [retval][out] */ IDAPreferences **prefs) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE QueryHitPoint( 
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAView * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAView * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAView * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAView * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAView * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAView * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAView * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDAView * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDAView * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAView * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDAView * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDAView * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDAView * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDAView * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDAView * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDAView * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDAView * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDAView * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDAView * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDAView * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDAView * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDAView * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDAView * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDAView * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDAView * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDAView * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDAView * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDAView * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDAView * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDAView * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        END_INTERFACE
    } IDAViewVtbl;

    interface IDAView
    {
        CONST_VTBL struct IDAViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAView_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAView_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAView_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAView_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAView_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAView_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAView_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAView_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDAView_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDAView_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDAView_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDAView_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDAView_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDAView_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDAView_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDAView_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDAView_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDAView_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDAView_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDAView_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDAView_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDAView_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDAView_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDAView_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDAView_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDAView_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDAView_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDAView_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDAView_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDAView_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDAView_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDAView_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDAView_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDAView_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDAView_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDAView_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_SimulationTime_Proxy( 
    IDAView * This,
    /* [retval][out] */ double *simTime);


void __RPC_STUB IDAView_get_SimulationTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_Tick_Proxy( 
    IDAView * This,
    /* [in] */ double simTime,
    /* [retval][out] */ VARIANT_BOOL *needToRender);


void __RPC_STUB IDAView_Tick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_Render_Proxy( 
    IDAView * This);


void __RPC_STUB IDAView_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_AddBvrToRun_Proxy( 
    IDAView * This,
    /* [in] */ IDABehavior *bvr,
    /* [retval][out] */ LONG *pId);


void __RPC_STUB IDAView_AddBvrToRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_RemoveRunningBvr_Proxy( 
    IDAView * This,
    /* [in] */ LONG id);


void __RPC_STUB IDAView_RemoveRunningBvr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_StartModel_Proxy( 
    IDAView * This,
    /* [in] */ IDAImage *pImage,
    /* [in] */ IDASound *pSound,
    /* [in] */ double startTime);


void __RPC_STUB IDAView_StartModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_StopModel_Proxy( 
    IDAView * This);


void __RPC_STUB IDAView_StopModel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Window_Proxy( 
    IDAView * This,
    /* [retval][out] */ long *hwnd);


void __RPC_STUB IDAView_get_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_Window_Proxy( 
    IDAView * This,
    /* [in] */ long hwnd);


void __RPC_STUB IDAView_put_Window_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_IDirectDrawSurface_Proxy( 
    IDAView * This,
    /* [retval][out] */ IUnknown **ddsurf);


void __RPC_STUB IDAView_get_IDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_IDirectDrawSurface_Proxy( 
    IDAView * This,
    /* [in] */ IUnknown *ddsurf);


void __RPC_STUB IDAView_put_IDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_DC_Proxy( 
    IDAView * This,
    /* [retval][out] */ HDC *dc);


void __RPC_STUB IDAView_get_DC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_DC_Proxy( 
    IDAView * This,
    /* [in] */ HDC dc);


void __RPC_STUB IDAView_put_DC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_CompositeDirectlyToTarget_Proxy( 
    IDAView * This,
    /* [retval][out] */ VARIANT_BOOL *composeToTarget);


void __RPC_STUB IDAView_get_CompositeDirectlyToTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_CompositeDirectlyToTarget_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL composeToTarget);


void __RPC_STUB IDAView_put_CompositeDirectlyToTarget_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_SetViewport_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_SetViewport_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_SetClipRect_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_SetClipRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_RePaint_Proxy( 
    IDAView * This,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ LONG w,
    /* [in] */ LONG h);


void __RPC_STUB IDAView_RePaint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_PaletteChanged_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL bNew);


void __RPC_STUB IDAView_PaletteChanged_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Site_Proxy( 
    IDAView * This,
    /* [retval][out] */ IDAViewSite **pViewSite);


void __RPC_STUB IDAView_get_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_Site_Proxy( 
    IDAView * This,
    /* [in] */ IDAViewSite *pViewSite);


void __RPC_STUB IDAView_put_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAView_put_ClientSite_Proxy( 
    IDAView * This,
    /* [in] */ IOleClientSite *pClientSite);


void __RPC_STUB IDAView_put_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_ClientSite_Proxy( 
    IDAView * This,
    /* [retval][out] */ IOleClientSite **pClientSite);


void __RPC_STUB IDAView_get_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnMouseMove_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnMouseMove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnMouseButton_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG xPos,
    /* [in] */ LONG yPos,
    /* [in] */ BYTE button,
    /* [in] */ VARIANT_BOOL bPressed,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnMouseButton_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnKey_Proxy( 
    IDAView * This,
    /* [in] */ double when,
    /* [in] */ LONG key,
    /* [in] */ VARIANT_BOOL bPressed,
    /* [in] */ BYTE modifiers);


void __RPC_STUB IDAView_OnKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_OnFocus_Proxy( 
    IDAView * This,
    /* [in] */ VARIANT_BOOL bHasFocus);


void __RPC_STUB IDAView_OnFocus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAView_get_Preferences_Proxy( 
    IDAView * This,
    /* [retval][out] */ IDAPreferences **prefs);


void __RPC_STUB IDAView_get_Preferences_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAView_QueryHitPoint_Proxy( 
    IDAView * This,
    /* [in] */ DWORD dwAspect,
    /* [in] */ LPCRECT prcBounds,
    /* [in] */ POINT ptLoc,
    /* [in] */ LONG lCloseHint,
    /* [retval][out] */ DWORD *pHitResult);


void __RPC_STUB IDAView_QueryHitPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAView_INTERFACE_DEFINED__ */


#ifndef __IDABehavior_INTERFACE_DEFINED__
#define __IDABehavior_INTERFACE_DEFINED__

/* interface IDABehavior */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("283807B7-2C60-11d0-A31D-00AA00B92C03")
    IDABehavior : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetClassName( 
            /* [retval][out] */ BSTR *pClassName) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Init( 
            /* [in] */ IDABehavior *toBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Importance( 
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RunOnce( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubstituteTime( 
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchTo( 
            /* [in] */ IDABehavior *switchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToNumber( 
            /* [in] */ double numToSwitchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToString( 
            /* [in] */ BSTR strToSwitchTo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Hook( 
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Duration( 
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DurationAnim( 
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Repeat( 
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RepeatForever( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IsReady( 
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABehavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABehavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABehavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABehavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABehavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABehavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABehavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABehavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABehavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABehavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABehavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABehavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDABehaviorVtbl;

    interface IDABehavior
    {
        CONST_VTBL struct IDABehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABehavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABehavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABehavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABehavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABehavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABehavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABehavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABehavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABehavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABehavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABehavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABehavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABehavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABehavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABehavior_GetClassName_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ BSTR *pClassName);


void __RPC_STUB IDABehavior_GetClassName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Init_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABehavior *toBvr);


void __RPC_STUB IDABehavior_Init_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Importance_Proxy( 
    IDABehavior * This,
    /* [in] */ double relativeImportance,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDABehavior_Importance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_RunOnce_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_RunOnce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SubstituteTime_Proxy( 
    IDABehavior * This,
    /* [in] */ IDANumber *xform,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_SubstituteTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchTo_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABehavior *switchTo);


void __RPC_STUB IDABehavior_SwitchTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchToNumber_Proxy( 
    IDABehavior * This,
    /* [in] */ double numToSwitchTo);


void __RPC_STUB IDABehavior_SwitchToNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_SwitchToString_Proxy( 
    IDABehavior * This,
    /* [in] */ BSTR strToSwitchTo);


void __RPC_STUB IDABehavior_SwitchToString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Hook_Proxy( 
    IDABehavior * This,
    /* [in] */ IDABvrHook *notifier,
    /* [retval][out] */ IDABehavior **pBvr);


void __RPC_STUB IDABehavior_Hook_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Duration_Proxy( 
    IDABehavior * This,
    /* [in] */ double duration,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_Duration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_DurationAnim_Proxy( 
    IDABehavior * This,
    /* [in] */ IDANumber *duration,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_DurationAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_Repeat_Proxy( 
    IDABehavior * This,
    /* [in] */ LONG count,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_Repeat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_RepeatForever_Proxy( 
    IDABehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDABehavior_RepeatForever_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDABehavior_IsReady_Proxy( 
    IDABehavior * This,
    /* [in] */ VARIANT_BOOL bBlock,
    /* [retval][out] */ VARIANT_BOOL *b);


void __RPC_STUB IDABehavior_IsReady_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABehavior_INTERFACE_DEFINED__ */


#ifndef __IDANumber_INTERFACE_DEFINED__
#define __IDANumber_INTERFACE_DEFINED__

/* interface IDANumber */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDANumber;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9CDE7340-3C20-11d0-A330-00AA00B92C03")
    IDANumber : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ double *ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToStringAnim( 
            /* [in] */ IDANumber *precision_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToString( 
            /* [in] */ double precision_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDANumberVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDANumber * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDANumber * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDANumber * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDANumber * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDANumber * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDANumber * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDANumber * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDANumber * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDANumber * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDANumber * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDANumber * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDANumber * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDANumber * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDANumber * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDANumber * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDANumber * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDANumber * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDANumber * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDANumber * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDANumber * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDANumber * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDANumber * This,
            /* [retval][out] */ double *ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDANumber * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ToStringAnim )( 
            IDANumber * This,
            /* [in] */ IDANumber *precision_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToString )( 
            IDANumber * This,
            /* [in] */ double precision_0,
            /* [retval][out] */ IDAString **ret_1);
        
        END_INTERFACE
    } IDANumberVtbl;

    interface IDANumber
    {
        CONST_VTBL struct IDANumberVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDANumber_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDANumber_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDANumber_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDANumber_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDANumber_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDANumber_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDANumber_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDANumber_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDANumber_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDANumber_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDANumber_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDANumber_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDANumber_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDANumber_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDANumber_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDANumber_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDANumber_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDANumber_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDANumber_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDANumber_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDANumber_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDANumber_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#define IDANumber_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDANumber_ToStringAnim(This,precision_0,ret_1)	\
    (This)->lpVtbl -> ToStringAnim(This,precision_0,ret_1)

#define IDANumber_ToString(This,precision_0,ret_1)	\
    (This)->lpVtbl -> ToString(This,precision_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDANumber_Extract_Proxy( 
    IDANumber * This,
    /* [retval][out] */ double *ret_0);


void __RPC_STUB IDANumber_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_AnimateProperty_Proxy( 
    IDANumber * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDANumber_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_ToStringAnim_Proxy( 
    IDANumber * This,
    /* [in] */ IDANumber *precision_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDANumber_ToStringAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDANumber_ToString_Proxy( 
    IDANumber * This,
    /* [in] */ double precision_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDANumber_ToString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDANumber_INTERFACE_DEFINED__ */


#ifndef __IDABvrHook_INTERFACE_DEFINED__
#define __IDABvrHook_INTERFACE_DEFINED__

/* interface IDABvrHook */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABvrHook;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3E2487C4-8709-11d0-B177-00C04FC2A0CA")
    IDABvrHook : public IUnknown
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ LONG id,
            /* [in] */ VARIANT_BOOL startingPerformance,
            /* [in] */ double startTime,
            /* [in] */ double gTime,
            /* [in] */ double lTime,
            /* [in] */ IDABehavior *sampleVal,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABvrHookVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABvrHook * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABvrHook * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABvrHook * This);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDABvrHook * This,
            /* [in] */ LONG id,
            /* [in] */ VARIANT_BOOL startingPerformance,
            /* [in] */ double startTime,
            /* [in] */ double gTime,
            /* [in] */ double lTime,
            /* [in] */ IDABehavior *sampleVal,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        END_INTERFACE
    } IDABvrHookVtbl;

    interface IDABvrHook
    {
        CONST_VTBL struct IDABvrHookVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABvrHook_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABvrHook_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABvrHook_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABvrHook_Notify(This,id,startingPerformance,startTime,gTime,lTime,sampleVal,curRunningBvr,ppBvr)	\
    (This)->lpVtbl -> Notify(This,id,startingPerformance,startTime,gTime,lTime,sampleVal,curRunningBvr,ppBvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABvrHook_Notify_Proxy( 
    IDABvrHook * This,
    /* [in] */ LONG id,
    /* [in] */ VARIANT_BOOL startingPerformance,
    /* [in] */ double startTime,
    /* [in] */ double gTime,
    /* [in] */ double lTime,
    /* [in] */ IDABehavior *sampleVal,
    /* [in] */ IDABehavior *curRunningBvr,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDABvrHook_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABvrHook_INTERFACE_DEFINED__ */


#ifndef __IDADrawingSurface_INTERFACE_DEFINED__
#define __IDADrawingSurface_INTERFACE_DEFINED__

/* interface IDADrawingSurface */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADrawingSurface;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BC0BFD34-D21D-11d0-9385-00C04FB6BD36")
    IDADrawingSurface : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **img) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_LineStyle( 
            /* [in] */ IDALineStyle *ls) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_BorderStyle( 
            /* [in] */ IDALineStyle *bs) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_FontStyle( 
            /* [in] */ IDAFontStyle *fs) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClipMatte( 
            /* [in] */ IDAMatte *matte) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_MouseEventsEnabled( 
            /* [in] */ VARIANT_BOOL on) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_HatchFillTransparent( 
            /* [in] */ VARIANT_BOOL fillOff) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalContextImage( 
            /* [retval][out] */ IDAImage **img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clear( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SaveGraphicsState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RestoreGraphicsState( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double opac) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *opac) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Crop( 
            /* [in] */ double lowerLeftX,
            /* [in] */ double lowerLeftY,
            /* [in] */ double upperRightX,
            /* [in] */ double upperRightY) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CropPoints( 
            /* [in] */ IDAPoint2 *min,
            /* [in] */ IDAPoint2 *max) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xform) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineColor( 
            /* [in] */ IDAColor *clr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineWidth( 
            /* [in] */ double w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineDashStyle( 
            /* [in] */ DA_DASH_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineEndStyle( 
            /* [in] */ DA_END_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LineJoinStyle( 
            /* [in] */ DA_JOIN_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderColor( 
            /* [in] */ IDAColor *clr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderWidth( 
            /* [in] */ double w) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderDashStyle( 
            /* [in] */ DA_DASH_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderEndStyle( 
            /* [in] */ DA_END_STYLE obsolete) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BorderJoinStyle( 
            /* [in] */ DA_JOIN_STYLE id) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Font( 
            /* [in] */ BSTR FontFace,
            /* [in] */ LONG sizeInPoints,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL italic,
            /* [in] */ VARIANT_BOOL underline,
            /* [in] */ VARIANT_BOOL strikethrough) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextureFill( 
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageFill( 
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillTexture( 
            /* [in] */ IDAImage *img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillImage( 
            /* [in] */ IDAImage *img) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillStyle( 
            /* [in] */ int ID) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillColor( 
            /* [in] */ IDAColor *foreground) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SecondaryFillColor( 
            /* [in] */ IDAColor *val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientShape( 
            /* [in] */ VARIANT pts) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientExtent( 
            /* [in] */ double startx,
            /* [in] */ double starty,
            /* [in] */ double finishx,
            /* [in] */ double finishy) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientExtentPoints( 
            /* [in] */ IDAPoint2 *startColor,
            /* [in] */ IDAPoint2 *stopColor) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientRolloffPower( 
            /* [in] */ double power) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientRolloffPowerAnim( 
            /* [in] */ IDANumber *power) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FixedFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HorizontalFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE VerticalFillScale( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AutoSizeFillScale( void) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolylineEx( 
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polyline( 
            /* [in] */ VARIANT v) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolygonEx( 
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polygon( 
            /* [in] */ VARIANT v) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LinePoints( 
            /* [in] */ IDAPoint2 *p1,
            /* [in] */ IDAPoint2 *p2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Line( 
            /* [in] */ double startX,
            /* [in] */ double startY,
            /* [in] */ double endX,
            /* [in] */ double endY) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadians( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcDegrees( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Oval( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rect( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRect( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadians( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieDegrees( 
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Text( 
            /* [in] */ BSTR str,
            /* [in] */ double xPos,
            /* [in] */ double yPos) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextPoint( 
            /* [in] */ BSTR str,
            /* [in] */ IDAPoint2 *point) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillPath( 
            /* [in] */ IDAPath2 *path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DrawPath( 
            /* [in] */ IDAPath2 *path) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OverlayImage( 
            /* [in] */ IDAImage *img) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDADrawingSurfaceVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADrawingSurface * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADrawingSurface * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADrawingSurface * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADrawingSurface * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADrawingSurface * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADrawingSurface * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDADrawingSurface * This,
            /* [retval][out] */ IDAImage **img);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_LineStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDALineStyle *ls);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_BorderStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDALineStyle *bs);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_FontStyle )( 
            IDADrawingSurface * This,
            /* [in] */ IDAFontStyle *fs);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClipMatte )( 
            IDADrawingSurface * This,
            /* [in] */ IDAMatte *matte);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_MouseEventsEnabled )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT_BOOL on);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_HatchFillTransparent )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT_BOOL fillOff);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalContextImage )( 
            IDADrawingSurface * This,
            /* [retval][out] */ IDAImage **img);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clear )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *SaveGraphicsState )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *RestoreGraphicsState )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDADrawingSurface * This,
            /* [in] */ double opac);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDADrawingSurface * This,
            /* [in] */ IDANumber *opac);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDADrawingSurface * This,
            /* [in] */ double lowerLeftX,
            /* [in] */ double lowerLeftY,
            /* [in] */ double upperRightX,
            /* [in] */ double upperRightY);
        
        HRESULT ( STDMETHODCALLTYPE *CropPoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *min,
            /* [in] */ IDAPoint2 *max);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDADrawingSurface * This,
            /* [in] */ IDATransform2 *xform);
        
        HRESULT ( STDMETHODCALLTYPE *LineColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *clr);
        
        HRESULT ( STDMETHODCALLTYPE *LineWidth )( 
            IDADrawingSurface * This,
            /* [in] */ double w);
        
        HRESULT ( STDMETHODCALLTYPE *LineDashStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_DASH_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *LineEndStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_END_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *LineJoinStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_JOIN_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *BorderColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *clr);
        
        HRESULT ( STDMETHODCALLTYPE *BorderWidth )( 
            IDADrawingSurface * This,
            /* [in] */ double w);
        
        HRESULT ( STDMETHODCALLTYPE *BorderDashStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_DASH_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *BorderEndStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_END_STYLE obsolete);
        
        HRESULT ( STDMETHODCALLTYPE *BorderJoinStyle )( 
            IDADrawingSurface * This,
            /* [in] */ DA_JOIN_STYLE id);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR FontFace,
            /* [in] */ LONG sizeInPoints,
            /* [in] */ VARIANT_BOOL Bold,
            /* [in] */ VARIANT_BOOL italic,
            /* [in] */ VARIANT_BOOL underline,
            /* [in] */ VARIANT_BOOL strikethrough);
        
        HRESULT ( STDMETHODCALLTYPE *TextureFill )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3);
        
        HRESULT ( STDMETHODCALLTYPE *ImageFill )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *obsolete1,
            /* [in] */ double obsolete2,
            /* [in] */ double obsolete3);
        
        HRESULT ( STDMETHODCALLTYPE *FillTexture )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        HRESULT ( STDMETHODCALLTYPE *FillImage )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        HRESULT ( STDMETHODCALLTYPE *FillStyle )( 
            IDADrawingSurface * This,
            /* [in] */ int ID);
        
        HRESULT ( STDMETHODCALLTYPE *FillColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *foreground);
        
        HRESULT ( STDMETHODCALLTYPE *SecondaryFillColor )( 
            IDADrawingSurface * This,
            /* [in] */ IDAColor *val);
        
        HRESULT ( STDMETHODCALLTYPE *GradientShape )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT pts);
        
        HRESULT ( STDMETHODCALLTYPE *GradientExtent )( 
            IDADrawingSurface * This,
            /* [in] */ double startx,
            /* [in] */ double starty,
            /* [in] */ double finishx,
            /* [in] */ double finishy);
        
        HRESULT ( STDMETHODCALLTYPE *GradientExtentPoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *startColor,
            /* [in] */ IDAPoint2 *stopColor);
        
        HRESULT ( STDMETHODCALLTYPE *GradientRolloffPower )( 
            IDADrawingSurface * This,
            /* [in] */ double power);
        
        HRESULT ( STDMETHODCALLTYPE *GradientRolloffPowerAnim )( 
            IDADrawingSurface * This,
            /* [in] */ IDANumber *power);
        
        HRESULT ( STDMETHODCALLTYPE *FixedFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *HorizontalFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *VerticalFillScale )( 
            IDADrawingSurface * This);
        
        HRESULT ( STDMETHODCALLTYPE *AutoSizeFillScale )( 
            IDADrawingSurface * This);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDADrawingSurface * This,
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT v);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolygonEx )( 
            IDADrawingSurface * This,
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *pts[  ]);
        
        HRESULT ( STDMETHODCALLTYPE *Polygon )( 
            IDADrawingSurface * This,
            /* [in] */ VARIANT v);
        
        HRESULT ( STDMETHODCALLTYPE *LinePoints )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPoint2 *p1,
            /* [in] */ IDAPoint2 *p2);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDADrawingSurface * This,
            /* [in] */ double startX,
            /* [in] */ double startY,
            /* [in] */ double endX,
            /* [in] */ double endY);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double w,
            /* [in] */ double h,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDADrawingSurface * This,
            /* [in] */ double xPos,
            /* [in] */ double yPos,
            /* [in] */ double startAngle,
            /* [in] */ double endAngle,
            /* [in] */ double arcWidth,
            /* [in] */ double arcHeight);
        
        HRESULT ( STDMETHODCALLTYPE *Text )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR str,
            /* [in] */ double xPos,
            /* [in] */ double yPos);
        
        HRESULT ( STDMETHODCALLTYPE *TextPoint )( 
            IDADrawingSurface * This,
            /* [in] */ BSTR str,
            /* [in] */ IDAPoint2 *point);
        
        HRESULT ( STDMETHODCALLTYPE *FillPath )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPath2 *path);
        
        HRESULT ( STDMETHODCALLTYPE *DrawPath )( 
            IDADrawingSurface * This,
            /* [in] */ IDAPath2 *path);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayImage )( 
            IDADrawingSurface * This,
            /* [in] */ IDAImage *img);
        
        END_INTERFACE
    } IDADrawingSurfaceVtbl;

    interface IDADrawingSurface
    {
        CONST_VTBL struct IDADrawingSurfaceVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADrawingSurface_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADrawingSurface_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADrawingSurface_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADrawingSurface_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADrawingSurface_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADrawingSurface_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADrawingSurface_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADrawingSurface_get_Image(This,img)	\
    (This)->lpVtbl -> get_Image(This,img)

#define IDADrawingSurface_put_LineStyle(This,ls)	\
    (This)->lpVtbl -> put_LineStyle(This,ls)

#define IDADrawingSurface_put_BorderStyle(This,bs)	\
    (This)->lpVtbl -> put_BorderStyle(This,bs)

#define IDADrawingSurface_put_FontStyle(This,fs)	\
    (This)->lpVtbl -> put_FontStyle(This,fs)

#define IDADrawingSurface_put_ClipMatte(This,matte)	\
    (This)->lpVtbl -> put_ClipMatte(This,matte)

#define IDADrawingSurface_put_MouseEventsEnabled(This,on)	\
    (This)->lpVtbl -> put_MouseEventsEnabled(This,on)

#define IDADrawingSurface_put_HatchFillTransparent(This,fillOff)	\
    (This)->lpVtbl -> put_HatchFillTransparent(This,fillOff)

#define IDADrawingSurface_get_LocalContextImage(This,img)	\
    (This)->lpVtbl -> get_LocalContextImage(This,img)

#define IDADrawingSurface_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IDADrawingSurface_Clear(This)	\
    (This)->lpVtbl -> Clear(This)

#define IDADrawingSurface_SaveGraphicsState(This)	\
    (This)->lpVtbl -> SaveGraphicsState(This)

#define IDADrawingSurface_RestoreGraphicsState(This)	\
    (This)->lpVtbl -> RestoreGraphicsState(This)

#define IDADrawingSurface_Opacity(This,opac)	\
    (This)->lpVtbl -> Opacity(This,opac)

#define IDADrawingSurface_OpacityAnim(This,opac)	\
    (This)->lpVtbl -> OpacityAnim(This,opac)

#define IDADrawingSurface_Crop(This,lowerLeftX,lowerLeftY,upperRightX,upperRightY)	\
    (This)->lpVtbl -> Crop(This,lowerLeftX,lowerLeftY,upperRightX,upperRightY)

#define IDADrawingSurface_CropPoints(This,min,max)	\
    (This)->lpVtbl -> CropPoints(This,min,max)

#define IDADrawingSurface_Transform(This,xform)	\
    (This)->lpVtbl -> Transform(This,xform)

#define IDADrawingSurface_LineColor(This,clr)	\
    (This)->lpVtbl -> LineColor(This,clr)

#define IDADrawingSurface_LineWidth(This,w)	\
    (This)->lpVtbl -> LineWidth(This,w)

#define IDADrawingSurface_LineDashStyle(This,id)	\
    (This)->lpVtbl -> LineDashStyle(This,id)

#define IDADrawingSurface_LineEndStyle(This,id)	\
    (This)->lpVtbl -> LineEndStyle(This,id)

#define IDADrawingSurface_LineJoinStyle(This,id)	\
    (This)->lpVtbl -> LineJoinStyle(This,id)

#define IDADrawingSurface_BorderColor(This,clr)	\
    (This)->lpVtbl -> BorderColor(This,clr)

#define IDADrawingSurface_BorderWidth(This,w)	\
    (This)->lpVtbl -> BorderWidth(This,w)

#define IDADrawingSurface_BorderDashStyle(This,id)	\
    (This)->lpVtbl -> BorderDashStyle(This,id)

#define IDADrawingSurface_BorderEndStyle(This,obsolete)	\
    (This)->lpVtbl -> BorderEndStyle(This,obsolete)

#define IDADrawingSurface_BorderJoinStyle(This,id)	\
    (This)->lpVtbl -> BorderJoinStyle(This,id)

#define IDADrawingSurface_Font(This,FontFace,sizeInPoints,Bold,italic,underline,strikethrough)	\
    (This)->lpVtbl -> Font(This,FontFace,sizeInPoints,Bold,italic,underline,strikethrough)

#define IDADrawingSurface_TextureFill(This,obsolete1,obsolete2,obsolete3)	\
    (This)->lpVtbl -> TextureFill(This,obsolete1,obsolete2,obsolete3)

#define IDADrawingSurface_ImageFill(This,obsolete1,obsolete2,obsolete3)	\
    (This)->lpVtbl -> ImageFill(This,obsolete1,obsolete2,obsolete3)

#define IDADrawingSurface_FillTexture(This,img)	\
    (This)->lpVtbl -> FillTexture(This,img)

#define IDADrawingSurface_FillImage(This,img)	\
    (This)->lpVtbl -> FillImage(This,img)

#define IDADrawingSurface_FillStyle(This,ID)	\
    (This)->lpVtbl -> FillStyle(This,ID)

#define IDADrawingSurface_FillColor(This,foreground)	\
    (This)->lpVtbl -> FillColor(This,foreground)

#define IDADrawingSurface_SecondaryFillColor(This,val)	\
    (This)->lpVtbl -> SecondaryFillColor(This,val)

#define IDADrawingSurface_GradientShape(This,pts)	\
    (This)->lpVtbl -> GradientShape(This,pts)

#define IDADrawingSurface_GradientExtent(This,startx,starty,finishx,finishy)	\
    (This)->lpVtbl -> GradientExtent(This,startx,starty,finishx,finishy)

#define IDADrawingSurface_GradientExtentPoints(This,startColor,stopColor)	\
    (This)->lpVtbl -> GradientExtentPoints(This,startColor,stopColor)

#define IDADrawingSurface_GradientRolloffPower(This,power)	\
    (This)->lpVtbl -> GradientRolloffPower(This,power)

#define IDADrawingSurface_GradientRolloffPowerAnim(This,power)	\
    (This)->lpVtbl -> GradientRolloffPowerAnim(This,power)

#define IDADrawingSurface_FixedFillScale(This)	\
    (This)->lpVtbl -> FixedFillScale(This)

#define IDADrawingSurface_HorizontalFillScale(This)	\
    (This)->lpVtbl -> HorizontalFillScale(This)

#define IDADrawingSurface_VerticalFillScale(This)	\
    (This)->lpVtbl -> VerticalFillScale(This)

#define IDADrawingSurface_AutoSizeFillScale(This)	\
    (This)->lpVtbl -> AutoSizeFillScale(This)

#define IDADrawingSurface_PolylineEx(This,numPts,pts)	\
    (This)->lpVtbl -> PolylineEx(This,numPts,pts)

#define IDADrawingSurface_Polyline(This,v)	\
    (This)->lpVtbl -> Polyline(This,v)

#define IDADrawingSurface_PolygonEx(This,numPts,pts)	\
    (This)->lpVtbl -> PolygonEx(This,numPts,pts)

#define IDADrawingSurface_Polygon(This,v)	\
    (This)->lpVtbl -> Polygon(This,v)

#define IDADrawingSurface_LinePoints(This,p1,p2)	\
    (This)->lpVtbl -> LinePoints(This,p1,p2)

#define IDADrawingSurface_Line(This,startX,startY,endX,endY)	\
    (This)->lpVtbl -> Line(This,startX,startY,endX,endY)

#define IDADrawingSurface_ArcRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> ArcRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_ArcDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> ArcDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_Oval(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> Oval(This,xPos,yPos,w,h)

#define IDADrawingSurface_Rect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> Rect(This,xPos,yPos,w,h)

#define IDADrawingSurface_RoundRect(This,xPos,yPos,w,h,arcWidth,arcHeight)	\
    (This)->lpVtbl -> RoundRect(This,xPos,yPos,w,h,arcWidth,arcHeight)

#define IDADrawingSurface_PieRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> PieRadians(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_PieDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)	\
    (This)->lpVtbl -> PieDegrees(This,xPos,yPos,startAngle,endAngle,arcWidth,arcHeight)

#define IDADrawingSurface_Text(This,str,xPos,yPos)	\
    (This)->lpVtbl -> Text(This,str,xPos,yPos)

#define IDADrawingSurface_TextPoint(This,str,point)	\
    (This)->lpVtbl -> TextPoint(This,str,point)

#define IDADrawingSurface_FillPath(This,path)	\
    (This)->lpVtbl -> FillPath(This,path)

#define IDADrawingSurface_DrawPath(This,path)	\
    (This)->lpVtbl -> DrawPath(This,path)

#define IDADrawingSurface_OverlayImage(This,img)	\
    (This)->lpVtbl -> OverlayImage(This,img)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_get_Image_Proxy( 
    IDADrawingSurface * This,
    /* [retval][out] */ IDAImage **img);


void __RPC_STUB IDADrawingSurface_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_LineStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDALineStyle *ls);


void __RPC_STUB IDADrawingSurface_put_LineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_BorderStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDALineStyle *bs);


void __RPC_STUB IDADrawingSurface_put_BorderStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_FontStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAFontStyle *fs);


void __RPC_STUB IDADrawingSurface_put_FontStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_ClipMatte_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAMatte *matte);


void __RPC_STUB IDADrawingSurface_put_ClipMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_MouseEventsEnabled_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT_BOOL on);


void __RPC_STUB IDADrawingSurface_put_MouseEventsEnabled_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_put_HatchFillTransparent_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT_BOOL fillOff);


void __RPC_STUB IDADrawingSurface_put_HatchFillTransparent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_get_LocalContextImage_Proxy( 
    IDADrawingSurface * This,
    /* [retval][out] */ IDAImage **img);


void __RPC_STUB IDADrawingSurface_get_LocalContextImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Reset_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Clear_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_Clear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_SaveGraphicsState_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_SaveGraphicsState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_RestoreGraphicsState_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_RestoreGraphicsState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Opacity_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double opac);


void __RPC_STUB IDADrawingSurface_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_OpacityAnim_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDANumber *opac);


void __RPC_STUB IDADrawingSurface_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Crop_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double lowerLeftX,
    /* [in] */ double lowerLeftY,
    /* [in] */ double upperRightX,
    /* [in] */ double upperRightY);


void __RPC_STUB IDADrawingSurface_Crop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_CropPoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *min,
    /* [in] */ IDAPoint2 *max);


void __RPC_STUB IDADrawingSurface_CropPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Transform_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDATransform2 *xform);


void __RPC_STUB IDADrawingSurface_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *clr);


void __RPC_STUB IDADrawingSurface_LineColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineWidth_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double w);


void __RPC_STUB IDADrawingSurface_LineWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineDashStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_DASH_STYLE id);


void __RPC_STUB IDADrawingSurface_LineDashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineEndStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_END_STYLE id);


void __RPC_STUB IDADrawingSurface_LineEndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LineJoinStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_JOIN_STYLE id);


void __RPC_STUB IDADrawingSurface_LineJoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *clr);


void __RPC_STUB IDADrawingSurface_BorderColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderWidth_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double w);


void __RPC_STUB IDADrawingSurface_BorderWidth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderDashStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_DASH_STYLE id);


void __RPC_STUB IDADrawingSurface_BorderDashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderEndStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_END_STYLE obsolete);


void __RPC_STUB IDADrawingSurface_BorderEndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_BorderJoinStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ DA_JOIN_STYLE id);


void __RPC_STUB IDADrawingSurface_BorderJoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Font_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR FontFace,
    /* [in] */ LONG sizeInPoints,
    /* [in] */ VARIANT_BOOL Bold,
    /* [in] */ VARIANT_BOOL italic,
    /* [in] */ VARIANT_BOOL underline,
    /* [in] */ VARIANT_BOOL strikethrough);


void __RPC_STUB IDADrawingSurface_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_TextureFill_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *obsolete1,
    /* [in] */ double obsolete2,
    /* [in] */ double obsolete3);


void __RPC_STUB IDADrawingSurface_TextureFill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ImageFill_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *obsolete1,
    /* [in] */ double obsolete2,
    /* [in] */ double obsolete3);


void __RPC_STUB IDADrawingSurface_ImageFill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillTexture_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_FillTexture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillImage_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_FillImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillStyle_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ int ID);


void __RPC_STUB IDADrawingSurface_FillStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *foreground);


void __RPC_STUB IDADrawingSurface_FillColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_SecondaryFillColor_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAColor *val);


void __RPC_STUB IDADrawingSurface_SecondaryFillColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientShape_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT pts);


void __RPC_STUB IDADrawingSurface_GradientShape_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientExtent_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double startx,
    /* [in] */ double starty,
    /* [in] */ double finishx,
    /* [in] */ double finishy);


void __RPC_STUB IDADrawingSurface_GradientExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientExtentPoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *startColor,
    /* [in] */ IDAPoint2 *stopColor);


void __RPC_STUB IDADrawingSurface_GradientExtentPoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientRolloffPower_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double power);


void __RPC_STUB IDADrawingSurface_GradientRolloffPower_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_GradientRolloffPowerAnim_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDANumber *power);


void __RPC_STUB IDADrawingSurface_GradientRolloffPowerAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FixedFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_FixedFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_HorizontalFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_HorizontalFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_VerticalFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_VerticalFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_AutoSizeFillScale_Proxy( 
    IDADrawingSurface * This);


void __RPC_STUB IDADrawingSurface_AutoSizeFillScale_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_PolylineEx_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *pts[  ]);


void __RPC_STUB IDADrawingSurface_PolylineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Polyline_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IDADrawingSurface_Polyline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDADrawingSurface_PolygonEx_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *pts[  ]);


void __RPC_STUB IDADrawingSurface_PolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Polygon_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ VARIANT v);


void __RPC_STUB IDADrawingSurface_Polygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_LinePoints_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPoint2 *p1,
    /* [in] */ IDAPoint2 *p2);


void __RPC_STUB IDADrawingSurface_LinePoints_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Line_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double startX,
    /* [in] */ double startY,
    /* [in] */ double endX,
    /* [in] */ double endY);


void __RPC_STUB IDADrawingSurface_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ArcRadians_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_ArcRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_ArcDegrees_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_ArcDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Oval_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h);


void __RPC_STUB IDADrawingSurface_Oval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Rect_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h);


void __RPC_STUB IDADrawingSurface_Rect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_RoundRect_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double w,
    /* [in] */ double h,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_RoundRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_PieRadians_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_PieRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_PieDegrees_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ double xPos,
    /* [in] */ double yPos,
    /* [in] */ double startAngle,
    /* [in] */ double endAngle,
    /* [in] */ double arcWidth,
    /* [in] */ double arcHeight);


void __RPC_STUB IDADrawingSurface_PieDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_Text_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR str,
    /* [in] */ double xPos,
    /* [in] */ double yPos);


void __RPC_STUB IDADrawingSurface_Text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_TextPoint_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ BSTR str,
    /* [in] */ IDAPoint2 *point);


void __RPC_STUB IDADrawingSurface_TextPoint_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_FillPath_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPath2 *path);


void __RPC_STUB IDADrawingSurface_FillPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_DrawPath_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAPath2 *path);


void __RPC_STUB IDADrawingSurface_DrawPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDADrawingSurface_OverlayImage_Proxy( 
    IDADrawingSurface * This,
    /* [in] */ IDAImage *img);


void __RPC_STUB IDADrawingSurface_OverlayImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDADrawingSurface_INTERFACE_DEFINED__ */


#ifndef __IDAPickableResult_INTERFACE_DEFINED__
#define __IDAPickableResult_INTERFACE_DEFINED__

/* interface IDAPickableResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPickableResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A933703-E36F-11d0-9B99-00C04FC2F51D")
    IDAPickableResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Geometry( 
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_PickEvent( 
            /* [retval][out] */ IDAEvent **ppPickEvent) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPickableResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPickableResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPickableResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPickableResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPickableResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPickableResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPickableResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPickableResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Geometry )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PickEvent )( 
            IDAPickableResult * This,
            /* [retval][out] */ IDAEvent **ppPickEvent);
        
        END_INTERFACE
    } IDAPickableResultVtbl;

    interface IDAPickableResult
    {
        CONST_VTBL struct IDAPickableResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPickableResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPickableResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPickableResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPickableResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPickableResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPickableResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPickableResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPickableResult_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAPickableResult_get_Geometry(This,ppGeometry)	\
    (This)->lpVtbl -> get_Geometry(This,ppGeometry)

#define IDAPickableResult_get_PickEvent(This,ppPickEvent)	\
    (This)->lpVtbl -> get_PickEvent(This,ppPickEvent)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_Image_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAPickableResult_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_Geometry_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAPickableResult_get_Geometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAPickableResult_get_PickEvent_Proxy( 
    IDAPickableResult * This,
    /* [retval][out] */ IDAEvent **ppPickEvent);


void __RPC_STUB IDAPickableResult_get_PickEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPickableResult_INTERFACE_DEFINED__ */


#ifndef __IDAEvent_INTERFACE_DEFINED__
#define __IDAEvent_INTERFACE_DEFINED__

/* interface IDAEvent */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAEvent;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("50B4791E-4731-11d0-8912-00C04FC2A0CA")
    IDAEvent : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Snapshot( 
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AttachData( 
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ScriptCallback( 
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAEventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAEvent * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAEvent * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAEvent * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAEvent * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAEvent * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAEvent * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAEvent * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAEvent * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAEvent * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAEvent * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAEvent * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAEvent * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAEvent * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAEvent * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAEvent * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAEvent * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAEvent * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAEvent * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAEvent * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDAEvent * This,
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Snapshot )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AttachData )( 
            IDAEvent * This,
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDAEvent * This,
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        END_INTERFACE
    } IDAEventVtbl;

    interface IDAEvent
    {
        CONST_VTBL struct IDAEventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAEvent_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAEvent_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAEvent_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAEvent_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAEvent_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAEvent_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAEvent_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAEvent_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAEvent_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAEvent_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAEvent_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAEvent_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAEvent_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAEvent_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAEvent_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAEvent_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAEvent_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAEvent_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAEvent_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAEvent_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAEvent_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAEvent_Notify(This,notifier_0,ret_1)	\
    (This)->lpVtbl -> Notify(This,notifier_0,ret_1)

#define IDAEvent_Snapshot(This,b_0,ret_1)	\
    (This)->lpVtbl -> Snapshot(This,b_0,ret_1)

#define IDAEvent_AttachData(This,data_0,ret_1)	\
    (This)->lpVtbl -> AttachData(This,data_0,ret_1)

#define IDAEvent_ScriptCallback(This,scriptlet_0,language_1,ret_2)	\
    (This)->lpVtbl -> ScriptCallback(This,scriptlet_0,language_1,ret_2)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAEvent_Notify_Proxy( 
    IDAEvent * This,
    /* [in] */ IDAUntilNotifier *notifier_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_Snapshot_Proxy( 
    IDAEvent * This,
    /* [in] */ IDABehavior *b_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_Snapshot_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_AttachData_Proxy( 
    IDAEvent * This,
    /* [in] */ IDABehavior *data_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAEvent_AttachData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAEvent_ScriptCallback_Proxy( 
    IDAEvent * This,
    /* [in] */ BSTR scriptlet_0,
    /* [in] */ BSTR language_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAEvent_ScriptCallback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAEvent_INTERFACE_DEFINED__ */


#ifndef __IDA2Behavior_INTERFACE_DEFINED__
#define __IDA2Behavior_INTERFACE_DEFINED__

/* interface IDA2Behavior */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Behavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("9CADDC0C-AD56-11d1-9FF8-00C04FA32195")
    IDA2Behavior : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SwitchToEx( 
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyPreference( 
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ExtendedAttrib( 
            /* [in] */ BSTR arg1,
            /* [in] */ VARIANT arg2,
            /* [retval][out] */ IDABehavior **ppResult) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2BehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Behavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Behavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Behavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Behavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Behavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Behavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Behavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Behavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Behavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Behavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Behavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Behavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Behavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Behavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Behavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Behavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Behavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Behavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Behavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToEx )( 
            IDA2Behavior * This,
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyPreference )( 
            IDA2Behavior * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ExtendedAttrib )( 
            IDA2Behavior * This,
            /* [in] */ BSTR arg1,
            /* [in] */ VARIANT arg2,
            /* [retval][out] */ IDABehavior **ppResult);
        
        END_INTERFACE
    } IDA2BehaviorVtbl;

    interface IDA2Behavior
    {
        CONST_VTBL struct IDA2BehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Behavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Behavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Behavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Behavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Behavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Behavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Behavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Behavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Behavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Behavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Behavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Behavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Behavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Behavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Behavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Behavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Behavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Behavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Behavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Behavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Behavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Behavior_SwitchToEx(This,newBvr,dwFlags)	\
    (This)->lpVtbl -> SwitchToEx(This,newBvr,dwFlags)

#define IDA2Behavior_ApplyPreference(This,pref,val,bvr)	\
    (This)->lpVtbl -> ApplyPreference(This,pref,val,bvr)

#define IDA2Behavior_ExtendedAttrib(This,arg1,arg2,ppResult)	\
    (This)->lpVtbl -> ExtendedAttrib(This,arg1,arg2,ppResult)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Behavior_SwitchToEx_Proxy( 
    IDA2Behavior * This,
    /* [in] */ IDABehavior *newBvr,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2Behavior_SwitchToEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Behavior_ApplyPreference_Proxy( 
    IDA2Behavior * This,
    /* [in] */ BSTR pref,
    /* [in] */ VARIANT val,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDA2Behavior_ApplyPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Behavior_ExtendedAttrib_Proxy( 
    IDA2Behavior * This,
    /* [in] */ BSTR arg1,
    /* [in] */ VARIANT arg2,
    /* [retval][out] */ IDABehavior **ppResult);


void __RPC_STUB IDA2Behavior_ExtendedAttrib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Behavior_INTERFACE_DEFINED__ */


#ifndef __IDAImport_INTERFACE_DEFINED__
#define __IDAImport_INTERFACE_DEFINED__

/* interface IDAImport */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImport;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC54BEAA-5B12-11d1-8E7B-00C04FC29D46")
    IDAImport : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportStatus( 
            /* [retval][out] */ LONG *status) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportCancel( void) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_ImportPriority( 
            /* [retval][out] */ float *prio) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ImportPriority( 
            /* [in] */ float prio) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImportVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImport * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImport * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImport * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImport * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImport * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImport * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImport * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAImport * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAImport * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAImport * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAImport * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAImport * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAImport * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAImport * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAImport * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAImport * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAImport * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAImport * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAImport * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAImport * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAImport * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *ImportStatus )( 
            IDAImport * This,
            /* [retval][out] */ LONG *status);
        
        HRESULT ( STDMETHODCALLTYPE *ImportCancel )( 
            IDAImport * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_ImportPriority )( 
            IDAImport * This,
            /* [retval][out] */ float *prio);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ImportPriority )( 
            IDAImport * This,
            /* [in] */ float prio);
        
        END_INTERFACE
    } IDAImportVtbl;

    interface IDAImport
    {
        CONST_VTBL struct IDAImportVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImport_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImport_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImport_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImport_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImport_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImport_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImport_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImport_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAImport_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAImport_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAImport_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAImport_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAImport_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAImport_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAImport_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAImport_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAImport_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAImport_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAImport_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAImport_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAImport_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAImport_ImportStatus(This,status)	\
    (This)->lpVtbl -> ImportStatus(This,status)

#define IDAImport_ImportCancel(This)	\
    (This)->lpVtbl -> ImportCancel(This)

#define IDAImport_get_ImportPriority(This,prio)	\
    (This)->lpVtbl -> get_ImportPriority(This,prio)

#define IDAImport_put_ImportPriority(This,prio)	\
    (This)->lpVtbl -> put_ImportPriority(This,prio)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAImport_ImportStatus_Proxy( 
    IDAImport * This,
    /* [retval][out] */ LONG *status);


void __RPC_STUB IDAImport_ImportStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImport_ImportCancel_Proxy( 
    IDAImport * This);


void __RPC_STUB IDAImport_ImportCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImport_get_ImportPriority_Proxy( 
    IDAImport * This,
    /* [retval][out] */ float *prio);


void __RPC_STUB IDAImport_get_ImportPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAImport_put_ImportPriority_Proxy( 
    IDAImport * This,
    /* [in] */ float prio);


void __RPC_STUB IDAImport_put_ImportPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImport_INTERFACE_DEFINED__ */


#ifndef __IDAModifiableBehavior_INTERFACE_DEFINED__
#define __IDAModifiableBehavior_INTERFACE_DEFINED__

/* interface IDAModifiableBehavior */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAModifiableBehavior;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FC54BEAB-5B12-11d1-8E7B-00C04FC29D46")
    IDAModifiableBehavior : public IDABehavior
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CurrentBehavior( 
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_CurrentBehavior( 
            /* [in] */ VARIANT val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SwitchToEx( 
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAModifiableBehaviorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAModifiableBehavior * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAModifiableBehavior * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAModifiableBehavior * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAModifiableBehavior * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAModifiableBehavior * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAModifiableBehavior * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAModifiableBehavior * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAModifiableBehavior * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAModifiableBehavior * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAModifiableBehavior * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAModifiableBehavior * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAModifiableBehavior * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAModifiableBehavior * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CurrentBehavior )( 
            IDAModifiableBehavior * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CurrentBehavior )( 
            IDAModifiableBehavior * This,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToEx )( 
            IDAModifiableBehavior * This,
            /* [in] */ IDABehavior *newBvr,
            /* [in] */ DWORD dwFlags);
        
        END_INTERFACE
    } IDAModifiableBehaviorVtbl;

    interface IDAModifiableBehavior
    {
        CONST_VTBL struct IDAModifiableBehaviorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAModifiableBehavior_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAModifiableBehavior_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAModifiableBehavior_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAModifiableBehavior_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAModifiableBehavior_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAModifiableBehavior_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAModifiableBehavior_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAModifiableBehavior_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAModifiableBehavior_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAModifiableBehavior_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAModifiableBehavior_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAModifiableBehavior_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAModifiableBehavior_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAModifiableBehavior_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAModifiableBehavior_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAModifiableBehavior_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAModifiableBehavior_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAModifiableBehavior_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAModifiableBehavior_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAModifiableBehavior_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAModifiableBehavior_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAModifiableBehavior_get_CurrentBehavior(This,bvr)	\
    (This)->lpVtbl -> get_CurrentBehavior(This,bvr)

#define IDAModifiableBehavior_put_CurrentBehavior(This,val)	\
    (This)->lpVtbl -> put_CurrentBehavior(This,val)

#define IDAModifiableBehavior_SwitchToEx(This,newBvr,dwFlags)	\
    (This)->lpVtbl -> SwitchToEx(This,newBvr,dwFlags)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_get_CurrentBehavior_Proxy( 
    IDAModifiableBehavior * This,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDAModifiableBehavior_get_CurrentBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_put_CurrentBehavior_Proxy( 
    IDAModifiableBehavior * This,
    /* [in] */ VARIANT val);


void __RPC_STUB IDAModifiableBehavior_put_CurrentBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAModifiableBehavior_SwitchToEx_Proxy( 
    IDAModifiableBehavior * This,
    /* [in] */ IDABehavior *newBvr,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDAModifiableBehavior_SwitchToEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAModifiableBehavior_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DABehavior;

#ifdef __cplusplus

class DECLSPEC_UUID("283807B8-2C60-11d0-A31D-00AA00B92C03")
DABehavior;
#endif

#ifndef __IDAUntilNotifier_INTERFACE_DEFINED__
#define __IDAUntilNotifier_INTERFACE_DEFINED__

/* interface IDAUntilNotifier */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAUntilNotifier;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3F3DA01A-4705-11d0-8710-00C04FC29D46")
    IDAUntilNotifier : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Notify( 
            /* [in] */ IDABehavior *eventData,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [in] */ IDAView *curView,
            /* [retval][out] */ IDABehavior **ppBvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAUntilNotifierVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAUntilNotifier * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAUntilNotifier * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAUntilNotifier * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAUntilNotifier * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAUntilNotifier * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAUntilNotifier * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAUntilNotifier * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDAUntilNotifier * This,
            /* [in] */ IDABehavior *eventData,
            /* [in] */ IDABehavior *curRunningBvr,
            /* [in] */ IDAView *curView,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        END_INTERFACE
    } IDAUntilNotifierVtbl;

    interface IDAUntilNotifier
    {
        CONST_VTBL struct IDAUntilNotifierVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAUntilNotifier_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAUntilNotifier_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAUntilNotifier_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAUntilNotifier_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAUntilNotifier_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAUntilNotifier_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAUntilNotifier_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAUntilNotifier_Notify(This,eventData,curRunningBvr,curView,ppBvr)	\
    (This)->lpVtbl -> Notify(This,eventData,curRunningBvr,curView,ppBvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAUntilNotifier_Notify_Proxy( 
    IDAUntilNotifier * This,
    /* [in] */ IDABehavior *eventData,
    /* [in] */ IDABehavior *curRunningBvr,
    /* [in] */ IDAView *curView,
    /* [retval][out] */ IDABehavior **ppBvr);


void __RPC_STUB IDAUntilNotifier_Notify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAUntilNotifier_INTERFACE_DEFINED__ */


#ifndef __IDABoolean_INTERFACE_DEFINED__
#define __IDABoolean_INTERFACE_DEFINED__

/* interface IDABoolean */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABoolean;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC0-3C52-11d0-9200-848C1D000000")
    IDABoolean : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ VARIANT_BOOL *ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABooleanVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABoolean * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABoolean * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABoolean * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABoolean * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABoolean * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABoolean * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABoolean * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABoolean * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABoolean * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABoolean * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABoolean * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABoolean * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABoolean * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABoolean * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABoolean * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABoolean * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABoolean * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABoolean * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABoolean * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABoolean * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABoolean * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDABoolean * This,
            /* [retval][out] */ VARIANT_BOOL *ret_0);
        
        END_INTERFACE
    } IDABooleanVtbl;

    interface IDABoolean
    {
        CONST_VTBL struct IDABooleanVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABoolean_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABoolean_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABoolean_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABoolean_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABoolean_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABoolean_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABoolean_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABoolean_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABoolean_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABoolean_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABoolean_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABoolean_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABoolean_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABoolean_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABoolean_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABoolean_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABoolean_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABoolean_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABoolean_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABoolean_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABoolean_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABoolean_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDABoolean_Extract_Proxy( 
    IDABoolean * This,
    /* [retval][out] */ VARIANT_BOOL *ret_0);


void __RPC_STUB IDABoolean_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABoolean_INTERFACE_DEFINED__ */


#ifndef __IDACamera_INTERFACE_DEFINED__
#define __IDACamera_INTERFACE_DEFINED__

/* interface IDACamera */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDACamera;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE1-3C52-11d0-9200-848C1D000000")
    IDACamera : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Depth( 
            /* [in] */ double depth_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthAnim( 
            /* [in] */ IDANumber *depth_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthResolution( 
            /* [in] */ double resolution_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DepthResolutionAnim( 
            /* [in] */ IDANumber *resolution_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDACameraVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDACamera * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDACamera * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDACamera * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDACamera * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDACamera * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDACamera * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDACamera * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDACamera * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDACamera * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDACamera * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDACamera * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDACamera * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDACamera * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDACamera * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDACamera * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDACamera * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDACamera * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDACamera * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDACamera * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDACamera * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDACamera * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Depth )( 
            IDACamera * This,
            /* [in] */ double depth_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *depth_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthResolution )( 
            IDACamera * This,
            /* [in] */ double resolution_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DepthResolutionAnim )( 
            IDACamera * This,
            /* [in] */ IDANumber *resolution_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        END_INTERFACE
    } IDACameraVtbl;

    interface IDACamera
    {
        CONST_VTBL struct IDACameraVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDACamera_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDACamera_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDACamera_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDACamera_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDACamera_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDACamera_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDACamera_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDACamera_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDACamera_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDACamera_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDACamera_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDACamera_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDACamera_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDACamera_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDACamera_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDACamera_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDACamera_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDACamera_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDACamera_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDACamera_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDACamera_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDACamera_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDACamera_Depth(This,depth_0,ret_1)	\
    (This)->lpVtbl -> Depth(This,depth_0,ret_1)

#define IDACamera_DepthAnim(This,depth_0,ret_1)	\
    (This)->lpVtbl -> DepthAnim(This,depth_0,ret_1)

#define IDACamera_DepthResolution(This,resolution_0,ret_1)	\
    (This)->lpVtbl -> DepthResolution(This,resolution_0,ret_1)

#define IDACamera_DepthResolutionAnim(This,resolution_0,ret_1)	\
    (This)->lpVtbl -> DepthResolutionAnim(This,resolution_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDACamera_Transform_Proxy( 
    IDACamera * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_Depth_Proxy( 
    IDACamera * This,
    /* [in] */ double depth_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_Depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthAnim_Proxy( 
    IDACamera * This,
    /* [in] */ IDANumber *depth_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthResolution_Proxy( 
    IDACamera * This,
    /* [in] */ double resolution_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDACamera_DepthResolutionAnim_Proxy( 
    IDACamera * This,
    /* [in] */ IDANumber *resolution_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDACamera_DepthResolutionAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDACamera_INTERFACE_DEFINED__ */


#ifndef __IDAColor_INTERFACE_DEFINED__
#define __IDAColor_INTERFACE_DEFINED__

/* interface IDAColor */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAColor;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC5-3C52-11d0-9200-848C1D000000")
    IDAColor : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Hue( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Saturation( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Lightness( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAColor * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAColor * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAColor * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAColor * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAColor * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAColor * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAColor * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAColor * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAColor * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAColor * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAColor * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAColor * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAColor * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAColor * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAColor * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAColor * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAColor * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAColor * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAColor * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAColor * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAColor * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hue )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lightness )( 
            IDAColor * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        END_INTERFACE
    } IDAColorVtbl;

    interface IDAColor
    {
        CONST_VTBL struct IDAColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAColor_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAColor_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAColor_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAColor_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAColor_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAColor_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAColor_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAColor_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAColor_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAColor_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAColor_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAColor_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAColor_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAColor_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAColor_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAColor_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAColor_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAColor_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAColor_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAColor_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAColor_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAColor_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDAColor_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDAColor_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDAColor_get_Hue(This,ret_0)	\
    (This)->lpVtbl -> get_Hue(This,ret_0)

#define IDAColor_get_Saturation(This,ret_0)	\
    (This)->lpVtbl -> get_Saturation(This,ret_0)

#define IDAColor_get_Lightness(This,ret_0)	\
    (This)->lpVtbl -> get_Lightness(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Red_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Red_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Green_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Green_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Blue_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Blue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Hue_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Hue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Saturation_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Saturation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAColor_get_Lightness_Proxy( 
    IDAColor * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAColor_get_Lightness_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAColor_INTERFACE_DEFINED__ */


#ifndef __IDAGeometry_INTERFACE_DEFINED__
#define __IDAGeometry_INTERFACE_DEFINED__

/* interface IDAGeometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAGeometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDF-3C52-11d0-9200-848C1D000000")
    IDAGeometry : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE RenderSound( 
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pickable( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PickableOccluded( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Undetectable( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EmissiveColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DiffuseColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularColor( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularExponent( 
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpecularExponentAnim( 
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Texture( 
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BoundingBox( 
            /* [retval][out] */ IDABbox3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Render( 
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightColor( 
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightAttenuationAnim( 
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightAttenuation( 
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAGeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAGeometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAGeometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAGeometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAGeometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAGeometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAGeometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAGeometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAGeometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAGeometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAGeometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAGeometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAGeometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAGeometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAGeometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAGeometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAGeometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAGeometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDAGeometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDAGeometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDAGeometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDAGeometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDAGeometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAGeometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDAGeometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAGeometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDAGeometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDAGeometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDAGeometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        END_INTERFACE
    } IDAGeometryVtbl;

    interface IDAGeometry
    {
        CONST_VTBL struct IDAGeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAGeometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAGeometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAGeometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAGeometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAGeometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAGeometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAGeometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAGeometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAGeometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAGeometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAGeometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAGeometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAGeometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAGeometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAGeometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAGeometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAGeometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAGeometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAGeometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAGeometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAGeometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAGeometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDAGeometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDAGeometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDAGeometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDAGeometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDAGeometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDAGeometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDAGeometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDAGeometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDAGeometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDAGeometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDAGeometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDAGeometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAGeometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDAGeometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDAGeometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDAGeometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDAGeometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAGeometry_RenderSound_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAMicrophone *mic_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAGeometry_RenderSound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Pickable_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAGeometry_Pickable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_PickableOccluded_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAGeometry_PickableOccluded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Undetectable_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAGeometry_Undetectable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_EmissiveColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_EmissiveColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_DiffuseColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_DiffuseColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularExponent_Proxy( 
    IDAGeometry * This,
    /* [in] */ double power_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularExponent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_SpecularExponentAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *power_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_SpecularExponentAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Texture_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAImage *texture_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Texture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Opacity_Proxy( 
    IDAGeometry * This,
    /* [in] */ double level_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_OpacityAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *level_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Transform_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAGeometry_get_BoundingBox_Proxy( 
    IDAGeometry * This,
    /* [retval][out] */ IDABbox3 **ret_0);


void __RPC_STUB IDAGeometry_get_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_Render_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDACamera *cam_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAGeometry_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightColor_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDAColor *color_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAGeometry_LightColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightAttenuationAnim_Proxy( 
    IDAGeometry * This,
    /* [in] */ IDANumber *constant_0,
    /* [in] */ IDANumber *linear_1,
    /* [in] */ IDANumber *quadratic_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDAGeometry_LightAttenuationAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAGeometry_LightAttenuation_Proxy( 
    IDAGeometry * This,
    /* [in] */ double constant_0,
    /* [in] */ double linear_1,
    /* [in] */ double quadratic_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDAGeometry_LightAttenuation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAGeometry_INTERFACE_DEFINED__ */


#ifndef __IDAImage_INTERFACE_DEFINED__
#define __IDAImage_INTERFACE_DEFINED__

/* interface IDAImage */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD3-3C52-11d0-9200-848C1D000000")
    IDAImage : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Pickable( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PickableOccluded( 
            /* [retval][out] */ IDAPickableResult **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyBitmapEffect( 
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_BoundingBox( 
            /* [retval][out] */ IDABbox2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Crop( 
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OpacityAnim( 
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Opacity( 
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Undetectable( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tile( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clip( 
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MapToUnitSquare( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ClipPolygonImageEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ClipPolygonImage( 
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAImage * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAImage * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAImage * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAImage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAImage * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAImage * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAImage * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAImage * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAImage * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAImage * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAImage * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAImage * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAImage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAImage * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDAImage * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDAImage * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDAImage * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDAImage * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDAImage * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAImage * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDAImage * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDAImage * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDAImage * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDAImage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDAImage * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDAImage * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDAImageVtbl;

    interface IDAImage
    {
        CONST_VTBL struct IDAImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImage_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAImage_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAImage_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAImage_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAImage_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAImage_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAImage_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAImage_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAImage_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAImage_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAImage_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAImage_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAImage_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAImage_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAImage_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDAImage_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDAImage_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDAImage_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDAImage_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDAImage_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAImage_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDAImage_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDAImage_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDAImage_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDAImage_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDAImage_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDAImage_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDAImage_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAImage_Pickable_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAImage_Pickable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_PickableOccluded_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAPickableResult **ret_0);


void __RPC_STUB IDAImage_PickableOccluded_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_ApplyBitmapEffect_Proxy( 
    IDAImage * This,
    /* [in] */ IUnknown *effectToApply_0,
    /* [in] */ IDAEvent *firesWhenChanged_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAImage_ApplyBitmapEffect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAImage_get_BoundingBox_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDABbox2 **ret_0);


void __RPC_STUB IDAImage_get_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Crop_Proxy( 
    IDAImage * This,
    /* [in] */ IDAPoint2 *min_0,
    /* [in] */ IDAPoint2 *max_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAImage_Crop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Transform_Proxy( 
    IDAImage * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_OpacityAnim_Proxy( 
    IDAImage * This,
    /* [in] */ IDANumber *opacity_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_OpacityAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Opacity_Proxy( 
    IDAImage * This,
    /* [in] */ double opacity_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Opacity_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Undetectable_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_Undetectable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Tile_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_Tile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_Clip_Proxy( 
    IDAImage * This,
    /* [in] */ IDAMatte *m_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_Clip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_MapToUnitSquare_Proxy( 
    IDAImage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAImage_MapToUnitSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAImage_ClipPolygonImageEx_Proxy( 
    IDAImage * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_ClipPolygonImageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAImage_ClipPolygonImage_Proxy( 
    IDAImage * This,
    /* [in] */ VARIANT points_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAImage_ClipPolygonImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImage_INTERFACE_DEFINED__ */


#ifndef __IDAMatte_INTERFACE_DEFINED__
#define __IDAMatte_INTERFACE_DEFINED__

/* interface IDAMatte */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMatte;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD1-3C52-11d0-9200-848C1D000000")
    IDAMatte : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAMatte **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMatteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMatte * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMatte * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMatte * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMatte * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMatte * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMatte * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMatte * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMatte * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMatte * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMatte * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMatte * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMatte * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMatte * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMatte * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMatte * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMatte * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMatte * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMatte * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMatte * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMatte * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMatte * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAMatte * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        END_INTERFACE
    } IDAMatteVtbl;

    interface IDAMatte
    {
        CONST_VTBL struct IDAMatteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMatte_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMatte_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMatte_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMatte_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMatte_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMatte_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMatte_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMatte_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMatte_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMatte_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMatte_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMatte_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMatte_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMatte_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMatte_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMatte_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMatte_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMatte_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMatte_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMatte_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMatte_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMatte_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMatte_Transform_Proxy( 
    IDAMatte * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAMatte **ret_1);


void __RPC_STUB IDAMatte_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMatte_INTERFACE_DEFINED__ */


#ifndef __IDAMicrophone_INTERFACE_DEFINED__
#define __IDAMicrophone_INTERFACE_DEFINED__

/* interface IDAMicrophone */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMicrophone;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE5-3C52-11d0-9200-848C1D000000")
    IDAMicrophone : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAMicrophone **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMicrophoneVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMicrophone * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMicrophone * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMicrophone * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMicrophone * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMicrophone * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMicrophone * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMicrophone * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMicrophone * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMicrophone * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMicrophone * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMicrophone * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMicrophone * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMicrophone * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMicrophone * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMicrophone * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMicrophone * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMicrophone * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMicrophone * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMicrophone * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMicrophone * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMicrophone * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAMicrophone * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAMicrophone **ret_1);
        
        END_INTERFACE
    } IDAMicrophoneVtbl;

    interface IDAMicrophone
    {
        CONST_VTBL struct IDAMicrophoneVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMicrophone_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMicrophone_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMicrophone_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMicrophone_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMicrophone_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMicrophone_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMicrophone_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMicrophone_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMicrophone_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMicrophone_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMicrophone_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMicrophone_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMicrophone_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMicrophone_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMicrophone_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMicrophone_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMicrophone_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMicrophone_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMicrophone_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMicrophone_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMicrophone_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMicrophone_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMicrophone_Transform_Proxy( 
    IDAMicrophone * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAMicrophone **ret_1);


void __RPC_STUB IDAMicrophone_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMicrophone_INTERFACE_DEFINED__ */


#ifndef __IDAMontage_INTERFACE_DEFINED__
#define __IDAMontage_INTERFACE_DEFINED__

/* interface IDAMontage */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAMontage;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD5-3C52-11d0-9200-848C1D000000")
    IDAMontage : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Render( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAMontageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAMontage * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAMontage * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAMontage * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAMontage * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAMontage * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAMontage * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAMontage * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAMontage * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAMontage * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAMontage * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAMontage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAMontage * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAMontage * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAMontage * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAMontage * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAMontage * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAMontage * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAMontage * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAMontage * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAMontage * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAMontage * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDAMontage * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        END_INTERFACE
    } IDAMontageVtbl;

    interface IDAMontage
    {
        CONST_VTBL struct IDAMontageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAMontage_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAMontage_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAMontage_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAMontage_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAMontage_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAMontage_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAMontage_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAMontage_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAMontage_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAMontage_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAMontage_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAMontage_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAMontage_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAMontage_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAMontage_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAMontage_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAMontage_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAMontage_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAMontage_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAMontage_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAMontage_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAMontage_Render(This,ret_0)	\
    (This)->lpVtbl -> Render(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAMontage_Render_Proxy( 
    IDAMontage * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAMontage_Render_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAMontage_INTERFACE_DEFINED__ */


#ifndef __IDAPath2_INTERFACE_DEFINED__
#define __IDAPath2_INTERFACE_DEFINED__

/* interface IDAPath2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPath2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCF-3C52-11d0-9200-848C1D000000")
    IDAPath2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BoundingBox( 
            /* [in] */ IDALineStyle *style_0,
            /* [retval][out] */ IDABbox2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Fill( 
            /* [in] */ IDALineStyle *border_0,
            /* [in] */ IDAImage *fill_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Draw( 
            /* [in] */ IDALineStyle *border_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Close( 
            /* [retval][out] */ IDAPath2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPath2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPath2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPath2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPath2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPath2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPath2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPath2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPath2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPath2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPath2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPath2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPath2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPath2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPath2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPath2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPath2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPath2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPath2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPath2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPath2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPath2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPath2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPath2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BoundingBox )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *style_0,
            /* [retval][out] */ IDABbox2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Fill )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *border_0,
            /* [in] */ IDAImage *fill_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Draw )( 
            IDAPath2 * This,
            /* [in] */ IDALineStyle *border_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Close )( 
            IDAPath2 * This,
            /* [retval][out] */ IDAPath2 **ret_0);
        
        END_INTERFACE
    } IDAPath2Vtbl;

    interface IDAPath2
    {
        CONST_VTBL struct IDAPath2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPath2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPath2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPath2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPath2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPath2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPath2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPath2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPath2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPath2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPath2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPath2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPath2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPath2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPath2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPath2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPath2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPath2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPath2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPath2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPath2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPath2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPath2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDAPath2_BoundingBox(This,style_0,ret_1)	\
    (This)->lpVtbl -> BoundingBox(This,style_0,ret_1)

#define IDAPath2_Fill(This,border_0,fill_1,ret_2)	\
    (This)->lpVtbl -> Fill(This,border_0,fill_1,ret_2)

#define IDAPath2_Draw(This,border_0,ret_1)	\
    (This)->lpVtbl -> Draw(This,border_0,ret_1)

#define IDAPath2_Close(This,ret_0)	\
    (This)->lpVtbl -> Close(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPath2_Transform_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAPath2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_BoundingBox_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *style_0,
    /* [retval][out] */ IDABbox2 **ret_1);


void __RPC_STUB IDAPath2_BoundingBox_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Fill_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *border_0,
    /* [in] */ IDAImage *fill_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAPath2_Fill_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Draw_Proxy( 
    IDAPath2 * This,
    /* [in] */ IDALineStyle *border_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAPath2_Draw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPath2_Close_Proxy( 
    IDAPath2 * This,
    /* [retval][out] */ IDAPath2 **ret_0);


void __RPC_STUB IDAPath2_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPath2_INTERFACE_DEFINED__ */


#ifndef __IDAPoint2_INTERFACE_DEFINED__
#define __IDAPoint2_INTERFACE_DEFINED__

/* interface IDAPoint2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPoint2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC7-3C52-11d0-9200-848C1D000000")
    IDAPoint2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AnimateControlPosition( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateControlPositionPixel( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPoint2 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPoint2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPoint2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPoint2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPoint2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPoint2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPoint2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPoint2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPoint2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPoint2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPoint2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPoint2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPoint2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPoint2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPoint2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPoint2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPoint2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPoint2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPoint2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPoint2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPoint2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateControlPosition )( 
            IDAPoint2 * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateControlPositionPixel )( 
            IDAPoint2 * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAPoint2 **ret_4);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordAngle )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordLength )( 
            IDAPoint2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPoint2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAPoint2 **ret_1);
        
        END_INTERFACE
    } IDAPoint2Vtbl;

    interface IDAPoint2
    {
        CONST_VTBL struct IDAPoint2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPoint2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPoint2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPoint2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPoint2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPoint2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPoint2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPoint2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPoint2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPoint2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPoint2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPoint2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPoint2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPoint2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPoint2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPoint2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPoint2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPoint2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPoint2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPoint2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPoint2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPoint2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPoint2_AnimateControlPosition(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateControlPosition(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDAPoint2_AnimateControlPositionPixel(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateControlPositionPixel(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#define IDAPoint2_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAPoint2_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAPoint2_get_PolarCoordAngle(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordAngle(This,ret_0)

#define IDAPoint2_get_PolarCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordLength(This,ret_0)

#define IDAPoint2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPoint2_AnimateControlPosition_Proxy( 
    IDAPoint2 * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAPoint2 **ret_4);


void __RPC_STUB IDAPoint2_AnimateControlPosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint2_AnimateControlPositionPixel_Proxy( 
    IDAPoint2 * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAPoint2 **ret_4);


void __RPC_STUB IDAPoint2_AnimateControlPositionPixel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_X_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_Y_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_PolarCoordAngle_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_PolarCoordAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint2_get_PolarCoordLength_Proxy( 
    IDAPoint2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint2_get_PolarCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint2_Transform_Proxy( 
    IDAPoint2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAPoint2 **ret_1);


void __RPC_STUB IDAPoint2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPoint2_INTERFACE_DEFINED__ */


#ifndef __IDAPoint3_INTERFACE_DEFINED__
#define __IDAPoint3_INTERFACE_DEFINED__

/* interface IDAPoint3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPoint3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD7-3C52-11d0-9200-848C1D000000")
    IDAPoint3 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Project( 
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAPoint2 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Z( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordXYAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordYZAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAPoint3 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPoint3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPoint3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPoint3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPoint3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPoint3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPoint3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPoint3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPoint3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPoint3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPoint3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPoint3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPoint3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPoint3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPoint3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPoint3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPoint3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPoint3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPoint3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPoint3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPoint3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Project )( 
            IDAPoint3 * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAPoint2 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordXYAngle )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordYZAngle )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordLength )( 
            IDAPoint3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAPoint3 * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAPoint3 **ret_1);
        
        END_INTERFACE
    } IDAPoint3Vtbl;

    interface IDAPoint3
    {
        CONST_VTBL struct IDAPoint3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPoint3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPoint3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPoint3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPoint3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPoint3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPoint3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPoint3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPoint3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPoint3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPoint3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPoint3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPoint3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPoint3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPoint3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPoint3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPoint3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPoint3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPoint3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPoint3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPoint3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPoint3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPoint3_Project(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Project(This,cam_0,ret_1)

#define IDAPoint3_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAPoint3_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAPoint3_get_Z(This,ret_0)	\
    (This)->lpVtbl -> get_Z(This,ret_0)

#define IDAPoint3_get_SphericalCoordXYAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordXYAngle(This,ret_0)

#define IDAPoint3_get_SphericalCoordYZAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordYZAngle(This,ret_0)

#define IDAPoint3_get_SphericalCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordLength(This,ret_0)

#define IDAPoint3_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPoint3_Project_Proxy( 
    IDAPoint3 * This,
    /* [in] */ IDACamera *cam_0,
    /* [retval][out] */ IDAPoint2 **ret_1);


void __RPC_STUB IDAPoint3_Project_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_X_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_Y_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_Z_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_Z_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordXYAngle_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordXYAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordYZAngle_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordYZAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPoint3_get_SphericalCoordLength_Proxy( 
    IDAPoint3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAPoint3_get_SphericalCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPoint3_Transform_Proxy( 
    IDAPoint3 * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAPoint3 **ret_1);


void __RPC_STUB IDAPoint3_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPoint3_INTERFACE_DEFINED__ */


#ifndef __IDASound_INTERFACE_DEFINED__
#define __IDASound_INTERFACE_DEFINED__

/* interface IDASound */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDASound;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BE3-3C52-11d0-9200-848C1D000000")
    IDASound : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PhaseAnim( 
            /* [in] */ IDANumber *phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Phase( 
            /* [in] */ double phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RateAnim( 
            /* [in] */ IDANumber *pitchShift_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rate( 
            /* [in] */ double pitchShift_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PanAnim( 
            /* [in] */ IDANumber *panAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pan( 
            /* [in] */ double panAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GainAnim( 
            /* [in] */ IDANumber *gainAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Gain( 
            /* [in] */ double gainAmt_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Loop( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDASoundVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDASound * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDASound * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDASound * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDASound * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDASound * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDASound * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDASound * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDASound * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDASound * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDASound * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDASound * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDASound * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDASound * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDASound * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDASound * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDASound * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDASound * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDASound * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDASound * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDASound * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *PhaseAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Phase )( 
            IDASound * This,
            /* [in] */ double phaseAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *RateAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *pitchShift_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rate )( 
            IDASound * This,
            /* [in] */ double pitchShift_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *PanAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *panAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pan )( 
            IDASound * This,
            /* [in] */ double panAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *GainAnim )( 
            IDASound * This,
            /* [in] */ IDANumber *gainAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Gain )( 
            IDASound * This,
            /* [in] */ double gainAmt_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Loop )( 
            IDASound * This,
            /* [retval][out] */ IDASound **ret_0);
        
        END_INTERFACE
    } IDASoundVtbl;

    interface IDASound
    {
        CONST_VTBL struct IDASoundVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDASound_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDASound_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDASound_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDASound_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDASound_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDASound_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDASound_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDASound_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDASound_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDASound_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDASound_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDASound_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDASound_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDASound_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDASound_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDASound_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDASound_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDASound_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDASound_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDASound_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDASound_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDASound_PhaseAnim(This,phaseAmt_0,ret_1)	\
    (This)->lpVtbl -> PhaseAnim(This,phaseAmt_0,ret_1)

#define IDASound_Phase(This,phaseAmt_0,ret_1)	\
    (This)->lpVtbl -> Phase(This,phaseAmt_0,ret_1)

#define IDASound_RateAnim(This,pitchShift_0,ret_1)	\
    (This)->lpVtbl -> RateAnim(This,pitchShift_0,ret_1)

#define IDASound_Rate(This,pitchShift_0,ret_1)	\
    (This)->lpVtbl -> Rate(This,pitchShift_0,ret_1)

#define IDASound_PanAnim(This,panAmt_0,ret_1)	\
    (This)->lpVtbl -> PanAnim(This,panAmt_0,ret_1)

#define IDASound_Pan(This,panAmt_0,ret_1)	\
    (This)->lpVtbl -> Pan(This,panAmt_0,ret_1)

#define IDASound_GainAnim(This,gainAmt_0,ret_1)	\
    (This)->lpVtbl -> GainAnim(This,gainAmt_0,ret_1)

#define IDASound_Gain(This,gainAmt_0,ret_1)	\
    (This)->lpVtbl -> Gain(This,gainAmt_0,ret_1)

#define IDASound_Loop(This,ret_0)	\
    (This)->lpVtbl -> Loop(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDASound_PhaseAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *phaseAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_PhaseAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Phase_Proxy( 
    IDASound * This,
    /* [in] */ double phaseAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Phase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_RateAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *pitchShift_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_RateAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Rate_Proxy( 
    IDASound * This,
    /* [in] */ double pitchShift_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_PanAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *panAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_PanAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Pan_Proxy( 
    IDASound * This,
    /* [in] */ double panAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Pan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_GainAnim_Proxy( 
    IDASound * This,
    /* [in] */ IDANumber *gainAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_GainAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Gain_Proxy( 
    IDASound * This,
    /* [in] */ double gainAmt_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDASound_Gain_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASound_Loop_Proxy( 
    IDASound * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDASound_Loop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDASound_INTERFACE_DEFINED__ */


#ifndef __IDAString_INTERFACE_DEFINED__
#define __IDAString_INTERFACE_DEFINED__

/* interface IDAString */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAString;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC3-3C52-11d0-9200-848C1D000000")
    IDAString : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Extract( 
            /* [retval][out] */ BSTR *ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAString **ret_4) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAStringVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAString * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAString * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAString * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAString * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAString * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAString * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAString * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAString * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAString * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAString * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAString * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAString * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAString * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAString * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAString * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAString * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAString * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAString * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAString * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAString * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAString * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Extract )( 
            IDAString * This,
            /* [retval][out] */ BSTR *ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDAString * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDAString **ret_4);
        
        END_INTERFACE
    } IDAStringVtbl;

    interface IDAString
    {
        CONST_VTBL struct IDAStringVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAString_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAString_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAString_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAString_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAString_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAString_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAString_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAString_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAString_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAString_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAString_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAString_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAString_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAString_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAString_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAString_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAString_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAString_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAString_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAString_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAString_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAString_Extract(This,ret_0)	\
    (This)->lpVtbl -> Extract(This,ret_0)

#define IDAString_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAString_Extract_Proxy( 
    IDAString * This,
    /* [retval][out] */ BSTR *ret_0);


void __RPC_STUB IDAString_Extract_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAString_AnimateProperty_Proxy( 
    IDAString * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDAString **ret_4);


void __RPC_STUB IDAString_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAString_INTERFACE_DEFINED__ */


#ifndef __IDATransform2_INTERFACE_DEFINED__
#define __IDATransform2_INTERFACE_DEFINED__

/* interface IDATransform2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATransform2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCB-3C52-11d0-9200-848C1D000000")
    IDATransform2 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Inverse( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSingular( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATransform2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATransform2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATransform2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATransform2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATransform2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATransform2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATransform2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATransform2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATransform2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATransform2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATransform2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATransform2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATransform2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATransform2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATransform2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATransform2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATransform2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATransform2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATransform2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATransform2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Inverse )( 
            IDATransform2 * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSingular )( 
            IDATransform2 * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        END_INTERFACE
    } IDATransform2Vtbl;

    interface IDATransform2
    {
        CONST_VTBL struct IDATransform2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATransform2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATransform2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATransform2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATransform2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATransform2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATransform2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATransform2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATransform2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATransform2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATransform2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATransform2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATransform2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATransform2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATransform2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATransform2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATransform2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATransform2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATransform2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATransform2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATransform2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATransform2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATransform2_Inverse(This,ret_0)	\
    (This)->lpVtbl -> Inverse(This,ret_0)

#define IDATransform2_get_IsSingular(This,ret_0)	\
    (This)->lpVtbl -> get_IsSingular(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATransform2_Inverse_Proxy( 
    IDATransform2 * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDATransform2_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATransform2_get_IsSingular_Proxy( 
    IDATransform2 * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDATransform2_get_IsSingular_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATransform2_INTERFACE_DEFINED__ */


#ifndef __IDATransform3_INTERFACE_DEFINED__
#define __IDATransform3_INTERFACE_DEFINED__

/* interface IDATransform3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATransform3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDB-3C52-11d0-9200-848C1D000000")
    IDATransform3 : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Inverse( 
            /* [retval][out] */ IDATransform3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IsSingular( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelTransform2( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATransform3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATransform3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATransform3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATransform3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATransform3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATransform3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATransform3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATransform3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATransform3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATransform3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATransform3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATransform3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATransform3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATransform3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATransform3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATransform3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATransform3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATransform3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATransform3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATransform3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Inverse )( 
            IDATransform3 * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IsSingular )( 
            IDATransform3 * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelTransform2 )( 
            IDATransform3 * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        END_INTERFACE
    } IDATransform3Vtbl;

    interface IDATransform3
    {
        CONST_VTBL struct IDATransform3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATransform3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATransform3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATransform3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATransform3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATransform3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATransform3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATransform3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATransform3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATransform3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATransform3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATransform3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATransform3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATransform3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATransform3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATransform3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATransform3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATransform3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATransform3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATransform3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATransform3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATransform3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATransform3_Inverse(This,ret_0)	\
    (This)->lpVtbl -> Inverse(This,ret_0)

#define IDATransform3_get_IsSingular(This,ret_0)	\
    (This)->lpVtbl -> get_IsSingular(This,ret_0)

#define IDATransform3_ParallelTransform2(This,ret_0)	\
    (This)->lpVtbl -> ParallelTransform2(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATransform3_Inverse_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDATransform3 **ret_0);


void __RPC_STUB IDATransform3_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATransform3_get_IsSingular_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDATransform3_get_IsSingular_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDATransform3_ParallelTransform2_Proxy( 
    IDATransform3 * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDATransform3_ParallelTransform2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATransform3_INTERFACE_DEFINED__ */


#ifndef __IDAVector2_INTERFACE_DEFINED__
#define __IDAVector2_INTERFACE_DEFINED__

/* interface IDAVector2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAVector2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BC9-3C52-11d0-9200-848C1D000000")
    IDAVector2 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LengthSquared( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Normalize( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MulAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DivAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PolarCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAVector2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAVector2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAVector2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAVector2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAVector2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAVector2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAVector2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAVector2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAVector2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAVector2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAVector2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAVector2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAVector2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAVector2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAVector2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAVector2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAVector2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAVector2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAVector2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAVector2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LengthSquared )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Normalize )( 
            IDAVector2 * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *MulAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAVector2 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DivAnim )( 
            IDAVector2 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAVector2 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordAngle )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PolarCoordLength )( 
            IDAVector2 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAVector2 * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        END_INTERFACE
    } IDAVector2Vtbl;

    interface IDAVector2
    {
        CONST_VTBL struct IDAVector2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAVector2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAVector2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAVector2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAVector2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAVector2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAVector2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAVector2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAVector2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAVector2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAVector2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAVector2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAVector2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAVector2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAVector2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAVector2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAVector2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAVector2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAVector2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAVector2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAVector2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAVector2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAVector2_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#define IDAVector2_get_LengthSquared(This,ret_0)	\
    (This)->lpVtbl -> get_LengthSquared(This,ret_0)

#define IDAVector2_Normalize(This,ret_0)	\
    (This)->lpVtbl -> Normalize(This,ret_0)

#define IDAVector2_MulAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> MulAnim(This,scalar_0,ret_1)

#define IDAVector2_Mul(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Mul(This,scalar_0,ret_1)

#define IDAVector2_DivAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> DivAnim(This,scalar_0,ret_1)

#define IDAVector2_Div(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Div(This,scalar_0,ret_1)

#define IDAVector2_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAVector2_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAVector2_get_PolarCoordAngle(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordAngle(This,ret_0)

#define IDAVector2_get_PolarCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_PolarCoordLength(This,ret_0)

#define IDAVector2_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_Length_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_LengthSquared_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_LengthSquared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Normalize_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAVector2_Normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_MulAnim_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_MulAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Mul_Proxy( 
    IDAVector2 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_DivAnim_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_DivAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Div_Proxy( 
    IDAVector2 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_X_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_Y_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_PolarCoordAngle_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_PolarCoordAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector2_get_PolarCoordLength_Proxy( 
    IDAVector2 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector2_get_PolarCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector2_Transform_Proxy( 
    IDAVector2 * This,
    /* [in] */ IDATransform2 *xf_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAVector2_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAVector2_INTERFACE_DEFINED__ */


#ifndef __IDAVector3_INTERFACE_DEFINED__
#define __IDAVector3_INTERFACE_DEFINED__

/* interface IDAVector3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAVector3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BD9-3C52-11d0-9200-848C1D000000")
    IDAVector3 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LengthSquared( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Normalize( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MulAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DivAnim( 
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_X( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Y( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Z( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordXYAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordYZAngle( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SphericalCoordLength( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAVector3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAVector3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAVector3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAVector3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAVector3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAVector3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAVector3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAVector3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAVector3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAVector3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAVector3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAVector3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAVector3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAVector3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAVector3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAVector3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAVector3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAVector3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAVector3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAVector3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LengthSquared )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Normalize )( 
            IDAVector3 * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *MulAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAVector3 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DivAnim )( 
            IDAVector3 * This,
            /* [in] */ IDANumber *scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAVector3 * This,
            /* [in] */ double scalar_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_X )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Y )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Z )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordXYAngle )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordYZAngle )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SphericalCoordLength )( 
            IDAVector3 * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDAVector3 * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        END_INTERFACE
    } IDAVector3Vtbl;

    interface IDAVector3
    {
        CONST_VTBL struct IDAVector3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAVector3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAVector3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAVector3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAVector3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAVector3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAVector3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAVector3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAVector3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAVector3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAVector3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAVector3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAVector3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAVector3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAVector3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAVector3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAVector3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAVector3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAVector3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAVector3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAVector3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAVector3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAVector3_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#define IDAVector3_get_LengthSquared(This,ret_0)	\
    (This)->lpVtbl -> get_LengthSquared(This,ret_0)

#define IDAVector3_Normalize(This,ret_0)	\
    (This)->lpVtbl -> Normalize(This,ret_0)

#define IDAVector3_MulAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> MulAnim(This,scalar_0,ret_1)

#define IDAVector3_Mul(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Mul(This,scalar_0,ret_1)

#define IDAVector3_DivAnim(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> DivAnim(This,scalar_0,ret_1)

#define IDAVector3_Div(This,scalar_0,ret_1)	\
    (This)->lpVtbl -> Div(This,scalar_0,ret_1)

#define IDAVector3_get_X(This,ret_0)	\
    (This)->lpVtbl -> get_X(This,ret_0)

#define IDAVector3_get_Y(This,ret_0)	\
    (This)->lpVtbl -> get_Y(This,ret_0)

#define IDAVector3_get_Z(This,ret_0)	\
    (This)->lpVtbl -> get_Z(This,ret_0)

#define IDAVector3_get_SphericalCoordXYAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordXYAngle(This,ret_0)

#define IDAVector3_get_SphericalCoordYZAngle(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordYZAngle(This,ret_0)

#define IDAVector3_get_SphericalCoordLength(This,ret_0)	\
    (This)->lpVtbl -> get_SphericalCoordLength(This,ret_0)

#define IDAVector3_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Length_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_LengthSquared_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_LengthSquared_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Normalize_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAVector3_Normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_MulAnim_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_MulAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Mul_Proxy( 
    IDAVector3 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_DivAnim_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDANumber *scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_DivAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Div_Proxy( 
    IDAVector3 * This,
    /* [in] */ double scalar_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_X_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_X_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Y_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Y_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_Z_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_Z_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordXYAngle_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordXYAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordYZAngle_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordYZAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAVector3_get_SphericalCoordLength_Proxy( 
    IDAVector3 * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAVector3_get_SphericalCoordLength_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAVector3_Transform_Proxy( 
    IDAVector3 * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAVector3_Transform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAVector3_INTERFACE_DEFINED__ */


#ifndef __IDAFontStyle_INTERFACE_DEFINED__
#define __IDAFontStyle_INTERFACE_DEFINED__

/* interface IDAFontStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAFontStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("25B0F91D-D23D-11d0-9B85-00C04FC2F51D")
    IDAFontStyle : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Bold( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Italic( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Underline( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Strikethrough( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AntiAliasing( 
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Color( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FamilyAnim( 
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Family( 
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SizeAnim( 
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Size( 
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Weight( 
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WeightAnim( 
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAFontStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAFontStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAFontStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAFontStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAFontStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAFontStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAFontStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAFontStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAFontStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAFontStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAFontStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAFontStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAFontStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAFontStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAFontStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAFontStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAFontStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAFontStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Bold )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Italic )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Underline )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Strikethrough )( 
            IDAFontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDAFontStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDAFontStyle * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *FamilyAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Family )( 
            IDAFontStyle * This,
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SizeAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Size )( 
            IDAFontStyle * This,
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Weight )( 
            IDAFontStyle * This,
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *WeightAnim )( 
            IDAFontStyle * This,
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        END_INTERFACE
    } IDAFontStyleVtbl;

    interface IDAFontStyle
    {
        CONST_VTBL struct IDAFontStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAFontStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAFontStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAFontStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAFontStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAFontStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAFontStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAFontStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAFontStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAFontStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAFontStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAFontStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAFontStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAFontStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAFontStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAFontStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAFontStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAFontStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAFontStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAFontStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAFontStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAFontStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAFontStyle_Bold(This,ret_0)	\
    (This)->lpVtbl -> Bold(This,ret_0)

#define IDAFontStyle_Italic(This,ret_0)	\
    (This)->lpVtbl -> Italic(This,ret_0)

#define IDAFontStyle_Underline(This,ret_0)	\
    (This)->lpVtbl -> Underline(This,ret_0)

#define IDAFontStyle_Strikethrough(This,ret_0)	\
    (This)->lpVtbl -> Strikethrough(This,ret_0)

#define IDAFontStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDAFontStyle_Color(This,col_0,ret_1)	\
    (This)->lpVtbl -> Color(This,col_0,ret_1)

#define IDAFontStyle_FamilyAnim(This,face_0,ret_1)	\
    (This)->lpVtbl -> FamilyAnim(This,face_0,ret_1)

#define IDAFontStyle_Family(This,face_0,ret_1)	\
    (This)->lpVtbl -> Family(This,face_0,ret_1)

#define IDAFontStyle_SizeAnim(This,size_0,ret_1)	\
    (This)->lpVtbl -> SizeAnim(This,size_0,ret_1)

#define IDAFontStyle_Size(This,size_0,ret_1)	\
    (This)->lpVtbl -> Size(This,size_0,ret_1)

#define IDAFontStyle_Weight(This,weight_0,ret_1)	\
    (This)->lpVtbl -> Weight(This,weight_0,ret_1)

#define IDAFontStyle_WeightAnim(This,weight_0,ret_1)	\
    (This)->lpVtbl -> WeightAnim(This,weight_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAFontStyle_Bold_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Bold_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Italic_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Italic_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Underline_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Underline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Strikethrough_Proxy( 
    IDAFontStyle * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAFontStyle_Strikethrough_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_AntiAliasing_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double aaStyle_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_AntiAliasing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Color_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_FamilyAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDAString *face_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_FamilyAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Family_Proxy( 
    IDAFontStyle * This,
    /* [in] */ BSTR face_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Family_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_SizeAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDANumber *size_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_SizeAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Size_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double size_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_Weight_Proxy( 
    IDAFontStyle * This,
    /* [in] */ double weight_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_Weight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAFontStyle_WeightAnim_Proxy( 
    IDAFontStyle * This,
    /* [in] */ IDANumber *weight_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDAFontStyle_WeightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAFontStyle_INTERFACE_DEFINED__ */


#ifndef __IDALineStyle_INTERFACE_DEFINED__
#define __IDALineStyle_INTERFACE_DEFINED__

/* interface IDALineStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDALineStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BF1-3C52-11d0-9200-848C1D000000")
    IDALineStyle : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE End( 
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Join( 
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Dash( 
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE WidthAnim( 
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE width( 
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AntiAliasing( 
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Detail( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Color( 
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDALineStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDALineStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDALineStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDALineStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDALineStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDALineStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDALineStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDALineStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDALineStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDALineStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDALineStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDALineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDALineStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDALineStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDALineStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDALineStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDALineStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDALineStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDALineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDALineStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            IDALineStyle * This,
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Join )( 
            IDALineStyle * This,
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Dash )( 
            IDALineStyle * This,
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *WidthAnim )( 
            IDALineStyle * This,
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *width )( 
            IDALineStyle * This,
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDALineStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Detail )( 
            IDALineStyle * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDALineStyle * This,
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        END_INTERFACE
    } IDALineStyleVtbl;

    interface IDALineStyle
    {
        CONST_VTBL struct IDALineStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDALineStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDALineStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDALineStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDALineStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDALineStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDALineStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDALineStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDALineStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDALineStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDALineStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDALineStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDALineStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDALineStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDALineStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDALineStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDALineStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDALineStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDALineStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDALineStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDALineStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDALineStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDALineStyle_End(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> End(This,obsolete_0,obsolete_1)

#define IDALineStyle_Join(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Join(This,obsolete_0,obsolete_1)

#define IDALineStyle_Dash(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Dash(This,obsolete_0,obsolete_1)

#define IDALineStyle_WidthAnim(This,sty_0,ret_1)	\
    (This)->lpVtbl -> WidthAnim(This,sty_0,ret_1)

#define IDALineStyle_width(This,sty_0,ret_1)	\
    (This)->lpVtbl -> width(This,sty_0,ret_1)

#define IDALineStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDALineStyle_Detail(This,ret_0)	\
    (This)->lpVtbl -> Detail(This,ret_0)

#define IDALineStyle_Color(This,clr_0,ret_1)	\
    (This)->lpVtbl -> Color(This,clr_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDALineStyle_End_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAEndStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_End_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Join_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAJoinStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_Join_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Dash_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDADashStyle *obsolete_0,
    /* [retval][out] */ IDALineStyle **obsolete_1);


void __RPC_STUB IDALineStyle_Dash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_WidthAnim_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDANumber *sty_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_WidthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_width_Proxy( 
    IDALineStyle * This,
    /* [in] */ double sty_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_width_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_AntiAliasing_Proxy( 
    IDALineStyle * This,
    /* [in] */ double aaStyle_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_AntiAliasing_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Detail_Proxy( 
    IDALineStyle * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDALineStyle_Detail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDALineStyle_Color_Proxy( 
    IDALineStyle * This,
    /* [in] */ IDAColor *clr_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDALineStyle_Color_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDALineStyle_INTERFACE_DEFINED__ */


#ifndef __IDAEndStyle_INTERFACE_DEFINED__
#define __IDAEndStyle_INTERFACE_DEFINED__

/* interface IDAEndStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAEndStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BEB-3C52-11d0-9200-848C1D000000")
    IDAEndStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDAEndStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAEndStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAEndStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAEndStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAEndStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAEndStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAEndStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAEndStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAEndStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAEndStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAEndStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAEndStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAEndStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAEndStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAEndStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAEndStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAEndStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAEndStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAEndStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAEndStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAEndStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAEndStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDAEndStyleVtbl;

    interface IDAEndStyle
    {
        CONST_VTBL struct IDAEndStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAEndStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAEndStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAEndStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAEndStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAEndStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAEndStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAEndStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAEndStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAEndStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAEndStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAEndStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAEndStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAEndStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAEndStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAEndStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAEndStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAEndStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAEndStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAEndStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAEndStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAEndStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDAEndStyle_INTERFACE_DEFINED__ */


#ifndef __IDAJoinStyle_INTERFACE_DEFINED__
#define __IDAJoinStyle_INTERFACE_DEFINED__

/* interface IDAJoinStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAJoinStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BED-3C52-11d0-9200-848C1D000000")
    IDAJoinStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDAJoinStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAJoinStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAJoinStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAJoinStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAJoinStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAJoinStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAJoinStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAJoinStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAJoinStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAJoinStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAJoinStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAJoinStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAJoinStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAJoinStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAJoinStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAJoinStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAJoinStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAJoinStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAJoinStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAJoinStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAJoinStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAJoinStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDAJoinStyleVtbl;

    interface IDAJoinStyle
    {
        CONST_VTBL struct IDAJoinStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAJoinStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAJoinStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAJoinStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAJoinStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAJoinStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAJoinStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAJoinStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAJoinStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAJoinStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAJoinStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAJoinStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAJoinStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAJoinStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAJoinStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAJoinStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAJoinStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAJoinStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAJoinStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAJoinStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAJoinStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAJoinStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDAJoinStyle_INTERFACE_DEFINED__ */


#ifndef __IDADashStyle_INTERFACE_DEFINED__
#define __IDADashStyle_INTERFACE_DEFINED__

/* interface IDADashStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADashStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BEF-3C52-11d0-9200-848C1D000000")
    IDADashStyle : public IDABehavior
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDADashStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADashStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADashStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADashStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADashStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADashStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADashStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADashStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDADashStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDADashStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDADashStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDADashStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDADashStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDADashStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDADashStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDADashStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDADashStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDADashStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDADashStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDADashStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDADashStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDADashStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        END_INTERFACE
    } IDADashStyleVtbl;

    interface IDADashStyle
    {
        CONST_VTBL struct IDADashStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADashStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADashStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADashStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADashStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADashStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADashStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADashStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADashStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDADashStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDADashStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDADashStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDADashStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDADashStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDADashStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDADashStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDADashStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDADashStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDADashStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDADashStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDADashStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDADashStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDADashStyle_INTERFACE_DEFINED__ */


#ifndef __IDABbox2_INTERFACE_DEFINED__
#define __IDABbox2_INTERFACE_DEFINED__

/* interface IDABbox2 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABbox2;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BCD-3C52-11d0-9200-848C1D000000")
    IDABbox2 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABbox2Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABbox2 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABbox2 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABbox2 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABbox2 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABbox2 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABbox2 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABbox2 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABbox2 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABbox2 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABbox2 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABbox2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABbox2 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABbox2 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABbox2 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABbox2 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABbox2 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABbox2 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABbox2 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABbox2 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABbox2 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABbox2 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Min )( 
            IDABbox2 * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Max )( 
            IDABbox2 * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        END_INTERFACE
    } IDABbox2Vtbl;

    interface IDABbox2
    {
        CONST_VTBL struct IDABbox2Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABbox2_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABbox2_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABbox2_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABbox2_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABbox2_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABbox2_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABbox2_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABbox2_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABbox2_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABbox2_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABbox2_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABbox2_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABbox2_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABbox2_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABbox2_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABbox2_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABbox2_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABbox2_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABbox2_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABbox2_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABbox2_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABbox2_get_Min(This,ret_0)	\
    (This)->lpVtbl -> get_Min(This,ret_0)

#define IDABbox2_get_Max(This,ret_0)	\
    (This)->lpVtbl -> get_Max(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox2_get_Min_Proxy( 
    IDABbox2 * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDABbox2_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox2_get_Max_Proxy( 
    IDABbox2 * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDABbox2_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABbox2_INTERFACE_DEFINED__ */


#ifndef __IDABbox3_INTERFACE_DEFINED__
#define __IDABbox3_INTERFACE_DEFINED__

/* interface IDABbox3 */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDABbox3;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BDD-3C52-11d0-9200-848C1D000000")
    IDABbox3 : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Min( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Max( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDABbox3Vtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDABbox3 * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDABbox3 * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDABbox3 * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDABbox3 * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDABbox3 * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDABbox3 * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDABbox3 * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDABbox3 * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDABbox3 * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDABbox3 * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDABbox3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDABbox3 * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDABbox3 * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDABbox3 * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDABbox3 * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDABbox3 * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDABbox3 * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDABbox3 * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDABbox3 * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDABbox3 * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDABbox3 * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Min )( 
            IDABbox3 * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Max )( 
            IDABbox3 * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        END_INTERFACE
    } IDABbox3Vtbl;

    interface IDABbox3
    {
        CONST_VTBL struct IDABbox3Vtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDABbox3_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDABbox3_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDABbox3_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDABbox3_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDABbox3_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDABbox3_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDABbox3_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDABbox3_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDABbox3_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDABbox3_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDABbox3_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDABbox3_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDABbox3_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDABbox3_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDABbox3_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDABbox3_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDABbox3_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDABbox3_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDABbox3_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDABbox3_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDABbox3_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDABbox3_get_Min(This,ret_0)	\
    (This)->lpVtbl -> get_Min(This,ret_0)

#define IDABbox3_get_Max(This,ret_0)	\
    (This)->lpVtbl -> get_Max(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox3_get_Min_Proxy( 
    IDABbox3 * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDABbox3_get_Min_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDABbox3_get_Max_Proxy( 
    IDABbox3 * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDABbox3_get_Max_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDABbox3_INTERFACE_DEFINED__ */


#ifndef __IDAPair_INTERFACE_DEFINED__
#define __IDAPair_INTERFACE_DEFINED__

/* interface IDAPair */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPair;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("C46C1BF3-3C52-11d0-9200-848C1D000000")
    IDAPair : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_First( 
            /* [retval][out] */ IDABehavior **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Second( 
            /* [retval][out] */ IDABehavior **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPairVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPair * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPair * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPair * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPair * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPair * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPair * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPair * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAPair * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAPair * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAPair * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAPair * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAPair * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAPair * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAPair * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAPair * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAPair * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAPair * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAPair * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAPair * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_First )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Second )( 
            IDAPair * This,
            /* [retval][out] */ IDABehavior **ret_0);
        
        END_INTERFACE
    } IDAPairVtbl;

    interface IDAPair
    {
        CONST_VTBL struct IDAPairVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPair_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPair_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPair_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPair_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPair_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPair_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPair_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPair_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAPair_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAPair_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAPair_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAPair_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAPair_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAPair_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAPair_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAPair_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAPair_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAPair_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAPair_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAPair_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAPair_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAPair_get_First(This,ret_0)	\
    (This)->lpVtbl -> get_First(This,ret_0)

#define IDAPair_get_Second(This,ret_0)	\
    (This)->lpVtbl -> get_Second(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPair_get_First_Proxy( 
    IDAPair * This,
    /* [retval][out] */ IDABehavior **ret_0);


void __RPC_STUB IDAPair_get_First_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAPair_get_Second_Proxy( 
    IDAPair * This,
    /* [retval][out] */ IDABehavior **ret_0);


void __RPC_STUB IDAPair_get_Second_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPair_INTERFACE_DEFINED__ */


#ifndef __IDAArray_INTERFACE_DEFINED__
#define __IDAArray_INTERFACE_DEFINED__

/* interface IDAArray */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAArray;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("D17506C2-6B26-11d0-8914-00C04FC2A0CA")
    IDAArray : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NthAnim( 
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Length( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAArray * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAArray * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAArray * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAArray * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAArray * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAArray * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAArray * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAArray * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAArray * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAArray * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAArray * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAArray * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAArray * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAArray * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAArray * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAArray * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAArray * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAArray * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAArray * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAArray * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAArray * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDAArray * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDAArray * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        END_INTERFACE
    } IDAArrayVtbl;

    interface IDAArray
    {
        CONST_VTBL struct IDAArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAArray_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAArray_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAArray_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAArray_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAArray_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAArray_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAArray_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAArray_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAArray_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAArray_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAArray_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAArray_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAArray_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAArray_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAArray_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAArray_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAArray_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAArray_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAArray_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAArray_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAArray_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAArray_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDAArray_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAArray_NthAnim_Proxy( 
    IDAArray * This,
    /* [in] */ IDANumber *index_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDAArray_NthAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAArray_Length_Proxy( 
    IDAArray * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAArray_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAArray_INTERFACE_DEFINED__ */


#ifndef __IDATuple_INTERFACE_DEFINED__
#define __IDATuple_INTERFACE_DEFINED__

/* interface IDATuple */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDATuple;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5DFB2650-9668-11d0-B17B-00C04FC2A0CA")
    IDATuple : public IDABehavior
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Nth( 
            /* [in] */ long index_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Length( 
            /* [retval][out] */ long *ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDATupleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDATuple * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDATuple * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDATuple * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDATuple * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDATuple * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDATuple * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDATuple * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDATuple * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDATuple * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDATuple * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDATuple * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDATuple * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDATuple * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDATuple * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDATuple * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDATuple * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDATuple * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDATuple * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDATuple * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDATuple * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDATuple * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Nth )( 
            IDATuple * This,
            /* [in] */ long index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Length )( 
            IDATuple * This,
            /* [retval][out] */ long *ret_0);
        
        END_INTERFACE
    } IDATupleVtbl;

    interface IDATuple
    {
        CONST_VTBL struct IDATupleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDATuple_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDATuple_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDATuple_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDATuple_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDATuple_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDATuple_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDATuple_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDATuple_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDATuple_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDATuple_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDATuple_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDATuple_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDATuple_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDATuple_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDATuple_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDATuple_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDATuple_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDATuple_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDATuple_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDATuple_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDATuple_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDATuple_Nth(This,index_0,ret_1)	\
    (This)->lpVtbl -> Nth(This,index_0,ret_1)

#define IDATuple_get_Length(This,ret_0)	\
    (This)->lpVtbl -> get_Length(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDATuple_Nth_Proxy( 
    IDATuple * This,
    /* [in] */ long index_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDATuple_Nth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDATuple_get_Length_Proxy( 
    IDATuple * This,
    /* [retval][out] */ long *ret_0);


void __RPC_STUB IDATuple_get_Length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDATuple_INTERFACE_DEFINED__ */


#ifndef __IDAUserData_INTERFACE_DEFINED__
#define __IDAUserData_INTERFACE_DEFINED__

/* interface IDAUserData */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAUserData;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AF868305-AB0B-11d0-876A-00C04FC29D46")
    IDAUserData : public IDABehavior
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Data( 
            /* [retval][out] */ IUnknown **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAUserDataVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAUserData * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAUserData * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAUserData * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAUserData * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAUserData * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAUserData * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAUserData * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDAUserData * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDAUserData * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDAUserData * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDAUserData * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDAUserData * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDAUserData * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDAUserData * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDAUserData * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDAUserData * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDAUserData * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDAUserData * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDAUserData * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDAUserData * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDAUserData * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Data )( 
            IDAUserData * This,
            /* [retval][out] */ IUnknown **ret_0);
        
        END_INTERFACE
    } IDAUserDataVtbl;

    interface IDAUserData
    {
        CONST_VTBL struct IDAUserDataVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAUserData_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAUserData_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAUserData_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAUserData_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAUserData_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAUserData_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAUserData_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAUserData_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDAUserData_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDAUserData_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDAUserData_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDAUserData_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDAUserData_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDAUserData_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDAUserData_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDAUserData_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDAUserData_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDAUserData_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDAUserData_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDAUserData_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDAUserData_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDAUserData_get_Data(This,ret_0)	\
    (This)->lpVtbl -> get_Data(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAUserData_get_Data_Proxy( 
    IDAUserData * This,
    /* [retval][out] */ IUnknown **ret_0);


void __RPC_STUB IDAUserData_get_Data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAUserData_INTERFACE_DEFINED__ */


#ifndef __IDA2Geometry_INTERFACE_DEFINED__
#define __IDA2Geometry_INTERFACE_DEFINED__

/* interface IDA2Geometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Geometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E5258-574A-11d1-8E7B-00C04FC29D46")
    IDA2Geometry : public IDAGeometry
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddPickData( 
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Shadow( 
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightRangeAnim( 
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LightRange( 
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE BlendTextureDiffuse( 
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AmbientColor( 
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE D3DRMTexture( 
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModelClip( 
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Lighting( 
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextureImage( 
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2GeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Geometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Geometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Geometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Geometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Geometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Geometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Geometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Geometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Geometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Geometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Geometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Geometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Geometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Geometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Geometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Geometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Geometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDA2Geometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDA2Geometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDA2Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA2Geometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA2Geometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA2Geometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA2Geometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDA2Geometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA2Geometry * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Shadow )( 
            IDA2Geometry * This,
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightRangeAnim )( 
            IDA2Geometry * This,
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightRange )( 
            IDA2Geometry * This,
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BlendTextureDiffuse )( 
            IDA2Geometry * This,
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AmbientColor )( 
            IDA2Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *D3DRMTexture )( 
            IDA2Geometry * This,
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ModelClip )( 
            IDA2Geometry * This,
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Lighting )( 
            IDA2Geometry * This,
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextureImage )( 
            IDA2Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        END_INTERFACE
    } IDA2GeometryVtbl;

    interface IDA2Geometry
    {
        CONST_VTBL struct IDA2GeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Geometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Geometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Geometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Geometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Geometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Geometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Geometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Geometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Geometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Geometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Geometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Geometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Geometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Geometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Geometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Geometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Geometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Geometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Geometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Geometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Geometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Geometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDA2Geometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA2Geometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA2Geometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA2Geometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDA2Geometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDA2Geometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDA2Geometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDA2Geometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDA2Geometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDA2Geometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDA2Geometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDA2Geometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA2Geometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA2Geometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDA2Geometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDA2Geometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDA2Geometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)


#define IDA2Geometry_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA2Geometry_Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)	\
    (This)->lpVtbl -> Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)

#define IDA2Geometry_LightRangeAnim(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRangeAnim(This,range_0,ret_1)

#define IDA2Geometry_LightRange(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRange(This,range_0,ret_1)

#define IDA2Geometry_BlendTextureDiffuse(This,blended_0,ret_1)	\
    (This)->lpVtbl -> BlendTextureDiffuse(This,blended_0,ret_1)

#define IDA2Geometry_AmbientColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> AmbientColor(This,color_0,ret_1)

#define IDA2Geometry_D3DRMTexture(This,rmTex_0,ret_1)	\
    (This)->lpVtbl -> D3DRMTexture(This,rmTex_0,ret_1)

#define IDA2Geometry_ModelClip(This,planePt_0,planeVec_1,ret_2)	\
    (This)->lpVtbl -> ModelClip(This,planePt_0,planeVec_1,ret_2)

#define IDA2Geometry_Lighting(This,lighting_0,ret_1)	\
    (This)->lpVtbl -> Lighting(This,lighting_0,ret_1)

#define IDA2Geometry_TextureImage(This,texture_0,ret_1)	\
    (This)->lpVtbl -> TextureImage(This,texture_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Geometry_AddPickData_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IUnknown *id_0,
    /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDA2Geometry_AddPickData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_Shadow_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAGeometry *geoContainingLights_0,
    /* [in] */ IDAPoint3 *planePoint_1,
    /* [in] */ IDAVector3 *planeNormal_2,
    /* [retval][out] */ IDAGeometry **ret_3);


void __RPC_STUB IDA2Geometry_Shadow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_LightRangeAnim_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDANumber *range_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_LightRangeAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_LightRange_Proxy( 
    IDA2Geometry * This,
    /* [in] */ double range_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_LightRange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_BlendTextureDiffuse_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDABoolean *blended_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_BlendTextureDiffuse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_AmbientColor_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAColor *color_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_AmbientColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_D3DRMTexture_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IUnknown *rmTex_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_D3DRMTexture_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_ModelClip_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAPoint3 *planePt_0,
    /* [in] */ IDAVector3 *planeVec_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDA2Geometry_ModelClip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_Lighting_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDABoolean *lighting_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_Lighting_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Geometry_TextureImage_Proxy( 
    IDA2Geometry * This,
    /* [in] */ IDAImage *texture_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA2Geometry_TextureImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Geometry_INTERFACE_DEFINED__ */


#ifndef __IDA2Image_INTERFACE_DEFINED__
#define __IDA2Image_INTERFACE_DEFINED__

/* interface IDA2Image */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Image;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E5259-574A-11d1-8E7B-00C04FC29D46")
    IDA2Image : public IDAImage
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddPickData( 
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RenderResolution( 
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageQuality( 
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorKey( 
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Image * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Image * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Image * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Image * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Image * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Image * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Image * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Image * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Image * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Image * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Image * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Image * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Image * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Image * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Image * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Image * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Image * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Image * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Image * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA2Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA2Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDA2Image * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA2Image * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDA2Image * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA2Image * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA2Image * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA2Image * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDA2Image * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDA2Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDA2Image * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDA2Image * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA2Image * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RenderResolution )( 
            IDA2Image * This,
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageQuality )( 
            IDA2Image * This,
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorKey )( 
            IDA2Image * This,
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDA2ImageVtbl;

    interface IDA2Image
    {
        CONST_VTBL struct IDA2ImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Image_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Image_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Image_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Image_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Image_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Image_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Image_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Image_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Image_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Image_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Image_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Image_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Image_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Image_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Image_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Image_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Image_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Image_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Image_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Image_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Image_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Image_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA2Image_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA2Image_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDA2Image_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA2Image_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDA2Image_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA2Image_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDA2Image_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDA2Image_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA2Image_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDA2Image_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDA2Image_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDA2Image_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDA2Image_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)


#define IDA2Image_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA2Image_RenderResolution(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RenderResolution(This,width_0,height_1,ret_2)

#define IDA2Image_ImageQuality(This,dwQualityFlags_0,ret_1)	\
    (This)->lpVtbl -> ImageQuality(This,dwQualityFlags_0,ret_1)

#define IDA2Image_ColorKey(This,colorKey_0,ret_1)	\
    (This)->lpVtbl -> ColorKey(This,colorKey_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Image_AddPickData_Proxy( 
    IDA2Image * This,
    /* [in] */ IUnknown *id_0,
    /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDA2Image_AddPickData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_RenderResolution_Proxy( 
    IDA2Image * This,
    /* [in] */ long width_0,
    /* [in] */ long height_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDA2Image_RenderResolution_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_ImageQuality_Proxy( 
    IDA2Image * This,
    /* [in] */ DWORD dwQualityFlags_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA2Image_ImageQuality_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Image_ColorKey_Proxy( 
    IDA2Image * This,
    /* [in] */ IDAColor *colorKey_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA2Image_ColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Image_INTERFACE_DEFINED__ */


#ifndef __IDA2FontStyle_INTERFACE_DEFINED__
#define __IDA2FontStyle_INTERFACE_DEFINED__

/* interface IDA2FontStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2FontStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("960D8EFF-E494-11d1-AB75-00C04FD92B6B")
    IDA2FontStyle : public IDAFontStyle
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransformCharacters( 
            /* [in] */ IDATransform2 *transform_0,
            /* [retval][out] */ IDAFontStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2FontStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2FontStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2FontStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2FontStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2FontStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2FontStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2FontStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2FontStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2FontStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2FontStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2FontStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2FontStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2FontStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2FontStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2FontStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2FontStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2FontStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2FontStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Bold )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Italic )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Underline )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Strikethrough )( 
            IDA2FontStyle * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDA2FontStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDA2FontStyle * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *FamilyAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDAString *face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Family )( 
            IDA2FontStyle * This,
            /* [in] */ BSTR face_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SizeAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Size )( 
            IDA2FontStyle * This,
            /* [in] */ double size_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Weight )( 
            IDA2FontStyle * This,
            /* [in] */ double weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *WeightAnim )( 
            IDA2FontStyle * This,
            /* [in] */ IDANumber *weight_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TransformCharacters )( 
            IDA2FontStyle * This,
            /* [in] */ IDATransform2 *transform_0,
            /* [retval][out] */ IDAFontStyle **ret_1);
        
        END_INTERFACE
    } IDA2FontStyleVtbl;

    interface IDA2FontStyle
    {
        CONST_VTBL struct IDA2FontStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2FontStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2FontStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2FontStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2FontStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2FontStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2FontStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2FontStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2FontStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2FontStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2FontStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2FontStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2FontStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2FontStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2FontStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2FontStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2FontStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2FontStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2FontStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2FontStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2FontStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2FontStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2FontStyle_Bold(This,ret_0)	\
    (This)->lpVtbl -> Bold(This,ret_0)

#define IDA2FontStyle_Italic(This,ret_0)	\
    (This)->lpVtbl -> Italic(This,ret_0)

#define IDA2FontStyle_Underline(This,ret_0)	\
    (This)->lpVtbl -> Underline(This,ret_0)

#define IDA2FontStyle_Strikethrough(This,ret_0)	\
    (This)->lpVtbl -> Strikethrough(This,ret_0)

#define IDA2FontStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDA2FontStyle_Color(This,col_0,ret_1)	\
    (This)->lpVtbl -> Color(This,col_0,ret_1)

#define IDA2FontStyle_FamilyAnim(This,face_0,ret_1)	\
    (This)->lpVtbl -> FamilyAnim(This,face_0,ret_1)

#define IDA2FontStyle_Family(This,face_0,ret_1)	\
    (This)->lpVtbl -> Family(This,face_0,ret_1)

#define IDA2FontStyle_SizeAnim(This,size_0,ret_1)	\
    (This)->lpVtbl -> SizeAnim(This,size_0,ret_1)

#define IDA2FontStyle_Size(This,size_0,ret_1)	\
    (This)->lpVtbl -> Size(This,size_0,ret_1)

#define IDA2FontStyle_Weight(This,weight_0,ret_1)	\
    (This)->lpVtbl -> Weight(This,weight_0,ret_1)

#define IDA2FontStyle_WeightAnim(This,weight_0,ret_1)	\
    (This)->lpVtbl -> WeightAnim(This,weight_0,ret_1)


#define IDA2FontStyle_TransformCharacters(This,transform_0,ret_1)	\
    (This)->lpVtbl -> TransformCharacters(This,transform_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2FontStyle_TransformCharacters_Proxy( 
    IDA2FontStyle * This,
    /* [in] */ IDATransform2 *transform_0,
    /* [retval][out] */ IDAFontStyle **ret_1);


void __RPC_STUB IDA2FontStyle_TransformCharacters_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2FontStyle_INTERFACE_DEFINED__ */


#ifndef __IDA2LineStyle_INTERFACE_DEFINED__
#define __IDA2LineStyle_INTERFACE_DEFINED__

/* interface IDA2LineStyle */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2LineStyle;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("5F00F545-DF18-11d1-AB6F-00C04FD92B6B")
    IDA2LineStyle : public IDALineStyle
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE DashStyle( 
            /* [in] */ DWORD ds_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MiterLimit( 
            /* [in] */ double mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MiterLimitAnim( 
            /* [in] */ IDANumber *mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE JoinStyle( 
            /* [in] */ DWORD js_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EndStyle( 
            /* [in] */ DWORD es_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2LineStyleVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2LineStyle * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2LineStyle * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2LineStyle * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2LineStyle * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2LineStyle * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2LineStyle * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2LineStyle * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2LineStyle * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2LineStyle * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2LineStyle * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2LineStyle * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2LineStyle * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2LineStyle * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2LineStyle * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2LineStyle * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2LineStyle * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2LineStyle * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *End )( 
            IDA2LineStyle * This,
            /* [in] */ IDAEndStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Join )( 
            IDA2LineStyle * This,
            /* [in] */ IDAJoinStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *Dash )( 
            IDA2LineStyle * This,
            /* [in] */ IDADashStyle *obsolete_0,
            /* [retval][out] */ IDALineStyle **obsolete_1);
        
        HRESULT ( STDMETHODCALLTYPE *WidthAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *width )( 
            IDA2LineStyle * This,
            /* [in] */ double sty_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AntiAliasing )( 
            IDA2LineStyle * This,
            /* [in] */ double aaStyle_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Detail )( 
            IDA2LineStyle * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Color )( 
            IDA2LineStyle * This,
            /* [in] */ IDAColor *clr_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DashStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD ds_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MiterLimit )( 
            IDA2LineStyle * This,
            /* [in] */ double mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MiterLimitAnim )( 
            IDA2LineStyle * This,
            /* [in] */ IDANumber *mtrlim_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *JoinStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD js_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *EndStyle )( 
            IDA2LineStyle * This,
            /* [in] */ DWORD es_enum_0,
            /* [retval][out] */ IDALineStyle **ret_1);
        
        END_INTERFACE
    } IDA2LineStyleVtbl;

    interface IDA2LineStyle
    {
        CONST_VTBL struct IDA2LineStyleVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2LineStyle_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2LineStyle_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2LineStyle_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2LineStyle_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2LineStyle_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2LineStyle_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2LineStyle_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2LineStyle_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2LineStyle_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2LineStyle_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2LineStyle_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2LineStyle_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2LineStyle_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2LineStyle_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2LineStyle_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2LineStyle_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2LineStyle_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2LineStyle_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2LineStyle_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2LineStyle_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2LineStyle_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2LineStyle_End(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> End(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_Join(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Join(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_Dash(This,obsolete_0,obsolete_1)	\
    (This)->lpVtbl -> Dash(This,obsolete_0,obsolete_1)

#define IDA2LineStyle_WidthAnim(This,sty_0,ret_1)	\
    (This)->lpVtbl -> WidthAnim(This,sty_0,ret_1)

#define IDA2LineStyle_width(This,sty_0,ret_1)	\
    (This)->lpVtbl -> width(This,sty_0,ret_1)

#define IDA2LineStyle_AntiAliasing(This,aaStyle_0,ret_1)	\
    (This)->lpVtbl -> AntiAliasing(This,aaStyle_0,ret_1)

#define IDA2LineStyle_Detail(This,ret_0)	\
    (This)->lpVtbl -> Detail(This,ret_0)

#define IDA2LineStyle_Color(This,clr_0,ret_1)	\
    (This)->lpVtbl -> Color(This,clr_0,ret_1)


#define IDA2LineStyle_DashStyle(This,ds_enum_0,ret_1)	\
    (This)->lpVtbl -> DashStyle(This,ds_enum_0,ret_1)

#define IDA2LineStyle_MiterLimit(This,mtrlim_0,ret_1)	\
    (This)->lpVtbl -> MiterLimit(This,mtrlim_0,ret_1)

#define IDA2LineStyle_MiterLimitAnim(This,mtrlim_0,ret_1)	\
    (This)->lpVtbl -> MiterLimitAnim(This,mtrlim_0,ret_1)

#define IDA2LineStyle_JoinStyle(This,js_enum_0,ret_1)	\
    (This)->lpVtbl -> JoinStyle(This,js_enum_0,ret_1)

#define IDA2LineStyle_EndStyle(This,es_enum_0,ret_1)	\
    (This)->lpVtbl -> EndStyle(This,es_enum_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2LineStyle_DashStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD ds_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_DashStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_MiterLimit_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ double mtrlim_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_MiterLimit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_MiterLimitAnim_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ IDANumber *mtrlim_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_MiterLimitAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_JoinStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD js_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_JoinStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2LineStyle_EndStyle_Proxy( 
    IDA2LineStyle * This,
    /* [in] */ DWORD es_enum_0,
    /* [retval][out] */ IDALineStyle **ret_1);


void __RPC_STUB IDA2LineStyle_EndStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2LineStyle_INTERFACE_DEFINED__ */


#ifndef __IDA2Event_INTERFACE_DEFINED__
#define __IDA2Event_INTERFACE_DEFINED__

/* interface IDA2Event */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Event;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("B90E525A-574A-11d1-8E7B-00C04FC29D46")
    IDA2Event : public IDAEvent
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE NotifyScript( 
            /* [in] */ BSTR scriptlet_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2EventVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Event * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Event * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Event * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Event * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Event * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Event * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Event * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Event * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Event * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Event * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Event * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Event * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Event * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Event * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Event * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Event * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Event * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Event * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Event * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Notify )( 
            IDA2Event * This,
            /* [in] */ IDAUntilNotifier *notifier_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Snapshot )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AttachData )( 
            IDA2Event * This,
            /* [in] */ IDABehavior *data_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA2Event * This,
            /* [in] */ BSTR scriptlet_0,
            /* [in] */ BSTR language_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NotifyScript )( 
            IDA2Event * This,
            /* [in] */ BSTR scriptlet_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        END_INTERFACE
    } IDA2EventVtbl;

    interface IDA2Event
    {
        CONST_VTBL struct IDA2EventVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Event_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Event_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Event_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Event_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Event_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Event_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Event_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Event_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Event_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Event_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Event_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Event_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Event_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Event_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Event_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Event_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Event_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Event_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Event_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Event_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Event_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Event_Notify(This,notifier_0,ret_1)	\
    (This)->lpVtbl -> Notify(This,notifier_0,ret_1)

#define IDA2Event_Snapshot(This,b_0,ret_1)	\
    (This)->lpVtbl -> Snapshot(This,b_0,ret_1)

#define IDA2Event_AttachData(This,data_0,ret_1)	\
    (This)->lpVtbl -> AttachData(This,data_0,ret_1)

#define IDA2Event_ScriptCallback(This,scriptlet_0,language_1,ret_2)	\
    (This)->lpVtbl -> ScriptCallback(This,scriptlet_0,language_1,ret_2)


#define IDA2Event_NotifyScript(This,scriptlet_0,ret_1)	\
    (This)->lpVtbl -> NotifyScript(This,scriptlet_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Event_NotifyScript_Proxy( 
    IDA2Event * This,
    /* [in] */ BSTR scriptlet_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDA2Event_NotifyScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Event_INTERFACE_DEFINED__ */


#ifndef __IDA2Array_INTERFACE_DEFINED__
#define __IDA2Array_INTERFACE_DEFINED__

/* interface IDA2Array */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Array;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2A8F0B06-BE2B-11d1-B219-00C04FC2A0CA")
    IDA2Array : public IDAArray
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AddElement( 
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RemoveElement( 
            /* [in] */ long i_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Array * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Array * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Array * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Array * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Array * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Array * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Array * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Array * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Array * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Array * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Array * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Array * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Array * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Array * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Array * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Array * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Array * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDA2Array * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDA2Array * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AddElement )( 
            IDA2Array * This,
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )( 
            IDA2Array * This,
            /* [in] */ long i_0);
        
        END_INTERFACE
    } IDA2ArrayVtbl;

    interface IDA2Array
    {
        CONST_VTBL struct IDA2ArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Array_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Array_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Array_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Array_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Array_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Array_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Array_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Array_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Array_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Array_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Array_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Array_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Array_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Array_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Array_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Array_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Array_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Array_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Array_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Array_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Array_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Array_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDA2Array_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)


#define IDA2Array_AddElement(This,b_0,flag_1,ret_2)	\
    (This)->lpVtbl -> AddElement(This,b_0,flag_1,ret_2)

#define IDA2Array_RemoveElement(This,i_0)	\
    (This)->lpVtbl -> RemoveElement(This,i_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Array_AddElement_Proxy( 
    IDA2Array * This,
    /* [in] */ IDABehavior *b_0,
    /* [in] */ DWORD flag_1,
    /* [retval][out] */ long *ret_2);


void __RPC_STUB IDA2Array_AddElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Array_RemoveElement_Proxy( 
    IDA2Array * This,
    /* [in] */ long i_0);


void __RPC_STUB IDA2Array_RemoveElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Array_INTERFACE_DEFINED__ */


#ifndef __IDA2Color_INTERFACE_DEFINED__
#define __IDA2Color_INTERFACE_DEFINED__

/* interface IDA2Color */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2Color;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("28A4B924-61FE-11d2-A740-00C04F79754C")
    IDA2Color : public IDAColor
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE AnimateProperty( 
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDA2Color **ret_4) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ColorVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Color * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Color * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Color * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Color * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Color * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Color * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Color * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA2Color * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA2Color * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA2Color * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA2Color * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA2Color * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA2Color * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA2Color * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA2Color * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA2Color * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA2Color * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA2Color * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA2Color * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA2Color * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA2Color * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Hue )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Saturation )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lightness )( 
            IDA2Color * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AnimateProperty )( 
            IDA2Color * This,
            /* [in] */ BSTR propertyPath_0,
            /* [in] */ BSTR scriptingLanguage_1,
            /* [in] */ VARIANT_BOOL invokeAsMethod_2,
            /* [in] */ double minUpdateInterval_3,
            /* [retval][out] */ IDA2Color **ret_4);
        
        END_INTERFACE
    } IDA2ColorVtbl;

    interface IDA2Color
    {
        CONST_VTBL struct IDA2ColorVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Color_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Color_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Color_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Color_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Color_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Color_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Color_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Color_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA2Color_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA2Color_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA2Color_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA2Color_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA2Color_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA2Color_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA2Color_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA2Color_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA2Color_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA2Color_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA2Color_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA2Color_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA2Color_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA2Color_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA2Color_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA2Color_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA2Color_get_Hue(This,ret_0)	\
    (This)->lpVtbl -> get_Hue(This,ret_0)

#define IDA2Color_get_Saturation(This,ret_0)	\
    (This)->lpVtbl -> get_Saturation(This,ret_0)

#define IDA2Color_get_Lightness(This,ret_0)	\
    (This)->lpVtbl -> get_Lightness(This,ret_0)


#define IDA2Color_AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)	\
    (This)->lpVtbl -> AnimateProperty(This,propertyPath_0,scriptingLanguage_1,invokeAsMethod_2,minUpdateInterval_3,ret_4)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Color_AnimateProperty_Proxy( 
    IDA2Color * This,
    /* [in] */ BSTR propertyPath_0,
    /* [in] */ BSTR scriptingLanguage_1,
    /* [in] */ VARIANT_BOOL invokeAsMethod_2,
    /* [in] */ double minUpdateInterval_3,
    /* [retval][out] */ IDA2Color **ret_4);


void __RPC_STUB IDA2Color_AnimateProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Color_INTERFACE_DEFINED__ */


#ifndef __IDA3Geometry_INTERFACE_DEFINED__
#define __IDA3Geometry_INTERFACE_DEFINED__

/* interface IDA3Geometry */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Geometry;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("EB5093C7-56F9-11d2-88CE-00C04FA35859")
    IDA3Geometry : public IDA2Geometry
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Billboard( 
            /* [in] */ IDAVector3 *axis_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3GeometryVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Geometry * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Geometry * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Geometry * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Geometry * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Geometry * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Geometry * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Geometry * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Geometry * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Geometry * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Geometry * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Geometry * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Geometry * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Geometry * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Geometry * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Geometry * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Geometry * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Geometry * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *RenderSound )( 
            IDA3Geometry * This,
            /* [in] */ IDAMicrophone *mic_0,
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *EmissiveColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DiffuseColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponent )( 
            IDA3Geometry * This,
            /* [in] */ double power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SpecularExponentAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *power_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Texture )( 
            IDA3Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA3Geometry * This,
            /* [in] */ double level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *level_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA3Geometry * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA3Geometry * This,
            /* [retval][out] */ IDABbox3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA3Geometry * This,
            /* [in] */ IDACamera *cam_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuationAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *constant_0,
            /* [in] */ IDANumber *linear_1,
            /* [in] */ IDANumber *quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightAttenuation )( 
            IDA3Geometry * This,
            /* [in] */ double constant_0,
            /* [in] */ double linear_1,
            /* [in] */ double quadratic_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA3Geometry * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Shadow )( 
            IDA3Geometry * This,
            /* [in] */ IDAGeometry *geoContainingLights_0,
            /* [in] */ IDAPoint3 *planePoint_1,
            /* [in] */ IDAVector3 *planeNormal_2,
            /* [retval][out] */ IDAGeometry **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *LightRangeAnim )( 
            IDA3Geometry * This,
            /* [in] */ IDANumber *range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LightRange )( 
            IDA3Geometry * This,
            /* [in] */ double range_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *BlendTextureDiffuse )( 
            IDA3Geometry * This,
            /* [in] */ IDABoolean *blended_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AmbientColor )( 
            IDA3Geometry * This,
            /* [in] */ IDAColor *color_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *D3DRMTexture )( 
            IDA3Geometry * This,
            /* [in] */ IUnknown *rmTex_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ModelClip )( 
            IDA3Geometry * This,
            /* [in] */ IDAPoint3 *planePt_0,
            /* [in] */ IDAVector3 *planeVec_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Lighting )( 
            IDA3Geometry * This,
            /* [in] */ IDABoolean *lighting_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextureImage )( 
            IDA3Geometry * This,
            /* [in] */ IDAImage *texture_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Billboard )( 
            IDA3Geometry * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        END_INTERFACE
    } IDA3GeometryVtbl;

    interface IDA3Geometry
    {
        CONST_VTBL struct IDA3GeometryVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Geometry_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Geometry_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Geometry_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Geometry_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Geometry_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Geometry_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Geometry_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Geometry_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Geometry_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Geometry_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Geometry_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Geometry_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Geometry_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Geometry_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Geometry_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Geometry_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Geometry_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Geometry_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Geometry_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Geometry_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Geometry_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Geometry_RenderSound(This,mic_0,ret_1)	\
    (This)->lpVtbl -> RenderSound(This,mic_0,ret_1)

#define IDA3Geometry_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA3Geometry_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA3Geometry_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA3Geometry_EmissiveColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> EmissiveColor(This,col_0,ret_1)

#define IDA3Geometry_DiffuseColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> DiffuseColor(This,col_0,ret_1)

#define IDA3Geometry_SpecularColor(This,col_0,ret_1)	\
    (This)->lpVtbl -> SpecularColor(This,col_0,ret_1)

#define IDA3Geometry_SpecularExponent(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponent(This,power_0,ret_1)

#define IDA3Geometry_SpecularExponentAnim(This,power_0,ret_1)	\
    (This)->lpVtbl -> SpecularExponentAnim(This,power_0,ret_1)

#define IDA3Geometry_Texture(This,texture_0,ret_1)	\
    (This)->lpVtbl -> Texture(This,texture_0,ret_1)

#define IDA3Geometry_Opacity(This,level_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,level_0,ret_1)

#define IDA3Geometry_OpacityAnim(This,level_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,level_0,ret_1)

#define IDA3Geometry_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA3Geometry_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA3Geometry_Render(This,cam_0,ret_1)	\
    (This)->lpVtbl -> Render(This,cam_0,ret_1)

#define IDA3Geometry_LightColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> LightColor(This,color_0,ret_1)

#define IDA3Geometry_LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuationAnim(This,constant_0,linear_1,quadratic_2,ret_3)

#define IDA3Geometry_LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)	\
    (This)->lpVtbl -> LightAttenuation(This,constant_0,linear_1,quadratic_2,ret_3)


#define IDA3Geometry_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA3Geometry_Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)	\
    (This)->lpVtbl -> Shadow(This,geoContainingLights_0,planePoint_1,planeNormal_2,ret_3)

#define IDA3Geometry_LightRangeAnim(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRangeAnim(This,range_0,ret_1)

#define IDA3Geometry_LightRange(This,range_0,ret_1)	\
    (This)->lpVtbl -> LightRange(This,range_0,ret_1)

#define IDA3Geometry_BlendTextureDiffuse(This,blended_0,ret_1)	\
    (This)->lpVtbl -> BlendTextureDiffuse(This,blended_0,ret_1)

#define IDA3Geometry_AmbientColor(This,color_0,ret_1)	\
    (This)->lpVtbl -> AmbientColor(This,color_0,ret_1)

#define IDA3Geometry_D3DRMTexture(This,rmTex_0,ret_1)	\
    (This)->lpVtbl -> D3DRMTexture(This,rmTex_0,ret_1)

#define IDA3Geometry_ModelClip(This,planePt_0,planeVec_1,ret_2)	\
    (This)->lpVtbl -> ModelClip(This,planePt_0,planeVec_1,ret_2)

#define IDA3Geometry_Lighting(This,lighting_0,ret_1)	\
    (This)->lpVtbl -> Lighting(This,lighting_0,ret_1)

#define IDA3Geometry_TextureImage(This,texture_0,ret_1)	\
    (This)->lpVtbl -> TextureImage(This,texture_0,ret_1)


#define IDA3Geometry_Billboard(This,axis_0,ret_1)	\
    (This)->lpVtbl -> Billboard(This,axis_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Geometry_Billboard_Proxy( 
    IDA3Geometry * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDA3Geometry_Billboard_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Geometry_INTERFACE_DEFINED__ */


#ifndef __IDA3Image_INTERFACE_DEFINED__
#define __IDA3Image_INTERFACE_DEFINED__

/* interface IDA3Image */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Image;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("AD083DBB-5817-11d2-ABA1-00C04FD92B6B")
    IDA3Image : public IDA2Image
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE TransformColorRGB( 
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ImageVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Image * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Image * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Image * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Image * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Image * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Image * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Image * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Image * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Image * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Image * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Image * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Image * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Image * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Image * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Image * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Image * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Image * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Image * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Image * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Image * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *Pickable )( 
            IDA3Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *PickableOccluded )( 
            IDA3Image * This,
            /* [retval][out] */ IDAPickableResult **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyBitmapEffect )( 
            IDA3Image * This,
            /* [in] */ IUnknown *effectToApply_0,
            /* [in] */ IDAEvent *firesWhenChanged_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_BoundingBox )( 
            IDA3Image * This,
            /* [retval][out] */ IDABbox2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Crop )( 
            IDA3Image * This,
            /* [in] */ IDAPoint2 *min_0,
            /* [in] */ IDAPoint2 *max_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Transform )( 
            IDA3Image * This,
            /* [in] */ IDATransform2 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OpacityAnim )( 
            IDA3Image * This,
            /* [in] */ IDANumber *opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Opacity )( 
            IDA3Image * This,
            /* [in] */ double opacity_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Undetectable )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Tile )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Clip )( 
            IDA3Image * This,
            /* [in] */ IDAMatte *m_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MapToUnitSquare )( 
            IDA3Image * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ClipPolygonImageEx )( 
            IDA3Image * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ClipPolygonImage )( 
            IDA3Image * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AddPickData )( 
            IDA3Image * This,
            /* [in] */ IUnknown *id_0,
            /* [in] */ VARIANT_BOOL ignoresOcclusion_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RenderResolution )( 
            IDA3Image * This,
            /* [in] */ long width_0,
            /* [in] */ long height_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageQuality )( 
            IDA3Image * This,
            /* [in] */ DWORD dwQualityFlags_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorKey )( 
            IDA3Image * This,
            /* [in] */ IDAColor *colorKey_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TransformColorRGB )( 
            IDA3Image * This,
            /* [in] */ IDATransform3 *xf_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        END_INTERFACE
    } IDA3ImageVtbl;

    interface IDA3Image
    {
        CONST_VTBL struct IDA3ImageVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Image_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Image_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Image_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Image_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Image_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Image_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Image_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Image_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Image_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Image_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Image_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Image_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Image_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Image_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Image_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Image_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Image_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Image_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Image_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Image_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Image_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Image_Pickable(This,ret_0)	\
    (This)->lpVtbl -> Pickable(This,ret_0)

#define IDA3Image_PickableOccluded(This,ret_0)	\
    (This)->lpVtbl -> PickableOccluded(This,ret_0)

#define IDA3Image_ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)	\
    (This)->lpVtbl -> ApplyBitmapEffect(This,effectToApply_0,firesWhenChanged_1,ret_2)

#define IDA3Image_get_BoundingBox(This,ret_0)	\
    (This)->lpVtbl -> get_BoundingBox(This,ret_0)

#define IDA3Image_Crop(This,min_0,max_1,ret_2)	\
    (This)->lpVtbl -> Crop(This,min_0,max_1,ret_2)

#define IDA3Image_Transform(This,xf_0,ret_1)	\
    (This)->lpVtbl -> Transform(This,xf_0,ret_1)

#define IDA3Image_OpacityAnim(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> OpacityAnim(This,opacity_0,ret_1)

#define IDA3Image_Opacity(This,opacity_0,ret_1)	\
    (This)->lpVtbl -> Opacity(This,opacity_0,ret_1)

#define IDA3Image_Undetectable(This,ret_0)	\
    (This)->lpVtbl -> Undetectable(This,ret_0)

#define IDA3Image_Tile(This,ret_0)	\
    (This)->lpVtbl -> Tile(This,ret_0)

#define IDA3Image_Clip(This,m_0,ret_1)	\
    (This)->lpVtbl -> Clip(This,m_0,ret_1)

#define IDA3Image_MapToUnitSquare(This,ret_0)	\
    (This)->lpVtbl -> MapToUnitSquare(This,ret_0)

#define IDA3Image_ClipPolygonImageEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImageEx(This,points_0size,points_0,ret_1)

#define IDA3Image_ClipPolygonImage(This,points_0,ret_1)	\
    (This)->lpVtbl -> ClipPolygonImage(This,points_0,ret_1)


#define IDA3Image_AddPickData(This,id_0,ignoresOcclusion_1,ret_2)	\
    (This)->lpVtbl -> AddPickData(This,id_0,ignoresOcclusion_1,ret_2)

#define IDA3Image_RenderResolution(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RenderResolution(This,width_0,height_1,ret_2)

#define IDA3Image_ImageQuality(This,dwQualityFlags_0,ret_1)	\
    (This)->lpVtbl -> ImageQuality(This,dwQualityFlags_0,ret_1)

#define IDA3Image_ColorKey(This,colorKey_0,ret_1)	\
    (This)->lpVtbl -> ColorKey(This,colorKey_0,ret_1)


#define IDA3Image_TransformColorRGB(This,xf_0,ret_1)	\
    (This)->lpVtbl -> TransformColorRGB(This,xf_0,ret_1)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Image_TransformColorRGB_Proxy( 
    IDA3Image * This,
    /* [in] */ IDATransform3 *xf_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDA3Image_TransformColorRGB_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Image_INTERFACE_DEFINED__ */


#ifndef __IDA3Array_INTERFACE_DEFINED__
#define __IDA3Array_INTERFACE_DEFINED__

/* interface IDA3Array */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Array;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("3089d9a0-4ce1-11d2-933e-00a0c9b72d4d")
    IDA3Array : public IDA2Array
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetElement( 
            /* [in] */ LONG index,
            /* [in] */ IDABehavior *b,
            /* [in] */ LONG flag) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetElement( 
            /* [in] */ LONG index,
            /* [retval][out] */ IDABehavior **ret) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ArrayVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Array * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Array * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Array * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Array * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Array * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Array * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Array * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *GetClassName )( 
            IDA3Array * This,
            /* [retval][out] */ BSTR *pClassName);
        
        HRESULT ( STDMETHODCALLTYPE *Init )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *toBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Importance )( 
            IDA3Array * This,
            /* [in] */ double relativeImportance,
            /* [retval][out] */ IDABehavior **ppBvr);
        
        HRESULT ( STDMETHODCALLTYPE *RunOnce )( 
            IDA3Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SubstituteTime )( 
            IDA3Array * This,
            /* [in] */ IDANumber *xform,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchTo )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *switchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToNumber )( 
            IDA3Array * This,
            /* [in] */ double numToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *SwitchToString )( 
            IDA3Array * This,
            /* [in] */ BSTR strToSwitchTo);
        
        HRESULT ( STDMETHODCALLTYPE *Hook )( 
            IDA3Array * This,
            /* [in] */ IDABvrHook *notifier,
            /* [retval][out] */ IDABehavior **pBvr);
        
        HRESULT ( STDMETHODCALLTYPE *Duration )( 
            IDA3Array * This,
            /* [in] */ double duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DurationAnim )( 
            IDA3Array * This,
            /* [in] */ IDANumber *duration,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Repeat )( 
            IDA3Array * This,
            /* [in] */ LONG count,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *RepeatForever )( 
            IDA3Array * This,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *IsReady )( 
            IDA3Array * This,
            /* [in] */ VARIANT_BOOL bBlock,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        HRESULT ( STDMETHODCALLTYPE *NthAnim )( 
            IDA3Array * This,
            /* [in] */ IDANumber *index_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Length )( 
            IDA3Array * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *AddElement )( 
            IDA3Array * This,
            /* [in] */ IDABehavior *b_0,
            /* [in] */ DWORD flag_1,
            /* [retval][out] */ long *ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveElement )( 
            IDA3Array * This,
            /* [in] */ long i_0);
        
        HRESULT ( STDMETHODCALLTYPE *SetElement )( 
            IDA3Array * This,
            /* [in] */ LONG index,
            /* [in] */ IDABehavior *b,
            /* [in] */ LONG flag);
        
        HRESULT ( STDMETHODCALLTYPE *GetElement )( 
            IDA3Array * This,
            /* [in] */ LONG index,
            /* [retval][out] */ IDABehavior **ret);
        
        END_INTERFACE
    } IDA3ArrayVtbl;

    interface IDA3Array
    {
        CONST_VTBL struct IDA3ArrayVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Array_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Array_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Array_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Array_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Array_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Array_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Array_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Array_GetClassName(This,pClassName)	\
    (This)->lpVtbl -> GetClassName(This,pClassName)

#define IDA3Array_Init(This,toBvr)	\
    (This)->lpVtbl -> Init(This,toBvr)

#define IDA3Array_Importance(This,relativeImportance,ppBvr)	\
    (This)->lpVtbl -> Importance(This,relativeImportance,ppBvr)

#define IDA3Array_RunOnce(This,bvr)	\
    (This)->lpVtbl -> RunOnce(This,bvr)

#define IDA3Array_SubstituteTime(This,xform,bvr)	\
    (This)->lpVtbl -> SubstituteTime(This,xform,bvr)

#define IDA3Array_SwitchTo(This,switchTo)	\
    (This)->lpVtbl -> SwitchTo(This,switchTo)

#define IDA3Array_SwitchToNumber(This,numToSwitchTo)	\
    (This)->lpVtbl -> SwitchToNumber(This,numToSwitchTo)

#define IDA3Array_SwitchToString(This,strToSwitchTo)	\
    (This)->lpVtbl -> SwitchToString(This,strToSwitchTo)

#define IDA3Array_Hook(This,notifier,pBvr)	\
    (This)->lpVtbl -> Hook(This,notifier,pBvr)

#define IDA3Array_Duration(This,duration,bvr)	\
    (This)->lpVtbl -> Duration(This,duration,bvr)

#define IDA3Array_DurationAnim(This,duration,bvr)	\
    (This)->lpVtbl -> DurationAnim(This,duration,bvr)

#define IDA3Array_Repeat(This,count,bvr)	\
    (This)->lpVtbl -> Repeat(This,count,bvr)

#define IDA3Array_RepeatForever(This,bvr)	\
    (This)->lpVtbl -> RepeatForever(This,bvr)

#define IDA3Array_IsReady(This,bBlock,b)	\
    (This)->lpVtbl -> IsReady(This,bBlock,b)


#define IDA3Array_NthAnim(This,index_0,ret_1)	\
    (This)->lpVtbl -> NthAnim(This,index_0,ret_1)

#define IDA3Array_Length(This,ret_0)	\
    (This)->lpVtbl -> Length(This,ret_0)


#define IDA3Array_AddElement(This,b_0,flag_1,ret_2)	\
    (This)->lpVtbl -> AddElement(This,b_0,flag_1,ret_2)

#define IDA3Array_RemoveElement(This,i_0)	\
    (This)->lpVtbl -> RemoveElement(This,i_0)


#define IDA3Array_SetElement(This,index,b,flag)	\
    (This)->lpVtbl -> SetElement(This,index,b,flag)

#define IDA3Array_GetElement(This,index,ret)	\
    (This)->lpVtbl -> GetElement(This,index,ret)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Array_SetElement_Proxy( 
    IDA3Array * This,
    /* [in] */ LONG index,
    /* [in] */ IDABehavior *b,
    /* [in] */ LONG flag);


void __RPC_STUB IDA3Array_SetElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Array_GetElement_Proxy( 
    IDA3Array * This,
    /* [in] */ LONG index,
    /* [retval][out] */ IDABehavior **ret);


void __RPC_STUB IDA3Array_GetElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Array_INTERFACE_DEFINED__ */


#ifndef __IDAPreferences_INTERFACE_DEFINED__
#define __IDAPreferences_INTERFACE_DEFINED__

/* interface IDAPreferences */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAPreferences;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("69B5BC70-9B19-11d0-9B60-00C04FC2F51D")
    IDAPreferences : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE PutPreference( 
            /* [in] */ BSTR preferenceName,
            /* [in] */ VARIANT value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreference( 
            /* [in] */ BSTR preferenceName,
            /* [retval][out] */ VARIANT *value) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Propagate( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAPreferencesVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAPreferences * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAPreferences * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAPreferences * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAPreferences * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAPreferences * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAPreferences * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAPreferences * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *PutPreference )( 
            IDAPreferences * This,
            /* [in] */ BSTR preferenceName,
            /* [in] */ VARIANT value);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDAPreferences * This,
            /* [in] */ BSTR preferenceName,
            /* [retval][out] */ VARIANT *value);
        
        HRESULT ( STDMETHODCALLTYPE *Propagate )( 
            IDAPreferences * This);
        
        END_INTERFACE
    } IDAPreferencesVtbl;

    interface IDAPreferences
    {
        CONST_VTBL struct IDAPreferencesVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAPreferences_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAPreferences_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAPreferences_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAPreferences_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAPreferences_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAPreferences_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAPreferences_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAPreferences_PutPreference(This,preferenceName,value)	\
    (This)->lpVtbl -> PutPreference(This,preferenceName,value)

#define IDAPreferences_GetPreference(This,preferenceName,value)	\
    (This)->lpVtbl -> GetPreference(This,preferenceName,value)

#define IDAPreferences_Propagate(This)	\
    (This)->lpVtbl -> Propagate(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDAPreferences_PutPreference_Proxy( 
    IDAPreferences * This,
    /* [in] */ BSTR preferenceName,
    /* [in] */ VARIANT value);


void __RPC_STUB IDAPreferences_PutPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPreferences_GetPreference_Proxy( 
    IDAPreferences * This,
    /* [in] */ BSTR preferenceName,
    /* [retval][out] */ VARIANT *value);


void __RPC_STUB IDAPreferences_GetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAPreferences_Propagate_Proxy( 
    IDAPreferences * This);


void __RPC_STUB IDAPreferences_Propagate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAPreferences_INTERFACE_DEFINED__ */


#ifndef __IDA2View_INTERFACE_DEFINED__
#define __IDA2View_INTERFACE_DEFINED__

/* interface IDA2View */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA2View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("2AE71568-4B34-11d1-B1E3-00C04FC2A0CA")
    IDA2View : public IDAView
    {
    public:
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE QueryHitPointEx( 
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StartModelEx( 
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetDDD3DRM( 
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetRMDevice( 
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE GetInvalidatedRects( 
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2View * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDA2View * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA2View * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA2View * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDA2View * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDA2View * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDA2View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDA2View * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDA2View * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDA2View * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDA2View * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDA2View * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDA2View * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDA2View * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDA2View * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDA2View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA2View * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA2View * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA2View * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA2View * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDA2View * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDA2View * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDA2View * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDA2View * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *QueryHitPointEx )( 
            IDA2View * This,
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits);
        
        HRESULT ( STDMETHODCALLTYPE *StartModelEx )( 
            IDA2View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDDD3DRM )( 
            IDA2View * This,
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm);
        
        HRESULT ( STDMETHODCALLTYPE *GetRMDevice )( 
            IDA2View * This,
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GetInvalidatedRects )( 
            IDA2View * This,
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects);
        
        END_INTERFACE
    } IDA2ViewVtbl;

    interface IDA2View
    {
        CONST_VTBL struct IDA2ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2View_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2View_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2View_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2View_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2View_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDA2View_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDA2View_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDA2View_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDA2View_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDA2View_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDA2View_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDA2View_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDA2View_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDA2View_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDA2View_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDA2View_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDA2View_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDA2View_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA2View_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA2View_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDA2View_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDA2View_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDA2View_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDA2View_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDA2View_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDA2View_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA2View_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA2View_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDA2View_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDA2View_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDA2View_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDA2View_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDA2View_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)


#define IDA2View_QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)	\
    (This)->lpVtbl -> QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)

#define IDA2View_StartModelEx(This,pImage,pSound,startTime,dwFlags)	\
    (This)->lpVtbl -> StartModelEx(This,pImage,pSound,startTime,dwFlags)

#define IDA2View_GetDDD3DRM(This,directDraw,d3drm)	\
    (This)->lpVtbl -> GetDDD3DRM(This,directDraw,d3drm)

#define IDA2View_GetRMDevice(This,d3drmDevice,sequenceNumber)	\
    (This)->lpVtbl -> GetRMDevice(This,d3drmDevice,sequenceNumber)

#define IDA2View_GetInvalidatedRects(This,flags,s,pRects,pNumRects)	\
    (This)->lpVtbl -> GetInvalidatedRects(This,flags,s,pRects,pNumRects)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2View_QueryHitPointEx_Proxy( 
    IDA2View * This,
    /* [in] */ LONG s,
    /* [size_is] */ DWORD_PTR *cookies,
    /* [size_is] */ double *points,
    /* [in] */ LPCRECT prcBounds,
    /* [in] */ POINT ptLoc,
    /* [retval][out] */ LONG *hits);


void __RPC_STUB IDA2View_QueryHitPointEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_StartModelEx_Proxy( 
    IDA2View * This,
    /* [in] */ IDAImage *pImage,
    /* [in] */ IDASound *pSound,
    /* [in] */ double startTime,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2View_StartModelEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_GetDDD3DRM_Proxy( 
    IDA2View * This,
    /* [out] */ IUnknown **directDraw,
    /* [out] */ IUnknown **d3drm);


void __RPC_STUB IDA2View_GetDDD3DRM_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2View_GetRMDevice_Proxy( 
    IDA2View * This,
    /* [out] */ IUnknown **d3drmDevice,
    /* [out] */ DWORD *sequenceNumber);


void __RPC_STUB IDA2View_GetRMDevice_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2View_GetInvalidatedRects_Proxy( 
    IDA2View * This,
    /* [in] */ DWORD flags,
    /* [in] */ LONG s,
    /* [size_is] */ RECT *pRects,
    /* [retval][out] */ LONG *pNumRects);


void __RPC_STUB IDA2View_GetInvalidatedRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2View_INTERFACE_DEFINED__ */


#ifndef __IDA3View_INTERFACE_DEFINED__
#define __IDA3View_INTERFACE_DEFINED__

/* interface IDA3View */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3View;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("d5570790-57e2-11d2-933f-00a0c9b72d4d")
    IDA3View : public IDA2View
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OnMouseLeave( 
            /* [in] */ double when) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Window2( 
            /* [retval][out] */ HWND *hwnd) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Window2( 
            /* [in] */ HWND hwnd) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ViewVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3View * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3View * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3View * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3View * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3View * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3View * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_SimulationTime )( 
            IDA3View * This,
            /* [retval][out] */ double *simTime);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA3View * This,
            /* [in] */ double simTime,
            /* [retval][out] */ VARIANT_BOOL *needToRender);
        
        HRESULT ( STDMETHODCALLTYPE *Render )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *AddBvrToRun )( 
            IDA3View * This,
            /* [in] */ IDABehavior *bvr,
            /* [retval][out] */ LONG *pId);
        
        HRESULT ( STDMETHODCALLTYPE *RemoveRunningBvr )( 
            IDA3View * This,
            /* [in] */ LONG id);
        
        HRESULT ( STDMETHODCALLTYPE *StartModel )( 
            IDA3View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime);
        
        HRESULT ( STDMETHODCALLTYPE *StopModel )( 
            IDA3View * This);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window )( 
            IDA3View * This,
            /* [retval][out] */ long *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window )( 
            IDA3View * This,
            /* [in] */ long hwnd);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_IDirectDrawSurface )( 
            IDA3View * This,
            /* [retval][out] */ IUnknown **ddsurf);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_IDirectDrawSurface )( 
            IDA3View * This,
            /* [in] */ IUnknown *ddsurf);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_DC )( 
            IDA3View * This,
            /* [retval][out] */ HDC *dc);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_DC )( 
            IDA3View * This,
            /* [in] */ HDC dc);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompositeDirectlyToTarget )( 
            IDA3View * This,
            /* [retval][out] */ VARIANT_BOOL *composeToTarget);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_CompositeDirectlyToTarget )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL composeToTarget);
        
        HRESULT ( STDMETHODCALLTYPE *SetViewport )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *SetClipRect )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *RePaint )( 
            IDA3View * This,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ LONG w,
            /* [in] */ LONG h);
        
        HRESULT ( STDMETHODCALLTYPE *PaletteChanged )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL bNew);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA3View * This,
            /* [retval][out] */ IDAViewSite **pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA3View * This,
            /* [in] */ IDAViewSite *pViewSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA3View * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA3View * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseMove )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseButton )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG xPos,
            /* [in] */ LONG yPos,
            /* [in] */ BYTE button,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnKey )( 
            IDA3View * This,
            /* [in] */ double when,
            /* [in] */ LONG key,
            /* [in] */ VARIANT_BOOL bPressed,
            /* [in] */ BYTE modifiers);
        
        HRESULT ( STDMETHODCALLTYPE *OnFocus )( 
            IDA3View * This,
            /* [in] */ VARIANT_BOOL bHasFocus);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Preferences )( 
            IDA3View * This,
            /* [retval][out] */ IDAPreferences **prefs);
        
        HRESULT ( STDMETHODCALLTYPE *QueryHitPoint )( 
            IDA3View * This,
            /* [in] */ DWORD dwAspect,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [in] */ LONG lCloseHint,
            /* [retval][out] */ DWORD *pHitResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *QueryHitPointEx )( 
            IDA3View * This,
            /* [in] */ LONG s,
            /* [size_is] */ DWORD_PTR *cookies,
            /* [size_is] */ double *points,
            /* [in] */ LPCRECT prcBounds,
            /* [in] */ POINT ptLoc,
            /* [retval][out] */ LONG *hits);
        
        HRESULT ( STDMETHODCALLTYPE *StartModelEx )( 
            IDA3View * This,
            /* [in] */ IDAImage *pImage,
            /* [in] */ IDASound *pSound,
            /* [in] */ double startTime,
            /* [in] */ DWORD dwFlags);
        
        HRESULT ( STDMETHODCALLTYPE *GetDDD3DRM )( 
            IDA3View * This,
            /* [out] */ IUnknown **directDraw,
            /* [out] */ IUnknown **d3drm);
        
        HRESULT ( STDMETHODCALLTYPE *GetRMDevice )( 
            IDA3View * This,
            /* [out] */ IUnknown **d3drmDevice,
            /* [out] */ DWORD *sequenceNumber);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GetInvalidatedRects )( 
            IDA3View * This,
            /* [in] */ DWORD flags,
            /* [in] */ LONG s,
            /* [size_is] */ RECT *pRects,
            /* [retval][out] */ LONG *pNumRects);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IDA3View * This);
        
        HRESULT ( STDMETHODCALLTYPE *OnMouseLeave )( 
            IDA3View * This,
            /* [in] */ double when);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Window2 )( 
            IDA3View * This,
            /* [retval][out] */ HWND *hwnd);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Window2 )( 
            IDA3View * This,
            /* [in] */ HWND hwnd);
        
        END_INTERFACE
    } IDA3ViewVtbl;

    interface IDA3View
    {
        CONST_VTBL struct IDA3ViewVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3View_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3View_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3View_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3View_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3View_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3View_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3View_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3View_get_SimulationTime(This,simTime)	\
    (This)->lpVtbl -> get_SimulationTime(This,simTime)

#define IDA3View_Tick(This,simTime,needToRender)	\
    (This)->lpVtbl -> Tick(This,simTime,needToRender)

#define IDA3View_Render(This)	\
    (This)->lpVtbl -> Render(This)

#define IDA3View_AddBvrToRun(This,bvr,pId)	\
    (This)->lpVtbl -> AddBvrToRun(This,bvr,pId)

#define IDA3View_RemoveRunningBvr(This,id)	\
    (This)->lpVtbl -> RemoveRunningBvr(This,id)

#define IDA3View_StartModel(This,pImage,pSound,startTime)	\
    (This)->lpVtbl -> StartModel(This,pImage,pSound,startTime)

#define IDA3View_StopModel(This)	\
    (This)->lpVtbl -> StopModel(This)

#define IDA3View_get_Window(This,hwnd)	\
    (This)->lpVtbl -> get_Window(This,hwnd)

#define IDA3View_put_Window(This,hwnd)	\
    (This)->lpVtbl -> put_Window(This,hwnd)

#define IDA3View_get_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> get_IDirectDrawSurface(This,ddsurf)

#define IDA3View_put_IDirectDrawSurface(This,ddsurf)	\
    (This)->lpVtbl -> put_IDirectDrawSurface(This,ddsurf)

#define IDA3View_get_DC(This,dc)	\
    (This)->lpVtbl -> get_DC(This,dc)

#define IDA3View_put_DC(This,dc)	\
    (This)->lpVtbl -> put_DC(This,dc)

#define IDA3View_get_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> get_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA3View_put_CompositeDirectlyToTarget(This,composeToTarget)	\
    (This)->lpVtbl -> put_CompositeDirectlyToTarget(This,composeToTarget)

#define IDA3View_SetViewport(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetViewport(This,xPos,yPos,w,h)

#define IDA3View_SetClipRect(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> SetClipRect(This,xPos,yPos,w,h)

#define IDA3View_RePaint(This,xPos,yPos,w,h)	\
    (This)->lpVtbl -> RePaint(This,xPos,yPos,w,h)

#define IDA3View_PaletteChanged(This,bNew)	\
    (This)->lpVtbl -> PaletteChanged(This,bNew)

#define IDA3View_get_Site(This,pViewSite)	\
    (This)->lpVtbl -> get_Site(This,pViewSite)

#define IDA3View_put_Site(This,pViewSite)	\
    (This)->lpVtbl -> put_Site(This,pViewSite)

#define IDA3View_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA3View_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA3View_OnMouseMove(This,when,xPos,yPos,modifiers)	\
    (This)->lpVtbl -> OnMouseMove(This,when,xPos,yPos,modifiers)

#define IDA3View_OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)	\
    (This)->lpVtbl -> OnMouseButton(This,when,xPos,yPos,button,bPressed,modifiers)

#define IDA3View_OnKey(This,when,key,bPressed,modifiers)	\
    (This)->lpVtbl -> OnKey(This,when,key,bPressed,modifiers)

#define IDA3View_OnFocus(This,bHasFocus)	\
    (This)->lpVtbl -> OnFocus(This,bHasFocus)

#define IDA3View_get_Preferences(This,prefs)	\
    (This)->lpVtbl -> get_Preferences(This,prefs)

#define IDA3View_QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)	\
    (This)->lpVtbl -> QueryHitPoint(This,dwAspect,prcBounds,ptLoc,lCloseHint,pHitResult)


#define IDA3View_QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)	\
    (This)->lpVtbl -> QueryHitPointEx(This,s,cookies,points,prcBounds,ptLoc,hits)

#define IDA3View_StartModelEx(This,pImage,pSound,startTime,dwFlags)	\
    (This)->lpVtbl -> StartModelEx(This,pImage,pSound,startTime,dwFlags)

#define IDA3View_GetDDD3DRM(This,directDraw,d3drm)	\
    (This)->lpVtbl -> GetDDD3DRM(This,directDraw,d3drm)

#define IDA3View_GetRMDevice(This,d3drmDevice,sequenceNumber)	\
    (This)->lpVtbl -> GetRMDevice(This,d3drmDevice,sequenceNumber)

#define IDA3View_GetInvalidatedRects(This,flags,s,pRects,pNumRects)	\
    (This)->lpVtbl -> GetInvalidatedRects(This,flags,s,pRects,pNumRects)


#define IDA3View_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define IDA3View_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#define IDA3View_OnMouseLeave(This,when)	\
    (This)->lpVtbl -> OnMouseLeave(This,when)

#define IDA3View_get_Window2(This,hwnd)	\
    (This)->lpVtbl -> get_Window2(This,hwnd)

#define IDA3View_put_Window2(This,hwnd)	\
    (This)->lpVtbl -> put_Window2(This,hwnd)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3View_Pause_Proxy( 
    IDA3View * This);


void __RPC_STUB IDA3View_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3View_Resume_Proxy( 
    IDA3View * This);


void __RPC_STUB IDA3View_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3View_OnMouseLeave_Proxy( 
    IDA3View * This,
    /* [in] */ double when);


void __RPC_STUB IDA3View_OnMouseLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDA3View_get_Window2_Proxy( 
    IDA3View * This,
    /* [retval][out] */ HWND *hwnd);


void __RPC_STUB IDA3View_get_Window2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDA3View_put_Window2_Proxy( 
    IDA3View * This,
    /* [in] */ HWND hwnd);


void __RPC_STUB IDA3View_put_Window2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3View_INTERFACE_DEFINED__ */


#ifndef ___IDAViewEvents_DISPINTERFACE_DEFINED__
#define ___IDAViewEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IDAViewEvents */
/* [helpstring][uuid] */ 


EXTERN_C const IID DIID__IDAViewEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("89131312-7806-11d2-8BEE-00C04FC2F51D")
    _IDAViewEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IDAViewEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IDAViewEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IDAViewEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IDAViewEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IDAViewEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IDAViewEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IDAViewEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IDAViewEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IDAViewEventsVtbl;

    interface _IDAViewEvents
    {
        CONST_VTBL struct _IDAViewEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IDAViewEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IDAViewEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IDAViewEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IDAViewEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _IDAViewEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _IDAViewEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _IDAViewEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IDAViewEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DAView;

#ifdef __cplusplus

class DECLSPEC_UUID("283807B5-2C60-11d0-A31D-00AA00B92C03")
DAView;
#endif

#ifndef __IDASite_INTERFACE_DEFINED__
#define __IDASite_INTERFACE_DEFINED__

/* interface IDASite */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDASite;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("45393DF0-54B9-11cf-92A2-00AA00B8A733")
    IDASite : public IDispatch
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetStatusText( 
            /* [in] */ BSTR StatusText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReportError( 
            /* [in] */ HRESULT hr,
            /* [in] */ BSTR ErrorText) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ReportGC( 
            /* [in] */ VARIANT_BOOL bStarting) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDASiteVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDASite * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDASite * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDASite * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDASite * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDASite * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDASite * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDASite * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        HRESULT ( STDMETHODCALLTYPE *SetStatusText )( 
            IDASite * This,
            /* [in] */ BSTR StatusText);
        
        HRESULT ( STDMETHODCALLTYPE *ReportError )( 
            IDASite * This,
            /* [in] */ HRESULT hr,
            /* [in] */ BSTR ErrorText);
        
        HRESULT ( STDMETHODCALLTYPE *ReportGC )( 
            IDASite * This,
            /* [in] */ VARIANT_BOOL bStarting);
        
        END_INTERFACE
    } IDASiteVtbl;

    interface IDASite
    {
        CONST_VTBL struct IDASiteVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDASite_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDASite_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDASite_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDASite_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDASite_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDASite_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDASite_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDASite_SetStatusText(This,StatusText)	\
    (This)->lpVtbl -> SetStatusText(This,StatusText)

#define IDASite_ReportError(This,hr,ErrorText)	\
    (This)->lpVtbl -> ReportError(This,hr,ErrorText)

#define IDASite_ReportGC(This,bStarting)	\
    (This)->lpVtbl -> ReportGC(This,bStarting)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDASite_SetStatusText_Proxy( 
    IDASite * This,
    /* [in] */ BSTR StatusText);


void __RPC_STUB IDASite_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASite_ReportError_Proxy( 
    IDASite * This,
    /* [in] */ HRESULT hr,
    /* [in] */ BSTR ErrorText);


void __RPC_STUB IDASite_ReportError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDASite_ReportGC_Proxy( 
    IDASite * This,
    /* [in] */ VARIANT_BOOL bStarting);


void __RPC_STUB IDASite_ReportGC_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDASite_INTERFACE_DEFINED__ */


#ifndef __IDAImportationResult_INTERFACE_DEFINED__
#define __IDAImportationResult_INTERFACE_DEFINED__

/* interface IDAImportationResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAImportationResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("4A933702-E36F-11d0-9B99-00C04FC2F51D")
    IDAImportationResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Sound( 
            /* [retval][out] */ IDASound **ppSound) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Geometry( 
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Duration( 
            /* [retval][out] */ IDANumber **ppDuration) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_CompletionEvent( 
            /* [retval][out] */ IDAEvent **ppCompletionEvent) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Progress( 
            /* [retval][out] */ IDANumber **ppProgress) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Size( 
            /* [retval][out] */ IDANumber **ppSizeInBytes) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAImportationResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAImportationResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAImportationResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAImportationResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAImportationResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAImportationResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAImportationResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAImportationResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Geometry )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Duration )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppDuration);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_CompletionEvent )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDAEvent **ppCompletionEvent);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Progress )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppProgress);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Size )( 
            IDAImportationResult * This,
            /* [retval][out] */ IDANumber **ppSizeInBytes);
        
        END_INTERFACE
    } IDAImportationResultVtbl;

    interface IDAImportationResult
    {
        CONST_VTBL struct IDAImportationResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAImportationResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAImportationResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAImportationResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAImportationResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAImportationResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAImportationResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAImportationResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAImportationResult_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAImportationResult_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDAImportationResult_get_Geometry(This,ppGeometry)	\
    (This)->lpVtbl -> get_Geometry(This,ppGeometry)

#define IDAImportationResult_get_Duration(This,ppDuration)	\
    (This)->lpVtbl -> get_Duration(This,ppDuration)

#define IDAImportationResult_get_CompletionEvent(This,ppCompletionEvent)	\
    (This)->lpVtbl -> get_CompletionEvent(This,ppCompletionEvent)

#define IDAImportationResult_get_Progress(This,ppProgress)	\
    (This)->lpVtbl -> get_Progress(This,ppProgress)

#define IDAImportationResult_get_Size(This,ppSizeInBytes)	\
    (This)->lpVtbl -> get_Size(This,ppSizeInBytes)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Image_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAImportationResult_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Sound_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDASound **ppSound);


void __RPC_STUB IDAImportationResult_get_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Geometry_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAImportationResult_get_Geometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Duration_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppDuration);


void __RPC_STUB IDAImportationResult_get_Duration_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_CompletionEvent_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDAEvent **ppCompletionEvent);


void __RPC_STUB IDAImportationResult_get_CompletionEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Progress_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppProgress);


void __RPC_STUB IDAImportationResult_get_Progress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAImportationResult_get_Size_Proxy( 
    IDAImportationResult * This,
    /* [retval][out] */ IDANumber **ppSizeInBytes);


void __RPC_STUB IDAImportationResult_get_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAImportationResult_INTERFACE_DEFINED__ */


#ifndef __IDADXTransformResult_INTERFACE_DEFINED__
#define __IDADXTransformResult_INTERFACE_DEFINED__

/* interface IDADXTransformResult */
/* [dual][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDADXTransformResult;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BACD4D86-4A4F-11d1-9BC8-00C04FC2F51D")
    IDADXTransformResult : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_OutputBvr( 
            /* [retval][out] */ IDABehavior **ppOutputBvr) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_TheTransform( 
            /* [retval][out] */ IDispatch **ppTheTransform) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE PutBvrAsProperty( 
            /* [in] */ BSTR property,
            /* [in] */ IDABehavior *bvr) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDADXTransformResultVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDADXTransformResult * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDADXTransformResult * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDADXTransformResult * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDADXTransformResult * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDADXTransformResult * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDADXTransformResult * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDADXTransformResult * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_OutputBvr )( 
            IDADXTransformResult * This,
            /* [retval][out] */ IDABehavior **ppOutputBvr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_TheTransform )( 
            IDADXTransformResult * This,
            /* [retval][out] */ IDispatch **ppTheTransform);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *PutBvrAsProperty )( 
            IDADXTransformResult * This,
            /* [in] */ BSTR property,
            /* [in] */ IDABehavior *bvr);
        
        END_INTERFACE
    } IDADXTransformResultVtbl;

    interface IDADXTransformResult
    {
        CONST_VTBL struct IDADXTransformResultVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDADXTransformResult_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDADXTransformResult_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDADXTransformResult_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDADXTransformResult_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDADXTransformResult_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDADXTransformResult_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDADXTransformResult_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDADXTransformResult_get_OutputBvr(This,ppOutputBvr)	\
    (This)->lpVtbl -> get_OutputBvr(This,ppOutputBvr)

#define IDADXTransformResult_get_TheTransform(This,ppTheTransform)	\
    (This)->lpVtbl -> get_TheTransform(This,ppTheTransform)

#define IDADXTransformResult_PutBvrAsProperty(This,property,bvr)	\
    (This)->lpVtbl -> PutBvrAsProperty(This,property,bvr)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_get_OutputBvr_Proxy( 
    IDADXTransformResult * This,
    /* [retval][out] */ IDABehavior **ppOutputBvr);


void __RPC_STUB IDADXTransformResult_get_OutputBvr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_get_TheTransform_Proxy( 
    IDADXTransformResult * This,
    /* [retval][out] */ IDispatch **ppTheTransform);


void __RPC_STUB IDADXTransformResult_get_TheTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDADXTransformResult_PutBvrAsProperty_Proxy( 
    IDADXTransformResult * This,
    /* [in] */ BSTR property,
    /* [in] */ IDABehavior *bvr);


void __RPC_STUB IDADXTransformResult_PutBvrAsProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDADXTransformResult_INTERFACE_DEFINED__ */


#ifndef __IDAStatics_INTERFACE_DEFINED__
#define __IDAStatics_INTERFACE_DEFINED__

/* interface IDAStatics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDAStatics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("542FB452-5003-11cf-92A2-00AA00B8A733")
    IDAStatics : public IDispatch
    {
    public:
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_VersionString( 
            /* [retval][out] */ BSTR *str) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Site( 
            /* [retval][out] */ IDASite **pSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_Site( 
            /* [in] */ IDASite *pSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ClientSite( 
            /* [in] */ IOleClientSite *pClientSite) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClientSite( 
            /* [retval][out] */ IOleClientSite **pClientSite) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_PixelConstructionMode( 
            /* [in] */ VARIANT_BOOL bMode) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PixelConstructionMode( 
            /* [retval][out] */ VARIANT_BOOL *bMode) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TriggerEvent( 
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NewDrawingSurface( 
            /* [retval][out] */ IDADrawingSurface **pds) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovie( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovieAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImage( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageColorKey( 
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportImageAsyncColorKey( 
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportSound( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportSoundAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometry( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryAsync( 
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportDirectDrawSurface( 
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cond( 
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DAArrayEx( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAArray( 
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DATupleEx( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DATuple( 
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableBehavior( 
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UninitializedArray( 
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UninitializedTuple( 
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE NumberBSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NumberBSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Point2BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Point3BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Vector2BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Vector3BSplineEx( 
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3BSpline( 
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pow( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Abs( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sqrt( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Floor( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Round( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ceiling( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Asin( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Acos( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Atan( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sin( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Cos( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tan( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Exp( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ln( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Log10( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToDegrees( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ToRadians( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mod( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Atan2( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Add( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sub( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mul( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Div( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LT( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LTE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GT( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GTE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EQ( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NE( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Neg( 
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE InterpolateAnim( 
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Interpolate( 
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SlowInSlowOutAnim( 
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SlowInSlowOut( 
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SoundSource( 
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Mix( 
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE And( 
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Or( 
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Not( 
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Integral( 
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Derivative( 
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntegralVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntegralVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativeVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativeVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativePoint2( 
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DerivativePoint3( 
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyState( 
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyUp( 
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE KeyDown( 
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DANumber( 
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAString( 
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DABoolean( 
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SeededRandom( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_MousePosition( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonState( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonState( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DATrue( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DAFalse( 
            /* [retval][out] */ IDABoolean **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LocalTime( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_GlobalTime( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Pixel( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UserData( 
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilNotify( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Until( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilEx( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Sequence( 
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPath( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngle( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUpright( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUprightEval( 
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FollowPathAngleUprightAnim( 
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConcatString( 
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PerspectiveCamera( 
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PerspectiveCameraAnim( 
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelCamera( 
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ParallelCameraAnim( 
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgbAnim( 
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgb( 
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorRgb255( 
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorHsl( 
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ColorHslAnim( 
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Red( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Green( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Blue( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Cyan( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Magenta( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Yellow( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Black( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_White( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Aqua( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Fuchsia( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Gray( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Lime( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Maroon( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Navy( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Olive( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Purple( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Silver( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Teal( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Predicate( 
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NotEvent( 
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AndEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OrEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ThenEvent( 
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonDown( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_LeftButtonUp( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonDown( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_RightButtonUp( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Always( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Never( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TimerAnim( 
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Timer( 
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AppTriggeredEvent( 
            /* [retval][out] */ IDAEvent **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ScriptCallback( 
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyGeometry( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionGeometry( 
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE UnionGeometryArrayEx( 
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionGeometryArray( 
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyImage( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DetectableEmptyImage( 
            /* [retval][out] */ IDAImage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SolidColorImage( 
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE GradientPolygonEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientPolygon( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientPolygonEx( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientPolygon( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientPolygonAnimEx( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientPolygonAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientSquare( 
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientSquare( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientSquareAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientRegularPoly( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientRegularPolyAnim( 
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientHorizontal( 
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GradientHorizontalAnim( 
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchHorizontal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchHorizontalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchVertical( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchVerticalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchForwardDiagonal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchForwardDiagonalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchBackwardDiagonal( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchBackwardDiagonalAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchCross( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchCrossAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchDiagonalCross( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE HatchDiagonalCrossAnim( 
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Overlay( 
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE OverlayArrayEx( 
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OverlayArray( 
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AmbientLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DirectionalLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_PointLight( 
            /* [retval][out] */ IDAGeometry **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpotLightAnim( 
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SpotLight( 
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultLineStyle( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyLineStyle( 
            /* [retval][out] */ IDALineStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleBevel( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleRound( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_JoinStyleMiter( 
            /* [retval][out] */ IDAJoinStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleFlat( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleSquare( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EndStyleRound( 
            /* [retval][out] */ IDAEndStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyleSolid( 
            /* [retval][out] */ IDADashStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DashStyleDashed( 
            /* [retval][out] */ IDADashStyle **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultMicrophone( 
            /* [retval][out] */ IDAMicrophone **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueMatte( 
            /* [retval][out] */ IDAMatte **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ClearMatte( 
            /* [retval][out] */ IDAMatte **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE IntersectMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DifferenceMatte( 
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FillMatte( 
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextMatte( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyMontage( 
            /* [retval][out] */ IDAMontage **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageMontage( 
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImageMontageAnim( 
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMontage( 
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Concat( 
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ConcatArrayEx( 
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ConcatArray( 
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Line( 
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Ray( 
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringPathAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringPath( 
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolylineEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Polyline( 
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE PolydrawPathEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PolydrawPath( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadians( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcRadiansAnim( 
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ArcDegrees( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadians( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieRadiansAnim( 
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE PieDegrees( 
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Oval( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE OvalAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rect( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RectAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRect( 
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RoundRectAnim( 
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE CubicBSplinePathEx( 
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CubicBSplinePath( 
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextPath( 
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Silence( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE MixArrayEx( 
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE MixArray( 
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_SinSynth( 
            /* [retval][out] */ IDASound **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_DefaultFont( 
            /* [retval][out] */ IDAFontStyle **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE FontAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Font( 
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringImageAnim( 
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE StringImage( 
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextImageAnim( 
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TextImage( 
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZeroVector2( 
            /* [retval][out] */ IDAVector2 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Origin2( 
            /* [retval][out] */ IDAPoint2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2PolarAnim( 
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2Polar( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector2PolarDegrees( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2PolarAnim( 
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point2Polar( 
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DotVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NegVector2( 
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubVector2( 
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddVector2( 
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPoint2Vector( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint2Vector( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint2( 
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistancePoint2( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistanceSquaredPoint2( 
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_XVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_YVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ZeroVector3( 
            /* [retval][out] */ IDAVector3 **ret_0) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_Origin3( 
            /* [retval][out] */ IDAPoint3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3SphericalAnim( 
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Vector3Spherical( 
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3SphericalAnim( 
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Point3Spherical( 
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DotVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE CrossVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE NegVector3( 
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubVector3( 
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddVector3( 
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE AddPoint3Vector( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint3Vector( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SubPoint3( 
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistancePoint3( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DistanceSquaredPoint3( 
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IdentityTransform3( 
            /* [retval][out] */ IDATransform3 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Anim( 
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3( 
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Rate( 
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Vector( 
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate3Point( 
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Rate( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Vector( 
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3UniformAnim( 
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3Uniform( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale3UniformRate( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Anim( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Rate( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3Degrees( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate3RateDegrees( 
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3Anim( 
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3( 
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear3Rate( 
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3Anim( 
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3( 
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear3Rate( 
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3Anim( 
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3( 
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ZShear3Rate( 
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Transform4x4AnimEx( 
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform4x4Anim( 
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose3( 
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Compose3ArrayEx( 
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose3Array( 
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LookAtFrom( 
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_IdentityTransform2( 
            /* [retval][out] */ IDATransform2 **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Anim( 
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2( 
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Rate( 
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Vector( 
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Translate2Point( 
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Anim( 
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Rate( 
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Vector2( 
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Vector( 
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2UniformAnim( 
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2Uniform( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Scale2UniformRate( 
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Anim( 
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Rate( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2Degrees( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Rotate2RateDegrees( 
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2Anim( 
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE XShear2Rate( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2Anim( 
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE YShear2Rate( 
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Transform3x2AnimEx( 
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Transform3x2Anim( 
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose2( 
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE Compose2ArrayEx( 
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Compose2Array( 
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Tuple( 
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Array( 
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_AreBlockingImportsComplete( 
            /* [retval][out] */ VARIANT_BOOL *bComplete) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAStaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAStatics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAStatics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAStatics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAStatics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAStatics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAStatics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAStatics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDAStatics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDAStatics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDAStatics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDAStatics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDAStatics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDAStatics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDAStatics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDAStatics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDAStatics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDAStatics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDAStatics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDAStatics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDAStatics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDAStatics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDAStatics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDAStatics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDAStatics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDAStatics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDAStatics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDAStatics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDAStatics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDAStatics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDAStatics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDAStatics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDAStatics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDAStatics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDAStatics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDAStatics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDAStatics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDAStatics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDAStatics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDAStatics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDAStatics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDAStatics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDAStatics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDAStatics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDAStatics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDAStatics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDAStatics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDAStatics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDAStatics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDAStatics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDAStatics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDAStatics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDAStatics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDAStatics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDAStatics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDAStatics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDAStatics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDAStatics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDAStatics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDAStatics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDAStatics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDAStatics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDAStatics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDAStatics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDAStatics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDAStatics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDAStatics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDAStatics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDAStatics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDAStatics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDAStatics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDAStatics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDAStatics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDAStatics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDAStatics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDAStatics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDAStatics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDAStatics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDAStatics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDAStatics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDAStatics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDAStatics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDAStatics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDAStatics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDAStatics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDAStatics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDAStatics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDAStatics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDAStatics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDAStatics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDAStatics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDAStatics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDAStatics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDAStatics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDAStatics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDAStatics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDAStatics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDAStatics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDAStatics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDAStatics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDAStatics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDAStatics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDAStatics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDAStatics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDAStatics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDAStatics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDAStatics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDAStatics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDAStatics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDAStatics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        END_INTERFACE
    } IDAStaticsVtbl;

    interface IDAStatics
    {
        CONST_VTBL struct IDAStaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAStatics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAStatics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAStatics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAStatics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAStatics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAStatics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAStatics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAStatics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDAStatics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDAStatics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDAStatics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDAStatics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDAStatics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDAStatics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDAStatics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDAStatics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDAStatics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDAStatics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDAStatics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDAStatics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDAStatics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDAStatics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDAStatics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDAStatics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDAStatics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDAStatics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDAStatics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDAStatics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDAStatics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDAStatics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDAStatics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDAStatics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDAStatics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDAStatics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDAStatics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDAStatics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDAStatics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDAStatics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDAStatics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDAStatics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDAStatics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDAStatics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDAStatics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDAStatics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDAStatics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDAStatics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDAStatics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDAStatics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDAStatics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDAStatics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDAStatics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDAStatics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDAStatics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDAStatics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDAStatics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDAStatics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDAStatics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDAStatics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDAStatics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDAStatics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDAStatics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDAStatics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDAStatics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDAStatics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDAStatics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDAStatics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDAStatics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDAStatics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDAStatics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDAStatics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDAStatics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDAStatics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDAStatics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDAStatics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDAStatics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDAStatics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDAStatics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDAStatics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDAStatics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDAStatics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDAStatics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDAStatics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDAStatics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDAStatics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDAStatics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDAStatics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDAStatics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDAStatics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDAStatics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDAStatics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDAStatics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDAStatics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDAStatics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDAStatics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDAStatics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDAStatics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDAStatics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDAStatics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDAStatics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDAStatics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDAStatics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDAStatics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDAStatics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDAStatics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDAStatics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDAStatics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDAStatics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDAStatics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDAStatics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDAStatics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDAStatics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDAStatics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDAStatics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDAStatics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDAStatics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDAStatics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDAStatics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDAStatics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDAStatics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDAStatics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDAStatics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDAStatics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDAStatics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDAStatics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDAStatics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDAStatics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDAStatics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDAStatics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDAStatics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDAStatics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDAStatics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDAStatics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDAStatics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDAStatics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDAStatics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDAStatics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDAStatics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDAStatics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDAStatics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDAStatics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDAStatics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDAStatics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDAStatics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDAStatics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDAStatics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDAStatics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDAStatics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDAStatics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDAStatics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDAStatics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDAStatics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDAStatics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDAStatics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDAStatics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDAStatics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDAStatics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDAStatics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDAStatics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDAStatics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDAStatics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDAStatics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDAStatics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDAStatics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDAStatics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDAStatics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDAStatics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDAStatics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDAStatics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDAStatics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDAStatics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDAStatics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDAStatics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDAStatics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDAStatics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDAStatics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDAStatics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDAStatics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDAStatics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDAStatics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDAStatics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDAStatics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDAStatics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDAStatics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDAStatics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDAStatics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDAStatics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDAStatics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDAStatics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDAStatics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDAStatics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDAStatics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDAStatics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDAStatics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDAStatics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDAStatics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDAStatics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDAStatics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDAStatics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDAStatics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDAStatics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDAStatics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDAStatics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDAStatics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDAStatics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDAStatics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDAStatics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDAStatics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDAStatics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDAStatics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDAStatics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDAStatics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDAStatics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDAStatics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDAStatics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDAStatics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDAStatics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDAStatics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDAStatics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDAStatics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDAStatics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDAStatics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDAStatics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDAStatics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDAStatics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDAStatics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDAStatics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDAStatics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDAStatics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDAStatics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDAStatics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDAStatics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDAStatics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDAStatics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDAStatics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDAStatics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDAStatics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDAStatics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDAStatics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDAStatics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDAStatics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDAStatics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDAStatics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDAStatics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDAStatics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDAStatics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDAStatics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDAStatics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDAStatics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDAStatics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDAStatics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDAStatics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDAStatics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDAStatics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDAStatics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDAStatics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDAStatics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDAStatics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDAStatics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDAStatics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDAStatics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDAStatics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDAStatics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDAStatics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDAStatics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDAStatics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDAStatics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDAStatics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDAStatics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDAStatics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDAStatics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDAStatics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDAStatics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDAStatics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDAStatics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDAStatics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDAStatics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDAStatics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDAStatics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDAStatics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDAStatics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDAStatics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDAStatics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDAStatics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDAStatics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDAStatics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDAStatics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDAStatics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDAStatics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDAStatics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDAStatics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDAStatics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDAStatics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDAStatics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDAStatics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDAStatics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDAStatics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDAStatics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDAStatics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDAStatics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDAStatics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDAStatics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDAStatics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDAStatics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDAStatics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDAStatics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDAStatics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDAStatics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_VersionString_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ BSTR *str);


void __RPC_STUB IDAStatics_get_VersionString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Site_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASite **pSite);


void __RPC_STUB IDAStatics_get_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_Site_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASite *pSite);


void __RPC_STUB IDAStatics_put_Site_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_ClientSite_Proxy( 
    IDAStatics * This,
    /* [in] */ IOleClientSite *pClientSite);


void __RPC_STUB IDAStatics_put_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ClientSite_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IOleClientSite **pClientSite);


void __RPC_STUB IDAStatics_get_ClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAStatics_put_PixelConstructionMode_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT_BOOL bMode);


void __RPC_STUB IDAStatics_put_PixelConstructionMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_PixelConstructionMode_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ VARIANT_BOOL *bMode);


void __RPC_STUB IDAStatics_get_PixelConstructionMode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TriggerEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *event,
    /* [in] */ IDABehavior *data);


void __RPC_STUB IDAStatics_TriggerEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NewDrawingSurface_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADrawingSurface **pds);


void __RPC_STUB IDAStatics_NewDrawingSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportMovie_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportMovie_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportMovieAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [in] */ IDASound *pSoundStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportMovieAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportImageAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageColorKey_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ BYTE colorKeyRed,
    /* [in] */ BYTE colorKeyGreen,
    /* [in] */ BYTE colorKeyBlue,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportImageColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportImageAsyncColorKey_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAImage *pImageStandIn,
    /* [in] */ BYTE colorKeyRed,
    /* [in] */ BYTE colorKeyGreen,
    /* [in] */ BYTE colorKeyBlue,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportImageAsyncColorKey_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportSound_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportSound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportSoundAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDASound *pSoundStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportSoundAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportGeometry_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDAStatics_ImportGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportGeometryAsync_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR url,
    /* [in] */ IDAGeometry *pGeoStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDAStatics_ImportGeometryAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImportDirectDrawSurface_Proxy( 
    IDAStatics * This,
    /* [in] */ IUnknown *dds,
    /* [in] */ IDAEvent *updateEvent,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAStatics_ImportDirectDrawSurface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Cond_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *c,
    /* [in] */ IDABehavior *i,
    /* [in] */ IDABehavior *e,
    /* [retval][out] */ IDABehavior **pCondBvr);


void __RPC_STUB IDAStatics_Cond_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_DAArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_DAArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DAArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT bvrs,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_DAArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_DATupleEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_DATupleEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DATuple_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT bvrs,
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_DATuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ModifiableBehavior_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *orig,
    /* [retval][out] */ IDABehavior **bvr);


void __RPC_STUB IDAStatics_ModifiableBehavior_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UninitializedArray_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAArray *typeTmp,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDAStatics_UninitializedArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UninitializedTuple_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATuple *typeTmp,
    /* [retval][out] */ IDATuple **bvr);


void __RPC_STUB IDAStatics_UninitializedTuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_NumberBSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDANumber *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDANumber **bvr);


void __RPC_STUB IDAStatics_NumberBSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NumberBSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDANumber **bvr);


void __RPC_STUB IDAStatics_NumberBSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Point2BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint2 **bvr);


void __RPC_STUB IDAStatics_Point2BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint2 **bvr);


void __RPC_STUB IDAStatics_Point2BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Point3BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint3 **bvr);


void __RPC_STUB IDAStatics_Point3BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAPoint3 **bvr);


void __RPC_STUB IDAStatics_Point3BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Vector2BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector2 **bvr);


void __RPC_STUB IDAStatics_Vector2BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector2 **bvr);


void __RPC_STUB IDAStatics_Vector2BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Vector3BSplineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ LONG numKnots,
    /* [size_is][in] */ IDANumber *knots[  ],
    /* [in] */ LONG numPts,
    /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
    /* [in] */ LONG numWts,
    /* [size_is][in] */ IDANumber *weights[  ],
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector3 **bvr);


void __RPC_STUB IDAStatics_Vector3BSplineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3BSpline_Proxy( 
    IDAStatics * This,
    /* [in] */ int degree,
    /* [in] */ VARIANT knots,
    /* [in] */ VARIANT CtrlPts,
    /* [in] */ VARIANT weights,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDAVector3 **bvr);


void __RPC_STUB IDAStatics_Vector3BSpline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Pow_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Pow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Abs_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Abs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sqrt_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Sqrt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Floor_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Floor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Round_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Round_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ceiling_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Ceiling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Asin_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Asin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Acos_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Acos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Atan_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Atan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sin_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Sin_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Cos_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Cos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Tan_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Tan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Exp_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Exp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ln_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Ln_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Log10_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Log10_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ToDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_ToDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ToRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_ToRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mod_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Mod_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Atan2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Atan2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Add_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Add_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sub_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Sub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mul_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Mul_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Div_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_Div_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LT_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_LT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LTE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_LTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GT_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_GT_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GTE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_GTE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_EQ_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_EQ_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NE_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_NE_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Neg_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Neg_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_InterpolateAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *from_0,
    /* [in] */ IDANumber *to_1,
    /* [in] */ IDANumber *duration_2,
    /* [retval][out] */ IDANumber **ret_3);


void __RPC_STUB IDAStatics_InterpolateAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Interpolate_Proxy( 
    IDAStatics * This,
    /* [in] */ double from_0,
    /* [in] */ double to_1,
    /* [in] */ double duration_2,
    /* [retval][out] */ IDANumber **ret_3);


void __RPC_STUB IDAStatics_Interpolate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SlowInSlowOutAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *from_0,
    /* [in] */ IDANumber *to_1,
    /* [in] */ IDANumber *duration_2,
    /* [in] */ IDANumber *sharpness_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDAStatics_SlowInSlowOutAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SlowInSlowOut_Proxy( 
    IDAStatics * This,
    /* [in] */ double from_0,
    /* [in] */ double to_1,
    /* [in] */ double duration_2,
    /* [in] */ double sharpness_3,
    /* [retval][out] */ IDANumber **ret_4);


void __RPC_STUB IDAStatics_SlowInSlowOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SoundSource_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASound *snd_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_SoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Mix_Proxy( 
    IDAStatics * This,
    /* [in] */ IDASound *left_0,
    /* [in] */ IDASound *right_1,
    /* [retval][out] */ IDASound **ret_2);


void __RPC_STUB IDAStatics_Mix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_And_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [in] */ IDABoolean *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_And_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Or_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [in] */ IDABoolean *b_1,
    /* [retval][out] */ IDABoolean **ret_2);


void __RPC_STUB IDAStatics_Or_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Not_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *a_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_Not_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Integral_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *b_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Integral_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Derivative_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *b_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_Derivative_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntegralVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_IntegralVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntegralVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_IntegralVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativeVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_DerivativeVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativeVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_DerivativeVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativePoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_DerivativePoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DerivativePoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_DerivativePoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyState_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *n_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_KeyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyUp_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG arg_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_KeyUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_KeyDown_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG arg_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_KeyDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DANumber_Proxy( 
    IDAStatics * This,
    /* [in] */ double num_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_DANumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DAString_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [retval][out] */ IDAString **ret_1);


void __RPC_STUB IDAStatics_DAString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DABoolean_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT_BOOL num_0,
    /* [retval][out] */ IDABoolean **ret_1);


void __RPC_STUB IDAStatics_DABoolean_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SeededRandom_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDANumber **ret_1);


void __RPC_STUB IDAStatics_SeededRandom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_MousePosition_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDAStatics_get_MousePosition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonState_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonState_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DATrue_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_DATrue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DAFalse_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDABoolean **ret_0);


void __RPC_STUB IDAStatics_get_DAFalse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LocalTime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_LocalTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_GlobalTime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_GlobalTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Pixel_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDAStatics_get_Pixel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UserData_Proxy( 
    IDAStatics * This,
    /* [in] */ IUnknown *data_0,
    /* [retval][out] */ IDAUserData **ret_1);


void __RPC_STUB IDAStatics_UserData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UntilNotify_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ IDAUntilNotifier *notifier_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDAStatics_UntilNotify_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Until_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ IDABehavior *b1_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDAStatics_Until_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UntilEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [retval][out] */ IDABehavior **ret_2);


void __RPC_STUB IDAStatics_UntilEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Sequence_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABehavior *s1_0,
    /* [in] */ IDABehavior *s2_1,
    /* [retval][out] */ IDABehavior **ret_2);


void __RPC_STUB IDAStatics_Sequence_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPath_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngle_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUpright_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ double duration_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUpright_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUprightEval_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *path_0,
    /* [in] */ IDANumber *eval_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUprightEval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FollowPathAngleUprightAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *obsoleted1_0,
    /* [in] */ IDANumber *obsoleted2_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_FollowPathAngleUprightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ConcatString_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *s1_0,
    /* [in] */ IDAString *s2_1,
    /* [retval][out] */ IDAString **ret_2);


void __RPC_STUB IDAStatics_ConcatString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PerspectiveCamera_Proxy( 
    IDAStatics * This,
    /* [in] */ double focalDist_0,
    /* [in] */ double nearClip_1,
    /* [retval][out] */ IDACamera **ret_2);


void __RPC_STUB IDAStatics_PerspectiveCamera_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PerspectiveCameraAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *focalDist_0,
    /* [in] */ IDANumber *nearClip_1,
    /* [retval][out] */ IDACamera **ret_2);


void __RPC_STUB IDAStatics_PerspectiveCameraAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ParallelCamera_Proxy( 
    IDAStatics * This,
    /* [in] */ double nearClip_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDAStatics_ParallelCamera_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ParallelCameraAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *nearClip_0,
    /* [retval][out] */ IDACamera **ret_1);


void __RPC_STUB IDAStatics_ParallelCameraAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgbAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *red_0,
    /* [in] */ IDANumber *green_1,
    /* [in] */ IDANumber *blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgbAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgb_Proxy( 
    IDAStatics * This,
    /* [in] */ double red_0,
    /* [in] */ double green_1,
    /* [in] */ double blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorRgb255_Proxy( 
    IDAStatics * This,
    /* [in] */ short red_0,
    /* [in] */ short green_1,
    /* [in] */ short blue_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorRgb255_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorHsl_Proxy( 
    IDAStatics * This,
    /* [in] */ double hue_0,
    /* [in] */ double saturation_1,
    /* [in] */ double lum_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorHsl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ColorHslAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *hue_0,
    /* [in] */ IDANumber *saturation_1,
    /* [in] */ IDANumber *lum_2,
    /* [retval][out] */ IDAColor **ret_3);


void __RPC_STUB IDAStatics_ColorHslAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Red_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Red_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Green_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Green_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Blue_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Blue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Cyan_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Cyan_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Magenta_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Magenta_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Yellow_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Yellow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Black_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Black_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_White_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_White_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Aqua_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Aqua_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Fuchsia_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Fuchsia_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Gray_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Gray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Lime_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Lime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Maroon_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Maroon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Navy_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Navy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Olive_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Olive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Purple_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Purple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Silver_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Silver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Teal_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDAStatics_get_Teal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Predicate_Proxy( 
    IDAStatics * This,
    /* [in] */ IDABoolean *b_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_Predicate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NotEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *event_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_NotEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AndEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_AndEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OrEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_OrEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ThenEvent_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAEvent *e1_0,
    /* [in] */ IDAEvent *e2_1,
    /* [retval][out] */ IDAEvent **ret_2);


void __RPC_STUB IDAStatics_ThenEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonDown_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_LeftButtonUp_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_LeftButtonUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonDown_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonDown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_RightButtonUp_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_RightButtonUp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Always_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_Always_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Never_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_get_Never_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TimerAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *n_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_TimerAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Timer_Proxy( 
    IDAStatics * This,
    /* [in] */ double n_0,
    /* [retval][out] */ IDAEvent **ret_1);


void __RPC_STUB IDAStatics_Timer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AppTriggeredEvent_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEvent **ret_0);


void __RPC_STUB IDAStatics_AppTriggeredEvent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ScriptCallback_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR obsolete1_0,
    /* [in] */ IDAEvent *obsolete2_1,
    /* [in] */ BSTR obsolete3_2,
    /* [retval][out] */ IDAEvent **ret_3);


void __RPC_STUB IDAStatics_ScriptCallback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyGeometry_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_EmptyGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometry_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAGeometry *g1_0,
    /* [in] */ IDAGeometry *g2_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_UnionGeometry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometryArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG imgs_0size,
    /* [size_is][in] */ IDAGeometry *imgs_0[  ],
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_UnionGeometryArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionGeometryArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT imgs_0,
    /* [retval][out] */ IDAGeometry **ret_1);


void __RPC_STUB IDAStatics_UnionGeometryArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyImage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAStatics_get_EmptyImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DetectableEmptyImage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAImage **ret_0);


void __RPC_STUB IDAStatics_get_DetectableEmptyImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SolidColorImage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *col_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_SolidColorImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_GradientPolygonEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG colors_1size,
    /* [size_is][in] */ IDAColor *colors_1[  ],
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_GradientPolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientPolygon_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT colors_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_GradientPolygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ LONG points_2size,
    /* [size_is][in] */ IDAPoint2 *points_2[  ],
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygon_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ VARIANT points_2,
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygon_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonAnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ LONG points_2size,
    /* [size_is][in] */ IDAPoint2 *points_2[  ],
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonAnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientPolygonAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ VARIANT points_2,
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientPolygonAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientSquare_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lowerLeft_0,
    /* [in] */ IDAColor *upperLeft_1,
    /* [in] */ IDAColor *upperRight_2,
    /* [in] */ IDAColor *lowerRight_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_GradientSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientSquare_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ double fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_RadialGradientSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientSquareAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ IDANumber *fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_RadialGradientSquareAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientRegularPoly_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ double numEdges_2,
    /* [in] */ double fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientRegularPoly_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RadialGradientRegularPolyAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *inner_0,
    /* [in] */ IDAColor *outer_1,
    /* [in] */ IDANumber *numEdges_2,
    /* [in] */ IDANumber *fallOff_3,
    /* [retval][out] */ IDAImage **ret_4);


void __RPC_STUB IDAStatics_RadialGradientRegularPolyAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientHorizontal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *start_0,
    /* [in] */ IDAColor *stop_1,
    /* [in] */ double fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_GradientHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_GradientHorizontalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *start_0,
    /* [in] */ IDAColor *stop_1,
    /* [in] */ IDANumber *fallOff_2,
    /* [retval][out] */ IDAImage **ret_3);


void __RPC_STUB IDAStatics_GradientHorizontalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchHorizontal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchHorizontal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchHorizontalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchHorizontalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchVertical_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchVertical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchVerticalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchVerticalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchForwardDiagonal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchForwardDiagonal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchForwardDiagonalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchForwardDiagonalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchBackwardDiagonal_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchBackwardDiagonal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchBackwardDiagonalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchBackwardDiagonalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchCross_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchCross_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchCrossAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchCrossAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchDiagonalCross_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ double spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchDiagonalCross_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_HatchDiagonalCrossAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAColor *lineClr_0,
    /* [in] */ IDANumber *spacing_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_HatchDiagonalCrossAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Overlay_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *top_0,
    /* [in] */ IDAImage *bottom_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_Overlay_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_OverlayArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG imgs_0size,
    /* [size_is][in] */ IDAImage *imgs_0[  ],
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_OverlayArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OverlayArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT imgs_0,
    /* [retval][out] */ IDAImage **ret_1);


void __RPC_STUB IDAStatics_OverlayArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_AmbientLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_AmbientLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DirectionalLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_DirectionalLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_PointLight_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAGeometry **ret_0);


void __RPC_STUB IDAStatics_get_PointLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SpotLightAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *fullcone_0,
    /* [in] */ IDANumber *cutoff_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_SpotLightAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SpotLight_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *fullcone_0,
    /* [in] */ double cutoff_1,
    /* [retval][out] */ IDAGeometry **ret_2);


void __RPC_STUB IDAStatics_SpotLight_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultLineStyle_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDAStatics_get_DefaultLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyLineStyle_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDALineStyle **ret_0);


void __RPC_STUB IDAStatics_get_EmptyLineStyle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleBevel_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleBevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleRound_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleRound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_JoinStyleMiter_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAJoinStyle **ret_0);


void __RPC_STUB IDAStatics_get_JoinStyleMiter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleFlat_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleFlat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleSquare_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleSquare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EndStyleRound_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAEndStyle **ret_0);


void __RPC_STUB IDAStatics_get_EndStyleRound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DashStyleSolid_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADashStyle **ret_0);


void __RPC_STUB IDAStatics_get_DashStyleSolid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DashStyleDashed_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDADashStyle **ret_0);


void __RPC_STUB IDAStatics_get_DashStyleDashed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultMicrophone_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMicrophone **ret_0);


void __RPC_STUB IDAStatics_get_DefaultMicrophone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_OpaqueMatte_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMatte **ret_0);


void __RPC_STUB IDAStatics_get_OpaqueMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ClearMatte_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMatte **ret_0);


void __RPC_STUB IDAStatics_get_ClearMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_UnionMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_IntersectMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_IntersectMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DifferenceMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMatte *m1_0,
    /* [in] */ IDAMatte *m2_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_DifferenceMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FillMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *p_0,
    /* [retval][out] */ IDAMatte **ret_1);


void __RPC_STUB IDAStatics_FillMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextMatte_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAMatte **ret_2);


void __RPC_STUB IDAStatics_TextMatte_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_EmptyMontage_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAMontage **ret_0);


void __RPC_STUB IDAStatics_get_EmptyMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImageMontage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *im_0,
    /* [in] */ double depth_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_ImageMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ImageMontageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAImage *im_0,
    /* [in] */ IDANumber *depth_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_ImageMontageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_UnionMontage_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAMontage *m1_0,
    /* [in] */ IDAMontage *m2_1,
    /* [retval][out] */ IDAMontage **ret_2);


void __RPC_STUB IDAStatics_UnionMontage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Concat_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPath2 *p1_0,
    /* [in] */ IDAPath2 *p2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Concat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_ConcatArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG paths_0size,
    /* [size_is][in] */ IDAPath2 *paths_0[  ],
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_ConcatArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ConcatArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT paths_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_ConcatArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Line_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p1_0,
    /* [in] */ IDAPoint2 *p2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Ray_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *pt_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_Ray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringPathAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_StringPathAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringPath_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_StringPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_PolylineEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_PolylineEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Polyline_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [retval][out] */ IDAPath2 **ret_1);


void __RPC_STUB IDAStatics_Polyline_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_PolydrawPathEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG codes_1size,
    /* [size_is][in] */ IDANumber *codes_1[  ],
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_PolydrawPathEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PolydrawPath_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT codes_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_PolydrawPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcRadiansAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *startAngle_0,
    /* [in] */ IDANumber *endAngle_1,
    /* [in] */ IDANumber *arcWidth_2,
    /* [in] */ IDANumber *arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcRadiansAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ArcDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_ArcDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieRadians_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieRadians_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieRadiansAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *startAngle_0,
    /* [in] */ IDANumber *endAngle_1,
    /* [in] */ IDANumber *arcWidth_2,
    /* [in] */ IDANumber *arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieRadiansAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_PieDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double startAngle_0,
    /* [in] */ double endAngle_1,
    /* [in] */ double arcWidth_2,
    /* [in] */ double arcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_PieDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Oval_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Oval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_OvalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_OvalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rect_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_Rect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RectAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_RectAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RoundRect_Proxy( 
    IDAStatics * This,
    /* [in] */ double width_0,
    /* [in] */ double height_1,
    /* [in] */ double cornerArcWidth_2,
    /* [in] */ double cornerArcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_RoundRect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_RoundRectAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *width_0,
    /* [in] */ IDANumber *height_1,
    /* [in] */ IDANumber *cornerArcWidth_2,
    /* [in] */ IDANumber *cornerArcHeight_3,
    /* [retval][out] */ IDAPath2 **ret_4);


void __RPC_STUB IDAStatics_RoundRectAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_CubicBSplinePathEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG points_0size,
    /* [size_is][in] */ IDAPoint2 *points_0[  ],
    /* [in] */ LONG knots_1size,
    /* [size_is][in] */ IDANumber *knots_1[  ],
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_CubicBSplinePathEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_CubicBSplinePath_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT points_0,
    /* [in] */ VARIANT knots_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_CubicBSplinePath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextPath_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *obsolete1_0,
    /* [in] */ IDAFontStyle *obsolete2_1,
    /* [retval][out] */ IDAPath2 **ret_2);


void __RPC_STUB IDAStatics_TextPath_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Silence_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDAStatics_get_Silence_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_MixArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG snds_0size,
    /* [size_is][in] */ IDASound *snds_0[  ],
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAStatics_MixArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_MixArray_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT snds_0,
    /* [retval][out] */ IDASound **ret_1);


void __RPC_STUB IDAStatics_MixArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_SinSynth_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDASound **ret_0);


void __RPC_STUB IDAStatics_get_SinSynth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_DefaultFont_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAFontStyle **ret_0);


void __RPC_STUB IDAStatics_get_DefaultFont_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_FontAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDANumber *size_1,
    /* [in] */ IDAColor *col_2,
    /* [retval][out] */ IDAFontStyle **ret_3);


void __RPC_STUB IDAStatics_FontAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Font_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ double size_1,
    /* [in] */ IDAColor *col_2,
    /* [retval][out] */ IDAFontStyle **ret_3);


void __RPC_STUB IDAStatics_Font_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringImageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_StringImageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_StringImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR str_0,
    /* [in] */ IDAFontStyle *fs_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_StringImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextImageAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAString *obsoleted1_0,
    /* [in] */ IDAFontStyle *obsoleted2_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_TextImageAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_TextImage_Proxy( 
    IDAStatics * This,
    /* [in] */ BSTR obsoleted1_0,
    /* [in] */ IDAFontStyle *obsoleted2_1,
    /* [retval][out] */ IDAImage **ret_2);


void __RPC_STUB IDAStatics_TextImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_XVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_XVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_YVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_YVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZeroVector2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector2 **ret_0);


void __RPC_STUB IDAStatics_get_ZeroVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Origin2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint2 **ret_0);


void __RPC_STUB IDAStatics_get_Origin2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2PolarAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *theta_0,
    /* [in] */ IDANumber *radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2PolarAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2Polar_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2Polar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector2PolarDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_Vector2PolarDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2PolarAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *theta_0,
    /* [in] */ IDANumber *radius_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2PolarAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point2Polar_Proxy( 
    IDAStatics * This,
    /* [in] */ double theta_0,
    /* [in] */ double radius_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_Point2Polar_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DotVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [in] */ IDAVector2 *u_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DotVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NegVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v_0,
    /* [retval][out] */ IDAVector2 **ret_1);


void __RPC_STUB IDAStatics_NegVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v1_0,
    /* [in] */ IDAVector2 *v2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_SubVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddVector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *v1_0,
    /* [in] */ IDAVector2 *v2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_AddVector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddPoint2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAVector2 *v_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_AddPoint2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAVector2 *v_1,
    /* [retval][out] */ IDAPoint2 **ret_2);


void __RPC_STUB IDAStatics_SubPoint2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p1_0,
    /* [in] */ IDAPoint2 *p2_1,
    /* [retval][out] */ IDAVector2 **ret_2);


void __RPC_STUB IDAStatics_SubPoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistancePoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAPoint2 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistancePoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistanceSquaredPoint2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *p_0,
    /* [in] */ IDAPoint2 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistanceSquaredPoint2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_XVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_XVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_YVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_YVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_ZVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_ZeroVector3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAVector3 **ret_0);


void __RPC_STUB IDAStatics_get_ZeroVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_Origin3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDAPoint3 **ret_0);


void __RPC_STUB IDAStatics_get_Origin3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3SphericalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *xyAngle_0,
    /* [in] */ IDANumber *yzAngle_1,
    /* [in] */ IDANumber *radius_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3SphericalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Vector3Spherical_Proxy( 
    IDAStatics * This,
    /* [in] */ double xyAngle_0,
    /* [in] */ double yzAngle_1,
    /* [in] */ double radius_2,
    /* [retval][out] */ IDAVector3 **ret_3);


void __RPC_STUB IDAStatics_Vector3Spherical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3SphericalAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *zxAngle_0,
    /* [in] */ IDANumber *xyAngle_1,
    /* [in] */ IDANumber *radius_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3SphericalAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Point3Spherical_Proxy( 
    IDAStatics * This,
    /* [in] */ double zxAngle_0,
    /* [in] */ double xyAngle_1,
    /* [in] */ double radius_2,
    /* [retval][out] */ IDAPoint3 **ret_3);


void __RPC_STUB IDAStatics_Point3Spherical_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DotVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [in] */ IDAVector3 *u_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DotVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_CrossVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [in] */ IDAVector3 *u_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_CrossVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_NegVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v_0,
    /* [retval][out] */ IDAVector3 **ret_1);


void __RPC_STUB IDAStatics_NegVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v1_0,
    /* [in] */ IDAVector3 *v2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_SubVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddVector3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *v1_0,
    /* [in] */ IDAVector3 *v2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_AddVector3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_AddPoint3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAVector3 *v_1,
    /* [retval][out] */ IDAPoint3 **ret_2);


void __RPC_STUB IDAStatics_AddPoint3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAVector3 *v_1,
    /* [retval][out] */ IDAPoint3 **ret_2);


void __RPC_STUB IDAStatics_SubPoint3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_SubPoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p1_0,
    /* [in] */ IDAPoint3 *p2_1,
    /* [retval][out] */ IDAVector3 **ret_2);


void __RPC_STUB IDAStatics_SubPoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistancePoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAPoint3 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistancePoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_DistanceSquaredPoint3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *p_0,
    /* [in] */ IDAPoint3 *q_1,
    /* [retval][out] */ IDANumber **ret_2);


void __RPC_STUB IDAStatics_DistanceSquaredPoint3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_IdentityTransform3_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDATransform3 **ret_0);


void __RPC_STUB IDAStatics_get_IdentityTransform3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *tx_0,
    /* [in] */ IDANumber *ty_1,
    /* [in] */ IDANumber *tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3_Proxy( 
    IDAStatics * This,
    /* [in] */ double tx_0,
    /* [in] */ double ty_1,
    /* [in] */ double tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double tx_0,
    /* [in] */ double ty_1,
    /* [in] */ double tz_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Translate3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *delta_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Translate3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate3Point_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *new_origin_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Translate3Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [in] */ IDANumber *z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [in] */ double z_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_Scale3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *scale_vec_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3UniformAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3UniformAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3Uniform_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3Uniform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale3UniformRate_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Scale3UniformRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ IDANumber *angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3Degrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3Degrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate3RateDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector3 *axis_0,
    /* [in] */ double angle_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Rotate3RateDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *a_0,
    /* [in] */ IDANumber *b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double a_0,
    /* [in] */ double b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double a_0,
    /* [in] */ double b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_XShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *c_0,
    /* [in] */ IDANumber *d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double c_0,
    /* [in] */ double d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double c_0,
    /* [in] */ double d_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_YShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *e_0,
    /* [in] */ IDANumber *f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3_Proxy( 
    IDAStatics * This,
    /* [in] */ double e_0,
    /* [in] */ double f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_ZShear3Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double e_0,
    /* [in] */ double f_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_ZShear3Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Transform4x4AnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG m_0size,
    /* [size_is][in] */ IDANumber *m_0[  ],
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Transform4x4AnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Transform4x4Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT m_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Transform4x4Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose3_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATransform3 *a_0,
    /* [in] */ IDATransform3 *b_1,
    /* [retval][out] */ IDATransform3 **ret_2);


void __RPC_STUB IDAStatics_Compose3_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Compose3ArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG xfs_0size,
    /* [size_is][in] */ IDATransform3 *xfs_0[  ],
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Compose3ArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose3Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT xfs_0,
    /* [retval][out] */ IDATransform3 **ret_1);


void __RPC_STUB IDAStatics_Compose3Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_LookAtFrom_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint3 *to_0,
    /* [in] */ IDAPoint3 *from_1,
    /* [in] */ IDAVector3 *up_2,
    /* [retval][out] */ IDATransform3 **ret_3);


void __RPC_STUB IDAStatics_LookAtFrom_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_IdentityTransform2_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ IDATransform2 **ret_0);


void __RPC_STUB IDAStatics_get_IdentityTransform2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *Tx_0,
    /* [in] */ IDANumber *Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2_Proxy( 
    IDAStatics * This,
    /* [in] */ double Tx_0,
    /* [in] */ double Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double Tx_0,
    /* [in] */ double Ty_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Translate2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *delta_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Translate2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Translate2Point_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAPoint2 *pos_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Translate2Point_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *x_0,
    /* [in] */ IDANumber *y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double x_0,
    /* [in] */ double y_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Scale2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Vector2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *obsoleteMethod_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Vector2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Vector_Proxy( 
    IDAStatics * This,
    /* [in] */ IDAVector2 *scale_vec_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Vector_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2UniformAnim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2UniformAnim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2Uniform_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2Uniform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Scale2UniformRate_Proxy( 
    IDAStatics * This,
    /* [in] */ double uniform_scale_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Scale2UniformRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2Degrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2Degrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Rotate2RateDegrees_Proxy( 
    IDAStatics * This,
    /* [in] */ double angle_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Rotate2RateDegrees_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_XShear2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_XShear2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ IDANumber *arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_YShear2Rate_Proxy( 
    IDAStatics * This,
    /* [in] */ double arg_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_YShear2Rate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Transform3x2AnimEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG m_0size,
    /* [size_is][in] */ IDANumber *m_0[  ],
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Transform3x2AnimEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Transform3x2Anim_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT m_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Transform3x2Anim_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose2_Proxy( 
    IDAStatics * This,
    /* [in] */ IDATransform2 *a_0,
    /* [in] */ IDATransform2 *b_1,
    /* [retval][out] */ IDATransform2 **ret_2);


void __RPC_STUB IDAStatics_Compose2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDAStatics_Compose2ArrayEx_Proxy( 
    IDAStatics * This,
    /* [in] */ LONG xfs_0size,
    /* [size_is][in] */ IDATransform2 *xfs_0[  ],
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Compose2ArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDAStatics_Compose2Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT xfs_0,
    /* [retval][out] */ IDATransform2 **ret_1);


void __RPC_STUB IDAStatics_Compose2Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAStatics_Tuple_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT obsolete1,
    /* [retval][out] */ IDATuple **obsolete2);


void __RPC_STUB IDAStatics_Tuple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAStatics_Array_Proxy( 
    IDAStatics * This,
    /* [in] */ VARIANT obsolete1,
    /* [retval][out] */ IDAArray **obsolete2);


void __RPC_STUB IDAStatics_Array_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAStatics_get_AreBlockingImportsComplete_Proxy( 
    IDAStatics * This,
    /* [retval][out] */ VARIANT_BOOL *bComplete);


void __RPC_STUB IDAStatics_get_AreBlockingImportsComplete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAStatics_INTERFACE_DEFINED__ */


#ifndef __IDA2Statics_INTERFACE_DEFINED__
#define __IDA2Statics_INTERFACE_DEFINED__

/* interface IDA2Statics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


enum __MIDL_IDA2Statics_0001
    {	DAARRAY_CHANGEABLE	= 0x1
    } ;

EXTERN_C const IID IID_IDA2Statics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("FA261CF0-C44E-11d1-9BE4-00C04FC2F51D")
    IDA2Statics : public IDAStatics
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportDirect3DRMVisual( 
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE ApplyDXTransformEx( 
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ApplyDXTransform( 
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableNumber( 
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ModifiableString( 
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE DAArrayEx2( 
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE DAArray2( 
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryWrapped( 
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportGeometryWrappedAsync( 
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportDirect3DRMVisualWrapped( 
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UntilNotifyScript( 
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ViewFrameRate( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE UnionMontageArrayEx( 
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE UnionMontageArray( 
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ModifiableBehaviorFlags( 
            /* [retval][out] */ DWORD *dwFlags) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_ModifiableBehaviorFlags( 
            /* [in] */ DWORD dwFlags) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_EmptyColor( 
            /* [retval][out] */ IDAColor **ret_0) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2StaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2Statics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2Statics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2Statics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2Statics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2Statics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2Statics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2Statics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDA2Statics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA2Statics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA2Statics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA2Statics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDA2Statics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDA2Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDA2Statics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDA2Statics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDA2Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDA2Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDA2Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDA2Statics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDA2Statics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDA2Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDA2Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDA2Statics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDA2Statics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDA2Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDA2Statics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDA2Statics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDA2Statics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDA2Statics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDA2Statics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDA2Statics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDA2Statics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDA2Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDA2Statics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA2Statics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDA2Statics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDA2Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDA2Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDA2Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDA2Statics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDA2Statics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDA2Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDA2Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDA2Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDA2Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDA2Statics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDA2Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDA2Statics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDA2Statics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDA2Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDA2Statics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDA2Statics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDA2Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDA2Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDA2Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDA2Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDA2Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDA2Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDA2Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDA2Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDA2Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDA2Statics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDA2Statics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDA2Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDA2Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDA2Statics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDA2Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDA2Statics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDA2Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDA2Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDA2Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDA2Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDA2Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDA2Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDA2Statics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDA2Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDA2Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDA2Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisual )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ApplyDXTransformEx )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyDXTransform )( 
            IDA2Statics * This,
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableNumber )( 
            IDA2Statics * This,
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableString )( 
            IDA2Statics * This,
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx2 )( 
            IDA2Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray2 )( 
            IDA2Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrapped )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrappedAsync )( 
            IDA2Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisualWrapped )( 
            IDA2Statics * This,
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotifyScript )( 
            IDA2Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewFrameRate )( 
            IDA2Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionMontageArrayEx )( 
            IDA2Statics * This,
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontageArray )( 
            IDA2Statics * This,
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModifiableBehaviorFlags )( 
            IDA2Statics * This,
            /* [retval][out] */ DWORD *dwFlags);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ModifiableBehaviorFlags )( 
            IDA2Statics * This,
            /* [in] */ DWORD dwFlags);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyColor )( 
            IDA2Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        END_INTERFACE
    } IDA2StaticsVtbl;

    interface IDA2Statics
    {
        CONST_VTBL struct IDA2StaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2Statics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2Statics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2Statics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2Statics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2Statics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2Statics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2Statics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2Statics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDA2Statics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDA2Statics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDA2Statics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA2Statics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA2Statics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDA2Statics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDA2Statics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDA2Statics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDA2Statics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDA2Statics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDA2Statics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDA2Statics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDA2Statics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDA2Statics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDA2Statics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDA2Statics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDA2Statics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDA2Statics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDA2Statics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDA2Statics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDA2Statics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDA2Statics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDA2Statics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDA2Statics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDA2Statics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDA2Statics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDA2Statics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDA2Statics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA2Statics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA2Statics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDA2Statics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDA2Statics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDA2Statics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDA2Statics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDA2Statics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDA2Statics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDA2Statics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDA2Statics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDA2Statics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDA2Statics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDA2Statics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDA2Statics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDA2Statics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDA2Statics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDA2Statics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDA2Statics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDA2Statics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDA2Statics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDA2Statics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDA2Statics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDA2Statics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDA2Statics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDA2Statics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDA2Statics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDA2Statics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDA2Statics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDA2Statics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDA2Statics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDA2Statics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDA2Statics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDA2Statics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDA2Statics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA2Statics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA2Statics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDA2Statics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDA2Statics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDA2Statics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDA2Statics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDA2Statics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDA2Statics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDA2Statics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDA2Statics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDA2Statics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDA2Statics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDA2Statics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDA2Statics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDA2Statics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDA2Statics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDA2Statics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDA2Statics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDA2Statics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDA2Statics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDA2Statics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDA2Statics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDA2Statics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDA2Statics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDA2Statics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDA2Statics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDA2Statics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDA2Statics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDA2Statics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDA2Statics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDA2Statics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDA2Statics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDA2Statics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDA2Statics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDA2Statics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDA2Statics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDA2Statics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDA2Statics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDA2Statics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDA2Statics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDA2Statics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDA2Statics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDA2Statics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA2Statics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA2Statics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA2Statics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA2Statics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA2Statics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDA2Statics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDA2Statics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDA2Statics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDA2Statics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDA2Statics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDA2Statics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDA2Statics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDA2Statics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDA2Statics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDA2Statics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDA2Statics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDA2Statics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDA2Statics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDA2Statics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDA2Statics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDA2Statics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDA2Statics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDA2Statics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDA2Statics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDA2Statics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDA2Statics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDA2Statics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDA2Statics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDA2Statics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDA2Statics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDA2Statics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDA2Statics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDA2Statics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDA2Statics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDA2Statics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA2Statics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDA2Statics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDA2Statics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDA2Statics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDA2Statics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDA2Statics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDA2Statics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA2Statics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDA2Statics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA2Statics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA2Statics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA2Statics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA2Statics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA2Statics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA2Statics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA2Statics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDA2Statics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA2Statics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDA2Statics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDA2Statics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDA2Statics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDA2Statics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDA2Statics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDA2Statics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDA2Statics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDA2Statics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDA2Statics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDA2Statics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDA2Statics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDA2Statics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDA2Statics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDA2Statics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDA2Statics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDA2Statics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDA2Statics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDA2Statics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDA2Statics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDA2Statics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDA2Statics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDA2Statics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDA2Statics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDA2Statics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDA2Statics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDA2Statics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDA2Statics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDA2Statics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDA2Statics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDA2Statics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDA2Statics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDA2Statics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDA2Statics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDA2Statics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDA2Statics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDA2Statics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDA2Statics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA2Statics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDA2Statics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDA2Statics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDA2Statics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDA2Statics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA2Statics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA2Statics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDA2Statics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDA2Statics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDA2Statics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDA2Statics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDA2Statics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDA2Statics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDA2Statics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDA2Statics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDA2Statics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDA2Statics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDA2Statics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDA2Statics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA2Statics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDA2Statics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDA2Statics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDA2Statics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDA2Statics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDA2Statics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDA2Statics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA2Statics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDA2Statics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDA2Statics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDA2Statics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDA2Statics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDA2Statics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDA2Statics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDA2Statics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDA2Statics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDA2Statics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDA2Statics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDA2Statics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA2Statics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA2Statics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA2Statics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA2Statics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDA2Statics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDA2Statics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDA2Statics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDA2Statics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDA2Statics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDA2Statics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDA2Statics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDA2Statics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDA2Statics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDA2Statics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDA2Statics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDA2Statics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDA2Statics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDA2Statics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDA2Statics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDA2Statics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDA2Statics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDA2Statics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDA2Statics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDA2Statics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDA2Statics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDA2Statics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDA2Statics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDA2Statics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDA2Statics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDA2Statics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDA2Statics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDA2Statics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDA2Statics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA2Statics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDA2Statics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDA2Statics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDA2Statics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDA2Statics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDA2Statics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDA2Statics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDA2Statics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDA2Statics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDA2Statics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDA2Statics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDA2Statics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDA2Statics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDA2Statics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDA2Statics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDA2Statics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDA2Statics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDA2Statics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDA2Statics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDA2Statics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDA2Statics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDA2Statics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDA2Statics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDA2Statics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDA2Statics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDA2Statics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA2Statics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDA2Statics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDA2Statics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDA2Statics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)


#define IDA2Statics_ImportDirect3DRMVisual(This,visual,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisual(This,visual,bvr)

#define IDA2Statics_ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)

#define IDA2Statics_ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)

#define IDA2Statics_ModifiableNumber(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableNumber(This,initVal,ppResult)

#define IDA2Statics_ModifiableString(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableString(This,initVal,ppResult)

#define IDA2Statics_DAArrayEx2(This,s,pBvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArrayEx2(This,s,pBvrs,dwFlags,bvr)

#define IDA2Statics_DAArray2(This,bvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArray2(This,bvrs,dwFlags,bvr)

#define IDA2Statics_ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)

#define IDA2Statics_ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)

#define IDA2Statics_ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)

#define IDA2Statics_UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)	\
    (This)->lpVtbl -> UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)

#define IDA2Statics_get_ViewFrameRate(This,ret_0)	\
    (This)->lpVtbl -> get_ViewFrameRate(This,ret_0)

#define IDA2Statics_UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)

#define IDA2Statics_UnionMontageArray(This,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArray(This,mtgs_0,ret_1)

#define IDA2Statics_get_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> get_ModifiableBehaviorFlags(This,dwFlags)

#define IDA2Statics_put_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> put_ModifiableBehaviorFlags(This,dwFlags)

#define IDA2Statics_get_EmptyColor(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyColor(This,ret_0)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2Statics_ImportDirect3DRMVisual_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *visual,
    /* [retval][out] */ IDAGeometry **bvr);


void __RPC_STUB IDA2Statics_ImportDirect3DRMVisual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_ApplyDXTransformEx_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *theXf,
    /* [in] */ LONG numInputs,
    /* [size_is][in] */ IDABehavior **inputs,
    /* [in] */ IDANumber *evaluator,
    /* [retval][out] */ IDADXTransformResult **ppResult);


void __RPC_STUB IDA2Statics_ApplyDXTransformEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ApplyDXTransform_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT varXf,
    /* [in] */ VARIANT inputs,
    /* [in] */ VARIANT evaluator,
    /* [retval][out] */ IDADXTransformResult **ppResult);


void __RPC_STUB IDA2Statics_ApplyDXTransform_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ModifiableNumber_Proxy( 
    IDA2Statics * This,
    /* [in] */ double initVal,
    /* [retval][out] */ IDANumber **ppResult);


void __RPC_STUB IDA2Statics_ModifiableNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ModifiableString_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR initVal,
    /* [retval][out] */ IDAString **ppResult);


void __RPC_STUB IDA2Statics_ModifiableString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_DAArrayEx2_Proxy( 
    IDA2Statics * This,
    /* [in] */ LONG s,
    /* [size_is][in] */ IDABehavior *pBvrs[  ],
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDA2Statics_DAArrayEx2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_DAArray2_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT bvrs,
    /* [in] */ DWORD dwFlags,
    /* [retval][out] */ IDAArray **bvr);


void __RPC_STUB IDA2Statics_DAArray2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportGeometryWrapped_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR url,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [retval][out] */ IDAGeometry **ppGeometry);


void __RPC_STUB IDA2Statics_ImportGeometryWrapped_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportGeometryWrappedAsync_Proxy( 
    IDA2Statics * This,
    /* [in] */ BSTR url,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [in] */ IDAGeometry *pGeoStandIn,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA2Statics_ImportGeometryWrappedAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_ImportDirect3DRMVisualWrapped_Proxy( 
    IDA2Statics * This,
    /* [in] */ IUnknown *visual,
    /* [in] */ LONG wrapType,
    /* [in] */ double originX,
    /* [in] */ double originY,
    /* [in] */ double originZ,
    /* [in] */ double zAxisX,
    /* [in] */ double zAxisY,
    /* [in] */ double zAxisZ,
    /* [in] */ double yAxisX,
    /* [in] */ double yAxisY,
    /* [in] */ double yAxisZ,
    /* [in] */ double texOriginX,
    /* [in] */ double texOriginY,
    /* [in] */ double texScaleX,
    /* [in] */ double texScaleY,
    /* [in] */ DWORD flags,
    /* [retval][out] */ IDAGeometry **bvr);


void __RPC_STUB IDA2Statics_ImportDirect3DRMVisualWrapped_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_UntilNotifyScript_Proxy( 
    IDA2Statics * This,
    /* [in] */ IDABehavior *b0_0,
    /* [in] */ IDAEvent *event_1,
    /* [in] */ BSTR scriptlet_2,
    /* [retval][out] */ IDABehavior **ret_3);


void __RPC_STUB IDA2Statics_UntilNotifyScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_ViewFrameRate_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDA2Statics_get_ViewFrameRate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA2Statics_UnionMontageArrayEx_Proxy( 
    IDA2Statics * This,
    /* [in] */ LONG mtgs_0size,
    /* [size_is][in] */ IDAMontage *mtgs_0[  ],
    /* [retval][out] */ IDAMontage **ret_1);


void __RPC_STUB IDA2Statics_UnionMontageArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2Statics_UnionMontageArray_Proxy( 
    IDA2Statics * This,
    /* [in] */ VARIANT mtgs_0,
    /* [retval][out] */ IDAMontage **ret_1);


void __RPC_STUB IDA2Statics_UnionMontageArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_ModifiableBehaviorFlags_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ DWORD *dwFlags);


void __RPC_STUB IDA2Statics_get_ModifiableBehaviorFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDA2Statics_put_ModifiableBehaviorFlags_Proxy( 
    IDA2Statics * This,
    /* [in] */ DWORD dwFlags);


void __RPC_STUB IDA2Statics_put_ModifiableBehaviorFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA2Statics_get_EmptyColor_Proxy( 
    IDA2Statics * This,
    /* [retval][out] */ IDAColor **ret_0);


void __RPC_STUB IDA2Statics_get_EmptyColor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2Statics_INTERFACE_DEFINED__ */


#ifndef __IDA3Statics_INTERFACE_DEFINED__
#define __IDA3Statics_INTERFACE_DEFINED__

/* interface IDA3Statics */
/* [dual][hidden][oleautomation][unique][object][local][helpstring][uuid] */ 


EXTERN_C const IID IID_IDA3Statics;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("6e0b5fc4-4d1e-11d2-aa53-00c04fc2f60f")
    IDA3Statics : public IDA2Statics
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE ImportSoundStream( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE ImportMovieStream( 
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE SequenceArrayEx( 
            /* [in] */ LONG sz,
            /* [size_is][in] */ IDABehavior *bvrs_0[  ],
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SequenceArray( 
            /* [in] */ VARIANT bvrs_0,
            /* [retval][out] */ IDABehavior **ret_1) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_ViewTimeDelta( 
            /* [retval][out] */ IDANumber **ret_0) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE TriMesh( 
            /* [in] */ int nTriangles,
            /* [in] */ VARIANT positions,
            /* [in] */ VARIANT normals,
            /* [in] */ VARIANT UVs,
            /* [in] */ VARIANT indices,
            /* [retval][out] */ IDAGeometry **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE TriMeshEx( 
            /* [in] */ int nTriangles,
            /* [in] */ int nPositions,
            /* [size_is][in] */ float positions[  ],
            /* [in] */ int nNormals,
            /* [size_is][in] */ float normals[  ],
            /* [in] */ int nUVs,
            /* [size_is][in] */ float UVs[  ],
            /* [in] */ int nIndices,
            /* [size_is][in] */ int indices[  ],
            /* [retval][out] */ IDAGeometry **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE RadialGradientMulticolor( 
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE RadialGradientMulticolorEx( 
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE LinearGradientMulticolor( 
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result) = 0;
        
        virtual /* [restricted] */ HRESULT STDMETHODCALLTYPE LinearGradientMulticolorEx( 
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3StaticsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3Statics * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3Statics * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3Statics * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3Statics * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3Statics * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3Statics * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3Statics * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_VersionString )( 
            IDA3Statics * This,
            /* [retval][out] */ BSTR *str);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Site )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASite **pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_Site )( 
            IDA3Statics * This,
            /* [in] */ IDASite *pSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ClientSite )( 
            IDA3Statics * This,
            /* [in] */ IOleClientSite *pClientSite);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClientSite )( 
            IDA3Statics * This,
            /* [retval][out] */ IOleClientSite **pClientSite);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_PixelConstructionMode )( 
            IDA3Statics * This,
            /* [in] */ VARIANT_BOOL bMode);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelConstructionMode )( 
            IDA3Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bMode);
        
        HRESULT ( STDMETHODCALLTYPE *TriggerEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *event,
            /* [in] */ IDABehavior *data);
        
        HRESULT ( STDMETHODCALLTYPE *NewDrawingSurface )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADrawingSurface **pds);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovie )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageColorKey )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *ImportImageAsyncColorKey )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAImage *pImageStandIn,
            /* [in] */ BYTE colorKeyRed,
            /* [in] */ BYTE colorKeyGreen,
            /* [in] */ BYTE colorKeyBlue,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSound )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDASound *pSoundStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometry )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirectDrawSurface )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *dds,
            /* [in] */ IDAEvent *updateEvent,
            /* [retval][out] */ IDAImage **ppImage);
        
        HRESULT ( STDMETHODCALLTYPE *Cond )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *c,
            /* [in] */ IDABehavior *i,
            /* [in] */ IDABehavior *e,
            /* [retval][out] */ IDABehavior **pCondBvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDAArray **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DATupleEx )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DATuple )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [retval][out] */ IDATuple **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableBehavior )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *orig,
            /* [retval][out] */ IDABehavior **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedArray )( 
            IDA3Statics * This,
            /* [in] */ IDAArray *typeTmp,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UninitializedTuple )( 
            IDA3Statics * This,
            /* [in] */ IDATuple *typeTmp,
            /* [retval][out] */ IDATuple **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *NumberBSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDANumber *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *NumberBSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDANumber **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point2BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point2BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Point3BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAPoint3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Point3BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAPoint3 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector2BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector2 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector2 **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Vector3BSplineEx )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ LONG numKnots,
            /* [size_is][in] */ IDANumber *knots[  ],
            /* [in] */ LONG numPts,
            /* [size_is][in] */ IDAVector3 *ctrlPts[  ],
            /* [in] */ LONG numWts,
            /* [size_is][in] */ IDANumber *weights[  ],
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3BSpline )( 
            IDA3Statics * This,
            /* [in] */ int degree,
            /* [in] */ VARIANT knots,
            /* [in] */ VARIANT CtrlPts,
            /* [in] */ VARIANT weights,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDAVector3 **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *Pow )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Abs )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sqrt )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Floor )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Round )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ceiling )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Asin )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Acos )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Atan )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Sin )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Cos )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Tan )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Exp )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Ln )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Log10 )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToDegrees )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ToRadians )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mod )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Atan2 )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Add )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sub )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Mul )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Div )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LT )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *LTE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GT )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GTE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *EQ )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NE )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Neg )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *InterpolateAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Interpolate )( 
            IDA3Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [retval][out] */ IDANumber **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOutAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *from_0,
            /* [in] */ IDANumber *to_1,
            /* [in] */ IDANumber *duration_2,
            /* [in] */ IDANumber *sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SlowInSlowOut )( 
            IDA3Statics * This,
            /* [in] */ double from_0,
            /* [in] */ double to_1,
            /* [in] */ double duration_2,
            /* [in] */ double sharpness_3,
            /* [retval][out] */ IDANumber **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *SoundSource )( 
            IDA3Statics * This,
            /* [in] */ IDASound *snd_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Mix )( 
            IDA3Statics * This,
            /* [in] */ IDASound *left_0,
            /* [in] */ IDASound *right_1,
            /* [retval][out] */ IDASound **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *And )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Or )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [in] */ IDABoolean *b_1,
            /* [retval][out] */ IDABoolean **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Not )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *a_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Integral )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Derivative )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *b_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *IntegralVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativeVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DerivativePoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyState )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyUp )( 
            IDA3Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *KeyDown )( 
            IDA3Statics * This,
            /* [in] */ LONG arg_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DANumber )( 
            IDA3Statics * This,
            /* [in] */ double num_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DAString )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [retval][out] */ IDAString **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *DABoolean )( 
            IDA3Statics * This,
            /* [in] */ VARIANT_BOOL num_0,
            /* [retval][out] */ IDABoolean **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SeededRandom )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDANumber **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_MousePosition )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonState )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonState )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DATrue )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DAFalse )( 
            IDA3Statics * This,
            /* [retval][out] */ IDABoolean **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LocalTime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_GlobalTime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Pixel )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UserData )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *data_0,
            /* [retval][out] */ IDAUserData **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotify )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDAUntilNotifier *notifier_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Until )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ IDABehavior *b1_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *UntilEx )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Sequence )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *s1_0,
            /* [in] */ IDABehavior *s2_1,
            /* [retval][out] */ IDABehavior **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPath )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngle )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUpright )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ double duration_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightEval )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *path_0,
            /* [in] */ IDANumber *eval_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FollowPathAngleUprightAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *obsoleted1_0,
            /* [in] */ IDANumber *obsoleted2_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatString )( 
            IDA3Statics * This,
            /* [in] */ IDAString *s1_0,
            /* [in] */ IDAString *s2_1,
            /* [retval][out] */ IDAString **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCamera )( 
            IDA3Statics * This,
            /* [in] */ double focalDist_0,
            /* [in] */ double nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PerspectiveCameraAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *focalDist_0,
            /* [in] */ IDANumber *nearClip_1,
            /* [retval][out] */ IDACamera **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCamera )( 
            IDA3Statics * This,
            /* [in] */ double nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ParallelCameraAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *nearClip_0,
            /* [retval][out] */ IDACamera **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgbAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *red_0,
            /* [in] */ IDANumber *green_1,
            /* [in] */ IDANumber *blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb )( 
            IDA3Statics * This,
            /* [in] */ double red_0,
            /* [in] */ double green_1,
            /* [in] */ double blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorRgb255 )( 
            IDA3Statics * This,
            /* [in] */ short red_0,
            /* [in] */ short green_1,
            /* [in] */ short blue_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHsl )( 
            IDA3Statics * This,
            /* [in] */ double hue_0,
            /* [in] */ double saturation_1,
            /* [in] */ double lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *ColorHslAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *hue_0,
            /* [in] */ IDANumber *saturation_1,
            /* [in] */ IDANumber *lum_2,
            /* [retval][out] */ IDAColor **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Red )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Green )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Blue )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Cyan )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Magenta )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Yellow )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Black )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_White )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Aqua )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Fuchsia )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Gray )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Lime )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Maroon )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Navy )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Olive )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Purple )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silver )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Teal )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Predicate )( 
            IDA3Statics * This,
            /* [in] */ IDABoolean *b_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *NotEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *event_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AndEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OrEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ThenEvent )( 
            IDA3Statics * This,
            /* [in] */ IDAEvent *e1_0,
            /* [in] */ IDAEvent *e2_1,
            /* [retval][out] */ IDAEvent **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonDown )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_LeftButtonUp )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonDown )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_RightButtonUp )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Always )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Never )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TimerAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Timer )( 
            IDA3Statics * This,
            /* [in] */ double n_0,
            /* [retval][out] */ IDAEvent **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *AppTriggeredEvent )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEvent **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ScriptCallback )( 
            IDA3Statics * This,
            /* [in] */ BSTR obsolete1_0,
            /* [in] */ IDAEvent *obsolete2_1,
            /* [in] */ BSTR obsolete3_2,
            /* [retval][out] */ IDAEvent **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyGeometry )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometry )( 
            IDA3Statics * This,
            /* [in] */ IDAGeometry *g1_0,
            /* [in] */ IDAGeometry *g2_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionGeometryArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAGeometry *imgs_0[  ],
            /* [retval][out] */ IDAGeometry **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionGeometryArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAGeometry **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyImage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DetectableEmptyImage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAImage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SolidColorImage )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *col_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *GradientPolygonEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG colors_1size,
            /* [size_is][in] */ IDAColor *colors_1[  ],
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *GradientPolygon )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT colors_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonEx )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygon )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnimEx )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ LONG points_2size,
            /* [size_is][in] */ IDAPoint2 *points_2[  ],
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientPolygonAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ VARIANT points_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientSquare )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lowerLeft_0,
            /* [in] */ IDAColor *upperLeft_1,
            /* [in] */ IDAColor *upperRight_2,
            /* [in] */ IDAColor *lowerRight_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquare )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientSquareAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPoly )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ double numEdges_2,
            /* [in] */ double fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientRegularPolyAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *inner_0,
            /* [in] */ IDAColor *outer_1,
            /* [in] */ IDANumber *numEdges_2,
            /* [in] */ IDANumber *fallOff_3,
            /* [retval][out] */ IDAImage **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ double fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *GradientHorizontalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *start_0,
            /* [in] */ IDAColor *stop_1,
            /* [in] */ IDANumber *fallOff_2,
            /* [retval][out] */ IDAImage **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchHorizontalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVertical )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchVerticalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchForwardDiagonalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonal )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchBackwardDiagonalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCross )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchCrossAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCross )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ double spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *HatchDiagonalCrossAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAColor *lineClr_0,
            /* [in] */ IDANumber *spacing_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Overlay )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *top_0,
            /* [in] */ IDAImage *bottom_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *OverlayArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG imgs_0size,
            /* [size_is][in] */ IDAImage *imgs_0[  ],
            /* [retval][out] */ IDAImage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *OverlayArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT imgs_0,
            /* [retval][out] */ IDAImage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AmbientLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DirectionalLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_PointLight )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAGeometry **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLightAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ IDANumber *cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SpotLight )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *fullcone_0,
            /* [in] */ double cutoff_1,
            /* [retval][out] */ IDAGeometry **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultLineStyle )( 
            IDA3Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyLineStyle )( 
            IDA3Statics * This,
            /* [retval][out] */ IDALineStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleBevel )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleRound )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_JoinStyleMiter )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAJoinStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleFlat )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleSquare )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EndStyleRound )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAEndStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleSolid )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DashStyleDashed )( 
            IDA3Statics * This,
            /* [retval][out] */ IDADashStyle **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultMicrophone )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMicrophone **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueMatte )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ClearMatte )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMatte **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *IntersectMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DifferenceMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAMatte *m1_0,
            /* [in] */ IDAMatte *m2_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *FillMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *p_0,
            /* [retval][out] */ IDAMatte **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *TextMatte )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAMatte **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyMontage )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAMontage **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontage )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ double depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ImageMontageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAImage *im_0,
            /* [in] */ IDANumber *depth_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontage )( 
            IDA3Statics * This,
            /* [in] */ IDAMontage *m1_0,
            /* [in] */ IDAMontage *m2_1,
            /* [retval][out] */ IDAMontage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Concat )( 
            IDA3Statics * This,
            /* [in] */ IDAPath2 *p1_0,
            /* [in] */ IDAPath2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ConcatArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG paths_0size,
            /* [size_is][in] */ IDAPath2 *paths_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *ConcatArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT paths_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Line )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Ray )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *pt_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *StringPathAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringPath )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolylineEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [retval][out] */ IDAPath2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Polyline )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [retval][out] */ IDAPath2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *PolydrawPathEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG codes_1size,
            /* [size_is][in] */ IDANumber *codes_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *PolydrawPath )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT codes_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadians )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcRadiansAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *ArcDegrees )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadians )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieRadiansAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *startAngle_0,
            /* [in] */ IDANumber *endAngle_1,
            /* [in] */ IDANumber *arcWidth_2,
            /* [in] */ IDANumber *arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *PieDegrees )( 
            IDA3Statics * This,
            /* [in] */ double startAngle_0,
            /* [in] */ double endAngle_1,
            /* [in] */ double arcWidth_2,
            /* [in] */ double arcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *Oval )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *OvalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rect )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RectAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRect )( 
            IDA3Statics * This,
            /* [in] */ double width_0,
            /* [in] */ double height_1,
            /* [in] */ double cornerArcWidth_2,
            /* [in] */ double cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        HRESULT ( STDMETHODCALLTYPE *RoundRectAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *width_0,
            /* [in] */ IDANumber *height_1,
            /* [in] */ IDANumber *cornerArcWidth_2,
            /* [in] */ IDANumber *cornerArcHeight_3,
            /* [retval][out] */ IDAPath2 **ret_4);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *CubicBSplinePathEx )( 
            IDA3Statics * This,
            /* [in] */ LONG points_0size,
            /* [size_is][in] */ IDAPoint2 *points_0[  ],
            /* [in] */ LONG knots_1size,
            /* [size_is][in] */ IDANumber *knots_1[  ],
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CubicBSplinePath )( 
            IDA3Statics * This,
            /* [in] */ VARIANT points_0,
            /* [in] */ VARIANT knots_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextPath )( 
            IDA3Statics * This,
            /* [in] */ IDAString *obsolete1_0,
            /* [in] */ IDAFontStyle *obsolete2_1,
            /* [retval][out] */ IDAPath2 **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Silence )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *MixArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG snds_0size,
            /* [size_is][in] */ IDASound *snds_0[  ],
            /* [retval][out] */ IDASound **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *MixArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT snds_0,
            /* [retval][out] */ IDASound **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_SinSynth )( 
            IDA3Statics * This,
            /* [retval][out] */ IDASound **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_DefaultFont )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAFontStyle **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *FontAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDANumber *size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Font )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ double size_1,
            /* [in] */ IDAColor *col_2,
            /* [retval][out] */ IDAFontStyle **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *StringImageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *StringImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR str_0,
            /* [in] */ IDAFontStyle *fs_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImageAnim )( 
            IDA3Statics * This,
            /* [in] */ IDAString *obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *TextImage )( 
            IDA3Statics * This,
            /* [in] */ BSTR obsoleted1_0,
            /* [in] */ IDAFontStyle *obsoleted2_1,
            /* [retval][out] */ IDAImage **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector2 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2Polar )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Vector2PolarDegrees )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2PolarAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *theta_0,
            /* [in] */ IDANumber *radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Point2Polar )( 
            IDA3Statics * This,
            /* [in] */ double theta_0,
            /* [in] */ double radius_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [in] */ IDAVector2 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v_0,
            /* [retval][out] */ IDAVector2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *v1_0,
            /* [in] */ IDAVector2 *v2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAVector2 *v_1,
            /* [retval][out] */ IDAPoint2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p1_0,
            /* [in] */ IDAPoint2 *p2_1,
            /* [retval][out] */ IDAVector2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint2 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *p_0,
            /* [in] */ IDAPoint2 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_XVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_YVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ZeroVector3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAVector3 **ret_0);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_Origin3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAPoint3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3SphericalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *xyAngle_0,
            /* [in] */ IDANumber *yzAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Vector3Spherical )( 
            IDA3Statics * This,
            /* [in] */ double xyAngle_0,
            /* [in] */ double yzAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAVector3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3SphericalAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *zxAngle_0,
            /* [in] */ IDANumber *xyAngle_1,
            /* [in] */ IDANumber *radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Point3Spherical )( 
            IDA3Statics * This,
            /* [in] */ double zxAngle_0,
            /* [in] */ double xyAngle_1,
            /* [in] */ double radius_2,
            /* [retval][out] */ IDAPoint3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *DotVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *CrossVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [in] */ IDAVector3 *u_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *NegVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v_0,
            /* [retval][out] */ IDAVector3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SubVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddVector3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *v1_0,
            /* [in] */ IDAVector3 *v2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *AddPoint3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAVector3 *v_1,
            /* [retval][out] */ IDAPoint3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *SubPoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p1_0,
            /* [in] */ IDAPoint3 *p2_1,
            /* [retval][out] */ IDAVector3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistancePoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *DistanceSquaredPoint3 )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *p_0,
            /* [in] */ IDAPoint3 *q_1,
            /* [retval][out] */ IDANumber **ret_2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform3 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDATransform3 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *tx_0,
            /* [in] */ IDANumber *ty_1,
            /* [in] */ IDANumber *tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3 )( 
            IDA3Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Rate )( 
            IDA3Statics * This,
            /* [in] */ double tx_0,
            /* [in] */ double ty_1,
            /* [in] */ double tz_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *delta_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate3Point )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *new_origin_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [in] */ IDANumber *z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Rate )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [in] */ double z_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *scale_vec_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3Uniform )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale3UniformRate )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ IDANumber *angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Rate )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3Degrees )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate3RateDegrees )( 
            IDA3Statics * This,
            /* [in] */ IDAVector3 *axis_0,
            /* [in] */ double angle_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *a_0,
            /* [in] */ IDANumber *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3 )( 
            IDA3Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *XShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double a_0,
            /* [in] */ double b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *c_0,
            /* [in] */ IDANumber *d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3 )( 
            IDA3Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *YShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double c_0,
            /* [in] */ double d_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *e_0,
            /* [in] */ IDANumber *f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3 )( 
            IDA3Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *ZShear3Rate )( 
            IDA3Statics * This,
            /* [in] */ double e_0,
            /* [in] */ double f_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform4x4AnimEx )( 
            IDA3Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform4x4Anim )( 
            IDA3Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3 )( 
            IDA3Statics * This,
            /* [in] */ IDATransform3 *a_0,
            /* [in] */ IDATransform3 *b_1,
            /* [retval][out] */ IDATransform3 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose3ArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform3 *xfs_0[  ],
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose3Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform3 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *LookAtFrom )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint3 *to_0,
            /* [in] */ IDAPoint3 *from_1,
            /* [in] */ IDAVector3 *up_2,
            /* [retval][out] */ IDATransform3 **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_IdentityTransform2 )( 
            IDA3Statics * This,
            /* [retval][out] */ IDATransform2 **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *Tx_0,
            /* [in] */ IDANumber *Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2 )( 
            IDA3Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Rate )( 
            IDA3Statics * This,
            /* [in] */ double Tx_0,
            /* [in] */ double Ty_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *delta_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Translate2Point )( 
            IDA3Statics * This,
            /* [in] */ IDAPoint2 *pos_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *x_0,
            /* [in] */ IDANumber *y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2 )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Rate )( 
            IDA3Statics * This,
            /* [in] */ double x_0,
            /* [in] */ double y_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector2 )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *obsoleteMethod_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Vector )( 
            IDA3Statics * This,
            /* [in] */ IDAVector2 *scale_vec_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformAnim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2Uniform )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Scale2UniformRate )( 
            IDA3Statics * This,
            /* [in] */ double uniform_scale_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2 )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Rate )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2Degrees )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Rotate2RateDegrees )( 
            IDA3Statics * This,
            /* [in] */ double angle_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2 )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *XShear2Rate )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Anim )( 
            IDA3Statics * This,
            /* [in] */ IDANumber *arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2 )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *YShear2Rate )( 
            IDA3Statics * This,
            /* [in] */ double arg_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Transform3x2AnimEx )( 
            IDA3Statics * This,
            /* [in] */ LONG m_0size,
            /* [size_is][in] */ IDANumber *m_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Transform3x2Anim )( 
            IDA3Statics * This,
            /* [in] */ VARIANT m_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2 )( 
            IDA3Statics * This,
            /* [in] */ IDATransform2 *a_0,
            /* [in] */ IDATransform2 *b_1,
            /* [retval][out] */ IDATransform2 **ret_2);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *Compose2ArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG xfs_0size,
            /* [size_is][in] */ IDATransform2 *xfs_0[  ],
            /* [retval][out] */ IDATransform2 **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *Compose2Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT xfs_0,
            /* [retval][out] */ IDATransform2 **ret_1);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Tuple )( 
            IDA3Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDATuple **obsolete2);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Array )( 
            IDA3Statics * This,
            /* [in] */ VARIANT obsolete1,
            /* [retval][out] */ IDAArray **obsolete2);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_AreBlockingImportsComplete )( 
            IDA3Statics * This,
            /* [retval][out] */ VARIANT_BOOL *bComplete);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisual )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *visual,
            /* [retval][out] */ IDAGeometry **bvr);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *ApplyDXTransformEx )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *theXf,
            /* [in] */ LONG numInputs,
            /* [size_is][in] */ IDABehavior **inputs,
            /* [in] */ IDANumber *evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ApplyDXTransform )( 
            IDA3Statics * This,
            /* [in] */ VARIANT varXf,
            /* [in] */ VARIANT inputs,
            /* [in] */ VARIANT evaluator,
            /* [retval][out] */ IDADXTransformResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableNumber )( 
            IDA3Statics * This,
            /* [in] */ double initVal,
            /* [retval][out] */ IDANumber **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ModifiableString )( 
            IDA3Statics * This,
            /* [in] */ BSTR initVal,
            /* [retval][out] */ IDAString **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *DAArrayEx2 )( 
            IDA3Statics * This,
            /* [in] */ LONG s,
            /* [size_is][in] */ IDABehavior *pBvrs[  ],
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *DAArray2 )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs,
            /* [in] */ DWORD dwFlags,
            /* [retval][out] */ IDAArray **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrapped )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **ppGeometry);
        
        HRESULT ( STDMETHODCALLTYPE *ImportGeometryWrappedAsync )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [in] */ IDAGeometry *pGeoStandIn,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportDirect3DRMVisualWrapped )( 
            IDA3Statics * This,
            /* [in] */ IUnknown *visual,
            /* [in] */ LONG wrapType,
            /* [in] */ double originX,
            /* [in] */ double originY,
            /* [in] */ double originZ,
            /* [in] */ double zAxisX,
            /* [in] */ double zAxisY,
            /* [in] */ double zAxisZ,
            /* [in] */ double yAxisX,
            /* [in] */ double yAxisY,
            /* [in] */ double yAxisZ,
            /* [in] */ double texOriginX,
            /* [in] */ double texOriginY,
            /* [in] */ double texScaleX,
            /* [in] */ double texScaleY,
            /* [in] */ DWORD flags,
            /* [retval][out] */ IDAGeometry **bvr);
        
        HRESULT ( STDMETHODCALLTYPE *UntilNotifyScript )( 
            IDA3Statics * This,
            /* [in] */ IDABehavior *b0_0,
            /* [in] */ IDAEvent *event_1,
            /* [in] */ BSTR scriptlet_2,
            /* [retval][out] */ IDABehavior **ret_3);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewFrameRate )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *UnionMontageArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG mtgs_0size,
            /* [size_is][in] */ IDAMontage *mtgs_0[  ],
            /* [retval][out] */ IDAMontage **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *UnionMontageArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT mtgs_0,
            /* [retval][out] */ IDAMontage **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ModifiableBehaviorFlags )( 
            IDA3Statics * This,
            /* [retval][out] */ DWORD *dwFlags);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_ModifiableBehaviorFlags )( 
            IDA3Statics * This,
            /* [in] */ DWORD dwFlags);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_EmptyColor )( 
            IDA3Statics * This,
            /* [retval][out] */ IDAColor **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *ImportSoundStream )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        HRESULT ( STDMETHODCALLTYPE *ImportMovieStream )( 
            IDA3Statics * This,
            /* [in] */ BSTR url,
            /* [retval][out] */ IDAImportationResult **ppResult);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *SequenceArrayEx )( 
            IDA3Statics * This,
            /* [in] */ LONG sz,
            /* [size_is][in] */ IDABehavior *bvrs_0[  ],
            /* [retval][out] */ IDABehavior **ret_1);
        
        HRESULT ( STDMETHODCALLTYPE *SequenceArray )( 
            IDA3Statics * This,
            /* [in] */ VARIANT bvrs_0,
            /* [retval][out] */ IDABehavior **ret_1);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_ViewTimeDelta )( 
            IDA3Statics * This,
            /* [retval][out] */ IDANumber **ret_0);
        
        HRESULT ( STDMETHODCALLTYPE *TriMesh )( 
            IDA3Statics * This,
            /* [in] */ int nTriangles,
            /* [in] */ VARIANT positions,
            /* [in] */ VARIANT normals,
            /* [in] */ VARIANT UVs,
            /* [in] */ VARIANT indices,
            /* [retval][out] */ IDAGeometry **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *TriMeshEx )( 
            IDA3Statics * This,
            /* [in] */ int nTriangles,
            /* [in] */ int nPositions,
            /* [size_is][in] */ float positions[  ],
            /* [in] */ int nNormals,
            /* [size_is][in] */ float normals[  ],
            /* [in] */ int nUVs,
            /* [size_is][in] */ float UVs[  ],
            /* [in] */ int nIndices,
            /* [size_is][in] */ int indices[  ],
            /* [retval][out] */ IDAGeometry **result);
        
        HRESULT ( STDMETHODCALLTYPE *RadialGradientMulticolor )( 
            IDA3Statics * This,
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *RadialGradientMulticolorEx )( 
            IDA3Statics * This,
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result);
        
        HRESULT ( STDMETHODCALLTYPE *LinearGradientMulticolor )( 
            IDA3Statics * This,
            /* [in] */ VARIANT offsets,
            /* [in] */ VARIANT colors,
            /* [retval][out] */ IDAImage **result);
        
        /* [restricted] */ HRESULT ( STDMETHODCALLTYPE *LinearGradientMulticolorEx )( 
            IDA3Statics * This,
            /* [in] */ int nOffsets,
            /* [size_is][in] */ IDANumber *offsets[  ],
            /* [in] */ int nColors,
            /* [size_is][in] */ IDAColor *colors[  ],
            /* [retval][out] */ IDAImage **result);
        
        END_INTERFACE
    } IDA3StaticsVtbl;

    interface IDA3Statics
    {
        CONST_VTBL struct IDA3StaticsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3Statics_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3Statics_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3Statics_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3Statics_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3Statics_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3Statics_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3Statics_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3Statics_get_VersionString(This,str)	\
    (This)->lpVtbl -> get_VersionString(This,str)

#define IDA3Statics_get_Site(This,pSite)	\
    (This)->lpVtbl -> get_Site(This,pSite)

#define IDA3Statics_put_Site(This,pSite)	\
    (This)->lpVtbl -> put_Site(This,pSite)

#define IDA3Statics_put_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> put_ClientSite(This,pClientSite)

#define IDA3Statics_get_ClientSite(This,pClientSite)	\
    (This)->lpVtbl -> get_ClientSite(This,pClientSite)

#define IDA3Statics_put_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> put_PixelConstructionMode(This,bMode)

#define IDA3Statics_get_PixelConstructionMode(This,bMode)	\
    (This)->lpVtbl -> get_PixelConstructionMode(This,bMode)

#define IDA3Statics_TriggerEvent(This,event,data)	\
    (This)->lpVtbl -> TriggerEvent(This,event,data)

#define IDA3Statics_NewDrawingSurface(This,pds)	\
    (This)->lpVtbl -> NewDrawingSurface(This,pds)

#define IDA3Statics_ImportMovie(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovie(This,url,ppResult)

#define IDA3Statics_ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportMovieAsync(This,url,pImageStandIn,pSoundStandIn,ppResult)

#define IDA3Statics_ImportImage(This,url,ppImage)	\
    (This)->lpVtbl -> ImportImage(This,url,ppImage)

#define IDA3Statics_ImportImageAsync(This,url,pImageStandIn,ppResult)	\
    (This)->lpVtbl -> ImportImageAsync(This,url,pImageStandIn,ppResult)

#define IDA3Statics_ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)	\
    (This)->lpVtbl -> ImportImageColorKey(This,url,colorKeyRed,colorKeyGreen,colorKeyBlue,ppImage)

#define IDA3Statics_ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)	\
    (This)->lpVtbl -> ImportImageAsyncColorKey(This,url,pImageStandIn,colorKeyRed,colorKeyGreen,colorKeyBlue,ppResult)

#define IDA3Statics_ImportSound(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSound(This,url,ppResult)

#define IDA3Statics_ImportSoundAsync(This,url,pSoundStandIn,ppResult)	\
    (This)->lpVtbl -> ImportSoundAsync(This,url,pSoundStandIn,ppResult)

#define IDA3Statics_ImportGeometry(This,url,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometry(This,url,ppGeometry)

#define IDA3Statics_ImportGeometryAsync(This,url,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryAsync(This,url,pGeoStandIn,ppResult)

#define IDA3Statics_ImportDirectDrawSurface(This,dds,updateEvent,ppImage)	\
    (This)->lpVtbl -> ImportDirectDrawSurface(This,dds,updateEvent,ppImage)

#define IDA3Statics_Cond(This,c,i,e,pCondBvr)	\
    (This)->lpVtbl -> Cond(This,c,i,e,pCondBvr)

#define IDA3Statics_DAArrayEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DAArrayEx(This,s,pBvrs,bvr)

#define IDA3Statics_DAArray(This,bvrs,bvr)	\
    (This)->lpVtbl -> DAArray(This,bvrs,bvr)

#define IDA3Statics_DATupleEx(This,s,pBvrs,bvr)	\
    (This)->lpVtbl -> DATupleEx(This,s,pBvrs,bvr)

#define IDA3Statics_DATuple(This,bvrs,bvr)	\
    (This)->lpVtbl -> DATuple(This,bvrs,bvr)

#define IDA3Statics_ModifiableBehavior(This,orig,bvr)	\
    (This)->lpVtbl -> ModifiableBehavior(This,orig,bvr)

#define IDA3Statics_UninitializedArray(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedArray(This,typeTmp,bvr)

#define IDA3Statics_UninitializedTuple(This,typeTmp,bvr)	\
    (This)->lpVtbl -> UninitializedTuple(This,typeTmp,bvr)

#define IDA3Statics_NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> NumberBSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Point3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector2BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSplineEx(This,degree,numKnots,knots,numPts,ctrlPts,numWts,weights,evaluator,bvr)

#define IDA3Statics_Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)	\
    (This)->lpVtbl -> Vector3BSpline(This,degree,knots,CtrlPts,weights,evaluator,bvr)

#define IDA3Statics_Pow(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Pow(This,a_0,b_1,ret_2)

#define IDA3Statics_Abs(This,a_0,ret_1)	\
    (This)->lpVtbl -> Abs(This,a_0,ret_1)

#define IDA3Statics_Sqrt(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sqrt(This,a_0,ret_1)

#define IDA3Statics_Floor(This,a_0,ret_1)	\
    (This)->lpVtbl -> Floor(This,a_0,ret_1)

#define IDA3Statics_Round(This,a_0,ret_1)	\
    (This)->lpVtbl -> Round(This,a_0,ret_1)

#define IDA3Statics_Ceiling(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ceiling(This,a_0,ret_1)

#define IDA3Statics_Asin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Asin(This,a_0,ret_1)

#define IDA3Statics_Acos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Acos(This,a_0,ret_1)

#define IDA3Statics_Atan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Atan(This,a_0,ret_1)

#define IDA3Statics_Sin(This,a_0,ret_1)	\
    (This)->lpVtbl -> Sin(This,a_0,ret_1)

#define IDA3Statics_Cos(This,a_0,ret_1)	\
    (This)->lpVtbl -> Cos(This,a_0,ret_1)

#define IDA3Statics_Tan(This,a_0,ret_1)	\
    (This)->lpVtbl -> Tan(This,a_0,ret_1)

#define IDA3Statics_Exp(This,a_0,ret_1)	\
    (This)->lpVtbl -> Exp(This,a_0,ret_1)

#define IDA3Statics_Ln(This,a_0,ret_1)	\
    (This)->lpVtbl -> Ln(This,a_0,ret_1)

#define IDA3Statics_Log10(This,a_0,ret_1)	\
    (This)->lpVtbl -> Log10(This,a_0,ret_1)

#define IDA3Statics_ToDegrees(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToDegrees(This,a_0,ret_1)

#define IDA3Statics_ToRadians(This,a_0,ret_1)	\
    (This)->lpVtbl -> ToRadians(This,a_0,ret_1)

#define IDA3Statics_Mod(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mod(This,a_0,b_1,ret_2)

#define IDA3Statics_Atan2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Atan2(This,a_0,b_1,ret_2)

#define IDA3Statics_Add(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Add(This,a_0,b_1,ret_2)

#define IDA3Statics_Sub(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Sub(This,a_0,b_1,ret_2)

#define IDA3Statics_Mul(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Mul(This,a_0,b_1,ret_2)

#define IDA3Statics_Div(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Div(This,a_0,b_1,ret_2)

#define IDA3Statics_LT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LT(This,a_0,b_1,ret_2)

#define IDA3Statics_LTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> LTE(This,a_0,b_1,ret_2)

#define IDA3Statics_GT(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GT(This,a_0,b_1,ret_2)

#define IDA3Statics_GTE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> GTE(This,a_0,b_1,ret_2)

#define IDA3Statics_EQ(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> EQ(This,a_0,b_1,ret_2)

#define IDA3Statics_NE(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> NE(This,a_0,b_1,ret_2)

#define IDA3Statics_Neg(This,a_0,ret_1)	\
    (This)->lpVtbl -> Neg(This,a_0,ret_1)

#define IDA3Statics_InterpolateAnim(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> InterpolateAnim(This,from_0,to_1,duration_2,ret_3)

#define IDA3Statics_Interpolate(This,from_0,to_1,duration_2,ret_3)	\
    (This)->lpVtbl -> Interpolate(This,from_0,to_1,duration_2,ret_3)

#define IDA3Statics_SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOutAnim(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA3Statics_SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)	\
    (This)->lpVtbl -> SlowInSlowOut(This,from_0,to_1,duration_2,sharpness_3,ret_4)

#define IDA3Statics_SoundSource(This,snd_0,ret_1)	\
    (This)->lpVtbl -> SoundSource(This,snd_0,ret_1)

#define IDA3Statics_Mix(This,left_0,right_1,ret_2)	\
    (This)->lpVtbl -> Mix(This,left_0,right_1,ret_2)

#define IDA3Statics_And(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> And(This,a_0,b_1,ret_2)

#define IDA3Statics_Or(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Or(This,a_0,b_1,ret_2)

#define IDA3Statics_Not(This,a_0,ret_1)	\
    (This)->lpVtbl -> Not(This,a_0,ret_1)

#define IDA3Statics_Integral(This,b_0,ret_1)	\
    (This)->lpVtbl -> Integral(This,b_0,ret_1)

#define IDA3Statics_Derivative(This,b_0,ret_1)	\
    (This)->lpVtbl -> Derivative(This,b_0,ret_1)

#define IDA3Statics_IntegralVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector2(This,v_0,ret_1)

#define IDA3Statics_IntegralVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> IntegralVector3(This,v_0,ret_1)

#define IDA3Statics_DerivativeVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector2(This,v_0,ret_1)

#define IDA3Statics_DerivativeVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativeVector3(This,v_0,ret_1)

#define IDA3Statics_DerivativePoint2(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint2(This,v_0,ret_1)

#define IDA3Statics_DerivativePoint3(This,v_0,ret_1)	\
    (This)->lpVtbl -> DerivativePoint3(This,v_0,ret_1)

#define IDA3Statics_KeyState(This,n_0,ret_1)	\
    (This)->lpVtbl -> KeyState(This,n_0,ret_1)

#define IDA3Statics_KeyUp(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyUp(This,arg_0,ret_1)

#define IDA3Statics_KeyDown(This,arg_0,ret_1)	\
    (This)->lpVtbl -> KeyDown(This,arg_0,ret_1)

#define IDA3Statics_DANumber(This,num_0,ret_1)	\
    (This)->lpVtbl -> DANumber(This,num_0,ret_1)

#define IDA3Statics_DAString(This,str_0,ret_1)	\
    (This)->lpVtbl -> DAString(This,str_0,ret_1)

#define IDA3Statics_DABoolean(This,num_0,ret_1)	\
    (This)->lpVtbl -> DABoolean(This,num_0,ret_1)

#define IDA3Statics_SeededRandom(This,arg_0,ret_1)	\
    (This)->lpVtbl -> SeededRandom(This,arg_0,ret_1)

#define IDA3Statics_get_MousePosition(This,ret_0)	\
    (This)->lpVtbl -> get_MousePosition(This,ret_0)

#define IDA3Statics_get_LeftButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonState(This,ret_0)

#define IDA3Statics_get_RightButtonState(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonState(This,ret_0)

#define IDA3Statics_get_DATrue(This,ret_0)	\
    (This)->lpVtbl -> get_DATrue(This,ret_0)

#define IDA3Statics_get_DAFalse(This,ret_0)	\
    (This)->lpVtbl -> get_DAFalse(This,ret_0)

#define IDA3Statics_get_LocalTime(This,ret_0)	\
    (This)->lpVtbl -> get_LocalTime(This,ret_0)

#define IDA3Statics_get_GlobalTime(This,ret_0)	\
    (This)->lpVtbl -> get_GlobalTime(This,ret_0)

#define IDA3Statics_get_Pixel(This,ret_0)	\
    (This)->lpVtbl -> get_Pixel(This,ret_0)

#define IDA3Statics_UserData(This,data_0,ret_1)	\
    (This)->lpVtbl -> UserData(This,data_0,ret_1)

#define IDA3Statics_UntilNotify(This,b0_0,event_1,notifier_2,ret_3)	\
    (This)->lpVtbl -> UntilNotify(This,b0_0,event_1,notifier_2,ret_3)

#define IDA3Statics_Until(This,b0_0,event_1,b1_2,ret_3)	\
    (This)->lpVtbl -> Until(This,b0_0,event_1,b1_2,ret_3)

#define IDA3Statics_UntilEx(This,b0_0,event_1,ret_2)	\
    (This)->lpVtbl -> UntilEx(This,b0_0,event_1,ret_2)

#define IDA3Statics_Sequence(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> Sequence(This,s1_0,s2_1,ret_2)

#define IDA3Statics_FollowPath(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPath(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathAngle(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngle(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathAngleUpright(This,path_0,duration_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUpright(This,path_0,duration_1,ret_2)

#define IDA3Statics_FollowPathEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAngleEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightEval(This,path_0,eval_1,ret_2)

#define IDA3Statics_FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> FollowPathAngleUprightAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_ConcatString(This,s1_0,s2_1,ret_2)	\
    (This)->lpVtbl -> ConcatString(This,s1_0,s2_1,ret_2)

#define IDA3Statics_PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCamera(This,focalDist_0,nearClip_1,ret_2)

#define IDA3Statics_PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)	\
    (This)->lpVtbl -> PerspectiveCameraAnim(This,focalDist_0,nearClip_1,ret_2)

#define IDA3Statics_ParallelCamera(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCamera(This,nearClip_0,ret_1)

#define IDA3Statics_ParallelCameraAnim(This,nearClip_0,ret_1)	\
    (This)->lpVtbl -> ParallelCameraAnim(This,nearClip_0,ret_1)

#define IDA3Statics_ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgbAnim(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorRgb(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorRgb255(This,red_0,green_1,blue_2,ret_3)	\
    (This)->lpVtbl -> ColorRgb255(This,red_0,green_1,blue_2,ret_3)

#define IDA3Statics_ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHsl(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA3Statics_ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)	\
    (This)->lpVtbl -> ColorHslAnim(This,hue_0,saturation_1,lum_2,ret_3)

#define IDA3Statics_get_Red(This,ret_0)	\
    (This)->lpVtbl -> get_Red(This,ret_0)

#define IDA3Statics_get_Green(This,ret_0)	\
    (This)->lpVtbl -> get_Green(This,ret_0)

#define IDA3Statics_get_Blue(This,ret_0)	\
    (This)->lpVtbl -> get_Blue(This,ret_0)

#define IDA3Statics_get_Cyan(This,ret_0)	\
    (This)->lpVtbl -> get_Cyan(This,ret_0)

#define IDA3Statics_get_Magenta(This,ret_0)	\
    (This)->lpVtbl -> get_Magenta(This,ret_0)

#define IDA3Statics_get_Yellow(This,ret_0)	\
    (This)->lpVtbl -> get_Yellow(This,ret_0)

#define IDA3Statics_get_Black(This,ret_0)	\
    (This)->lpVtbl -> get_Black(This,ret_0)

#define IDA3Statics_get_White(This,ret_0)	\
    (This)->lpVtbl -> get_White(This,ret_0)

#define IDA3Statics_get_Aqua(This,ret_0)	\
    (This)->lpVtbl -> get_Aqua(This,ret_0)

#define IDA3Statics_get_Fuchsia(This,ret_0)	\
    (This)->lpVtbl -> get_Fuchsia(This,ret_0)

#define IDA3Statics_get_Gray(This,ret_0)	\
    (This)->lpVtbl -> get_Gray(This,ret_0)

#define IDA3Statics_get_Lime(This,ret_0)	\
    (This)->lpVtbl -> get_Lime(This,ret_0)

#define IDA3Statics_get_Maroon(This,ret_0)	\
    (This)->lpVtbl -> get_Maroon(This,ret_0)

#define IDA3Statics_get_Navy(This,ret_0)	\
    (This)->lpVtbl -> get_Navy(This,ret_0)

#define IDA3Statics_get_Olive(This,ret_0)	\
    (This)->lpVtbl -> get_Olive(This,ret_0)

#define IDA3Statics_get_Purple(This,ret_0)	\
    (This)->lpVtbl -> get_Purple(This,ret_0)

#define IDA3Statics_get_Silver(This,ret_0)	\
    (This)->lpVtbl -> get_Silver(This,ret_0)

#define IDA3Statics_get_Teal(This,ret_0)	\
    (This)->lpVtbl -> get_Teal(This,ret_0)

#define IDA3Statics_Predicate(This,b_0,ret_1)	\
    (This)->lpVtbl -> Predicate(This,b_0,ret_1)

#define IDA3Statics_NotEvent(This,event_0,ret_1)	\
    (This)->lpVtbl -> NotEvent(This,event_0,ret_1)

#define IDA3Statics_AndEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> AndEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_OrEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> OrEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_ThenEvent(This,e1_0,e2_1,ret_2)	\
    (This)->lpVtbl -> ThenEvent(This,e1_0,e2_1,ret_2)

#define IDA3Statics_get_LeftButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonDown(This,ret_0)

#define IDA3Statics_get_LeftButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_LeftButtonUp(This,ret_0)

#define IDA3Statics_get_RightButtonDown(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonDown(This,ret_0)

#define IDA3Statics_get_RightButtonUp(This,ret_0)	\
    (This)->lpVtbl -> get_RightButtonUp(This,ret_0)

#define IDA3Statics_get_Always(This,ret_0)	\
    (This)->lpVtbl -> get_Always(This,ret_0)

#define IDA3Statics_get_Never(This,ret_0)	\
    (This)->lpVtbl -> get_Never(This,ret_0)

#define IDA3Statics_TimerAnim(This,n_0,ret_1)	\
    (This)->lpVtbl -> TimerAnim(This,n_0,ret_1)

#define IDA3Statics_Timer(This,n_0,ret_1)	\
    (This)->lpVtbl -> Timer(This,n_0,ret_1)

#define IDA3Statics_AppTriggeredEvent(This,ret_0)	\
    (This)->lpVtbl -> AppTriggeredEvent(This,ret_0)

#define IDA3Statics_ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)	\
    (This)->lpVtbl -> ScriptCallback(This,obsolete1_0,obsolete2_1,obsolete3_2,ret_3)

#define IDA3Statics_get_EmptyGeometry(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyGeometry(This,ret_0)

#define IDA3Statics_UnionGeometry(This,g1_0,g2_1,ret_2)	\
    (This)->lpVtbl -> UnionGeometry(This,g1_0,g2_1,ret_2)

#define IDA3Statics_UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA3Statics_UnionGeometryArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> UnionGeometryArray(This,imgs_0,ret_1)

#define IDA3Statics_get_EmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyImage(This,ret_0)

#define IDA3Statics_get_DetectableEmptyImage(This,ret_0)	\
    (This)->lpVtbl -> get_DetectableEmptyImage(This,ret_0)

#define IDA3Statics_SolidColorImage(This,col_0,ret_1)	\
    (This)->lpVtbl -> SolidColorImage(This,col_0,ret_1)

#define IDA3Statics_GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygonEx(This,points_0size,points_0,colors_1size,colors_1,ret_2)

#define IDA3Statics_GradientPolygon(This,points_0,colors_1,ret_2)	\
    (This)->lpVtbl -> GradientPolygon(This,points_0,colors_1,ret_2)

#define IDA3Statics_RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygon(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnimEx(This,inner_0,outer_1,points_2size,points_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientPolygonAnim(This,inner_0,outer_1,points_2,fallOff_3,ret_4)

#define IDA3Statics_GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)	\
    (This)->lpVtbl -> GradientSquare(This,lowerLeft_0,upperLeft_1,upperRight_2,lowerRight_3,ret_4)

#define IDA3Statics_RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquare(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA3Statics_RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> RadialGradientSquareAnim(This,inner_0,outer_1,fallOff_2,ret_3)

#define IDA3Statics_RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPoly(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA3Statics_RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)	\
    (This)->lpVtbl -> RadialGradientRegularPolyAnim(This,inner_0,outer_1,numEdges_2,fallOff_3,ret_4)

#define IDA3Statics_GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontal(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA3Statics_GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)	\
    (This)->lpVtbl -> GradientHorizontalAnim(This,start_0,stop_1,fallOff_2,ret_3)

#define IDA3Statics_HatchHorizontal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchHorizontalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchVertical(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVertical(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchVerticalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchForwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonal(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchBackwardDiagonalAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCross(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCross(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)	\
    (This)->lpVtbl -> HatchDiagonalCrossAnim(This,lineClr_0,spacing_1,ret_2)

#define IDA3Statics_Overlay(This,top_0,bottom_1,ret_2)	\
    (This)->lpVtbl -> Overlay(This,top_0,bottom_1,ret_2)

#define IDA3Statics_OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArrayEx(This,imgs_0size,imgs_0,ret_1)

#define IDA3Statics_OverlayArray(This,imgs_0,ret_1)	\
    (This)->lpVtbl -> OverlayArray(This,imgs_0,ret_1)

#define IDA3Statics_get_AmbientLight(This,ret_0)	\
    (This)->lpVtbl -> get_AmbientLight(This,ret_0)

#define IDA3Statics_get_DirectionalLight(This,ret_0)	\
    (This)->lpVtbl -> get_DirectionalLight(This,ret_0)

#define IDA3Statics_get_PointLight(This,ret_0)	\
    (This)->lpVtbl -> get_PointLight(This,ret_0)

#define IDA3Statics_SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLightAnim(This,fullcone_0,cutoff_1,ret_2)

#define IDA3Statics_SpotLight(This,fullcone_0,cutoff_1,ret_2)	\
    (This)->lpVtbl -> SpotLight(This,fullcone_0,cutoff_1,ret_2)

#define IDA3Statics_get_DefaultLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultLineStyle(This,ret_0)

#define IDA3Statics_get_EmptyLineStyle(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyLineStyle(This,ret_0)

#define IDA3Statics_get_JoinStyleBevel(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleBevel(This,ret_0)

#define IDA3Statics_get_JoinStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleRound(This,ret_0)

#define IDA3Statics_get_JoinStyleMiter(This,ret_0)	\
    (This)->lpVtbl -> get_JoinStyleMiter(This,ret_0)

#define IDA3Statics_get_EndStyleFlat(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleFlat(This,ret_0)

#define IDA3Statics_get_EndStyleSquare(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleSquare(This,ret_0)

#define IDA3Statics_get_EndStyleRound(This,ret_0)	\
    (This)->lpVtbl -> get_EndStyleRound(This,ret_0)

#define IDA3Statics_get_DashStyleSolid(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleSolid(This,ret_0)

#define IDA3Statics_get_DashStyleDashed(This,ret_0)	\
    (This)->lpVtbl -> get_DashStyleDashed(This,ret_0)

#define IDA3Statics_get_DefaultMicrophone(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultMicrophone(This,ret_0)

#define IDA3Statics_get_OpaqueMatte(This,ret_0)	\
    (This)->lpVtbl -> get_OpaqueMatte(This,ret_0)

#define IDA3Statics_get_ClearMatte(This,ret_0)	\
    (This)->lpVtbl -> get_ClearMatte(This,ret_0)

#define IDA3Statics_UnionMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_IntersectMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> IntersectMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_DifferenceMatte(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> DifferenceMatte(This,m1_0,m2_1,ret_2)

#define IDA3Statics_FillMatte(This,p_0,ret_1)	\
    (This)->lpVtbl -> FillMatte(This,p_0,ret_1)

#define IDA3Statics_TextMatte(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> TextMatte(This,str_0,fs_1,ret_2)

#define IDA3Statics_get_EmptyMontage(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyMontage(This,ret_0)

#define IDA3Statics_ImageMontage(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontage(This,im_0,depth_1,ret_2)

#define IDA3Statics_ImageMontageAnim(This,im_0,depth_1,ret_2)	\
    (This)->lpVtbl -> ImageMontageAnim(This,im_0,depth_1,ret_2)

#define IDA3Statics_UnionMontage(This,m1_0,m2_1,ret_2)	\
    (This)->lpVtbl -> UnionMontage(This,m1_0,m2_1,ret_2)

#define IDA3Statics_Concat(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Concat(This,p1_0,p2_1,ret_2)

#define IDA3Statics_ConcatArrayEx(This,paths_0size,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArrayEx(This,paths_0size,paths_0,ret_1)

#define IDA3Statics_ConcatArray(This,paths_0,ret_1)	\
    (This)->lpVtbl -> ConcatArray(This,paths_0,ret_1)

#define IDA3Statics_Line(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> Line(This,p1_0,p2_1,ret_2)

#define IDA3Statics_Ray(This,pt_0,ret_1)	\
    (This)->lpVtbl -> Ray(This,pt_0,ret_1)

#define IDA3Statics_StringPathAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPathAnim(This,str_0,fs_1,ret_2)

#define IDA3Statics_StringPath(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringPath(This,str_0,fs_1,ret_2)

#define IDA3Statics_PolylineEx(This,points_0size,points_0,ret_1)	\
    (This)->lpVtbl -> PolylineEx(This,points_0size,points_0,ret_1)

#define IDA3Statics_Polyline(This,points_0,ret_1)	\
    (This)->lpVtbl -> Polyline(This,points_0,ret_1)

#define IDA3Statics_PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPathEx(This,points_0size,points_0,codes_1size,codes_1,ret_2)

#define IDA3Statics_PolydrawPath(This,points_0,codes_1,ret_2)	\
    (This)->lpVtbl -> PolydrawPath(This,points_0,codes_1,ret_2)

#define IDA3Statics_ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> ArcDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadians(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieRadiansAnim(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)	\
    (This)->lpVtbl -> PieDegrees(This,startAngle_0,endAngle_1,arcWidth_2,arcHeight_3,ret_4)

#define IDA3Statics_Oval(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Oval(This,width_0,height_1,ret_2)

#define IDA3Statics_OvalAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> OvalAnim(This,width_0,height_1,ret_2)

#define IDA3Statics_Rect(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> Rect(This,width_0,height_1,ret_2)

#define IDA3Statics_RectAnim(This,width_0,height_1,ret_2)	\
    (This)->lpVtbl -> RectAnim(This,width_0,height_1,ret_2)

#define IDA3Statics_RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRect(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA3Statics_RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)	\
    (This)->lpVtbl -> RoundRectAnim(This,width_0,height_1,cornerArcWidth_2,cornerArcHeight_3,ret_4)

#define IDA3Statics_CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePathEx(This,points_0size,points_0,knots_1size,knots_1,ret_2)

#define IDA3Statics_CubicBSplinePath(This,points_0,knots_1,ret_2)	\
    (This)->lpVtbl -> CubicBSplinePath(This,points_0,knots_1,ret_2)

#define IDA3Statics_TextPath(This,obsolete1_0,obsolete2_1,ret_2)	\
    (This)->lpVtbl -> TextPath(This,obsolete1_0,obsolete2_1,ret_2)

#define IDA3Statics_get_Silence(This,ret_0)	\
    (This)->lpVtbl -> get_Silence(This,ret_0)

#define IDA3Statics_MixArrayEx(This,snds_0size,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArrayEx(This,snds_0size,snds_0,ret_1)

#define IDA3Statics_MixArray(This,snds_0,ret_1)	\
    (This)->lpVtbl -> MixArray(This,snds_0,ret_1)

#define IDA3Statics_get_SinSynth(This,ret_0)	\
    (This)->lpVtbl -> get_SinSynth(This,ret_0)

#define IDA3Statics_get_DefaultFont(This,ret_0)	\
    (This)->lpVtbl -> get_DefaultFont(This,ret_0)

#define IDA3Statics_FontAnim(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> FontAnim(This,str_0,size_1,col_2,ret_3)

#define IDA3Statics_Font(This,str_0,size_1,col_2,ret_3)	\
    (This)->lpVtbl -> Font(This,str_0,size_1,col_2,ret_3)

#define IDA3Statics_StringImageAnim(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImageAnim(This,str_0,fs_1,ret_2)

#define IDA3Statics_StringImage(This,str_0,fs_1,ret_2)	\
    (This)->lpVtbl -> StringImage(This,str_0,fs_1,ret_2)

#define IDA3Statics_TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImageAnim(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)	\
    (This)->lpVtbl -> TextImage(This,obsoleted1_0,obsoleted2_1,ret_2)

#define IDA3Statics_get_XVector2(This,ret_0)	\
    (This)->lpVtbl -> get_XVector2(This,ret_0)

#define IDA3Statics_get_YVector2(This,ret_0)	\
    (This)->lpVtbl -> get_YVector2(This,ret_0)

#define IDA3Statics_get_ZeroVector2(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector2(This,ret_0)

#define IDA3Statics_get_Origin2(This,ret_0)	\
    (This)->lpVtbl -> get_Origin2(This,ret_0)

#define IDA3Statics_Vector2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Vector2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Vector2(This,x_0,y_1,ret_2)

#define IDA3Statics_Point2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Point2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Point2(This,x_0,y_1,ret_2)

#define IDA3Statics_Vector2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Vector2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2Polar(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Vector2PolarDegrees(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Vector2PolarDegrees(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Point2PolarAnim(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2PolarAnim(This,theta_0,radius_1,ret_2)

#define IDA3Statics_Point2Polar(This,theta_0,radius_1,ret_2)	\
    (This)->lpVtbl -> Point2Polar(This,theta_0,radius_1,ret_2)

#define IDA3Statics_DotVector2(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector2(This,v_0,u_1,ret_2)

#define IDA3Statics_NegVector2(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector2(This,v_0,ret_1)

#define IDA3Statics_SubVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector2(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddVector2(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector2(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint2Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint2Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint2(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint2(This,p1_0,p2_1,ret_2)

#define IDA3Statics_DistancePoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint2(This,p_0,q_1,ret_2)

#define IDA3Statics_DistanceSquaredPoint2(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint2(This,p_0,q_1,ret_2)

#define IDA3Statics_get_XVector3(This,ret_0)	\
    (This)->lpVtbl -> get_XVector3(This,ret_0)

#define IDA3Statics_get_YVector3(This,ret_0)	\
    (This)->lpVtbl -> get_YVector3(This,ret_0)

#define IDA3Statics_get_ZVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZVector3(This,ret_0)

#define IDA3Statics_get_ZeroVector3(This,ret_0)	\
    (This)->lpVtbl -> get_ZeroVector3(This,ret_0)

#define IDA3Statics_get_Origin3(This,ret_0)	\
    (This)->lpVtbl -> get_Origin3(This,ret_0)

#define IDA3Statics_Vector3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Vector3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Vector3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Point3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Point3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Point3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3SphericalAnim(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA3Statics_Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Vector3Spherical(This,xyAngle_0,yzAngle_1,radius_2,ret_3)

#define IDA3Statics_Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3SphericalAnim(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA3Statics_Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)	\
    (This)->lpVtbl -> Point3Spherical(This,zxAngle_0,xyAngle_1,radius_2,ret_3)

#define IDA3Statics_DotVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> DotVector3(This,v_0,u_1,ret_2)

#define IDA3Statics_CrossVector3(This,v_0,u_1,ret_2)	\
    (This)->lpVtbl -> CrossVector3(This,v_0,u_1,ret_2)

#define IDA3Statics_NegVector3(This,v_0,ret_1)	\
    (This)->lpVtbl -> NegVector3(This,v_0,ret_1)

#define IDA3Statics_SubVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> SubVector3(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddVector3(This,v1_0,v2_1,ret_2)	\
    (This)->lpVtbl -> AddVector3(This,v1_0,v2_1,ret_2)

#define IDA3Statics_AddPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> AddPoint3Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint3Vector(This,p_0,v_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3Vector(This,p_0,v_1,ret_2)

#define IDA3Statics_SubPoint3(This,p1_0,p2_1,ret_2)	\
    (This)->lpVtbl -> SubPoint3(This,p1_0,p2_1,ret_2)

#define IDA3Statics_DistancePoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistancePoint3(This,p_0,q_1,ret_2)

#define IDA3Statics_DistanceSquaredPoint3(This,p_0,q_1,ret_2)	\
    (This)->lpVtbl -> DistanceSquaredPoint3(This,p_0,q_1,ret_2)

#define IDA3Statics_get_IdentityTransform3(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform3(This,ret_0)

#define IDA3Statics_Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Anim(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)	\
    (This)->lpVtbl -> Translate3Rate(This,tx_0,ty_1,tz_2,ret_3)

#define IDA3Statics_Translate3Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate3Vector(This,delta_0,ret_1)

#define IDA3Statics_Translate3Point(This,new_origin_0,ret_1)	\
    (This)->lpVtbl -> Translate3Point(This,new_origin_0,ret_1)

#define IDA3Statics_Scale3Anim(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Anim(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3Rate(This,x_0,y_1,z_2,ret_3)	\
    (This)->lpVtbl -> Scale3Rate(This,x_0,y_1,z_2,ret_3)

#define IDA3Statics_Scale3Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale3Vector(This,scale_vec_0,ret_1)

#define IDA3Statics_Scale3UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformAnim(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale3Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3Uniform(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale3UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale3UniformRate(This,uniform_scale_0,ret_1)

#define IDA3Statics_Rotate3Anim(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Anim(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3Rate(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Rate(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3Degrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3Degrees(This,axis_0,angle_1,ret_2)

#define IDA3Statics_Rotate3RateDegrees(This,axis_0,angle_1,ret_2)	\
    (This)->lpVtbl -> Rotate3RateDegrees(This,axis_0,angle_1,ret_2)

#define IDA3Statics_XShear3Anim(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Anim(This,a_0,b_1,ret_2)

#define IDA3Statics_XShear3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3(This,a_0,b_1,ret_2)

#define IDA3Statics_XShear3Rate(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> XShear3Rate(This,a_0,b_1,ret_2)

#define IDA3Statics_YShear3Anim(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Anim(This,c_0,d_1,ret_2)

#define IDA3Statics_YShear3(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3(This,c_0,d_1,ret_2)

#define IDA3Statics_YShear3Rate(This,c_0,d_1,ret_2)	\
    (This)->lpVtbl -> YShear3Rate(This,c_0,d_1,ret_2)

#define IDA3Statics_ZShear3Anim(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Anim(This,e_0,f_1,ret_2)

#define IDA3Statics_ZShear3(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3(This,e_0,f_1,ret_2)

#define IDA3Statics_ZShear3Rate(This,e_0,f_1,ret_2)	\
    (This)->lpVtbl -> ZShear3Rate(This,e_0,f_1,ret_2)

#define IDA3Statics_Transform4x4AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4AnimEx(This,m_0size,m_0,ret_1)

#define IDA3Statics_Transform4x4Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform4x4Anim(This,m_0,ret_1)

#define IDA3Statics_Compose3(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose3(This,a_0,b_1,ret_2)

#define IDA3Statics_Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA3Statics_Compose3Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose3Array(This,xfs_0,ret_1)

#define IDA3Statics_LookAtFrom(This,to_0,from_1,up_2,ret_3)	\
    (This)->lpVtbl -> LookAtFrom(This,to_0,from_1,up_2,ret_3)

#define IDA3Statics_get_IdentityTransform2(This,ret_0)	\
    (This)->lpVtbl -> get_IdentityTransform2(This,ret_0)

#define IDA3Statics_Translate2Anim(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Anim(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2Rate(This,Tx_0,Ty_1,ret_2)	\
    (This)->lpVtbl -> Translate2Rate(This,Tx_0,Ty_1,ret_2)

#define IDA3Statics_Translate2Vector(This,delta_0,ret_1)	\
    (This)->lpVtbl -> Translate2Vector(This,delta_0,ret_1)

#define IDA3Statics_Translate2Point(This,pos_0,ret_1)	\
    (This)->lpVtbl -> Translate2Point(This,pos_0,ret_1)

#define IDA3Statics_Scale2Anim(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Anim(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2Rate(This,x_0,y_1,ret_2)	\
    (This)->lpVtbl -> Scale2Rate(This,x_0,y_1,ret_2)

#define IDA3Statics_Scale2Vector2(This,obsoleteMethod_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector2(This,obsoleteMethod_0,ret_1)

#define IDA3Statics_Scale2Vector(This,scale_vec_0,ret_1)	\
    (This)->lpVtbl -> Scale2Vector(This,scale_vec_0,ret_1)

#define IDA3Statics_Scale2UniformAnim(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformAnim(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale2Uniform(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2Uniform(This,uniform_scale_0,ret_1)

#define IDA3Statics_Scale2UniformRate(This,uniform_scale_0,ret_1)	\
    (This)->lpVtbl -> Scale2UniformRate(This,uniform_scale_0,ret_1)

#define IDA3Statics_Rotate2Anim(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Anim(This,angle_0,ret_1)

#define IDA3Statics_Rotate2(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2(This,angle_0,ret_1)

#define IDA3Statics_Rotate2Rate(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Rate(This,angle_0,ret_1)

#define IDA3Statics_Rotate2Degrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2Degrees(This,angle_0,ret_1)

#define IDA3Statics_Rotate2RateDegrees(This,angle_0,ret_1)	\
    (This)->lpVtbl -> Rotate2RateDegrees(This,angle_0,ret_1)

#define IDA3Statics_XShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Anim(This,arg_0,ret_1)

#define IDA3Statics_XShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2(This,arg_0,ret_1)

#define IDA3Statics_XShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> XShear2Rate(This,arg_0,ret_1)

#define IDA3Statics_YShear2Anim(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Anim(This,arg_0,ret_1)

#define IDA3Statics_YShear2(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2(This,arg_0,ret_1)

#define IDA3Statics_YShear2Rate(This,arg_0,ret_1)	\
    (This)->lpVtbl -> YShear2Rate(This,arg_0,ret_1)

#define IDA3Statics_Transform3x2AnimEx(This,m_0size,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2AnimEx(This,m_0size,m_0,ret_1)

#define IDA3Statics_Transform3x2Anim(This,m_0,ret_1)	\
    (This)->lpVtbl -> Transform3x2Anim(This,m_0,ret_1)

#define IDA3Statics_Compose2(This,a_0,b_1,ret_2)	\
    (This)->lpVtbl -> Compose2(This,a_0,b_1,ret_2)

#define IDA3Statics_Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2ArrayEx(This,xfs_0size,xfs_0,ret_1)

#define IDA3Statics_Compose2Array(This,xfs_0,ret_1)	\
    (This)->lpVtbl -> Compose2Array(This,xfs_0,ret_1)

#define IDA3Statics_Tuple(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Tuple(This,obsolete1,obsolete2)

#define IDA3Statics_Array(This,obsolete1,obsolete2)	\
    (This)->lpVtbl -> Array(This,obsolete1,obsolete2)

#define IDA3Statics_get_AreBlockingImportsComplete(This,bComplete)	\
    (This)->lpVtbl -> get_AreBlockingImportsComplete(This,bComplete)


#define IDA3Statics_ImportDirect3DRMVisual(This,visual,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisual(This,visual,bvr)

#define IDA3Statics_ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransformEx(This,theXf,numInputs,inputs,evaluator,ppResult)

#define IDA3Statics_ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)	\
    (This)->lpVtbl -> ApplyDXTransform(This,varXf,inputs,evaluator,ppResult)

#define IDA3Statics_ModifiableNumber(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableNumber(This,initVal,ppResult)

#define IDA3Statics_ModifiableString(This,initVal,ppResult)	\
    (This)->lpVtbl -> ModifiableString(This,initVal,ppResult)

#define IDA3Statics_DAArrayEx2(This,s,pBvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArrayEx2(This,s,pBvrs,dwFlags,bvr)

#define IDA3Statics_DAArray2(This,bvrs,dwFlags,bvr)	\
    (This)->lpVtbl -> DAArray2(This,bvrs,dwFlags,bvr)

#define IDA3Statics_ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)	\
    (This)->lpVtbl -> ImportGeometryWrapped(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,ppGeometry)

#define IDA3Statics_ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)	\
    (This)->lpVtbl -> ImportGeometryWrappedAsync(This,url,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,pGeoStandIn,ppResult)

#define IDA3Statics_ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)	\
    (This)->lpVtbl -> ImportDirect3DRMVisualWrapped(This,visual,wrapType,originX,originY,originZ,zAxisX,zAxisY,zAxisZ,yAxisX,yAxisY,yAxisZ,texOriginX,texOriginY,texScaleX,texScaleY,flags,bvr)

#define IDA3Statics_UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)	\
    (This)->lpVtbl -> UntilNotifyScript(This,b0_0,event_1,scriptlet_2,ret_3)

#define IDA3Statics_get_ViewFrameRate(This,ret_0)	\
    (This)->lpVtbl -> get_ViewFrameRate(This,ret_0)

#define IDA3Statics_UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArrayEx(This,mtgs_0size,mtgs_0,ret_1)

#define IDA3Statics_UnionMontageArray(This,mtgs_0,ret_1)	\
    (This)->lpVtbl -> UnionMontageArray(This,mtgs_0,ret_1)

#define IDA3Statics_get_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> get_ModifiableBehaviorFlags(This,dwFlags)

#define IDA3Statics_put_ModifiableBehaviorFlags(This,dwFlags)	\
    (This)->lpVtbl -> put_ModifiableBehaviorFlags(This,dwFlags)

#define IDA3Statics_get_EmptyColor(This,ret_0)	\
    (This)->lpVtbl -> get_EmptyColor(This,ret_0)


#define IDA3Statics_ImportSoundStream(This,url,ppResult)	\
    (This)->lpVtbl -> ImportSoundStream(This,url,ppResult)

#define IDA3Statics_ImportMovieStream(This,url,ppResult)	\
    (This)->lpVtbl -> ImportMovieStream(This,url,ppResult)

#define IDA3Statics_SequenceArrayEx(This,sz,bvrs_0,ret_1)	\
    (This)->lpVtbl -> SequenceArrayEx(This,sz,bvrs_0,ret_1)

#define IDA3Statics_SequenceArray(This,bvrs_0,ret_1)	\
    (This)->lpVtbl -> SequenceArray(This,bvrs_0,ret_1)

#define IDA3Statics_get_ViewTimeDelta(This,ret_0)	\
    (This)->lpVtbl -> get_ViewTimeDelta(This,ret_0)

#define IDA3Statics_TriMesh(This,nTriangles,positions,normals,UVs,indices,result)	\
    (This)->lpVtbl -> TriMesh(This,nTriangles,positions,normals,UVs,indices,result)

#define IDA3Statics_TriMeshEx(This,nTriangles,nPositions,positions,nNormals,normals,nUVs,UVs,nIndices,indices,result)	\
    (This)->lpVtbl -> TriMeshEx(This,nTriangles,nPositions,positions,nNormals,normals,nUVs,UVs,nIndices,indices,result)

#define IDA3Statics_RadialGradientMulticolor(This,offsets,colors,result)	\
    (This)->lpVtbl -> RadialGradientMulticolor(This,offsets,colors,result)

#define IDA3Statics_RadialGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)	\
    (This)->lpVtbl -> RadialGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)

#define IDA3Statics_LinearGradientMulticolor(This,offsets,colors,result)	\
    (This)->lpVtbl -> LinearGradientMulticolor(This,offsets,colors,result)

#define IDA3Statics_LinearGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)	\
    (This)->lpVtbl -> LinearGradientMulticolorEx(This,nOffsets,offsets,nColors,colors,result)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3Statics_ImportSoundStream_Proxy( 
    IDA3Statics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA3Statics_ImportSoundStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_ImportMovieStream_Proxy( 
    IDA3Statics * This,
    /* [in] */ BSTR url,
    /* [retval][out] */ IDAImportationResult **ppResult);


void __RPC_STUB IDA3Statics_ImportMovieStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_SequenceArrayEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ LONG sz,
    /* [size_is][in] */ IDABehavior *bvrs_0[  ],
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDA3Statics_SequenceArrayEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_SequenceArray_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT bvrs_0,
    /* [retval][out] */ IDABehavior **ret_1);


void __RPC_STUB IDA3Statics_SequenceArray_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDA3Statics_get_ViewTimeDelta_Proxy( 
    IDA3Statics * This,
    /* [retval][out] */ IDANumber **ret_0);


void __RPC_STUB IDA3Statics_get_ViewTimeDelta_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_TriMesh_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nTriangles,
    /* [in] */ VARIANT positions,
    /* [in] */ VARIANT normals,
    /* [in] */ VARIANT UVs,
    /* [in] */ VARIANT indices,
    /* [retval][out] */ IDAGeometry **result);


void __RPC_STUB IDA3Statics_TriMesh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_TriMeshEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nTriangles,
    /* [in] */ int nPositions,
    /* [size_is][in] */ float positions[  ],
    /* [in] */ int nNormals,
    /* [size_is][in] */ float normals[  ],
    /* [in] */ int nUVs,
    /* [size_is][in] */ float UVs[  ],
    /* [in] */ int nIndices,
    /* [size_is][in] */ int indices[  ],
    /* [retval][out] */ IDAGeometry **result);


void __RPC_STUB IDA3Statics_TriMeshEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_RadialGradientMulticolor_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT offsets,
    /* [in] */ VARIANT colors,
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_RadialGradientMulticolor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_RadialGradientMulticolorEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nOffsets,
    /* [size_is][in] */ IDANumber *offsets[  ],
    /* [in] */ int nColors,
    /* [size_is][in] */ IDAColor *colors[  ],
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_RadialGradientMulticolorEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3Statics_LinearGradientMulticolor_Proxy( 
    IDA3Statics * This,
    /* [in] */ VARIANT offsets,
    /* [in] */ VARIANT colors,
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_LinearGradientMulticolor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [restricted] */ HRESULT STDMETHODCALLTYPE IDA3Statics_LinearGradientMulticolorEx_Proxy( 
    IDA3Statics * This,
    /* [in] */ int nOffsets,
    /* [size_is][in] */ IDANumber *offsets[  ],
    /* [in] */ int nColors,
    /* [size_is][in] */ IDAColor *colors[  ],
    /* [retval][out] */ IDAImage **result);


void __RPC_STUB IDA3Statics_LinearGradientMulticolorEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3Statics_INTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DAStatics;

#ifdef __cplusplus

class DECLSPEC_UUID("542FB453-5003-11cf-92A2-00AA00B8A733")
DAStatics;
#endif

#ifndef __IDAViewerControl_INTERFACE_DEFINED__
#define __IDAViewerControl_INTERFACE_DEFINED__

/* interface IDAViewerControl */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IDAViewerControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("0E41257B-812D-11D0-9B4A-00C04FC2F51D")
    IDAViewerControl : public IDispatch
    {
    public:
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_UpdateInterval( 
            /* [retval][out] */ double *pVal) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_UpdateInterval( 
            /* [in] */ double newVal) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_View( 
            /* [retval][out] */ IDAView **ppView) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_View( 
            /* [in] */ IDAView *pView) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Image( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Image( 
            /* [in] */ IDAImage *pImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_BackgroundImage( 
            /* [retval][out] */ IDAImage **ppImage) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_BackgroundImage( 
            /* [in] */ IDAImage *pImage) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_Sound( 
            /* [retval][out] */ IDASound **ppSound) = 0;
        
        virtual /* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE put_Sound( 
            /* [in] */ IDASound *pSound) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_PixelLibrary( 
            /* [retval][out] */ IDAStatics **ppStatics) = 0;
        
        virtual /* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE get_MeterLibrary( 
            /* [retval][out] */ IDAStatics **ppStatics) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE AddBehaviorToRun( 
            /* [in] */ IDABehavior *pBehavior) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE Start( void) = 0;
        
        virtual /* [helpstring][propget][hidden] */ HRESULT STDMETHODCALLTYPE get_InputImage( 
            /* [retval][out] */ IDAImage **pVal) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_OpaqueForHitDetect( 
            /* [retval][out] */ VARIANT_BOOL *b) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_OpaqueForHitDetect( 
            /* [in] */ VARIANT_BOOL b) = 0;
        
        virtual /* [propget] */ HRESULT STDMETHODCALLTYPE get_TimerSource( 
            /* [retval][out] */ DA_TIMER_SOURCE *ts) = 0;
        
        virtual /* [propput] */ HRESULT STDMETHODCALLTYPE put_TimerSource( 
            /* [in] */ DA_TIMER_SOURCE ts) = 0;
        
        virtual /* [helpstring] */ HRESULT STDMETHODCALLTYPE RegisterErrorHandler( 
            /* [in] */ BSTR scriptlet) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDAViewerControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAViewerControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAViewerControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAViewerControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAViewerControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAViewerControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAViewerControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDAViewerControl * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDAViewerControl * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDAViewerControl * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDAViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDAViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDAViewerControl * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDAViewerControl * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDAViewerControl * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDAViewerControl * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDAViewerControl * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDAViewerControl * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDAViewerControl * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDAViewerControl * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDAViewerControl * This,
            /* [in] */ BSTR scriptlet);
        
        END_INTERFACE
    } IDAViewerControlVtbl;

    interface IDAViewerControl
    {
        CONST_VTBL struct IDAViewerControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAViewerControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAViewerControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAViewerControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAViewerControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAViewerControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAViewerControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAViewerControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAViewerControl_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDAViewerControl_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDAViewerControl_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDAViewerControl_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDAViewerControl_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAViewerControl_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDAViewerControl_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDAViewerControl_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDAViewerControl_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDAViewerControl_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDAViewerControl_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDAViewerControl_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDAViewerControl_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDAViewerControl_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDAViewerControl_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDAViewerControl_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDAViewerControl_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDAViewerControl_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDAViewerControl_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDAViewerControl_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_UpdateInterval_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ double *pVal);


void __RPC_STUB IDAViewerControl_get_UpdateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_UpdateInterval_Proxy( 
    IDAViewerControl * This,
    /* [in] */ double newVal);


void __RPC_STUB IDAViewerControl_put_UpdateInterval_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_View_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAView **ppView);


void __RPC_STUB IDAViewerControl_get_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_View_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAView *pView);


void __RPC_STUB IDAViewerControl_put_View_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_Image_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAViewerControl_get_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_Image_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAImage *pImage);


void __RPC_STUB IDAViewerControl_put_Image_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_BackgroundImage_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **ppImage);


void __RPC_STUB IDAViewerControl_get_BackgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_BackgroundImage_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDAImage *pImage);


void __RPC_STUB IDAViewerControl_put_BackgroundImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_Sound_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDASound **ppSound);


void __RPC_STUB IDAViewerControl_get_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_Sound_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDASound *pSound);


void __RPC_STUB IDAViewerControl_put_Sound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_PixelLibrary_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAStatics **ppStatics);


void __RPC_STUB IDAViewerControl_get_PixelLibrary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_MeterLibrary_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAStatics **ppStatics);


void __RPC_STUB IDAViewerControl_get_MeterLibrary_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_AddBehaviorToRun_Proxy( 
    IDAViewerControl * This,
    /* [in] */ IDABehavior *pBehavior);


void __RPC_STUB IDAViewerControl_AddBehaviorToRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_Start_Proxy( 
    IDAViewerControl * This);


void __RPC_STUB IDAViewerControl_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring][propget][hidden] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_InputImage_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ IDAImage **pVal);


void __RPC_STUB IDAViewerControl_get_InputImage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_OpaqueForHitDetect_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ VARIANT_BOOL *b);


void __RPC_STUB IDAViewerControl_get_OpaqueForHitDetect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_OpaqueForHitDetect_Proxy( 
    IDAViewerControl * This,
    /* [in] */ VARIANT_BOOL b);


void __RPC_STUB IDAViewerControl_put_OpaqueForHitDetect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propget] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_get_TimerSource_Proxy( 
    IDAViewerControl * This,
    /* [retval][out] */ DA_TIMER_SOURCE *ts);


void __RPC_STUB IDAViewerControl_get_TimerSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [propput] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_put_TimerSource_Proxy( 
    IDAViewerControl * This,
    /* [in] */ DA_TIMER_SOURCE ts);


void __RPC_STUB IDAViewerControl_put_TimerSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


/* [helpstring] */ HRESULT STDMETHODCALLTYPE IDAViewerControl_RegisterErrorHandler_Proxy( 
    IDAViewerControl * This,
    /* [in] */ BSTR scriptlet);


void __RPC_STUB IDAViewerControl_RegisterErrorHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDAViewerControl_INTERFACE_DEFINED__ */


#ifndef __IDAViewerControlWindowed_INTERFACE_DEFINED__
#define __IDAViewerControlWindowed_INTERFACE_DEFINED__

/* interface IDAViewerControlWindowed */
/* [unique][helpstring][dual][uuid][object] */ 


EXTERN_C const IID IID_IDAViewerControlWindowed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("BA8B033E-1E91-11d1-8809-00C04FC29D46")
    IDAViewerControlWindowed : public IDAViewerControl
    {
    public:
    };
    
#else 	/* C style interface */

    typedef struct IDAViewerControlWindowedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDAViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDAViewerControlWindowed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDAViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDAViewerControlWindowed * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDAViewerControlWindowed * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDAViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDAViewerControlWindowed * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDAViewerControlWindowed * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDAViewerControlWindowed * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDAViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDAViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDAViewerControlWindowed * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDAViewerControlWindowed * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDAViewerControlWindowed * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDAViewerControlWindowed * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDAViewerControlWindowed * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDAViewerControlWindowed * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDAViewerControlWindowed * This,
            /* [in] */ BSTR scriptlet);
        
        END_INTERFACE
    } IDAViewerControlWindowedVtbl;

    interface IDAViewerControlWindowed
    {
        CONST_VTBL struct IDAViewerControlWindowedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDAViewerControlWindowed_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDAViewerControlWindowed_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDAViewerControlWindowed_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDAViewerControlWindowed_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDAViewerControlWindowed_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDAViewerControlWindowed_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDAViewerControlWindowed_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDAViewerControlWindowed_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDAViewerControlWindowed_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDAViewerControlWindowed_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDAViewerControlWindowed_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDAViewerControlWindowed_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDAViewerControlWindowed_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDAViewerControlWindowed_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDAViewerControlWindowed_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDAViewerControlWindowed_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDAViewerControlWindowed_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDAViewerControlWindowed_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDAViewerControlWindowed_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDAViewerControlWindowed_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDAViewerControlWindowed_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDAViewerControlWindowed_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDAViewerControlWindowed_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDAViewerControlWindowed_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDAViewerControlWindowed_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDAViewerControlWindowed_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDAViewerControlWindowed_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)


#endif /* COBJMACROS */


#endif 	/* C style interface */




#endif 	/* __IDAViewerControlWindowed_INTERFACE_DEFINED__ */


#ifndef __IDA2ViewerControl_INTERFACE_DEFINED__
#define __IDA2ViewerControl_INTERFACE_DEFINED__

/* interface IDA2ViewerControl */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IDA2ViewerControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("F3E1B522-D8A6-11d1-9BE5-00C04FC2F51D")
    IDA2ViewerControl : public IDAViewerControl
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPreference( 
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreference( 
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ViewerControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2ViewerControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2ViewerControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2ViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2ViewerControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2ViewerControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2ViewerControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2ViewerControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDA2ViewerControl * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDA2ViewerControl * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDA2ViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDA2ViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDA2ViewerControl * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDA2ViewerControl * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDA2ViewerControl * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDA2ViewerControl * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDA2ViewerControl * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDA2ViewerControl * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDA2ViewerControl * This,
            /* [in] */ BSTR scriptlet);
        
        HRESULT ( STDMETHODCALLTYPE *SetPreference )( 
            IDA2ViewerControl * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDA2ViewerControl * This,
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal);
        
        END_INTERFACE
    } IDA2ViewerControlVtbl;

    interface IDA2ViewerControl
    {
        CONST_VTBL struct IDA2ViewerControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2ViewerControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2ViewerControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2ViewerControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2ViewerControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2ViewerControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2ViewerControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2ViewerControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2ViewerControl_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDA2ViewerControl_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDA2ViewerControl_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDA2ViewerControl_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDA2ViewerControl_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDA2ViewerControl_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDA2ViewerControl_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDA2ViewerControl_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDA2ViewerControl_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDA2ViewerControl_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDA2ViewerControl_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDA2ViewerControl_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDA2ViewerControl_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDA2ViewerControl_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDA2ViewerControl_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDA2ViewerControl_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDA2ViewerControl_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDA2ViewerControl_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDA2ViewerControl_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDA2ViewerControl_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)


#define IDA2ViewerControl_SetPreference(This,pref,val)	\
    (This)->lpVtbl -> SetPreference(This,pref,val)

#define IDA2ViewerControl_GetPreference(This,pref,pVal)	\
    (This)->lpVtbl -> GetPreference(This,pref,pVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2ViewerControl_SetPreference_Proxy( 
    IDA2ViewerControl * This,
    /* [in] */ BSTR pref,
    /* [in] */ VARIANT val);


void __RPC_STUB IDA2ViewerControl_SetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2ViewerControl_GetPreference_Proxy( 
    IDA2ViewerControl * This,
    /* [in] */ BSTR pref,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IDA2ViewerControl_GetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2ViewerControl_INTERFACE_DEFINED__ */


#ifndef __IDA2ViewerControlWindowed_INTERFACE_DEFINED__
#define __IDA2ViewerControlWindowed_INTERFACE_DEFINED__

/* interface IDA2ViewerControlWindowed */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IDA2ViewerControlWindowed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("A3034056-EC1C-11d1-9BE8-00C04FC2F51D")
    IDA2ViewerControlWindowed : public IDAViewerControlWindowed
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE SetPreference( 
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetPreference( 
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA2ViewerControlWindowedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA2ViewerControlWindowed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA2ViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA2ViewerControlWindowed * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDA2ViewerControlWindowed * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDA2ViewerControlWindowed * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ BSTR scriptlet);
        
        HRESULT ( STDMETHODCALLTYPE *SetPreference )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDA2ViewerControlWindowed * This,
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal);
        
        END_INTERFACE
    } IDA2ViewerControlWindowedVtbl;

    interface IDA2ViewerControlWindowed
    {
        CONST_VTBL struct IDA2ViewerControlWindowedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA2ViewerControlWindowed_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA2ViewerControlWindowed_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA2ViewerControlWindowed_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA2ViewerControlWindowed_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA2ViewerControlWindowed_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA2ViewerControlWindowed_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA2ViewerControlWindowed_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA2ViewerControlWindowed_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDA2ViewerControlWindowed_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDA2ViewerControlWindowed_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDA2ViewerControlWindowed_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDA2ViewerControlWindowed_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDA2ViewerControlWindowed_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDA2ViewerControlWindowed_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDA2ViewerControlWindowed_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDA2ViewerControlWindowed_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDA2ViewerControlWindowed_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDA2ViewerControlWindowed_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDA2ViewerControlWindowed_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDA2ViewerControlWindowed_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDA2ViewerControlWindowed_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDA2ViewerControlWindowed_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDA2ViewerControlWindowed_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDA2ViewerControlWindowed_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDA2ViewerControlWindowed_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDA2ViewerControlWindowed_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDA2ViewerControlWindowed_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)



#define IDA2ViewerControlWindowed_SetPreference(This,pref,val)	\
    (This)->lpVtbl -> SetPreference(This,pref,val)

#define IDA2ViewerControlWindowed_GetPreference(This,pref,pVal)	\
    (This)->lpVtbl -> GetPreference(This,pref,pVal)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA2ViewerControlWindowed_SetPreference_Proxy( 
    IDA2ViewerControlWindowed * This,
    /* [in] */ BSTR pref,
    /* [in] */ VARIANT val);


void __RPC_STUB IDA2ViewerControlWindowed_SetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA2ViewerControlWindowed_GetPreference_Proxy( 
    IDA2ViewerControlWindowed * This,
    /* [in] */ BSTR pref,
    /* [retval][out] */ VARIANT *pVal);


void __RPC_STUB IDA2ViewerControlWindowed_GetPreference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA2ViewerControlWindowed_INTERFACE_DEFINED__ */


#ifndef __IDA3ViewerControl_INTERFACE_DEFINED__
#define __IDA3ViewerControl_INTERFACE_DEFINED__

/* interface IDA3ViewerControl */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IDA3ViewerControl;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09509866-79AA-11d2-8BF5-00C04FC2F51D")
    IDA3ViewerControl : public IDA2ViewerControl
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tick( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ViewerControlVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3ViewerControl * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3ViewerControl * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3ViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3ViewerControl * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3ViewerControl * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3ViewerControl * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3ViewerControl * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDA3ViewerControl * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDA3ViewerControl * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDA3ViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDA3ViewerControl * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDA3ViewerControl * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDA3ViewerControl * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDA3ViewerControl * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDA3ViewerControl * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDA3ViewerControl * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDA3ViewerControl * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDA3ViewerControl * This,
            /* [in] */ BSTR scriptlet);
        
        HRESULT ( STDMETHODCALLTYPE *SetPreference )( 
            IDA3ViewerControl * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDA3ViewerControl * This,
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IDA3ViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IDA3ViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IDA3ViewerControl * This);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA3ViewerControl * This);
        
        END_INTERFACE
    } IDA3ViewerControlVtbl;

    interface IDA3ViewerControl
    {
        CONST_VTBL struct IDA3ViewerControlVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3ViewerControl_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3ViewerControl_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3ViewerControl_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3ViewerControl_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3ViewerControl_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3ViewerControl_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3ViewerControl_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3ViewerControl_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDA3ViewerControl_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDA3ViewerControl_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDA3ViewerControl_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDA3ViewerControl_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDA3ViewerControl_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDA3ViewerControl_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDA3ViewerControl_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDA3ViewerControl_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDA3ViewerControl_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDA3ViewerControl_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDA3ViewerControl_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDA3ViewerControl_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDA3ViewerControl_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDA3ViewerControl_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDA3ViewerControl_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDA3ViewerControl_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDA3ViewerControl_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDA3ViewerControl_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDA3ViewerControl_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)


#define IDA3ViewerControl_SetPreference(This,pref,val)	\
    (This)->lpVtbl -> SetPreference(This,pref,val)

#define IDA3ViewerControl_GetPreference(This,pref,pVal)	\
    (This)->lpVtbl -> GetPreference(This,pref,pVal)


#define IDA3ViewerControl_Stop(This)	\
    (This)->lpVtbl -> Stop(This)

#define IDA3ViewerControl_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define IDA3ViewerControl_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#define IDA3ViewerControl_Tick(This)	\
    (This)->lpVtbl -> Tick(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3ViewerControl_Stop_Proxy( 
    IDA3ViewerControl * This);


void __RPC_STUB IDA3ViewerControl_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControl_Pause_Proxy( 
    IDA3ViewerControl * This);


void __RPC_STUB IDA3ViewerControl_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControl_Resume_Proxy( 
    IDA3ViewerControl * This);


void __RPC_STUB IDA3ViewerControl_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControl_Tick_Proxy( 
    IDA3ViewerControl * This);


void __RPC_STUB IDA3ViewerControl_Tick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3ViewerControl_INTERFACE_DEFINED__ */


#ifndef __IDA3ViewerControlWindowed_INTERFACE_DEFINED__
#define __IDA3ViewerControlWindowed_INTERFACE_DEFINED__

/* interface IDA3ViewerControlWindowed */
/* [unique][dual][uuid][object] */ 


EXTERN_C const IID IID_IDA3ViewerControlWindowed;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("09509867-79AA-11d2-8BF5-00C04FC2F51D")
    IDA3ViewerControlWindowed : public IDA2ViewerControlWindowed
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE Stop( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Pause( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Resume( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Tick( void) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDA3ViewerControlWindowedVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDA3ViewerControlWindowed * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDA3ViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            IDA3ViewerControlWindowed * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_UpdateInterval )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ double *pVal);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_UpdateInterval )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ double newVal);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_View )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAView **ppView);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_View )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ IDAView *pView);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Image )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Image )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_BackgroundImage )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **ppImage);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_BackgroundImage )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ IDAImage *pImage);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_Sound )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDASound **ppSound);
        
        /* [helpstring][propput] */ HRESULT ( STDMETHODCALLTYPE *put_Sound )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ IDASound *pSound);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_PixelLibrary )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring][propget] */ HRESULT ( STDMETHODCALLTYPE *get_MeterLibrary )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAStatics **ppStatics);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *AddBehaviorToRun )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ IDABehavior *pBehavior);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *Start )( 
            IDA3ViewerControlWindowed * This);
        
        /* [helpstring][propget][hidden] */ HRESULT ( STDMETHODCALLTYPE *get_InputImage )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ IDAImage **pVal);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_OpaqueForHitDetect )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ VARIANT_BOOL *b);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_OpaqueForHitDetect )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ VARIANT_BOOL b);
        
        /* [propget] */ HRESULT ( STDMETHODCALLTYPE *get_TimerSource )( 
            IDA3ViewerControlWindowed * This,
            /* [retval][out] */ DA_TIMER_SOURCE *ts);
        
        /* [propput] */ HRESULT ( STDMETHODCALLTYPE *put_TimerSource )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ DA_TIMER_SOURCE ts);
        
        /* [helpstring] */ HRESULT ( STDMETHODCALLTYPE *RegisterErrorHandler )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ BSTR scriptlet);
        
        HRESULT ( STDMETHODCALLTYPE *SetPreference )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ BSTR pref,
            /* [in] */ VARIANT val);
        
        HRESULT ( STDMETHODCALLTYPE *GetPreference )( 
            IDA3ViewerControlWindowed * This,
            /* [in] */ BSTR pref,
            /* [retval][out] */ VARIANT *pVal);
        
        HRESULT ( STDMETHODCALLTYPE *Stop )( 
            IDA3ViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *Pause )( 
            IDA3ViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *Resume )( 
            IDA3ViewerControlWindowed * This);
        
        HRESULT ( STDMETHODCALLTYPE *Tick )( 
            IDA3ViewerControlWindowed * This);
        
        END_INTERFACE
    } IDA3ViewerControlWindowedVtbl;

    interface IDA3ViewerControlWindowed
    {
        CONST_VTBL struct IDA3ViewerControlWindowedVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDA3ViewerControlWindowed_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDA3ViewerControlWindowed_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDA3ViewerControlWindowed_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDA3ViewerControlWindowed_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define IDA3ViewerControlWindowed_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define IDA3ViewerControlWindowed_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define IDA3ViewerControlWindowed_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)


#define IDA3ViewerControlWindowed_get_UpdateInterval(This,pVal)	\
    (This)->lpVtbl -> get_UpdateInterval(This,pVal)

#define IDA3ViewerControlWindowed_put_UpdateInterval(This,newVal)	\
    (This)->lpVtbl -> put_UpdateInterval(This,newVal)

#define IDA3ViewerControlWindowed_get_View(This,ppView)	\
    (This)->lpVtbl -> get_View(This,ppView)

#define IDA3ViewerControlWindowed_put_View(This,pView)	\
    (This)->lpVtbl -> put_View(This,pView)

#define IDA3ViewerControlWindowed_get_Image(This,ppImage)	\
    (This)->lpVtbl -> get_Image(This,ppImage)

#define IDA3ViewerControlWindowed_put_Image(This,pImage)	\
    (This)->lpVtbl -> put_Image(This,pImage)

#define IDA3ViewerControlWindowed_get_BackgroundImage(This,ppImage)	\
    (This)->lpVtbl -> get_BackgroundImage(This,ppImage)

#define IDA3ViewerControlWindowed_put_BackgroundImage(This,pImage)	\
    (This)->lpVtbl -> put_BackgroundImage(This,pImage)

#define IDA3ViewerControlWindowed_get_Sound(This,ppSound)	\
    (This)->lpVtbl -> get_Sound(This,ppSound)

#define IDA3ViewerControlWindowed_put_Sound(This,pSound)	\
    (This)->lpVtbl -> put_Sound(This,pSound)

#define IDA3ViewerControlWindowed_get_PixelLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_PixelLibrary(This,ppStatics)

#define IDA3ViewerControlWindowed_get_MeterLibrary(This,ppStatics)	\
    (This)->lpVtbl -> get_MeterLibrary(This,ppStatics)

#define IDA3ViewerControlWindowed_AddBehaviorToRun(This,pBehavior)	\
    (This)->lpVtbl -> AddBehaviorToRun(This,pBehavior)

#define IDA3ViewerControlWindowed_Start(This)	\
    (This)->lpVtbl -> Start(This)

#define IDA3ViewerControlWindowed_get_InputImage(This,pVal)	\
    (This)->lpVtbl -> get_InputImage(This,pVal)

#define IDA3ViewerControlWindowed_get_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> get_OpaqueForHitDetect(This,b)

#define IDA3ViewerControlWindowed_put_OpaqueForHitDetect(This,b)	\
    (This)->lpVtbl -> put_OpaqueForHitDetect(This,b)

#define IDA3ViewerControlWindowed_get_TimerSource(This,ts)	\
    (This)->lpVtbl -> get_TimerSource(This,ts)

#define IDA3ViewerControlWindowed_put_TimerSource(This,ts)	\
    (This)->lpVtbl -> put_TimerSource(This,ts)

#define IDA3ViewerControlWindowed_RegisterErrorHandler(This,scriptlet)	\
    (This)->lpVtbl -> RegisterErrorHandler(This,scriptlet)



#define IDA3ViewerControlWindowed_SetPreference(This,pref,val)	\
    (This)->lpVtbl -> SetPreference(This,pref,val)

#define IDA3ViewerControlWindowed_GetPreference(This,pref,pVal)	\
    (This)->lpVtbl -> GetPreference(This,pref,pVal)


#define IDA3ViewerControlWindowed_Stop(This)	\
    (This)->lpVtbl -> Stop(This)

#define IDA3ViewerControlWindowed_Pause(This)	\
    (This)->lpVtbl -> Pause(This)

#define IDA3ViewerControlWindowed_Resume(This)	\
    (This)->lpVtbl -> Resume(This)

#define IDA3ViewerControlWindowed_Tick(This)	\
    (This)->lpVtbl -> Tick(This)

#endif /* COBJMACROS */


#endif 	/* C style interface */



HRESULT STDMETHODCALLTYPE IDA3ViewerControlWindowed_Stop_Proxy( 
    IDA3ViewerControlWindowed * This);


void __RPC_STUB IDA3ViewerControlWindowed_Stop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControlWindowed_Pause_Proxy( 
    IDA3ViewerControlWindowed * This);


void __RPC_STUB IDA3ViewerControlWindowed_Pause_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControlWindowed_Resume_Proxy( 
    IDA3ViewerControlWindowed * This);


void __RPC_STUB IDA3ViewerControlWindowed_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDA3ViewerControlWindowed_Tick_Proxy( 
    IDA3ViewerControlWindowed * This);


void __RPC_STUB IDA3ViewerControlWindowed_Tick_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDA3ViewerControlWindowed_INTERFACE_DEFINED__ */


#ifndef ___IDAViewerControlEvents_DISPINTERFACE_DEFINED__
#define ___IDAViewerControlEvents_DISPINTERFACE_DEFINED__

/* dispinterface _IDAViewerControlEvents */
/* [helpstring][uuid] */ 


EXTERN_C const IID DIID__IDAViewerControlEvents;

#if defined(__cplusplus) && !defined(CINTERFACE)

    MIDL_INTERFACE("3584F274-61EA-11d2-8BD9-00C04FC2F51D")
    _IDAViewerControlEvents : public IDispatch
    {
    };
    
#else 	/* C style interface */

    typedef struct _IDAViewerControlEventsVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            _IDAViewerControlEvents * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            _IDAViewerControlEvents * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            _IDAViewerControlEvents * This);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfoCount )( 
            _IDAViewerControlEvents * This,
            /* [out] */ UINT *pctinfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetTypeInfo )( 
            _IDAViewerControlEvents * This,
            /* [in] */ UINT iTInfo,
            /* [in] */ LCID lcid,
            /* [out] */ ITypeInfo **ppTInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetIDsOfNames )( 
            _IDAViewerControlEvents * This,
            /* [in] */ REFIID riid,
            /* [size_is][in] */ LPOLESTR *rgszNames,
            /* [in] */ UINT cNames,
            /* [in] */ LCID lcid,
            /* [size_is][out] */ DISPID *rgDispId);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Invoke )( 
            _IDAViewerControlEvents * This,
            /* [in] */ DISPID dispIdMember,
            /* [in] */ REFIID riid,
            /* [in] */ LCID lcid,
            /* [in] */ WORD wFlags,
            /* [out][in] */ DISPPARAMS *pDispParams,
            /* [out] */ VARIANT *pVarResult,
            /* [out] */ EXCEPINFO *pExcepInfo,
            /* [out] */ UINT *puArgErr);
        
        END_INTERFACE
    } _IDAViewerControlEventsVtbl;

    interface _IDAViewerControlEvents
    {
        CONST_VTBL struct _IDAViewerControlEventsVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define _IDAViewerControlEvents_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define _IDAViewerControlEvents_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define _IDAViewerControlEvents_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define _IDAViewerControlEvents_GetTypeInfoCount(This,pctinfo)	\
    (This)->lpVtbl -> GetTypeInfoCount(This,pctinfo)

#define _IDAViewerControlEvents_GetTypeInfo(This,iTInfo,lcid,ppTInfo)	\
    (This)->lpVtbl -> GetTypeInfo(This,iTInfo,lcid,ppTInfo)

#define _IDAViewerControlEvents_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)	\
    (This)->lpVtbl -> GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)

#define _IDAViewerControlEvents_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)	\
    (This)->lpVtbl -> Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)

#endif /* COBJMACROS */


#endif 	/* C style interface */


#endif 	/* ___IDAViewerControlEvents_DISPINTERFACE_DEFINED__ */


EXTERN_C const CLSID CLSID_DAViewerControl;

#ifdef __cplusplus

class DECLSPEC_UUID("B6FFC24C-7E13-11D0-9B47-00C04FC2F51D")
DAViewerControl;
#endif

EXTERN_C const CLSID CLSID_DAViewerControlWindowed;

#ifdef __cplusplus

class DECLSPEC_UUID("69AD90EF-1C20-11d1-8801-00C04FC29D46")
DAViewerControlWindowed;
#endif

EXTERN_C const CLSID CLSID_DABoolean;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BC1-3C52-11d0-9200-848C1D000000")
DABoolean;
#endif

EXTERN_C const CLSID CLSID_DACamera;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BE2-3C52-11d0-9200-848C1D000000")
DACamera;
#endif

EXTERN_C const CLSID CLSID_DAColor;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BC6-3C52-11d0-9200-848C1D000000")
DAColor;
#endif

EXTERN_C const CLSID CLSID_DAGeometry;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BE0-3C52-11d0-9200-848C1D000000")
DAGeometry;
#endif

EXTERN_C const CLSID CLSID_DAImage;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BD4-3C52-11d0-9200-848C1D000000")
DAImage;
#endif

EXTERN_C const CLSID CLSID_DAMatte;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BD2-3C52-11d0-9200-848C1D000000")
DAMatte;
#endif

EXTERN_C const CLSID CLSID_DAMicrophone;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BE6-3C52-11d0-9200-848C1D000000")
DAMicrophone;
#endif

EXTERN_C const CLSID CLSID_DAMontage;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BD6-3C52-11d0-9200-848C1D000000")
DAMontage;
#endif

EXTERN_C const CLSID CLSID_DANumber;

#ifdef __cplusplus

class DECLSPEC_UUID("9CDE7341-3C20-11d0-A330-00AA00B92C03")
DANumber;
#endif

EXTERN_C const CLSID CLSID_DAPath2;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BD0-3C52-11d0-9200-848C1D000000")
DAPath2;
#endif

EXTERN_C const CLSID CLSID_DAPoint2;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BC8-3C52-11d0-9200-848C1D000000")
DAPoint2;
#endif

EXTERN_C const CLSID CLSID_DAPoint3;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BD8-3C52-11d0-9200-848C1D000000")
DAPoint3;
#endif

EXTERN_C const CLSID CLSID_DASound;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BE4-3C52-11d0-9200-848C1D000000")
DASound;
#endif

EXTERN_C const CLSID CLSID_DAString;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BC4-3C52-11d0-9200-848C1D000000")
DAString;
#endif

EXTERN_C const CLSID CLSID_DATransform2;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BCC-3C52-11d0-9200-848C1D000000")
DATransform2;
#endif

EXTERN_C const CLSID CLSID_DATransform3;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BDC-3C52-11d0-9200-848C1D000000")
DATransform3;
#endif

EXTERN_C const CLSID CLSID_DAVector2;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BCA-3C52-11d0-9200-848C1D000000")
DAVector2;
#endif

EXTERN_C const CLSID CLSID_DAVector3;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BDA-3C52-11d0-9200-848C1D000000")
DAVector3;
#endif

EXTERN_C const CLSID CLSID_DAFontStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("25B0F91C-D23D-11d0-9B85-00C04FC2F51D")
DAFontStyle;
#endif

EXTERN_C const CLSID CLSID_DALineStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BF2-3C52-11d0-9200-848C1D000000")
DALineStyle;
#endif

EXTERN_C const CLSID CLSID_DAEndStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BEC-3C52-11d0-9200-848C1D000000")
DAEndStyle;
#endif

EXTERN_C const CLSID CLSID_DAJoinStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BEE-3C52-11d0-9200-848C1D000000")
DAJoinStyle;
#endif

EXTERN_C const CLSID CLSID_DADashStyle;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BF0-3C52-11d0-9200-848C1D000000")
DADashStyle;
#endif

EXTERN_C const CLSID CLSID_DABbox2;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BCE-3C52-11d0-9200-848C1D000000")
DABbox2;
#endif

EXTERN_C const CLSID CLSID_DABbox3;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BDE-3C52-11d0-9200-848C1D000000")
DABbox3;
#endif

EXTERN_C const CLSID CLSID_DAPair;

#ifdef __cplusplus

class DECLSPEC_UUID("C46C1BF4-3C52-11d0-9200-848C1D000000")
DAPair;
#endif

EXTERN_C const CLSID CLSID_DAEvent;

#ifdef __cplusplus

class DECLSPEC_UUID("50B4791F-4731-11d0-8912-00C04FC2A0CA")
DAEvent;
#endif

EXTERN_C const CLSID CLSID_DAArray;

#ifdef __cplusplus

class DECLSPEC_UUID("D17506C3-6B26-11d0-8914-00C04FC2A0CA")
DAArray;
#endif

EXTERN_C const CLSID CLSID_DATuple;

#ifdef __cplusplus

class DECLSPEC_UUID("5DFB2651-9668-11d0-B17B-00C04FC2A0CA")
DATuple;
#endif

EXTERN_C const CLSID CLSID_DAUserData;

#ifdef __cplusplus

class DECLSPEC_UUID("AF868304-AB0B-11d0-876A-00C04FC29D46")
DAUserData;
#endif

EXTERN_C const CLSID CLSID_DAImportationResult;

#ifdef __cplusplus

class DECLSPEC_UUID("BCBB1F75-E384-11d0-9B99-00C04FC2F51D")
DAImportationResult;
#endif

EXTERN_C const CLSID CLSID_DAPickableResult;

#ifdef __cplusplus

class DECLSPEC_UUID("BCBB1F74-E384-11d0-9B99-00C04FC2F51D")
DAPickableResult;
#endif
#endif /* __DirectAnimation_LIBRARY_DEFINED__ */

/* Additional Prototypes for ALL interfaces */

/* end of Additional Prototypes */

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\daogetrw.h ===
/************************************************************************
**  D A O G E T R W . H                                                 *
**                                                                      *
**  GetRows interface                                                   *
**                                                                      *
**  Warning: This file is copied from cdaost.h. Changes must be made    *
**           in both files                                              *
**                                                                      *
**                                                                      *
*************************************************************************
** Copyright (C) 1996 by Microsoft Corporation                          *
**         All Rights Reserved                                          *
************************************************************************/

#if !defined (_DAOGETRW_H_)
#define _DAOGETRW_H_

/*
	Enumerations
*/
typedef enum
	{
	DAOCOLKIND_IND = 0,
	DAOCOLKIND_STR,
	DAOCOLKIND_WSTR
	} DAOCOLKIND;

typedef enum
	{
	DAO_I2 = 0,
	DAO_I4,
	DAO_R4,
	DAO_R8,
	DAO_CURRENCY,
	DAO_DATE,
	DAO_BOOL,
	DAO_BSTR,
	DAO_LPSTR,
	DAO_LPWSTR,
	DAO_BLOB,
	DAO_BYTES,
	DAO_CHAR,
	DAO_WCHAR,
	DAO_ANYVARIANT,
	DAO_BOOKMARK,
	DAO_BYTE,
	DAO_GUID,
	DAO_DATATYPEMAX
	} DAODATATYPE;

/*
	Macros
*/
#define DAO_NOINDICATOR 0xffffffff
#define DAO_NULL        0xffffffff
#define DAO_CANTCOERCE  0xfffffffc
#define DAO_NOMAXLENGTH 0x00000000

#define DAOROWFETCH_CALLEEALLOCATES     0x00000001
#define DAOROWFETCH_DONTADVANCE         0x00000002
#define DAOROWFETCH_FORCEREFRESH        0x00000004
#define DAOROWFETCH_BINDABSOLUTE        0x00000008
#define DAOROWFETCH_ODBCNEXT			0x00000010

#define DAOBINDING_DIRECT               0x00000001
#define DAOBINDING_VARIANT              0x00000002
#define DAOBINDING_CALLBACK             0x00000004

/*
	Structures
*/
typedef struct
	{
	DWORD           dwKind;
	union
		{
		LONG        ind;
		LPCSTR      lpstr;
		LPCWSTR		lpwstr;
		};
	} DAOCOLUMNID;
typedef DAOCOLUMNID *LPDAOCOLUMNID;

// Callback for binding
EXTERN_C typedef HRESULT (STDAPICALLTYPE *LPDAOBINDFUNC)(ULONG cb, DWORD dwUser, LPVOID *ppData);
#define DAOBINDINGFUNC(f)   STDAPI f (ULONG cb, DWORD dwUser, LPVOID *ppData)

typedef struct
	{
	DAOCOLUMNID     columnID;
	ULONG           cbDataOffset;
	ULONG           cbMaxLen;
	ULONG           cbInfoOffset;
	DWORD           dwBinding;
	DWORD           dwDataType;
	DWORD           dwUser;
	} DAOCOLUMNBINDING;
typedef DAOCOLUMNBINDING *LPDAOCOLUMNBINDING;

typedef struct
	{
	ULONG           cRowsRequested;
	DWORD           dwFlags;
	LPVOID          pData;
	LPVOID          pVarData;
	ULONG           cbVarData;
	ULONG           cRowsReturned;
	} DAOFETCHROWS;
typedef DAOFETCHROWS *LPDAOFETCHROWS;

/*
	New Errors

	**NOTE: OLE standard ids to be determined.
*/
#define S_BUFFERTOOSMALL    MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1000)
#define S_ENDOFCURSOR       MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1001)
#define S_SILENTCANCEL      MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1002)
#define S_RECORDDELETED     MAKE_SCODE(SEVERITY_SUCCESS,    FACILITY_ITF,   0x1003)

#define E_ROWTOOSHORT       MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1000)
#define E_BADBINDINFO       MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1001)
#define E_COLUMNUNAVAILABLE MAKE_SCODE(SEVERITY_ERROR,      FACILITY_ITF,   0x1002)


/*
	Interfaces
*/
#undef INTERFACE
#define INTERFACE ICDAORecordset
DECLARE_INTERFACE_(ICDAORecordset, IDispatch)
	{
	STDMETHOD(GetRows)          (THIS_ LONG cRowsToSkip, LONG cCol, LPDAOCOLUMNBINDING prgBndCol, ULONG cbRowLen, LPDAOFETCHROWS pFetchRows) PURE;
	STDMETHOD(SetNotify)		(THIS_ REFIID riid, BOOL fNotify);
	STDMETHOD(GetNotify)		(THIS_ REFIID riid, BOOL *fNotify);
	STDMETHOD(OnBeforeNotify)	(THIS_ REFIID riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2);
	STDMETHOD(OnAfterNotify)	(THIS_ REFIID riid, DWORD cat, DWORD rsn, VARIANT v1, VARIANT v2, HRESULT hr);
	STDMETHOD(PutLock)			(THIS_ BOOL f);
	STDMETHOD(GetLock)			(THIS_ BOOL *f);
	STDMETHOD(AddGetRowsErr)    (THIS_ HRESULT hr) PURE;
	};

//Get rows errors
#define errVtoFetchBuffTooSmall	-30028	//3640	The fetch buffer was too small for the amount of data you requested.
#define errVtoEOFDuringFetch	-30029	//3641	There are fewer records remaining in the recordset than you requested.
#define errVtoSilentCancel		-30030	//3642	A cancel was performed on the operation.
#define errVtoRecordDeleted		-30031	//3643	One of the records in the recordset was deleted by another process.
#define errVtoRowLenTooSmall	-30032	//3646	The specified row length is shorter than the sum of the column lengths.
#define errVtoBadBindInfo		-30033	//3645	One of the binding parameters is incorrect.
#define errVtoColumnMissing		-30034	//3647	A column requested is not being returned to the recordset.

#endif // _DAOGETRW_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\dbdao.h ===
/************************************************************************
**      D B D A O . H                                                   *
**                                                                      *
*************************************************************************
** Copyright (C) 1996 by Microsoft Corporation			                *
**                 All Rights Reserved                                  *
************************************************************************/
/*
	DBDAO.H

	Class definitions for ddao SDK.  

This is a part of the Microsoft Data Access Objects SDK library.
See the  DAO SDK help information for detailed information regarding the
Microsoft Data Access Objects SDK product.

*/

#ifndef _DBDAO_H_
#define _DBDAO_H_

// Ignore warning "non dll-interface class 'X' used as base for dll-interface class 'Y'
#pragma warning( disable : 4275 )

//DAO must be built with an MFC version >= 4.2 (or you'll get memory problems with CStrings)

#if _MFC_VER < 0x0420
#error The DAOSDK 3.5 libraries will not operate correctly if built with MFC older than 4.2
#endif

#ifndef DAO35
#define DAO35
#endif

#include <dbdaoint.h>
#include <daogetrw.h>
#include <dbdaoid.h>

// Decorations
#define CONSTRUCTOR
#define DESTRUCTOR

//Disable export
#ifndef DLLEXPORT
#define DLLEXPORT __declspec( dllexport )
#endif

//Macro to convert HRESULT to IDA 
#define DBERR(x) SCODE_CODE(GetScode(x))

// Include internal DAO definitions
#include <_dbdao.h>

//      DAO Recordset::GetRowsEx() binding definitions

#define dbBindIndexINT  1
#define dbBindIndexSTR  2

#define dbBindI2                DAO_I2                  // long
#define dbBindI4                DAO_I4                  // short
#define dbBindR4                DAO_R4                  // float
#define dbBindR8                DAO_R8                  // double
#define dbBindCY                DAO_CURRENCY			// Currency
#define dbBindDATE              DAO_DATE                // DATE
#define dbBindBOOL              DAO_BOOL                // VARIANT_BOOL
#define dbBindUI1               DAO_CHAR                // unsigned char
#define dbBindVARIANT			DAO_ANYVARIANT			// VARIANT
#define dbBindWCHAR             DAO_WCHAR               // wchar_t[] (inline)

#define dbBindBookmark			DAO_BOOKMARK			// bookmark psuedo field
#define dbBindLPSTR				DAO_LPSTR				// \0 string in pvVarBuffer
#define dbBindLPWSTR			DAO_LPWSTR				// wide string in pvVarBuffer
#define dbBindBlob				DAO_BLOB				// 

#ifdef _UNICODE
#define dbBindSTRING    dbBindWCHAR     
#define dbBindLPSTRING	dbBindLPWSTR
#else
#define dbBindSTRING    dbBindUI1
#define dbBindLPSTRING	dbBindLPSTR
#endif

//      Binding structure (Used with GetRowsEX)

typedef struct
	{
	DWORD   dwBindIndexType;
	union
		{
		LONG    i;
		LPCTSTR pstr;
		};

	DWORD   dwType;
	DWORD   dwOffset;
	DWORD   cb;

	} DAORSETBINDING, *LPDAORSETBINDING;



/*****************************************************************************
* Forwards
*/
class COleVariant;
class CdbBookmark;
class CdbException;
class CdbOleObject;
class CdbObject;
class CdbError;
class CdbProperty;
class CdbDBEngine;
class CdbWorkspace;
class CdbDatabase;
class CdbConnection;
class CdbRecordset;
class CdbGetRowsEx;
class CdbQueryDef;
class CdbTableDef;
class CdbField;
class CdbRelation;
class CdbIndex;
class CdbUser;
class CdbGroup;
class CdbDocument;
class CdbContainer;
class CdbParameter;
class CdbCollection;
class CdbErrors;
class CdbProperties;
class CdbWorkspaces;
class CdbDatabases;
class CdbConnections;
class CdbRecordsets;
class CdbQueryDefs;
class CdbTableDefs;
class CdbFields;
class CdbRelations;
class CdbIndexes;
class CdbUsers;
class CdbGroups;
class CdbDocuments;
class CdbContainers;
class CdbParameters;


/*****************************************************************************
* CdbException
*/
class DLLEXPORT CdbException 
	{
public:
	CONSTRUCTOR                     CdbException            (HRESULT hr);

	HRESULT                         m_hr;
	};


/*****************************************************************************
* CdbBookmark
*/
class DLLEXPORT CdbBookmark : public COleVariant
	{
	public:

	CONSTRUCTOR                     CdbBookmark                     (LPSAFEARRAY psa);
	CONSTRUCTOR                     CdbBookmark                     ();
	CONSTRUCTOR                     CdbBookmark                     (const CdbBookmark &);
	CdbBookmark &                   operator =                      (const CdbBookmark &);
	operator                        LPSAFEARRAY                     (VOID);
	};


/*****************************************************************************
* CdbIndexFields (special case for index fields)
*/
class DLLEXPORT CdbIndexFields : public CdbFields
	{
	public:
	CdbField                                Item                            (LPCTSTR pstr);
	CdbField                                Item                            (LONG i);
	CdbObject                               ObItem                          (LPCTSTR pstr);
	CdbObject                               ObItem                          (LONG i);
	};


/*****************************************************************************
* CdbLastOLEError
*/
class DLLEXPORT CdbLastOLEError : public CdbOleObject
	{
	public:

	CONSTRUCTOR                             CdbLastOLEError         (VOID);

	CString                                 GetSource                       (VOID);
	CString                                 GetDescription          (VOID);
	CString                                 GetHelpFile                     (VOID);
	DWORD                                   GetHelpContext          (VOID);
	};

/*****************************************************************************
* CdbDBEngine
*/
class DLLEXPORT CdbDBEngine : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbDBEngine             (DAODBEngine *peng, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbDBEngine             (BOOL bPrivate=FALSE, BOOL bStart=TRUE, LPCTSTR pstrIniPath=NULL, LPCTSTR pstrDefUser=NULL, LPCTSTR pstrDefPW=NULL, LONG lType=dbUseJet);
	CONSTRUCTOR                     CdbDBEngine             (const CdbDBEngine &);
	CdbDBEngine &           operator =                      (const CdbDBEngine &);
	inline CdbWorkspace     operator []                     (LONG lIndex);
	inline CdbWorkspace     operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	VOID                            SetDefaultPassword      (LPCTSTR pstr);
	VOID                            SetDefaultUser          (LPCTSTR pstr);
	VOID                            SetIniPath              (LPCTSTR pstr);
	CString                         GetIniPath              (VOID);
	VOID							SetDefaultType			(LONG l);
	LONG							GetDefaultType			(VOID);
	VOID                            SetLoginTimeout         (SHORT s);
	SHORT                           GetLoginTimeout         (VOID);
	CString                         GetVersion              (VOID);
	CString                         GetSystemDB             (VOID);
	VOID                            SetSystemDB             (LPCTSTR pstr);

	// Methods
	CdbWorkspace					CreateWorkspace         (LPCTSTR pstrName, LPCTSTR pstrUser, LPCTSTR pstrPassword, LONG lType=-1);
	CdbDatabase                     OpenDatabase            (LPCTSTR pstrName, BOOL bExclusive, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	CdbDatabase                     OpenDatabase            (LPCTSTR pstrName, LONG lOption=0L, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	CdbConnection					OpenConnection			(LPCTSTR pstrName, LONG lOption=-1L, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	VOID                            CompactDatabase			(LPCTSTR pstrOldDatabase, LPCTSTR pstrNewDatabase, LPCTSTR pstrDstConnect = NULL, LONG lOptions=-1, LPCTSTR pstrSrcConnect = NULL);
	VOID                            RepairDatabase          (LPCTSTR pstrDatabase);
	VOID                            RegisterDatabase        (LPCTSTR pstrDatabase, LPCTSTR pstrDriver, BOOL bSilent, LPCTSTR pstrAttributes);
	VOID                            Idle                    (LONG lOptions=-1);
	VOID                            Start                   (VOID);
	VOID							SetOption				(long lOption, LPVARIANT pvValue);
	

	// Collections
	CdbWorkspaces					Workspaces;
	CdbErrors                       Errors;

	private:
	BOOL                            m_bStarted;
	};

/*****************************************************************************
* CdbWorkspace
*/
class DLLEXPORT CdbWorkspace : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbWorkspace            (VOID);
	CONSTRUCTOR                     CdbWorkspace            (DAOWorkspace *pwrk, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbWorkspace            (const CdbWorkspace &);
	CdbWorkspace &          operator =                      (const CdbWorkspace &);
	inline CdbDatabase      operator []                     (LONG lIndex);
	inline CdbDatabase      operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	CString                         GetUserName                     (VOID);
	BOOL                            GetIsolateODBCTrans				(VOID);
	VOID                            SetIsolateODBCTrans				(BOOL b);
	LONG							GetType							(VOID);
	LONG							GetDefaultCursorDriver			(VOID);
	VOID							SetDefaultCursorDriver			(LONG l);
	LONG							GetLoginTimeout					(VOID);
	VOID							SetLoginTimeout					(LONG l);

	// Methods
	VOID                            BeginTrans                      (VOID);
	VOID                            CommitTrans                     (LONG lOptions=-1);
	VOID                            Close                           (VOID);
	VOID                            Rollback                        (VOID);
	CdbDatabase                     OpenDatabase            (LPCTSTR pstrName, BOOL bExclusive, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	CdbDatabase                     OpenDatabase            (LPCTSTR pstrName, LONG lOption=0L, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	CdbConnection					OpenConnection			(LPCTSTR pstrName, LONG lOption=-1L, BOOL bReadOnly=FALSE, LPCTSTR pstrConnect=NULL);
	CdbDatabase                     CreateDatabase          (LPCTSTR pstrName, LPCTSTR pstrConnect, LONG lOption=-1);
	CdbUser                         CreateUser                      (LPCTSTR pstrName=NULL, LPCTSTR pstrPID=NULL, LPCTSTR pstrPassword=NULL);
	CdbGroup                        CreateGroup                     (LPCTSTR pstrName=NULL, LPCTSTR pstrPID=NULL);

	// Collections
	CdbDatabases					Databases;
	CdbConnections					Connections;
	CdbUsers                        Users;
	CdbGroups                       Groups;
	};

/*****************************************************************************
* CdbDatabase
*/
class DLLEXPORT CdbDatabase : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbDatabase                     (VOID);
	CONSTRUCTOR                     CdbDatabase                     (DAODatabase *pdb, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbDatabase                     (const CdbDatabase &);
	CdbDatabase &           operator =                      (const CdbDatabase &);
	inline CdbTableDef      operator []                     (LONG lIndex);
	inline CdbTableDef      operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	LONG                    GetCollatingOrder       (VOID);
	CString                 GetConnect              (VOID);
	VOID					SetConnect				(LPCTSTR pstrConnect);
	CString                 GetName                 (VOID);
	SHORT                   GetQueryTimeout         (VOID);
	VOID                    SetQueryTimeout         (SHORT s);
	BOOL                    GetTransactions         (VOID);
	BOOL                    GetUpdatable            (VOID);
	CString                 GetVersion              (VOID);
	LONG                    GetRecordsAffected      (VOID);
	CdbConnection			GetConnection			(VOID);
	//Replication properties
	CString					GetReplicaID			(VOID);
	CString					GetDesignMasterID		(VOID);
	VOID					SetDesignMasterID		(LPCTSTR pstrMasterID);


	// Methods
	VOID                    Close                   (VOID);
	VOID                    Execute                 (LPCTSTR pstrQuery, LONG lOption=-1);
	CdbRecordset            OpenRecordset           (LPCTSTR pstrName, LONG lType=-1, LONG lOptions=-1, LONG lLockEdit=-1);
	CdbProperty             CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);
	CdbRelation             CreateRelation          (LPCTSTR pstrName=NULL, LPCTSTR pstrTable=NULL, LPCTSTR pstrForiegn=NULL, LONG lAttributes=-1);
	CdbTableDef             CreateTableDef          (LPCTSTR pstrName=NULL, LONG lAttributes=-1, LPCTSTR pstrSource=NULL, LPCTSTR pstrConnect=NULL);
	CdbQueryDef             CreateQueryDef          (LPCTSTR pstrName=NULL, LPCTSTR pstrSQL=NULL);
	VOID					NewPassword				(LPCTSTR pstrOld, LPCTSTR pstrNew);
	//Replication methods
	VOID                    Synchronize				(LPCTSTR pstrReplica, LONG lType=-1);
	VOID                    MakeReplica				(LPCTSTR pstrPath, LPCTSTR pstrDescription, LONG lOptions=-1);
	VOID					PopulatePartial			(LPCTSTR pstrDbPathName);

	// Collections
	CdbTableDefs            TableDefs;
	CdbQueryDefs            QueryDefs;
	CdbRelations            Relations;
	CdbContainers           Containers;
	CdbRecordsets           Recordsets;
	};

/*****************************************************************************
* CdbConnection
*/
class DLLEXPORT CdbConnection : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbConnection           (VOID);
	CONSTRUCTOR                     CdbConnection           (DAOConnection *pconn, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbConnection           (const CdbConnection &);
	CdbConnection &					operator =              (const CdbConnection &);
	inline CdbQueryDef				operator []             (LONG lIndex);
	inline CdbQueryDef				operator []             (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetConnect              (VOID);
	CString                         GetName                 (VOID);
	CdbDatabase						GetDatabase				(VOID);
	SHORT                           GetQueryTimeout         (VOID);
	VOID                            SetQueryTimeout         (SHORT s);
	LONG							GetRecordsAffected		(VOID);
	BOOL							GetStillExecuting		(VOID);
	BOOL							GetTransactions         (VOID);
	BOOL                            GetUpdatable            (VOID);

	// Methods
	VOID                            Cancel					(VOID);
	VOID                            Close                   (VOID);
	CdbQueryDef						CreateQueryDef          (LPCTSTR pstrName=NULL, LPCTSTR pstrSQL=NULL);
	VOID                            Execute                 (LPCTSTR pstrQuery, LONG lOption=-1);
	CdbRecordset					OpenRecordset           (LPCTSTR pstrName, LONG lType=-1, LONG lOptions=-1, LONG lLockEdit=-1);

	// Collections
	CdbQueryDefs            QueryDefs;
	CdbRecordsets           Recordsets;
	};

/*****************************************************************************
* CdbRecordset
*/
class DLLEXPORT CdbRecordset : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbRecordset            (VOID);
	CONSTRUCTOR                     CdbRecordset            (DAORecordset *prs, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbRecordset            (const CdbRecordset &);
	CdbRecordset &          operator =                      (const CdbRecordset &);
	inline CdbField     operator []                     (LONG lIndex);
	inline CdbField     operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);
	VOID                            SetGetRowsExInt			(VOID);

	// Properties
	BOOL                            GetBOF                          (VOID);
	CdbBookmark                     GetBookmark                     (VOID);
	VOID                            SetBookmark                     (class CdbBookmark);
	BOOL                            GetBookmarkable         (VOID);
	COleDateTime                    GetDateCreated          (VOID);
	COleDateTime                    GetLastUpdated          (VOID);
	BOOL                            GetEOF                          (VOID);
	CString                         GetFilter                       (VOID);
	VOID                            SetFilter                       (LPCTSTR pstr);
	CString                         GetIndex                        (VOID);
	VOID                            SetIndex                        (LPCTSTR pstr);
	CdbBookmark                     GetLastModified         (VOID);
	BOOL                            GetLockEdits            (VOID);
	VOID                            SetLockEdits            (BOOL b);
	CString                         GetName                         (VOID);
	BOOL                            GetNoMatch                      (VOID);
	CString                         GetSort                         (VOID);
	VOID                            SetSort                         (LPCTSTR pstr);
	BOOL                            GetTransactions         (VOID);
	SHORT                           GetType                         (VOID);
	LONG                            GetRecordCount          (VOID);
	BOOL                            GetUpdatable            (VOID);
	BOOL                            GetRestartable          (VOID);
	CString                         GetValidationText       (VOID);
	CString                         GetValidationRule       (VOID);
	CdbBookmark                     GetCacheStart           (VOID);
	VOID                            SetCacheStart           (CdbBookmark &pbm);
	LONG                            GetCacheSize            (VOID);
	VOID                            SetCacheSize            (LONG l);
	FLOAT                           GetPercentPosition      (VOID);
	VOID                            SetPercentPosition      (FLOAT f);
	LONG                            GetAbsolutePosition     (VOID);
	VOID                            SetAbsolutePosition     (LONG l);
	SHORT                           GetEditMode				(VOID);
	LONG                            GetUpdateOptions		(VOID);
	VOID                            SetUpdateOptions		(LONG l);
	SHORT                           GetRecordStatus			(VOID);
	BOOL							GetStillExecuting		(VOID);
	LONG                            GetBatchSize			(VOID);
	VOID                            SetBatchSize			(LONG l);
	LONG                            GetBatchCollisionCount	(VOID);
	COleVariant						GetBatchCollisions		(VOID);
	CdbConnection					GetConnection			(VOID);

	// Methods
	VOID                            CancelUpdate            (short sType = dbUpdateRegular);
	VOID                            AddNew                          (VOID);
	VOID                            Close                           (VOID);
	CdbRecordset					OpenRecordset           (LONG lType=-1, LONG lOption=-1);
	VOID                            Delete                          (VOID);
	VOID                            Edit                            (VOID);
	VOID                            FindFirst                       (LPCTSTR pstrCriteria);
	VOID                            FindLast                        (LPCTSTR pstrCriteria);
	VOID                            FindNext                        (LPCTSTR pstrCriteria);
	VOID                            FindPrevious            (LPCTSTR pstrCriteria);
	VOID                            MoveFirst                       (VOID);
	VOID                            MoveLast                        (LONG lOptions=-1);
	VOID                            MoveNext                        (VOID);
	VOID                            MovePrevious            (VOID);
	VOID                            Seek                            (LPCTSTR pstrComparison, LONG lNumFields, COleVariant cKey, ...);
	VOID                            Update                          (short sType = dbUpdateRegular, VARIANT_BOOL bForce = FALSE);
	CdbRecordset					Clone                           (VOID);
	VOID                            Requery                         (CdbQueryDef *pq = NULL);
	VOID                            Move                            (LONG lRows, CdbBookmark *bm=NULL);
	VOID                            FillCache                       (LONG lRows=-1, CdbBookmark *pbm=NULL);
	CdbQueryDef                     CopyQueryDef					(VOID);
	COleVariant                     GetRows                         (LONG lRows=-1);
	LONG                            GetRowsEx                       (LPVOID pvBuffer, LONG cbRow, LPDAORSETBINDING prb, LONG cBinding, LPVOID pvVarBuffer = NULL, LONG cbVarBuffer = 0, LONG lRows = -1);
	VOID                            Cancel							(VOID);
	BOOL							NextRecordset					(VOID);

	inline VOID						GetFieldV                       (COleVariant &vIndex, COleVariant &vValue);
	inline VOID                     SetFieldV                       (COleVariant &vIndex, LPVARIANT pv);


	COleVariant                     GetField                        (LPCTSTR pstrIndex);
	COleVariant                     GetField                        (LONG lIndex);
	COleVariant						GetField                        (COleVariant &vIndex);
	COleVariant						GetField                        (CString &str){return GetField((LPCTSTR)str);}

	VOID                            SetField                        (LPCTSTR pstrIndex, LPVARIANT pv);
	VOID                            SetField                        (LONG lIndex, LPVARIANT pv);
	VOID							SetField                        (COleVariant &vIndex, LPVARIANT pv);
	VOID							SetField                        (CString &str, LPVARIANT pv){SetField((LPCTSTR)str, pv);}

	// Collections
	CdbFields                       Fields;
protected:
	// GetRowsEx interface
	CdbGetRowsEx            m_GetRowsInt;
	};


/*****************************************************************************
* CdbField
*/
class DLLEXPORT CdbField : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbField                        (VOID);
	CONSTRUCTOR                     CdbField                        (DAOField *pfld, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbField                        (const CdbField &);
	CdbField &                      operator =                      (const CdbField &);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	LONG                            GetCollatingOrder       (VOID);
	SHORT                           GetType                         (VOID);
	VOID                            SetType                         (SHORT s);
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	LONG                            GetSize                         (VOID);
	VOID                            SetSize                         (LONG l);
	CString                         GetSourceField          (VOID);
	CString                         GetSourceTable          (VOID);
	COleVariant                     GetValue                 (VOID);

	VOID                            SetValue                (LPVARIANT pv);
	LONG                            GetAttributes           (VOID);
	VOID                            SetAttributes           (LONG l);
	SHORT                           GetOrdinalPosition      (VOID);
	VOID                            SetOrdinalPosition      (SHORT s);
	CString                         GetValidationText       (VOID);
	VOID                            SetValidationText       (LPCTSTR pstr);
	BOOL                            GetValidateOnSet        (VOID);
	VOID                            SetValidateOnSet        (BOOL b);
	CString                         GetValidationRule       (VOID);
	VOID                            SetValidationRule       (LPCTSTR pstr);
	CString		                    GetDefaultValue         (VOID);
	VOID                            SetDefaultValue         (LPCTSTR pstr);
	VOID                            SetDefaultValue         (LPVARIANT pv);
	BOOL                            GetRequired             (VOID);
	VOID                            SetRequired             (BOOL b);
	BOOL                            GetAllowZeroLength      (VOID);
	VOID                            SetAllowZeroLength      (BOOL b);
	BOOL                            GetDataUpdatable		(VOID);
	CString                         GetForeignName          (VOID);
	VOID                            SetForeignName          (LPCTSTR pstr);
	COleVariant                     GetOriginalValue		(VOID);
	COleVariant                     GetVisibleValue			(VOID);

	// Methods
	VOID                            AppendChunk                     (LPVARIANT pv);
	COleVariant                     GetChunk                        (LONG lOffset, LONG lBytes);
	LONG                            FieldSize                       (VOID);
	CdbProperty                     CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);
	};

/*****************************************************************************
* CdbQueryDef
*/
class DLLEXPORT CdbQueryDef : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbQueryDef             (VOID);
	CONSTRUCTOR                     CdbQueryDef             (DAOQueryDef *pqd, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbQueryDef             (const CdbQueryDef &);
	CdbQueryDef &           operator =                      (const CdbQueryDef &);
	inline CdbField         operator []                     (LONG lIndex);
	inline CdbField         operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	COleDateTime                    GetDateCreated          (VOID);
	COleDateTime                    GetLastUpdated          (VOID);
	CString                         GetName                 (VOID);
	VOID                            SetName                 (LPCTSTR pstr);
	SHORT                           GetODBCTimeout          (VOID);
	VOID                            SetODBCTimeout          (SHORT s);
	SHORT                           GetType                 (VOID);
	CString                         GetSQL                  (VOID);
	VOID                            SetSQL                  (LPCTSTR pstr);
	BOOL                            GetUpdatable            (VOID);
	CString                         GetConnect              (VOID);
	VOID                            SetConnect              (LPCTSTR pstr);
	BOOL                            GetReturnsRecords       (VOID);
	VOID                            SetReturnsRecords       (BOOL b);
	LONG                            GetRecordsAffected      (VOID);
	LONG                            GetMaxRecords			(VOID);
	VOID                            SetMaxRecords			(LONG l);
	BOOL							GetStillExecuting		(VOID);
	LONG                            GetCacheSize			(VOID);
	VOID                            SetCacheSize			(LONG l);
	COleVariant						GetPrepare				(VOID);
	VOID                            SetPrepare				(LPVARIANT pv);

	// Methods
	CdbRecordset					OpenRecordset           (LONG lType=-1, LONG lOption=-1, LONG lLockEdit=-1);
	VOID                            Execute                 (LONG lOption=-1);
	CdbProperty                     CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);
	VOID							Close					(VOID);
	VOID							Cancel					(VOID);

	// Collections
	CdbFields                       Fields;
	CdbParameters					Parameters;
	};

/*****************************************************************************
* CdbTableDef
*/
class DLLEXPORT CdbTableDef : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbTableDef                     (VOID);
	CONSTRUCTOR                     CdbTableDef                     (DAOTableDef *ptd, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbTableDef                     (const CdbTableDef &);
	CdbTableDef &           operator =                      (const CdbTableDef &);
	inline CdbField         operator []                     (LONG lIndex);
	inline CdbField         operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	LONG                            GetAttributes           (VOID);
	VOID                            SetAttributes           (LONG l);
	CString                         GetConnect                      (VOID);
	VOID                            SetConnect                      (LPCTSTR pstr);
	COleDateTime                    GetDateCreated          (VOID);
	COleDateTime                    GetLastUpdated          (VOID);
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	CString                         GetSourceTableName      (VOID);
	VOID                            SetSourceTableName      (LPCTSTR pstr);
	BOOL                            GetUpdatable            (VOID);
	CString                         GetValidationText       (VOID);
	VOID                            SetValidationText       (LPCTSTR pstr);
	CString                         GetValidationRule       (VOID);
	VOID                            SetValidationRule       (LPCTSTR pstr);
	LONG                            GetRecordCount          (VOID);
	CString							GetConflictTable		(VOID);
	COleVariant						GetReplicaFilter		(VOID);
	VOID							SetReplicaFilter		(LPVARIANT pv);

	// Methods
	CdbRecordset					OpenRecordset           (LONG lType=-1, LONG lOption=-1);
	VOID                            RefreshLink                     (VOID);
	CdbField                        CreateField                     (LPCTSTR pstrName=NULL, LONG lType=-1, LONG lSize=-1);
	CdbIndex                        CreateIndex                     (LPCTSTR pstrName=NULL);
	CdbProperty                     CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);

	// Collections
	CdbFields                       Fields;
	CdbIndexes                      Indexes;
	};

/*****************************************************************************
* CdbIndex
*/
class DLLEXPORT CdbIndex : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbIndex                        (VOID);
	CONSTRUCTOR                     CdbIndex                        (DAOIndex *pidx, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbIndex                        (const CdbIndex &);
	CdbIndex &                      operator =                      (const CdbIndex &);
	inline CdbField         operator []             (LONG lIndex);
	inline CdbField         operator []             (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	BOOL                            GetForeign                      (VOID);
	BOOL                            GetUnique                       (VOID);
	VOID                            SetUnique                       (BOOL b);
	BOOL                            GetClustered            (VOID);
	VOID                            SetClustered            (BOOL b);
	BOOL                            GetRequired                     (VOID);
	VOID                            SetRequired                     (BOOL b);
	BOOL                            GetIgnoreNulls          (VOID);
	VOID                            SetIgnoreNulls          (BOOL b);
	BOOL                            GetPrimary                      (VOID);
	VOID                            SetPrimary                      (BOOL b);
	LONG                            GetDistinctCount        (VOID);

	// Methods
	CdbField                        CreateField                     (LPCTSTR pstrName=NULL, LONG lType=-1, LONG lSize=-1);
	CdbProperty                     CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);

	// Collections
	CdbIndexFields          Fields;
	};

/*****************************************************************************
* CdbParameter
*/
class DLLEXPORT CdbParameter : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbParameter            (VOID);
	CONSTRUCTOR                     CdbParameter            (DAOParameter *pprm, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbParameter            (const CdbParameter &);
	CdbParameter &          operator =                      (const CdbParameter &);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName					(VOID);
	COleVariant                     GetValue				(VOID);
	VOID                            SetValue				(LPVARIANT pv);
	SHORT                           GetType					(VOID);
	VOID							SetType					(SHORT i);
	SHORT							GetDirection			(VOID);
	VOID							SetDirection			(SHORT i);
	};

/*****************************************************************************
* CdbRelation
*/
class DLLEXPORT CdbRelation : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbRelation                     (VOID);
	CONSTRUCTOR                     CdbRelation                     (DAORelation *prl, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbRelation                     (const CdbRelation &);
	CdbRelation &           operator =                      (const CdbRelation &);
	inline CdbField         operator []                     (LONG lIndex);
	inline CdbField         operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	CString                         GetTable                        (VOID);
	VOID                            SetTable                        (LPCTSTR pstr);
	CString                         GetForeignTable         (VOID);
	VOID                            SetForeignTable         (LPCTSTR pstr);
	LONG                            GetAttributes           (VOID);
	VOID                            SetAttributes           (LONG);
	BOOL							GetPartialReplica		(VOID);
	VOID							SetPartialReplica		(BOOL b);

	// Methods
	CdbField                        CreateField                     (LPCTSTR pstrName=NULL, LONG lType=-1, LONG lSize=-1);

	// Collections
	CdbFields                       Fields;
	};

/*****************************************************************************
* CdbUser
*/
class DLLEXPORT CdbUser : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbUser                         (VOID);
	CONSTRUCTOR                     CdbUser                         (DAOUser *pusr, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbUser                         (const CdbUser &);
	CdbUser &                       operator =                      (const CdbUser &);
	inline CdbGroup         operator []                     (LONG lIndex);
	inline CdbGroup         operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	VOID                            SetPID                          (LPCTSTR pstr);
	VOID                            SetPassword                     (LPCTSTR pstr);

	// Methods
	VOID                            NewPassword                     (LPCTSTR pstrOld, LPCTSTR pstrNew);
	CdbGroup                        CreateGroup                     (LPCTSTR pstrName=NULL, LPCTSTR pstrPID=NULL);

	// Collections
	CdbGroups                       Groups;
	};

/*****************************************************************************
* CdbGroup
*/
class DLLEXPORT CdbGroup : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbGroup                        (VOID);
	CONSTRUCTOR                     CdbGroup                        (DAOGroup *pgrp, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbGroup                        (const CdbGroup &);
	CdbGroup &                      operator =                      (const CdbGroup &);
	inline CdbUser          operator []                     (LONG lIndex);
	inline CdbUser          operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstr);
	VOID                            SetPID                          (LPCTSTR pstr);

	// Methods
	CdbUser                         CreateUser                      (LPCTSTR pstrName=NULL, LPCTSTR pstrPID=NULL, LPCTSTR pstrPassword=NULL);

	// Collections
	CdbUsers                        Users;
	};

/*****************************************************************************
* CdbDocument
*/
class DLLEXPORT CdbDocument : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbDocument                     (VOID);
	CONSTRUCTOR                     CdbDocument                     (DAODocument *pdoc, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbDocument                     (const CdbDocument &);
	CdbDocument &           operator =                      (const CdbDocument &);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	CString                         GetOwner                        (VOID);
	VOID                            SetOwner                        (LPCTSTR pstr);
	CString                         GetContainer            (VOID);
	CString                         GetUserName                     (VOID);
	VOID                            SetUserName                     (LPCTSTR pstr);
	LONG                            GetPermissions          (VOID);
	VOID                            SetPermissions          (LONG l);
	COleDateTime                    GetDateCreated          (VOID);
	COleDateTime                    GetLastUpdated          (VOID);
	LONG							GetAllPermissions		(VOID);
	//Methods
	CdbProperty						CreateProperty          (LPCTSTR pstrName=NULL, LONG lType=-1, LPVARIANT pvValue=NULL, BOOL bDDL=FALSE);
	};

/*****************************************************************************
* CdbContainer
*/
class DLLEXPORT CdbContainer : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbContainer            (VOID);
	CONSTRUCTOR                     CdbContainer            (DAOContainer *pctn, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbContainer            (const CdbContainer &);
	CdbContainer &          operator =                      (const CdbContainer &);
	inline CdbDocument      operator []                     (LONG lIndex);
	inline CdbDocument      operator []                     (LPCTSTR pstrIndex);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	CString                         GetName                         (VOID);
	CString                         GetOwner                        (VOID);
	VOID                            SetOwner                        (LPCTSTR pstr);
	CString                         GetUserName                     (VOID);
	VOID                            SetUserName                     (LPCTSTR pstr);
	LONG                            GetPermissions          (VOID);
	VOID                            SetPermissions          (LONG l);
	BOOL                            GetInherit                      (VOID);
	VOID                            SetInherit                      (BOOL b);
	LONG							GetAllPermissions		(VOID);

	// Collections
	CdbDocuments            Documents;
	};

/*****************************************************************************
* CdbError
*/
class DLLEXPORT CdbError : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbError                        (VOID);
	CONSTRUCTOR                     CdbError                        (DAOError *perr, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbError                        (const CdbError &);
	CdbError &                      operator =                      (const CdbError &);
	VOID                            OnInterfaceChange       (VOID);

	// Properties
	LONG                            GetNumber                       (VOID);
	CString                         GetSource                       (VOID);
	CString                         GetDescription          (VOID);
	CString                         GetHelpFile                     (VOID);
	LONG                            GetHelpContext          (VOID);
	};

/*****************************************************************************
* CdbProperty
*/
class DLLEXPORT CdbProperty : public CdbObject
	{
	public:

	// Administration
	CONSTRUCTOR                     CdbProperty                     (VOID);
	CONSTRUCTOR                     CdbProperty                     (DAOProperty *pprp, BOOL bAddRef=FALSE);
	CONSTRUCTOR                     CdbProperty                     (const CdbProperty &);
	CdbProperty &           operator =                      (const CdbProperty &);

	// Properties
	COleVariant                     GetValue                        (VOID);
	VOID                            SetValue                        (LPVARIANT pv);
	CString                         GetName                         (VOID);
	VOID                            SetName                         (LPCTSTR pstrName);
	SHORT                           GetType                         (VOID);
	VOID                            SetType                         (SHORT sType);
	BOOL                            GetInherited            (VOID);
	};


/*****************************************************************************
*  Inline functions
*/
inline BOOL	CdbOleObject::Exists(void)
	{ 
	return (m_punkInterface ? TRUE : FALSE);
	}

/*****************************************************************************
*  Recordset GetField functions
*/


inline VOID				CdbRecordset::GetFieldV(
	COleVariant &vIndex,
	COleVariant &vValue)
{
	DAORecordset *  prs     = (DAORecordset *)GetInterface();

	if (!prs)
		{
		DAOVINIT(vValue);
		return;
		}

	DAOMFC_CALL(prs->get_Collect(vIndex, &vValue));

	return;
}

inline VOID				CdbRecordset::SetFieldV(
	COleVariant &vIndex, 
	LPVARIANT pv)
{
	DAORecordset *  prs     = (DAORecordset *)GetInterface();

	if (!prs)
		return;

	DAOMFC_CALL(prs->put_Collect(vIndex, *pv));
}


/*****************************************************************************
* Default collection operators
*/
inline CdbWorkspace CdbDBEngine::operator []
	(LONG lIndex)
{
return Workspaces[lIndex];
}

inline CdbWorkspace CdbDBEngine::operator []
	(LPCTSTR pstrIndex)
{
return Workspaces[pstrIndex];
}


inline CdbDatabase CdbWorkspace::operator []
	(LONG lIndex)
{
return Databases[lIndex];
}

inline CdbDatabase CdbWorkspace::operator []
	(LPCTSTR pstrIndex)
{
return Databases[pstrIndex];
}

inline CdbTableDef      CdbDatabase::operator []
	(LONG lIndex)
{
return TableDefs[lIndex];
}

inline CdbTableDef      CdbDatabase::operator []
	(LPCTSTR pstrIndex)
{
return TableDefs[pstrIndex];
}

inline CdbQueryDef      CdbConnection::operator []
	(LONG lIndex)
{
return QueryDefs[lIndex];
}

inline CdbQueryDef      CdbConnection::operator []
	(LPCTSTR pstrIndex)
{
return QueryDefs[pstrIndex];
}

inline CdbField      CdbRecordset::operator []
	(LONG lIndex)
{
return Fields[lIndex];
}

inline CdbField      CdbRecordset::operator []
	(LPCTSTR pstrIndex)
{
return Fields[pstrIndex];
}



inline CdbField CdbTableDef::operator []        
	(LONG lIndex)
{
return Fields[lIndex];
}

inline CdbField CdbTableDef::operator []        
	(LPCTSTR pstrIndex)
{
return Fields[pstrIndex];
}

inline CdbField CdbQueryDef::operator []        
	(LONG lIndex)
{
return Fields[lIndex];
}

inline CdbField CdbQueryDef::operator []        
	(LPCTSTR pstrIndex)
{
return Fields[pstrIndex];
}

inline CdbField CdbIndex::operator []   
	(LONG lIndex)
{
return Fields[lIndex];
}

inline CdbField CdbIndex::operator []   
	(LPCTSTR pstrIndex)
{
return Fields[pstrIndex];
}

inline CdbField CdbRelation::operator []
	(LONG lIndex)
{
return Fields[lIndex];
}

inline CdbField CdbRelation::operator []
	(LPCTSTR pstrIndex)
{
return Fields[pstrIndex];
}

inline CdbGroup CdbUser::operator []
	(LONG lIndex)
{
return Groups[lIndex];
}

inline CdbGroup CdbUser::operator []
	(LPCTSTR pstrIndex)
{
return Groups[pstrIndex];
}

inline CdbUser CdbGroup::operator []
	(LONG lIndex)
{
return Users[lIndex];
}

inline CdbUser CdbGroup::operator []
	(LPCTSTR pstrIndex)
{
return Users[pstrIndex];
}

inline CdbDocument CdbContainer::operator []
	(LONG lIndex)
{
return Documents[lIndex];
}

inline CdbDocument CdbContainer::operator []
	(LPCTSTR pstrIndex)
{
return Documents[pstrIndex];
}

/*****************************************************************************
*  Use different DAO interface for wide (UNICODE) versions
*/

#ifdef _UNICODE

#define dbIID_IDAODBEngine IID_IDAODBEngineW
#define dbIID_IDAOError IID_IDAOErrorW
#define dbIID_IDAOErrors IID_IDAOErrorsW
#define dbIID_IDAOProperty IID_IDAOPropertyW
#define dbIID_IDAOProperties IID_IDAOPropertiesW
#define dbIID_IDAORecordset IID_IDAORecordsetW
#define dbIID_IDAORecordsets IID_IDAORecordsetsW
#define dbIID_IDAOWorkspace IID_IDAOWorkspaceW
#define dbIID_IDAOWorkspaces IID_IDAOWorkspacesW
#define dbIID_IDAOConnection IID_IDAOConnectionW
#define dbIID_IDAOConnections IID_IDAOConnectionsW
#define dbIID_IDAOTableDef IID_IDAOTableDefW
#define dbIID_IDAOTableDefs IID_IDAOTableDefsW
#define dbIID_IDAOField IID_IDAOFieldW
#define dbIID_IDAOFields IID_IDAOFieldsW
#define dbIID_IDAOIndex IID_IDAOIndexW
#define dbIID_IDAOIndexes IID_IDAOIndexesW
#define dbIID_IDAOIndexFields IID_IDAOIndexFieldsW
#define dbIID_IDAOGroup IID_IDAOGroupW
#define dbIID_IDAOGroups IID_IDAOGroupsW
#define dbIID_IDAOUser IID_IDAOUserW
#define dbIID_IDAOUsers IID_IDAOUsersW
#define dbIID_IDAODatabase IID_IDAODatabaseW
#define dbIID_IDAODatabases IID_IDAODatabasesW
#define dbIID_IDAOQueryDef IID_IDAOQueryDefW
#define dbIID_IDAOQueryDefs IID_IDAOQueryDefsW
#define dbIID_IDAOParameter IID_IDAOParameterW
#define dbIID_IDAOParameters IID_IDAOParametersW
#define dbIID_IDAORelation IID_IDAORelationW
#define dbIID_IDAORelations IID_IDAORelationsW
#define dbIID_IDAOContainer IID_IDAOContainerW
#define dbIID_IDAOContainers IID_IDAOContainersW
#define dbIID_IDAODocument IID_IDAODocumentW
#define dbIID_IDAODocuments IID_IDAODocumentsW

#else

#define dbIID_IDAODBEngine IID_IDAODBEngine
#define dbIID_IDAOError IID_IDAOError
#define dbIID_IDAOErrors IID_IDAOErrors
#define dbIID_IDAOProperty IID_IDAOProperty
#define dbIID_IDAOProperties IID_IDAOProperties
#define dbIID_IDAORecordset IID_IDAORecordset
#define dbIID_IDAORecordsets IID_IDAORecordsets
#define dbIID_IDAOWorkspace IID_IDAOWorkspace
#define dbIID_IDAOWorkspaces IID_IDAOWorkspaces
#define dbIID_IDAOConnection IID_IDAOConnection
#define dbIID_IDAOConnections IID_IDAOConnections
#define dbIID_IDAOTableDef IID_IDAOTableDef
#define dbIID_IDAOTableDefs IID_IDAOTableDefs
#define dbIID_IDAOField IID_IDAOField
#define dbIID_IDAOFields IID_IDAOFields
#define dbIID_IDAOIndex IID_IDAOIndex
#define dbIID_IDAOIndexes IID_IDAOIndexes
#define dbIID_IDAOIndexFields IID_IDAOIndexFields
#define dbIID_IDAOGroup IID_IDAOGroup
#define dbIID_IDAOGroups IID_IDAOGroups
#define dbIID_IDAOUser IID_IDAOUser
#define dbIID_IDAOUsers IID_IDAOUsers
#define dbIID_IDAODatabase IID_IDAODatabase
#define dbIID_IDAODatabases IID_IDAODatabases
#define dbIID_IDAOQueryDef IID_IDAOQueryDef
#define dbIID_IDAOQueryDefs IID_IDAOQueryDefs
#define dbIID_IDAOParameter IID_IDAOParameter
#define dbIID_IDAOParameters IID_IDAOParameters
#define dbIID_IDAORelation IID_IDAORelation
#define dbIID_IDAORelations IID_IDAORelations
#define dbIID_IDAOContainer IID_IDAOContainer
#define dbIID_IDAOContainers IID_IDAOContainers
#define dbIID_IDAODocument IID_IDAODocument
#define dbIID_IDAODocuments IID_IDAODocuments

#endif



#endif // _DBDAO_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\datguids.h ===
// fe7d6c53-2dac-446a-b0bd-d73e21e924c9
DEFINE_GUID(DATAFMT_SCRIPT,0xfe7d6c53,0x2dac,0x446a,0xb0,0xbd,0xd7,0x3e,0x21,0xe9,0x24,0xc9);
// 485da097-141e-4aa5-bb3b-a5618d95d02b
DEFINE_GUID(DATAFMT_EXEC,0x485da097,0x141e,0x4aa5,0xbb,0x3b,0xa5,0x61,0x8d,0x95,0xd0,0x2b);
// 1b7639b6-6357-47d1-9a07-12452dc073e9
DEFINE_GUID(DATAFMT_UNICODE16,0x1b7639b6,0x6357,0x47d1,0x9a,0x07,0x12,0x45,0x2d,0xc0,0x73,0xe9);
// 1b49cb32-e3a4-43f0-9c94-d0197bb97114
DEFINE_GUID(DATAFMT_HTML,0x1b49cb32,0xe3a4,0x43f0,0x9c,0x94,0xd0,0x19,0x7b,0xb9,0x71,0x14);
// 369eeeab-a0e8-45ca-86a6-a83ce5697e28
DEFINE_GUID(DATAFMT_DPOF,0x369eeeab,0xa0e8,0x45ca,0x86,0xa6,0xa8,0x3c,0xe5,0x69,0x7e,0x28);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\db2oledb.h ===
/*
    db2oledb.h
    Constant values for the Microsoft OLE DB Provider for DB2
    Version 05.00 (DBPROP_PROVIDERVER)
    Copyright (c) Microsoft Corporation.  All rights reserved.
*/

#ifndef __db2oledb_h__
#define __db2oledb_h__

#ifdef _DB2OLEDB_

extern const OLEDBDECLSPEC  CLSID CLSID_DB2ErrorLookup = {0x0DC5D5B6,0x21CB,0x11d2,{0x9C,0x5B,0x00,0x60,0xB0,0x3C,0x55,0x95}};;

extern const OLEDBDECLSPEC CLSID CLSID_DB2OLEDB = {0x0DC5D5B5,0x21CB,0x11d2,{0x9C,0x5B,0x00,0x60,0xB0,0x3C,0x55,0x95}};

extern const OLEDBDECLSPEC IID DB2OLEDB_DBPROPSET_DBINIT = { 0xd5a7c608, 0x37f8, 0x11d2, { 0x84, 0xf3, 0x0, 0x0, 0xf8, 0x7a, 0x53, 0xf8 }};

extern const OLEDBDECLSPEC CLSID CLSID_ConnPage = {0xD518F731,0x1EA9,0x11D3,{0xA6,0xE7,0x00,0x80,0xC7,0x1B,0x80,0x71}};

extern const OLEDBDECLSPEC CLSID CLSID_AdvPage = {0xF859C891,0x1EA9,0x11D3,{0xA6,0xE7,0x00,0x80,0xC7,0x1B,0x80,0x71}};

#endif
////////////////////////////////////////////////////////////////////////////////
// DB2OLEDB_DBPROPSET_DBINIT property enumeration


enum SNAOLEDB_DBPROPENUM
{
	DBPROP_DB2OLEDB_REMOTELU	= 0x02,         /* APPC Remote LU Alias. For SNA NETTYPE. */
	DBPROP_DB2OLEDB_LOCALLU		= 0x03,         /* APPC Local LU Alias. For SNA NETTYPE. */
	DBPROP_DB2OLEDB_APPCMODE	= 0x04,         /* APPC Mode Name. For SNA NETTYPE. */
	DBPROP_DB2OLEDB_NETTYPE		= 0x05,         /* Network Transport Library "SNA" or "TCPIP" */
	DBPROP_DB2OLEDB_HOSTCCSID	= 0x06,         /* Host CCSID. See Host Integration Server docs for supported values. */
	DBPROP_DB2OLEDB_PCCODEPAGE	= 0x07,         /* PC Code Page. See Host Integration Server docs for supported values. */
    DBPROP_DB2OLEDB_NETADDRESS  = 0x08,         /* Network Address. For TCPIP NETTYPE.  IP address or hostname */
    DBPROP_DB2OLEDB_NETPORT     = 0x09,         /* Network Port. For TCPIP NETTYPE. */

	DBPROP_DB2OLEDB_PACKAGECOL	= 0x30,         /* Package Collection */
	DBPROP_DB2OLEDB_CATALOGCOL	= 0x31,         /* Default Schema */
	DBPROP_DB2OLEDB_TPNAME		= 0x33,         /* Alternate TP Name. For SNA NETTYPE. */
	DBPROP_DB2OLEDB_UNITSOFWORK	= 0x36,         /* Units of Work */

	DBPROP_DB2OLEDB_BINASCHAR	= 0xa1,         /* Process Binary as Character */
};

/* Native Error Codes: */
#define DB2OLEDB_ERROR                      -1
#define DB2OLEDB_ERROR_SEND                 -2
#define DB2OLEDB_ERROR_RECEIVE              -3
#define DB2OLEDB_INVALID_POINTER            -4
#define DB2OLEDB_INVALID_PARAM              -5
#define DB2OLEDB_INVALID_DATA               -6
#define DB2OLEDB_INVALID_CONVERSION         -7
#define DB2OLEDB_INVALID_USER               -8
#define DB2OLEDB_ERROR_WRITE                -9
#define DB2OLEDB_ERROR_READ                 -10
#define DB2OLEDB_FILE_NOT_FOUND             -11
#define DB2OLEDB_INDEX_NOT_FOUND            -12
#define DB2OLEDB_RECORD_NOT_FOUND           -13
#define DB2OLEDB_KEY_NOT_FOUND              -14
#define DB2OLEDB_INVALID_FORMAT             -15
#define DB2OLEDB_MAX_CONNECTIONS            -16
#define DB2OLEDB_NOT_CONNECTED              -17
#define DB2OLEDB_NETWORK_ERROR              -18
#define DB2OLEDB_INVALID_DATASOURCE         -19
#define DB2OLEDB_ACCESS_DENIED              -20
#define DB2OLEDB_FILE_NOT_OPENED            -21
#define DB2OLEDB_MEMORY_ALLOC               -22
#define DB2OLEDB_DATA_NOT_FOUND             -23
#define DB2OLEDB_INDEX_EXISTS               -24
#define DB2OLEDB_FUNCTION_NOT_SUPPORTED     -25
#define DB2OLEDB_NO_CACHE                   -26
#define DB2OLEDB_FILE_LENGTH                -27
#define DB2OLEDB_INVALID_CONN_ID            -28
#define DB2OLEDB_INVALID_FILE_ID            -29
#define DB2OLEDB_INVALID_FILENAME           -30
#define DB2OLEDB_LOCAL_FILE_ERROR           -31
#define DB2OLEDB_INVALID_VIEW_ID            -32
#define DB2OLEDB_INVALID_VIEW               -33
#define DB2OLEDB_DISK_FULL                  -34
#define DB2OLEDB_DEST_FILE_CHANGED          -35
#define DB2OLEDB_FTX_FAILED                 -36
#define DB2OLEDB_FTX_ABORTED_BY_HOST        -37
#define DB2OLEDB_CONNECTION_LOST            -38
#define DB2OLEDB_CONNECTION_BUSY            -39
#define DB2OLEDB_HOST_NOT_RESPONDING        -40
#define DB2OLEDB_INVALID_DATA_CONV          -41
#define DB2OLEDB_DATA_TYPE_NOT_SUPPORTED    -42
#define DB2OLEDB_TIMEOUT                    -43
#define DB2OLEDB_DDMAGENT_NOT_LOADED        -44
#define DB2OLEDB_COMPONENT_MISSING          -45
#define DB2OLEDB_DCONV_DLL_NOT_FOUND        -46
#define DB2OLEDB_INVALID_STMT_HANDLE        -47
#define DB2OLEDB_VALUE_NOT_SUPPORTED        -48
#define DB2OLEDB_INTERNAL_ERROR             -50
#define DB2OLEDB_TOO_MANY_STATEMENTS        -51
#define DB2OLEDB_ENLIST_NO_XLN              -52  /* DTC hr = 0x8004D108 */
#define DB2OLEDB_ENLIST_DUP_TRAN            -53  /* DTC hr = 0x8004D10B */
#define DB2OLEDB_ENLIST_LU_BUSY             -54  /* DTC hr = 0x8004D10C */
#define DB2OLEDB_ENLIST_NO_RESYNCSVC        -55  /* DTC hr = 0x8004D10D */
#define DB2OLEDB_ENLIST_LU_DOWN             -56  /* DTC hr = 0x8004D10E, or D10A */
#define DB2OLEDB_ENLIST_LU_RECOVERING       -57  /* DTC hr = 0x8004D10F */
#define DB2OLEDB_ENLIST_XLN_MISMATCH        -58  /* DTC hr = 0x8004D110 */
#define DB2OLEDB_DTC_INIT_FAIL              -59  /* TP_START prc = AP_CANT_CONTACT_DTC */
#define DB2OLEDB_DUW_UNPROTECTED            -60  /* cfg = DUW, but no Enlist */
#define DB2OLEDB_SQL_ERROR                  -99
/* 
    DDM originated error codes
    The last segment of the constant identifier is the DDM Code Point name returned from the host
    Refer to IBM Publication: SC21-9526 DDM Architecture Reference
*/
#define DB2OLEDB_DDM_ERROR_START    -256
#define DB2OLEDB_DDM_ABNUOWRM    	(DB2OLEDB_DDM_ERROR_START-0)        /* -256 */
#define DB2OLEDB_DDM_ACCATHRM    	(DB2OLEDB_DDM_ERROR_START-1) 
#define DB2OLEDB_DDM_ACCINTRM    	(DB2OLEDB_DDM_ERROR_START-2) 
#define DB2OLEDB_DDM_ACCMTHRM    	(DB2OLEDB_DDM_ERROR_START-3) 
#define DB2OLEDB_DDM_ACCRDBRM    	(DB2OLEDB_DDM_ERROR_START-4) 
#define DB2OLEDB_DDM_AGNPRMRM    	(DB2OLEDB_DDM_ERROR_START-5) 
#define DB2OLEDB_DDM_BASNAMRM    	(DB2OLEDB_DDM_ERROR_START-6) 
#define DB2OLEDB_DDM_BGNBNDRM    	(DB2OLEDB_DDM_ERROR_START-7) 
#define DB2OLEDB_DDM_CHGFATRM    	(DB2OLEDB_DDM_ERROR_START-8) 
#define DB2OLEDB_DDM_CLSDMGRM    	(DB2OLEDB_DDM_ERROR_START-9) 
#define DB2OLEDB_DDM_CMBACCAM    	(DB2OLEDB_DDM_ERROR_START-10)       /* -266 */
#define DB2OLEDB_DDM_CMBKEYAM    	(DB2OLEDB_DDM_ERROR_START-11) 
#define DB2OLEDB_DDM_CMBRNBAM    	(DB2OLEDB_DDM_ERROR_START-12) 
#define DB2OLEDB_DDM_CMDATHRM    	(DB2OLEDB_DDM_ERROR_START-13) 
#define DB2OLEDB_DDM_CMDCHKRM    	(DB2OLEDB_DDM_ERROR_START-14) 
#define DB2OLEDB_DDM_CMDCMPRM    	(DB2OLEDB_DDM_ERROR_START-15) 
#define DB2OLEDB_DDM_CMDNSPRM    	(DB2OLEDB_DDM_ERROR_START-16) 
#define DB2OLEDB_DDM_CMDVLTRM    	(DB2OLEDB_DDM_ERROR_START-17) 
#define DB2OLEDB_DDM_CMMRQSRM    	(DB2OLEDB_DDM_ERROR_START-18) 
#define DB2OLEDB_DDM_CSRNSARM    	(DB2OLEDB_DDM_ERROR_START-19) 
#define DB2OLEDB_DDM_DCLCNFRM    	(DB2OLEDB_DDM_ERROR_START-20)       /* -276 */
#define DB2OLEDB_DDM_DCLNAMRM    	(DB2OLEDB_DDM_ERROR_START-21) 
#define DB2OLEDB_DDM_DCLNFNRM    	(DB2OLEDB_DDM_ERROR_START-22) 
#define DB2OLEDB_DDM_DRCATHRM    	(DB2OLEDB_DDM_ERROR_START-23) 
#define DB2OLEDB_DDM_DRCDMGRM    	(DB2OLEDB_DDM_ERROR_START-24) 
#define DB2OLEDB_DDM_DRCENTRM    	(DB2OLEDB_DDM_ERROR_START-25) 
#define DB2OLEDB_DDM_DRCFULRM    	(DB2OLEDB_DDM_ERROR_START-26) 
#define DB2OLEDB_DDM_DRCIUSRM    	(DB2OLEDB_DDM_ERROR_START-27) 
#define DB2OLEDB_DDM_DRCNAMRM    	(DB2OLEDB_DDM_ERROR_START-28) 
#define DB2OLEDB_DDM_DRCNEMRM    	(DB2OLEDB_DDM_ERROR_START-29) 
#define DB2OLEDB_DDM_DRCNFNRM    	(DB2OLEDB_DDM_ERROR_START-30)       /* -286 */
#define DB2OLEDB_DDM_DRCSNARM    	(DB2OLEDB_DDM_ERROR_START-31) 
#define DB2OLEDB_DDM_DRCSUBRM    	(DB2OLEDB_DDM_ERROR_START-32) 
#define DB2OLEDB_DDM_DRCTNARM    	(DB2OLEDB_DDM_ERROR_START-33) 
#define DB2OLEDB_DDM_DSCINVRM    	(DB2OLEDB_DDM_ERROR_START-34) 
#define DB2OLEDB_DDM_DTAMAPRM    	(DB2OLEDB_DDM_ERROR_START-35) 
#define DB2OLEDB_DDM_DTAMCHRM    	(DB2OLEDB_DDM_ERROR_START-36) 
#define DB2OLEDB_DDM_DTANFNRM    	(DB2OLEDB_DDM_ERROR_START-37) 
#define DB2OLEDB_DDM_DTARECRM    	(DB2OLEDB_DDM_ERROR_START-38) 
#define DB2OLEDB_DDM_DUPDCLRM    	(DB2OLEDB_DDM_ERROR_START-39) 
#define DB2OLEDB_DDM_DUPDRCRM    	(DB2OLEDB_DDM_ERROR_START-40)       /* -296 */
#define DB2OLEDB_DDM_DUPFILRM    	(DB2OLEDB_DDM_ERROR_START-41) 
#define DB2OLEDB_DDM_DUPKDIRM    	(DB2OLEDB_DDM_ERROR_START-42) 
#define DB2OLEDB_DDM_DUPKSIRM    	(DB2OLEDB_DDM_ERROR_START-43) 
#define DB2OLEDB_DDM_DUPQUERM    	(DB2OLEDB_DDM_ERROR_START-44) 
#define DB2OLEDB_DDM_DUPRNBRM    	(DB2OLEDB_DDM_ERROR_START-45) 
#define DB2OLEDB_DDM_ENDFILRM    	(DB2OLEDB_DDM_ERROR_START-46) 
#define DB2OLEDB_DDM_ENDQRYRM    	(DB2OLEDB_DDM_ERROR_START-47) 
#define DB2OLEDB_DDM_ENDUOWRM    	(DB2OLEDB_DDM_ERROR_START-48) 
#define DB2OLEDB_DDM_EXSCNDRM    	(DB2OLEDB_DDM_ERROR_START-49) 
#define DB2OLEDB_DDM_FILATHRM    	(DB2OLEDB_DDM_ERROR_START-50)       /* -306 */
#define DB2OLEDB_DDM_FILDMGRM    	(DB2OLEDB_DDM_ERROR_START-51) 
#define DB2OLEDB_DDM_FILFULRM    	(DB2OLEDB_DDM_ERROR_START-52) 
#define DB2OLEDB_DDM_FILIUSRM    	(DB2OLEDB_DDM_ERROR_START-53) 
#define DB2OLEDB_DDM_FILNAMRM    	(DB2OLEDB_DDM_ERROR_START-54) 
#define DB2OLEDB_DDM_FILNFNRM    	(DB2OLEDB_DDM_ERROR_START-55) 
#define DB2OLEDB_DDM_FILNOPRM    	(DB2OLEDB_DDM_ERROR_START-56) 
#define DB2OLEDB_DDM_FILOLORM    	(DB2OLEDB_DDM_ERROR_START-57) 
#define DB2OLEDB_DDM_FILSNARM    	(DB2OLEDB_DDM_ERROR_START-58) 
#define DB2OLEDB_DDM_FILTNARM    	(DB2OLEDB_DDM_ERROR_START-59) 
#define DB2OLEDB_DDM_INTATHRM    	(DB2OLEDB_DDM_ERROR_START-60)       /* -316 */
#define DB2OLEDB_DDM_INTTKNRM    	(DB2OLEDB_DDM_ERROR_START-61) 
#define DB2OLEDB_DDM_INVRQSRM    	(DB2OLEDB_DDM_ERROR_START-62) 
#define DB2OLEDB_DDM_INVUSRRM    	(DB2OLEDB_DDM_ERROR_START-63) 
#define DB2OLEDB_DDM_KEYDEFRM    	(DB2OLEDB_DDM_ERROR_START-64) 
#define DB2OLEDB_DDM_KEYLENRM    	(DB2OLEDB_DDM_ERROR_START-65) 
#define DB2OLEDB_DDM_KEYMODRM    	(DB2OLEDB_DDM_ERROR_START-66) 
#define DB2OLEDB_DDM_KEYUDIRM    	(DB2OLEDB_DDM_ERROR_START-67) 
#define DB2OLEDB_DDM_KEYUSIRM    	(DB2OLEDB_DDM_ERROR_START-68) 
#define DB2OLEDB_DDM_KEYVALRM    	(DB2OLEDB_DDM_ERROR_START-69) 
#define DB2OLEDB_DDM_LODSTRRM    	(DB2OLEDB_DDM_ERROR_START-70)       /* -326 */
#define DB2OLEDB_DDM_MGMATHRM    	(DB2OLEDB_DDM_ERROR_START-71) 
#define DB2OLEDB_DDM_MGMCLSNM    	(DB2OLEDB_DDM_ERROR_START-72) 
#define DB2OLEDB_DDM_MGMCNFRM    	(DB2OLEDB_DDM_ERROR_START-73) 
#define DB2OLEDB_DDM_MGMNFNRM    	(DB2OLEDB_DDM_ERROR_START-74) 
#define DB2OLEDB_DDM_MGRDEPRM    	(DB2OLEDB_DDM_ERROR_START-75) 
#define DB2OLEDB_DDM_MGRLVLRM    	(DB2OLEDB_DDM_ERROR_START-76) 
#define DB2OLEDB_DDM_NEWDRNRM    	(DB2OLEDB_DDM_ERROR_START-77) 
#define DB2OLEDB_DDM_NEWNAMRM    	(DB2OLEDB_DDM_ERROR_START-78) 
#define DB2OLEDB_DDM_OBJNSPRM    	(DB2OLEDB_DDM_ERROR_START-79) 
#define DB2OLEDB_DDM_OPNCNFRM    	(DB2OLEDB_DDM_ERROR_START-80)       /* -336 */
#define DB2OLEDB_DDM_OPNEXCRM    	(DB2OLEDB_DDM_ERROR_START-81) 
#define DB2OLEDB_DDM_OPNMAXRM    	(DB2OLEDB_DDM_ERROR_START-82) 
#define DB2OLEDB_DDM_OPNQFLRM    	(DB2OLEDB_DDM_ERROR_START-83) 
#define DB2OLEDB_DDM_OPNQRYRM    	(DB2OLEDB_DDM_ERROR_START-84) 
#define DB2OLEDB_DDM_PKGBNARM    	(DB2OLEDB_DDM_ERROR_START-85) 
#define DB2OLEDB_DDM_PKGBPARM    	(DB2OLEDB_DDM_ERROR_START-86) 
#define DB2OLEDB_DDM_PRCCNVRM    	(DB2OLEDB_DDM_ERROR_START-87) 
#define DB2OLEDB_DDM_PRMNSPRM    	(DB2OLEDB_DDM_ERROR_START-88) 
#define DB2OLEDB_DDM_QRYNOPRM    	(DB2OLEDB_DDM_ERROR_START-89) 
#define DB2OLEDB_DDM_QRYPOPRM    	(DB2OLEDB_DDM_ERROR_START-90)       /* -346 */
#define DB2OLEDB_DDM_QUEATHRM    	(DB2OLEDB_DDM_ERROR_START-91) 
#define DB2OLEDB_DDM_QUEDMGRM    	(DB2OLEDB_DDM_ERROR_START-92) 
#define DB2OLEDB_DDM_QUEFULRM    	(DB2OLEDB_DDM_ERROR_START-93) 
#define DB2OLEDB_DDM_QUEIUSRM    	(DB2OLEDB_DDM_ERROR_START-94) 
#define DB2OLEDB_DDM_QUELENRM    	(DB2OLEDB_DDM_ERROR_START-95) 
#define DB2OLEDB_DDM_QUENAMRM    	(DB2OLEDB_DDM_ERROR_START-96) 
#define DB2OLEDB_DDM_QUENFNRM    	(DB2OLEDB_DDM_ERROR_START-97) 
#define DB2OLEDB_DDM_QUETNARM    	(DB2OLEDB_DDM_ERROR_START-98) 
#define DB2OLEDB_DDM_QUEVANRM    	(DB2OLEDB_DDM_ERROR_START-99) 
#define DB2OLEDB_DDM_RDBACCRM    	(DB2OLEDB_DDM_ERROR_START-100)      /* -356 */
#define DB2OLEDB_DDM_RDBAFLRM    	(DB2OLEDB_DDM_ERROR_START-101) 
#define DB2OLEDB_DDM_RDBATHRM    	(DB2OLEDB_DDM_ERROR_START-102) 
#define DB2OLEDB_DDM_RDBNACRM    	(DB2OLEDB_DDM_ERROR_START-103) 
#define DB2OLEDB_DDM_RDBNFNRM    	(DB2OLEDB_DDM_ERROR_START-104) 
#define DB2OLEDB_DDM_RDBUPDRM    	(DB2OLEDB_DDM_ERROR_START-105) 
#define DB2OLEDB_DDM_RECCNTRM    	(DB2OLEDB_DDM_ERROR_START-106) 
#define DB2OLEDB_DDM_RECDMGRM    	(DB2OLEDB_DDM_ERROR_START-107) 
#define DB2OLEDB_DDM_RECINARM    	(DB2OLEDB_DDM_ERROR_START-108) 
#define DB2OLEDB_DDM_RECIUSRM    	(DB2OLEDB_DDM_ERROR_START-109) 
#define DB2OLEDB_DDM_RECLENRM    	(DB2OLEDB_DDM_ERROR_START-110)      /* -366 */
#define DB2OLEDB_DDM_RECNAVRM    	(DB2OLEDB_DDM_ERROR_START-111) 
#define DB2OLEDB_DDM_RECNBRRM    	(DB2OLEDB_DDM_ERROR_START-112) 
#define DB2OLEDB_DDM_RECNFNRM    	(DB2OLEDB_DDM_ERROR_START-113) 
#define DB2OLEDB_DDM_RSCLMTRM    	(DB2OLEDB_DDM_ERROR_START-114) 
#define DB2OLEDB_DDM_SHDEXSRM    	(DB2OLEDB_DDM_ERROR_START-115) 
#define DB2OLEDB_DDM_SQLERRRM    	(DB2OLEDB_DDM_ERROR_START-116) 
#define DB2OLEDB_DDM_STGATHRM    	(DB2OLEDB_DDM_ERROR_START-117) 
#define DB2OLEDB_DDM_STGNFNRM    	(DB2OLEDB_DDM_ERROR_START-118) 
#define DB2OLEDB_DDM_STPCMPRM    	(DB2OLEDB_DDM_ERROR_START-119) 
#define DB2OLEDB_DDM_STRDMGRM    	(DB2OLEDB_DDM_ERROR_START-120)      /* -376 */
#define DB2OLEDB_DDM_STRIUSRM    	(DB2OLEDB_DDM_ERROR_START-121) 
#define DB2OLEDB_DDM_SUBSTRRM    	(DB2OLEDB_DDM_ERROR_START-122) 
#define DB2OLEDB_DDM_SYNTAXRM    	(DB2OLEDB_DDM_ERROR_START-123) 
#define DB2OLEDB_DDM_SYSCMDRM    	(DB2OLEDB_DDM_ERROR_START-124) 
#define DB2OLEDB_DDM_TRGNSPRM    	(DB2OLEDB_DDM_ERROR_START-125) 
#define DB2OLEDB_DDM_UPDCSRRM    	(DB2OLEDB_DDM_ERROR_START-126) 
#define DB2OLEDB_DDM_UPDINTRM    	(DB2OLEDB_DDM_ERROR_START-127) 
#define DB2OLEDB_DDM_USRATTRM    	(DB2OLEDB_DDM_ERROR_START-128) 
#define DB2OLEDB_DDM_VALNSPRM    	(DB2OLEDB_DDM_ERROR_START-129) 
#define DB2OLEDB_DDM_DFTRECRM       (DB2OLEDB_DDM_ERROR_START-130)      /* -386 */
#define DB2OLEDB_DDM_STGCNFRM       (DB2OLEDB_DDM_ERROR_START-131)

/*
    DB2OLEDB Communications Error Codes.
    Refer to Microsoft Host Integration Server SDK Documentation: APPC Programmer's Guide.
    Some error codes are related to TCP/IP communications.
*/ 
#define DB2OLEDB_COMM_ERROR_START                   -512
#define DB2OLEDB_COMM_PARAMETER_CHECK               (DB2OLEDB_COMM_ERROR_START)         /* APPC Errors: */
#define DB2OLEDB_COMM_BAD_TP_ID                     (DB2OLEDB_COMM_ERROR_START-1)
#define DB2OLEDB_COMM_BAD_CONV_ID                   (DB2OLEDB_COMM_ERROR_START-2)
#define DB2OLEDB_COMM_BAD_LU_ALIAS                  (DB2OLEDB_COMM_ERROR_START-3)
#define DB2OLEDB_COMM_INVALID_DATA_SEGMENT          (DB2OLEDB_COMM_ERROR_START-4)
#define DB2OLEDB_COMM_BAD_CONV_TYPE                 (DB2OLEDB_COMM_ERROR_START-5)
#define DB2OLEDB_COMM_BAD_SYNC_LEVEL                (DB2OLEDB_COMM_ERROR_START-6)
#define DB2OLEDB_COMM_BAD_SECURITY                  (DB2OLEDB_COMM_ERROR_START-7)
#define DB2OLEDB_COMM_BAD_RETURN_CONTROL            (DB2OLEDB_COMM_ERROR_START-8)       /* -520 */
#define DB2OLEDB_COMM_PIP_LEN_INCORRECT             (DB2OLEDB_COMM_ERROR_START-9)
#define DB2OLEDB_COMM_NO_USE_OF_SNASVCMG            (DB2OLEDB_COMM_ERROR_START-10)
#define DB2OLEDB_COMM_UNKNOWN_PARTNER_MODE          (DB2OLEDB_COMM_ERROR_START-11)
#define DB2OLEDB_COMM_CONFIRM_ON_SYNC_LEVEL_NONE    (DB2OLEDB_COMM_ERROR_START-12)
#define DB2OLEDB_COMM_DEALLOC_BAD_TYPE              (DB2OLEDB_COMM_ERROR_START-13)
#define DB2OLEDB_COMM_DEALLOC_LOG_LL_WRONG          (DB2OLEDB_COMM_ERROR_START-14)
#define DB2OLEDB_COMM_P_TO_R_INVALID_TYPE           (DB2OLEDB_COMM_ERROR_START-15)
#define DB2OLEDB_COMM_RCV_AND_WAIT_BAD_FILL         (DB2OLEDB_COMM_ERROR_START-16)
#define DB2OLEDB_COMM_RCV_IMMD_BAD_FILL             (DB2OLEDB_COMM_ERROR_START-17)
#define DB2OLEDB_COMM_RCV_AND_POST_BAD_FILL         (DB2OLEDB_COMM_ERROR_START-18)      /* -530 */
#define DB2OLEDB_COMM_INVALID_SEMAPHORE_HANDLE      (DB2OLEDB_COMM_ERROR_START-19)
#define DB2OLEDB_COMM_BAD_RETURN_STATUS_WITH_DATA   (DB2OLEDB_COMM_ERROR_START-20)
#define DB2OLEDB_COMM_BAD_LL                        (DB2OLEDB_COMM_ERROR_START-21)
#define DB2OLEDB_COMM_SEND_DATA_INVALID_TYPE        (DB2OLEDB_COMM_ERROR_START-22)
#define DB2OLEDB_COMM_INVALID_SESSION_ID            (DB2OLEDB_COMM_ERROR_START-23)
#define DB2OLEDB_COMM_SEND_DATA_CONFIRM_SYNC_NONE   (DB2OLEDB_COMM_ERROR_START-24)
#define DB2OLEDB_COMM_BAD_PARTNER_LU_ALIAS          (DB2OLEDB_COMM_ERROR_START-25) 
#define DB2OLEDB_COMM_SEND_ERROR_LOG_LL_WRONG       (DB2OLEDB_COMM_ERROR_START-26)
#define DB2OLEDB_COMM_SEND_ERROR_BAD_TYPE           (DB2OLEDB_COMM_ERROR_START-27) 
#define DB2OLEDB_COMM_BAD_ERROR_DIRECTION           (DB2OLEDB_COMM_ERROR_START-28)      /* -540 */
#define DB2OLEDB_COMM_TOO_MANY_TPS                  (DB2OLEDB_COMM_ERROR_START-29) 
#define DB2OLEDB_COMM_BAD_TYPE                      (DB2OLEDB_COMM_ERROR_START-30) 
#define DB2OLEDB_COMM_UNDEFINED_TP_NAME             (DB2OLEDB_COMM_ERROR_START-31) 

#define DB2OLEDB_COMM_STATE_CHECK                   (DB2OLEDB_COMM_ERROR_START-32)
#define DB2OLEDB_COMM_CONFIRM_BAD_STATE             (DB2OLEDB_COMM_ERROR_START-33)
#define DB2OLEDB_COMM_CONFIRM_NOT_LL_BDY            (DB2OLEDB_COMM_ERROR_START-34)
#define DB2OLEDB_COMM_CONFIRMED_BAD_STATE           (DB2OLEDB_COMM_ERROR_START-35)
#define DB2OLEDB_COMM_DEALLOC_FLUSH_BAD_STATE       (DB2OLEDB_COMM_ERROR_START-36)
#define DB2OLEDB_COMM_DEALLOC_CONFIRM_BAD_STATE     (DB2OLEDB_COMM_ERROR_START-37)
#define DB2OLEDB_COMM_DEALLOC_NOT_LL_BDY            (DB2OLEDB_COMM_ERROR_START-38)      /* -550 */
#define DB2OLEDB_COMM_FLUSH_NOT_SEND_STATE          (DB2OLEDB_COMM_ERROR_START-39)
#define DB2OLEDB_COMM_P_TO_R_NOT_LL_BDY             (DB2OLEDB_COMM_ERROR_START-40)
#define DB2OLEDB_COMM_P_TO_R_NOT_SEND_STATE         (DB2OLEDB_COMM_ERROR_START-41)
#define DB2OLEDB_COMM_RCV_AND_WAIT_BAD_STATE        (DB2OLEDB_COMM_ERROR_START-42)
#define DB2OLEDB_COMM_RCV_AND_WAIT_NOT_LL_BDY       (DB2OLEDB_COMM_ERROR_START-43)
#define DB2OLEDB_COMM_RCV_IMMD_BAD_STATE            (DB2OLEDB_COMM_ERROR_START-44)
#define DB2OLEDB_COMM_RCV_AND_POST_BAD_STATE        (DB2OLEDB_COMM_ERROR_START-45)
#define DB2OLEDB_COMM_RCV_AND_POST_NOT_LL_BDY       (DB2OLEDB_COMM_ERROR_START-46)
#define DB2OLEDB_COMM_R_T_S_BAD_STATE               (DB2OLEDB_COMM_ERROR_START-47)
#define DB2OLEDB_COMM_SEND_DATA_NOT_SEND_STATE      (DB2OLEDB_COMM_ERROR_START-48)      /* -560 */
#define DB2OLEDB_COMM_SEND_DATA_NOT_LL_BDY          (DB2OLEDB_COMM_ERROR_START-49)
#define DB2OLEDB_COMM_ATTACH_MANAGER_INACTIVE       (DB2OLEDB_COMM_ERROR_START-50)
#define DB2OLEDB_COMM_ALLOCATE_NOT_PENDING          (DB2OLEDB_COMM_ERROR_START-51)
#define DB2OLEDB_COMM_INVALID_PROCESS               (DB2OLEDB_COMM_ERROR_START-52)

#define DB2OLEDB_COMM_ALLOCATION_ERROR              (DB2OLEDB_COMM_ERROR_START-53)
#define DB2OLEDB_COMM_ALLOCATION_FAILURE_NO_RETRY   (DB2OLEDB_COMM_ERROR_START-54)
#define DB2OLEDB_COMM_ALLOCATION_FAILURE_RETRY      (DB2OLEDB_COMM_ERROR_START-55)
#define DB2OLEDB_COMM_SECURITY_NOT_VALID            (DB2OLEDB_COMM_ERROR_START-56)
#define DB2OLEDB_COMM_TRANS_PGM_NOT_AVAIL_RETRY     (DB2OLEDB_COMM_ERROR_START-57)
#define DB2OLEDB_COMM_TRANS_PGM_NOT_AVAIL_NO_RETRY  (DB2OLEDB_COMM_ERROR_START-58)      /* -570 */
#define DB2OLEDB_COMM_TP_NAME_NOT_RECOGNIZED        (DB2OLEDB_COMM_ERROR_START-59)
#define DB2OLEDB_COMM_PIP_NOT_ALLOWED               (DB2OLEDB_COMM_ERROR_START-60)
#define DB2OLEDB_COMM_PIP_NOT_SPECIFIED_CORRECTLY   (DB2OLEDB_COMM_ERROR_START-61)
#define DB2OLEDB_COMM_CONVERSATION_TYPE_MISMATCH    (DB2OLEDB_COMM_ERROR_START-62)
#define DB2OLEDB_COMM_SYNC_LEVEL_NOT_SUPPORTED      (DB2OLEDB_COMM_ERROR_START-63)

#define DB2OLEDB_COMM_DEALLOC_ABEND                 (DB2OLEDB_COMM_ERROR_START-64)
#define DB2OLEDB_COMM_DEALLOC_ABEND_PROG            (DB2OLEDB_COMM_ERROR_START-65)
#define DB2OLEDB_COMM_DEALLOC_ABEND_SVC             (DB2OLEDB_COMM_ERROR_START-66)
#define DB2OLEDB_COMM_DEALLOC_ABEND_TIMER           (DB2OLEDB_COMM_ERROR_START-67)
#define DB2OLEDB_COMM_DEALLOC_NORMAL                (DB2OLEDB_COMM_ERROR_START-68)      /* -580 */
#define DB2OLEDB_COMM_PROG_ERROR_NO_TRUNC           (DB2OLEDB_COMM_ERROR_START-69)
#define DB2OLEDB_COMM_PROG_ERROR_TRUNC              (DB2OLEDB_COMM_ERROR_START-70)
#define DB2OLEDB_COMM_PROG_ERROR_PURGING            (DB2OLEDB_COMM_ERROR_START-71)
#define DB2OLEDB_COMM_CONV_FAILURE_RETRY            (DB2OLEDB_COMM_ERROR_START-72)
#define DB2OLEDB_COMM_CONV_FAILURE_NO_RETRY         (DB2OLEDB_COMM_ERROR_START-73)
#define DB2OLEDB_COMM_SVC_ERROR_NO_TRUNC            (DB2OLEDB_COMM_ERROR_START-74)
#define DB2OLEDB_COMM_SVC_ERROR_TRUNC               (DB2OLEDB_COMM_ERROR_START-75)
#define DB2OLEDB_COMM_SVC_ERROR_PURGING             (DB2OLEDB_COMM_ERROR_START-76)
#define DB2OLEDB_COMM_UNSUCCESSFUL                  (DB2OLEDB_COMM_ERROR_START-77)
#define DB2OLEDB_COMM_CONVERSATION_TYPE_MIXED       (DB2OLEDB_COMM_ERROR_START-78)      /* -590 */
#define DB2OLEDB_COMM_CANCELLED                     (DB2OLEDB_COMM_ERROR_START-79)
#define DB2OLEDB_COMM_SECURITY_REQ_NOT_SUPPORTED    (DB2OLEDB_COMM_ERROR_START-80)
#define DB2OLEDB_COMM_TP_BUSY                       (DB2OLEDB_COMM_ERROR_START-81)      
#define DB2OLEDB_COMM_COMM_SUBSYSTEM_ABENDED        (DB2OLEDB_COMM_ERROR_START-82)      
#define DB2OLEDB_COMM_COMM_SUBSYSTEM_NOT_LOADED     (DB2OLEDB_COMM_ERROR_START-83)      
#define DB2OLEDB_COMM_CONV_BUSY                     (DB2OLEDB_COMM_ERROR_START-84)     
#define DB2OLEDB_COMM_THREAD_BLOCKING               (DB2OLEDB_COMM_ERROR_START-85)     
#define DB2OLEDB_COMM_INVALID_VERB_SEGMENT          (DB2OLEDB_COMM_ERROR_START-86)      
#define DB2OLEDB_COMM_UNEXPECTED_DOS_ERROR          (DB2OLEDB_COMM_ERROR_START-87)      
#define DB2OLEDB_COMM_STACK_TOO_SMALL               (DB2OLEDB_COMM_ERROR_START-88)      /* -600 */
#define DB2OLEDB_COMM_INVALID_VERB                  (DB2OLEDB_COMM_ERROR_START-89)
#define DB2OLEDB_COMM_HOST_NAMERESOLV_FAILED        (DB2OLEDB_COMM_ERROR_START-90)      /* TCP/IP Errors: */
#define DB2OLEDB_COMM_HOST_CONNECT_FAILED           (DB2OLEDB_COMM_ERROR_START-91)
#define DB2OLEDB_COMM_SOCKET_ALLOC_FAILED           (DB2OLEDB_COMM_ERROR_START-92)


#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\dbdaoerr.h ===
/************************************************************************
**	D B D A O E R R . H													*														*
**																		*
**		History 														*
**		------- 														*
**	5-17-95 Added to DAO SDK				 							*
**	7-17-95 Added DBDAOERR macro, removed internal only codes																	*
**	8-30-96 Added replication and ODBC direct errors																	*
**																		*
**	The following #defines map the integer to a descriptive name
**	i.e.  3270 -> E_DAO_VtoPropNotFound									*
**																		*
**																		*
*************************************************************************
** Copyright (C) 1996 by Microsoft Corporation		 					*
**		   All Rights Reserved					 						*
************************************************************************/

#ifndef _DDAOERR_H_
#define _DDAOERR_H_

#define DBDAOERR(x) MAKE_SCODE(SEVERITY_ERROR, FACILITY_CONTROL, x)

#define E_DAO_InternalError					DBDAOERR(3000) //Reserved error (|); there is no message for this error.
#define E_DAO_InvalidParameter				DBDAOERR(3001) //Invalid argument.
#define E_DAO_CantBegin						DBDAOERR(3002) //Couldn't start session.
#define E_DAO_TransTooDeep					DBDAOERR(3003) //Couldn't start transaction; too many transactions already nested.
#define E_DAO_DatabaseNotFound				DBDAOERR(3004) //Couldn't find database '|'.
#define E_DAO_DatabaseInvalidName			DBDAOERR(3005) //'|' isn't a valid database name.
#define E_DAO_DatabaseLocked				DBDAOERR(3006) //Database '|' is exclusively locked.
#define E_DAO_DatabaseOpenError				DBDAOERR(3007) //Can't open library database '|'.
#define E_DAO_TableLocked					DBDAOERR(3008) //Table '|' is exclusively locked.
#define E_DAO_TableInUse					DBDAOERR(3009) //Couldn't lock table '|'; currently in use.
#define E_DAO_TableDuplicate				DBDAOERR(3010) //Table '|' already exists.
#define E_DAO_ObjectNotFound				DBDAOERR(3011) //Couldn't find object '|'.
#define E_DAO_ObjectDuplicate				DBDAOERR(3012) //Object '|' already exists.
#define E_DAO_CannotRename					DBDAOERR(3013) //Couldn't rename installable ISAM file.
#define E_DAO_TooManyOpenTables				DBDAOERR(3014) //Can't open any more tables.
#define E_DAO_IndexNotFound					DBDAOERR(3015) //'|' isn't an index in this table.
#define E_DAO_ColumnDoesNotFit 				DBDAOERR(3016) //Field won't fit in record.
#define E_DAO_ColumnTooBig					DBDAOERR(3017) //The size of a field is too long.
#define E_DAO_ColumnNotFound				DBDAOERR(3018) //Couldn't find field '|'.
#define E_DAO_NoCurrentIndex				DBDAOERR(3019) //Operation invalid without a current index.
#define E_DAO_RecordNoCopy					DBDAOERR(3020) //Update or CancelUpdate without AddNew or Edit.
#define E_DAO_NoCurrentRecord				DBDAOERR(3021) //No current record.
#define E_DAO_KeyDuplicate					DBDAOERR(3022) //Duplicate value in index, primary key, or relationship.  Changes were unsuccessful.
#define E_DAO_AlreadyPrepared				DBDAOERR(3023) //AddNew or Edit already used.
#define E_DAO_FileNotFound					DBDAOERR(3024) //Couldn't find file '|'.
#define E_DAO_TooManyOpenFiles				DBDAOERR(3025) //Can't open any more files.
#define E_DAO_DiskFull						DBDAOERR(3026) //Not enough space on disk.
#define E_DAO_PermissionDenied				DBDAOERR(3027) //Can't update.  Database or object is read-only.
#define E_DAO_CannotOpenSystemDb			DBDAOERR(3028) //Can't start your application. The system database is missing or opened exclusively by another user.
#define E_DAO_InvalidLogon					DBDAOERR(3029) //Not a valid account name or password.
#define E_DAO_InvalidAccountName			DBDAOERR(3030) //'|' isn't a valid account name.
#define E_DAO_InvalidPassword				DBDAOERR(3031) //Not a valid password.
#define E_DAO_InvalidOperation				DBDAOERR(3032) //Can't perform this operation.
#define E_DAO_AccessDenied					DBDAOERR(3033) //No permission for '|'.
#define E_DAO_NotInTransaction				DBDAOERR(3034) //Commit or Rollback without BeginTrans.
#define E_DAO_OutOfMemory					DBDAOERR(3035) //*
#define E_DAO_CantAllocatePage				DBDAOERR(3036) //Database has reached maximum size.
#define E_DAO_NoMoreCursors					DBDAOERR(3037) //Can't open any more tables or queries.
#define E_DAO_OutOfBuffers					DBDAOERR(3038) //*
#define E_DAO_TooManyIndexes				DBDAOERR(3039) //Couldn't create index; too many indexes already defined.
#define E_DAO_ReadVerifyFailure				DBDAOERR(3040) //Disk I/O error during read.
#define E_DAO_FilesysVersion				DBDAOERR(3041) //Can't open a database created with a previous version of your application.
#define E_DAO_NoMoreFiles					DBDAOERR(3042) //Out of MS-DOS file handles.
#define E_DAO_DiskError						DBDAOERR(3043) //Disk or network error.
#define E_DAO_InvalidPath					DBDAOERR(3044) //'|' isn't a valid path.
#define E_DAO_FileShareViolation			DBDAOERR(3045) //Couldn't use '|'; file already in use.
#define E_DAO_FileLockViolation				DBDAOERR(3046) //Couldn't save; currently locked by another user.
#define E_DAO_RecordTooBig					DBDAOERR(3047) //Record is too large.
#define E_DAO_TooManyOpenDatabases			DBDAOERR(3048) //Can't open any more databases.
#define E_DAO_InvalidDatabase				DBDAOERR(3049) //Can't open database '|'.  It may not be a database that your application recognizes, or the file may be corrupt.
#define E_DAO_FileLockingUnavailable		DBDAOERR(3050) //Couldn't lock file.
#define E_DAO_FileAccessDenied				DBDAOERR(3051) //Couldn't open file '|'.
#define E_DAO_SharingBufferExceeded			DBDAOERR(3052) //MS-DOS file sharing lock count exceeded.  You need to increase the number of locks installed with SHARE.EXE.
#define E_DAO_TaskLimitExceeded				DBDAOERR(3053) //Too many client tasks.
#define E_DAO_TooManyLongColumns			DBDAOERR(3054) //Too many Memo or OLE object fields.
#define E_DAO_InvalidFilename				DBDAOERR(3055) //Not a valid file name.
#define E_DAO_AbortSalvage					DBDAOERR(3056) //Couldn't repair this database.
#define E_DAO_LinkNotSupported				DBDAOERR(3057) //Operation not supported on attached, or linked, tables.
#define E_DAO_NullKeyDisallowed				DBDAOERR(3058) //Index or primary key can't contain a null value.
#define E_DAO_OperationCanceled				DBDAOERR(3059) //Operation canceled by user.
#define E_DAO_QueryParmTypeMismatch			DBDAOERR(3060) //Wrong data type for parameter '|'.
#define E_DAO_QueryMissingParmsM			DBDAOERR(3061) //Too few parameters. Expected |.
#define E_DAO_QueryDuplicateAliasM			DBDAOERR(3062) //Duplicate output alias '|'.
#define E_DAO_QueryDuplicateOutputM			DBDAOERR(3063) //Duplicate output destination '|'.
#define E_DAO_QueryIsBulkOp					DBDAOERR(3064) //Can't open action query '|'.
#define E_DAO_QueryIsNotBulkOp				DBDAOERR(3065) //Can't execute a non-action query.
#define E_DAO_QueryNoOutputsM				DBDAOERR(3066) //Query or table must contain at least one output field.
#define E_DAO_QueryNoInputTablesM			DBDAOERR(3067) //Query input must contain at least one table or query.
#define E_DAO_QueryInvalidAlias				DBDAOERR(3068) //Not a valid alias name.
#define E_DAO_QueryInvalidBulkInputM		DBDAOERR(3069) //The action query '|' cannot be used as a row source.
#define E_DAO_QueryUnboundRef				DBDAOERR(3070) //Can't bind name '|'.
#define E_DAO_QueryExprEvaluation			DBDAOERR(3071) //Can't evaluate expression.
#define E_DAO_EvalEBESErr					DBDAOERR(3072) //|
#define E_DAO_QueryNotUpdatable				DBDAOERR(3073) //Operation must use an updatable query.
#define E_DAO_TableRepeatInFromList			DBDAOERR(3074) //Can't repeat table name '|' in FROM clause.
#define E_DAO_QueryExprSyntax				DBDAOERR(3075) //|1 in query expression '|2'.
#define E_DAO_QbeExprSyntax					DBDAOERR(3076) //| in criteria expression.
#define E_DAO_FindExprSyntax				DBDAOERR(3077) //| in expression.
#define E_DAO_InputTableNotFound			DBDAOERR(3078) //Couldn't find input table or query '|'.
#define E_DAO_QueryAmbigRefM				DBDAOERR(3079) //Ambiguous field reference '|'.
#define E_DAO_JoinTableNotInput				DBDAOERR(3080) //Joined table '|' not listed in FROM clause.
#define E_DAO_UnaliasedSelfJoin				DBDAOERR(3081) //Can't join more than one table with the same name (|).
#define E_DAO_ColumnNotInJoinTable			DBDAOERR(3082) //JOIN operation '|' refers to a non-joined table.
#define E_DAO_QueryIsMGB					DBDAOERR(3083) //Can't use internal report query.
#define E_DAO_QueryInsIntoBulkMGB			DBDAOERR(3084) //Can't insert data with action query.
#define E_DAO_ExprUnknownFunctionM			DBDAOERR(3085) //Undefined function '|' in expression.
#define E_DAO_QueryCannotDelete				DBDAOERR(3086) //Couldn't delete from specified tables.
#define E_DAO_QueryTooManyGroupExprs		DBDAOERR(3087) //Too many expressions in GROUP BY clause.
#define E_DAO_QueryTooManyOrderExprs		DBDAOERR(3088) //Too many expressions in ORDER BY clause.
#define E_DAO_QueryTooManyDistExprs			DBDAOERR(3089) //Too many expressions in DISTINCT output.
#define E_DAO_Column2ndSysMaint				DBDAOERR(3090) //Resultant table not allowed to have more than one Counter or Autonumber field.
#define E_DAO_HavingWOGrouping				DBDAOERR(3091) //HAVING clause (|) without grouping or aggregation.
#define E_DAO_HavingOnTransform				DBDAOERR(3092) //Can't use HAVING clause in TRANSFORM statement.
#define E_DAO_OrderVsDistinct				DBDAOERR(3093) //ORDER BY clause (|) conflicts with DISTINCT.
#define E_DAO_OrderVsGroup					DBDAOERR(3094) //ORDER BY clause (|) conflicts with GROUP BY clause.
#define E_DAO_AggregateInArgument			DBDAOERR(3095) //Can't have aggregate function in expression (|).
#define E_DAO_AggregateInWhere				DBDAOERR(3096) //Can't have aggregate function in WHERE clause (|).
#define E_DAO_AggregateInOrderBy			DBDAOERR(3097) //Can't have aggregate function in ORDER BY clause (|).
#define E_DAO_AggregateInGroupBy			DBDAOERR(3098) //Can't have aggregate function in GROUP BY clause (|).
#define E_DAO_AggregateInJoin				DBDAOERR(3099) //Can't have aggregate function in JOIN operation (|).
#define E_DAO_NullInJoinKey					DBDAOERR(3100) //Can't set field '|' in join key to Null.
#define E_DAO_ValueBreaksJoin				DBDAOERR(3101) //There is no record in table '|2' with key matching field(s) '|1'.
#define E_DAO_QueryTreeCycle				DBDAOERR(3102) //Circular reference caused by '|'.
#define E_DAO_OutputAliasCycle				DBDAOERR(3103) //Circular reference caused by alias '|' in query definition's SELECT list.
#define E_DAO_QryDuplicatedFixedSetM		DBDAOERR(3104) //Can't specify Fixed Column Heading '|' in a crosstab query more than once.
#define E_DAO_NoSelectIntoColumnName		DBDAOERR(3105) //Missing destination field name in SELECT INTO statement (|).
#define E_DAO_NoUpdateColumnName			DBDAOERR(3106) //Missing destination field name in UPDATE statement (|).
#define E_DAO_QueryNoInsertPerm				DBDAOERR(3107) //Record(s) can't be added; no Insert Data permission on '|'.
#define E_DAO_QueryNoReplacePerm			DBDAOERR(3108) //Record(s) can't be edited; no Update Data permission on '|'.
#define E_DAO_QueryNoDeletePerm				DBDAOERR(3109) //Record(s) can't be deleted; no Delete Data permission on '|'.
#define E_DAO_QueryNoReadDefPerm			DBDAOERR(3110) //Couldn't read definitions; no Read Design permission for table or query '|'.
#define E_DAO_QueryNoTblCrtPerm				DBDAOERR(3111) //Couldn't create; no Create permission for table or query '|'.
#define E_DAO_QueryNoReadPerm				DBDAOERR(3112) //Record(s) can't be read; no Read Data permission on '|'.
#define E_DAO_QueryColNotUpd				DBDAOERR(3113) //Can't update '|'; field not updatable.
#define E_DAO_QueryLVInDistinct				DBDAOERR(3114) //Can't include Memo or OLE object when you select unique values (|).
#define E_DAO_QueryLVInAggregate			DBDAOERR(3115) //Can't have Memo or OLE object in aggregate argument (|).
#define E_DAO_QueryLVInHaving				DBDAOERR(3116) //Can't have Memo or OLE object in criteria (|) for aggregate function.
#define E_DAO_QueryLVInOrderBy				DBDAOERR(3117) //Can't sort on Memo or OLE object (|).
#define E_DAO_QueryLVInJoin					DBDAOERR(3118) //Can't join on Memo or OLE object (|).
#define E_DAO_QueryLVInGroupBy				DBDAOERR(3119) //Can't group on Memo or OLE object (|).
#define E_DAO_DotStarWithGrouping			DBDAOERR(3120) //Can't group on fields selected with '*' (|).
#define E_DAO_StarWithGrouping				DBDAOERR(3121) //Can't group on fields selected with '*'.
#define E_DAO_IllegalDetailRef				DBDAOERR(3122) //'|' not part of aggregate function or grouping.
#define E_DAO_StarNotAtLevel0				DBDAOERR(3123) //Can't use '*' in crosstab query.
#define E_DAO_QueryInvalidMGBInput			DBDAOERR(3124) //Can't input from internal report query (|).
#define E_DAO_InvalidName					DBDAOERR(3125) //'|' isn't a valid name.
#define E_DAO_QueryBadBracketing			DBDAOERR(3126) //Invalid bracketing of name '|'.
#define E_DAO_InsertIntoUnknownCol			DBDAOERR(3127) //INSERT INTO statement contains unknown field name '|'.
#define E_DAO_QueryNoDeleteTables			DBDAOERR(3128) //Must specify tables to delete from.
#define E_DAO_SQLSyntax						DBDAOERR(3129) //Invalid SQL statement; expected 'DELETE', 'INSERT', 'PROCEDURE', 'SELECT', or 'UPDATE'.
#define E_DAO_SQLDeleteSyntax				DBDAOERR(3130) //Syntax error in DELETE statement.
#define E_DAO_SQLFromSyntax					DBDAOERR(3131) //Syntax error in FROM clause.
#define E_DAO_SQLGroupBySyntax				DBDAOERR(3132) //Syntax error in GROUP BY clause.
#define E_DAO_SQLHavingSyntax				DBDAOERR(3133) //Syntax error in HAVING clause.
#define E_DAO_SQLInsertSyntax				DBDAOERR(3134) //Syntax error in INSERT statement.
#define E_DAO_SQLJoinSyntax					DBDAOERR(3135) //Syntax error in JOIN operation.
#define E_DAO_SQLLevelSyntax				DBDAOERR(3136) //Syntax error in LEVEL clause.
#define E_DAO_SQLMissingSemicolon			DBDAOERR(3137) //Missing semicolon (;) at end of SQL statement.
#define E_DAO_SQLOrderBySyntax				DBDAOERR(3138) //Syntax error in ORDER BY clause.
#define E_DAO_SQLParameterSyntax			DBDAOERR(3139) //Syntax error in PARAMETER clause.
#define E_DAO_SQLProcedureSyntax			DBDAOERR(3140) //Syntax error in PROCEDURE clause.
#define E_DAO_SQLSelectSyntax				DBDAOERR(3141) //Syntax error in SELECT statement.
#define E_DAO_SQLTooManyTokens				DBDAOERR(3142) //Characters found after end of SQL statement.
#define E_DAO_SQLTransformSyntax			DBDAOERR(3143) //Syntax error in TRANSFORM statement.
#define E_DAO_SQLUpdateSyntax				DBDAOERR(3144) //Syntax error in UPDATE statement.
#define E_DAO_SQLWhereSyntax				DBDAOERR(3145) //Syntax error in WHERE clause.
#define E_DAO_RmtSQLCError					DBDAOERR(3146) //ODBC--call failed.
#define E_DAO_RmtDataOverflow				DBDAOERR(3147) //*
#define E_DAO_RmtConnectFailed				DBDAOERR(3148) //*
#define E_DAO_RmtIncorrectSqlcDll			DBDAOERR(3149) //*
#define E_DAO_RmtMissingSqlcDll				DBDAOERR(3150) //*
#define E_DAO_RmtConnectFailedM				DBDAOERR(3151) //ODBC--connection to '|' failed.
#define E_DAO_RmtDrvrVer					DBDAOERR(3152) //*
#define E_DAO_RmtSrvrVer					DBDAOERR(3153) //*
#define E_DAO_RmtMissingOdbcDll				DBDAOERR(3154) //ODBC--couldn't find DLL '|'.
#define E_DAO_RmtInsertFailedM				DBDAOERR(3155) //ODBC--insert failed on attached (linked) table '|'.
#define E_DAO_RmtDeleteFailedM				DBDAOERR(3156) //ODBC--delete failed on attached (linked) table '|'.
#define E_DAO_RmtUpdateFailedM				DBDAOERR(3157) //ODBC--update failed on attached (linked) table '|'.
#define E_DAO_RecordLocked					DBDAOERR(3158) //Couldn't save record; currently locked by another user.
#define E_DAO_InvalidBookmark				DBDAOERR(3159) //Not a valid bookmark.
#define E_DAO_TableNotOpen					DBDAOERR(3160) //Table isn't open.
#define E_DAO_DecryptFail					DBDAOERR(3161) //Couldn't decrypt file.
#define E_DAO_NullInvalid					DBDAOERR(3162) //Null is invalid.
#define E_DAO_InvalidBufferSize				DBDAOERR(3163) //Couldn't perform operation; data too long for field.
#define E_DAO_ColumnNotUpdatable			DBDAOERR(3164) //Field can't be updated.
#define E_DAO_CantMakeINFFile				DBDAOERR(3165) //Couldn't open .INF file.
#define E_DAO_MissingMemoFile				DBDAOERR(3166) //Missing memo file.
#define E_DAO_RecordDeleted					DBDAOERR(3167) //Record is deleted.
#define E_DAO_INFFileError					DBDAOERR(3168) //Invalid .INF file.
#define E_DAO_ExprIllegalType				DBDAOERR(3169) //Illegal type in expression.
#define E_DAO_InstalIsamNotFound			DBDAOERR(3170) //Couldn't find installable ISAM.
#define E_DAO_NoConfigParameters			DBDAOERR(3171) //Couldn't find net path or user name.
#define E_DAO_CantAccessPdoxNetDir			DBDAOERR(3172) //Couldn't open PARADOX.NET.
#define E_DAO_NoMSysAccounts				DBDAOERR(3173) //Couldn't open table 'MSysAccounts' in the system database file.
#define E_DAO_NoMSysGroups					DBDAOERR(3174) //Couldn't open table 'MSysGroups' in the system database file.
#define E_DAO_DateOutOfRange				DBDAOERR(3175) //Date is out of range or is in an invalid format.
#define E_DAO_ImexCantOpenFile				DBDAOERR(3176) //Couldn't open file '|'.
#define E_DAO_ImexBadTableName				DBDAOERR(3177) //Not a valid table name.
#define E_DAO_ImexOutOfMemory				DBDAOERR(3178) //*
#define E_DAO_ImexEndofFile					DBDAOERR(3179) //Encountered unexpected end of file.
#define E_DAO_ImexCantWriteToFile			DBDAOERR(3180) //Couldn't write to file '|'.
#define E_DAO_ImexBadRange					DBDAOERR(3181) //Invalid range.
#define E_DAO_ImexBogusFile					DBDAOERR(3182) //Invalid file format.
#define E_DAO_TempDiskFull					DBDAOERR(3183) //Not enough space on temporary disk.
#define E_DAO_RmtLinkNotFound				DBDAOERR(3184) //Couldn't execute query; couldn't find attached, or linked, table.
#define E_DAO_RmtTooManyColumns				DBDAOERR(3185) //SELECT INTO remote database tried to produce too many fields.
#define E_DAO_ReadConflictM					DBDAOERR(3186) //Couldn't save; currently locked by user '|2' on machine '|1'.
#define E_DAO_CommitConflictM				DBDAOERR(3187) //Couldn't read; currently locked by user '|2' on machine '|1'.
#define E_DAO_SessionWriteConflict			DBDAOERR(3188) //Couldn't update; currently locked by another session on this machine.
#define E_DAO_JetSpecialTableLocked			DBDAOERR(3189) //Table '|1' is exclusively locked by user '|3' on machine '|2'.
#define E_DAO_TooManyColumns				DBDAOERR(3190) //Too many fields defined.
#define E_DAO_ColumnDuplicate				DBDAOERR(3191) //Can't define field more than once.
#define E_DAO_OutputTableNotFound			DBDAOERR(3192) //Couldn't find output table '|'.
#define E_DAO_JetNoUserName					DBDAOERR(3193) //(unknown)
#define E_DAO_JetNoMachineName				DBDAOERR(3194) //(unknown)
#define E_DAO_JetNoColumnName				DBDAOERR(3195) //(expression)
#define E_DAO_DatabaseInUse					DBDAOERR(3196) //Couldn't use '|'; database already in use.
#define E_DAO_DataHasChanged				DBDAOERR(3197) //Data has changed; operation stopped.
#define E_DAO_TooManySessions				DBDAOERR(3198) //Couldn't start session.  Too many sessions already active.
#define E_DAO_ReferenceNotFound				DBDAOERR(3199) //Couldn't find reference.
#define E_DAO_IntegrityViolMasterM			DBDAOERR(3200) //Can't delete or change record.  Since related records exist in table '|', referential integrity rules would be violated.
#define E_DAO_IntegrityViolSlaveM			DBDAOERR(3201) //Can't add or change record.  Referential integrity rules require a related record in table '|'.
#define E_DAO_ReadConflict					DBDAOERR(3202) //Couldn't save; currently locked by another user.
#define E_DAO_AggregatingHigherLevel		DBDAOERR(3203) //Can't specify subquery in expression (|).
#define E_DAO_DatabaseDuplicate				DBDAOERR(3204) //Database already exists.
#define E_DAO_QueryTooManyXvtColumn			DBDAOERR(3205) //Too many crosstab column headers (|).
#define E_DAO_SelfReference					DBDAOERR(3206) //Can't create a relationship between a field and itself.
#define E_DAO_CantUseUnkeyedTable			DBDAOERR(3207) //Operation not supported on Paradox table with no primary key.
#define E_DAO_IllegalDeletedOption			DBDAOERR(3208) //Invalid Deleted entry in the Xbase section of initialization setting.
#define E_DAO_IllegalStatsOption			DBDAOERR(3209) //Invalid Stats entry in the Xbase section of initialization setting.
#define E_DAO_ConnStrTooLong				DBDAOERR(3210) //Connection string too long.
#define E_DAO_TableInUseQM					DBDAOERR(3211) //Couldn't lock table '|'; currently in use.
#define E_DAO_JetSpecialTableInUse			DBDAOERR(3212) //Couldn't lock table '|1'; currently in use by user '|3' on machine '|2'.
#define E_DAO_IllegalDateOption				DBDAOERR(3213) //Invalid Date entry in the Xbase section of initialization setting.
#define E_DAO_IllegalMarkOption				DBDAOERR(3214) //Invalid Mark entry in the Xbase section of initialization setting.
#define E_DAO_BtrieveTooManyTasks			DBDAOERR(3215) //Too many Btrieve tasks.
#define E_DAO_QueryParmNotTableid			DBDAOERR(3216) //Parameter '|' specified where a table name is required.
#define E_DAO_QueryParmNotDatabase			DBDAOERR(3217) //Parameter '|' specified where a database name is required.
#define E_DAO_WriteConflict					DBDAOERR(3218) //Couldn't update; currently locked.
#define E_DAO_IllegalOperation				DBDAOERR(3219) //Invalid operation.
#define E_DAO_WrongCollatingSequence		DBDAOERR(3220) //Incorrect collating sequence.
#define E_DAO_BadConfigParameters			DBDAOERR(3221) //Invalid entries in the Btrieve section of initialization setting.
#define E_DAO_QueryContainsDbParm			DBDAOERR(3222) //Query can't contain a Database parameter.
#define E_DAO_QueryInvalidParmM				DBDAOERR(3223) //'|' isn't a valid parameter name.
#define E_DAO_BtrieveDDCorrupted			DBDAOERR(3224) //Can't read Btrieve data dictionary.
#define E_DAO_BtrieveDeadlock				DBDAOERR(3225) //Encountered record locking deadlock while performing Btrieve operation.
#define E_DAO_BtrieveFailure				DBDAOERR(3226) //Errors encountered while using the Btrieve DLL.
#define E_DAO_IllegalCenturyOption			DBDAOERR(3227) //Invalid Century entry in the Xbase section of initialization setting.
#define E_DAO_IllegalCollatingSeq			DBDAOERR(3228) //Invalid Collating Sequence.
#define E_DAO_NonModifiableKey				DBDAOERR(3229) //Btrieve--can't change field.
#define E_DAO_ObsoleteLockFile				DBDAOERR(3230) //Out-of-date Paradox lock file.
#define E_DAO_RmtColDataTruncated			DBDAOERR(3231) //ODBC--field would be too long; data truncated.
#define E_DAO_RmtCreateTableFailed			DBDAOERR(3232) //ODBC--couldn't create table.
#define E_DAO_RmtOdbcVer					DBDAOERR(3233) //*
#define E_DAO_RmtQueryTimeout				DBDAOERR(3234) //ODBC--remote query timeout expired.
#define E_DAO_RmtTypeIncompat				DBDAOERR(3235) //ODBC--data type not supported on server.
#define E_DAO_RmtUnexpectedNull				DBDAOERR(3236) //*
#define E_DAO_RmtUnexpectedType				DBDAOERR(3237) //*
#define E_DAO_RmtValueOutOfRange			DBDAOERR(3238) //ODBC--data out of range.
#define E_DAO_TooManyActiveUsers			DBDAOERR(3239) //Too many active users.
#define E_DAO_CantStartBtrieve				DBDAOERR(3240) //Btrieve--missing Btrieve engine.
#define E_DAO_OutOfBVResources				DBDAOERR(3241) //Btrieve--out of resources.
#define E_DAO_QueryBadUpwardRefedM			DBDAOERR(3242) //Invalid reference in SELECT statement.
#define E_DAO_ImexNoMatchingColumns			DBDAOERR(3243) //None of the import field names match fields in the appended table.
#define E_DAO_ImexPasswordProtected			DBDAOERR(3244) //Can't import password-protected spreadsheet.
#define E_DAO_ImexUnparsableRecord			DBDAOERR(3245) //Couldn't parse field names from first row of import table.
#define E_DAO_InTransaction					DBDAOERR(3246) //Operation not supported in transactions.
#define E_DAO_RmtLinkOutOfSync				DBDAOERR(3247) //ODBC--linked table definition has changed.
#define E_DAO_IllegalNetworkOption			DBDAOERR(3248) //Invalid NetworkAccess entry in initialization setting.
#define E_DAO_IllegalTimeoutOption			DBDAOERR(3249) //Invalid PageTimeout entry in initialization setting.
#define E_DAO_CantBuildKey					DBDAOERR(3250) //Couldn't build key.
#define E_DAO_FeatureNotAvailable			DBDAOERR(3251) //Operation is not supported for this type of object.
#define E_DAO_IllegalReentrancy				DBDAOERR(3252) //Can't open form whose underlying query contains a user-defined function that attempts to set or get the form's RecordsetClone property.
#define E_DAO_UNUSED						DBDAOERR(3253) //*
#define E_DAO_RmtDenyWriteIsInvalid			DBDAOERR(3254) //ODBC--Can't lock all records.
#define E_DAO_ODBCParmsChanged				DBDAOERR(3255) //*
#define E_DAO_INFIndexNotFound 				DBDAOERR(3256) //Index file not found.
#define E_DAO_SQLOwnerAccessSyntax			DBDAOERR(3257) //Syntax error in WITH OWNERACCESS OPTION declaration.
#define E_DAO_QueryAmbiguousJoins			DBDAOERR(3258) //Query contains ambiguous outer joins.
#define E_DAO_InvalidColumnType				DBDAOERR(3259) //Invalid field data type.
#define E_DAO_WriteConflictM				DBDAOERR(3260) //Couldn't update; currently locked by user '|2' on machine '|1'.
#define E_DAO_TableLockedM					DBDAOERR(3261) //|
#define E_DAO_TableInUseMUQM				DBDAOERR(3262) //|
#define E_DAO_InvalidTableId				DBDAOERR(3263) //Invalid database object.
#define E_DAO_VtoNoFields					DBDAOERR(3264) //No fields defined - cannot append Tabledef or Index.
#define E_DAO_VtoNameNotFound				DBDAOERR(3265) //Item not found in this collection.
#define E_DAO_VtoFieldInCollection			DBDAOERR(3266) //Can't append.  Field is part of a TableDefs collection.
#define E_DAO_VtoNotARecordset				DBDAOERR(3267) //Property can be set only when the field is part of a Recordset object's Fields collection.
#define E_DAO_VtoNoSetObjInDb				DBDAOERR(3268) //Can't set this property once the object is part of a collection.
#define E_DAO_VtoIndexInCollection			DBDAOERR(3269) //Can't append.  Index is part of a TableDefs collection.
#define E_DAO_VtoPropNotFound				DBDAOERR(3270) //Property not found.
#define E_DAO_VtoIllegalValue				DBDAOERR(3271) //Invalid property value.
#define E_DAO_VtoNotArray					DBDAOERR(3272) //Object isn't a collection.
#define E_DAO_VtoNoSuchMethod				DBDAOERR(3273) //Method not applicable for this object.
#define E_DAO_NotExternalFormat				DBDAOERR(3274) //External table isn't in the expected format.
#define E_DAO_UnexpectedEngineReturn		DBDAOERR(3275) //Unexpected error from external database driver (|).
#define E_DAO_InvalidDatabaseId				DBDAOERR(3276) //Invalid database ID.
#define E_DAO_TooManyKeys					DBDAOERR(3277) //Can't have more than 10 fields in an index.
#define E_DAO_NotInitialized				DBDAOERR(3278) //Database engine hasn't been initialized.
#define E_DAO_AlreadyInitialized			DBDAOERR(3279) //Database engine has already been initialized.
#define E_DAO_ColumnInUse					DBDAOERR(3280) //Can't delete a field that is part of an index or is needed by the system.
#define E_DAO_IndexInUse					DBDAOERR(3281) //Can't delete this index.  It is either the current index or is used in a relationship.
#define E_DAO_TableNotEmpty					DBDAOERR(3282) //Can't create field or index in a table that is already defined.
#define E_DAO_IndexHasPrimary				DBDAOERR(3283) //Primary key already exists.
#define E_DAO_IndexDuplicate				DBDAOERR(3284) //Index already exists.
#define E_DAO_IndexInvalidDef				DBDAOERR(3285) //Invalid index definition.
#define E_DAO_WrongMemoFileType				DBDAOERR(3286) //Format of memo file doesn't match specified external database format.
#define E_DAO_ColumnCannotIndex				DBDAOERR(3287) //Can't create index on the given field.
#define E_DAO_IndexHasNoPrimary				DBDAOERR(3288) //Paradox index is not primary.
#define E_DAO_DDLConstraintSyntax			DBDAOERR(3289) //Syntax error in CONSTRAINT clause.
#define E_DAO_DDLCreateTableSyntax			DBDAOERR(3290) //Syntax error in CREATE TABLE statement.
#define E_DAO_DDLCreateIndexSyntax			DBDAOERR(3291) //Syntax error in CREATE INDEX statement.
#define E_DAO_DDLColumnDefSyntax			DBDAOERR(3292) //Syntax error in field definition.
#define E_DAO_DDLAlterTableSyntax			DBDAOERR(3293) //Syntax error in ALTER TABLE statement.
#define E_DAO_DDLDropIndexSyntax			DBDAOERR(3294) //Syntax error in DROP INDEX statement.
#define E_DAO_DDLDropSyntax					DBDAOERR(3295) //Syntax error in DROP TABLE or DROP INDEX.
#define E_DAO_V11NotSupported				DBDAOERR(3296) //Join expression not supported.
#define E_DAO_ImexNothingToImport			DBDAOERR(3297) //Couldn't import table or query.  No records found, or all records contain errors.
#define E_DAO_RmtTableAmbiguous				DBDAOERR(3298) //There are several tables with that name.  Please specify owner in the format 'owner.table'.
#define E_DAO_JetODBCConformanceError		DBDAOERR(3299) //ODBC Specification Conformance Error (|).  This error should be reported to the ODBC driver vendor.
#define E_DAO_IllegalRelationship			DBDAOERR(3300) //Can't create a relationship.
#define E_DAO_DBVerFeatureNotAvailable		DBDAOERR(3301) //Can't perform this operation; features in this version are not available in databases with older formats.
#define E_DAO_RulesLoaded					DBDAOERR(3302) //Can't change a rule while the rules for this table are in use.
#define E_DAO_ColumnInRelationship			DBDAOERR(3303) //Can't delete this field.  It's part of one or more relationships.
#define E_DAO_InvalidPin					DBDAOERR(3304) //You must enter a personal identifier (PID) consisting of at least four and no more than 20 characters and digits.
#define E_DAO_RmtBogusConnStr				DBDAOERR(3305) //Invalid connection string in pass-through query.
#define E_DAO_SingleColumnExpected			DBDAOERR(3306) //At most one field can be returned from a subquery that doesn't use the EXISTS keyword.
#define E_DAO_ColumnCountMismatch			DBDAOERR(3307) //The number of columns in the two selected tables or queries of a union query don't match.
#define E_DAO_InvalidTopArgumentM			DBDAOERR(3308) //Invalid TOP argument in select query.
#define E_DAO_PropertyTooLarge				DBDAOERR(3309) //Property setting can't be larger than 2 KB.
#define E_DAO_JPMInvalidForV1x				DBDAOERR(3310) //This property isn't supported for external data sources or for databases created in a previous version.
#define E_DAO_PropertyExists				DBDAOERR(3311) //Property specified already exists.
#define E_DAO_TLVNativeUserTablesOnly		DBDAOERR(3312) //Validation rules and default values can't be placed on system or attached (linked) tables.
#define E_DAO_TLVInvalidColumn				DBDAOERR(3313) //Can't place this validation expression on this field.
#define E_DAO_TLVNoNullM					DBDAOERR(3314) //Field '|' can't contain a null value.
#define E_DAO_TLVNoBlankM					DBDAOERR(3315) //Field '|' can't be a zero-length string.
#define E_DAO_TLVRuleViolationM				DBDAOERR(3316) //|
#define E_DAO_TLVRuleVioNoMessage			DBDAOERR(3317) //One or more values entered is prohibited by the validation rule '|2' set for '|1'.
#define E_DAO_QueryTopNotAllowedM			DBDAOERR(3318) //Top not allowed in delete queries.
#define E_DAO_SQLUnionSyntax				DBDAOERR(3319) //Syntax error in union query.
#define E_DAO_TLVExprSyntaxM				DBDAOERR(3320) //| in table-level validation expression.
#define E_DAO_NoDbInConnStr					DBDAOERR(3321) //No database specified in connection string or IN clause.
#define E_DAO_QueryBadValueListM			DBDAOERR(3322) //Crosstab query contains one or more invalid fixed column headings.
#define E_DAO_QueryIsNotRowReturning		DBDAOERR(3323) //The query can not be used as a row source.
#define E_DAO_QueryIsDDL					DBDAOERR(3324) //This query is a DDL query and cannot be used as a row source.
#define E_DAO_SPTReturnedNoRecords			DBDAOERR(3325) //Pass-through query with ReturnsRecords property set to True did not return any records.
#define E_DAO_QueryIsSnapshot				DBDAOERR(3326) //This Recordset is not updatable.
#define E_DAO_QueryExprOutput				DBDAOERR(3327) //Field '|' is based on an expression and can't be edited.
#define E_DAO_QueryTableRO					DBDAOERR(3328) //Table '|2' is read-only.
#define E_DAO_QueryRowDeleted				DBDAOERR(3329) //Record in table '|' was deleted by another user.
#define E_DAO_QueryRowLocked				DBDAOERR(3330) //Record in table '|' is locked by another user.
#define E_DAO_QueryFixupChanged				DBDAOERR(3331) //To make changes to this field, first save the record.
#define E_DAO_QueryCantFillIn				DBDAOERR(3332) //Can't enter value into blank field on 'one' side of outer join.
#define E_DAO_QueryWouldOrphan				DBDAOERR(3333) //Records in table '|' would have no record on the 'one' side.
#define E_DAO_V10Format						DBDAOERR(3334) //Can be present only in version 1.0 format.
#define E_DAO_InvalidDelete					DBDAOERR(3335) //DeleteOnly called with non-zero cbData.
#define E_DAO_IllegalIndexDDFOption			DBDAOERR(3336) //Btrieve: Invalid IndexDDF option in initialization setting.
#define E_DAO_IllegalDataCodePage			DBDAOERR(3337) //Invalid DataCodePage option in initialization setting.
#define E_DAO_XtrieveEnvironmentError		DBDAOERR(3338) //Btrieve: Xtrieve options aren't correct in initialization setting.
#define E_DAO_IllegalIndexNumberOption		DBDAOERR(3339) //Btrieve: Invalid IndexDeleteRenumber option in initialization setting.
#define E_DAO_QueryIsCorruptM				DBDAOERR(3340) //Query '|' is corrupt.
#define E_DAO_IncorrectJoinKeyM				DBDAOERR(3341) //Current field must match join key '|' on 'one' side of outer join because it has been updated.
#define E_DAO_QueryLVInSubqueryM			DBDAOERR(3342) //Invalid Memo or OLE object in subquery '|'.
#define E_DAO_InvalidDatabaseM				DBDAOERR(3343) //Unrecognized database format '|'.
#define E_DAO_TLVCouldNotBindRef			DBDAOERR(3344) //Unknown or invalid reference '|1' in validation expression or default value in table '|2'.
#define E_DAO_CouldNotBindRef				DBDAOERR(3345) //Unknown or invalid field reference '|'.
#define E_DAO_QueryWrongNumDestCol			DBDAOERR(3346) //Number of query values and destination fields aren't the same.
#define E_DAO_QueryPKeyNotOutput			DBDAOERR(3347) //Can't add record(s); primary key for table '|' not in recordset.
#define E_DAO_QueryJKeyNotOutput			DBDAOERR(3348) //Can't add record(s); join key of table '|' not in recordset.
#define E_DAO_NumericFieldOverflow			DBDAOERR(3349) //Numeric field overflow.
#define E_DAO_InvalidObject					DBDAOERR(3350) //Object is invalid for operation.
#define E_DAO_OrderVsUnion					DBDAOERR(3351) //ORDER BY expression (|) uses non-output fields.
#define E_DAO_NoInsertColumnNameM			DBDAOERR(3352) //No destination field name in INSERT INTO statement (|).
#define E_DAO_MissingDDFFile				DBDAOERR(3353) //Btrieve: Can't find file FIELD.DDF.
#define E_DAO_SingleRecordExpected			DBDAOERR(3354) //At most one record can be returned by this subquery.
#define E_DAO_DefaultExprSyntax				DBDAOERR(3355) //Syntax error in default value.
#define E_DAO_ExclusiveDBConflict			DBDAOERR(3356) //The database is opened by user '|2' on machine '|1'.
#define E_DAO_QueryIsNotDDL					DBDAOERR(3357) //This query is not a properly formed data-definition query.
#define E_DAO_SysDatabaseOpenError			DBDAOERR(3358) //Can't open Microsoft Jet engine system database.
#define E_DAO_SQLInvalidSPT					DBDAOERR(3359) //Pass-through query must contain at least one character.
#define E_DAO_QueryTooComplex				DBDAOERR(3360) //Query is too complex.
#define E_DAO_SetOpInvalidInSubquery		DBDAOERR(3361) //Unions not allowed in a subquery.
#define E_DAO_RmtMultiRowUpdate				DBDAOERR(3362) //Single-row update/delete affected more than one row of an attached (linked) table.  Unique index contains duplicate values.
#define E_DAO_QueryNoJoinedRecord			DBDAOERR(3363) //Record(s) can't be added; no corresponding record on the 'one' side.
#define E_DAO_QueryLVInSetOp				DBDAOERR(3364) //Can't use Memo or OLE object field '|' in SELECT clause of a union query.
#define E_DAO_VtoInvalidOnRemote			DBDAOERR(3365) //Property value not valid for REMOTE objects.
#define E_DAO_VtoNoFieldsRel				DBDAOERR(3366) //Can't append a relation with no fields defined.
#define E_DAO_VtoObjectInCollection			DBDAOERR(3367) //Can't append.  Object already in collection.
#define E_DAO_DDLDiffNumRelCols				DBDAOERR(3368) //Relationship must be on the same number of fields with the same data types.
#define E_DAO_DDLIndexColNotFound			DBDAOERR(3369) //Can't find field in index definition.
#define E_DAO_DDLPermissionDenied			DBDAOERR(3370) //Can't modify the design of table '|'.  It's in a read-only database.
#define E_DAO_DDLObjectNotFound				DBDAOERR(3371) //Can't find table or constraint.
#define E_DAO_DDLIndexNotFound				DBDAOERR(3372) //No such index '|2' on table '|1'.
#define E_DAO_DDLNoPkeyOnRefdTable			DBDAOERR(3373) //Can't create relationship.  Referenced table '|' doesn't have a primary key.
#define E_DAO_DDLColumnsNotUnique			DBDAOERR(3374) //The specified fields are not uniquely indexed in table '|'.
#define E_DAO_DDLIndexDuplicate				DBDAOERR(3375) //Table '|1' already has an index named '|2'
#define E_DAO_DDLTableNotFound				DBDAOERR(3376) //Table '|' doesn't exist.
#define E_DAO_DDLRelNotFound				DBDAOERR(3377) //No such relationship '|2' on table '|1'.
#define E_DAO_DDLRelDuplicate				DBDAOERR(3378) //There is already a relationship named '|' in the current database.
#define E_DAO_DDLIntegrityViolation			DBDAOERR(3379) //Can't create relationships to enforce referential integrity.  Existing data in table '|2' violates referential integrity rules with related table '|1'.
#define E_DAO_DDLColumnDuplicate			DBDAOERR(3380) //Field '|2' already exists in table '|1'.
#define E_DAO_DDLColumnNotFound				DBDAOERR(3381) //There is no field named '|2' in table '|1'.
#define E_DAO_DDLColumnTooBig				DBDAOERR(3382) //The size of field '|' is too long.
#define E_DAO_DDLColumnInRel				DBDAOERR(3383) //Can't delete field '|'.  It's part of one or more relationships.
#define E_DAO_VtoCantDeleteBuiltIn			DBDAOERR(3384) //Can't delete a built-in property.
#define E_DAO_VtoUDPsDontSupportNull		DBDAOERR(3385) //User-defined properties don't support a Null value.
#define E_DAO_VtoMissingRequiredParm		DBDAOERR(3386) //Property '|' must be set before using this method.
#define E_DAO_JetJetInitInvalidPath			DBDAOERR(3387) //Can't find TEMP directory.
#define E_DAO_TLVExprUnknownFunctionM		DBDAOERR(3388) //Unknown function '|2' in validation expression or default value on '|1'.
#define E_DAO_QueryNotSupported				DBDAOERR(3389) //Query support unavailable.
#define E_DAO_AccountDuplicate				DBDAOERR(3390) //Account name already exists.
#define E_DAO_JetwrnPropCouldNotSave		DBDAOERR(3391) //An error has occurred.  Properties were not saved.
#define E_DAO_RelNoPrimaryIndexM			DBDAOERR(3392) //There is no primary key in table '|'.
#define E_DAO_QueryKeyTooBig				DBDAOERR(3393) //Can't perform join, group, sort, or indexed restriction. A value being searched or sorted on is too long.
#define E_DAO_PropMustBeDDL					DBDAOERR(3394) //Can't save property; property is a schema property.
#define E_DAO_IllegalRIConstraint			DBDAOERR(3395) //Invalid referential integrity constraint.
#define E_DAO_RIViolationMasterCM			DBDAOERR(3396) //Can't perform cascading operation.  Since related records exist in table '|', referential integrity rules would be violated.
#define E_DAO_RIViolationSlaveCM			DBDAOERR(3397) //Can't perform cascading operation.  There must be a related record in table '|'.
#define E_DAO_RIKeyNullDisallowedCM			DBDAOERR(3398) //Can't perform cascading operation.  It would result in a null key in table '|'.
#define E_DAO_RIKeyDuplicateCM				DBDAOERR(3399) //Can't perform cascading operation.  It would result in a duplicate key in table '|'.
#define E_DAO_RIUpdateTwiceCM				DBDAOERR(3400) //Can't perform cascading operation.  It would result in two updates on field '|2' in table '|1'.
#define E_DAO_RITLVNoNullCM					DBDAOERR(3401) //Can't perform cascading operation.  It would cause field '|' to become null, which is not allowed.
#define E_DAO_RITLVNoBlankCM				DBDAOERR(3402) //Can't perform cascading operation.  It would cause field '|' to become a zero-length string, which is not allowed.
#define E_DAO_RITLVRuleViolationCM			DBDAOERR(3403) //Can't perform cascading operation:  '|'
#define E_DAO_RITLVRuleVioCNoMessage		DBDAOERR(3404) //Can't perform cascading operation.  The value entered is prohibited by the validation rule '|2' set for '|1'.
#define E_DAO_TLVRuleEvalEBESErr			DBDAOERR(3405) //Error '|' in validation rule.
#define E_DAO_TLVDefaultEvalEBESErr			DBDAOERR(3406) //Error '|' in default value.
#define E_DAO_BadMSysConf					DBDAOERR(3407) //The server's MSysConf table exists, but is in an incorrect format.  Contact your system administrator.
#define E_DAO_TooManyFindSessions			DBDAOERR(3408) //Too many FastFind Sessions were invoked.
#define E_DAO_InvalidColumnM				DBDAOERR(3409) //Invalid field name '|' in definition of index or relationship.
#define E_DAO_REPReadOnly					DBDAOERR(3410) //*
#define E_DAO_RIInvalidBufferSizeCM			DBDAOERR(3411) //Invalid entry.  Can't perform cascading operation specified in table '|1' because value entered is too big for field '|2'.
#define E_DAO_RIWriteConflictCM				DBDAOERR(3412) //|
#define E_DAO_JetSpecialRIWriteConflictCM	DBDAOERR(3413) //Can't perform cascading update on table '|1' because it is currently in use by user '|3' on machine '|2'.
#define E_DAO_RISessWriteConflictCM			DBDAOERR(3414) //Can't perform cascading update on table '|' because it is currently in use.
#define E_DAO_NoBlank						DBDAOERR(3415) //Zero-length string is valid only in a text or Memo field.
#define E_DAO_FutureError					DBDAOERR(3416) //|
#define E_DAO_QueryInvalidBulkInput			DBDAOERR(3417) //An action query cannot be used as a row source.
#define E_DAO_NetCtrlMismatch				DBDAOERR(3418) //Can't open '|'.  Another user has the table open using a different network control file or locking style.
#define E_DAO_4xTableWith3xLocking			DBDAOERR(3419) //Can't open this Paradox 4.x or Paradox 5.x table because ParadoxNetStyle is set to 3.x in the initialization setting.
#define E_DAO_VtoObjectNotSet				DBDAOERR(3420) //Object is invalid or not set.
#define E_DAO_VtoDataConvError				DBDAOERR(3421) //Data type conversion error.
#define E_DAO_TableNotLocked				DBDAOERR(3422) //Can't modify table structure.  Another user has the table open
#define E_DAO_RmtDriverNotSupported			DBDAOERR(3423) //You cannot use ODBC to attach an external Microsoft Access or ISAM database table to your database
#define E_DAO_InvalidLanguageId				DBDAOERR(3424) //Can't create database; Invalid locale
#define E_DAO_VtoInvalidOpDuringCallback	DBDAOERR(3425) //This method or property is not currently available on this Recordset
#define E_DAO_VtoActionCancelled			DBDAOERR(3426) //The action was cancelled by an associated object
#define E_DAO_VtoOleAutoFailed				DBDAOERR(3427) //Error in DAO automation
#define E_DAO_DatabaseCorrupted_Cmpct		DBDAOERR(3428) //The Jet database engine has encountered a problem in your database.  To correct the problem, you must repair and compact the database
#define E_DAO_IncompatibleIIsam				DBDAOERR(3429) //Incompatible installable ISAM version
#define E_DAO_OLEInitializeFailure			DBDAOERR(3430) //While loading the Excel installable ISAM, OLE was unable to initialize
#define E_DAO_OLENotCompoundFile			DBDAOERR(3431) //This is not an Excel 5 file
#define E_DAO_OLEFailure					DBDAOERR(3432) //Error opening an Excel 5 file
#define E_DAO_IllegalIisamIniOption			DBDAOERR(3433) //Invalid parameter in [Excel ISAM] section of the initialization file
#define E_DAO_TableFull						DBDAOERR(3434) //Can't expand named range
#define E_DAO_TableCantClear				DBDAOERR(3435) //Cannot delete Excel cells
#define E_DAO_CreateFailed					DBDAOERR(3436) //Failure creating file
#define E_DAO_DatabaseFull					DBDAOERR(3437) //Excel spreadsheet is full
#define E_DAO_SpecAndColumnMismatch			DBDAOERR(3438) //File specification and data do not match
#define E_DAO_CantOpenWordMergeFiles		DBDAOERR(3439) //Can't attach or import Word mail merge file
#define E_DAO_FileHasNoColumns				DBDAOERR(3440) //Text file has no columns
#define E_DAO_AmbiguousDelimiters			DBDAOERR(3441) //Text file specification field separator matches decimal seperator or text delimiter
#define E_DAO_FileSpecErrorM				DBDAOERR(3442) //Error in entry |2 of section [|1] in schema.ini
#define E_DAO_NoSpecForFixedFormatM			DBDAOERR(3443) //Can't create fixed width text file without column specification in section [|2] of schema.ini
#define E_DAO_WidthMissInFixedSpecM			DBDAOERR(3444) //Column width required for column |2 in section [|1] of schema.ini
#define E_DAO_VtoWrongDllVersion			DBDAOERR(3445) //Incorrect version of JET DLL found
#define E_DAO_VtoMissingVBA					DBDAOERR(3446) //Could not locate a VBA related file
#define E_DAO_VtoVBAFailed					DBDAOERR(3447) //Failed to initialize VBA
#define E_DAO_VtoOLEFailed					DBDAOERR(3448) //An OLE system function failed
#define E_DAO_InvalidCountry				DBDAOERR(3449) //Missing country code
#define E_DAO_QueryIncompleteRowM			DBDAOERR(3450) //Syntax error in query.  Incomplete query clause
#define E_DAO_QueryParmTypeNotAllowed		DBDAOERR(3451) //Illegal reference in query
#define E_DAO_REPDBNotMaster				DBDAOERR(3452) //You can't make changes to the design of the database at this replica.
#define E_DAO_REPCantRelate					DBDAOERR(3453) //You can't establish or maintain an enforced relationship between a replicated table and a local table.
#define E_DAO_REPNotOwner					DBDAOERR(3454) //*
#define E_DAO_CantMakeReplicable			DBDAOERR(3455) //Can't make the database replicable.
#define E_DAO_CantMakeObjectReplicable		DBDAOERR(3456) //Can't make the |2 object in |1 container replicable.
#define E_DAO_REPCantKeepLocal				DBDAOERR(3457) //You can't set the KeepLocal property for an object that is already replicated.
#define E_DAO_REPCantKeepDBLocal			DBDAOERR(3458) //The KeepLocal property cannot be set on a database; it can be set only on the objects in a database.
#define E_DAO_CantUnreplDatabase			DBDAOERR(3459) //After a database has been replicated, you cannot remove the replication features from the database.
#define E_DAO_ReplConflict					DBDAOERR(3460) //The operation you attempted conflicts with an existing operation involving this member of the replica set.
#define E_DAO_REPSetRepid					DBDAOERR(3461) //The replication property you are attempting to set or delete is read-only and can't be changed.
#define E_DAO_TransportLoadFailure			DBDAOERR(3462) //Failure to load a DLL.
#define E_DAO_TransportLoadFailureM			DBDAOERR(3463) //Can't find the .dll '|2'.
#define E_DAO_TypeMismatchM					DBDAOERR(3464) //Data type mismatch in criteria expression.
#define E_DAO_DiskIOM						DBDAOERR(3465) //The disk drive you are attempting to access is unreadable.
#define E_DAO_FileAccessDeniedM				DBDAOERR(3466) //*
#define E_DAO_InvalidPathM					DBDAOERR(3467) //*
#define E_DAO_TranspAccessDeniedM			DBDAOERR(3468) //Access was denied while accessing dropbox folder '|2'.
#define E_DAO_TransportDiskFullM			DBDAOERR(3469) //The disk for dropbox folder '|2' is full.
#define E_DAO_TransportDiskIOM				DBDAOERR(3470) //Disk failure accessing dropbox folder '|2'.
#define E_DAO_LogWriteFail					DBDAOERR(3471) //Failure to write to the Synchronizer log file.
#define E_DAO_LogDiskFullM					DBDAOERR(3472) //Disk full for path '|1'.
#define E_DAO_LogDiskIOM					DBDAOERR(3473) //Disk failure while accessing log file '|1'.
#define E_DAO_LogFileAccessDeniedM			DBDAOERR(3474) //Can't open the log file '|1' for writing.
#define E_DAO_LogFileShareViolationM		DBDAOERR(3475) //Sharing violation while attempting to open log file '|1' in Deny Write mode.
#define E_DAO_TransportInvalidPathM			DBDAOERR(3476) //Invalid dropbox path '|2'.
#define E_DAO_TranspInvalidAddressM			DBDAOERR(3477) //Dropbox address '|2' is syntactically invalid.
#define E_DAO_RepNotPartial					DBDAOERR(3478) //The replica is not a partial replica.
#define E_DAO_RepPartial					DBDAOERR(3479) //Can't designate a partial replica as the Design Master for the replica set.
#define E_DAO_PARTInvalidRelNameM			DBDAOERR(3480) //The relationship '|' in the partial filter expression is invalid.
#define E_DAO_PARTInvalidTableNameM			DBDAOERR(3481) //The table name '|' in the partial filter expression is invalid.
#define E_DAO_REPInvalidFilter				DBDAOERR(3482) //The filter expression for the partial replica is invalid.
#define E_DAO_TranspInvalidPasswordM		DBDAOERR(3483) //The password supplied for the dropbox folder '|2' is invalid.
#define E_DAO_TransDestInvalidPassword		DBDAOERR(3484) //The password used by the Synchronizer to write to a destination dropbox folder is invalid.
#define E_DAO_REPDBNotRep					DBDAOERR(3485) //The object can't be replicated because the database is not replicated.
#define E_DAO_REPSecondGuid					DBDAOERR(3486) //You can't add a second Replication ID AutoNumber field to a table.
#define E_DAO_REPOnlyBuiltin				DBDAOERR(3487) //The database you are attempting to replicate can't be converted.
#define E_DAO_REPNoSuchRepid				DBDAOERR(3488) //The value specified is not a ReplicaID for any member in the replica set.
#define E_DAO_REPObjectNotRep				DBDAOERR(3489) //The object specified can't be replicated because it is missing a  necessary resource.
#define E_DAO_CantCreateReplica				DBDAOERR(3490) //Can't create a new replica because the '|2' object in '|1' container could not be replicated.
#define E_DAO_MustOpenDbExclusive			DBDAOERR(3491) //The database must be opened in exclusive mode before it can be replicated.
#define E_DAO_CantDoSchemaChange			DBDAOERR(3492) //The synchronization failed because a design change could not be applied to one of the replicas.
#define E_DAO_UnableToSetParam				DBDAOERR(3493) //Can't set the specified Registry parameter for the Synchronizer.
#define E_DAO_UnableToGetParam				DBDAOERR(3494) //Unable to retrieve the specified Registry parameter for the Synchronizer.
#define E_DAO_REPNoSuchSchedule				DBDAOERR(3495) //There are no scheduled synchronizations between the two Synchronizers.
#define E_DAO_REPNoSuchExchange				DBDAOERR(3496) //Replication Manager cannot find the ExchangeID in the MSysExchangeLog table.
#define E_DAO_REPCantSetSchedule			DBDAOERR(3497) //Unable to set a schedule for the Synchronizer.
#define E_DAO_REPCantGetSchedule			DBDAOERR(3498) //*
#define E_DAO_REPCantGetDBPath				DBDAOERR(3499) //Can't retrieve the full path information for a member of the replica set.
#define E_DAO_REPCantSetExchange			DBDAOERR(3500) //You cannot specify two different Synchronizers to manage the same replica.
#define E_DAO_REPNotUpdated					DBDAOERR(3501) //*
#define E_DAO_REPNotManaged					DBDAOERR(3502) //The Design Master or replica is not being managed by a Synchronizer.
#define E_DAO_ValueNotSet					DBDAOERR(3503) //The Synchronizer's Registry has no value set for the key you queried.
#define E_DAO_REPInvalidTID					DBDAOERR(3504) //The Synchronizer ID does not match an existing ID in the MSysTranspAddress table.
#define E_DAO_REPFilterNotFound				DBDAOERR(3505) //You attempted to delete or get information about a partial filter that does not exist in MSysFilters.
#define E_DAO_OpenLog						DBDAOERR(3506) //The Synchronizer is unable to open the Synchronizer log.
#define E_DAO_WriteLog						DBDAOERR(3507) //Failure writing to the Synchronizer log.
#define E_DAO_NoTransport					DBDAOERR(3508) //There is no active transport for the Synchronizer.
#define E_DAO_TransportNotFound				DBDAOERR(3509) //Could not find a valid transport for this Synchronizer.
#define E_DAO_ReplicaAlreadyLocked			DBDAOERR(3510) //The member of the replica set you are attempting to synchronize is currently being used in another synchronization.
#define E_DAO_DBAccess						DBDAOERR(3511) //*
#define E_DAO_TransportReadFailure			DBDAOERR(3512) //Failed to read the dropbox folder.
#define E_DAO_TransportWriteFailure			DBDAOERR(3513) //Failed to write to the dropbox folder.
#define E_DAO_NoExchange					DBDAOERR(3514) //Synchronizer could not find any scheduled or on-demand synchronizations to process.
#define E_DAO_SysClock						DBDAOERR(3515) //The Microsoft Jet database engine could not read the system clock on your computer.
#define E_DAO_NoTransportAddress			DBDAOERR(3516) //Destination synchronizer is not configured to support indirect synchronronization, and the destination replica is unavailable for direct synchronization
#define E_DAO_NoMessage						DBDAOERR(3517) //Synchronizer could not find any messages to process.
#define E_DAO_TransporterNotFound			DBDAOERR(3518) //Could not find Synchronizer in the MSysTranspAddress table.
#define E_DAO_TransportSendFailure			DBDAOERR(3519) //Failed to send a message.
#define E_DAO_ReplicaNotFound				DBDAOERR(3520) //The replica name or ID does not match a currently managed member of the replica set.
#define E_DAO_OutOfSynch					DBDAOERR(3521) //Two members of the replica set cannot be synchronized because there is no common point to start the synchronization.
#define E_DAO_ExchangeNotFound				DBDAOERR(3522) //Synchronizer cannot find the record of a specific synchronization in the MSysExchangeLog table.
#define E_DAO_SchemaNotFound				DBDAOERR(3523) //Synchronizer cannot find a specific version number in the MSysSchChange table.
#define E_DAO_SchemaHistMismatch			DBDAOERR(3524) //The history of design changes in the replica does not match the history in the Design Master.
#define E_DAO_MessageDBAccess				DBDAOERR(3525) //Synchronizer could not access the message database.
#define E_DAO_ObjectAlreadyExists			DBDAOERR(3526) //The name selected for the system object is already in use.
#define E_DAO_ObjectDoesntExist				DBDAOERR(3527) //The Synchronizer or Replication Manager could not find the system object.
#define E_DAO_NoNewData						DBDAOERR(3528) //There is no new data in shared memory for the Synchronizer or Replication Manager to read.
#define E_DAO_PrevDataNotRead				DBDAOERR(3529) //The Synchronizer or Replication Manager found unread data in the shared memory. The existing data will be overwritten.
#define E_DAO_ClientAlreadyExists			DBDAOERR(3530) //The Synchronizer is already serving a client.
#define E_DAO_WaitTimeout					DBDAOERR(3531) //The wait period for an event has timed out.
#define E_DAO_ServerInitialization			DBDAOERR(3532) //Synchronizer could not be initialized.
#define E_DAO_ObjectAbandoned				DBDAOERR(3533) //The system object used by a process still exists after the process has stopped.
#define E_DAO_NoEvent						DBDAOERR(3534) //Synchronizer looked for a system event but did not find one to report to the client.
#define E_DAO_ClientSentTerm				DBDAOERR(3535) //Client has asked the Synchronizer to terminate operation.
#define E_DAO_InvalidMessage				DBDAOERR(3536) //Synchronizer received an invalid message for a member of the replica set that it manages.
#define E_DAO_NoClient						DBDAOERR(3537) //The Synchronizer's client is no longer present and cannot be notified.
#define E_DAO_TooManyTasks					DBDAOERR(3538) //Cannot initialize Synchronizer because there are too many applications running.
#define E_DAO_SysDiskIO						DBDAOERR(3539) //A system error has occurred or your swap file has reached its limit.
#define E_DAO_PageFile						DBDAOERR(3540) //Your swap file has reached its limit or is corrupted.
#define E_DAO_ProcessStillActive			DBDAOERR(3541) //Synchronizer could not be shut down properly and is still active.
#define E_DAO_ProcessAborted				DBDAOERR(3542) //Process stopped when attempting to terminate Synchronizer client.
#define E_DAO_TransporterNotSetup			DBDAOERR(3543) //Synchronizer has not been set up.
#define E_DAO_ServerAlreadyRunning			DBDAOERR(3544) //Synchronizer is already running.
#define E_DAO_DiffReplicaSet				DBDAOERR(3545) //The two replicas you are attempting to synchronize are from different replica sets.
#define E_DAO_BadExchangeType				DBDAOERR(3546) //The type of synchronization you are attempting is not valid.
#define E_DAO_NoReplica						DBDAOERR(3547) //Synchronizer could not find a replica from the correct set to complete the synchronization.
#define E_DAO_GuidMismatch					DBDAOERR(3548) //GUIDs do not match or the requested GUID could not be found.
#define E_DAO_FilenameTooLong				DBDAOERR(3549) //The file name you provided is too long.
#define E_DAO_NoGuidIndex					DBDAOERR(3550) //There is no index on the GUID column.
#define E_DAO_UnableToDeleteParam			DBDAOERR(3551) //Unable to delete the specified Registry parameter for the Synchronizer.
#define E_DAO_ValueTooBig					DBDAOERR(3552) //The size of the Registry parameter exceeds the maximum allowed.
#define E_DAO_REPGuidCreateFailure			DBDAOERR(3553) //The GUID could not be created.
#define E_DAO_REPDBMovedCopied				DBDAOERR(3554) //*
#define E_DAO_REPNoValidNick				DBDAOERR(3555) //All valid nicknames for replicas are already in use.
#define E_DAO_TransportDestInvalidPath		DBDAOERR(3556) //Invalid path for destination dropbox folder.
#define E_DAO_TransDestInvalidAddress		DBDAOERR(3557) //Invalid address for destination dropbox folder.
#define E_DAO_TransportDestDiskIO			DBDAOERR(3558) //Disk I/O error at destination dropbox folder.
#define E_DAO_TransportDestDiskFull			DBDAOERR(3559) //Failure to write because destination disk is full.
#define E_DAO_REPSameReplicaID				DBDAOERR(3560) //The two members of the replica set you are attempting to synchronize have the same ReplicaID.
#define E_DAO_REPBothMasters				DBDAOERR(3561) //The two members of the replica set you are attempting to synchronize are both Design Masters.
#define E_DAO_TransDestAccessDenied			DBDAOERR(3562) //Access denied at destination dropbox folder.
#define E_DAO_TransportSrcAccess			DBDAOERR(3563) //Fatal error accessing a local dropbox folder.
#define E_DAO_TransportSrcFileNotFound		DBDAOERR(3564) //Synchronizer can't find the source file for messages.
#define E_DAO_TransSrcSharingViolation		DBDAOERR(3565) //There is a sharing violation in the source dropbox folder because the message database is open in another application.
#define E_DAO_NetworkIO						DBDAOERR(3566) //Network I/O error.
#define E_DAO_TransportWrongMessage			DBDAOERR(3567) //Message in dropbox folder belongs to the wrong Synchronizer.
#define E_DAO_TransportDeleteFailure		DBDAOERR(3568) //Synchronizer could not delete a file.
#define E_DAO_RepRemoved					DBDAOERR(3569) //This member of the replica set has been logically removed from the set and is no longer available.
#define E_DAO_FiltersChanged				DBDAOERR(3570) //The filters defining a partial replica are out of synch with each other.
#define E_DAO_LimitedUpdate					DBDAOERR(3571) //The attempt  to set a column in a partial replica violated a rule governing partial replicas.
#define E_DAO_TempDiskIO					DBDAOERR(3572) //A disk I/O error occurred while reading or writing to the TEMP directory.
#define E_DAO_DirNotManaged					DBDAOERR(3573) //The directory you queried for a list of replicas is not a managed directory.
#define E_DAO_RepidChanged					DBDAOERR(3574) //The ReplicaID for this member of the replica set was reassigned during a move or copy procedure.
#define E_DAO_DiskFullM						DBDAOERR(3575) //The disk drive you are attempting to write to is full.
#define E_DAO_ShareViolationM				DBDAOERR(3576) //The database you are attempting to open is already in use by another application.
#define E_DAO_UpdateReplCol					DBDAOERR(3577) //Can't update replication system column.
#define E_DAO_GetDbinfoM					DBDAOERR(3578) //Failure to replicate database; can't determine whether the database is open in exclusive mode.
#define E_DAO_MakeRepTablesM				DBDAOERR(3579) //Could not create replication system tables needed to make the database replicable.
#define E_DAO_AddReplicaInfoM				DBDAOERR(3580) //Could not add rows needed to make the database replicable.
#define E_DAO_OpenRepTablesM				DBDAOERR(3581) //Can't open replication system table '|' because the table is already in use.
#define E_DAO_CreateReplicaObjectM			DBDAOERR(3582) //Cannot make a new replica because the |2 object in |1 container could not be made replicable.
#define E_DAO_MakeObjectReplM				DBDAOERR(3583) //Cannot make the |2 object in |1 container replicable.
#define E_DAO_OutOfMemoryM					DBDAOERR(3584) //Insufficient memory to complete operation.
#define E_DAO_RepTooManyColumnsM			DBDAOERR(3585) //Can't replicate the table; the number of columns exceeds the maximum allowed.
#define E_DAO_PARTFilterExprSyntaxM			DBDAOERR(3586) //Syntax error in partial filter expression on table |1.
#define E_DAO_PARTUnknownTokenM				DBDAOERR(3587) //Invalid expression in the ReplicaFilter property.
#define E_DAO_PARTExprEvaluationM			DBDAOERR(3588) //Error when evaluating the partial filter expression.
#define E_DAO_PARTExprUnknownFuncM			DBDAOERR(3589) //The partial filter expression contains an unknown function.
#define E_DAO_LimitedUpdateM				DBDAOERR(3590) //Violates the rules for partial replicas.
#define E_DAO_LogInvalidPathM				DBDAOERR(3591) //Log file path '|1' is invalid.
#define E_DAO_REPPasswdNotAllowed			DBDAOERR(3592) //You can't replicate a password-protected database or set password protection on a replicated database.
#define E_DAO_BadSingleMasterAttrib			DBDAOERR(3593) //You can't change the data master attribute for the replica set.
#define E_DAO_BadMultiMasterAttrib			DBDAOERR(3594) //You can't change the data master attribute for the replica set.  It allows data changes only at the Design Master.
#define E_DAO_REPCantRepair					DBDAOERR(3595) //The system tables in your replica are no longer reliable and the replica should not be used.
#define E_DAO_NoDataIncluded				DBDAOERR(3596) //*
#define E_DAO_SenderNotFound				DBDAOERR(3597) //*
#define E_DAO_CouldnotFindService			DBDAOERR(3598) //*
#define E_DAO_UnableToStartService			DBDAOERR(3599) //*
#define E_DAO_ExprAggIllegalOnGuid			DBDAOERR(3600) //Aggregation expressions cannot use GUIDs.
#define E_DAO_RefreshReplicaList			DBDAOERR(3601) //*
#define E_DAO_MoreWorkNeeded				DBDAOERR(3602) //*
#define E_DAO_SenderTooOld					DBDAOERR(3603) //*
#define E_DAO_RepAccess						DBDAOERR(3604) //*
#define E_DAO_REPDbNotReplicableM			DBDAOERR(3605) //Synchronizing with a non-replicated database is not allowed. The '|' database is not a Design Master or replica.
#define E_DAO_DaemonDied					DBDAOERR(3606) //*
#define E_DAO_REPCantDelete					DBDAOERR(3607) //The replication property you are attempting to delete is read-only and cannot be removed.
#define E_DAO_IndexCantBuild				DBDAOERR(3608) //Record length is too long for an indexed Paradox table.
#define E_DAO_RelNoPrimaryIndex				DBDAOERR(3609) //No unique index found for the referenced field of the primary table.
#define E_DAO_QuerySameSrcDestTableM		DBDAOERR(3610) //Same table '|' referenced as both the source and destination in make-table query.
#define E_DAO_InvalidDDLObject				DBDAOERR(3611) //Can't execute data definition statements on linked data sources.
#define E_DAO_QueryMGBWithSubquery			DBDAOERR(3612) //Multi-level GROUP BY clause is not allowed in a subquery.
#define E_DAO_SQLLinkNotSupported			DBDAOERR(3613) //Can't create a relationship on linked ODBC tables.
#define E_DAO_InvalidFindOnGUID				DBDAOERR(3614) //GUID not allowed in Find method criteria expression.
#define E_DAO_QueryJoinExprInComp			DBDAOERR(3615) //Type mismatch in JOIN expression.
#define E_DAO_UpdateNotAvailable			DBDAOERR(3616) //Updating data in a linked table is not supported by this ISAM.
#define E_DAO_DeleteNotAvailable			DBDAOERR(3617) //Deleting data in a linked table is not supported by this ISAM.
#define E_DAO_ExceptTableCreateFail			DBDAOERR(3618) //Exceptions table could not be created on import/export.
#define E_DAO_ExceptTableWriteFail			DBDAOERR(3619) //Records could not be added to exceptions table.
#define E_DAO_ExcelOLEConnectLost			DBDAOERR(3620) //The connection for viewing your linked Microsoft Excel worksheet was lost.
#define E_DAO_CantChangeDbPwdOnShared		DBDAOERR(3621) //Can't change password on a shared open database.
#define E_DAO_RmtMustCheckTimeStamp			DBDAOERR(3622) //You must use the dbSeeChanges option with OpenRecordset when accessing a SQL Server table that has an IDENTITY column.
#define E_DAO_NotWithBoundFileM				DBDAOERR(3623) //Cannot access the FoxPro 3.0 bound DBF file '|'.
#define E_DAO_CommitConflict				DBDAOERR(3624) //Couldn't read the record; currently locked by another user.
#define E_DAO_NoSuchSpecM					DBDAOERR(3625) //The text file specification '|' does not exist.  You can't import, export, or link using the specification.
#define E_DAO_TooManyIndexesM				DBDAOERR(3626) //The operation failed.  There are too many indexes on table '|'.  Delete some of the indexes on the table and try the operation again.
#define E_DAO_TransExeNotFound				DBDAOERR(3627) //Cannot find the executable file for the Synchronizer (mstran35.exe).
#define E_DAO_RemRepNotManaged				DBDAOERR(3628) //Partner replica is not managed by a Synchronizer.
#define E_DAO_FSDropboxShared				DBDAOERR(3629) //Synchronizer '|1' is also using the same File System dropbox '|2'.
#define E_DAO_FSDropboxSharedM				DBDAOERR(3630) //Synchronizer '|1' is also using the same File System dropbox '|2'.
#define E_DAO_RepInvalidTableInFilter		DBDAOERR(3631) //Invalid Table Name In Filter
#define E_DAO_InetNotEnabled				DBDAOERR(3632) //Internet Transport not enabled on the remote Synchronizer.
#define E_DAO_VtoDllLoadFailed				DBDAOERR(3633) //Can't load DLL:  '|'
#define E_DAO_REPDBIsPartial				DBDAOERR(3634) //Cannot create a replica using a partial replica.
#define E_DAO_CantCreatePartialSys			DBDAOERR(3635) //Cannot create partial replica of a system database.
#define E_DAO_CantPopulateWithErrors		DBDAOERR(3636) //Cannot populate the replica or change the replica's filter because the replica has conflicts or data errors.
#define E_DAO_QueryEmbeddedVarTab			DBDAOERR(3637) //Cannot use the crosstab of a non-fixed column as a subquery.
#define E_DAO_SrcCntrlDB					DBDAOERR(3638) //A Source Controlled database cannot be made replicable.
#define E_DAO_CantCreateSysReplica			DBDAOERR(3639) //Cannot create a replica of a System database.
#define E_DAO_VtoFetchBuffTooSmall			DBDAOERR(3640) //The fetch buffer was too small for the amount of data you requested.
#define E_DAO_VtoEOFDuringFetch				DBDAOERR(3641) //There are fewer records remaining in the recordset than you requested.
#define E_DAO_VtoSilentCancel				DBDAOERR(3642) //A cancel was performed on the operation.
#define E_DAO_VtoRecordDeleted				DBDAOERR(3643) //One of the records in the recordset was deleted by another process.
#define E_DAO_3644							DBDAOERR(3644) //*
#define E_DAO_VtoBadBindInfo				DBDAOERR(3645) //One of the binding parameters is incorrect.
#define E_DAO_VtoRowLenTooSmall				DBDAOERR(3646) //The specified row length is shorter than the sum of the column lengths.
#define E_DAO_VtoColumnMissing				DBDAOERR(3647) //A column requested is not being returned to the recordset.
#define E_DAO_BothPartials					DBDAOERR(3648) //Cannot synchronize a partial replica with another partial replica.
#define E_DAO_InvalidCodePage				DBDAOERR(3649) //The language-specific code page was not specified or could not be found.
#define E_DAO_InetTooSlow					DBDAOERR(3650) //Either the Internet is very slow OR there is some problem in the replication manager setup on the internet server machine.
#define E_DAO_InetInvalidAddress			DBDAOERR(3651) //Invalid internet address.
#define E_DAO_InetLoginFailure				DBDAOERR(3652) //Internet login failure.
#define E_DAO_InetNotSetup					DBDAOERR(3653) //Internet not set up.
#define E_DAO_InetInternalFailure			DBDAOERR(3654) //Internal internet failure.
#define E_DAO_InetServicesUnavailable		DBDAOERR(3655) //The wininet.dll can't be loaded or initialized.
#define E_DAO_PARTExprEvaluation			DBDAOERR(3656) //Error in evaluating a partial expression
#define E_DAO_PARTFilterEvalM				DBDAOERR(3657) //Error in evaluating the boolean filter expression for table '|1'.
#define E_DAO_PARTBinaryNotAllowedM			DBDAOERR(3658) //Binary column '|' cannot be used in a boolean filter.
#define E_DAO_PARTUnenforcedRelM			DBDAOERR(3659) //Relationship '|1' is unenforced. Relationship in a partial filter expression must be enforced.
#define E_DAO_ExchangeFailed				DBDAOERR(3660) //Requested exchange failed because '|1'
#define E_DAO_ExchangeFailedM				DBDAOERR(3661) //Requested exchange failed because '|1'
#define E_DAO_VtoRSNeedsBatchCursorLib		DBDAOERR(3662) //*
#define E_DAO_VtoNeedDiffCursorLibrary		DBDAOERR(3663) //This operation requires a different cursor library.
#define E_DAO_VtoStillConnecting			DBDAOERR(3664) //An asynchronous OpenConnection call is not yet complete, and you cannot yet reference the returned Connection object until it is complete.
#define E_DAO_AccessDeniedRepl				DBDAOERR(3665) //You cannot modify the replication system object '1'
#define E_DAO_AccessDeniedReplM				DBDAOERR(3666) //You cannot modify the replication system object '1'
#define E_DAO_VtoOtherOperBlocking			DBDAOERR(3667) //A different operation is preventing this operation from being executed.
#define E_DAO_VtoNoActiveConnection			DBDAOERR(3668) //Can not perform this operation because there is no active connection.
#define E_DAO_VtoExecCancelled				DBDAOERR(3669) //Execution cancelled.
#define E_DAO_VtoCursorNotValid				DBDAOERR(3670) //Cursor is not valid.
#define E_DAO_VtoCanNotFindTable			DBDAOERR(3671) //Can not find table to update.
#define E_DAO_VtoCanNotFindCursLib			DBDAOERR(3672) //Failed to load RDOCURS.DLL.

#endif // def _DBDAOERR.H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\dbdaoint.h ===
/************************************************************************ 
**	D B D A O I N T. H													*
**																		*
************************************************************************* 
** Copyright (C) 1995-1997 by Microsoft Corporation						*
**		   All Rights Reserved					 						*
************************************************************************/ 
/*
 DBDAOINT.H
 OLE DAO Interface.  
This is a part of the Microsoft Data Access Objects SDK library.
See the dao*.hlp files for detailed information regarding the
Microsoft Data Access Objects SDK product.
 
*/
#ifndef _DBDAOINT_H_
#define _DBDAOINT_H_

#ifndef _INC_TCHAR
#include <tchar.h>
#endif

// Forwards
interface _DAODBEngine;
#define DAODBEngine _DAODBEngine
interface DAOError;
interface _DAOCollection;
#define DAOCollection _DAOCollection
interface DAOErrors;
interface DAOProperty;
interface _DAODynaCollection;
#define DAODynaCollection _DAODynaCollection
interface DAOProperties;
interface DAOWorkspace;
interface DAOWorkspaces;
interface DAOConnection;
interface DAOConnections;
interface DAODatabase;
interface DAODatabases;
interface _DAOTableDef;
#define DAOTableDef _DAOTableDef
interface DAOTableDefs;
interface _DAOQueryDef;
#define DAOQueryDef _DAOQueryDef
interface DAOQueryDefs;
interface DAORecordset;
interface DAORecordsets;
interface _DAOField;
#define DAOField _DAOField
interface DAOFields;
interface _DAOIndex;
#define DAOIndex _DAOIndex
interface DAOIndexes;
interface DAOParameter;
interface DAOParameters;
interface _DAOUser;
#define DAOUser _DAOUser
interface DAOUsers;
interface _DAOGroup;
#define DAOGroup _DAOGroup
interface DAOGroups;
interface _DAORelation;
#define DAORelation _DAORelation
interface DAORelations;
interface DAOContainer;
interface DAOContainers;
interface DAODocument;
interface DAODocuments;
interface DAOIndexFields;



typedef enum RecordsetTypeEnum
    {	dbOpenTable	= 1,
	dbOpenDynaset	= 2,
	dbOpenSnapshot	= 4,
	dbOpenForwardOnly	= 8,
	dbOpenDynamic	= 16
    }	RecordsetTypeEnum;


typedef enum EditModeEnum
    {	dbEditNone	= 0,
	dbEditInProgress	= 1,
	dbEditAdd	= 2,
	dbEditChanged	= 4,
	dbEditDeleted	= 8,
	dbEditNew	= 16
    }	EditModeEnum;


typedef enum RecordsetOptionEnum
    {	dbDenyWrite	= 0x1,
	dbDenyRead	= 0x2,
	dbReadOnly	= 0x4,
	dbAppendOnly	= 0x8,
	dbInconsistent	= 0x10,
	dbConsistent	= 0x20,
	dbSQLPassThrough	= 0x40,
	dbFailOnError	= 0x80,
	dbForwardOnly	= 0x100,
	dbSeeChanges	= 0x200,
	dbRunAsync	= 0x400,
	dbExecDirect	= 0x800
    }	RecordsetOptionEnum;


typedef enum LockTypeEnum
    {	dbPessimistic	= 0x2,
	dbOptimistic	= 0x3,
	dbOptimisticValue	= 0x1,
	dbOptimisticBatch	= 0x5
    }	LockTypeEnum;


typedef enum UpdateCriteriaEnum
    {	dbCriteriaKey	= 0x1,
	dbCriteriaModValues	= 0x2,
	dbCriteriaAllCols	= 0x4,
	dbCriteriaTimestamp	= 0x8,
	dbCriteriaDeleteInsert	= 0x10,
	dbCriteriaUpdate	= 0x20
    }	UpdateCriteriaEnum;


typedef enum FieldAttributeEnum
    {	dbFixedField	= 0x1,
	dbVariableField	= 0x2,
	dbAutoIncrField	= 0x10,
	dbUpdatableField	= 0x20,
	dbSystemField	= 0x2000,
	dbHyperlinkField	= 0x8000,
	dbDescending	= 0x1
    }	FieldAttributeEnum;


typedef enum DataTypeEnum
    {	dbBoolean	= 1,
	dbByte	= 2,
	dbInteger	= 3,
	dbLong	= 4,
	dbCurrency	= 5,
	dbSingle	= 6,
	dbDouble	= 7,
	dbDate	= 8,
	dbBinary	= 9,
	dbText	= 10,
	dbLongBinary	= 11,
	dbMemo	= 12,
	dbGUID	= 15,
	dbBigInt	= 16,
	dbVarBinary	= 17,
	dbChar	= 18,
	dbNumeric	= 19,
	dbDecimal	= 20,
	dbFloat	= 21,
	dbTime	= 22,
	dbTimeStamp	= 23
    }	DataTypeEnum;


typedef enum RelationAttributeEnum
    {	dbRelationUnique	= 0x1,
	dbRelationDontEnforce	= 0x2,
	dbRelationInherited	= 0x4,
	dbRelationUpdateCascade	= 0x100,
	dbRelationDeleteCascade	= 0x1000,
	dbRelationLeft	= 0x1000000,
	dbRelationRight	= 0x2000000
    }	RelationAttributeEnum;


typedef enum TableDefAttributeEnum
    {	dbAttachExclusive	= 0x10000,
	dbAttachSavePWD	= 0x20000,
	dbSystemObject	= 0x80000002,
	dbAttachedTable	= 0x40000000,
	dbAttachedODBC	= 0x20000000,
	dbHiddenObject	= 0x1
    }	TableDefAttributeEnum;


typedef enum QueryDefTypeEnum
    {	dbQSelect	= 0,
	dbQProcedure	= 0xe0,
	dbQAction	= 0xf0,
	dbQCrosstab	= 0x10,
	dbQDelete	= 0x20,
	dbQUpdate	= 0x30,
	dbQAppend	= 0x40,
	dbQMakeTable	= 0x50,
	dbQDDL	= 0x60,
	dbQSQLPassThrough	= 0x70,
	dbQSetOperation	= 0x80,
	dbQSPTBulk	= 0x90,
	dbQCompound	= 0xa0
    }	QueryDefTypeEnum;


typedef enum QueryDefStateEnum
    {	dbQPrepare	= 1,
	dbQUnprepare	= 2
    }	QueryDefStateEnum;


typedef enum DatabaseTypeEnum
    {	dbVersion10	= 1,
	dbEncrypt	= 2,
	dbDecrypt	= 4,
	dbVersion11	= 8,
	dbVersion20	= 16,
	dbVersion30	= 32,
	dbVersion40	= 64
    }	DatabaseTypeEnum;


typedef enum CollatingOrderEnum
    {	dbSortNeutral	= 0x400,
	dbSortArabic	= 0x401,
	dbSortCyrillic	= 0x419,
	dbSortCzech	= 0x405,
	dbSortDutch	= 0x413,
	dbSortGeneral	= 0x409,
	dbSortGreek	= 0x408,
	dbSortHebrew	= 0x40d,
	dbSortHungarian	= 0x40e,
	dbSortIcelandic	= 0x40f,
	dbSortNorwdan	= 0x406,
	dbSortPDXIntl	= 0x409,
	dbSortPDXNor	= 0x406,
	dbSortPDXSwe	= 0x41d,
	dbSortPolish	= 0x415,
	dbSortSpanish	= 0x40a,
	dbSortSwedFin	= 0x41d,
	dbSortTurkish	= 0x41f,
	dbSortJapanese	= 0x411,
	dbSortChineseSimplified	= 0x804,
	dbSortChineseTraditional	= 0x404,
	dbSortKorean	= 0x412,
	dbSortThai	= 0x41e,
	dbSortSlovenian	= 0x424,
	dbSortUndefined	= -1
    }	CollatingOrderEnum;


typedef enum IdleEnum
    {	dbFreeLocks	= 1,
	dbRefreshCache	= 8
    }	IdleEnum;


typedef enum PermissionEnum
    {	dbSecNoAccess	= 0,
	dbSecFullAccess	= 0xfffff,
	dbSecDelete	= 0x10000,
	dbSecReadSec	= 0x20000,
	dbSecWriteSec	= 0x40000,
	dbSecWriteOwner	= 0x80000,
	dbSecDBCreate	= 0x1,
	dbSecDBOpen	= 0x2,
	dbSecDBExclusive	= 0x4,
	dbSecDBAdmin	= 0x8,
	dbSecCreate	= 0x1,
	dbSecReadDef	= 0x4,
	dbSecWriteDef	= 0x1000c,
	dbSecRetrieveData	= 0x14,
	dbSecInsertData	= 0x20,
	dbSecReplaceData	= 0x40,
	dbSecDeleteData	= 0x80
    }	PermissionEnum;


typedef enum SynchronizeTypeEnum
    {	dbRepExportChanges	= 0x1,
	dbRepImportChanges	= 0x2,
	dbRepImpExpChanges	= 0x4,
	dbRepSyncInternet	= 0x10
    }	SynchronizeTypeEnum;


typedef enum ReplicaTypeEnum
    {	dbRepMakeReadOnly	= 0x2,
	dbRepMakePartial	= 0x1
    }	ReplicaTypeEnum;


typedef enum WorkspaceTypeEnum
    {	dbUseODBC	= 1,
	dbUseJet	= 2
    }	WorkspaceTypeEnum;


typedef enum CursorDriverEnum
    {	dbUseDefaultCursor	= -1,
	dbUseODBCCursor	= 1,
	dbUseServerCursor	= 2,
	dbUseClientBatchCursor	= 3,
	dbUseNoCursor	= 4
    }	CursorDriverEnum;


typedef enum DriverPromptEnum
    {	dbDriverPrompt	= 2,
	dbDriverNoPrompt	= 1,
	dbDriverComplete	= 0,
	dbDriverCompleteRequired	= 3
    }	DriverPromptEnum;


typedef enum SetOptionEnum
    {	dbPageTimeout	= 6,
	dbLockRetry	= 57,
	dbMaxBufferSize	= 8,
	dbUserCommitSync	= 58,
	dbImplicitCommitSync	= 59,
	dbExclusiveAsyncDelay	= 60,
	dbSharedAsyncDelay	= 61,
	dbMaxLocksPerFile	= 62,
	dbLockDelay	= 63,
	dbRecycleLVs	= 65,
	dbFlushTransactionTimeout	= 66
    }	SetOptionEnum;


typedef enum ParameterDirectionEnum
    {	dbParamInput	= 1,
	dbParamOutput	= 2,
	dbParamInputOutput	= 3,
	dbParamReturnValue	= 4
    }	ParameterDirectionEnum;


typedef enum UpdateTypeEnum
    {	dbUpdateBatch	= 4,
	dbUpdateRegular	= 1,
	dbUpdateCurrentRecord	= 2
    }	UpdateTypeEnum;


typedef enum RecordStatusEnum
    {	dbRecordUnmodified	= 0,
	dbRecordModified	= 1,
	dbRecordNew	= 2,
	dbRecordDeleted	= 3,
	dbRecordDBDeleted	= 4
    }	RecordStatusEnum;


typedef enum CommitTransOptionsEnum
    {	dbForceOSFlush	= 1
    }	CommitTransOptionsEnum;


typedef enum _DAOSuppHelp
    {	LogMessages	= 0,
	KeepLocal	= 0,
	Replicable	= 0,
	ReplicableBool	= 0,
	V1xNullBehavior	= 0
    }	_DAOSuppHelp;

#define dbLangArabic _T(";LANGID=0x0401;CP=1256;COUNTRY=0")
#define dbLangCzech _T(";LANGID=0x0405;CP=1250;COUNTRY=0")
#define dbLangDutch _T(";LANGID=0x0413;CP=1252;COUNTRY=0")
#define dbLangGeneral _T(";LANGID=0x0409;CP=1252;COUNTRY=0")
#define dbLangGreek _T(";LANGID=0x0408;CP=1253;COUNTRY=0")
#define dbLangHebrew _T(";LANGID=0x040D;CP=1255;COUNTRY=0")
#define dbLangHungarian _T(";LANGID=0x040E;CP=1250;COUNTRY=0")
#define dbLangIcelandic _T(";LANGID=0x040F;CP=1252;COUNTRY=0")
#define dbLangNordic _T(";LANGID=0x041D;CP=1252;COUNTRY=0")
#define dbLangNorwDan _T(";LANGID=0x0414;CP=1252;COUNTRY=0")
#define dbLangPolish _T(";LANGID=0x0415;CP=1250;COUNTRY=0")
#define dbLangCyrillic _T(";LANGID=0x0419;CP=1251;COUNTRY=0")
#define dbLangSpanish _T(";LANGID=0x040A;CP=1252;COUNTRY=0")
#define dbLangSwedFin _T(";LANGID=0x040B;CP=1252;COUNTRY=0")
#define dbLangTurkish _T(";LANGID=0x041F;CP=1254;COUNTRY=0")
#define dbLangJapanese _T(";LANGID=0x0411;CP=932;COUNTRY=0")
#define dbLangChineseSimplified _T(";LANGID=0x0804;CP=936;COUNTRY=0")
#define dbLangChineseTraditional _T(";LANGID=0x0404;CP=950;COUNTRY=0")
#define dbLangKorean _T(";LANGID=0x0412;CP=949;COUNTRY=0")
#define dbLangThai _T(";LANGID=0x041E;CP=874;COUNTRY=0")
#define dbLangSlovenian _T(";LANGID=0x0424;CP=1250;COUNTRY=0")
// Interface: _DAOCollection
#undef INTERFACE
#define INTERFACE _DAOCollection
DECLARE_INTERFACE_(_DAOCollection, IDispatch)
	{
	STDMETHOD(get_Count)						 (THIS_ short FAR* c) PURE;
	STDMETHOD(_NewEnum)							 (THIS_ IUnknown * FAR* ppunk) PURE;
	STDMETHOD(Refresh)							 (THIS) PURE;
	};
 
// Interface: _DAODynaCollection
#undef INTERFACE
#define INTERFACE _DAODynaCollection
DECLARE_INTERFACE_(_DAODynaCollection, _DAOCollection)
	{
	STDMETHOD(Append)							 (THIS_ IDispatch * Object) PURE;
	STDMETHOD(Delete)							 (THIS_ BSTR Name) PURE;
	};
 
// Interface: _DAO
#undef INTERFACE
#define INTERFACE _DAO
DECLARE_INTERFACE_(_DAO, IDispatch)
	{
	STDMETHOD(get_Properties)					 (THIS_ DAOProperties FAR* FAR* ppprops) PURE;
	};
// Interface: _DAODBEngine
#undef INTERFACE
#define INTERFACE _DAODBEngine
DECLARE_INTERFACE_(_DAODBEngine, _DAO)
{
	STDMETHOD( get_Properties )						(
			/* [retval][out] */ DAOProperties __RPC_FAR *__RPC_FAR *ppprops );
	STDMETHOD( get_Version )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_IniPath )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_IniPath )					 ( 
    
 /* [in] */ BSTR path ) PURE;
	STDMETHOD( put_DefaultUser )				 ( 
    
 /* [in] */ BSTR user ) PURE;
	STDMETHOD( put_DefaultPassword )			 ( 
    
 /* [in] */ BSTR pw ) PURE;
	STDMETHOD( get_LoginTimeout )				 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_LoginTimeout )				 ( 
    
 /* [in] */ short Timeout ) PURE;
	STDMETHOD( get_Workspaces )					 ( 
    
 /* [retval][out] */ DAOWorkspaces __RPC_FAR *__RPC_FAR *ppworks ) PURE;
	STDMETHOD( get_Errors )						 ( 
    
 /* [retval][out] */ DAOErrors __RPC_FAR *__RPC_FAR *pperrs ) PURE;
	STDMETHOD( Idle )							 ( 
    
 /* [optional][in] */ VARIANT Action ) PURE;
	STDMETHOD( CompactDatabase )				 ( 
    
 /* [in] */ BSTR SrcName,
 /* [in] */ BSTR DstName,
 /* [optional][in] */ VARIANT DstLocale,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT SrcLocale ) PURE;
	STDMETHOD( RepairDatabase )					 ( 
    
 /* [in] */ BSTR Name ) PURE;
	STDMETHOD( RegisterDatabase )				 ( 
    
 /* [in] */ BSTR Dsn,
 /* [in] */ BSTR Driver,
 /* [in] */ VARIANT_BOOL Silent,
 /* [in] */ BSTR Attributes ) PURE;
	STDMETHOD( _30_CreateWorkspace )			 ( 
    
 /* [in] */ BSTR Name,
 /* [in] */ BSTR UserName,
 /* [in] */ BSTR Password,
 /* [retval][out] */ DAOWorkspace __RPC_FAR *__RPC_FAR *ppwrk ) PURE;
	STDMETHOD( OpenDatabase )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT ReadOnly,
 /* [optional][in] */ VARIANT Connect,
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppdb ) PURE;
	STDMETHOD( CreateDatabase )					 ( 
    
 /* [in] */ BSTR Name,
 /* [in] */ BSTR Locale,
 /* [optional][in] */ VARIANT Option,
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppdb ) PURE;
	STDMETHOD( FreeLocks )						 ( 
   			VOID ) PURE;
	STDMETHOD( BeginTrans )						 ( 
   			VOID ) PURE;
	STDMETHOD( CommitTrans )					 ( 
    
 /* [defaultvalue][in] */ long Option ) PURE;
	STDMETHOD( Rollback )						 ( 
   			VOID ) PURE;
	STDMETHOD( SetDefaultWorkspace )			 ( 
    
 /* [in] */ BSTR Name,
 /* [in] */ BSTR Password ) PURE;
	STDMETHOD( SetDataAccessOption )			 ( 
    
 /* [in] */ short Option,
 /* [in] */ VARIANT Value ) PURE;
	STDMETHOD( ISAMStats )						 ( 
    
 /* [in] */ long StatNum,
 /* [optional][in] */ VARIANT Reset,
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_SystemDB )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_SystemDB )					 ( 
    
 /* [in] */ BSTR SystemDBPath ) PURE;
	STDMETHOD( CreateWorkspace )				 ( 
    
 /* [in] */ BSTR Name,
 /* [in] */ BSTR UserName,
 /* [in] */ BSTR Password,
 /* [optional][in] */ VARIANT UseType,
 /* [retval][out] */ DAOWorkspace __RPC_FAR *__RPC_FAR *ppwrk ) PURE;
	STDMETHOD( OpenConnection )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT ReadOnly,
 /* [optional][in] */ VARIANT Connect,
 /* [retval][out] */ DAOConnection __RPC_FAR *__RPC_FAR *ppconn ) PURE;
	STDMETHOD( get_DefaultType )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *Option ) PURE;
	STDMETHOD( put_DefaultType )				 ( 
    
 /* [in] */ long Option ) PURE;
	STDMETHOD( SetOption )						 ( 
    
 /* [in] */ LONG Option,
 /* [in] */ VARIANT Value ) PURE;
	STDMETHOD( DumpObjects )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( DebugPrint )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	};// end interface;

// Interface: DAOError
#undef INTERFACE
#define INTERFACE DAOError
DECLARE_INTERFACE_(DAOError, IDispatch)
{
	STDMETHOD( get_Number )						 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Source )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Description )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_HelpFile )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_HelpContext )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	};// end interface;

// Interface: DAOErrors
#undef INTERFACE
#define INTERFACE DAOErrors
DECLARE_INTERFACE_(DAOErrors, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOError __RPC_FAR *__RPC_FAR *pperr ) PURE;
	};// end interface;

// Interface: DAOProperty
#undef INTERFACE
#define INTERFACE DAOProperty
DECLARE_INTERFACE_(DAOProperty, _DAO)
{
	STDMETHOD( get_Value )						 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pval ) PURE;
	STDMETHOD( put_Value )						 ( 
    
 /* [in] */ VARIANT val ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ short __RPC_FAR *ptype ) PURE;
	STDMETHOD( put_Type )						 ( 
    
 /* [in] */ short type ) PURE;
	STDMETHOD( get_Inherited )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	};// end interface;

// Interface: DAOProperties
#undef INTERFACE
#define INTERFACE DAOProperties
DECLARE_INTERFACE_(DAOProperties, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *ppprop ) PURE;
	};// end interface;

// Interface: DAOWorkspace
#undef INTERFACE
#define INTERFACE DAOWorkspace
DECLARE_INTERFACE_(DAOWorkspace, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR Name ) PURE;
	STDMETHOD( get_UserName )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put__30_UserName )				 ( 
    
 /* [in] */ BSTR UserName ) PURE;
	STDMETHOD( put__30_Password )				 ( 
    
 /* [in] */ BSTR Password ) PURE;
	STDMETHOD( get_IsolateODBCTrans )			 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_IsolateODBCTrans )			 ( 
    
 /* [in] */ short s ) PURE;
	STDMETHOD( get_Databases )					 ( 
    
 /* [retval][out] */ DAODatabases __RPC_FAR *__RPC_FAR *ppdbs ) PURE;
	STDMETHOD( get_Users )						 ( 
    
 /* [retval][out] */ DAOUsers __RPC_FAR *__RPC_FAR *ppusrs ) PURE;
	STDMETHOD( get_Groups )						 ( 
    
 /* [retval][out] */ DAOGroups __RPC_FAR *__RPC_FAR *ppgrps ) PURE;
	STDMETHOD( BeginTrans )						 ( 
   			VOID ) PURE;
	STDMETHOD( CommitTrans )					 ( 
    
 /* [defaultvalue][in] */ long Options ) PURE;
	STDMETHOD( Close )							 ( 
   			VOID ) PURE;
	STDMETHOD( Rollback )						 ( 
   			VOID ) PURE;
	STDMETHOD( OpenDatabase )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT ReadOnly,
 /* [optional][in] */ VARIANT Connect,
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppdb ) PURE;
	STDMETHOD( CreateDatabase )					 ( 
    
 /* [in] */ BSTR Name,
 /* [in] */ BSTR Connect,
 /* [optional][in] */ VARIANT Option,
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppdb ) PURE;
	STDMETHOD( CreateUser )						 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT PID,
 /* [optional][in] */ VARIANT Password,
 /* [retval][out] */ DAOUser __RPC_FAR *__RPC_FAR *ppusr ) PURE;
	STDMETHOD( CreateGroup )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT PID,
 /* [retval][out] */ DAOGroup __RPC_FAR *__RPC_FAR *ppgrp ) PURE;
	STDMETHOD( OpenConnection )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT ReadOnly,
 /* [optional][in] */ VARIANT Connect,
 /* [retval][out] */ DAOConnection __RPC_FAR *__RPC_FAR *ppconn ) PURE;
	STDMETHOD( get_LoginTimeout )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pTimeout ) PURE;
	STDMETHOD( put_LoginTimeout )				 ( 
    
 /* [in] */ long Timeout ) PURE;
	STDMETHOD( get_DefaultCursorDriver )		 ( 
    
 /* [retval][out] */ long __RPC_FAR *pCursorType ) PURE;
	STDMETHOD( put_DefaultCursorDriver )		 ( 
    
 /* [in] */ long CursorType ) PURE;
	STDMETHOD( get_hEnv )						 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *phEnv ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *ptype ) PURE;
	STDMETHOD( get_Connections )				 ( 
    
 /* [retval][out] */ DAOConnections __RPC_FAR *__RPC_FAR *ppcns ) PURE;
	};// end interface;

// Interface: DAOWorkspaces
#undef INTERFACE
#define INTERFACE DAOWorkspaces
DECLARE_INTERFACE_(DAOWorkspaces, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOWorkspace __RPC_FAR *__RPC_FAR *ppwrk ) PURE;
	};// end interface;

// Interface: DAOConnection
#undef INTERFACE
#define INTERFACE DAOConnection
DECLARE_INTERFACE_(DAOConnection, IDispatch)
{
	STDMETHOD( QueryInterface )					 ( REFIID riid, LPVOID FAR* ppvObj );
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Connect )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Database )					 ( 
    
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppDb ) PURE;
	STDMETHOD( get_hDbc )						 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *phDbc ) PURE;
	STDMETHOD( get_QueryTimeout )				 ( 
    
 /* [retval][out] */ SHORT __RPC_FAR *pSeconds ) PURE;
	STDMETHOD( put_QueryTimeout )				 ( 
    
 /* [in] */ SHORT Seconds ) PURE;
	STDMETHOD( get_Transactions )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_RecordsAffected )			 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *pRecords ) PURE;
	STDMETHOD( get_StillExecuting )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pStillExec ) PURE;
	STDMETHOD( get_Updatable )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pStillExec ) PURE;
	STDMETHOD( get_QueryDefs )					 ( 
    
 /* [retval][out] */ DAOQueryDefs __RPC_FAR *__RPC_FAR *ppqdfs ) PURE;
	STDMETHOD( get_Recordsets )					 ( 
    
 /* [retval][out] */ DAORecordsets __RPC_FAR *__RPC_FAR *pprsts ) PURE;
	STDMETHOD( Cancel )							 ( 
   			VOID ) PURE;
	STDMETHOD( Close )							 ( 
   			VOID ) PURE;
	STDMETHOD( CreateQueryDef )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT SQLText,
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdf ) PURE;
	STDMETHOD( Execute )						 ( 
    
 /* [in] */ BSTR Query,
 /* [optional][in] */ VARIANT Options ) PURE;
	STDMETHOD( OpenRecordset )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT LockEdit,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	};// end interface;

// Interface: DAOConnections
#undef INTERFACE
#define INTERFACE DAOConnections
DECLARE_INTERFACE_(DAOConnections, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOConnection __RPC_FAR *__RPC_FAR *ppconn ) PURE;
	};// end interface;

// Interface: DAODatabase
#undef INTERFACE
#define INTERFACE DAODatabase
DECLARE_INTERFACE_(DAODatabase, _DAO)
{
	STDMETHOD( get_CollatingOrder )				 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Connect )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_QueryTimeout )				 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_QueryTimeout )				 ( 
    
 /* [in] */ short Timeout ) PURE;
	STDMETHOD( get_Transactions )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Updatable )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Version )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_RecordsAffected )			 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_TableDefs )					 ( 
    
 /* [retval][out] */ DAOTableDefs __RPC_FAR *__RPC_FAR *pptdfs ) PURE;
	STDMETHOD( get_QueryDefs )					 ( 
    
 /* [retval][out] */ DAOQueryDefs __RPC_FAR *__RPC_FAR *ppqdfs ) PURE;
	STDMETHOD( get_Relations )					 ( 
    
 /* [retval][out] */ DAORelations __RPC_FAR *__RPC_FAR *pprls ) PURE;
	STDMETHOD( get_Containers )					 ( 
    
 /* [retval][out] */ DAOContainers __RPC_FAR *__RPC_FAR *ppctns ) PURE;
	STDMETHOD( get_Recordsets )					 ( 
    
 /* [retval][out] */ DAORecordsets __RPC_FAR *__RPC_FAR *pprsts ) PURE;
	STDMETHOD( Close )							 ( 
   			VOID ) PURE;
	STDMETHOD( Execute )						 ( 
    
 /* [in] */ BSTR Query,
 /* [optional][in] */ VARIANT Options ) PURE;
	STDMETHOD( _30_OpenRecordset )				 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	STDMETHOD( CreateRelation )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Table,
 /* [optional][in] */ VARIANT ForeignTable,
 /* [optional][in] */ VARIANT Attributes,
 /* [retval][out] */ DAORelation __RPC_FAR *__RPC_FAR *pprel ) PURE;
	STDMETHOD( CreateTableDef )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Attributes,
 /* [optional][in] */ VARIANT SourceTablename,
 /* [optional][in] */ VARIANT Connect,
 /* [retval][out] */ DAOTableDef __RPC_FAR *__RPC_FAR *pptdf ) PURE;
	STDMETHOD( BeginTrans )						 ( 
   			VOID ) PURE;
	STDMETHOD( CommitTrans )					 ( 
    
 /* [defaultvalue][in] */ long Options ) PURE;
	STDMETHOD( Rollback )						 ( 
   			VOID ) PURE;
	STDMETHOD( CreateDynaset )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT Inconsistent,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CreateQueryDef )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT SQLText,
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdf ) PURE;
	STDMETHOD( CreateSnapshot )					 ( 
    
 /* [in] */ BSTR Source,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( DeleteQueryDef )					 ( 
    
 /* [in] */ BSTR Name ) PURE;
	STDMETHOD( ExecuteSQL )						 ( 
    
 /* [in] */ BSTR SQL,
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( ListFields )						 ( 
    
 /* [in] */ BSTR Name,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( ListTables )						 ( 
    
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( OpenQueryDef )					 ( 
    
 /* [in] */ BSTR Name,
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdf ) PURE;
	STDMETHOD( OpenTable )						 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( get_ReplicaID )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_DesignMasterID )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_DesignMasterID )				 ( 
    
 /* [in] */ BSTR MasterID ) PURE;
	STDMETHOD( Synchronize )					 ( 
    
 /* [in] */ BSTR DbPathName,
 /* [optional][in] */ VARIANT ExchangeType ) PURE;
	STDMETHOD( MakeReplica )					 ( 
    
 /* [in] */ BSTR PathName,
 /* [in] */ BSTR Description,
 /* [optional][in] */ VARIANT Options ) PURE;
	STDMETHOD( put_Connect )					 ( 
    
 /* [in] */ BSTR ODBCConnnect ) PURE;
	STDMETHOD( NewPassword )					 ( 
    
 /* [in] */ BSTR bstrOld,
 /* [in] */ BSTR bstrNew ) PURE;
	STDMETHOD( OpenRecordset )					 ( 
    
 /* [in] */ BSTR Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT LockEdit,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( get_Connection )					 ( 
    
 /* [retval][out] */ DAOConnection __RPC_FAR *__RPC_FAR *ppCn ) PURE;
	STDMETHOD( PopulatePartial )				 ( 
    
 /* [in] */ BSTR DbPathName ) PURE;
	};// end interface;

// Interface: DAODatabases
#undef INTERFACE
#define INTERFACE DAODatabases
DECLARE_INTERFACE_(DAODatabases, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *ppdb ) PURE;
	};// end interface;

// Interface: _DAOTableDef
#undef INTERFACE
#define INTERFACE _DAOTableDef
DECLARE_INTERFACE_(_DAOTableDef, _DAO)
{
	STDMETHOD( get_Attributes )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Attributes )					 ( 
    
 /* [in] */ long Attributes ) PURE;
	STDMETHOD( get_Connect )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Connect )					 ( 
    
 /* [in] */ BSTR Connection ) PURE;
	STDMETHOD( get_DateCreated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_LastUpdated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR Name ) PURE;
	STDMETHOD( get_SourceTableName )			 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_SourceTableName )			 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Updatable )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_ValidationText )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ValidationText )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_ValidationRule )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ValidationRule )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_RecordCount )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Fields )						 ( 
    
 /* [retval][out] */ DAOFields __RPC_FAR *__RPC_FAR *ppflds ) PURE;
	STDMETHOD( get_Indexes )					 ( 
    
 /* [retval][out] */ DAOIndexes __RPC_FAR *__RPC_FAR *ppidxs ) PURE;
	STDMETHOD( OpenRecordset )					 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( RefreshLink )					 ( 
   			VOID ) PURE;
	STDMETHOD( CreateField )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Size,
 /* [retval][out] */ DAOField __RPC_FAR *__RPC_FAR *ppfld ) PURE;
	STDMETHOD( CreateIndex )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [retval][out] */ DAOIndex __RPC_FAR *__RPC_FAR *ppidx ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	STDMETHOD( get_ConflictTable )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_ReplicaFilter )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pFilter ) PURE;
	STDMETHOD( put_ReplicaFilter )				 ( 
    
 /* [in] */ VARIANT Filter ) PURE;
	};// end interface;

// Interface: DAOTableDefs
#undef INTERFACE
#define INTERFACE DAOTableDefs
DECLARE_INTERFACE_(DAOTableDefs, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOTableDef __RPC_FAR *__RPC_FAR *pptdf ) PURE;
	};// end interface;

// Interface: _DAOQueryDef
#undef INTERFACE
#define INTERFACE _DAOQueryDef
DECLARE_INTERFACE_(_DAOQueryDef, _DAO)
{
	STDMETHOD( get_DateCreated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_LastUpdated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_ODBCTimeout )				 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_ODBCTimeout )				 ( 
    
 /* [in] */ short timeout ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ short __RPC_FAR *pi ) PURE;
	STDMETHOD( get_SQL )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_SQL )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Updatable )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Connect )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Connect )					 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_ReturnsRecords )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_ReturnsRecords )				 ( 
    
 /* [in] */ VARIANT_BOOL f ) PURE;
	STDMETHOD( get_RecordsAffected )			 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Fields )						 ( 
    
 /* [retval][out] */ DAOFields __RPC_FAR *__RPC_FAR *ppflds ) PURE;
	STDMETHOD( get_Parameters )					 ( 
    
 /* [retval][out] */ DAOParameters __RPC_FAR *__RPC_FAR *ppprms ) PURE;
	STDMETHOD( Close )							 ( 
   			VOID ) PURE;
	STDMETHOD( _30_OpenRecordset )				 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( _30__OpenRecordset )				 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( _Copy )							 ( 
    
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdf ) PURE;
	STDMETHOD( Execute )						 ( 
    
 /* [optional][in] */ VARIANT Options ) PURE;
	STDMETHOD( Compare )						 ( 
    
 /* [in] */ DAOQueryDef __RPC_FAR *pQdef,
 /* [in] */ SHORT __RPC_FAR *lps ) PURE;
	STDMETHOD( CreateDynaset )					 ( 
    
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT Inconsistent,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CreateSnapshot )					 ( 
    
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( ListParameters )					 ( 
    
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	STDMETHOD( OpenRecordset )					 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT LockEdit,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( _OpenRecordset )					 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT LockEdit,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( Cancel )							 ( 
   			VOID ) PURE;
	STDMETHOD( get_hStmt )						 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *phStmt ) PURE;
	STDMETHOD( get_MaxRecords )					 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *pMxRecs ) PURE;
	STDMETHOD( put_MaxRecords )					 ( 
    
 /* [in] */ LONG MxRecs ) PURE;
	STDMETHOD( get_StillExecuting )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pStillExec ) PURE;
	STDMETHOD( get_CacheSize )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *lCacheSize ) PURE;
	STDMETHOD( put_CacheSize )					 ( 
    
 /* [in] */ long lCacheSize ) PURE;
	STDMETHOD( get_Prepare )					 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Prepare )					 ( 
    
 /* [in] */ VARIANT f ) PURE;
	};// end interface;

// Interface: DAOQueryDefs
#undef INTERFACE
#define INTERFACE DAOQueryDefs
DECLARE_INTERFACE_(DAOQueryDefs, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdef ) PURE;
	};// end interface;

// Interface: DAORecordset
#undef INTERFACE
#define INTERFACE DAORecordset
DECLARE_INTERFACE_(DAORecordset, _DAO)
{
	STDMETHOD( GetIDsOfNames )					 (      REFIID riid,      OLECHAR FAR* FAR* rgszNames,      UINT cNames,      LCID lcid,      DISPID FAR* rgdispid );
	STDMETHOD( Invoke )							 (      DISPID dispidMember,      REFIID riid,      LCID lcid,      WORD wFlags,      DISPPARAMS FAR* pdispparams,      VARIANT FAR* pvarResult,      EXCEPINFO FAR* pexcepinfo,      UINT FAR* puArgErr );
	STDMETHOD( get_BOF )						 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Bookmark )					 ( 
    
 /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *ppsach ) PURE;
	STDMETHOD( put_Bookmark )					 ( 
    
 /* [in] */ SAFEARRAY __RPC_FAR * __RPC_FAR *psach ) PURE;
	STDMETHOD( get_Bookmarkable )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_DateCreated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_EOF )						 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Filter )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Filter )						 ( 
    
 /* [in] */ BSTR Filter ) PURE;
	STDMETHOD( get_Index )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Index )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_LastModified )				 ( 
    
 /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *ppsa ) PURE;
	STDMETHOD( get_LastUpdated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_LockEdits )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_LockEdits )					 ( 
    
 /* [in] */ VARIANT_BOOL Lock ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_NoMatch )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Sort )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Sort )						 ( 
    
 /* [in] */ BSTR Sort ) PURE;
	STDMETHOD( get_Transactions )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( get_RecordCount )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Updatable )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Restartable )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_ValidationText )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_ValidationRule )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_CacheStart )					 ( 
    
 /* [retval][out] */ SAFEARRAY __RPC_FAR * __RPC_FAR *ppsa ) PURE;
	STDMETHOD( put_CacheStart )					 ( 
    
 /* [in] */ SAFEARRAY __RPC_FAR * __RPC_FAR *psa ) PURE;
	STDMETHOD( get_CacheSize )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_CacheSize )					 ( 
    
 /* [in] */ long CacheSize ) PURE;
	STDMETHOD( get_PercentPosition )			 ( 
    
 /* [retval][out] */ float __RPC_FAR *pd ) PURE;
	STDMETHOD( put_PercentPosition )			 ( 
    
 /* [in] */ float Position ) PURE;
	STDMETHOD( get_AbsolutePosition )			 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_AbsolutePosition )			 ( 
    
 /* [in] */ long Position ) PURE;
	STDMETHOD( get_EditMode )					 ( 
    
 /* [retval][out] */ short __RPC_FAR *pi ) PURE;
	STDMETHOD( get_ODBCFetchCount )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_ODBCFetchDelay )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Parent )						 ( 
    
 /* [retval][out] */ DAODatabase __RPC_FAR *__RPC_FAR *pdb ) PURE;
	STDMETHOD( get_Fields )						 ( 
    
 /* [retval][out] */ DAOFields __RPC_FAR *__RPC_FAR *ppflds ) PURE;
	STDMETHOD( get_Indexes )					 ( 
    
 /* [retval][out] */ DAOIndexes __RPC_FAR *__RPC_FAR *ppidxs ) PURE;
	STDMETHOD( _30_CancelUpdate )				 ( 
   			VOID ) PURE;
	STDMETHOD( AddNew )							 ( 
   			VOID ) PURE;
	STDMETHOD( Close )							 ( 
   			VOID ) PURE;
	STDMETHOD( OpenRecordset )					 ( 
    
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( Delete )							 ( 
   			VOID ) PURE;
	STDMETHOD( Edit )							 ( 
   			VOID ) PURE;
	STDMETHOD( FindFirst )						 ( 
    
 /* [in] */ BSTR Criteria ) PURE;
	STDMETHOD( FindLast )						 ( 
    
 /* [in] */ BSTR Criteria ) PURE;
	STDMETHOD( FindNext )						 ( 
    
 /* [in] */ BSTR Criteria ) PURE;
	STDMETHOD( FindPrevious )					 ( 
    
 /* [in] */ BSTR Criteria ) PURE;
	STDMETHOD( MoveFirst )						 ( 
   			VOID ) PURE;
	STDMETHOD( _30_MoveLast )					 ( 
   			VOID ) PURE;
	STDMETHOD( MoveNext )						 ( 
   			VOID ) PURE;
	STDMETHOD( MovePrevious )					 ( 
   			VOID ) PURE;
	STDMETHOD( Seek )							 ( 
    
 /* [in] */ BSTR Comparison,
 /* [in] */ VARIANT Key1,
 /* [optional][in] */ VARIANT Key2,
 /* [optional][in] */ VARIANT Key3,
 /* [optional][in] */ VARIANT Key4,
 /* [optional][in] */ VARIANT Key5,
 /* [optional][in] */ VARIANT Key6,
 /* [optional][in] */ VARIANT Key7,
 /* [optional][in] */ VARIANT Key8,
 /* [optional][in] */ VARIANT Key9,
 /* [optional][in] */ VARIANT Key10,
 /* [optional][in] */ VARIANT Key11,
 /* [optional][in] */ VARIANT Key12,
 /* [optional][in] */ VARIANT Key13 ) PURE;
	STDMETHOD( _30_Update )						 ( 
   			VOID ) PURE;
	STDMETHOD( Clone )							 ( 
    
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( Requery )						 ( 
    
 /* [optional][in] */ VARIANT NewQueryDef ) PURE;
	STDMETHOD( Move )							 ( 
    
 /* [in] */ long Rows,
 /* [optional][in] */ VARIANT StartBookmark ) PURE;
	STDMETHOD( FillCache )						 ( 
    
 /* [optional][in] */ VARIANT Rows,
 /* [optional][in] */ VARIANT StartBookmark ) PURE;
	STDMETHOD( CreateDynaset )					 ( 
    
 /* [optional][in] */ VARIANT Options,
 /* [optional][in] */ VARIANT Inconsistent,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CreateSnapshot )					 ( 
    
 /* [optional][in] */ VARIANT Options,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( CopyQueryDef )					 ( 
    
 /* [retval][out] */ DAOQueryDef __RPC_FAR *__RPC_FAR *ppqdf ) PURE;
	STDMETHOD( ListFields )						 ( 
    
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( ListIndexes )					 ( 
    
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	STDMETHOD( GetRows )						 ( 
    
 /* [optional][in] */ VARIANT NumRows,
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_Collect )					 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( put_Collect )					 ( 
    
 /* [in] */ VARIANT Item,
 /* [in] */ VARIANT value ) PURE;
	STDMETHOD( Cancel )							 ( 
   			VOID ) PURE;
	STDMETHOD( NextRecordset )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_hStmt )						 ( 
    
 /* [retval][out] */ LONG __RPC_FAR *phStmt ) PURE;
	STDMETHOD( get_StillExecuting )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pStillExec ) PURE;
	STDMETHOD( get_BatchSize )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_BatchSize )					 ( 
    
 /* [in] */ long BatchSize ) PURE;
	STDMETHOD( get_BatchCollisionCount )		 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_BatchCollisions )			 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_Connection )					 ( 
    
 /* [retval][out] */ DAOConnection __RPC_FAR *__RPC_FAR *ppCn ) PURE;
	STDMETHOD( putref_Connection )				 ( 
    
 /* [in] */ DAOConnection __RPC_FAR *pNewCn ) PURE;
	STDMETHOD( get_RecordStatus )				 ( 
    
 /* [retval][out] */ short __RPC_FAR *pi ) PURE;
	STDMETHOD( get_UpdateOptions )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_UpdateOptions )				 ( 
    
 /* [in] */ long l ) PURE;
	STDMETHOD( CancelUpdate )					 ( 
    
 /* [defaultvalue][in] */ long UpdateType ) PURE;
	STDMETHOD( Update )							 ( 
    
 /* [defaultvalue][in] */ long UpdateType,
 /* [defaultvalue][in] */ VARIANT_BOOL Force ) PURE;
	STDMETHOD( MoveLast )						 ( 
    
 /* [defaultvalue][in] */ long Options ) PURE;
	};// end interface;

// Interface: DAORecordsets
#undef INTERFACE
#define INTERFACE DAORecordsets
DECLARE_INTERFACE_(DAORecordsets, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAORecordset __RPC_FAR *__RPC_FAR *pprst ) PURE;
	};// end interface;

// Interface: _DAOField
#undef INTERFACE
#define INTERFACE _DAOField
DECLARE_INTERFACE_(_DAOField, _DAO)
{
	STDMETHOD( get_CollatingOrder )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_Type )						 ( 
    
 /* [in] */ short Type ) PURE;
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR Name ) PURE;
	STDMETHOD( get_Size )						 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Size )						 ( 
    
 /* [in] */ long Size ) PURE;
	STDMETHOD( get_SourceField )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_SourceTable )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Value )						 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( put_Value )						 ( 
    
 /* [in] */ VARIANT Val ) PURE;
	STDMETHOD( get_Attributes )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Attributes )					 ( 
    
 /* [in] */ long Attr ) PURE;
	STDMETHOD( get_OrdinalPosition )			 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_OrdinalPosition )			 ( 
    
 /* [in] */ short Pos ) PURE;
	STDMETHOD( get_ValidationText )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ValidationText )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_ValidateOnSet )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_ValidateOnSet )				 ( 
    
 /* [in] */ VARIANT_BOOL Validate ) PURE;
	STDMETHOD( get_ValidationRule )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ValidationRule )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_DefaultValue )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( put_DefaultValue )				 ( 
    
 /* [in] */ VARIANT var ) PURE;
	STDMETHOD( get_Required )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Required )					 ( 
    
 /* [in] */ VARIANT_BOOL fReq ) PURE;
	STDMETHOD( get_AllowZeroLength )			 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_AllowZeroLength )			 ( 
    
 /* [in] */ VARIANT_BOOL fAllow ) PURE;
	STDMETHOD( get_DataUpdatable )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_ForeignName )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ForeignName )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( AppendChunk )					 ( 
    
 /* [in] */ VARIANT Val ) PURE;
	STDMETHOD( GetChunk )						 ( 
    
 /* [in] */ long Offset,
 /* [in] */ long Bytes,
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( _30_FieldSize )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	STDMETHOD( get_CollectionIndex )			 ( 
    
 /* [retval][out] */ short __RPC_FAR *i ) PURE;
	STDMETHOD( get_OriginalValue )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_VisibleValue )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_FieldSize )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	};// end interface;

// Interface: DAOFields
#undef INTERFACE
#define INTERFACE DAOFields
DECLARE_INTERFACE_(DAOFields, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOField __RPC_FAR *__RPC_FAR *ppfld ) PURE;
	};// end interface;

// Interface: _DAOIndex
#undef INTERFACE
#define INTERFACE _DAOIndex
DECLARE_INTERFACE_(_DAOIndex, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Foreign )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( get_Unique )						 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Unique )						 ( 
    
 /* [in] */ VARIANT_BOOL fUnique ) PURE;
	STDMETHOD( get_Clustered )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Clustered )					 ( 
    
 /* [in] */ VARIANT_BOOL fClustered ) PURE;
	STDMETHOD( get_Required )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Required )					 ( 
    
 /* [in] */ VARIANT_BOOL fRequired ) PURE;
	STDMETHOD( get_IgnoreNulls )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_IgnoreNulls )				 ( 
    
 /* [in] */ VARIANT_BOOL fIgnoreNulls ) PURE;
	STDMETHOD( get_Primary )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Primary )					 ( 
    
 /* [in] */ VARIANT_BOOL fPrimary ) PURE;
	STDMETHOD( get_DistinctCount )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( get_Fields )						 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pv ) PURE;
	STDMETHOD( put_Fields )						 ( 
    
 /* [in] */ VARIANT v ) PURE;
	STDMETHOD( CreateField )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Size,
 /* [retval][out] */ DAOField __RPC_FAR *__RPC_FAR *ppfld ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	};// end interface;

// Interface: DAOIndexes
#undef INTERFACE
#define INTERFACE DAOIndexes
DECLARE_INTERFACE_(DAOIndexes, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOIndex __RPC_FAR *__RPC_FAR *ppidx ) PURE;
	};// end interface;

// Interface: DAOParameter
#undef INTERFACE
#define INTERFACE DAOParameter
DECLARE_INTERFACE_(DAOParameter, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Value )						 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( put_Value )						 ( 
    
 /* [in] */ VARIANT val ) PURE;
	STDMETHOD( get_Type )						 ( 
    
 /* [retval][out] */ short __RPC_FAR *ps ) PURE;
	STDMETHOD( put_Type )						 ( 
    
 /* [in] */ short s ) PURE;
	STDMETHOD( get_Direction )					 ( 
    
 /* [retval][out] */ short __RPC_FAR *pOption ) PURE;
	STDMETHOD( put_Direction )					 ( 
    
 /* [in] */ short Option ) PURE;
	};// end interface;

// Interface: DAOParameters
#undef INTERFACE
#define INTERFACE DAOParameters
DECLARE_INTERFACE_(DAOParameters, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOParameter __RPC_FAR *__RPC_FAR *ppprm ) PURE;
	};// end interface;

// Interface: _DAOUser
#undef INTERFACE
#define INTERFACE _DAOUser
DECLARE_INTERFACE_(_DAOUser, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( put_PID )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( put_Password )					 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Groups )						 ( 
    
 /* [retval][out] */ DAOGroups __RPC_FAR *__RPC_FAR *ppgrps ) PURE;
	STDMETHOD( NewPassword )					 ( 
    
 /* [in] */ BSTR bstrOld,
 /* [in] */ BSTR bstrNew ) PURE;
	STDMETHOD( CreateGroup )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT PID,
 /* [retval][out] */ DAOGroup __RPC_FAR *__RPC_FAR *ppgrp ) PURE;
	};// end interface;

// Interface: DAOUsers
#undef INTERFACE
#define INTERFACE DAOUsers
DECLARE_INTERFACE_(DAOUsers, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOUser __RPC_FAR *__RPC_FAR *ppusr ) PURE;
	};// end interface;

// Interface: _DAOGroup
#undef INTERFACE
#define INTERFACE _DAOGroup
DECLARE_INTERFACE_(_DAOGroup, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( put_PID )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Users )						 ( 
    
 /* [retval][out] */ DAOUsers __RPC_FAR *__RPC_FAR *ppusrs ) PURE;
	STDMETHOD( CreateUser )						 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT PID,
 /* [optional][in] */ VARIANT Password,
 /* [retval][out] */ DAOUser __RPC_FAR *__RPC_FAR *ppusr ) PURE;
	};// end interface;

// Interface: DAOGroups
#undef INTERFACE
#define INTERFACE DAOGroups
DECLARE_INTERFACE_(DAOGroups, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOGroup __RPC_FAR *__RPC_FAR *ppgrp ) PURE;
	};// end interface;

// Interface: _DAORelation
#undef INTERFACE
#define INTERFACE _DAORelation
DECLARE_INTERFACE_(_DAORelation, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Name )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Table )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Table )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_ForeignTable )				 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_ForeignTable )				 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Attributes )					 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Attributes )					 ( 
    
 /* [in] */ long attr ) PURE;
	STDMETHOD( get_Fields )						 ( 
    
 /* [retval][out] */ DAOFields __RPC_FAR *__RPC_FAR *ppflds ) PURE;
	STDMETHOD( CreateField )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Size,
 /* [retval][out] */ DAOField __RPC_FAR *__RPC_FAR *ppfld ) PURE;
	STDMETHOD( get_PartialReplica )				 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pfPartialReplica ) PURE;
	STDMETHOD( put_PartialReplica )				 ( 
    
 /* [in] */ VARIANT_BOOL fPartialReplica ) PURE;
	};// end interface;

// Interface: DAORelations
#undef INTERFACE
#define INTERFACE DAORelations
DECLARE_INTERFACE_(DAORelations, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAORelation __RPC_FAR *__RPC_FAR *pprel ) PURE;
	};// end interface;

// Interface: DAOContainer
#undef INTERFACE
#define INTERFACE DAOContainer
DECLARE_INTERFACE_(DAOContainer, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Owner )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Owner )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_UserName )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_UserName )					 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Permissions )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Permissions )				 ( 
    
 /* [in] */ long permissions ) PURE;
	STDMETHOD( get_Inherit )					 ( 
    
 /* [retval][out] */ VARIANT_BOOL __RPC_FAR *pb ) PURE;
	STDMETHOD( put_Inherit )					 ( 
    
 /* [in] */ VARIANT_BOOL fInherit ) PURE;
	STDMETHOD( get_Documents )					 ( 
    
 /* [retval][out] */ DAODocuments __RPC_FAR *__RPC_FAR *ppdocs ) PURE;
	STDMETHOD( get_AllPermissions )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	};// end interface;

// Interface: DAOContainers
#undef INTERFACE
#define INTERFACE DAOContainers
DECLARE_INTERFACE_(DAOContainers, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAOContainer __RPC_FAR *__RPC_FAR *ppctn ) PURE;
	};// end interface;

// Interface: DAODocument
#undef INTERFACE
#define INTERFACE DAODocument
DECLARE_INTERFACE_(DAODocument, _DAO)
{
	STDMETHOD( get_Name )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_Owner )						 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_Owner )						 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Container )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( get_UserName )					 ( 
    
 /* [retval][out] */ BSTR __RPC_FAR *pbstr ) PURE;
	STDMETHOD( put_UserName )					 ( 
    
 /* [in] */ BSTR bstr ) PURE;
	STDMETHOD( get_Permissions )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( put_Permissions )				 ( 
    
 /* [in] */ long permissions ) PURE;
	STDMETHOD( get_DateCreated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_LastUpdated )				 ( 
    
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	STDMETHOD( get_AllPermissions )				 ( 
    
 /* [retval][out] */ long __RPC_FAR *pl ) PURE;
	STDMETHOD( CreateProperty )					 ( 
    
 /* [optional][in] */ VARIANT Name,
 /* [optional][in] */ VARIANT Type,
 /* [optional][in] */ VARIANT Value,
 /* [optional][in] */ VARIANT DDL,
 /* [retval][out] */ DAOProperty __RPC_FAR *__RPC_FAR *pprp ) PURE;
	};// end interface;

// Interface: DAODocuments
#undef INTERFACE
#define INTERFACE DAODocuments
DECLARE_INTERFACE_(DAODocuments, _DAOCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [in] */ VARIANT Item,
 /* [retval][out] */ DAODocument __RPC_FAR *__RPC_FAR *ppdoc ) PURE;
	};// end interface;

// Interface: DAOIndexFields
#undef INTERFACE
#define INTERFACE DAOIndexFields
DECLARE_INTERFACE_(DAOIndexFields, _DAODynaCollection)
{
	STDMETHOD( get_Item )						 ( 
    
 /* [optional][in] */ VARIANT Item,
 /* [retval][out] */ VARIANT __RPC_FAR *pvar ) PURE;
	};// end interface;

#endif // _DBDAOINT_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\dbdaoid.h ===
/************************************************************************
**	D B D A O I D . H													*
**																		*
**																		*
**	OLE DAO component class id definitions								*
**	DAO has been allocated the GUID::Data1 range of 0x00025eXX			*
**																		*
*************************************************************************
** Copyright (C) 1996 by Microsoft Corporation		 					*
**		   All Rights Reserved					 						*
************************************************************************/

/*	The pre-3.5 GUIDs have been redefined with "30" added to the ID. For example:
	IID_IDAOIndex becomes IID30_IDAOIndex
	This way both the 30 and 3.5 GUIDs can be used at once
*/


DEFINE_OLEGUID(LIBID_CJETSQLHELP,		0x00025f01, 0, 0);

#define DEFINE_DAOGUID(name, l) \
    DEFINE_GUID(name, l, 0, 0x10, 0x80,0,0,0xAA,0,0x6D,0x2E,0xA4)

// Type library
DEFINE_OLEGUID(LIBID_CDAO,				0x00025e01, 0, 0);
DEFINE_OLEGUID(LIBID_CDAO25,			0x00025e04, 0, 0);

// StdObject
DEFINE_DAOGUID(IID_IDAOStdObject,		0x0000000A);

// StdCollection
DEFINE_DAOGUID(IID_IDAOStdCollection,	0x0000000C);

// Creatable Classes
DEFINE_DAOGUID(CLSID_CDAODBEngine,		0x00000010);
DEFINE_DAOGUID(CLSID_CDAOPrivDBEngine,	0x00000011);
DEFINE_DAOGUID(CLSID_CDAOConnection,	0x00000012);
DEFINE_DAOGUID(CLSID_CDAOTableDef,		0x00000013);
DEFINE_DAOGUID(CLSID_CDAOField, 		0x00000014);
DEFINE_DAOGUID(CLSID_CDAOIndex, 		0x00000015);
DEFINE_DAOGUID(CLSID_CDAOGroup, 		0x00000016);
DEFINE_DAOGUID(CLSID_CDAOUser,			0x00000017);
DEFINE_DAOGUID(CLSID_CDAOQueryDef,		0x00000018);
DEFINE_DAOGUID(CLSID_CDAORelation,		0x00000019);

// DBEngine
DEFINE_DAOGUID(IID_IDAODBEngine,		0x00000020);
DEFINE_DAOGUID(IID_IDAODBEngineW,		0x00000021);

// Error
DEFINE_DAOGUID(IID_IDAOError,			0x00000022);
DEFINE_DAOGUID(IID_IDAOErrorW,			0x00000023);
DEFINE_DAOGUID(IID_IDAOErrors,			0x00000024);
DEFINE_DAOGUID(IID_IDAOErrorsW,			0x00000025);

// Property
DEFINE_DAOGUID(IID_IDAOProperty,		0x00000026);
DEFINE_DAOGUID(IID_IDAOPropertyW,		0x00000027);
DEFINE_DAOGUID(IID_IDAOProperties,		0x00000028);
DEFINE_DAOGUID(IID_IDAOPropertiesW,		0x00000029);

// Recordset
DEFINE_DAOGUID(IID_IDAORecordset,		0x00000030);
DEFINE_DAOGUID(IID_IDAORecordsetW,		0x00000031);
DEFINE_DAOGUID(IID_IDAORecordsets,		0x00000032);
DEFINE_DAOGUID(IID_IDAORecordsetsW,		0x00000033);
DEFINE_OLEGUID(IID_ICDAORecordset,		0x00025e31, 0, 0);	//same as it was in 3.0

// Workspace
DEFINE_DAOGUID(IID_IDAOWorkspace,		0x00000038);
DEFINE_DAOGUID(IID_IDAOWorkspaceW,		0x00000039);
DEFINE_DAOGUID(IID_IDAOWorkspaces,		0x0000003A);
DEFINE_DAOGUID(IID_IDAOWorkspacesW,		0x0000003B);

// Connection
DEFINE_DAOGUID(IID_IDAOConnection,		0x00000040);
DEFINE_DAOGUID(IID_IDAOConnectionW,		0x00000041);
DEFINE_DAOGUID(IID_IDAOConnections,		0x00000042);
DEFINE_DAOGUID(IID_IDAOConnectionsW,	0x00000043);

// TableDef
DEFINE_DAOGUID(IID_IDAOTableDef,		0x00000048);
DEFINE_DAOGUID(IID_IDAOTableDefW,		0x00000049);
DEFINE_DAOGUID(IID_IDAOTableDefs,		0x0000004A);
DEFINE_DAOGUID(IID_IDAOTableDefsW,		0x0000004B);

// Field
DEFINE_DAOGUID(IID_IDAOField,			0x00000050);
DEFINE_DAOGUID(IID_IDAOFieldW,			0x00000051);
DEFINE_DAOGUID(IID_IDAOFields,			0x00000052);
DEFINE_DAOGUID(IID_IDAOFieldsW,			0x00000053);

// Index
DEFINE_DAOGUID(IID_IDAOIndex,			0x00000058);
DEFINE_DAOGUID(IID_IDAOIndexW,			0x00000059);
DEFINE_DAOGUID(IID_IDAOIndexes,			0x0000005A);
DEFINE_DAOGUID(IID_IDAOIndexesW,		0x0000005B);
DEFINE_DAOGUID(IID_IDAOIndexFields,		0x0000005C);
DEFINE_DAOGUID(IID_IDAOIndexFieldsW,	0x0000005D);

// Group
DEFINE_DAOGUID(IID_IDAOGroup,			0x00000060);
DEFINE_DAOGUID(IID_IDAOGroupW,			0x00000061);
DEFINE_DAOGUID(IID_IDAOGroups,			0x00000062);
DEFINE_DAOGUID(IID_IDAOGroupsW,			0x00000063);

// User
DEFINE_DAOGUID(IID_IDAOUser,			0x00000068);
DEFINE_DAOGUID(IID_IDAOUserW,			0x00000069);
DEFINE_DAOGUID(IID_IDAOUsers,			0x0000006A);
DEFINE_DAOGUID(IID_IDAOUsersW,			0x0000006B);

// Database
DEFINE_DAOGUID(IID_IDAODatabase,		0x00000070);
DEFINE_DAOGUID(IID_IDAODatabaseW,		0x00000071);
DEFINE_DAOGUID(IID_IDAODatabases,		0x00000072);
DEFINE_DAOGUID(IID_IDAODatabasesW,		0x00000073);

// QueryDef
DEFINE_DAOGUID(IID_IDAOQueryDef,		0x00000078);
DEFINE_DAOGUID(IID_IDAOQueryDefW,		0x00000079);
DEFINE_DAOGUID(IID_IDAOQueryDefs,		0x0000007A);
DEFINE_DAOGUID(IID_IDAOQueryDefsW,		0x0000007B);

// Parameter
DEFINE_DAOGUID(IID_IDAOParameter,		0x00000080);
DEFINE_DAOGUID(IID_IDAOParameterW,		0x00000081);
DEFINE_DAOGUID(IID_IDAOParameters,		0x00000082);
DEFINE_DAOGUID(IID_IDAOParametersW,		0x00000083);

// Relation
DEFINE_DAOGUID(IID_IDAORelation,		0x00000088);
DEFINE_DAOGUID(IID_IDAORelationW,		0x00000089);
DEFINE_DAOGUID(IID_IDAORelations,		0x0000008A);
DEFINE_DAOGUID(IID_IDAORelationsW,		0x0000008B);

// Container
DEFINE_DAOGUID(IID_IDAOContainer,		0x00000090);
DEFINE_DAOGUID(IID_IDAOContainerW,		0x00000091);
DEFINE_DAOGUID(IID_IDAOContainers,		0x00000092);
DEFINE_DAOGUID(IID_IDAOContainersW,		0x00000093);

// Document
DEFINE_DAOGUID(IID_IDAODocument,		0x00000098);
DEFINE_DAOGUID(IID_IDAODocumentW,		0x00000099);
DEFINE_DAOGUID(IID_IDAODocuments,		0x0000009A);
DEFINE_DAOGUID(IID_IDAODocumentsW,		0x0000009B);

// Collections 
DEFINE_DAOGUID(IID_IDAOCollection,		0x000000A0);
DEFINE_DAOGUID(IID_IDAODynaCollection,	0x000000A2);

// Connection points 
DEFINE_DAOGUID(IID_IDAOQueryCP,			0x000000B0);
DEFINE_DAOGUID(IID_IDAOQueryAS,			0x000000B2);

// Type library
DEFINE_OLEGUID(LIBID30_CDAO,				0x00025e01, 0, 0);
DEFINE_OLEGUID(LIBID30_CDAO25,			0x00025e04, 0, 0);

// StdObject
DEFINE_OLEGUID(IID30_IDAOStdObject,		0x00025e02, 0, 0);

// StdCollection
DEFINE_OLEGUID(IID30_IDAOStdCollection,	0x00025e03, 0, 0);

/*
	NOTES:
	* Two sets of CLSIDs exist for the DBEngine object.
	* DBEngine and DBEngine30.  The 30 extension means
	* that this engine should load the 3.0 typelibrary
	* from the registry.  Otherwise, load the 2.5/3.0
	* compatability type library
*/

// DBEngine
DEFINE_OLEGUID(CLSID30_CDAODBEngine,		0x00025e15, 0, 0);
DEFINE_OLEGUID(IID30_IDAODBEngine,		0x00025e16, 0, 0);
DEFINE_OLEGUID(IID30_IDAODBEngineW,		0x00025e17, 0, 0);
DEFINE_OLEGUID(IID30_ICDAOJETDBEngine,	0x00025e18, 0, 0);
DEFINE_OLEGUID(CLSID30_CDAOPrivDBEngine,	0x00025e19, 0, 0);

// Error
DEFINE_OLEGUID(IID30_IDAOError,			0x00025e1d, 0, 0);
DEFINE_OLEGUID(IID30_IDAOErrorW,			0x00025e1e, 0, 0);
DEFINE_OLEGUID(IID30_IDAOErrors,			0x00025e1f, 0, 0);
DEFINE_OLEGUID(IID30_IDAOErrorsW,			0x00025e20, 0, 0);
DEFINE_OLEGUID(IID30_ICDAOJETError,		0x00025e21, 0, 0);	//used by Access, goes away post 3.0

// Property
DEFINE_OLEGUID(IID30_IDAOProperty,		0x00025e25, 0, 0);
DEFINE_OLEGUID(IID30_IDAOPropertyW,		0x00025e26, 0, 0);
DEFINE_OLEGUID(IID30_IDAOProperties,		0x00025e27, 0, 0);
DEFINE_OLEGUID(IID30_IDAOPropertiesW,		0x00025e28, 0, 0);

// Recordset
DEFINE_OLEGUID(IID30_IDAORecordset,		0x00025e2d, 0, 0);
DEFINE_OLEGUID(IID30_IDAORecordsetW,		0x00025e2e, 0, 0);
DEFINE_OLEGUID(IID30_IDAORecordsets,		0x00025e2f, 0, 0);
DEFINE_OLEGUID(IID30_IDAORecordsetsW,		0x00025e30, 0, 0);
DEFINE_OLEGUID(IID30_ICDAORecordset,		0x00025e31, 0, 0);	//NOTE: No change for 3.1 or 3.5
DEFINE_OLEGUID(IID30_ICDAOJETRecordset,	0x00025e32, 0, 0);

// Snapshot
DEFINE_OLEGUID(IID30_IDAOSnapshot,		0x00025e33, 0, 0);

// Table
DEFINE_OLEGUID(IID30_IDAOTable,			0x00025e34, 0, 0);

// Dynaset
DEFINE_OLEGUID(IID30_IDAODynaset,			0x00025e35, 0, 0);

// Workspace
DEFINE_OLEGUID(IID30_IDAOWorkspace,		0x00025e3a, 0, 0);
DEFINE_OLEGUID(IID30_IDAOWorkspaceW,		0x00025e3b, 0, 0);
DEFINE_OLEGUID(IID30_IDAOWorkspaces,		0x00025e3c, 0, 0);
DEFINE_OLEGUID(IID30_IDAOWorkspacesW,		0x00025e3d, 0, 0);
DEFINE_OLEGUID(IID30_ICDAOJETWorkspace,	0x00025e3e, 0, 0);

// Connection (new to 3.1)
DEFINE_OLEGUID(CLSID30_CDAOConnection,	0x00025eb1, 0, 0);
DEFINE_OLEGUID(IID30_IDAOConnection,		0x00025eb2, 0, 0);
DEFINE_OLEGUID(IID30_IDAOConnectionW,		0x00025eb3, 0, 0);
DEFINE_OLEGUID(IID30_IDAOConnections,		0x00025eb4, 0, 0);
DEFINE_OLEGUID(IID30_IDAOConnectionsW,	0x00025eb5, 0, 0);

// TableDef
DEFINE_OLEGUID(CLSID30_CDAOTableDef,		0x00025e43, 0, 0);
DEFINE_OLEGUID(IID30_IDAOTableDef,		0x00025e44, 0, 0);
DEFINE_OLEGUID(IID30_IDAOTableDefW,		0x00025e45, 0, 0);
DEFINE_OLEGUID(IID30_IDAOTableDefs,		0x00025e46, 0, 0);
DEFINE_OLEGUID(IID30_IDAOTableDefsW,		0x00025e47, 0, 0);

// Field
DEFINE_OLEGUID(CLSID30_CDAOField, 		0x00025e4c, 0, 0);
DEFINE_OLEGUID(IID30_IDAOField,			0x00025e4d, 0, 0);
DEFINE_OLEGUID(IID30_IDAOFieldW,			0x00025e4e, 0, 0);
DEFINE_OLEGUID(IID30_IDAOFields,			0x00025e4f, 0, 0);
DEFINE_OLEGUID(IID30_IDAOFieldsW,			0x00025e50, 0, 0);
//DEFINE_OLEGUID(IID30_ICDAOJETField,		0x00025e51, 0, 0);	//used by Access, goes away post 3.0
DEFINE_OLEGUID(IID30_ICDAOJETField,		0x00025e49, 0, 0);	//used by Access, goes away post 3.0

// Index
DEFINE_OLEGUID(CLSID30_CDAOIndex, 		0x00025e55, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndex,			0x00025e56, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndexW,			0x00025ed7, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndexes,			0x00025e58, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndexesW,		0x00025e59, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndexFields,		0x00025e5a, 0, 0);
DEFINE_OLEGUID(IID30_IDAOIndexFieldsW,	0x00025e5b, 0, 0);

// Group
DEFINE_OLEGUID(CLSID30_CDAOGroup, 		0x00025e5f, 0, 0);
DEFINE_OLEGUID(IID30_IDAOGroup,			0x00025e60, 0, 0);
DEFINE_OLEGUID(IID30_IDAOGroupW,			0x00025e61, 0, 0);
DEFINE_OLEGUID(IID30_IDAOGroups,			0x00025e62, 0, 0);
DEFINE_OLEGUID(IID30_IDAOGroupsW,			0x00025e63, 0, 0);

// User
DEFINE_OLEGUID(CLSID30_CDAOUser,			0x00025e68, 0, 0);
DEFINE_OLEGUID(IID30_IDAOUser,			0x00025e69, 0, 0);
DEFINE_OLEGUID(IID30_IDAOUserW,			0x00025e6a, 0, 0);
DEFINE_OLEGUID(IID30_IDAOUsers,			0x00025e6b, 0, 0);
DEFINE_OLEGUID(IID30_IDAOUsersW,			0x00025e6c, 0, 0);

// Database
DEFINE_OLEGUID(IID30_IDAODatabase,		0x00025e71, 0, 0);
DEFINE_OLEGUID(IID30_IDAODatabaseW,		0x00025e72, 0, 0);
DEFINE_OLEGUID(IID30_IDAODatabases,		0x00025e73, 0, 0);
DEFINE_OLEGUID(IID30_IDAODatabasesW,		0x00025e74, 0, 0);
DEFINE_OLEGUID(IID30_ICDAOJETDatabase,	0x00025e75, 0, 0);

// QueryDef
DEFINE_OLEGUID(CLSID30_CDAOQueryDef,		0x00025e7a, 0, 0);
DEFINE_OLEGUID(IID30_IDAOQueryDef,		0x00025e7b, 0, 0);
DEFINE_OLEGUID(IID30_IDAOQueryDefW,		0x00025e7c, 0, 0);
DEFINE_OLEGUID(IID30_IDAOQueryDefs,		0x00025e7d, 0, 0);
DEFINE_OLEGUID(IID30_IDAOQueryDefsW,		0x00025e7e, 0, 0);

// Parameter
DEFINE_OLEGUID(IID30_IDAOParameter,		0x00025e83, 0, 0);
DEFINE_OLEGUID(IID30_IDAOParameterW,		0x00025e84, 0, 0);
DEFINE_OLEGUID(IID30_IDAOParameters,		0x00025e85, 0, 0);
DEFINE_OLEGUID(IID30_IDAOParametersW,		0x00025e86, 0, 0);

// Relation
DEFINE_OLEGUID(CLSID30_CDAORelation,		0x00025e8b, 0, 0);
DEFINE_OLEGUID(IID30_IDAORelation,		0x00025e8c, 0, 0);
DEFINE_OLEGUID(IID30_IDAORelationW,		0x00025e8d, 0, 0);
DEFINE_OLEGUID(IID30_IDAORelations,		0x00025e8e, 0, 0);
DEFINE_OLEGUID(IID30_IDAORelationsW,		0x00025e8f, 0, 0);

// Container
DEFINE_OLEGUID(IID30_IDAOContainer,		0x00025e94, 0, 0);
DEFINE_OLEGUID(IID30_IDAOContainerW,		0x00025e95, 0, 0);
DEFINE_OLEGUID(IID30_IDAOContainers,		0x00025e96, 0, 0);
DEFINE_OLEGUID(IID30_IDAOContainersW,		0x00025e97, 0, 0);

// Document
DEFINE_OLEGUID(IID30_IDAODocument,		0x00025e9c, 0, 0);
DEFINE_OLEGUID(IID30_IDAODocumentW,		0x00025e9d, 0, 0);
DEFINE_OLEGUID(IID30_IDAODocuments,		0x00025e9e, 0, 0);
DEFINE_OLEGUID(IID30_IDAODocumentsW,		0x00025e9f, 0, 0);

// Collections
DEFINE_OLEGUID(IID30_IDAOCollection,		0x00025ea4, 0, 0);
DEFINE_OLEGUID(IID30_IDAODynaCollection,	0x00025ea5, 0, 0);

// Connection points
DEFINE_OLEGUID(IID30_IDAOQueryCP,			0x00025eaa, 0, 0);	// Connection point
DEFINE_OLEGUID(IID30_IDAOQueryAS,			0x00025eab, 0, 0);	// Advise sink interface
=== C:/Users/treeman/Desktop/windows nt source code\xbox\xbox_leak_may_2020\xbox trunk\xbox\private\vc7addon\devtools\common\win32sdk\include\DbgProp.h ===
#pragma warning( disable: 4049 )  /* more than 64k source lines */

/* this ALWAYS GENERATED file contains the definitions for the interfaces */


 /* File created by MIDL compiler version 6.00.0347 */
/* Compiler settings for dbgprop.idl:
    Oicf, W1, Zp8, env=Win32 (32b run)
    protocol : dce , ms_ext, c_ext
    error checks: allocation ref bounds_check enum stub_data 
    VC __declspec() decoration level: 
         __declspec(uuid()), __declspec(selectany), __declspec(novtable)
         DECLSPEC_UUID(), MIDL_INTERFACE()
*/
//@@MIDL_FILE_HEADING(  )


/* verify that the <rpcndr.h> version is high enough to compile this file*/
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif // __RPCNDR_H_VERSION__

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif /*COM_NO_WINDOWS_H*/

#ifndef __dbgprop_h__
#define __dbgprop_h__

#if defined(_MSC_VER) && (_MSC_VER >= 1020)
#pragma once
#endif

/* Forward Declarations */ 

#ifndef __IDebugProperty_FWD_DEFINED__
#define __IDebugProperty_FWD_DEFINED__
typedef interface IDebugProperty IDebugProperty;
#endif 	/* __IDebugProperty_FWD_DEFINED__ */


#ifndef __IEnumDebugPropertyInfo_FWD_DEFINED__
#define __IEnumDebugPropertyInfo_FWD_DEFINED__
typedef interface IEnumDebugPropertyInfo IEnumDebugPropertyInfo;
#endif 	/* __IEnumDebugPropertyInfo_FWD_DEFINED__ */


#ifndef __IDebugExtendedProperty_FWD_DEFINED__
#define __IDebugExtendedProperty_FWD_DEFINED__
typedef interface IDebugExtendedProperty IDebugExtendedProperty;
#endif 	/* __IDebugExtendedProperty_FWD_DEFINED__ */


#ifndef __IEnumDebugExtendedPropertyInfo_FWD_DEFINED__
#define __IEnumDebugExtendedPropertyInfo_FWD_DEFINED__
typedef interface IEnumDebugExtendedPropertyInfo IEnumDebugExtendedPropertyInfo;
#endif 	/* __IEnumDebugExtendedPropertyInfo_FWD_DEFINED__ */


#ifndef __IPerPropertyBrowsing2_FWD_DEFINED__
#define __IPerPropertyBrowsing2_FWD_DEFINED__
typedef interface IPerPropertyBrowsing2 IPerPropertyBrowsing2;
#endif 	/* __IPerPropertyBrowsing2_FWD_DEFINED__ */


#ifndef __IDebugPropertyEnumType_All_FWD_DEFINED__
#define __IDebugPropertyEnumType_All_FWD_DEFINED__
typedef interface IDebugPropertyEnumType_All IDebugPropertyEnumType_All;
#endif 	/* __IDebugPropertyEnumType_All_FWD_DEFINED__ */


#ifndef __IDebugPropertyEnumType_Locals_FWD_DEFINED__
#define __IDebugPropertyEnumType_Locals_FWD_DEFINED__
typedef interface IDebugPropertyEnumType_Locals IDebugPropertyEnumType_Locals;
#endif 	/* __IDebugPropertyEnumType_Locals_FWD_DEFINED__ */


#ifndef __IDebugPropertyEnumType_Arguments_FWD_DEFINED__
#define __IDebugPropertyEnumType_Arguments_FWD_DEFINED__
typedef interface IDebugPropertyEnumType_Arguments IDebugPropertyEnumType_Arguments;
#endif 	/* __IDebugPropertyEnumType_Arguments_FWD_DEFINED__ */


#ifndef __IDebugPropertyEnumType_LocalsPlusArgs_FWD_DEFINED__
#define __IDebugPropertyEnumType_LocalsPlusArgs_FWD_DEFINED__
typedef interface IDebugPropertyEnumType_LocalsPlusArgs IDebugPropertyEnumType_LocalsPlusArgs;
#endif 	/* __IDebugPropertyEnumType_LocalsPlusArgs_FWD_DEFINED__ */


#ifndef __IDebugPropertyEnumType_Registers_FWD_DEFINED__
#define __IDebugPropertyEnumType_Registers_FWD_DEFINED__
typedef interface IDebugPropertyEnumType_Registers IDebugPropertyEnumType_Registers;
#endif 	/* __IDebugPropertyEnumType_Registers_FWD_DEFINED__ */


/* header files for imported files */
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif 

void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free( void * ); 

/* interface __MIDL_itf_dbgprop_0000 */
/* [local] */ 






typedef 
enum tagOBJECT_ATTRIB_FLAG
    {	OBJECT_ATTRIB_NO_ATTRIB	= 0,
	OBJECT_ATTRIB_NO_NAME	= 0x1,
	OBJECT_ATTRIB_NO_TYPE	= 0x2,
	OBJECT_ATTRIB_NO_VALUE	= 0x4,
	OBJECT_ATTRIB_VALUE_IS_INVALID	= 0x8,
	OBJECT_ATTRIB_VALUE_IS_OBJECT	= 0x10,
	OBJECT_ATTRIB_VALUE_IS_ENUM	= 0x20,
	OBJECT_ATTRIB_VALUE_IS_CUSTOM	= 0x40,
	OBJECT_ATTRIB_OBJECT_IS_EXPANDABLE	= 0x70,
	OBJECT_ATTRIB_VALUE_HAS_CODE	= 0x80,
	OBJECT_ATTRIB_TYPE_IS_OBJECT	= 0x100,
	OBJECT_ATTRIB_TYPE_HAS_CODE	= 0x200,
	OBJECT_ATTRIB_TYPE_IS_EXPANDABLE	= 0x100,
	OBJECT_ATTRIB_SLOT_IS_CATEGORY	= 0x400,
	OBJECT_ATTRIB_VALUE_READONLY	= 0x800,
	OBJECT_ATTRIB_ACCESS_PUBLIC	= 0x1000,
	OBJECT_ATTRIB_ACCESS_PRIVATE	= 0x2000,
	OBJECT_ATTRIB_ACCESS_PROTECTED	= 0x4000,
	OBJECT_ATTRIB_ACCESS_FINAL	= 0x8000,
	OBJECT_ATTRIB_STORAGE_GLOBAL	= 0x10000,
	OBJECT_ATTRIB_STORAGE_STATIC	= 0x20000,
	OBJECT_ATTRIB_STORAGE_FIELD	= 0x40000,
	OBJECT_ATTRIB_STORAGE_VIRTUAL	= 0x80000,
	OBJECT_ATTRIB_TYPE_IS_CONSTANT	= 0x100000,
	OBJECT_ATTRIB_TYPE_IS_SYNCHRONIZED	= 0x200000,
	OBJECT_ATTRIB_TYPE_IS_VOLATILE	= 0x400000,
	OBJECT_ATTRIB_HAS_EXTENDED_ATTRIBS	= 0x800000,
	OBJECT_ATTRIB_IS_CLASS	= 0x1000000,
	OBJECT_ATTRIB_IS_FUNCTION	= 0x2000000,
	OBJECT_ATTRIB_IS_VARIABLE	= 0x4000000,
	OBJECT_ATTRIB_IS_PROPERTY	= 0x8000000,
	OBJECT_ATTRIB_IS_MACRO	= 0x10000000,
	OBJECT_ATTRIB_IS_TYPE	= 0x20000000,
	OBJECT_ATTRIB_IS_INHERITED	= 0x40000000,
	OBJECT_ATTRIB_IS_INTERFACE	= 0x80000000
    } 	OBJECT_ATTRIB_FLAGS;

typedef 
enum tagPROP_INFO_FLAGS
    {	PROP_INFO_NAME	= 0x1,
	PROP_INFO_TYPE	= 0x2,
	PROP_INFO_VALUE	= 0x4,
	PROP_INFO_FULLNAME	= 0x20,
	PROP_INFO_ATTRIBUTES	= 0x8,
	PROP_INFO_DEBUGPROP	= 0x10,
	PROP_INFO_AUTOEXPAND	= 0x8000000
    } 	PROP_INFO_FLAGS;

#define	PROP_INFO_STANDARD	( PROP_INFO_NAME | PROP_INFO_TYPE | PROP_INFO_VALUE | PROP_INFO_ATTRIBUTES )

#define	PROP_INFO_ALL	( PROP_INFO_NAME | PROP_INFO_TYPE | PROP_INFO_VALUE | PROP_INFO_FULLNAME | PROP_INFO_ATTRIBUTES | PROP_INFO_DEBUGPROP )

typedef struct tagDebugPropertyInfo
    {
    DWORD m_dwValidFields;
    BSTR m_bstrName;
    BSTR m_bstrType;
    BSTR m_bstrValue;
    BSTR m_bstrFullName;
    DWORD m_dwAttrib;
    IDebugProperty *m_pDebugProp;
    } 	DebugPropertyInfo;

typedef 
enum tagEX_PROP_INFO_FLAGS
    {	EX_PROP_INFO_ID	= 0x100,
	EX_PROP_INFO_NTYPE	= 0x200,
	EX_PROP_INFO_NVALUE	= 0x400,
	EX_PROP_INFO_LOCKBYTES	= 0x800,
	EX_PROP_INFO_DEBUGEXTPROP	= 0x1000
    } 	EX_PROP_INFO_FLAGS;

typedef struct tagExtendedDebugPropertyInfo
    {
    DWORD dwValidFields;
    LPOLESTR pszName;
    LPOLESTR pszType;
    LPOLESTR pszValue;
    LPOLESTR pszFullName;
    DWORD dwAttrib;
    IDebugProperty *pDebugProp;
    DWORD nDISPID;
    DWORD nType;
    VARIANT varValue;
    ILockBytes *plbValue;
    IDebugExtendedProperty *pDebugExtProp;
    } 	ExtendedDebugPropertyInfo;



extern RPC_IF_HANDLE __MIDL_itf_dbgprop_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_dbgprop_0000_v0_0_s_ifspec;

#ifndef __IDebugProperty_INTERFACE_DEFINED__
#define __IDebugProperty_INTERFACE_DEFINED__

/* interface IDebugProperty */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51973C50-CB0C-11d0-B5C9-00A0244A0E7A")
    IDebugProperty : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE GetPropertyInfo( 
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ DebugPropertyInfo *pPropertyInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetExtendedInfo( 
            /* [in] */ ULONG cInfos,
            /* [size_is][in] */ GUID *rgguidExtendedInfo,
            /* [size_is][out] */ VARIANT *rgvar) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE SetValueAsString( 
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ UINT nRadix) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumMembers( 
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [in] */ REFIID refiid,
            /* [out] */ IEnumDebugPropertyInfo **ppepi) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetParent( 
            /* [out] */ IDebugProperty **ppDebugProp) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugProperty * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugProperty * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyInfo )( 
            IDebugProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ DebugPropertyInfo *pPropertyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugProperty * This,
            /* [in] */ ULONG cInfos,
            /* [size_is][in] */ GUID *rgguidExtendedInfo,
            /* [size_is][out] */ VARIANT *rgvar);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsString )( 
            IDebugProperty * This,
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ UINT nRadix);
        
        HRESULT ( STDMETHODCALLTYPE *EnumMembers )( 
            IDebugProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [in] */ REFIID refiid,
            /* [out] */ IEnumDebugPropertyInfo **ppepi);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IDebugProperty * This,
            /* [out] */ IDebugProperty **ppDebugProp);
        
        END_INTERFACE
    } IDebugPropertyVtbl;

    interface IDebugProperty
    {
        CONST_VTBL struct IDebugPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugProperty_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IDebugProperty_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IDebugProperty_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IDebugProperty_GetPropertyInfo(This,dwFieldSpec,nRadix,pPropertyInfo)	\
    (This)->lpVtbl -> GetPropertyInfo(This,dwFieldSpec,nRadix,pPropertyInfo)

#define IDebugProperty_GetExtendedInfo(This,cInfos,rgguidExtendedInfo,rgvar)	\
    (This)->lpVtbl -> GetExtendedInfo(This,cInfos,rgguidExtendedInfo,rgvar)

#define IDebugProperty_SetValueAsString(This,pszValue,nRadix)	\
    (This)->lpVtbl -> SetValueAsString(This,pszValue,nRadix)

#define IDebugProperty_EnumMembers(This,dwFieldSpec,nRadix,refiid,ppepi)	\
    (This)->lpVtbl -> EnumMembers(This,dwFieldSpec,nRadix,refiid,ppepi)

#define IDebugProperty_GetParent(This,ppDebugProp)	\
    (This)->lpVtbl -> GetParent(This,ppDebugProp)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT STDMETHODCALLTYPE IDebugProperty_RemoteGetPropertyInfo_Proxy( 
    IDebugProperty * This,
    /* [in] */ DWORD dwFieldSpec,
    /* [in] */ UINT nRadix,
    /* [out] */ DWORD *dwValidFields,
    /* [out] */ BSTR *pbstrName,
    /* [out] */ BSTR *pbstrType,
    /* [out] */ BSTR *pbstrValue,
    /* [out] */ BSTR *pbstrFullName,
    /* [out] */ DWORD *pdwAttrib,
    /* [unique][out][in] */ IDebugProperty **ppDebugProperty);


void __RPC_STUB IDebugProperty_RemoteGetPropertyInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty_GetExtendedInfo_Proxy( 
    IDebugProperty * This,
    /* [in] */ ULONG cInfos,
    /* [size_is][in] */ GUID *rgguidExtendedInfo,
    /* [size_is][out] */ VARIANT *rgvar);


void __RPC_STUB IDebugProperty_GetExtendedInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty_SetValueAsString_Proxy( 
    IDebugProperty * This,
    /* [in] */ LPCOLESTR pszValue,
    /* [in] */ UINT nRadix);


void __RPC_STUB IDebugProperty_SetValueAsString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty_EnumMembers_Proxy( 
    IDebugProperty * This,
    /* [in] */ DWORD dwFieldSpec,
    /* [in] */ UINT nRadix,
    /* [in] */ REFIID refiid,
    /* [out] */ IEnumDebugPropertyInfo **ppepi);


void __RPC_STUB IDebugProperty_EnumMembers_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IDebugProperty_GetParent_Proxy( 
    IDebugProperty * This,
    /* [out] */ IDebugProperty **ppDebugProp);


void __RPC_STUB IDebugProperty_GetParent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IDebugProperty_INTERFACE_DEFINED__ */


#ifndef __IEnumDebugPropertyInfo_INTERFACE_DEFINED__
#define __IEnumDebugPropertyInfo_INTERFACE_DEFINED__

/* interface IEnumDebugPropertyInfo */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IEnumDebugPropertyInfo;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51973C51-CB0C-11d0-B5C9-00A0244A0E7A")
    IEnumDebugPropertyInfo : public IUnknown
    {
    public:
        virtual /* [local] */ HRESULT STDMETHODCALLTYPE Next( 
            /* [in] */ ULONG celt,
            /* [out] */ DebugPropertyInfo *pi,
            /* [out] */ ULONG *pcEltsfetched) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Skip( 
            /* [in] */ ULONG celt) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Reset( void) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE Clone( 
            /* [out] */ IEnumDebugPropertyInfo **ppepi) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE GetCount( 
            /* [out] */ ULONG *pcelt) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IEnumDebugPropertyInfoVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IEnumDebugPropertyInfo * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IEnumDebugPropertyInfo * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IEnumDebugPropertyInfo * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *Next )( 
            IEnumDebugPropertyInfo * This,
            /* [in] */ ULONG celt,
            /* [out] */ DebugPropertyInfo *pi,
            /* [out] */ ULONG *pcEltsfetched);
        
        HRESULT ( STDMETHODCALLTYPE *Skip )( 
            IEnumDebugPropertyInfo * This,
            /* [in] */ ULONG celt);
        
        HRESULT ( STDMETHODCALLTYPE *Reset )( 
            IEnumDebugPropertyInfo * This);
        
        HRESULT ( STDMETHODCALLTYPE *Clone )( 
            IEnumDebugPropertyInfo * This,
            /* [out] */ IEnumDebugPropertyInfo **ppepi);
        
        HRESULT ( STDMETHODCALLTYPE *GetCount )( 
            IEnumDebugPropertyInfo * This,
            /* [out] */ ULONG *pcelt);
        
        END_INTERFACE
    } IEnumDebugPropertyInfoVtbl;

    interface IEnumDebugPropertyInfo
    {
        CONST_VTBL struct IEnumDebugPropertyInfoVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IEnumDebugPropertyInfo_QueryInterface(This,riid,ppvObject)	\
    (This)->lpVtbl -> QueryInterface(This,riid,ppvObject)

#define IEnumDebugPropertyInfo_AddRef(This)	\
    (This)->lpVtbl -> AddRef(This)

#define IEnumDebugPropertyInfo_Release(This)	\
    (This)->lpVtbl -> Release(This)


#define IEnumDebugPropertyInfo_Next(This,celt,pi,pcEltsfetched)	\
    (This)->lpVtbl -> Next(This,celt,pi,pcEltsfetched)

#define IEnumDebugPropertyInfo_Skip(This,celt)	\
    (This)->lpVtbl -> Skip(This,celt)

#define IEnumDebugPropertyInfo_Reset(This)	\
    (This)->lpVtbl -> Reset(This)

#define IEnumDebugPropertyInfo_Clone(This,ppepi)	\
    (This)->lpVtbl -> Clone(This,ppepi)

#define IEnumDebugPropertyInfo_GetCount(This,pcelt)	\
    (This)->lpVtbl -> GetCount(This,pcelt)

#endif /* COBJMACROS */


#endif 	/* C style interface */



/* [call_as] */ HRESULT __stdcall IEnumDebugPropertyInfo_RemoteNext_Proxy( 
    IEnumDebugPropertyInfo * This,
    /* [in] */ ULONG celt,
    /* [length_is][size_is][unique][out][in] */ DebugPropertyInfo *pinfo,
    /* [out] */ ULONG *pcEltsfetched);


void __RPC_STUB IEnumDebugPropertyInfo_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo_Skip_Proxy( 
    IEnumDebugPropertyInfo * This,
    /* [in] */ ULONG celt);


void __RPC_STUB IEnumDebugPropertyInfo_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo_Reset_Proxy( 
    IEnumDebugPropertyInfo * This);


void __RPC_STUB IEnumDebugPropertyInfo_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo_Clone_Proxy( 
    IEnumDebugPropertyInfo * This,
    /* [out] */ IEnumDebugPropertyInfo **ppepi);


void __RPC_STUB IEnumDebugPropertyInfo_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT STDMETHODCALLTYPE IEnumDebugPropertyInfo_GetCount_Proxy( 
    IEnumDebugPropertyInfo * This,
    /* [out] */ ULONG *pcelt);


void __RPC_STUB IEnumDebugPropertyInfo_GetCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#endif 	/* __IEnumDebugPropertyInfo_INTERFACE_DEFINED__ */


#ifndef __IDebugExtendedProperty_INTERFACE_DEFINED__
#define __IDebugExtendedProperty_INTERFACE_DEFINED__

/* interface IDebugExtendedProperty */
/* [unique][uuid][object] */ 


EXTERN_C const IID IID_IDebugExtendedProperty;

#if defined(__cplusplus) && !defined(CINTERFACE)
    
    MIDL_INTERFACE("51973C52-CB0C-11d0-B5C9-00A0244A0E7A")
    IDebugExtendedProperty : public IDebugProperty
    {
    public:
        virtual HRESULT STDMETHODCALLTYPE GetExtendedPropertyInfo( 
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ ExtendedDebugPropertyInfo *pExtendedPropertyInfo) = 0;
        
        virtual HRESULT STDMETHODCALLTYPE EnumExtendedMembers( 
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugExtendedPropertyInfo **ppeepi) = 0;
        
    };
    
#else 	/* C style interface */

    typedef struct IDebugExtendedPropertyVtbl
    {
        BEGIN_INTERFACE
        
        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( 
            IDebugExtendedProperty * This,
            /* [in] */ REFIID riid,
            /* [iid_is][out] */ void **ppvObject);
        
        ULONG ( STDMETHODCALLTYPE *AddRef )( 
            IDebugExtendedProperty * This);
        
        ULONG ( STDMETHODCALLTYPE *Release )( 
            IDebugExtendedProperty * This);
        
        /* [local] */ HRESULT ( STDMETHODCALLTYPE *GetPropertyInfo )( 
            IDebugExtendedProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ DebugPropertyInfo *pPropertyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedInfo )( 
            IDebugExtendedProperty * This,
            /* [in] */ ULONG cInfos,
            /* [size_is][in] */ GUID *rgguidExtendedInfo,
            /* [size_is][out] */ VARIANT *rgvar);
        
        HRESULT ( STDMETHODCALLTYPE *SetValueAsString )( 
            IDebugExtendedProperty * This,
            /* [in] */ LPCOLESTR pszValue,
            /* [in] */ UINT nRadix);
        
        HRESULT ( STDMETHODCALLTYPE *EnumMembers )( 
            IDebugExtendedProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [in] */ REFIID refiid,
            /* [out] */ IEnumDebugPropertyInfo **ppepi);
        
        HRESULT ( STDMETHODCALLTYPE *GetParent )( 
            IDebugExtendedProperty * This,
            /* [out] */ IDebugProperty **ppDebugProp);
        
        HRESULT ( STDMETHODCALLTYPE *GetExtendedPropertyInfo )( 
            IDebugExtendedProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ ExtendedDebugPropertyInfo *pExtendedPropertyInfo);
        
        HRESULT ( STDMETHODCALLTYPE *EnumExtendedMembers )( 
            IDebugExtendedProperty * This,
            /* [in] */ DWORD dwFieldSpec,
            /* [in] */ UINT nRadix,
            /* [out] */ IEnumDebugExtendedPropertyInfo **ppeepi);
        
        END_INTERFACE
    } IDebugExtendedPropertyVtbl;

    interface IDebugExtendedProperty
    {
        CONST_VTBL struct IDebugExtendedPropertyVtbl *lpVtbl;
    };

    

#ifdef COBJMACROS


#define IDebugExt